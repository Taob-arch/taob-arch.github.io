{
  "name": "minixperiment-client",
  "version": "0.4.5",
  "private": true,
  "description": "Split testing client for Javascript",
  "main": "lib/client.js",
  "scripts": {
    "amd": "./release-transpiled.sh -m amd",
    "umd": "./release-transpiled.sh -m umd",
    "test": "jasmine"
  },
  "keywords": [
    "splittest",
    "ab"
  ],
  "author": {
    "name": "Scott Rabin",
    "email": "srabin@twitch.tv"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git@git-aws.internal.justin.tv:common/minixperiment-client.git"
  },
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-webpack": "^1.0.8",
    "jasmine": "^2.3.2",
    "webpack": "^1.12.9",
    "webpack-dev-server": "^1.14.0"
  },
  "gitHead": "1fcf14e128951c9c24f81b201b36e89afaf83007",
  "readme": "# Overview\n\n`minixperiment-client-js` is a Twitch internal library for interfacing with the\nMinixperiment configuration service in Javascript environments.\n\nThe client library handles interfacing with the various experiment configuration\nservices via `providers`, which are minimally configured interfaces for\nretrieving experiment configurations from various sources. It also handles\nreporting experiment treatments into various services that track split testing\nresults.\n\nIt is **VERY IMPORTANT** that experiment treatments are only requested at the\ntime of use; it will send a tracking event back to the data aggregation service\nthat a user has been assigned into a specific treatment, and requesting the\ntreatment before use *does not* guarantee that the user experiences the\ntreatment, which can negatively affect the validity of the data set.\n\n# Installation\n\n`npm install --save git+ssh://git@git-aws.internal.justin.tv:common/minixperiment-client-js.git`\n\nTypically, you should use one of the tagged releases. There are three variants\nto choose from: AMD, UMD, and Common JS. Each release is versioned in accordance\nwith Semver; major releases are backwards-incompatible, minor releases are\nbackwards-compatible but may change functionality, and patch releases should not\naffect the interface or return values except as required to correct buggy behavior.\n\n*Common JS* releases are tagged as *vx.y.z*\n*AMD* releases are tagged as `vx.y.z-amd`\n*UMD* releases are tagged as `vx.y.z-umd`\n\nAMD and UMD releases contain a few precompiled files meant for inclusion via\nmodule loaders or `<script>` tags directly; these files are located under\n`dist/`. Include the primary `minixperiment.client.js` bundle and one of the\nproviders, as necessary. See [Providers](#Providers).\n\n# API\n\n## new MinixperimentClient(config:Object)\n\nCreates a new Minixperiment client. This is *required* to use Minixperiment.\n\nParameters:\n```js\n{\n    /* The default values for the experiments used by the application. Should\n       anything go wrong with retrieving the experiment configuration, these\n       defaults will guarantee that your application does not break. */\n    \"defaults\": {\n        \"2ef17794-14af-4448-bf23-691c96a72995\": \"override me\",\n        \"3f589f3f-d5a3-4191-9f70-5d1532925da9\": \"default value\"\n    },\n\n    /* The unique device ID associated with the consumer. For web-client, this\n       is the device ID assigned to the web browser. Other consumers of this\n       library will need to generate a unique identifier for a client/user as\n       needed, and persist it across sessions as necessary. */\n    \"deviceID\": \"1234567890abcdef\",\n\n    /* The override values for any experiments with separate business logic\n       controlling whether or not a user should be forced into a particular\n       treatment group. Values may be strings, or Promises that resolve to\n       strings, or (if the determination is made to *not* override the assignment\n       for the user), a rejected Promise. If the Promise is rejected, then the\n       assignment proceeds as if there were no override; otherwise, the given\n       value is returned in all subsequent calls to `get`. */\n    \"overrides\": {\n        \"2ef17794-14af-4448-bf23-691c96a72995\": \"override value\",\n        \"3f589f3f-d5a3-4191-9f70-5d1532925da9\": Promise.reject(\"ignore this\")\n    },\n\n    /* The location of the consumer. For web, this is \"web\". */\n    \"platform\": \"web\",\n\n    /* The experiment configuration source. Minixperiment is bundled\n       with two providers: Local and Service. See [Providers](#Providers)\n       for more information. */\n    \"provider\": new Provider(...),\n\n    /* If this client is being used in a context where users can be\n       logged in, this should be set to the login name of the user. */\n    \"login\":    \"YourUser\", // or null, if the user is not logged in\n\n    /* The injected Promises library, if being used in a context where\n       the native Promise object is not available. */\n    \"Promise\":  Ember.RSVP.Promise\n}\n```\n\n## minixperiment.get(experimentID:String):Promise<String>\n\nRetrieves a group assignment from the configured experiment set. The return value\nis a Promise containing a string; this is configured value, either from a locally\nsourced configuration or from the service.\n\nThe group assignment should ALWAYS be normalized against a known set of valid\nvalues; if an unexpected value is returned from the service, the program should\nnot fail. For example, if your program expects to be assigned into either\n`\"control\"` or `\"experiment\"`, then if the service is configured to return\nanother group `\"test\"`, the program should fall back to a valid \"base\" group;\nin this example, it would be `\"control\"`.\n\nThe return value _SHOULD NOT_ be cached; you will get consistent assignments per\nexperiment at each call, but caching the value will prevent analytics from being\ncollected.\n\nIf an error is encountered at any point, the value contained in the returned\npromise will be the default value configured when instantiating the client.\n\n# Example\n\nSee the [`example`](https://git-aws.internal.justin.tv/common/minixperiment-client-js/tree/master/example)\ndirectory for a working example of this library.\n\n# Appendix\n\n## Client\n\n```js\nvar MinixperimentClient = require('minixperiment-client');\n\n// or ES6\n\nimport MinixperimentClient from 'minixperiment-client';\n\nconst EXPERIMENT_UUID = \"3f589f3f-d5a3-4191-9f70-5d1532925da9\";\n\n// Configure the service; this MUST be done before attempting to retrieve any\n// experiment treatment assignments!\n// Additionally, this should only happen once; reconfiguring the library after\n// it has been used may cause unexpected behavior.\nlet client = new MinixperimentClient({\n    // Consumers MUST provide defaults for all experiments they will use over\n    // the course of the application.\n    defaults: {\n        [EXPERIMENT_UUID]: \"experiment default value\"\n    },\n\n    // Consumers MUST provide the device ID used to assign users into\n    // treatment groups\n    deviceID: \"abc123\",\n\n    // Consumers MUST provide the platform for this particular integration;\n    // e.g. the web client should pass in `web` for this parameter\n    platform: \"web\",\n\n    // Consumers SHOULD provide the username associated with this event, if\n    // the user is logged in. The property may be omitted otherwise, or can be\n    // set to `null`\n    login: \"KappaSpammer98\",\n\n    // See [Providers](#Providers)\n    provider: new Provider(/* ... */),\n\n    // You'll also need to provide a valid Promises/A+-compliant library\n    Promise:  Promise\n});\n\n// Get the experimental treatment assignment\nvar assignment = minixperiment.get(EXPERIMENT_UUID);\n\n// `assignment` is a Promise containing the treatment value to use for the\n// experiment; if there is a problem retrieving the assignment, the default\n// value provided during client instantiation will be returned (or `null`, if\n// a default value is not specified)\n\nassignment.then(function(treatment) {\n    switch (treatment) {\n    case 'control':\n        doTheNormalThing();\n        break;\n    case 'treatment A':\n        doSomethingExperimental();\n        break;\n    }\n});\n```\n\n## Experiments Configuration\n\nA valid experiments configuration is a hash of experiment uuid to experiment\nconfiguration. An experiment configuration should have a field, `groups`, which\nis an array of `value`s and `weight`s. Example:\n\n```js\nvar experimentsConfig = {\n    \"de305d54-75b4-431b-adb2-eb6b9e546014\": {\n        name:   \"A human-readable name of the experiment\",\n        groups: [\n            { value: \"true\",  weight: 1 },\n            { value: \"false\", weight: 9 }\n        ]\n    }\n};\n```\n\nValues are always strings; as above, `\"true\"` and `\"false\"` will returned by\nthe service, not the Javascript `true` and `false` boolean values.\n\nWeights must be non-negative integers, and represent the relative size of the\ntreatment groups to which user will be assigned. In the above example, 10% of\nuser will receive a value of `true` for the `enable_new_feature` experiment,\nwhile 90% of users will receive a value of `false`.\n\n## Providers\n\nProviders are Minixperiment's way of accessing the experiment configuration.\nYou will need to provide Minixperiment with a provider in the initial call to\ninstantiate the client. The provider you use to configure Minixperiment will be\nused to retrieve experiment assignments needed at various points in your app.\n\n### LocalProvider\n\nThe `LocalProvider` is a thin wrapper around an experiment configuration that\nyou already have, and just need to expose through Minixperiment. This is currently\nused on web-client; the experiment configuration is set in an ArbKey and made\navailable through `SiteOptions`, which is passed in to Minixperiment via a\n`LocalProvider`. It is also useful for testing various configurations during\ndevelopment, and defaulting back to the `ServiceProvider` when development is\ndone.\n\n```js\n// note: this example uses the globals created by the UMD build\nvar client = new Minixperiment.Client({\n    // ...\n    provider: new Minixperiment.providers.local.LocalProvider(SiteOptions.experiments)\n});\n```\n\n### ServiceProvider\n\nThe `ServiceProvider` fetches the experiment configuration from the specified\nMinixperiment server (local for development, or a staging/production server),\nso that users can change experiments without requiring a code deployment. This\ndoes introduce a small delay before `get` calls resolve while the request is in\nprogress. The `ServiceProvider` exposes a `SERVICE_URL` constant that points to\nthe production Minixperiment service.\n\n```js\n// note: this example uses the globals created by the UMD build\nvar client = new Minixperiment.Client({\n    // ...\n    provider: new Minixperiment.providers.service.ServiceProvider(Minixperiment.providers.service.SERVICE_URL)\n});\n```\n",
  "readmeFilename": "README.md",
  "_id": "minixperiment-client@0.4.5",
  "_shasum": "58f4ef787ecb867eba7f185c1bfe29b668845e5d",
  "_from": "git+ssh://git@git-aws.internal.justin.tv:common/minixperiment-client-js.git#v0.4.5",
  "_resolved": "git+ssh://git@git-aws.internal.justin.tv:common/minixperiment-client-js.git#1fcf14e128951c9c24f81b201b36e89afaf83007"
}
