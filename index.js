/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 69);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.

var OptionsMenu = __webpack_require__(90);
var MainMenu = __webpack_require__(91);
var TwitchManager = __webpack_require__(185);
var HubbleManager = __webpack_require__(191);
var StateManager = __webpack_require__(192);
var GamestateManager = __webpack_require__(193);
var DemoManager = __webpack_require__(194);
var ChatManager = __webpack_require__(195);
var UgcManager = __webpack_require__(196);

module.exports.GameInstance = undefined;

module.exports.twitchManager = new TwitchManager();
module.exports.hubbleManager = new HubbleManager();
module.exports.stateManager = new StateManager();
module.exports.gamestateManager = new GamestateManager();
module.exports.demoManager = new DemoManager();
module.exports.chatManager = new ChatManager();
module.exports.ugcManager = new UgcManager();

module.exports.mainMenu = new MainMenu();
module.exports.optionsMenu = new OptionsMenu();

var hostList = [{
    name: "LOCALHOST",
    address: "localhost:8081",
    clientId: "ghuzblkclad8xme01z9kpgokf5u94k",
    secret: "xfptmi9g2tp4o3d02al28v8f0zmnx9",
    msiUrl: "https://s3.us-east-2.amazonaws.com/hedgehog-prod/tycho/The+Collaborative%3A+Automaton+%230059.msi",
    activityKey: "TYCHODEV"
}, {
    name: "RYAN",
    address: "10.53.124.111:8081",
    clientId: "o8mhjwik320kz7digm90sjfomh1m05",
    secret: "rx21qprcrkha406rg7wk9onsyu71t0",
    msiUrl: "https://s3.us-east-2.amazonaws.com/hedgehog-prod/tycho/The+Collaborative%3A+Automaton+%230059.msi",
    activityKey: "TYCHODEV"
}, {
    name: "DORIAN",
    address: "10.53.124.126:8081",
    clientId: "otij5oto88c745d154tnezrdk6itjr",
    secret: "g53wm28xn78tafnki4msm8p6ze1e39",
    msiUrl: "https://s3.us-east-2.amazonaws.com/hedgehog-prod/tycho/The+Collaborative%3A+Automaton+%230059.msi",
    activityKey: "TYCHODEV"
}, {
    name: "GAMMA",
    address: "d3dbr4alxmdawr.cloudfront.net/tycho",
    clientId: "cc3lu56qvga64l390qlifwe61ys0w9",
    secret: "zdwctl5v36lwmysfjs75yviraa5ikb",
    msiUrl: "https://s3.amazonaws.com/hedgehog-gamma/tycho/The+Collaborative.msi",
    activityKey: "TYCHODEV"
}, {
    name: "PROD",
    address: "collaborativegame.com",
    clientId: "a8wrtwqvyloaoa1x0nun1kwy0h7r6k",
    secret: "ooy05vuzf6v1i8pc5o08ljiq2to8jd",
    msiUrl: "https://s3.us-east-2.amazonaws.com/hedgehog-prod/tycho/The+Collaborative%3A+Automaton+%230059.msi",
    activityKey: "TYCHO"
}];

module.exports.hostData = hostList.find(function (host) {
    return host.name === "LOCALHOST";
});

module.exports.screenDimensions = {
    screenWidth: 1920,
    screenHeight: 1080

    // This value matches scalar set in global shader. See three.js line 6009
};module.exports.EMISSIVE_GLOBAL_SCALAR = 10.0;

/**
 * @typedef {Object} Teams Enum
 * @property {number} Collaborators 1
 * @property {number} Competitor 2
 */
var Teams = Object.freeze({
    Collaborators: 1,
    Threat: 2
});
module.exports.Teams = Teams;

// We want the version in code to match our release version in Git,
// but also want the public version to start less than 1.0.0 for our preleases
var version = "1.6.0";
module.exports.getVersion = function () {
    var parts = version.split(".");
    parts[0] = (parseInt(parts[0]) - 1).toString();
    return parts.join(".");
};

module.exports.getGitVersion = function () {
    return version;
};

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};(function(global,factory){( false?'undefined':_typeof(exports))==='object'&&typeof module!=='undefined'?factory(exports): true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):factory(global.THREE={});})(undefined,function(exports){'use strict';// Polyfills
if(Number.EPSILON===undefined){Number.EPSILON=Math.pow(2,-52);}if(Number.isInteger===undefined){// Missing in IE
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger
Number.isInteger=function(value){return typeof value==='number'&&isFinite(value)&&Math.floor(value)===value;};}//
if(Math.sign===undefined){// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign
Math.sign=function(x){return x<0?-1:x>0?1:+x;};}if('name'in Function.prototype===false){// Missing in IE
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name
Object.defineProperty(Function.prototype,'name',{get:function get(){return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1];}});}if(Object.assign===undefined){// Missing in IE
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
(function(){Object.assign=function(target){if(target===undefined||target===null){throw new TypeError('Cannot convert undefined or null to object');}var output=Object(target);for(var index=1;index<arguments.length;index++){var source=arguments[index];if(source!==undefined&&source!==null){for(var nextKey in source){if(Object.prototype.hasOwnProperty.call(source,nextKey)){output[nextKey]=source[nextKey];}}}}return output;};})();}/**
	 * https://github.com/mrdoob/eventdispatcher.js/
	 */function EventDispatcher(){}Object.assign(EventDispatcher.prototype,{addEventListener:function addEventListener(type,listener){if(this._listeners===undefined)this._listeners={};var listeners=this._listeners;if(listeners[type]===undefined){listeners[type]=[];}if(listeners[type].indexOf(listener)===-1){listeners[type].push(listener);}},hasEventListener:function hasEventListener(type,listener){if(this._listeners===undefined)return false;var listeners=this._listeners;return listeners[type]!==undefined&&listeners[type].indexOf(listener)!==-1;},removeEventListener:function removeEventListener(type,listener){if(this._listeners===undefined)return;var listeners=this._listeners;var listenerArray=listeners[type];if(listenerArray!==undefined){var index=listenerArray.indexOf(listener);if(index!==-1){listenerArray.splice(index,1);}}},dispatchEvent:function dispatchEvent(event){if(this._listeners===undefined)return;var listeners=this._listeners;var listenerArray=listeners[event.type];if(listenerArray!==undefined){event.target=this;var array=listenerArray.slice(0);for(var i=0,l=array.length;i<l;i++){array[i].call(this,event);}}}});var REVISION='97dev';var MOUSE={LEFT:0,MIDDLE:1,RIGHT:2};var CullFaceNone=0;var CullFaceBack=1;var CullFaceFront=2;var CullFaceFrontBack=3;var FrontFaceDirectionCW=0;var FrontFaceDirectionCCW=1;var BasicShadowMap=0;var PCFShadowMap=1;var PCFSoftShadowMap=2;var FrontSide=0;var BackSide=1;var DoubleSide=2;var FlatShading=1;var SmoothShading=2;var NoColors=0;var FaceColors=1;var VertexColors=2;var NoBlending=0;var NormalBlending=1;var AdditiveBlending=2;var SubtractiveBlending=3;var MultiplyBlending=4;var CustomBlending=5;var AddEquation=100;var SubtractEquation=101;var ReverseSubtractEquation=102;var MinEquation=103;var MaxEquation=104;var ZeroFactor=200;var OneFactor=201;var SrcColorFactor=202;var OneMinusSrcColorFactor=203;var SrcAlphaFactor=204;var OneMinusSrcAlphaFactor=205;var DstAlphaFactor=206;var OneMinusDstAlphaFactor=207;var DstColorFactor=208;var OneMinusDstColorFactor=209;var SrcAlphaSaturateFactor=210;var NeverDepth=0;var AlwaysDepth=1;var LessDepth=2;var LessEqualDepth=3;var EqualDepth=4;var GreaterEqualDepth=5;var GreaterDepth=6;var NotEqualDepth=7;var MultiplyOperation=0;var MixOperation=1;var AddOperation=2;var NoToneMapping=0;var LinearToneMapping=1;var ReinhardToneMapping=2;var Uncharted2ToneMapping=3;var CineonToneMapping=4;var UVMapping=300;var CubeReflectionMapping=301;var CubeRefractionMapping=302;var EquirectangularReflectionMapping=303;var EquirectangularRefractionMapping=304;var SphericalReflectionMapping=305;var CubeUVReflectionMapping=306;var CubeUVRefractionMapping=307;var RepeatWrapping=1000;var ClampToEdgeWrapping=1001;var MirroredRepeatWrapping=1002;var NearestFilter=1003;var NearestMipMapNearestFilter=1004;var NearestMipMapLinearFilter=1005;var LinearFilter=1006;var LinearMipMapNearestFilter=1007;var LinearMipMapLinearFilter=1008;var UnsignedByteType=1009;var ByteType=1010;var ShortType=1011;var UnsignedShortType=1012;var IntType=1013;var UnsignedIntType=1014;var FloatType=1015;var HalfFloatType=1016;var UnsignedShort4444Type=1017;var UnsignedShort5551Type=1018;var UnsignedShort565Type=1019;var UnsignedInt248Type=1020;var AlphaFormat=1021;var RGBFormat=1022;var RGBAFormat=1023;var LuminanceFormat=1024;var LuminanceAlphaFormat=1025;var RGBEFormat=RGBAFormat;var DepthFormat=1026;var DepthStencilFormat=1027;var RedFormat=1028;var RGB_S3TC_DXT1_Format=33776;var RGBA_S3TC_DXT1_Format=33777;var RGBA_S3TC_DXT3_Format=33778;var RGBA_S3TC_DXT5_Format=33779;var RGB_PVRTC_4BPPV1_Format=35840;var RGB_PVRTC_2BPPV1_Format=35841;var RGBA_PVRTC_4BPPV1_Format=35842;var RGBA_PVRTC_2BPPV1_Format=35843;var RGB_ETC1_Format=36196;var RGBA_ASTC_4x4_Format=37808;var RGBA_ASTC_5x4_Format=37809;var RGBA_ASTC_5x5_Format=37810;var RGBA_ASTC_6x5_Format=37811;var RGBA_ASTC_6x6_Format=37812;var RGBA_ASTC_8x5_Format=37813;var RGBA_ASTC_8x6_Format=37814;var RGBA_ASTC_8x8_Format=37815;var RGBA_ASTC_10x5_Format=37816;var RGBA_ASTC_10x6_Format=37817;var RGBA_ASTC_10x8_Format=37818;var RGBA_ASTC_10x10_Format=37819;var RGBA_ASTC_12x10_Format=37820;var RGBA_ASTC_12x12_Format=37821;var LoopOnce=2200;var LoopRepeat=2201;var LoopPingPong=2202;var InterpolateDiscrete=2300;var InterpolateLinear=2301;var InterpolateSmooth=2302;var ZeroCurvatureEnding=2400;var ZeroSlopeEnding=2401;var WrapAroundEnding=2402;var TrianglesDrawMode=0;var TriangleStripDrawMode=1;var TriangleFanDrawMode=2;var LinearEncoding=3000;var sRGBEncoding=3001;var GammaEncoding=3007;var RGBEEncoding=3002;var LogLuvEncoding=3003;var RGBM7Encoding=3004;var RGBM16Encoding=3005;var RGBDEncoding=3006;var BasicDepthPacking=3200;var RGBADepthPacking=3201;var TangentSpaceNormalMap=0;var ObjectSpaceNormalMap=1;/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */var _Math={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:function(){// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
var lut=[];for(var i=0;i<256;i++){lut[i]=(i<16?'0':'')+i.toString(16);}return function generateUUID(){var d0=Math.random()*0xffffffff|0;var d1=Math.random()*0xffffffff|0;var d2=Math.random()*0xffffffff|0;var d3=Math.random()*0xffffffff|0;var uuid=lut[d0&0xff]+lut[d0>>8&0xff]+lut[d0>>16&0xff]+lut[d0>>24&0xff]+'-'+lut[d1&0xff]+lut[d1>>8&0xff]+'-'+lut[d1>>16&0x0f|0x40]+lut[d1>>24&0xff]+'-'+lut[d2&0x3f|0x80]+lut[d2>>8&0xff]+'-'+lut[d2>>16&0xff]+lut[d2>>24&0xff]+lut[d3&0xff]+lut[d3>>8&0xff]+lut[d3>>16&0xff]+lut[d3>>24&0xff];// .toUpperCase() here flattens concatenated strings to save heap memory space.
return uuid.toUpperCase();};}(),clamp:function clamp(value,min,max){return Math.max(min,Math.min(max,value));},// compute euclidian modulo of m % n
// https://en.wikipedia.org/wiki/Modulo_operation
euclideanModulo:function euclideanModulo(n,m){return(n%m+m)%m;},// Linear mapping from range <a1, a2> to range <b1, b2>
mapLinear:function mapLinear(x,a1,a2,b1,b2){return b1+(x-a1)*(b2-b1)/(a2-a1);},// https://en.wikipedia.org/wiki/Linear_interpolation
lerp:function lerp(x,y,t){return(1-t)*x+t*y;},// http://en.wikipedia.org/wiki/Smoothstep
smoothstep:function smoothstep(x,min,max){if(x<=min)return 0;if(x>=max)return 1;x=(x-min)/(max-min);return x*x*(3-2*x);},smootherstep:function smootherstep(x,min,max){if(x<=min)return 0;if(x>=max)return 1;x=(x-min)/(max-min);return x*x*x*(x*(x*6-15)+10);},// Random integer from <low, high> interval
randInt:function randInt(low,high){return low+Math.floor(Math.random()*(high-low+1));},// Random float from <low, high> interval
randFloat:function randFloat(low,high){return low+Math.random()*(high-low);},// Random float from <-range/2, range/2> interval
randFloatSpread:function randFloatSpread(range){return range*(0.5-Math.random());},degToRad:function degToRad(degrees){return degrees*_Math.DEG2RAD;},radToDeg:function radToDeg(radians){return radians*_Math.RAD2DEG;},isPowerOfTwo:function isPowerOfTwo(value){return(value&value-1)===0&&value!==0;},ceilPowerOfTwo:function ceilPowerOfTwo(value){return Math.pow(2,Math.ceil(Math.log(value)/Math.LN2));},floorPowerOfTwo:function floorPowerOfTwo(value){return Math.pow(2,Math.floor(Math.log(value)/Math.LN2));}};/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author philogb / http://blog.thejit.org/
	 * @author egraether / http://egraether.com/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */function Vector2(x,y){this.x=x||0;this.y=y||0;}Object.defineProperties(Vector2.prototype,{"width":{get:function get(){return this.x;},set:function set(value){this.x=value;}},"height":{get:function get(){return this.y;},set:function set(value){this.y=value;}}});Object.assign(Vector2.prototype,{isVector2:true,set:function set(x,y){this.x=x;this.y=y;return this;},setScalar:function setScalar(scalar){this.x=scalar;this.y=scalar;return this;},setX:function setX(x){this.x=x;return this;},setY:function setY(y){this.y=y;return this;},setComponent:function setComponent(index,value){switch(index){case 0:this.x=value;break;case 1:this.y=value;break;default:throw new Error('index is out of range: '+index);}return this;},getComponent:function getComponent(index){switch(index){case 0:return this.x;case 1:return this.y;default:throw new Error('index is out of range: '+index);}},clone:function clone(){return new this.constructor(this.x,this.y);},copy:function copy(v){this.x=v.x;this.y=v.y;return this;},add:function add(v,w){if(w!==undefined){console.warn('THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');return this.addVectors(v,w);}this.x+=v.x;this.y+=v.y;return this;},addScalar:function addScalar(s){this.x+=s;this.y+=s;return this;},addVectors:function addVectors(a,b){this.x=a.x+b.x;this.y=a.y+b.y;return this;},addScaledVector:function addScaledVector(v,s){this.x+=v.x*s;this.y+=v.y*s;return this;},sub:function sub(v,w){if(w!==undefined){console.warn('THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');return this.subVectors(v,w);}this.x-=v.x;this.y-=v.y;return this;},subScalar:function subScalar(s){this.x-=s;this.y-=s;return this;},subVectors:function subVectors(a,b){this.x=a.x-b.x;this.y=a.y-b.y;return this;},multiply:function multiply(v){this.x*=v.x;this.y*=v.y;return this;},multiplyScalar:function multiplyScalar(scalar){this.x*=scalar;this.y*=scalar;return this;},divide:function divide(v){this.x/=v.x;this.y/=v.y;return this;},divideScalar:function divideScalar(scalar){return this.multiplyScalar(1/scalar);},applyMatrix3:function applyMatrix3(m){var x=this.x,y=this.y;var e=m.elements;this.x=e[0]*x+e[3]*y+e[6];this.y=e[1]*x+e[4]*y+e[7];return this;},min:function min(v){this.x=Math.min(this.x,v.x);this.y=Math.min(this.y,v.y);return this;},max:function max(v){this.x=Math.max(this.x,v.x);this.y=Math.max(this.y,v.y);return this;},clamp:function clamp(min,max){// assumes min < max, componentwise
this.x=Math.max(min.x,Math.min(max.x,this.x));this.y=Math.max(min.y,Math.min(max.y,this.y));return this;},clampScalar:function(){var min=new Vector2();var max=new Vector2();return function clampScalar(minVal,maxVal){min.set(minVal,minVal);max.set(maxVal,maxVal);return this.clamp(min,max);};}(),clampLength:function clampLength(min,max){var length=this.length();return this.divideScalar(length||1).multiplyScalar(Math.max(min,Math.min(max,length)));},floor:function floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);return this;},ceil:function ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);return this;},round:function round(){this.x=Math.round(this.x);this.y=Math.round(this.y);return this;},roundToZero:function roundToZero(){this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x);this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y);return this;},negate:function negate(){this.x=-this.x;this.y=-this.y;return this;},dot:function dot(v){return this.x*v.x+this.y*v.y;},cross:function cross(v){return this.x*v.y-this.y*v.x;},lengthSq:function lengthSq(){return this.x*this.x+this.y*this.y;},length:function length(){return Math.sqrt(this.x*this.x+this.y*this.y);},manhattanLength:function manhattanLength(){return Math.abs(this.x)+Math.abs(this.y);},normalize:function normalize(){return this.divideScalar(this.length()||1);},angle:function angle(){// computes the angle in radians with respect to the positive x-axis
var angle=Math.atan2(this.y,this.x);if(angle<0)angle+=2*Math.PI;return angle;},distanceTo:function distanceTo(v){return Math.sqrt(this.distanceToSquared(v));},distanceToSquared:function distanceToSquared(v){var dx=this.x-v.x,dy=this.y-v.y;return dx*dx+dy*dy;},manhattanDistanceTo:function manhattanDistanceTo(v){return Math.abs(this.x-v.x)+Math.abs(this.y-v.y);},setLength:function setLength(length){return this.normalize().multiplyScalar(length);},lerp:function lerp(v,alpha){this.x+=(v.x-this.x)*alpha;this.y+=(v.y-this.y)*alpha;return this;},lerpVectors:function lerpVectors(v1,v2,alpha){return this.subVectors(v2,v1).multiplyScalar(alpha).add(v1);},equals:function equals(v){return v.x===this.x&&v.y===this.y;},fromArray:function fromArray(array,offset){if(offset===undefined)offset=0;this.x=array[offset];this.y=array[offset+1];return this;},toArray:function toArray(array,offset){if(array===undefined)array=[];if(offset===undefined)offset=0;array[offset]=this.x;array[offset+1]=this.y;return array;},fromBufferAttribute:function fromBufferAttribute(attribute,index,offset){if(offset!==undefined){console.warn('THREE.Vector2: offset has been removed from .fromBufferAttribute().');}this.x=attribute.getX(index);this.y=attribute.getY(index);return this;},rotateAround:function rotateAround(center,angle){var c=Math.cos(angle),s=Math.sin(angle);var x=this.x-center.x;var y=this.y-center.y;this.x=x*c-y*s+center.x;this.y=x*s+y*c+center.y;return this;}});/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author philogb / http://blog.thejit.org/
	 * @author jordi_ros / http://plattsoft.com
	 * @author D1plo1d / http://github.com/D1plo1d
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author timknip / http://www.floorplanner.com/
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 */function Matrix4(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];if(arguments.length>0){console.error('THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.');}}Object.assign(Matrix4.prototype,{isMatrix4:true,set:function set(n11,n12,n13,n14,n21,n22,n23,n24,n31,n32,n33,n34,n41,n42,n43,n44){var te=this.elements;te[0]=n11;te[4]=n12;te[8]=n13;te[12]=n14;te[1]=n21;te[5]=n22;te[9]=n23;te[13]=n24;te[2]=n31;te[6]=n32;te[10]=n33;te[14]=n34;te[3]=n41;te[7]=n42;te[11]=n43;te[15]=n44;return this;},identity:function identity(){this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);return this;},clone:function clone(){return new Matrix4().fromArray(this.elements);},copy:function copy(m){var te=this.elements;var me=m.elements;te[0]=me[0];te[1]=me[1];te[2]=me[2];te[3]=me[3];te[4]=me[4];te[5]=me[5];te[6]=me[6];te[7]=me[7];te[8]=me[8];te[9]=me[9];te[10]=me[10];te[11]=me[11];te[12]=me[12];te[13]=me[13];te[14]=me[14];te[15]=me[15];return this;},copyPosition:function copyPosition(m){var te=this.elements,me=m.elements;te[12]=me[12];te[13]=me[13];te[14]=me[14];return this;},extractBasis:function extractBasis(xAxis,yAxis,zAxis){xAxis.setFromMatrixColumn(this,0);yAxis.setFromMatrixColumn(this,1);zAxis.setFromMatrixColumn(this,2);return this;},makeBasis:function makeBasis(xAxis,yAxis,zAxis){this.set(xAxis.x,yAxis.x,zAxis.x,0,xAxis.y,yAxis.y,zAxis.y,0,xAxis.z,yAxis.z,zAxis.z,0,0,0,0,1);return this;},extractRotation:function(){var v1=new Vector3();return function extractRotation(m){// this method does not support reflection matrices
var te=this.elements;var me=m.elements;var scaleX=1/v1.setFromMatrixColumn(m,0).length();var scaleY=1/v1.setFromMatrixColumn(m,1).length();var scaleZ=1/v1.setFromMatrixColumn(m,2).length();te[0]=me[0]*scaleX;te[1]=me[1]*scaleX;te[2]=me[2]*scaleX;te[3]=0;te[4]=me[4]*scaleY;te[5]=me[5]*scaleY;te[6]=me[6]*scaleY;te[7]=0;te[8]=me[8]*scaleZ;te[9]=me[9]*scaleZ;te[10]=me[10]*scaleZ;te[11]=0;te[12]=0;te[13]=0;te[14]=0;te[15]=1;return this;};}(),makeRotationFromEuler:function makeRotationFromEuler(euler){if(!(euler&&euler.isEuler)){console.error('THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.');}var te=this.elements;var x=euler.x,y=euler.y,z=euler.z;var a=Math.cos(x),b=Math.sin(x);var c=Math.cos(y),d=Math.sin(y);var e=Math.cos(z),f=Math.sin(z);if(euler.order==='XYZ'){var ae=a*e,af=a*f,be=b*e,bf=b*f;te[0]=c*e;te[4]=-c*f;te[8]=d;te[1]=af+be*d;te[5]=ae-bf*d;te[9]=-b*c;te[2]=bf-ae*d;te[6]=be+af*d;te[10]=a*c;}else if(euler.order==='YXZ'){var ce=c*e,cf=c*f,de=d*e,df=d*f;te[0]=ce+df*b;te[4]=de*b-cf;te[8]=a*d;te[1]=a*f;te[5]=a*e;te[9]=-b;te[2]=cf*b-de;te[6]=df+ce*b;te[10]=a*c;}else if(euler.order==='ZXY'){var ce=c*e,cf=c*f,de=d*e,df=d*f;te[0]=ce-df*b;te[4]=-a*f;te[8]=de+cf*b;te[1]=cf+de*b;te[5]=a*e;te[9]=df-ce*b;te[2]=-a*d;te[6]=b;te[10]=a*c;}else if(euler.order==='ZYX'){var ae=a*e,af=a*f,be=b*e,bf=b*f;te[0]=c*e;te[4]=be*d-af;te[8]=ae*d+bf;te[1]=c*f;te[5]=bf*d+ae;te[9]=af*d-be;te[2]=-d;te[6]=b*c;te[10]=a*c;}else if(euler.order==='YZX'){var ac=a*c,ad=a*d,bc=b*c,bd=b*d;te[0]=c*e;te[4]=bd-ac*f;te[8]=bc*f+ad;te[1]=f;te[5]=a*e;te[9]=-b*e;te[2]=-d*e;te[6]=ad*f+bc;te[10]=ac-bd*f;}else if(euler.order==='XZY'){var ac=a*c,ad=a*d,bc=b*c,bd=b*d;te[0]=c*e;te[4]=-f;te[8]=d*e;te[1]=ac*f+bd;te[5]=a*e;te[9]=ad*f-bc;te[2]=bc*f-ad;te[6]=b*e;te[10]=bd*f+ac;}// bottom row
te[3]=0;te[7]=0;te[11]=0;// last column
te[12]=0;te[13]=0;te[14]=0;te[15]=1;return this;},makeRotationFromQuaternion:function(){var zero=new Vector3(0,0,0);var one=new Vector3(1,1,1);return function makeRotationFromQuaternion(q){return this.compose(zero,q,one);};}(),lookAt:function(){var x=new Vector3();var y=new Vector3();var z=new Vector3();return function lookAt(eye,target,up){var te=this.elements;z.subVectors(eye,target);if(z.lengthSq()===0){// eye and target are in the same position
z.z=1;}z.normalize();x.crossVectors(up,z);if(x.lengthSq()===0){// up and z are parallel
if(Math.abs(up.z)===1){z.x+=0.0001;}else{z.z+=0.0001;}z.normalize();x.crossVectors(up,z);}x.normalize();y.crossVectors(z,x);te[0]=x.x;te[4]=y.x;te[8]=z.x;te[1]=x.y;te[5]=y.y;te[9]=z.y;te[2]=x.z;te[6]=y.z;te[10]=z.z;return this;};}(),multiply:function multiply(m,n){if(n!==undefined){console.warn('THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.');return this.multiplyMatrices(m,n);}return this.multiplyMatrices(this,m);},premultiply:function premultiply(m){return this.multiplyMatrices(m,this);},multiplyMatrices:function multiplyMatrices(a,b){var ae=a.elements;var be=b.elements;var te=this.elements;var a11=ae[0],a12=ae[4],a13=ae[8],a14=ae[12];var a21=ae[1],a22=ae[5],a23=ae[9],a24=ae[13];var a31=ae[2],a32=ae[6],a33=ae[10],a34=ae[14];var a41=ae[3],a42=ae[7],a43=ae[11],a44=ae[15];var b11=be[0],b12=be[4],b13=be[8],b14=be[12];var b21=be[1],b22=be[5],b23=be[9],b24=be[13];var b31=be[2],b32=be[6],b33=be[10],b34=be[14];var b41=be[3],b42=be[7],b43=be[11],b44=be[15];te[0]=a11*b11+a12*b21+a13*b31+a14*b41;te[4]=a11*b12+a12*b22+a13*b32+a14*b42;te[8]=a11*b13+a12*b23+a13*b33+a14*b43;te[12]=a11*b14+a12*b24+a13*b34+a14*b44;te[1]=a21*b11+a22*b21+a23*b31+a24*b41;te[5]=a21*b12+a22*b22+a23*b32+a24*b42;te[9]=a21*b13+a22*b23+a23*b33+a24*b43;te[13]=a21*b14+a22*b24+a23*b34+a24*b44;te[2]=a31*b11+a32*b21+a33*b31+a34*b41;te[6]=a31*b12+a32*b22+a33*b32+a34*b42;te[10]=a31*b13+a32*b23+a33*b33+a34*b43;te[14]=a31*b14+a32*b24+a33*b34+a34*b44;te[3]=a41*b11+a42*b21+a43*b31+a44*b41;te[7]=a41*b12+a42*b22+a43*b32+a44*b42;te[11]=a41*b13+a42*b23+a43*b33+a44*b43;te[15]=a41*b14+a42*b24+a43*b34+a44*b44;return this;},multiplyScalar:function multiplyScalar(s){var te=this.elements;te[0]*=s;te[4]*=s;te[8]*=s;te[12]*=s;te[1]*=s;te[5]*=s;te[9]*=s;te[13]*=s;te[2]*=s;te[6]*=s;te[10]*=s;te[14]*=s;te[3]*=s;te[7]*=s;te[11]*=s;te[15]*=s;return this;},applyToBufferAttribute:function(){var v1=new Vector3();return function applyToBufferAttribute(attribute){for(var i=0,l=attribute.count;i<l;i++){v1.x=attribute.getX(i);v1.y=attribute.getY(i);v1.z=attribute.getZ(i);v1.applyMatrix4(this);attribute.setXYZ(i,v1.x,v1.y,v1.z);}return attribute;};}(),determinant:function determinant(){var te=this.elements;var n11=te[0],n12=te[4],n13=te[8],n14=te[12];var n21=te[1],n22=te[5],n23=te[9],n24=te[13];var n31=te[2],n32=te[6],n33=te[10],n34=te[14];var n41=te[3],n42=te[7],n43=te[11],n44=te[15];//TODO: make this more efficient
//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )
return n41*(+n14*n23*n32-n13*n24*n32-n14*n22*n33+n12*n24*n33+n13*n22*n34-n12*n23*n34)+n42*(+n11*n23*n34-n11*n24*n33+n14*n21*n33-n13*n21*n34+n13*n24*n31-n14*n23*n31)+n43*(+n11*n24*n32-n11*n22*n34-n14*n21*n32+n12*n21*n34+n14*n22*n31-n12*n24*n31)+n44*(-n13*n22*n31-n11*n23*n32+n11*n22*n33+n13*n21*n32-n12*n21*n33+n12*n23*n31);},transpose:function transpose(){var te=this.elements;var tmp;tmp=te[1];te[1]=te[4];te[4]=tmp;tmp=te[2];te[2]=te[8];te[8]=tmp;tmp=te[6];te[6]=te[9];te[9]=tmp;tmp=te[3];te[3]=te[12];te[12]=tmp;tmp=te[7];te[7]=te[13];te[13]=tmp;tmp=te[11];te[11]=te[14];te[14]=tmp;return this;},setPosition:function setPosition(v){var te=this.elements;te[12]=v.x;te[13]=v.y;te[14]=v.z;return this;},getInverse:function getInverse(m,throwOnDegenerate){// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
var te=this.elements,me=m.elements,n11=me[0],n21=me[1],n31=me[2],n41=me[3],n12=me[4],n22=me[5],n32=me[6],n42=me[7],n13=me[8],n23=me[9],n33=me[10],n43=me[11],n14=me[12],n24=me[13],n34=me[14],n44=me[15],t11=n23*n34*n42-n24*n33*n42+n24*n32*n43-n22*n34*n43-n23*n32*n44+n22*n33*n44,t12=n14*n33*n42-n13*n34*n42-n14*n32*n43+n12*n34*n43+n13*n32*n44-n12*n33*n44,t13=n13*n24*n42-n14*n23*n42+n14*n22*n43-n12*n24*n43-n13*n22*n44+n12*n23*n44,t14=n14*n23*n32-n13*n24*n32-n14*n22*n33+n12*n24*n33+n13*n22*n34-n12*n23*n34;var det=n11*t11+n21*t12+n31*t13+n41*t14;if(det===0){var msg="THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";if(throwOnDegenerate===true){throw new Error(msg);}else{console.warn(msg);}return this.identity();}var detInv=1/det;te[0]=t11*detInv;te[1]=(n24*n33*n41-n23*n34*n41-n24*n31*n43+n21*n34*n43+n23*n31*n44-n21*n33*n44)*detInv;te[2]=(n22*n34*n41-n24*n32*n41+n24*n31*n42-n21*n34*n42-n22*n31*n44+n21*n32*n44)*detInv;te[3]=(n23*n32*n41-n22*n33*n41-n23*n31*n42+n21*n33*n42+n22*n31*n43-n21*n32*n43)*detInv;te[4]=t12*detInv;te[5]=(n13*n34*n41-n14*n33*n41+n14*n31*n43-n11*n34*n43-n13*n31*n44+n11*n33*n44)*detInv;te[6]=(n14*n32*n41-n12*n34*n41-n14*n31*n42+n11*n34*n42+n12*n31*n44-n11*n32*n44)*detInv;te[7]=(n12*n33*n41-n13*n32*n41+n13*n31*n42-n11*n33*n42-n12*n31*n43+n11*n32*n43)*detInv;te[8]=t13*detInv;te[9]=(n14*n23*n41-n13*n24*n41-n14*n21*n43+n11*n24*n43+n13*n21*n44-n11*n23*n44)*detInv;te[10]=(n12*n24*n41-n14*n22*n41+n14*n21*n42-n11*n24*n42-n12*n21*n44+n11*n22*n44)*detInv;te[11]=(n13*n22*n41-n12*n23*n41-n13*n21*n42+n11*n23*n42+n12*n21*n43-n11*n22*n43)*detInv;te[12]=t14*detInv;te[13]=(n13*n24*n31-n14*n23*n31+n14*n21*n33-n11*n24*n33-n13*n21*n34+n11*n23*n34)*detInv;te[14]=(n14*n22*n31-n12*n24*n31-n14*n21*n32+n11*n24*n32+n12*n21*n34-n11*n22*n34)*detInv;te[15]=(n12*n23*n31-n13*n22*n31+n13*n21*n32-n11*n23*n32-n12*n21*n33+n11*n22*n33)*detInv;return this;},scale:function scale(v){var te=this.elements;var x=v.x,y=v.y,z=v.z;te[0]*=x;te[4]*=y;te[8]*=z;te[1]*=x;te[5]*=y;te[9]*=z;te[2]*=x;te[6]*=y;te[10]*=z;te[3]*=x;te[7]*=y;te[11]*=z;return this;},getMaxScaleOnAxis:function getMaxScaleOnAxis(){var te=this.elements;var scaleXSq=te[0]*te[0]+te[1]*te[1]+te[2]*te[2];var scaleYSq=te[4]*te[4]+te[5]*te[5]+te[6]*te[6];var scaleZSq=te[8]*te[8]+te[9]*te[9]+te[10]*te[10];return Math.sqrt(Math.max(scaleXSq,scaleYSq,scaleZSq));},makeTranslation:function makeTranslation(x,y,z){this.set(1,0,0,x,0,1,0,y,0,0,1,z,0,0,0,1);return this;},makeRotationX:function makeRotationX(theta){var c=Math.cos(theta),s=Math.sin(theta);this.set(1,0,0,0,0,c,-s,0,0,s,c,0,0,0,0,1);return this;},makeRotationY:function makeRotationY(theta){var c=Math.cos(theta),s=Math.sin(theta);this.set(c,0,s,0,0,1,0,0,-s,0,c,0,0,0,0,1);return this;},makeRotationZ:function makeRotationZ(theta){var c=Math.cos(theta),s=Math.sin(theta);this.set(c,-s,0,0,s,c,0,0,0,0,1,0,0,0,0,1);return this;},makeRotationAxis:function makeRotationAxis(axis,angle){// Based on http://www.gamedev.net/reference/articles/article1199.asp
var c=Math.cos(angle);var s=Math.sin(angle);var t=1-c;var x=axis.x,y=axis.y,z=axis.z;var tx=t*x,ty=t*y;this.set(tx*x+c,tx*y-s*z,tx*z+s*y,0,tx*y+s*z,ty*y+c,ty*z-s*x,0,tx*z-s*y,ty*z+s*x,t*z*z+c,0,0,0,0,1);return this;},makeScale:function makeScale(x,y,z){this.set(x,0,0,0,0,y,0,0,0,0,z,0,0,0,0,1);return this;},makeShear:function makeShear(x,y,z){this.set(1,y,z,0,x,1,z,0,x,y,1,0,0,0,0,1);return this;},compose:function compose(position,quaternion,scale){var te=this.elements;var x=quaternion._x,y=quaternion._y,z=quaternion._z,w=quaternion._w;var x2=x+x,y2=y+y,z2=z+z;var xx=x*x2,xy=x*y2,xz=x*z2;var yy=y*y2,yz=y*z2,zz=z*z2;var wx=w*x2,wy=w*y2,wz=w*z2;var sx=scale.x,sy=scale.y,sz=scale.z;te[0]=(1-(yy+zz))*sx;te[1]=(xy+wz)*sx;te[2]=(xz-wy)*sx;te[3]=0;te[4]=(xy-wz)*sy;te[5]=(1-(xx+zz))*sy;te[6]=(yz+wx)*sy;te[7]=0;te[8]=(xz+wy)*sz;te[9]=(yz-wx)*sz;te[10]=(1-(xx+yy))*sz;te[11]=0;te[12]=position.x;te[13]=position.y;te[14]=position.z;te[15]=1;return this;},decompose:function(){var vector=new Vector3();var matrix=new Matrix4();return function decompose(position,quaternion,scale){var te=this.elements;var sx=vector.set(te[0],te[1],te[2]).length();var sy=vector.set(te[4],te[5],te[6]).length();var sz=vector.set(te[8],te[9],te[10]).length();// if determine is negative, we need to invert one scale
var det=this.determinant();if(det<0)sx=-sx;position.x=te[12];position.y=te[13];position.z=te[14];// scale the rotation part
matrix.copy(this);var invSX=1/sx;var invSY=1/sy;var invSZ=1/sz;matrix.elements[0]*=invSX;matrix.elements[1]*=invSX;matrix.elements[2]*=invSX;matrix.elements[4]*=invSY;matrix.elements[5]*=invSY;matrix.elements[6]*=invSY;matrix.elements[8]*=invSZ;matrix.elements[9]*=invSZ;matrix.elements[10]*=invSZ;quaternion.setFromRotationMatrix(matrix);scale.x=sx;scale.y=sy;scale.z=sz;return this;};}(),makePerspective:function makePerspective(left,right,top,bottom,near,far){if(far===undefined){console.warn('THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.');}var te=this.elements;var x=2*near/(right-left);var y=2*near/(top-bottom);var a=(right+left)/(right-left);var b=(top+bottom)/(top-bottom);var c=-(far+near)/(far-near);var d=-2*far*near/(far-near);te[0]=x;te[4]=0;te[8]=a;te[12]=0;te[1]=0;te[5]=y;te[9]=b;te[13]=0;te[2]=0;te[6]=0;te[10]=c;te[14]=d;te[3]=0;te[7]=0;te[11]=-1;te[15]=0;return this;},makeOrthographic:function makeOrthographic(left,right,top,bottom,near,far){var te=this.elements;var w=1.0/(right-left);var h=1.0/(top-bottom);var p=1.0/(far-near);var x=(right+left)*w;var y=(top+bottom)*h;var z=(far+near)*p;te[0]=2*w;te[4]=0;te[8]=0;te[12]=-x;te[1]=0;te[5]=2*h;te[9]=0;te[13]=-y;te[2]=0;te[6]=0;te[10]=-2*p;te[14]=-z;te[3]=0;te[7]=0;te[11]=0;te[15]=1;return this;},equals:function equals(matrix){var te=this.elements;var me=matrix.elements;for(var i=0;i<16;i++){if(te[i]!==me[i])return false;}return true;},fromArray:function fromArray(array,offset){if(offset===undefined)offset=0;for(var i=0;i<16;i++){this.elements[i]=array[i+offset];}return this;},toArray:function toArray(array,offset){if(array===undefined)array=[];if(offset===undefined)offset=0;var te=this.elements;array[offset]=te[0];array[offset+1]=te[1];array[offset+2]=te[2];array[offset+3]=te[3];array[offset+4]=te[4];array[offset+5]=te[5];array[offset+6]=te[6];array[offset+7]=te[7];array[offset+8]=te[8];array[offset+9]=te[9];array[offset+10]=te[10];array[offset+11]=te[11];array[offset+12]=te[12];array[offset+13]=te[13];array[offset+14]=te[14];array[offset+15]=te[15];return array;}});/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 */function Quaternion(x,y,z,w){this._x=x||0;this._y=y||0;this._z=z||0;this._w=w!==undefined?w:1;}Object.assign(Quaternion,{slerp:function slerp(qa,qb,qm,t){return qm.copy(qa).slerp(qb,t);},slerpFlat:function slerpFlat(dst,dstOffset,src0,srcOffset0,src1,srcOffset1,t){// fuzz-free, array-based Quaternion SLERP operation
var x0=src0[srcOffset0+0],y0=src0[srcOffset0+1],z0=src0[srcOffset0+2],w0=src0[srcOffset0+3],x1=src1[srcOffset1+0],y1=src1[srcOffset1+1],z1=src1[srcOffset1+2],w1=src1[srcOffset1+3];if(w0!==w1||x0!==x1||y0!==y1||z0!==z1){var s=1-t,cos=x0*x1+y0*y1+z0*z1+w0*w1,dir=cos>=0?1:-1,sqrSin=1-cos*cos;// Skip the Slerp for tiny steps to avoid numeric problems:
if(sqrSin>Number.EPSILON){var sin=Math.sqrt(sqrSin),len=Math.atan2(sin,cos*dir);s=Math.sin(s*len)/sin;t=Math.sin(t*len)/sin;}var tDir=t*dir;x0=x0*s+x1*tDir;y0=y0*s+y1*tDir;z0=z0*s+z1*tDir;w0=w0*s+w1*tDir;// Normalize in case we just did a lerp:
if(s===1-t){var f=1/Math.sqrt(x0*x0+y0*y0+z0*z0+w0*w0);x0*=f;y0*=f;z0*=f;w0*=f;}}dst[dstOffset]=x0;dst[dstOffset+1]=y0;dst[dstOffset+2]=z0;dst[dstOffset+3]=w0;}});Object.defineProperties(Quaternion.prototype,{x:{get:function get(){return this._x;},set:function set(value){this._x=value;this.onChangeCallback();}},y:{get:function get(){return this._y;},set:function set(value){this._y=value;this.onChangeCallback();}},z:{get:function get(){return this._z;},set:function set(value){this._z=value;this.onChangeCallback();}},w:{get:function get(){return this._w;},set:function set(value){this._w=value;this.onChangeCallback();}}});Object.assign(Quaternion.prototype,{set:function set(x,y,z,w){this._x=x;this._y=y;this._z=z;this._w=w;this.onChangeCallback();return this;},clone:function clone(){return new this.constructor(this._x,this._y,this._z,this._w);},copy:function copy(quaternion){this._x=quaternion.x;this._y=quaternion.y;this._z=quaternion.z;this._w=quaternion.w;this.onChangeCallback();return this;},setFromEuler:function setFromEuler(euler,update){if(!(euler&&euler.isEuler)){throw new Error('THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.');}var x=euler._x,y=euler._y,z=euler._z,order=euler.order;// http://www.mathworks.com/matlabcentral/fileexchange/
// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
//	content/SpinCalc.m
var cos=Math.cos;var sin=Math.sin;var c1=cos(x/2);var c2=cos(y/2);var c3=cos(z/2);var s1=sin(x/2);var s2=sin(y/2);var s3=sin(z/2);if(order==='XYZ'){this._x=s1*c2*c3+c1*s2*s3;this._y=c1*s2*c3-s1*c2*s3;this._z=c1*c2*s3+s1*s2*c3;this._w=c1*c2*c3-s1*s2*s3;}else if(order==='YXZ'){this._x=s1*c2*c3+c1*s2*s3;this._y=c1*s2*c3-s1*c2*s3;this._z=c1*c2*s3-s1*s2*c3;this._w=c1*c2*c3+s1*s2*s3;}else if(order==='ZXY'){this._x=s1*c2*c3-c1*s2*s3;this._y=c1*s2*c3+s1*c2*s3;this._z=c1*c2*s3+s1*s2*c3;this._w=c1*c2*c3-s1*s2*s3;}else if(order==='ZYX'){this._x=s1*c2*c3-c1*s2*s3;this._y=c1*s2*c3+s1*c2*s3;this._z=c1*c2*s3-s1*s2*c3;this._w=c1*c2*c3+s1*s2*s3;}else if(order==='YZX'){this._x=s1*c2*c3+c1*s2*s3;this._y=c1*s2*c3+s1*c2*s3;this._z=c1*c2*s3-s1*s2*c3;this._w=c1*c2*c3-s1*s2*s3;}else if(order==='XZY'){this._x=s1*c2*c3-c1*s2*s3;this._y=c1*s2*c3-s1*c2*s3;this._z=c1*c2*s3+s1*s2*c3;this._w=c1*c2*c3+s1*s2*s3;}if(update!==false)this.onChangeCallback();return this;},setFromAxisAngle:function setFromAxisAngle(axis,angle){// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm
// assumes axis is normalized
var halfAngle=angle/2,s=Math.sin(halfAngle);this._x=axis.x*s;this._y=axis.y*s;this._z=axis.z*s;this._w=Math.cos(halfAngle);this.onChangeCallback();return this;},setFromRotationMatrix:function setFromRotationMatrix(m){// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
var te=m.elements,m11=te[0],m12=te[4],m13=te[8],m21=te[1],m22=te[5],m23=te[9],m31=te[2],m32=te[6],m33=te[10],trace=m11+m22+m33,s;if(trace>0){s=0.5/Math.sqrt(trace+1.0);this._w=0.25/s;this._x=(m32-m23)*s;this._y=(m13-m31)*s;this._z=(m21-m12)*s;}else if(m11>m22&&m11>m33){s=2.0*Math.sqrt(1.0+m11-m22-m33);this._w=(m32-m23)/s;this._x=0.25*s;this._y=(m12+m21)/s;this._z=(m13+m31)/s;}else if(m22>m33){s=2.0*Math.sqrt(1.0+m22-m11-m33);this._w=(m13-m31)/s;this._x=(m12+m21)/s;this._y=0.25*s;this._z=(m23+m32)/s;}else{s=2.0*Math.sqrt(1.0+m33-m11-m22);this._w=(m21-m12)/s;this._x=(m13+m31)/s;this._y=(m23+m32)/s;this._z=0.25*s;}this.onChangeCallback();return this;},setFromUnitVectors:function(){// assumes direction vectors vFrom and vTo are normalized
var v1=new Vector3();var r;var EPS=0.000001;return function setFromUnitVectors(vFrom,vTo){if(v1===undefined)v1=new Vector3();r=vFrom.dot(vTo)+1;if(r<EPS){r=0;if(Math.abs(vFrom.x)>Math.abs(vFrom.z)){v1.set(-vFrom.y,vFrom.x,0);}else{v1.set(0,-vFrom.z,vFrom.y);}}else{v1.crossVectors(vFrom,vTo);}this._x=v1.x;this._y=v1.y;this._z=v1.z;this._w=r;return this.normalize();};}(),angleTo:function angleTo(q){return 2*Math.acos(Math.abs(_Math.clamp(this.dot(q),-1,1)));},rotateTowards:function rotateTowards(q,step){var angle=this.angleTo(q);if(angle===0)return this;var t=Math.min(1,step/angle);this.slerp(q,t);return this;},inverse:function inverse(){// quaternion is assumed to have unit length
return this.conjugate();},conjugate:function conjugate(){this._x*=-1;this._y*=-1;this._z*=-1;this.onChangeCallback();return this;},dot:function dot(v){return this._x*v._x+this._y*v._y+this._z*v._z+this._w*v._w;},lengthSq:function lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w;},length:function length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w);},normalize:function normalize(){var l=this.length();if(l===0){this._x=0;this._y=0;this._z=0;this._w=1;}else{l=1/l;this._x=this._x*l;this._y=this._y*l;this._z=this._z*l;this._w=this._w*l;}this.onChangeCallback();return this;},multiply:function multiply(q,p){if(p!==undefined){console.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.');return this.multiplyQuaternions(q,p);}return this.multiplyQuaternions(this,q);},premultiply:function premultiply(q){return this.multiplyQuaternions(q,this);},multiplyQuaternions:function multiplyQuaternions(a,b){// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm
var qax=a._x,qay=a._y,qaz=a._z,qaw=a._w;var qbx=b._x,qby=b._y,qbz=b._z,qbw=b._w;this._x=qax*qbw+qaw*qbx+qay*qbz-qaz*qby;this._y=qay*qbw+qaw*qby+qaz*qbx-qax*qbz;this._z=qaz*qbw+qaw*qbz+qax*qby-qay*qbx;this._w=qaw*qbw-qax*qbx-qay*qby-qaz*qbz;this.onChangeCallback();return this;},slerp:function slerp(qb,t){if(t===0)return this;if(t===1)return this.copy(qb);var x=this._x,y=this._y,z=this._z,w=this._w;// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/
var cosHalfTheta=w*qb._w+x*qb._x+y*qb._y+z*qb._z;if(cosHalfTheta<0){this._w=-qb._w;this._x=-qb._x;this._y=-qb._y;this._z=-qb._z;cosHalfTheta=-cosHalfTheta;}else{this.copy(qb);}if(cosHalfTheta>=1.0){this._w=w;this._x=x;this._y=y;this._z=z;return this;}var sqrSinHalfTheta=1.0-cosHalfTheta*cosHalfTheta;if(sqrSinHalfTheta<=Number.EPSILON){var s=1-t;this._w=s*w+t*this._w;this._x=s*x+t*this._x;this._y=s*y+t*this._y;this._z=s*z+t*this._z;return this.normalize();}var sinHalfTheta=Math.sqrt(sqrSinHalfTheta);var halfTheta=Math.atan2(sinHalfTheta,cosHalfTheta);var ratioA=Math.sin((1-t)*halfTheta)/sinHalfTheta,ratioB=Math.sin(t*halfTheta)/sinHalfTheta;this._w=w*ratioA+this._w*ratioB;this._x=x*ratioA+this._x*ratioB;this._y=y*ratioA+this._y*ratioB;this._z=z*ratioA+this._z*ratioB;this.onChangeCallback();return this;},equals:function equals(quaternion){return quaternion._x===this._x&&quaternion._y===this._y&&quaternion._z===this._z&&quaternion._w===this._w;},fromArray:function fromArray(array,offset){if(offset===undefined)offset=0;this._x=array[offset];this._y=array[offset+1];this._z=array[offset+2];this._w=array[offset+3];this.onChangeCallback();return this;},toArray:function toArray(array,offset){if(array===undefined)array=[];if(offset===undefined)offset=0;array[offset]=this._x;array[offset+1]=this._y;array[offset+2]=this._z;array[offset+3]=this._w;return array;},onChange:function onChange(callback){this.onChangeCallback=callback;return this;},onChangeCallback:function onChangeCallback(){}});/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author kile / http://kile.stravaganza.org/
	 * @author philogb / http://blog.thejit.org/
	 * @author mikael emtinger / http://gomo.se/
	 * @author egraether / http://egraether.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */function Vector3(x,y,z){this.x=x||0;this.y=y||0;this.z=z||0;}Object.assign(Vector3.prototype,{isVector3:true,set:function set(x,y,z){this.x=x;this.y=y;this.z=z;return this;},setScalar:function setScalar(scalar){this.x=scalar;this.y=scalar;this.z=scalar;return this;},setX:function setX(x){this.x=x;return this;},setY:function setY(y){this.y=y;return this;},setZ:function setZ(z){this.z=z;return this;},setComponent:function setComponent(index,value){switch(index){case 0:this.x=value;break;case 1:this.y=value;break;case 2:this.z=value;break;default:throw new Error('index is out of range: '+index);}return this;},getComponent:function getComponent(index){switch(index){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error('index is out of range: '+index);}},clone:function clone(){return new this.constructor(this.x,this.y,this.z);},copy:function copy(v){this.x=v.x;this.y=v.y;this.z=v.z;return this;},add:function add(v,w){if(w!==undefined){console.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');return this.addVectors(v,w);}this.x+=v.x;this.y+=v.y;this.z+=v.z;return this;},addScalar:function addScalar(s){this.x+=s;this.y+=s;this.z+=s;return this;},addVectors:function addVectors(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;return this;},addScaledVector:function addScaledVector(v,s){this.x+=v.x*s;this.y+=v.y*s;this.z+=v.z*s;return this;},sub:function sub(v,w){if(w!==undefined){console.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');return this.subVectors(v,w);}this.x-=v.x;this.y-=v.y;this.z-=v.z;return this;},subScalar:function subScalar(s){this.x-=s;this.y-=s;this.z-=s;return this;},subVectors:function subVectors(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;return this;},multiply:function multiply(v,w){if(w!==undefined){console.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');return this.multiplyVectors(v,w);}this.x*=v.x;this.y*=v.y;this.z*=v.z;return this;},multiplyScalar:function multiplyScalar(scalar){this.x*=scalar;this.y*=scalar;this.z*=scalar;return this;},multiplyVectors:function multiplyVectors(a,b){this.x=a.x*b.x;this.y=a.y*b.y;this.z=a.z*b.z;return this;},applyEuler:function(){var quaternion=new Quaternion();return function applyEuler(euler){if(!(euler&&euler.isEuler)){console.error('THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.');}return this.applyQuaternion(quaternion.setFromEuler(euler));};}(),applyAxisAngle:function(){var quaternion=new Quaternion();return function applyAxisAngle(axis,angle){return this.applyQuaternion(quaternion.setFromAxisAngle(axis,angle));};}(),applyMatrix3:function applyMatrix3(m){var x=this.x,y=this.y,z=this.z;var e=m.elements;this.x=e[0]*x+e[3]*y+e[6]*z;this.y=e[1]*x+e[4]*y+e[7]*z;this.z=e[2]*x+e[5]*y+e[8]*z;return this;},applyMatrix4:function applyMatrix4(m){var x=this.x,y=this.y,z=this.z;var e=m.elements;var w=1/(e[3]*x+e[7]*y+e[11]*z+e[15]);this.x=(e[0]*x+e[4]*y+e[8]*z+e[12])*w;this.y=(e[1]*x+e[5]*y+e[9]*z+e[13])*w;this.z=(e[2]*x+e[6]*y+e[10]*z+e[14])*w;return this;},applyQuaternion:function applyQuaternion(q){var x=this.x,y=this.y,z=this.z;var qx=q.x,qy=q.y,qz=q.z,qw=q.w;// calculate quat * vector
var ix=qw*x+qy*z-qz*y;var iy=qw*y+qz*x-qx*z;var iz=qw*z+qx*y-qy*x;var iw=-qx*x-qy*y-qz*z;// calculate result * inverse quat
this.x=ix*qw+iw*-qx+iy*-qz-iz*-qy;this.y=iy*qw+iw*-qy+iz*-qx-ix*-qz;this.z=iz*qw+iw*-qz+ix*-qy-iy*-qx;return this;},project:function project(camera){return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);},unproject:function(){var matrix=new Matrix4();return function unproject(camera){return this.applyMatrix4(matrix.getInverse(camera.projectionMatrix)).applyMatrix4(camera.matrixWorld);};}(),transformDirection:function transformDirection(m){// input: THREE.Matrix4 affine matrix
// vector interpreted as a direction
var x=this.x,y=this.y,z=this.z;var e=m.elements;this.x=e[0]*x+e[4]*y+e[8]*z;this.y=e[1]*x+e[5]*y+e[9]*z;this.z=e[2]*x+e[6]*y+e[10]*z;return this.normalize();},divide:function divide(v){this.x/=v.x;this.y/=v.y;this.z/=v.z;return this;},divideScalar:function divideScalar(scalar){return this.multiplyScalar(1/scalar);},min:function min(v){this.x=Math.min(this.x,v.x);this.y=Math.min(this.y,v.y);this.z=Math.min(this.z,v.z);return this;},max:function max(v){this.x=Math.max(this.x,v.x);this.y=Math.max(this.y,v.y);this.z=Math.max(this.z,v.z);return this;},clamp:function clamp(min,max){// assumes min < max, componentwise
this.x=Math.max(min.x,Math.min(max.x,this.x));this.y=Math.max(min.y,Math.min(max.y,this.y));this.z=Math.max(min.z,Math.min(max.z,this.z));return this;},clampScalar:function(){var min=new Vector3();var max=new Vector3();return function clampScalar(minVal,maxVal){min.set(minVal,minVal,minVal);max.set(maxVal,maxVal,maxVal);return this.clamp(min,max);};}(),clampLength:function clampLength(min,max){var length=this.length();return this.divideScalar(length||1).multiplyScalar(Math.max(min,Math.min(max,length)));},floor:function floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);return this;},ceil:function ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);return this;},round:function round(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);return this;},roundToZero:function roundToZero(){this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x);this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y);this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z);return this;},negate:function negate(){this.x=-this.x;this.y=-this.y;this.z=-this.z;return this;},dot:function dot(v){return this.x*v.x+this.y*v.y+this.z*v.z;},// TODO lengthSquared?
lengthSq:function lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z;},length:function length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z);},manhattanLength:function manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z);},normalize:function normalize(){return this.divideScalar(this.length()||1);},setLength:function setLength(length){return this.normalize().multiplyScalar(length);},lerp:function lerp(v,alpha){this.x+=(v.x-this.x)*alpha;this.y+=(v.y-this.y)*alpha;this.z+=(v.z-this.z)*alpha;return this;},lerpVectors:function lerpVectors(v1,v2,alpha){return this.subVectors(v2,v1).multiplyScalar(alpha).add(v1);},cross:function cross(v,w){if(w!==undefined){console.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');return this.crossVectors(v,w);}return this.crossVectors(this,v);},crossVectors:function crossVectors(a,b){var ax=a.x,ay=a.y,az=a.z;var bx=b.x,by=b.y,bz=b.z;this.x=ay*bz-az*by;this.y=az*bx-ax*bz;this.z=ax*by-ay*bx;return this;},projectOnVector:function projectOnVector(vector){var scalar=vector.dot(this)/vector.lengthSq();return this.copy(vector).multiplyScalar(scalar);},projectOnPlane:function(){var v1=new Vector3();return function projectOnPlane(planeNormal){v1.copy(this).projectOnVector(planeNormal);return this.sub(v1);};}(),reflect:function(){// reflect incident vector off plane orthogonal to normal
// normal is assumed to have unit length
var v1=new Vector3();return function reflect(normal){return this.sub(v1.copy(normal).multiplyScalar(2*this.dot(normal)));};}(),angleTo:function angleTo(v){var theta=this.dot(v)/Math.sqrt(this.lengthSq()*v.lengthSq());// clamp, to handle numerical problems
return Math.acos(_Math.clamp(theta,-1,1));},distanceTo:function distanceTo(v){return Math.sqrt(this.distanceToSquared(v));},distanceToSquared:function distanceToSquared(v){var dx=this.x-v.x,dy=this.y-v.y,dz=this.z-v.z;return dx*dx+dy*dy+dz*dz;},manhattanDistanceTo:function manhattanDistanceTo(v){return Math.abs(this.x-v.x)+Math.abs(this.y-v.y)+Math.abs(this.z-v.z);},setFromSpherical:function setFromSpherical(s){return this.setFromSphericalCoords(s.radius,s.phi,s.theta);},setFromSphericalCoords:function setFromSphericalCoords(radius,phi,theta){var sinPhiRadius=Math.sin(phi)*radius;this.x=sinPhiRadius*Math.sin(theta);this.y=Math.cos(phi)*radius;this.z=sinPhiRadius*Math.cos(theta);return this;},setFromCylindrical:function setFromCylindrical(c){return this.setFromCylindricalCoords(c.radius,c.theta,c.y);},setFromCylindricalCoords:function setFromCylindricalCoords(radius,theta,y){this.x=radius*Math.sin(theta);this.y=y;this.z=radius*Math.cos(theta);return this;},setFromMatrixPosition:function setFromMatrixPosition(m){var e=m.elements;this.x=e[12];this.y=e[13];this.z=e[14];return this;},setFromMatrixScale:function setFromMatrixScale(m){var sx=this.setFromMatrixColumn(m,0).length();var sy=this.setFromMatrixColumn(m,1).length();var sz=this.setFromMatrixColumn(m,2).length();this.x=sx;this.y=sy;this.z=sz;return this;},setFromMatrixColumn:function setFromMatrixColumn(m,index){return this.fromArray(m.elements,index*4);},equals:function equals(v){return v.x===this.x&&v.y===this.y&&v.z===this.z;},fromArray:function fromArray(array,offset){if(offset===undefined)offset=0;this.x=array[offset];this.y=array[offset+1];this.z=array[offset+2];return this;},toArray:function toArray(array,offset){if(array===undefined)array=[];if(offset===undefined)offset=0;array[offset]=this.x;array[offset+1]=this.y;array[offset+2]=this.z;return array;},fromBufferAttribute:function fromBufferAttribute(attribute,index,offset){if(offset!==undefined){console.warn('THREE.Vector3: offset has been removed from .fromBufferAttribute().');}this.x=attribute.getX(index);this.y=attribute.getY(index);this.z=attribute.getZ(index);return this;}});/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 * @author tschw
	 */function Matrix3(){this.elements=[1,0,0,0,1,0,0,0,1];if(arguments.length>0){console.error('THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.');}}Object.assign(Matrix3.prototype,{isMatrix3:true,set:function set(n11,n12,n13,n21,n22,n23,n31,n32,n33){var te=this.elements;te[0]=n11;te[1]=n21;te[2]=n31;te[3]=n12;te[4]=n22;te[5]=n32;te[6]=n13;te[7]=n23;te[8]=n33;return this;},identity:function identity(){this.set(1,0,0,0,1,0,0,0,1);return this;},clone:function clone(){return new this.constructor().fromArray(this.elements);},copy:function copy(m){var te=this.elements;var me=m.elements;te[0]=me[0];te[1]=me[1];te[2]=me[2];te[3]=me[3];te[4]=me[4];te[5]=me[5];te[6]=me[6];te[7]=me[7];te[8]=me[8];return this;},setFromMatrix4:function setFromMatrix4(m){var me=m.elements;this.set(me[0],me[4],me[8],me[1],me[5],me[9],me[2],me[6],me[10]);return this;},applyToBufferAttribute:function(){var v1=new Vector3();return function applyToBufferAttribute(attribute){for(var i=0,l=attribute.count;i<l;i++){v1.x=attribute.getX(i);v1.y=attribute.getY(i);v1.z=attribute.getZ(i);v1.applyMatrix3(this);attribute.setXYZ(i,v1.x,v1.y,v1.z);}return attribute;};}(),multiply:function multiply(m){return this.multiplyMatrices(this,m);},premultiply:function premultiply(m){return this.multiplyMatrices(m,this);},multiplyMatrices:function multiplyMatrices(a,b){var ae=a.elements;var be=b.elements;var te=this.elements;var a11=ae[0],a12=ae[3],a13=ae[6];var a21=ae[1],a22=ae[4],a23=ae[7];var a31=ae[2],a32=ae[5],a33=ae[8];var b11=be[0],b12=be[3],b13=be[6];var b21=be[1],b22=be[4],b23=be[7];var b31=be[2],b32=be[5],b33=be[8];te[0]=a11*b11+a12*b21+a13*b31;te[3]=a11*b12+a12*b22+a13*b32;te[6]=a11*b13+a12*b23+a13*b33;te[1]=a21*b11+a22*b21+a23*b31;te[4]=a21*b12+a22*b22+a23*b32;te[7]=a21*b13+a22*b23+a23*b33;te[2]=a31*b11+a32*b21+a33*b31;te[5]=a31*b12+a32*b22+a33*b32;te[8]=a31*b13+a32*b23+a33*b33;return this;},multiplyScalar:function multiplyScalar(s){var te=this.elements;te[0]*=s;te[3]*=s;te[6]*=s;te[1]*=s;te[4]*=s;te[7]*=s;te[2]*=s;te[5]*=s;te[8]*=s;return this;},determinant:function determinant(){var te=this.elements;var a=te[0],b=te[1],c=te[2],d=te[3],e=te[4],f=te[5],g=te[6],h=te[7],i=te[8];return a*e*i-a*f*h-b*d*i+b*f*g+c*d*h-c*e*g;},getInverse:function getInverse(matrix,throwOnDegenerate){if(matrix&&matrix.isMatrix4){console.error("THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.");}var me=matrix.elements,te=this.elements,n11=me[0],n21=me[1],n31=me[2],n12=me[3],n22=me[4],n32=me[5],n13=me[6],n23=me[7],n33=me[8],t11=n33*n22-n32*n23,t12=n32*n13-n33*n12,t13=n23*n12-n22*n13,det=n11*t11+n21*t12+n31*t13;if(det===0){var msg="THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";if(throwOnDegenerate===true){throw new Error(msg);}else{console.warn(msg);}return this.identity();}var detInv=1/det;te[0]=t11*detInv;te[1]=(n31*n23-n33*n21)*detInv;te[2]=(n32*n21-n31*n22)*detInv;te[3]=t12*detInv;te[4]=(n33*n11-n31*n13)*detInv;te[5]=(n31*n12-n32*n11)*detInv;te[6]=t13*detInv;te[7]=(n21*n13-n23*n11)*detInv;te[8]=(n22*n11-n21*n12)*detInv;return this;},transpose:function transpose(){var tmp,m=this.elements;tmp=m[1];m[1]=m[3];m[3]=tmp;tmp=m[2];m[2]=m[6];m[6]=tmp;tmp=m[5];m[5]=m[7];m[7]=tmp;return this;},getNormalMatrix:function getNormalMatrix(matrix4){return this.setFromMatrix4(matrix4).getInverse(this).transpose();},transposeIntoArray:function transposeIntoArray(r){var m=this.elements;r[0]=m[0];r[1]=m[3];r[2]=m[6];r[3]=m[1];r[4]=m[4];r[5]=m[7];r[6]=m[2];r[7]=m[5];r[8]=m[8];return this;},setUvTransform:function setUvTransform(tx,ty,sx,sy,rotation,cx,cy){var c=Math.cos(rotation);var s=Math.sin(rotation);this.set(sx*c,sx*s,-sx*(c*cx+s*cy)+cx+tx,-sy*s,sy*c,-sy*(-s*cx+c*cy)+cy+ty,0,0,1);},scale:function scale(sx,sy){var te=this.elements;te[0]*=sx;te[3]*=sx;te[6]*=sx;te[1]*=sy;te[4]*=sy;te[7]*=sy;return this;},rotate:function rotate(theta){var c=Math.cos(theta);var s=Math.sin(theta);var te=this.elements;var a11=te[0],a12=te[3],a13=te[6];var a21=te[1],a22=te[4],a23=te[7];te[0]=c*a11+s*a21;te[3]=c*a12+s*a22;te[6]=c*a13+s*a23;te[1]=-s*a11+c*a21;te[4]=-s*a12+c*a22;te[7]=-s*a13+c*a23;return this;},translate:function translate(tx,ty){var te=this.elements;te[0]+=tx*te[2];te[3]+=tx*te[5];te[6]+=tx*te[8];te[1]+=ty*te[2];te[4]+=ty*te[5];te[7]+=ty*te[8];return this;},equals:function equals(matrix){var te=this.elements;var me=matrix.elements;for(var i=0;i<9;i++){if(te[i]!==me[i])return false;}return true;},fromArray:function fromArray(array,offset){if(offset===undefined)offset=0;for(var i=0;i<9;i++){this.elements[i]=array[i+offset];}return this;},toArray:function toArray(array,offset){if(array===undefined)array=[];if(offset===undefined)offset=0;var te=this.elements;array[offset]=te[0];array[offset+1]=te[1];array[offset+2]=te[2];array[offset+3]=te[3];array[offset+4]=te[4];array[offset+5]=te[5];array[offset+6]=te[6];array[offset+7]=te[7];array[offset+8]=te[8];return array;}});/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author szimek / https://github.com/szimek/
	 */var ImageUtils={getDataURL:function getDataURL(image){var canvas;if(image instanceof HTMLCanvasElement){canvas=image;}else{canvas=document.createElementNS('http://www.w3.org/1999/xhtml','canvas');canvas.width=image.width;canvas.height=image.height;var context=canvas.getContext('2d');if(image instanceof ImageData){context.putImageData(image,0,0);}else{context.drawImage(image,0,0,image.width,image.height);}}if(canvas.width>2048||canvas.height>2048){return canvas.toDataURL('image/jpeg',0.6);}else{return canvas.toDataURL('image/png');}}};/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author szimek / https://github.com/szimek/
	 */var textureId=0;function Texture(image,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding){Object.defineProperty(this,'id',{value:textureId++});this.uuid=_Math.generateUUID();this.name='';this.image=image!==undefined?image:Texture.DEFAULT_IMAGE;this.mipmaps=[];this.mapping=mapping!==undefined?mapping:Texture.DEFAULT_MAPPING;this.wrapS=wrapS!==undefined?wrapS:ClampToEdgeWrapping;this.wrapT=wrapT!==undefined?wrapT:ClampToEdgeWrapping;this.magFilter=magFilter!==undefined?magFilter:LinearFilter;this.minFilter=minFilter!==undefined?minFilter:LinearMipMapLinearFilter;this.anisotropy=anisotropy!==undefined?anisotropy:1;this.format=format!==undefined?format:RGBAFormat;this.type=type!==undefined?type:UnsignedByteType;this.offset=new Vector2(0,0);this.repeat=new Vector2(1,1);this.center=new Vector2(0,0);this.rotation=0;this.matrixAutoUpdate=true;this.matrix=new Matrix3();this.generateMipmaps=true;this.premultiplyAlpha=false;this.flipY=true;this.unpackAlignment=4;// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)
// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
//
// Also changing the encoding after already used by a Material will not automatically make the Material
// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.
this.encoding=encoding!==undefined?encoding:LinearEncoding;this.version=0;this.onUpdate=null;}Texture.DEFAULT_IMAGE=undefined;Texture.DEFAULT_MAPPING=UVMapping;Texture.prototype=Object.assign(Object.create(EventDispatcher.prototype),{constructor:Texture,isTexture:true,updateMatrix:function updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y);},clone:function clone(){return new this.constructor().copy(this);},copy:function copy(source){this.name=source.name;this.image=source.image;this.mipmaps=source.mipmaps.slice(0);this.mapping=source.mapping;this.wrapS=source.wrapS;this.wrapT=source.wrapT;this.magFilter=source.magFilter;this.minFilter=source.minFilter;this.anisotropy=source.anisotropy;this.format=source.format;this.type=source.type;this.offset.copy(source.offset);this.repeat.copy(source.repeat);this.center.copy(source.center);this.rotation=source.rotation;this.matrixAutoUpdate=source.matrixAutoUpdate;this.matrix.copy(source.matrix);this.generateMipmaps=source.generateMipmaps;this.premultiplyAlpha=source.premultiplyAlpha;this.flipY=source.flipY;this.unpackAlignment=source.unpackAlignment;this.encoding=source.encoding;return this;},toJSON:function toJSON(meta){var isRootObject=meta===undefined||typeof meta==='string';if(!isRootObject&&meta.textures[this.uuid]!==undefined){return meta.textures[this.uuid];}var output={metadata:{version:4.5,type:'Texture',generator:'Texture.toJSON'},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY};if(this.image!==undefined){// TODO: Move to THREE.Image
var image=this.image;if(image.uuid===undefined){image.uuid=_Math.generateUUID();// UGH
}if(!isRootObject&&meta.images[image.uuid]===undefined){var url;if(Array.isArray(image)){// process array of images e.g. CubeTexture
url=[];for(var i=0,l=image.length;i<l;i++){url.push(ImageUtils.getDataURL(image[i]));}}else{// process single image
url=ImageUtils.getDataURL(image);}meta.images[image.uuid]={uuid:image.uuid,url:url};}output.image=image.uuid;}if(!isRootObject){meta.textures[this.uuid]=output;}return output;},dispose:function dispose(){this.dispatchEvent({type:'dispose'});},transformUv:function transformUv(uv){if(this.mapping!==UVMapping)return uv;uv.applyMatrix3(this.matrix);if(uv.x<0||uv.x>1){switch(this.wrapS){case RepeatWrapping:uv.x=uv.x-Math.floor(uv.x);break;case ClampToEdgeWrapping:uv.x=uv.x<0?0:1;break;case MirroredRepeatWrapping:if(Math.abs(Math.floor(uv.x)%2)===1){uv.x=Math.ceil(uv.x)-uv.x;}else{uv.x=uv.x-Math.floor(uv.x);}break;}}if(uv.y<0||uv.y>1){switch(this.wrapT){case RepeatWrapping:uv.y=uv.y-Math.floor(uv.y);break;case ClampToEdgeWrapping:uv.y=uv.y<0?0:1;break;case MirroredRepeatWrapping:if(Math.abs(Math.floor(uv.y)%2)===1){uv.y=Math.ceil(uv.y)-uv.y;}else{uv.y=uv.y-Math.floor(uv.y);}break;}}if(this.flipY){uv.y=1-uv.y;}return uv;}});Object.defineProperty(Texture.prototype,"needsUpdate",{set:function set(value){if(value===true)this.version++;}});/**
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author philogb / http://blog.thejit.org/
	 * @author mikael emtinger / http://gomo.se/
	 * @author egraether / http://egraether.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */function Vector4(x,y,z,w){this.x=x||0;this.y=y||0;this.z=z||0;this.w=w!==undefined?w:1;}Object.assign(Vector4.prototype,{isVector4:true,set:function set(x,y,z,w){this.x=x;this.y=y;this.z=z;this.w=w;return this;},setScalar:function setScalar(scalar){this.x=scalar;this.y=scalar;this.z=scalar;this.w=scalar;return this;},setX:function setX(x){this.x=x;return this;},setY:function setY(y){this.y=y;return this;},setZ:function setZ(z){this.z=z;return this;},setW:function setW(w){this.w=w;return this;},setComponent:function setComponent(index,value){switch(index){case 0:this.x=value;break;case 1:this.y=value;break;case 2:this.z=value;break;case 3:this.w=value;break;default:throw new Error('index is out of range: '+index);}return this;},getComponent:function getComponent(index){switch(index){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error('index is out of range: '+index);}},clone:function clone(){return new this.constructor(this.x,this.y,this.z,this.w);},copy:function copy(v){this.x=v.x;this.y=v.y;this.z=v.z;this.w=v.w!==undefined?v.w:1;return this;},add:function add(v,w){if(w!==undefined){console.warn('THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');return this.addVectors(v,w);}this.x+=v.x;this.y+=v.y;this.z+=v.z;this.w+=v.w;return this;},addScalar:function addScalar(s){this.x+=s;this.y+=s;this.z+=s;this.w+=s;return this;},addVectors:function addVectors(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;this.w=a.w+b.w;return this;},addScaledVector:function addScaledVector(v,s){this.x+=v.x*s;this.y+=v.y*s;this.z+=v.z*s;this.w+=v.w*s;return this;},sub:function sub(v,w){if(w!==undefined){console.warn('THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');return this.subVectors(v,w);}this.x-=v.x;this.y-=v.y;this.z-=v.z;this.w-=v.w;return this;},subScalar:function subScalar(s){this.x-=s;this.y-=s;this.z-=s;this.w-=s;return this;},subVectors:function subVectors(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;this.w=a.w-b.w;return this;},multiplyScalar:function multiplyScalar(scalar){this.x*=scalar;this.y*=scalar;this.z*=scalar;this.w*=scalar;return this;},applyMatrix4:function applyMatrix4(m){var x=this.x,y=this.y,z=this.z,w=this.w;var e=m.elements;this.x=e[0]*x+e[4]*y+e[8]*z+e[12]*w;this.y=e[1]*x+e[5]*y+e[9]*z+e[13]*w;this.z=e[2]*x+e[6]*y+e[10]*z+e[14]*w;this.w=e[3]*x+e[7]*y+e[11]*z+e[15]*w;return this;},divideScalar:function divideScalar(scalar){return this.multiplyScalar(1/scalar);},setAxisAngleFromQuaternion:function setAxisAngleFromQuaternion(q){// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm
// q is assumed to be normalized
this.w=2*Math.acos(q.w);var s=Math.sqrt(1-q.w*q.w);if(s<0.0001){this.x=1;this.y=0;this.z=0;}else{this.x=q.x/s;this.y=q.y/s;this.z=q.z/s;}return this;},setAxisAngleFromRotationMatrix:function setAxisAngleFromRotationMatrix(m){// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm
// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
var angle,x,y,z,// variables for result
epsilon=0.01,// margin to allow for rounding errors
epsilon2=0.1,// margin to distinguish between 0 and 180 degrees
te=m.elements,m11=te[0],m12=te[4],m13=te[8],m21=te[1],m22=te[5],m23=te[9],m31=te[2],m32=te[6],m33=te[10];if(Math.abs(m12-m21)<epsilon&&Math.abs(m13-m31)<epsilon&&Math.abs(m23-m32)<epsilon){// singularity found
// first check for identity matrix which must have +1 for all terms
// in leading diagonal and zero in other terms
if(Math.abs(m12+m21)<epsilon2&&Math.abs(m13+m31)<epsilon2&&Math.abs(m23+m32)<epsilon2&&Math.abs(m11+m22+m33-3)<epsilon2){// this singularity is identity matrix so angle = 0
this.set(1,0,0,0);return this;// zero angle, arbitrary axis
}// otherwise this singularity is angle = 180
angle=Math.PI;var xx=(m11+1)/2;var yy=(m22+1)/2;var zz=(m33+1)/2;var xy=(m12+m21)/4;var xz=(m13+m31)/4;var yz=(m23+m32)/4;if(xx>yy&&xx>zz){// m11 is the largest diagonal term
if(xx<epsilon){x=0;y=0.707106781;z=0.707106781;}else{x=Math.sqrt(xx);y=xy/x;z=xz/x;}}else if(yy>zz){// m22 is the largest diagonal term
if(yy<epsilon){x=0.707106781;y=0;z=0.707106781;}else{y=Math.sqrt(yy);x=xy/y;z=yz/y;}}else{// m33 is the largest diagonal term so base result on this
if(zz<epsilon){x=0.707106781;y=0.707106781;z=0;}else{z=Math.sqrt(zz);x=xz/z;y=yz/z;}}this.set(x,y,z,angle);return this;// return 180 deg rotation
}// as we have reached here there are no singularities so we can handle normally
var s=Math.sqrt((m32-m23)*(m32-m23)+(m13-m31)*(m13-m31)+(m21-m12)*(m21-m12));// used to normalize
if(Math.abs(s)<0.001)s=1;// prevent divide by zero, should not happen if matrix is orthogonal and should be
// caught by singularity test above, but I've left it in just in case
this.x=(m32-m23)/s;this.y=(m13-m31)/s;this.z=(m21-m12)/s;this.w=Math.acos((m11+m22+m33-1)/2);return this;},min:function min(v){this.x=Math.min(this.x,v.x);this.y=Math.min(this.y,v.y);this.z=Math.min(this.z,v.z);this.w=Math.min(this.w,v.w);return this;},max:function max(v){this.x=Math.max(this.x,v.x);this.y=Math.max(this.y,v.y);this.z=Math.max(this.z,v.z);this.w=Math.max(this.w,v.w);return this;},clamp:function clamp(min,max){// assumes min < max, componentwise
this.x=Math.max(min.x,Math.min(max.x,this.x));this.y=Math.max(min.y,Math.min(max.y,this.y));this.z=Math.max(min.z,Math.min(max.z,this.z));this.w=Math.max(min.w,Math.min(max.w,this.w));return this;},clampScalar:function(){var min,max;return function clampScalar(minVal,maxVal){if(min===undefined){min=new Vector4();max=new Vector4();}min.set(minVal,minVal,minVal,minVal);max.set(maxVal,maxVal,maxVal,maxVal);return this.clamp(min,max);};}(),clampLength:function clampLength(min,max){var length=this.length();return this.divideScalar(length||1).multiplyScalar(Math.max(min,Math.min(max,length)));},floor:function floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);this.w=Math.floor(this.w);return this;},ceil:function ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);this.w=Math.ceil(this.w);return this;},round:function round(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);this.w=Math.round(this.w);return this;},roundToZero:function roundToZero(){this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x);this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y);this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z);this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w);return this;},negate:function negate(){this.x=-this.x;this.y=-this.y;this.z=-this.z;this.w=-this.w;return this;},dot:function dot(v){return this.x*v.x+this.y*v.y+this.z*v.z+this.w*v.w;},lengthSq:function lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w;},length:function length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);},manhattanLength:function manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w);},normalize:function normalize(){return this.divideScalar(this.length()||1);},setLength:function setLength(length){return this.normalize().multiplyScalar(length);},lerp:function lerp(v,alpha){this.x+=(v.x-this.x)*alpha;this.y+=(v.y-this.y)*alpha;this.z+=(v.z-this.z)*alpha;this.w+=(v.w-this.w)*alpha;return this;},lerpVectors:function lerpVectors(v1,v2,alpha){return this.subVectors(v2,v1).multiplyScalar(alpha).add(v1);},equals:function equals(v){return v.x===this.x&&v.y===this.y&&v.z===this.z&&v.w===this.w;},fromArray:function fromArray(array,offset){if(offset===undefined)offset=0;this.x=array[offset];this.y=array[offset+1];this.z=array[offset+2];this.w=array[offset+3];return this;},toArray:function toArray(array,offset){if(array===undefined)array=[];if(offset===undefined)offset=0;array[offset]=this.x;array[offset+1]=this.y;array[offset+2]=this.z;array[offset+3]=this.w;return array;},fromBufferAttribute:function fromBufferAttribute(attribute,index,offset){if(offset!==undefined){console.warn('THREE.Vector4: offset has been removed from .fromBufferAttribute().');}this.x=attribute.getX(index);this.y=attribute.getY(index);this.z=attribute.getZ(index);this.w=attribute.getW(index);return this;}});/**
	 * @author szimek / https://github.com/szimek/
	 * @author alteredq / http://alteredqualia.com/
	 * @author Marius Kintel / https://github.com/kintel
	 *//*
	 In options, we can specify:
	 * Texture parameters for an auto-generated target texture
	 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
	*/function WebGLRenderTarget(width,height,options){this.width=width;this.height=height;this.scissor=new Vector4(0,0,width,height);this.scissorTest=false;this.viewport=new Vector4(0,0,width,height);options=options||{};if(options.minFilter===undefined)options.minFilter=LinearFilter;this.texture=new Texture(undefined,undefined,options.wrapS,options.wrapT,options.magFilter,options.minFilter,options.format,options.type,options.anisotropy,options.encoding);this.texture.generateMipmaps=options.generateMipmaps!==undefined?options.generateMipmaps:true;this.depthBuffer=options.depthBuffer!==undefined?options.depthBuffer:true;this.stencilBuffer=options.stencilBuffer!==undefined?options.stencilBuffer:true;this.depthTexture=options.depthTexture!==undefined?options.depthTexture:null;}WebGLRenderTarget.prototype=Object.assign(Object.create(EventDispatcher.prototype),{constructor:WebGLRenderTarget,isWebGLRenderTarget:true,setSize:function setSize(width,height){if(this.width!==width||this.height!==height){this.width=width;this.height=height;this.dispose();}this.viewport.set(0,0,width,height);this.scissor.set(0,0,width,height);},clone:function clone(){return new this.constructor().copy(this);},copy:function copy(source){this.width=source.width;this.height=source.height;this.viewport.copy(source.viewport);this.texture=source.texture.clone();this.depthBuffer=source.depthBuffer;this.stencilBuffer=source.stencilBuffer;this.depthTexture=source.depthTexture;return this;},dispose:function dispose(){this.dispatchEvent({type:'dispose'});}});/**
	 * @author alteredq / http://alteredqualia.com
	 */function WebGLRenderTargetCube(width,height,options){WebGLRenderTarget.call(this,width,height,options);this.activeCubeFace=0;// PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5
this.activeMipMapLevel=0;}WebGLRenderTargetCube.prototype=Object.create(WebGLRenderTarget.prototype);WebGLRenderTargetCube.prototype.constructor=WebGLRenderTargetCube;WebGLRenderTargetCube.prototype.isWebGLRenderTargetCube=true;/**
	 * @author alteredq / http://alteredqualia.com/
	 */function DataTexture(data,width,height,format,type,mapping,wrapS,wrapT,magFilter,minFilter,anisotropy,encoding){Texture.call(this,null,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding);this.image={data:data,width:width,height:height};this.magFilter=magFilter!==undefined?magFilter:NearestFilter;this.minFilter=minFilter!==undefined?minFilter:NearestFilter;this.generateMipmaps=false;this.flipY=false;this.unpackAlignment=1;}DataTexture.prototype=Object.create(Texture.prototype);DataTexture.prototype.constructor=DataTexture;DataTexture.prototype.isDataTexture=true;/**
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 */function Box3(min,max){this.min=min!==undefined?min:new Vector3(+Infinity,+Infinity,+Infinity);this.max=max!==undefined?max:new Vector3(-Infinity,-Infinity,-Infinity);}Object.assign(Box3.prototype,{isBox3:true,set:function set(min,max){this.min.copy(min);this.max.copy(max);return this;},setFromArray:function setFromArray(array){var minX=+Infinity;var minY=+Infinity;var minZ=+Infinity;var maxX=-Infinity;var maxY=-Infinity;var maxZ=-Infinity;for(var i=0,l=array.length;i<l;i+=3){var x=array[i];var y=array[i+1];var z=array[i+2];if(x<minX)minX=x;if(y<minY)minY=y;if(z<minZ)minZ=z;if(x>maxX)maxX=x;if(y>maxY)maxY=y;if(z>maxZ)maxZ=z;}this.min.set(minX,minY,minZ);this.max.set(maxX,maxY,maxZ);return this;},setFromBufferAttribute:function setFromBufferAttribute(attribute){var minX=+Infinity;var minY=+Infinity;var minZ=+Infinity;var maxX=-Infinity;var maxY=-Infinity;var maxZ=-Infinity;for(var i=0,l=attribute.count;i<l;i++){var x=attribute.getX(i);var y=attribute.getY(i);var z=attribute.getZ(i);if(x<minX)minX=x;if(y<minY)minY=y;if(z<minZ)minZ=z;if(x>maxX)maxX=x;if(y>maxY)maxY=y;if(z>maxZ)maxZ=z;}this.min.set(minX,minY,minZ);this.max.set(maxX,maxY,maxZ);return this;},setFromPoints:function setFromPoints(points){this.makeEmpty();for(var i=0,il=points.length;i<il;i++){this.expandByPoint(points[i]);}return this;},setFromCenterAndSize:function(){var v1=new Vector3();return function setFromCenterAndSize(center,size){var halfSize=v1.copy(size).multiplyScalar(0.5);this.min.copy(center).sub(halfSize);this.max.copy(center).add(halfSize);return this;};}(),setFromObject:function setFromObject(object){this.makeEmpty();return this.expandByObject(object);},clone:function clone(){return new this.constructor().copy(this);},copy:function copy(box){this.min.copy(box.min);this.max.copy(box.max);return this;},makeEmpty:function makeEmpty(){this.min.x=this.min.y=this.min.z=+Infinity;this.max.x=this.max.y=this.max.z=-Infinity;return this;},isEmpty:function isEmpty(){// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z;},getCenter:function getCenter(target){if(target===undefined){console.warn('THREE.Box3: .getCenter() target is now required');target=new Vector3();}return this.isEmpty()?target.set(0,0,0):target.addVectors(this.min,this.max).multiplyScalar(0.5);},getSize:function getSize(target){if(target===undefined){console.warn('THREE.Box3: .getSize() target is now required');target=new Vector3();}return this.isEmpty()?target.set(0,0,0):target.subVectors(this.max,this.min);},expandByPoint:function expandByPoint(point){this.min.min(point);this.max.max(point);return this;},expandByVector:function expandByVector(vector){this.min.sub(vector);this.max.add(vector);return this;},expandByScalar:function expandByScalar(scalar){this.min.addScalar(-scalar);this.max.addScalar(scalar);return this;},expandByObject:function(){// Computes the world-axis-aligned bounding box of an object (including its children),
// accounting for both the object's, and children's, world transforms
var scope,i,l;var v1=new Vector3();function traverse(node){var geometry=node.geometry;if(geometry!==undefined){if(geometry.isGeometry){var vertices=geometry.vertices;for(i=0,l=vertices.length;i<l;i++){v1.copy(vertices[i]);v1.applyMatrix4(node.matrixWorld);scope.expandByPoint(v1);}}else if(geometry.isBufferGeometry){var attribute=geometry.attributes.position;if(attribute!==undefined){for(i=0,l=attribute.count;i<l;i++){v1.fromBufferAttribute(attribute,i).applyMatrix4(node.matrixWorld);scope.expandByPoint(v1);}}}}}return function expandByObject(object){scope=this;object.updateMatrixWorld(true);object.traverse(traverse);return this;};}(),containsPoint:function containsPoint(point){return point.x<this.min.x||point.x>this.max.x||point.y<this.min.y||point.y>this.max.y||point.z<this.min.z||point.z>this.max.z?false:true;},containsBox:function containsBox(box){return this.min.x<=box.min.x&&box.max.x<=this.max.x&&this.min.y<=box.min.y&&box.max.y<=this.max.y&&this.min.z<=box.min.z&&box.max.z<=this.max.z;},getParameter:function getParameter(point,target){// This can potentially have a divide by zero if the box
// has a size dimension of 0.
if(target===undefined){console.warn('THREE.Box3: .getParameter() target is now required');target=new Vector3();}return target.set((point.x-this.min.x)/(this.max.x-this.min.x),(point.y-this.min.y)/(this.max.y-this.min.y),(point.z-this.min.z)/(this.max.z-this.min.z));},intersectsBox:function intersectsBox(box){// using 6 splitting planes to rule out intersections.
return box.max.x<this.min.x||box.min.x>this.max.x||box.max.y<this.min.y||box.min.y>this.max.y||box.max.z<this.min.z||box.min.z>this.max.z?false:true;},intersectsSphere:function(){var closestPoint=new Vector3();return function intersectsSphere(sphere){// Find the point on the AABB closest to the sphere center.
this.clampPoint(sphere.center,closestPoint);// If that point is inside the sphere, the AABB and sphere intersect.
return closestPoint.distanceToSquared(sphere.center)<=sphere.radius*sphere.radius;};}(),intersectsPlane:function intersectsPlane(plane){// We compute the minimum and maximum dot product values. If those values
// are on the same side (back or front) of the plane, then there is no intersection.
var min,max;if(plane.normal.x>0){min=plane.normal.x*this.min.x;max=plane.normal.x*this.max.x;}else{min=plane.normal.x*this.max.x;max=plane.normal.x*this.min.x;}if(plane.normal.y>0){min+=plane.normal.y*this.min.y;max+=plane.normal.y*this.max.y;}else{min+=plane.normal.y*this.max.y;max+=plane.normal.y*this.min.y;}if(plane.normal.z>0){min+=plane.normal.z*this.min.z;max+=plane.normal.z*this.max.z;}else{min+=plane.normal.z*this.max.z;max+=plane.normal.z*this.min.z;}return min<=-plane.constant&&max>=-plane.constant;},intersectsTriangle:function(){// triangle centered vertices
var v0=new Vector3();var v1=new Vector3();var v2=new Vector3();// triangle edge vectors
var f0=new Vector3();var f1=new Vector3();var f2=new Vector3();var testAxis=new Vector3();var center=new Vector3();var extents=new Vector3();var triangleNormal=new Vector3();function satForAxes(axes){var i,j;for(i=0,j=axes.length-3;i<=j;i+=3){testAxis.fromArray(axes,i);// project the aabb onto the seperating axis
var r=extents.x*Math.abs(testAxis.x)+extents.y*Math.abs(testAxis.y)+extents.z*Math.abs(testAxis.z);// project all 3 vertices of the triangle onto the seperating axis
var p0=v0.dot(testAxis);var p1=v1.dot(testAxis);var p2=v2.dot(testAxis);// actual test, basically see if either of the most extreme of the triangle points intersects r
if(Math.max(-Math.max(p0,p1,p2),Math.min(p0,p1,p2))>r){// points of the projected triangle are outside the projected half-length of the aabb
// the axis is seperating and we can exit
return false;}}return true;}return function intersectsTriangle(triangle){if(this.isEmpty()){return false;}// compute box center and extents
this.getCenter(center);extents.subVectors(this.max,center);// translate triangle to aabb origin
v0.subVectors(triangle.a,center);v1.subVectors(triangle.b,center);v2.subVectors(triangle.c,center);// compute edge vectors for triangle
f0.subVectors(v1,v0);f1.subVectors(v2,v1);f2.subVectors(v0,v2);// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)
var axes=[0,-f0.z,f0.y,0,-f1.z,f1.y,0,-f2.z,f2.y,f0.z,0,-f0.x,f1.z,0,-f1.x,f2.z,0,-f2.x,-f0.y,f0.x,0,-f1.y,f1.x,0,-f2.y,f2.x,0];if(!satForAxes(axes)){return false;}// test 3 face normals from the aabb
axes=[1,0,0,0,1,0,0,0,1];if(!satForAxes(axes)){return false;}// finally testing the face normal of the triangle
// use already existing triangle edge vectors here
triangleNormal.crossVectors(f0,f1);axes=[triangleNormal.x,triangleNormal.y,triangleNormal.z];return satForAxes(axes);};}(),clampPoint:function clampPoint(point,target){if(target===undefined){console.warn('THREE.Box3: .clampPoint() target is now required');target=new Vector3();}return target.copy(point).clamp(this.min,this.max);},distanceToPoint:function(){var v1=new Vector3();return function distanceToPoint(point){var clampedPoint=v1.copy(point).clamp(this.min,this.max);return clampedPoint.sub(point).length();};}(),getBoundingSphere:function(){var v1=new Vector3();return function getBoundingSphere(target){if(target===undefined){console.warn('THREE.Box3: .getBoundingSphere() target is now required');target=new Sphere();}this.getCenter(target.center);target.radius=this.getSize(v1).length()*0.5;return target;};}(),intersect:function intersect(box){this.min.max(box.min);this.max.min(box.max);// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
if(this.isEmpty())this.makeEmpty();return this;},union:function union(box){this.min.min(box.min);this.max.max(box.max);return this;},applyMatrix4:function(){var points=[new Vector3(),new Vector3(),new Vector3(),new Vector3(),new Vector3(),new Vector3(),new Vector3(),new Vector3()];return function applyMatrix4(matrix){// transform of empty box is an empty box.
if(this.isEmpty())return this;// NOTE: I am using a binary pattern to specify all 2^3 combinations below
points[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(matrix);// 000
points[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(matrix);// 001
points[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(matrix);// 010
points[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(matrix);// 011
points[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(matrix);// 100
points[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(matrix);// 101
points[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(matrix);// 110
points[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(matrix);// 111
this.setFromPoints(points);return this;};}(),translate:function translate(offset){this.min.add(offset);this.max.add(offset);return this;},equals:function equals(box){return box.min.equals(this.min)&&box.max.equals(this.max);}});/**
	 * @author bhouston / http://clara.io
	 * @author mrdoob / http://mrdoob.com/
	 */function Sphere(center,radius){this.center=center!==undefined?center:new Vector3();this.radius=radius!==undefined?radius:0;}Object.assign(Sphere.prototype,{set:function set(center,radius){this.center.copy(center);this.radius=radius;return this;},setFromPoints:function(){var box=new Box3();return function setFromPoints(points,optionalCenter){var center=this.center;if(optionalCenter!==undefined){center.copy(optionalCenter);}else{box.setFromPoints(points).getCenter(center);}var maxRadiusSq=0;for(var i=0,il=points.length;i<il;i++){maxRadiusSq=Math.max(maxRadiusSq,center.distanceToSquared(points[i]));}this.radius=Math.sqrt(maxRadiusSq);return this;};}(),clone:function clone(){return new this.constructor().copy(this);},copy:function copy(sphere){this.center.copy(sphere.center);this.radius=sphere.radius;return this;},empty:function empty(){return this.radius<=0;},containsPoint:function containsPoint(point){return point.distanceToSquared(this.center)<=this.radius*this.radius;},distanceToPoint:function distanceToPoint(point){return point.distanceTo(this.center)-this.radius;},intersectsSphere:function intersectsSphere(sphere){var radiusSum=this.radius+sphere.radius;return sphere.center.distanceToSquared(this.center)<=radiusSum*radiusSum;},intersectsBox:function intersectsBox(box){return box.intersectsSphere(this);},intersectsPlane:function intersectsPlane(plane){return Math.abs(plane.distanceToPoint(this.center))<=this.radius;},clampPoint:function clampPoint(point,target){var deltaLengthSq=this.center.distanceToSquared(point);if(target===undefined){console.warn('THREE.Sphere: .clampPoint() target is now required');target=new Vector3();}target.copy(point);if(deltaLengthSq>this.radius*this.radius){target.sub(this.center).normalize();target.multiplyScalar(this.radius).add(this.center);}return target;},getBoundingBox:function getBoundingBox(target){if(target===undefined){console.warn('THREE.Sphere: .getBoundingBox() target is now required');target=new Box3();}target.set(this.center,this.center);target.expandByScalar(this.radius);return target;},applyMatrix4:function applyMatrix4(matrix){this.center.applyMatrix4(matrix);this.radius=this.radius*matrix.getMaxScaleOnAxis();return this;},translate:function translate(offset){this.center.add(offset);return this;},equals:function equals(sphere){return sphere.center.equals(this.center)&&sphere.radius===this.radius;}});/**
	 * @author bhouston / http://clara.io
	 */function Plane(normal,constant){// normal is assumed to be normalized
this.normal=normal!==undefined?normal:new Vector3(1,0,0);this.constant=constant!==undefined?constant:0;}Object.assign(Plane.prototype,{set:function set(normal,constant){this.normal.copy(normal);this.constant=constant;return this;},setComponents:function setComponents(x,y,z,w){this.normal.set(x,y,z);this.constant=w;return this;},setFromNormalAndCoplanarPoint:function setFromNormalAndCoplanarPoint(normal,point){this.normal.copy(normal);this.constant=-point.dot(this.normal);return this;},setFromCoplanarPoints:function(){var v1=new Vector3();var v2=new Vector3();return function setFromCoplanarPoints(a,b,c){var normal=v1.subVectors(c,b).cross(v2.subVectors(a,b)).normalize();// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?
this.setFromNormalAndCoplanarPoint(normal,a);return this;};}(),clone:function clone(){return new this.constructor().copy(this);},copy:function copy(plane){this.normal.copy(plane.normal);this.constant=plane.constant;return this;},normalize:function normalize(){// Note: will lead to a divide by zero if the plane is invalid.
var inverseNormalLength=1.0/this.normal.length();this.normal.multiplyScalar(inverseNormalLength);this.constant*=inverseNormalLength;return this;},negate:function negate(){this.constant*=-1;this.normal.negate();return this;},distanceToPoint:function distanceToPoint(point){return this.normal.dot(point)+this.constant;},distanceToSphere:function distanceToSphere(sphere){return this.distanceToPoint(sphere.center)-sphere.radius;},projectPoint:function projectPoint(point,target){if(target===undefined){console.warn('THREE.Plane: .projectPoint() target is now required');target=new Vector3();}return target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);},intersectLine:function(){var v1=new Vector3();return function intersectLine(line,target){if(target===undefined){console.warn('THREE.Plane: .intersectLine() target is now required');target=new Vector3();}var direction=line.delta(v1);var denominator=this.normal.dot(direction);if(denominator===0){// line is coplanar, return origin
if(this.distanceToPoint(line.start)===0){return target.copy(line.start);}// Unsure if this is the correct method to handle this case.
return undefined;}var t=-(line.start.dot(this.normal)+this.constant)/denominator;if(t<0||t>1){return undefined;}return target.copy(direction).multiplyScalar(t).add(line.start);};}(),intersectsLine:function intersectsLine(line){// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.
var startSign=this.distanceToPoint(line.start);var endSign=this.distanceToPoint(line.end);return startSign<0&&endSign>0||endSign<0&&startSign>0;},intersectsBox:function intersectsBox(box){return box.intersectsPlane(this);},intersectsSphere:function intersectsSphere(sphere){return sphere.intersectsPlane(this);},coplanarPoint:function coplanarPoint(target){if(target===undefined){console.warn('THREE.Plane: .coplanarPoint() target is now required');target=new Vector3();}return target.copy(this.normal).multiplyScalar(-this.constant);},applyMatrix4:function(){var v1=new Vector3();var m1=new Matrix3();return function applyMatrix4(matrix,optionalNormalMatrix){var normalMatrix=optionalNormalMatrix||m1.getNormalMatrix(matrix);var referencePoint=this.coplanarPoint(v1).applyMatrix4(matrix);var normal=this.normal.applyMatrix3(normalMatrix).normalize();this.constant=-referencePoint.dot(normal);return this;};}(),translate:function translate(offset){this.constant-=offset.dot(this.normal);return this;},equals:function equals(plane){return plane.normal.equals(this.normal)&&plane.constant===this.constant;}});/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author bhouston / http://clara.io
	 */function Frustum(p0,p1,p2,p3,p4,p5){this.planes=[p0!==undefined?p0:new Plane(),p1!==undefined?p1:new Plane(),p2!==undefined?p2:new Plane(),p3!==undefined?p3:new Plane(),p4!==undefined?p4:new Plane(),p5!==undefined?p5:new Plane()];}Object.assign(Frustum.prototype,{set:function set(p0,p1,p2,p3,p4,p5){var planes=this.planes;planes[0].copy(p0);planes[1].copy(p1);planes[2].copy(p2);planes[3].copy(p3);planes[4].copy(p4);planes[5].copy(p5);return this;},clone:function clone(){return new this.constructor().copy(this);},copy:function copy(frustum){var planes=this.planes;for(var i=0;i<6;i++){planes[i].copy(frustum.planes[i]);}return this;},setFromMatrix:function setFromMatrix(m){var planes=this.planes;var me=m.elements;var me0=me[0],me1=me[1],me2=me[2],me3=me[3];var me4=me[4],me5=me[5],me6=me[6],me7=me[7];var me8=me[8],me9=me[9],me10=me[10],me11=me[11];var me12=me[12],me13=me[13],me14=me[14],me15=me[15];planes[0].setComponents(me3-me0,me7-me4,me11-me8,me15-me12).normalize();planes[1].setComponents(me3+me0,me7+me4,me11+me8,me15+me12).normalize();planes[2].setComponents(me3+me1,me7+me5,me11+me9,me15+me13).normalize();planes[3].setComponents(me3-me1,me7-me5,me11-me9,me15-me13).normalize();planes[4].setComponents(me3-me2,me7-me6,me11-me10,me15-me14).normalize();planes[5].setComponents(me3+me2,me7+me6,me11+me10,me15+me14).normalize();return this;},intersectsObject:function(){var sphere=new Sphere();return function intersectsObject(object){var geometry=object.geometry;if(geometry.boundingSphere===null)geometry.computeBoundingSphere();sphere.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);return this.intersectsSphere(sphere);};}(),intersectsSprite:function(){var sphere=new Sphere();return function intersectsSprite(sprite){sphere.center.set(0,0,0);sphere.radius=0.7071067811865476;sphere.applyMatrix4(sprite.matrixWorld);return this.intersectsSphere(sphere);};}(),intersectsSphere:function intersectsSphere(sphere){var planes=this.planes;var center=sphere.center;var negRadius=-sphere.radius;for(var i=0;i<6;i++){var distance=planes[i].distanceToPoint(center);if(distance<negRadius){return false;}}return true;},intersectsBox:function(){var p=new Vector3();return function intersectsBox(box){var planes=this.planes;for(var i=0;i<6;i++){var plane=planes[i];// corner at max distance
p.x=plane.normal.x>0?box.max.x:box.min.x;p.y=plane.normal.y>0?box.max.y:box.min.y;p.z=plane.normal.z>0?box.max.z:box.min.z;if(plane.distanceToPoint(p)<0){return false;}}return true;};}(),containsPoint:function containsPoint(point){var planes=this.planes;for(var i=0;i<6;i++){if(planes[i].distanceToPoint(point)<0){return false;}}return true;}});var alphamap_fragment="#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n";var alphamap_pars_fragment="#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif\n";var alphatest_fragment="#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n";var aomap_fragment="#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif\n";var aomap_pars_fragment="#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";var begin_vertex="\nvec3 transformed = vec3( position );\n";var beginnormal_vertex="\nvec3 objectNormal = vec3( normal );\n";var bsdfs="float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\tif( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\treturn distanceFalloff * maxDistanceCutoffFactor;\n#else\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n\t}\n\treturn 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n";var bumpmap_pars_fragment="#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif\n";var clipping_planes_fragment="#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t#endif\n#endif\n";var clipping_planes_pars_fragment="#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n";var clipping_planes_pars_vertex="#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvarying vec3 vViewPosition;\n#endif\n";var clipping_planes_vertex="#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n";var color_fragment="#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor.xyz;\n\ttotalEmissiveRadiance += 10.0 * vColor.w * vColor.rgb;\n#endif";var color_pars_fragment="#ifdef USE_COLOR\n\tvarying vec4 vColor;\n#endif\n";var color_pars_vertex="#ifdef USE_COLOR\n\tvarying vec4 vColor;\n#endif";var color_vertex="#ifdef USE_COLOR\n\tvColor = color;\n#endif";var common="#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\n";var cube_uv_reflection_fragment="#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif\n";var defaultnormal_vertex="vec3 transformedNormal = normalMatrix * objectNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n";var displacementmap_pars_vertex="#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n";var displacementmap_vertex="#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n";var emissivemap_fragment="#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n";var emissivemap_pars_fragment="#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif\n";var encodings_fragment="  gl_FragColor = linearToOutputTexel( gl_FragColor );\n";var encodings_pars_fragment="\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}\n";var envmap_fragment="#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif\n";var envmap_pars_fragment="#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif\n";var envmap_pars_vertex="#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif\n";var envmap_vertex="#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif\n";var fog_vertex="#ifdef USE_FOG\n\tfogDepth = -mvPosition.z;\n#endif\n";var fog_pars_vertex="#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif\n";var fog_fragment="#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n";var fog_pars_fragment="#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif\n";var gradientmap_pars_fragment="#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif\n";var lightmap_fragment="#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n";var lightmap_pars_fragment="#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";var lights_lambert_vertex="vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif\n";var lights_pars_begin="uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif\n";var envmap_physical_pars_fragment="#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent ));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif\n";var lights_phong_fragment="BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n";var lights_phong_pars_fragment="varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)\n";var lights_physical_fragment="PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n";var lights_physical_pars_fragment="struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n";var lights_fragment_begin="\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearCoatRadiance = vec3( 0.0 );\n#endif\n";var lights_fragment_maps="#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tirradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), maxMipLevel );\n\t#ifndef STANDARD\n\t\tclearCoatRadiance += getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), maxMipLevel );\n\t#endif\n#endif\n";var lights_fragment_end="#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n";var logdepthbuf_fragment="#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";var logdepthbuf_pars_fragment="#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n#endif\n";var logdepthbuf_pars_vertex="#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif\n";var logdepthbuf_vertex="#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\tgl_Position.z *= gl_Position.w;\n\t#endif\n#endif\n";var map_fragment="#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif\n";var map_pars_fragment="#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n";var map_particle_fragment="#ifdef USE_MAP\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n";var map_particle_pars_fragment="#ifdef USE_MAP\n\tuniform mat3 uvTransform;\n\tuniform sampler2D map;\n#endif\n";var metalnessmap_fragment="float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif\n";var metalnessmap_pars_fragment="#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";var morphnormal_vertex="#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n";var morphtarget_pars_vertex="#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif";var morphtarget_vertex="#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n";var normal_fragment_begin="#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n#endif\n";var normal_fragment_maps="#ifdef USE_NORMALMAP\n\t#ifdef OBJECTSPACE_NORMALMAP\n\t\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t#ifdef FLIP_SIDED\n\t\t\tnormal = - normal;\n\t\t#endif\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\tnormal = normalize( normalMatrix * normal );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n";var normalmap_pars_fragment="#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\t#ifdef OBJECTSPACE_NORMALMAP\n\t\tuniform mat3 normalMatrix;\n\t#else\n\t\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\t\tvec2 st0 = dFdx( vUv.st );\n\t\t\tvec2 st1 = dFdy( vUv.st );\n\t\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\t\tvec3 N = normalize( surf_norm );\n\t\t\tmat3 tsn = mat3( S, T, N );\n\t\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t\tmapN.xy *= normalScale;\n\t\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\treturn normalize( tsn * mapN );\n\t\t}\n\t#endif\n#endif\n";var packing="vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n";var premultiplied_alpha_fragment="#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif\n";var project_vertex="vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\n";var dithering_fragment="#if defined( DITHERING )\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif\n";var dithering_pars_fragment="#if defined( DITHERING )\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif\n";var roughnessmap_fragment="float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif\n";var roughnessmap_pars_fragment="#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";var shadowmap_pars_fragment="#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif\n";var shadowmap_pars_vertex="#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif\n";var shadowmap_vertex="#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif\n";var shadowmask_pars_fragment="float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}\n";var skinbase_vertex="#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";var skinning_pars_vertex="#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n";var skinning_vertex="#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif\n";var skinnormal_vertex="#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n";var specularmap_fragment="float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";var specularmap_pars_fragment="#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";var tonemapping_fragment="#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n";var tonemapping_pars_fragment="#ifndef saturate\n\t#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n";var uv_pars_fragment="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif";var uv_pars_vertex="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\n";var uv_vertex="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";var uv2_pars_fragment="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";var uv2_pars_vertex="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif";var uv2_vertex="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif";var worldpos_vertex="#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n#endif\n";var cube_frag="uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldPosition;\nvoid main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n\tgl_FragColor.a *= opacity;\n}\n";var cube_vert="varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}\n";var depth_frag="#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}\n";var depth_vert="#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n";var distanceRGBA_frag="#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}\n";var distanceRGBA_vert="#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}\n";var equirect_frag="uniform sampler2D tEquirect;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldPosition );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n}\n";var equirect_vert="varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n";var linedashed_frag="uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";var linedashed_vert="uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}\n";var meshbasic_frag="uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";var meshbasic_vert="#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}\n";var meshlambert_frag="uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n";var meshlambert_vert="#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";var meshmatcap_frag="#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\tvec4 matcapColor = texture2D( matcap, uv );\n\tmatcapColor = matcapTexelToLinear( matcapColor );\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";var meshmatcap_vert="#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}\n";var meshphong_frag="#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n";var meshphong_vert="#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";var meshphysical_frag="#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n";var meshphysical_vert="#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";var normal_frag="#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}\n";var normal_vert="#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}\n";var points_frag="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";var points_vert="uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}\n";var shadow_frag="uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}\n";var shadow_vert="#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";var sprite_frag="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";var sprite_vert="uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}\n";var ShaderChunk={alphamap_fragment:alphamap_fragment,alphamap_pars_fragment:alphamap_pars_fragment,alphatest_fragment:alphatest_fragment,aomap_fragment:aomap_fragment,aomap_pars_fragment:aomap_pars_fragment,begin_vertex:begin_vertex,beginnormal_vertex:beginnormal_vertex,bsdfs:bsdfs,bumpmap_pars_fragment:bumpmap_pars_fragment,clipping_planes_fragment:clipping_planes_fragment,clipping_planes_pars_fragment:clipping_planes_pars_fragment,clipping_planes_pars_vertex:clipping_planes_pars_vertex,clipping_planes_vertex:clipping_planes_vertex,color_fragment:color_fragment,color_pars_fragment:color_pars_fragment,color_pars_vertex:color_pars_vertex,color_vertex:color_vertex,common:common,cube_uv_reflection_fragment:cube_uv_reflection_fragment,defaultnormal_vertex:defaultnormal_vertex,displacementmap_pars_vertex:displacementmap_pars_vertex,displacementmap_vertex:displacementmap_vertex,emissivemap_fragment:emissivemap_fragment,emissivemap_pars_fragment:emissivemap_pars_fragment,encodings_fragment:encodings_fragment,encodings_pars_fragment:encodings_pars_fragment,envmap_fragment:envmap_fragment,envmap_pars_fragment:envmap_pars_fragment,envmap_pars_vertex:envmap_pars_vertex,envmap_physical_pars_fragment:envmap_physical_pars_fragment,envmap_vertex:envmap_vertex,fog_vertex:fog_vertex,fog_pars_vertex:fog_pars_vertex,fog_fragment:fog_fragment,fog_pars_fragment:fog_pars_fragment,gradientmap_pars_fragment:gradientmap_pars_fragment,lightmap_fragment:lightmap_fragment,lightmap_pars_fragment:lightmap_pars_fragment,lights_lambert_vertex:lights_lambert_vertex,lights_pars_begin:lights_pars_begin,lights_phong_fragment:lights_phong_fragment,lights_phong_pars_fragment:lights_phong_pars_fragment,lights_physical_fragment:lights_physical_fragment,lights_physical_pars_fragment:lights_physical_pars_fragment,lights_fragment_begin:lights_fragment_begin,lights_fragment_maps:lights_fragment_maps,lights_fragment_end:lights_fragment_end,logdepthbuf_fragment:logdepthbuf_fragment,logdepthbuf_pars_fragment:logdepthbuf_pars_fragment,logdepthbuf_pars_vertex:logdepthbuf_pars_vertex,logdepthbuf_vertex:logdepthbuf_vertex,map_fragment:map_fragment,map_pars_fragment:map_pars_fragment,map_particle_fragment:map_particle_fragment,map_particle_pars_fragment:map_particle_pars_fragment,metalnessmap_fragment:metalnessmap_fragment,metalnessmap_pars_fragment:metalnessmap_pars_fragment,morphnormal_vertex:morphnormal_vertex,morphtarget_pars_vertex:morphtarget_pars_vertex,morphtarget_vertex:morphtarget_vertex,normal_fragment_begin:normal_fragment_begin,normal_fragment_maps:normal_fragment_maps,normalmap_pars_fragment:normalmap_pars_fragment,packing:packing,premultiplied_alpha_fragment:premultiplied_alpha_fragment,project_vertex:project_vertex,dithering_fragment:dithering_fragment,dithering_pars_fragment:dithering_pars_fragment,roughnessmap_fragment:roughnessmap_fragment,roughnessmap_pars_fragment:roughnessmap_pars_fragment,shadowmap_pars_fragment:shadowmap_pars_fragment,shadowmap_pars_vertex:shadowmap_pars_vertex,shadowmap_vertex:shadowmap_vertex,shadowmask_pars_fragment:shadowmask_pars_fragment,skinbase_vertex:skinbase_vertex,skinning_pars_vertex:skinning_pars_vertex,skinning_vertex:skinning_vertex,skinnormal_vertex:skinnormal_vertex,specularmap_fragment:specularmap_fragment,specularmap_pars_fragment:specularmap_pars_fragment,tonemapping_fragment:tonemapping_fragment,tonemapping_pars_fragment:tonemapping_pars_fragment,uv_pars_fragment:uv_pars_fragment,uv_pars_vertex:uv_pars_vertex,uv_vertex:uv_vertex,uv2_pars_fragment:uv2_pars_fragment,uv2_pars_vertex:uv2_pars_vertex,uv2_vertex:uv2_vertex,worldpos_vertex:worldpos_vertex,cube_frag:cube_frag,cube_vert:cube_vert,depth_frag:depth_frag,depth_vert:depth_vert,distanceRGBA_frag:distanceRGBA_frag,distanceRGBA_vert:distanceRGBA_vert,equirect_frag:equirect_frag,equirect_vert:equirect_vert,linedashed_frag:linedashed_frag,linedashed_vert:linedashed_vert,meshbasic_frag:meshbasic_frag,meshbasic_vert:meshbasic_vert,meshlambert_frag:meshlambert_frag,meshlambert_vert:meshlambert_vert,meshmatcap_frag:meshmatcap_frag,meshmatcap_vert:meshmatcap_vert,meshphong_frag:meshphong_frag,meshphong_vert:meshphong_vert,meshphysical_frag:meshphysical_frag,meshphysical_vert:meshphysical_vert,normal_frag:normal_frag,normal_vert:normal_vert,points_frag:points_frag,points_vert:points_vert,shadow_frag:shadow_frag,shadow_vert:shadow_vert,sprite_frag:sprite_frag,sprite_vert:sprite_vert};/**
	 * Uniform Utilities
	 */var UniformsUtils={merge:function merge(uniforms){var merged={};for(var u=0;u<uniforms.length;u++){var tmp=this.clone(uniforms[u]);for(var p in tmp){merged[p]=tmp[p];}}return merged;},clone:function clone(uniforms_src){var uniforms_dst={};for(var u in uniforms_src){uniforms_dst[u]={};for(var p in uniforms_src[u]){var parameter_src=uniforms_src[u][p];if(parameter_src&&(parameter_src.isColor||parameter_src.isMatrix3||parameter_src.isMatrix4||parameter_src.isVector2||parameter_src.isVector3||parameter_src.isVector4||parameter_src.isTexture)){uniforms_dst[u][p]=parameter_src.clone();}else if(Array.isArray(parameter_src)){uniforms_dst[u][p]=parameter_src.slice();}else{uniforms_dst[u][p]=parameter_src;}}}return uniforms_dst;}};/**
	 * @author mrdoob / http://mrdoob.com/
	 */var ColorKeywords={'aliceblue':0xF0F8FF,'antiquewhite':0xFAEBD7,'aqua':0x00FFFF,'aquamarine':0x7FFFD4,'azure':0xF0FFFF,'beige':0xF5F5DC,'bisque':0xFFE4C4,'black':0x000000,'blanchedalmond':0xFFEBCD,'blue':0x0000FF,'blueviolet':0x8A2BE2,'brown':0xA52A2A,'burlywood':0xDEB887,'cadetblue':0x5F9EA0,'chartreuse':0x7FFF00,'chocolate':0xD2691E,'coral':0xFF7F50,'cornflowerblue':0x6495ED,'cornsilk':0xFFF8DC,'crimson':0xDC143C,'cyan':0x00FFFF,'darkblue':0x00008B,'darkcyan':0x008B8B,'darkgoldenrod':0xB8860B,'darkgray':0xA9A9A9,'darkgreen':0x006400,'darkgrey':0xA9A9A9,'darkkhaki':0xBDB76B,'darkmagenta':0x8B008B,'darkolivegreen':0x556B2F,'darkorange':0xFF8C00,'darkorchid':0x9932CC,'darkred':0x8B0000,'darksalmon':0xE9967A,'darkseagreen':0x8FBC8F,'darkslateblue':0x483D8B,'darkslategray':0x2F4F4F,'darkslategrey':0x2F4F4F,'darkturquoise':0x00CED1,'darkviolet':0x9400D3,'deeppink':0xFF1493,'deepskyblue':0x00BFFF,'dimgray':0x696969,'dimgrey':0x696969,'dodgerblue':0x1E90FF,'firebrick':0xB22222,'floralwhite':0xFFFAF0,'forestgreen':0x228B22,'fuchsia':0xFF00FF,'gainsboro':0xDCDCDC,'ghostwhite':0xF8F8FF,'gold':0xFFD700,'goldenrod':0xDAA520,'gray':0x808080,'green':0x008000,'greenyellow':0xADFF2F,'grey':0x808080,'honeydew':0xF0FFF0,'hotpink':0xFF69B4,'indianred':0xCD5C5C,'indigo':0x4B0082,'ivory':0xFFFFF0,'khaki':0xF0E68C,'lavender':0xE6E6FA,'lavenderblush':0xFFF0F5,'lawngreen':0x7CFC00,'lemonchiffon':0xFFFACD,'lightblue':0xADD8E6,'lightcoral':0xF08080,'lightcyan':0xE0FFFF,'lightgoldenrodyellow':0xFAFAD2,'lightgray':0xD3D3D3,'lightgreen':0x90EE90,'lightgrey':0xD3D3D3,'lightpink':0xFFB6C1,'lightsalmon':0xFFA07A,'lightseagreen':0x20B2AA,'lightskyblue':0x87CEFA,'lightslategray':0x778899,'lightslategrey':0x778899,'lightsteelblue':0xB0C4DE,'lightyellow':0xFFFFE0,'lime':0x00FF00,'limegreen':0x32CD32,'linen':0xFAF0E6,'magenta':0xFF00FF,'maroon':0x800000,'mediumaquamarine':0x66CDAA,'mediumblue':0x0000CD,'mediumorchid':0xBA55D3,'mediumpurple':0x9370DB,'mediumseagreen':0x3CB371,'mediumslateblue':0x7B68EE,'mediumspringgreen':0x00FA9A,'mediumturquoise':0x48D1CC,'mediumvioletred':0xC71585,'midnightblue':0x191970,'mintcream':0xF5FFFA,'mistyrose':0xFFE4E1,'moccasin':0xFFE4B5,'navajowhite':0xFFDEAD,'navy':0x000080,'oldlace':0xFDF5E6,'olive':0x808000,'olivedrab':0x6B8E23,'orange':0xFFA500,'orangered':0xFF4500,'orchid':0xDA70D6,'palegoldenrod':0xEEE8AA,'palegreen':0x98FB98,'paleturquoise':0xAFEEEE,'palevioletred':0xDB7093,'papayawhip':0xFFEFD5,'peachpuff':0xFFDAB9,'peru':0xCD853F,'pink':0xFFC0CB,'plum':0xDDA0DD,'powderblue':0xB0E0E6,'purple':0x800080,'rebeccapurple':0x663399,'red':0xFF0000,'rosybrown':0xBC8F8F,'royalblue':0x4169E1,'saddlebrown':0x8B4513,'salmon':0xFA8072,'sandybrown':0xF4A460,'seagreen':0x2E8B57,'seashell':0xFFF5EE,'sienna':0xA0522D,'silver':0xC0C0C0,'skyblue':0x87CEEB,'slateblue':0x6A5ACD,'slategray':0x708090,'slategrey':0x708090,'snow':0xFFFAFA,'springgreen':0x00FF7F,'steelblue':0x4682B4,'tan':0xD2B48C,'teal':0x008080,'thistle':0xD8BFD8,'tomato':0xFF6347,'turquoise':0x40E0D0,'violet':0xEE82EE,'wheat':0xF5DEB3,'white':0xFFFFFF,'whitesmoke':0xF5F5F5,'yellow':0xFFFF00,'yellowgreen':0x9ACD32};function Color(r,g,b){if(g===undefined&&b===undefined){// r is THREE.Color, hex or string
return this.set(r);}return this.setRGB(r,g,b);}Object.assign(Color.prototype,{isColor:true,r:1,g:1,b:1,set:function set(value){if(value&&value.isColor){this.copy(value);}else if(typeof value==='number'){this.setHex(value);}else if(typeof value==='string'){this.setStyle(value);}return this;},setScalar:function setScalar(scalar){this.r=scalar;this.g=scalar;this.b=scalar;return this;},setHex:function setHex(hex){hex=Math.floor(hex);this.r=(hex>>16&255)/255;this.g=(hex>>8&255)/255;this.b=(hex&255)/255;return this;},setRGB:function setRGB(r,g,b){this.r=r;this.g=g;this.b=b;return this;},setHSL:function(){function hue2rgb(p,q,t){if(t<0)t+=1;if(t>1)t-=1;if(t<1/6)return p+(q-p)*6*t;if(t<1/2)return q;if(t<2/3)return p+(q-p)*6*(2/3-t);return p;}return function setHSL(h,s,l){// h,s,l ranges are in 0.0 - 1.0
h=_Math.euclideanModulo(h,1);s=_Math.clamp(s,0,1);l=_Math.clamp(l,0,1);if(s===0){this.r=this.g=this.b=l;}else{var p=l<=0.5?l*(1+s):l+s-l*s;var q=2*l-p;this.r=hue2rgb(q,p,h+1/3);this.g=hue2rgb(q,p,h);this.b=hue2rgb(q,p,h-1/3);}return this;};}(),setStyle:function setStyle(style){function handleAlpha(string){if(string===undefined)return;if(parseFloat(string)<1){console.warn('THREE.Color: Alpha component of '+style+' will be ignored.');}}var m;if(m=/^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(style)){// rgb / hsl
var color;var name=m[1];var components=m[2];switch(name){case'rgb':case'rgba':if(color=/^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(components)){// rgb(255,0,0) rgba(255,0,0,0.5)
this.r=Math.min(255,parseInt(color[1],10))/255;this.g=Math.min(255,parseInt(color[2],10))/255;this.b=Math.min(255,parseInt(color[3],10))/255;handleAlpha(color[5]);return this;}if(color=/^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(components)){// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
this.r=Math.min(100,parseInt(color[1],10))/100;this.g=Math.min(100,parseInt(color[2],10))/100;this.b=Math.min(100,parseInt(color[3],10))/100;handleAlpha(color[5]);return this;}break;case'hsl':case'hsla':if(color=/^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(components)){// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
var h=parseFloat(color[1])/360;var s=parseInt(color[2],10)/100;var l=parseInt(color[3],10)/100;handleAlpha(color[5]);return this.setHSL(h,s,l);}break;}}else if(m=/^\#([A-Fa-f0-9]+)$/.exec(style)){// hex color
var hex=m[1];var size=hex.length;if(size===3){// #ff0
this.r=parseInt(hex.charAt(0)+hex.charAt(0),16)/255;this.g=parseInt(hex.charAt(1)+hex.charAt(1),16)/255;this.b=parseInt(hex.charAt(2)+hex.charAt(2),16)/255;return this;}else if(size===6){// #ff0000
this.r=parseInt(hex.charAt(0)+hex.charAt(1),16)/255;this.g=parseInt(hex.charAt(2)+hex.charAt(3),16)/255;this.b=parseInt(hex.charAt(4)+hex.charAt(5),16)/255;return this;}}if(style&&style.length>0){// color keywords
var hex=ColorKeywords[style];if(hex!==undefined){// red
this.setHex(hex);}else{// unknown color
console.warn('THREE.Color: Unknown color '+style);}}return this;},clone:function clone(){return new this.constructor(this.r,this.g,this.b);},copy:function copy(color){this.r=color.r;this.g=color.g;this.b=color.b;return this;},copyGammaToLinear:function copyGammaToLinear(color,gammaFactor){if(gammaFactor===undefined)gammaFactor=2.0;this.r=Math.pow(color.r,gammaFactor);this.g=Math.pow(color.g,gammaFactor);this.b=Math.pow(color.b,gammaFactor);return this;},copyLinearToGamma:function copyLinearToGamma(color,gammaFactor){if(gammaFactor===undefined)gammaFactor=2.0;var safeInverse=gammaFactor>0?1.0/gammaFactor:1.0;this.r=Math.pow(color.r,safeInverse);this.g=Math.pow(color.g,safeInverse);this.b=Math.pow(color.b,safeInverse);return this;},convertGammaToLinear:function convertGammaToLinear(gammaFactor){this.copyGammaToLinear(this,gammaFactor);return this;},convertLinearToGamma:function convertLinearToGamma(gammaFactor){this.copyLinearToGamma(this,gammaFactor);return this;},copySRGBToLinear:function(){function SRGBToLinear(c){return c<0.04045?c*0.0773993808:Math.pow(c*0.9478672986+0.0521327014,2.4);}return function copySRGBToLinear(color){this.r=SRGBToLinear(color.r);this.g=SRGBToLinear(color.g);this.b=SRGBToLinear(color.b);return this;};}(),copyLinearToSRGB:function(){function LinearToSRGB(c){return c<0.0031308?c*12.92:1.055*Math.pow(c,0.41666)-0.055;}return function copyLinearToSRGB(color){this.r=LinearToSRGB(color.r);this.g=LinearToSRGB(color.g);this.b=LinearToSRGB(color.b);return this;};}(),convertSRGBToLinear:function convertSRGBToLinear(){this.copySRGBToLinear(this);return this;},convertLinearToSRGB:function convertLinearToSRGB(){this.copyLinearToSRGB(this);return this;},getHex:function getHex(){return this.r*255<<16^this.g*255<<8^this.b*255<<0;},getHexString:function getHexString(){return('000000'+this.getHex().toString(16)).slice(-6);},getHSL:function getHSL(target){// h,s,l ranges are in 0.0 - 1.0
if(target===undefined){console.warn('THREE.Color: .getHSL() target is now required');target={h:0,s:0,l:0};}var r=this.r,g=this.g,b=this.b;var max=Math.max(r,g,b);var min=Math.min(r,g,b);var hue,saturation;var lightness=(min+max)/2.0;if(min===max){hue=0;saturation=0;}else{var delta=max-min;saturation=lightness<=0.5?delta/(max+min):delta/(2-max-min);switch(max){case r:hue=(g-b)/delta+(g<b?6:0);break;case g:hue=(b-r)/delta+2;break;case b:hue=(r-g)/delta+4;break;}hue/=6;}target.h=hue;target.s=saturation;target.l=lightness;return target;},getStyle:function getStyle(){return'rgb('+(this.r*255|0)+','+(this.g*255|0)+','+(this.b*255|0)+')';},offsetHSL:function(){var hsl={};return function(h,s,l){this.getHSL(hsl);hsl.h+=h;hsl.s+=s;hsl.l+=l;this.setHSL(hsl.h,hsl.s,hsl.l);return this;};}(),add:function add(color){this.r+=color.r;this.g+=color.g;this.b+=color.b;return this;},addColors:function addColors(color1,color2){this.r=color1.r+color2.r;this.g=color1.g+color2.g;this.b=color1.b+color2.b;return this;},addScalar:function addScalar(s){this.r+=s;this.g+=s;this.b+=s;return this;},sub:function sub(color){this.r=Math.max(0,this.r-color.r);this.g=Math.max(0,this.g-color.g);this.b=Math.max(0,this.b-color.b);return this;},multiply:function multiply(color){this.r*=color.r;this.g*=color.g;this.b*=color.b;return this;},multiplyScalar:function multiplyScalar(s){this.r*=s;this.g*=s;this.b*=s;return this;},lerp:function lerp(color,alpha){this.r+=(color.r-this.r)*alpha;this.g+=(color.g-this.g)*alpha;this.b+=(color.b-this.b)*alpha;return this;},lerpHSL:function(){var hslA={h:0,s:0,l:0};var hslB={h:0,s:0,l:0};return function lerpHSL(color,alpha){this.getHSL(hslA);color.getHSL(hslB);var h=_Math.lerp(hslA.h,hslB.h,alpha);var s=_Math.lerp(hslA.s,hslB.s,alpha);var l=_Math.lerp(hslA.l,hslB.l,alpha);this.setHSL(h,s,l);return this;};}(),equals:function equals(c){return c.r===this.r&&c.g===this.g&&c.b===this.b;},fromArray:function fromArray(array,offset){if(offset===undefined)offset=0;this.r=array[offset];this.g=array[offset+1];this.b=array[offset+2];return this;},toArray:function toArray(array,offset){if(array===undefined)array=[];if(offset===undefined)offset=0;array[offset]=this.r;array[offset+1]=this.g;array[offset+2]=this.b;return array;},toJSON:function toJSON(){return this.getHex();}});/**
	 * Uniforms library for shared webgl shaders
	 */var UniformsLib={common:{diffuse:{value:new Color(0xeeeeee)},opacity:{value:1.0},map:{value:null},uvTransform:{value:new Matrix3()},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1.0},refractionRatio:{value:0.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new Vector2(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:0.00025},fogNear:{value:1},fogFar:{value:2000},fogColor:{value:new Color(0xffffff)}},lights:{ambientLightColor:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}}},points:{diffuse:{value:new Color(0xeeeeee)},opacity:{value:1.0},size:{value:1.0},scale:{value:1.0},map:{value:null},uvTransform:{value:new Matrix3()}},sprite:{diffuse:{value:new Color(0xeeeeee)},opacity:{value:1.0},center:{value:new Vector2(0.5,0.5)},rotation:{value:0.0},map:{value:null},uvTransform:{value:new Matrix3()}}};/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 */var ShaderLib={basic:{uniforms:UniformsUtils.merge([UniformsLib.common,UniformsLib.specularmap,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.fog]),vertexShader:ShaderChunk.meshbasic_vert,fragmentShader:ShaderChunk.meshbasic_frag},lambert:{uniforms:UniformsUtils.merge([UniformsLib.common,UniformsLib.specularmap,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0x000000)}}]),vertexShader:ShaderChunk.meshlambert_vert,fragmentShader:ShaderChunk.meshlambert_frag},phong:{uniforms:UniformsUtils.merge([UniformsLib.common,UniformsLib.specularmap,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.gradientmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0x000000)},specular:{value:new Color(0x111111)},shininess:{value:30}}]),vertexShader:ShaderChunk.meshphong_vert,fragmentShader:ShaderChunk.meshphong_frag},standard:{uniforms:UniformsUtils.merge([UniformsLib.common,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.roughnessmap,UniformsLib.metalnessmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0x000000)},roughness:{value:0.5},metalness:{value:0.5},envMapIntensity:{value:1// temporary
}}]),vertexShader:ShaderChunk.meshphysical_vert,fragmentShader:ShaderChunk.meshphysical_frag},matcap:{uniforms:UniformsUtils.merge([UniformsLib.common,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.fog,{matcap:{value:null}}]),vertexShader:ShaderChunk.meshmatcap_vert,fragmentShader:ShaderChunk.meshmatcap_frag},points:{uniforms:UniformsUtils.merge([UniformsLib.points,UniformsLib.fog]),vertexShader:ShaderChunk.points_vert,fragmentShader:ShaderChunk.points_frag},dashed:{uniforms:UniformsUtils.merge([UniformsLib.common,UniformsLib.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:ShaderChunk.linedashed_vert,fragmentShader:ShaderChunk.linedashed_frag},depth:{uniforms:UniformsUtils.merge([UniformsLib.common,UniformsLib.displacementmap]),vertexShader:ShaderChunk.depth_vert,fragmentShader:ShaderChunk.depth_frag},normal:{uniforms:UniformsUtils.merge([UniformsLib.common,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,{opacity:{value:1.0}}]),vertexShader:ShaderChunk.normal_vert,fragmentShader:ShaderChunk.normal_frag},sprite:{uniforms:UniformsUtils.merge([UniformsLib.sprite,UniformsLib.fog]),vertexShader:ShaderChunk.sprite_vert,fragmentShader:ShaderChunk.sprite_frag},/* -------------------------------------------------------------------------
		//	Cube map shader
		 ------------------------------------------------------------------------- */cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1.0}},vertexShader:ShaderChunk.cube_vert,fragmentShader:ShaderChunk.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:ShaderChunk.equirect_vert,fragmentShader:ShaderChunk.equirect_frag},distanceRGBA:{uniforms:UniformsUtils.merge([UniformsLib.common,UniformsLib.displacementmap,{referencePosition:{value:new Vector3()},nearDistance:{value:1},farDistance:{value:1000}}]),vertexShader:ShaderChunk.distanceRGBA_vert,fragmentShader:ShaderChunk.distanceRGBA_frag},shadow:{uniforms:UniformsUtils.merge([UniformsLib.lights,UniformsLib.fog,{color:{value:new Color(0x00000)},opacity:{value:1.0}}]),vertexShader:ShaderChunk.shadow_vert,fragmentShader:ShaderChunk.shadow_frag}};ShaderLib.physical={uniforms:UniformsUtils.merge([ShaderLib.standard.uniforms,{clearCoat:{value:0},clearCoatRoughness:{value:0}}]),vertexShader:ShaderChunk.meshphysical_vert,fragmentShader:ShaderChunk.meshphysical_frag};/**
	 * @author mrdoob / http://mrdoob.com/
	 */function WebGLAnimation(){var context=null;var isAnimating=false;var animationLoop=null;function onAnimationFrame(time,frame){if(isAnimating===false)return;animationLoop(time,frame);context.requestAnimationFrame(onAnimationFrame);}return{start:function start(){if(isAnimating===true)return;if(animationLoop===null)return;context.requestAnimationFrame(onAnimationFrame);isAnimating=true;},stop:function stop(){isAnimating=false;},setAnimationLoop:function setAnimationLoop(callback){animationLoop=callback;},setContext:function setContext(value){context=value;}};}/**
	 * @author mrdoob / http://mrdoob.com/
	 */function WebGLAttributes(gl){var buffers=new WeakMap();function createBuffer(attribute,bufferType){var array=attribute.array;var usage=attribute.dynamic?gl.DYNAMIC_DRAW:gl.STATIC_DRAW;var buffer=gl.createBuffer();gl.bindBuffer(bufferType,buffer);gl.bufferData(bufferType,array,usage);attribute.onUploadCallback();var type=gl.FLOAT;if(array instanceof Float32Array){type=gl.FLOAT;}else if(array instanceof Float64Array){console.warn('THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.');}else if(array instanceof Uint16Array){type=gl.UNSIGNED_SHORT;}else if(array instanceof Int16Array){type=gl.SHORT;}else if(array instanceof Uint32Array){type=gl.UNSIGNED_INT;}else if(array instanceof Int32Array){type=gl.INT;}else if(array instanceof Int8Array){type=gl.BYTE;}else if(array instanceof Uint8Array){type=gl.UNSIGNED_BYTE;}return{buffer:buffer,type:type,bytesPerElement:array.BYTES_PER_ELEMENT,version:attribute.version};}function updateBuffer(buffer,attribute,bufferType){var array=attribute.array;var updateRange=attribute.updateRange;gl.bindBuffer(bufferType,buffer);if(attribute.dynamic===false){gl.bufferData(bufferType,array,gl.STATIC_DRAW);}else if(updateRange.count===-1){// Not using update ranges
gl.bufferSubData(bufferType,0,array);}else if(updateRange.count===0){console.error('THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.');}else{gl.bufferSubData(bufferType,updateRange.offset*array.BYTES_PER_ELEMENT,array.subarray(updateRange.offset,updateRange.offset+updateRange.count));updateRange.count=-1;// reset range
}}//
function get(attribute){if(attribute.isInterleavedBufferAttribute)attribute=attribute.data;return buffers.get(attribute);}function remove(attribute){if(attribute.isInterleavedBufferAttribute)attribute=attribute.data;var data=buffers.get(attribute);if(data){gl.deleteBuffer(data.buffer);buffers.delete(attribute);}}function update(attribute,bufferType){if(attribute.isInterleavedBufferAttribute)attribute=attribute.data;var data=buffers.get(attribute);if(data===undefined){buffers.set(attribute,createBuffer(attribute,bufferType));}else if(data.version<attribute.version){updateBuffer(data.buffer,attribute,bufferType);data.version=attribute.version;}}return{get:get,remove:remove,update:update};}/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 */function Euler(x,y,z,order){this._x=x||0;this._y=y||0;this._z=z||0;this._order=order||Euler.DefaultOrder;}Euler.RotationOrders=['XYZ','YZX','ZXY','XZY','YXZ','ZYX'];Euler.DefaultOrder='XYZ';Object.defineProperties(Euler.prototype,{x:{get:function get(){return this._x;},set:function set(value){this._x=value;this.onChangeCallback();}},y:{get:function get(){return this._y;},set:function set(value){this._y=value;this.onChangeCallback();}},z:{get:function get(){return this._z;},set:function set(value){this._z=value;this.onChangeCallback();}},order:{get:function get(){return this._order;},set:function set(value){this._order=value;this.onChangeCallback();}}});Object.assign(Euler.prototype,{isEuler:true,set:function set(x,y,z,order){this._x=x;this._y=y;this._z=z;this._order=order||this._order;this.onChangeCallback();return this;},clone:function clone(){return new this.constructor(this._x,this._y,this._z,this._order);},copy:function copy(euler){this._x=euler._x;this._y=euler._y;this._z=euler._z;this._order=euler._order;this.onChangeCallback();return this;},setFromRotationMatrix:function setFromRotationMatrix(m,order,update){var clamp=_Math.clamp;// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
var te=m.elements;var m11=te[0],m12=te[4],m13=te[8];var m21=te[1],m22=te[5],m23=te[9];var m31=te[2],m32=te[6],m33=te[10];order=order||this._order;if(order==='XYZ'){this._y=Math.asin(clamp(m13,-1,1));if(Math.abs(m13)<0.99999){this._x=Math.atan2(-m23,m33);this._z=Math.atan2(-m12,m11);}else{this._x=Math.atan2(m32,m22);this._z=0;}}else if(order==='YXZ'){this._x=Math.asin(-clamp(m23,-1,1));if(Math.abs(m23)<0.99999){this._y=Math.atan2(m13,m33);this._z=Math.atan2(m21,m22);}else{this._y=Math.atan2(-m31,m11);this._z=0;}}else if(order==='ZXY'){this._x=Math.asin(clamp(m32,-1,1));if(Math.abs(m32)<0.99999){this._y=Math.atan2(-m31,m33);this._z=Math.atan2(-m12,m22);}else{this._y=0;this._z=Math.atan2(m21,m11);}}else if(order==='ZYX'){this._y=Math.asin(-clamp(m31,-1,1));if(Math.abs(m31)<0.99999){this._x=Math.atan2(m32,m33);this._z=Math.atan2(m21,m11);}else{this._x=0;this._z=Math.atan2(-m12,m22);}}else if(order==='YZX'){this._z=Math.asin(clamp(m21,-1,1));if(Math.abs(m21)<0.99999){this._x=Math.atan2(-m23,m22);this._y=Math.atan2(-m31,m11);}else{this._x=0;this._y=Math.atan2(m13,m33);}}else if(order==='XZY'){this._z=Math.asin(-clamp(m12,-1,1));if(Math.abs(m12)<0.99999){this._x=Math.atan2(m32,m22);this._y=Math.atan2(m13,m11);}else{this._x=Math.atan2(-m23,m33);this._y=0;}}else{console.warn('THREE.Euler: .setFromRotationMatrix() given unsupported order: '+order);}this._order=order;if(update!==false)this.onChangeCallback();return this;},setFromQuaternion:function(){var matrix=new Matrix4();return function setFromQuaternion(q,order,update){matrix.makeRotationFromQuaternion(q);return this.setFromRotationMatrix(matrix,order,update);};}(),setFromVector3:function setFromVector3(v,order){return this.set(v.x,v.y,v.z,order||this._order);},reorder:function(){// WARNING: this discards revolution information -bhouston
var q=new Quaternion();return function reorder(newOrder){q.setFromEuler(this);return this.setFromQuaternion(q,newOrder);};}(),equals:function equals(euler){return euler._x===this._x&&euler._y===this._y&&euler._z===this._z&&euler._order===this._order;},fromArray:function fromArray(array){this._x=array[0];this._y=array[1];this._z=array[2];if(array[3]!==undefined)this._order=array[3];this.onChangeCallback();return this;},toArray:function toArray(array,offset){if(array===undefined)array=[];if(offset===undefined)offset=0;array[offset]=this._x;array[offset+1]=this._y;array[offset+2]=this._z;array[offset+3]=this._order;return array;},toVector3:function toVector3(optionalResult){if(optionalResult){return optionalResult.set(this._x,this._y,this._z);}else{return new Vector3(this._x,this._y,this._z);}},onChange:function onChange(callback){this.onChangeCallback=callback;return this;},onChangeCallback:function onChangeCallback(){}});/**
	 * @author mrdoob / http://mrdoob.com/
	 */function Layers(){this.mask=1|0;}Object.assign(Layers.prototype,{set:function set(channel){this.mask=1<<channel|0;},enable:function enable(channel){this.mask|=1<<channel|0;},toggle:function toggle(channel){this.mask^=1<<channel|0;},disable:function disable(channel){this.mask&=~(1<<channel|0);},test:function test(layers){return(this.mask&layers.mask)!==0;}});/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author elephantatwork / www.elephantatwork.ch
	 */var object3DId=0;function Object3D(){Object.defineProperty(this,'id',{value:object3DId++});this.uuid=_Math.generateUUID();this.name='';this.type='Object3D';this.parent=null;this.children=[];this.up=Object3D.DefaultUp.clone();var position=new Vector3();var rotation=new Euler();var quaternion=new Quaternion();var scale=new Vector3(1,1,1);function onRotationChange(){quaternion.setFromEuler(rotation,false);}function onQuaternionChange(){rotation.setFromQuaternion(quaternion,undefined,false);}rotation.onChange(onRotationChange);quaternion.onChange(onQuaternionChange);Object.defineProperties(this,{position:{enumerable:true,value:position},rotation:{enumerable:true,value:rotation},quaternion:{enumerable:true,value:quaternion},scale:{enumerable:true,value:scale},modelViewMatrix:{value:new Matrix4()},normalMatrix:{value:new Matrix3()}});this.matrix=new Matrix4();this.matrixWorld=new Matrix4();this.matrixAutoUpdate=Object3D.DefaultMatrixAutoUpdate;this.matrixWorldNeedsUpdate=false;this.layers=new Layers();this.visible=true;this.castShadow=false;this.receiveShadow=false;this.frustumCulled=true;this.renderOrder=0;this.userData={};}Object3D.DefaultUp=new Vector3(0,1,0);Object3D.DefaultMatrixAutoUpdate=true;Object3D.prototype=Object.assign(Object.create(EventDispatcher.prototype),{constructor:Object3D,isObject3D:true,onBeforeRender:function onBeforeRender(){},onAfterRender:function onAfterRender(){},applyMatrix:function applyMatrix(matrix){this.matrix.multiplyMatrices(matrix,this.matrix);this.matrix.decompose(this.position,this.quaternion,this.scale);},applyQuaternion:function applyQuaternion(q){this.quaternion.premultiply(q);return this;},setRotationFromAxisAngle:function setRotationFromAxisAngle(axis,angle){// assumes axis is normalized
this.quaternion.setFromAxisAngle(axis,angle);},setRotationFromEuler:function setRotationFromEuler(euler){this.quaternion.setFromEuler(euler,true);},setRotationFromMatrix:function setRotationFromMatrix(m){// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
this.quaternion.setFromRotationMatrix(m);},setRotationFromQuaternion:function setRotationFromQuaternion(q){// assumes q is normalized
this.quaternion.copy(q);},rotateOnAxis:function(){// rotate object on axis in object space
// axis is assumed to be normalized
var q1=new Quaternion();return function rotateOnAxis(axis,angle){q1.setFromAxisAngle(axis,angle);this.quaternion.multiply(q1);return this;};}(),rotateOnWorldAxis:function(){// rotate object on axis in world space
// axis is assumed to be normalized
// method assumes no rotated parent
var q1=new Quaternion();return function rotateOnWorldAxis(axis,angle){q1.setFromAxisAngle(axis,angle);this.quaternion.premultiply(q1);return this;};}(),rotateX:function(){var v1=new Vector3(1,0,0);return function rotateX(angle){return this.rotateOnAxis(v1,angle);};}(),rotateY:function(){var v1=new Vector3(0,1,0);return function rotateY(angle){return this.rotateOnAxis(v1,angle);};}(),rotateZ:function(){var v1=new Vector3(0,0,1);return function rotateZ(angle){return this.rotateOnAxis(v1,angle);};}(),translateOnAxis:function(){// translate object by distance along axis in object space
// axis is assumed to be normalized
var v1=new Vector3();return function translateOnAxis(axis,distance){v1.copy(axis).applyQuaternion(this.quaternion);this.position.add(v1.multiplyScalar(distance));return this;};}(),translateX:function(){var v1=new Vector3(1,0,0);return function translateX(distance){return this.translateOnAxis(v1,distance);};}(),translateY:function(){var v1=new Vector3(0,1,0);return function translateY(distance){return this.translateOnAxis(v1,distance);};}(),translateZ:function(){var v1=new Vector3(0,0,1);return function translateZ(distance){return this.translateOnAxis(v1,distance);};}(),localToWorld:function localToWorld(vector){return vector.applyMatrix4(this.matrixWorld);},worldToLocal:function(){var m1=new Matrix4();return function worldToLocal(vector){return vector.applyMatrix4(m1.getInverse(this.matrixWorld));};}(),lookAt:function(){// This method does not support objects having non-uniformly-scaled parent(s)
var q1=new Quaternion();var m1=new Matrix4();var target=new Vector3();var position=new Vector3();return function lookAt(x,y,z){if(x.isVector3){target.copy(x);}else{target.set(x,y,z);}var parent=this.parent;this.updateWorldMatrix(true,false);position.setFromMatrixPosition(this.matrixWorld);if(this.isCamera){m1.lookAt(position,target,this.up);}else{m1.lookAt(target,position,this.up);}this.quaternion.setFromRotationMatrix(m1);if(parent){m1.extractRotation(parent.matrixWorld);q1.setFromRotationMatrix(m1);this.quaternion.premultiply(q1.inverse());}};}(),add:function add(object){if(arguments.length>1){for(var i=0;i<arguments.length;i++){this.add(arguments[i]);}return this;}if(object===this){console.error("THREE.Object3D.add: object can't be added as a child of itself.",object);return this;}if(object&&object.isObject3D){if(object.parent!==null){object.parent.remove(object);}object.parent=this;object.dispatchEvent({type:'added'});this.children.push(object);}else{console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",object);}return this;},remove:function remove(object){if(arguments.length>1){for(var i=0;i<arguments.length;i++){this.remove(arguments[i]);}return this;}var index=this.children.indexOf(object);if(index!==-1){object.parent=null;object.dispatchEvent({type:'removed'});this.children.splice(index,1);}return this;},getObjectById:function getObjectById(id){return this.getObjectByProperty('id',id);},getObjectByName:function getObjectByName(name){return this.getObjectByProperty('name',name);},getObjectByProperty:function getObjectByProperty(name,value){if(this[name]===value)return this;for(var i=0,l=this.children.length;i<l;i++){var child=this.children[i];var object=child.getObjectByProperty(name,value);if(object!==undefined){return object;}}return undefined;},getWorldPosition:function getWorldPosition(target){if(target===undefined){console.warn('THREE.Object3D: .getWorldPosition() target is now required');target=new Vector3();}this.updateMatrixWorld(true);return target.setFromMatrixPosition(this.matrixWorld);},getWorldQuaternion:function(){var position=new Vector3();var scale=new Vector3();return function getWorldQuaternion(target){if(target===undefined){console.warn('THREE.Object3D: .getWorldQuaternion() target is now required');target=new Quaternion();}this.updateMatrixWorld(true);this.matrixWorld.decompose(position,target,scale);return target;};}(),getWorldScale:function(){var position=new Vector3();var quaternion=new Quaternion();return function getWorldScale(target){if(target===undefined){console.warn('THREE.Object3D: .getWorldScale() target is now required');target=new Vector3();}this.updateMatrixWorld(true);this.matrixWorld.decompose(position,quaternion,target);return target;};}(),getWorldDirection:function getWorldDirection(target){if(target===undefined){console.warn('THREE.Object3D: .getWorldDirection() target is now required');target=new Vector3();}this.updateMatrixWorld(true);var e=this.matrixWorld.elements;return target.set(e[8],e[9],e[10]).normalize();},raycast:function raycast(){},traverse:function traverse(callback){callback(this);var children=this.children;for(var i=0,l=children.length;i<l;i++){children[i].traverse(callback);}},traverseVisible:function traverseVisible(callback){if(this.visible===false)return;callback(this);var children=this.children;for(var i=0,l=children.length;i<l;i++){children[i].traverseVisible(callback);}},traverseAncestors:function traverseAncestors(callback){var parent=this.parent;if(parent!==null){callback(parent);parent.traverseAncestors(callback);}},updateMatrix:function updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale);this.matrixWorldNeedsUpdate=true;},updateMatrixWorld:function updateMatrixWorld(force){if(this.matrixAutoUpdate)this.updateMatrix();if(this.matrixWorldNeedsUpdate||force){if(this.parent===null){this.matrixWorld.copy(this.matrix);}else{this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix);}this.matrixWorldNeedsUpdate=false;force=true;}// update children
var children=this.children;for(var i=0,l=children.length;i<l;i++){children[i].updateMatrixWorld(force);}},updateWorldMatrix:function updateWorldMatrix(updateParents,updateChildren){var parent=this.parent;if(updateParents===true&&parent!==null){parent.updateWorldMatrix(true,false);}if(this.matrixAutoUpdate)this.updateMatrix();if(this.parent===null){this.matrixWorld.copy(this.matrix);}else{this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix);}// update children
if(updateChildren===true){var children=this.children;for(var i=0,l=children.length;i<l;i++){children[i].updateWorldMatrix(false,true);}}},toJSON:function toJSON(meta){// meta is a string when called from JSON.stringify
var isRootObject=meta===undefined||typeof meta==='string';var output={};// meta is a hash used to collect geometries, materials.
// not providing it implies that this is the root object
// being serialized.
if(isRootObject){// initialize meta obj
meta={geometries:{},materials:{},textures:{},images:{},shapes:{}};output.metadata={version:4.5,type:'Object',generator:'Object3D.toJSON'};}// standard Object3D serialization
var object={};object.uuid=this.uuid;object.type=this.type;if(this.name!=='')object.name=this.name;if(this.castShadow===true)object.castShadow=true;if(this.receiveShadow===true)object.receiveShadow=true;if(this.visible===false)object.visible=false;if(this.frustumCulled===false)object.frustumCulled=false;if(this.renderOrder!==0)object.renderOrder=this.renderOrder;if(JSON.stringify(this.userData)!=='{}')object.userData=this.userData;object.layers=this.layers.mask;object.matrix=this.matrix.toArray();if(this.matrixAutoUpdate===false)object.matrixAutoUpdate=false;//
function serialize(library,element){if(library[element.uuid]===undefined){library[element.uuid]=element.toJSON(meta);}return element.uuid;}if(this.isMesh||this.isLine||this.isPoints){object.geometry=serialize(meta.geometries,this.geometry);var parameters=this.geometry.parameters;if(parameters!==undefined&&parameters.shapes!==undefined){var shapes=parameters.shapes;if(Array.isArray(shapes)){for(var i=0,l=shapes.length;i<l;i++){var shape=shapes[i];serialize(meta.shapes,shape);}}else{serialize(meta.shapes,shapes);}}}if(this.material!==undefined){if(Array.isArray(this.material)){var uuids=[];for(var i=0,l=this.material.length;i<l;i++){uuids.push(serialize(meta.materials,this.material[i]));}object.material=uuids;}else{object.material=serialize(meta.materials,this.material);}}//
if(this.children.length>0){object.children=[];for(var i=0;i<this.children.length;i++){object.children.push(this.children[i].toJSON(meta).object);}}if(isRootObject){var geometries=extractFromCache(meta.geometries);var materials=extractFromCache(meta.materials);var textures=extractFromCache(meta.textures);var images=extractFromCache(meta.images);var shapes=extractFromCache(meta.shapes);if(geometries.length>0)output.geometries=geometries;if(materials.length>0)output.materials=materials;if(textures.length>0)output.textures=textures;if(images.length>0)output.images=images;if(shapes.length>0)output.shapes=shapes;}output.object=object;return output;// extract data from the cache hash
// remove metadata on each item
// and return as array
function extractFromCache(cache){var values=[];for(var key in cache){var data=cache[key];delete data.metadata;values.push(data);}return values;}},clone:function clone(recursive){return new this.constructor().copy(this,recursive);},copy:function copy(source,recursive){if(recursive===undefined)recursive=true;this.name=source.name;this.up.copy(source.up);this.position.copy(source.position);this.quaternion.copy(source.quaternion);this.scale.copy(source.scale);this.matrix.copy(source.matrix);this.matrixWorld.copy(source.matrixWorld);this.matrixAutoUpdate=source.matrixAutoUpdate;this.matrixWorldNeedsUpdate=source.matrixWorldNeedsUpdate;this.layers.mask=source.layers.mask;this.visible=source.visible;this.castShadow=source.castShadow;this.receiveShadow=source.receiveShadow;this.frustumCulled=source.frustumCulled;this.renderOrder=source.renderOrder;this.userData=JSON.parse(JSON.stringify(source.userData));if(recursive===true){for(var i=0;i<source.children.length;i++){var child=source.children[i];this.add(child.clone());}}return this;}});/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author WestLangley / http://github.com/WestLangley
	*/function Camera(){Object3D.call(this);this.type='Camera';this.matrixWorldInverse=new Matrix4();this.projectionMatrix=new Matrix4();this.projectionMatrixInverse=new Matrix4();}Camera.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Camera,isCamera:true,copy:function copy(source,recursive){Object3D.prototype.copy.call(this,source,recursive);this.matrixWorldInverse.copy(source.matrixWorldInverse);this.projectionMatrix.copy(source.projectionMatrix);this.projectionMatrixInverse.copy(source.projectionMatrixInverse);return this;},getWorldDirection:function getWorldDirection(target){if(target===undefined){console.warn('THREE.Camera: .getWorldDirection() target is now required');target=new Vector3();}this.updateMatrixWorld(true);var e=this.matrixWorld.elements;return target.set(-e[8],-e[9],-e[10]).normalize();},updateMatrixWorld:function updateMatrixWorld(force){Object3D.prototype.updateMatrixWorld.call(this,force);this.matrixWorldInverse.getInverse(this.matrixWorld);},clone:function clone(){return new this.constructor().copy(this);}});/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author arose / http://github.com/arose
	 */function OrthographicCamera(left,right,top,bottom,near,far){Camera.call(this);this.type='OrthographicCamera';this.zoom=1;this.view=null;this.left=left;this.right=right;this.top=top;this.bottom=bottom;this.near=near!==undefined?near:0.1;this.far=far!==undefined?far:2000;this.updateProjectionMatrix();}OrthographicCamera.prototype=Object.assign(Object.create(Camera.prototype),{constructor:OrthographicCamera,isOrthographicCamera:true,copy:function copy(source,recursive){Camera.prototype.copy.call(this,source,recursive);this.left=source.left;this.right=source.right;this.top=source.top;this.bottom=source.bottom;this.near=source.near;this.far=source.far;this.zoom=source.zoom;this.view=source.view===null?null:Object.assign({},source.view);return this;},setViewOffset:function setViewOffset(fullWidth,fullHeight,x,y,width,height){if(this.view===null){this.view={enabled:true,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1};}this.view.enabled=true;this.view.fullWidth=fullWidth;this.view.fullHeight=fullHeight;this.view.offsetX=x;this.view.offsetY=y;this.view.width=width;this.view.height=height;this.updateProjectionMatrix();},clearViewOffset:function clearViewOffset(){if(this.view!==null){this.view.enabled=false;}this.updateProjectionMatrix();},updateProjectionMatrix:function updateProjectionMatrix(){var dx=(this.right-this.left)/(2*this.zoom);var dy=(this.top-this.bottom)/(2*this.zoom);var cx=(this.right+this.left)/2;var cy=(this.top+this.bottom)/2;var left=cx-dx;var right=cx+dx;var top=cy+dy;var bottom=cy-dy;if(this.view!==null&&this.view.enabled){var zoomW=this.zoom/(this.view.width/this.view.fullWidth);var zoomH=this.zoom/(this.view.height/this.view.fullHeight);var scaleW=(this.right-this.left)/this.view.width;var scaleH=(this.top-this.bottom)/this.view.height;left+=scaleW*(this.view.offsetX/zoomW);right=left+scaleW*(this.view.width/zoomW);top-=scaleH*(this.view.offsetY/zoomH);bottom=top-scaleH*(this.view.height/zoomH);}this.projectionMatrix.makeOrthographic(left,right,top,bottom,this.near,this.far);this.projectionMatrixInverse.getInverse(this.projectionMatrix);},toJSON:function toJSON(meta){var data=Object3D.prototype.toJSON.call(this,meta);data.object.zoom=this.zoom;data.object.left=this.left;data.object.right=this.right;data.object.top=this.top;data.object.bottom=this.bottom;data.object.near=this.near;data.object.far=this.far;if(this.view!==null)data.object.view=Object.assign({},this.view);return data;}});/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */function Face3(a,b,c,normal,color,materialIndex){this.a=a;this.b=b;this.c=c;this.normal=normal&&normal.isVector3?normal:new Vector3();this.vertexNormals=Array.isArray(normal)?normal:[];this.color=color&&color.isColor?color:new Color();this.vertexColors=Array.isArray(color)?color:[];this.materialIndex=materialIndex!==undefined?materialIndex:0;}Object.assign(Face3.prototype,{clone:function clone(){return new this.constructor().copy(this);},copy:function copy(source){this.a=source.a;this.b=source.b;this.c=source.c;this.normal.copy(source.normal);this.color.copy(source.color);this.materialIndex=source.materialIndex;for(var i=0,il=source.vertexNormals.length;i<il;i++){this.vertexNormals[i]=source.vertexNormals[i].clone();}for(var i=0,il=source.vertexColors.length;i<il;i++){this.vertexColors[i]=source.vertexColors[i].clone();}return this;}});/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author kile / http://kile.stravaganza.org/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author bhouston / http://clara.io
	 */var geometryId=0;// Geometry uses even numbers as Id
function Geometry(){Object.defineProperty(this,'id',{value:geometryId+=2});this.uuid=_Math.generateUUID();this.name='';this.type='Geometry';this.vertices=[];this.colors=[];this.faces=[];this.faceVertexUvs=[[]];this.morphTargets=[];this.morphNormals=[];this.skinWeights=[];this.skinIndices=[];this.lineDistances=[];this.boundingBox=null;this.boundingSphere=null;// update flags
this.elementsNeedUpdate=false;this.verticesNeedUpdate=false;this.uvsNeedUpdate=false;this.normalsNeedUpdate=false;this.colorsNeedUpdate=false;this.lineDistancesNeedUpdate=false;this.groupsNeedUpdate=false;}Geometry.prototype=Object.assign(Object.create(EventDispatcher.prototype),{constructor:Geometry,isGeometry:true,applyMatrix:function applyMatrix(matrix){var normalMatrix=new Matrix3().getNormalMatrix(matrix);for(var i=0,il=this.vertices.length;i<il;i++){var vertex=this.vertices[i];vertex.applyMatrix4(matrix);}for(var i=0,il=this.faces.length;i<il;i++){var face=this.faces[i];face.normal.applyMatrix3(normalMatrix).normalize();for(var j=0,jl=face.vertexNormals.length;j<jl;j++){face.vertexNormals[j].applyMatrix3(normalMatrix).normalize();}}if(this.boundingBox!==null){this.computeBoundingBox();}if(this.boundingSphere!==null){this.computeBoundingSphere();}this.verticesNeedUpdate=true;this.normalsNeedUpdate=true;return this;},rotateX:function(){// rotate geometry around world x-axis
var m1=new Matrix4();return function rotateX(angle){m1.makeRotationX(angle);this.applyMatrix(m1);return this;};}(),rotateY:function(){// rotate geometry around world y-axis
var m1=new Matrix4();return function rotateY(angle){m1.makeRotationY(angle);this.applyMatrix(m1);return this;};}(),rotateZ:function(){// rotate geometry around world z-axis
var m1=new Matrix4();return function rotateZ(angle){m1.makeRotationZ(angle);this.applyMatrix(m1);return this;};}(),translate:function(){// translate geometry
var m1=new Matrix4();return function translate(x,y,z){m1.makeTranslation(x,y,z);this.applyMatrix(m1);return this;};}(),scale:function(){// scale geometry
var m1=new Matrix4();return function scale(x,y,z){m1.makeScale(x,y,z);this.applyMatrix(m1);return this;};}(),lookAt:function(){var obj=new Object3D();return function lookAt(vector){obj.lookAt(vector);obj.updateMatrix();this.applyMatrix(obj.matrix);};}(),fromBufferGeometry:function fromBufferGeometry(geometry){var scope=this;var indices=geometry.index!==null?geometry.index.array:undefined;var attributes=geometry.attributes;var positions=attributes.position.array;var normals=attributes.normal!==undefined?attributes.normal.array:undefined;var colors=attributes.color!==undefined?attributes.color.array:undefined;var uvs=attributes.uv!==undefined?attributes.uv.array:undefined;var uvs2=attributes.uv2!==undefined?attributes.uv2.array:undefined;if(uvs2!==undefined)this.faceVertexUvs[1]=[];var tempNormals=[];var tempUVs=[];var tempUVs2=[];for(var i=0,j=0;i<positions.length;i+=3,j+=2){scope.vertices.push(new Vector3(positions[i],positions[i+1],positions[i+2]));if(normals!==undefined){tempNormals.push(new Vector3(normals[i],normals[i+1],normals[i+2]));}if(colors!==undefined){scope.colors.push(new Color(colors[i],colors[i+1],colors[i+2]));}if(uvs!==undefined){tempUVs.push(new Vector2(uvs[j],uvs[j+1]));}if(uvs2!==undefined){tempUVs2.push(new Vector2(uvs2[j],uvs2[j+1]));}}function addFace(a,b,c,materialIndex){var vertexNormals=normals!==undefined?[tempNormals[a].clone(),tempNormals[b].clone(),tempNormals[c].clone()]:[];var vertexColors=colors!==undefined?[scope.colors[a].clone(),scope.colors[b].clone(),scope.colors[c].clone()]:[];var face=new Face3(a,b,c,vertexNormals,vertexColors,materialIndex);scope.faces.push(face);if(uvs!==undefined){scope.faceVertexUvs[0].push([tempUVs[a].clone(),tempUVs[b].clone(),tempUVs[c].clone()]);}if(uvs2!==undefined){scope.faceVertexUvs[1].push([tempUVs2[a].clone(),tempUVs2[b].clone(),tempUVs2[c].clone()]);}}var groups=geometry.groups;if(groups.length>0){for(var i=0;i<groups.length;i++){var group=groups[i];var start=group.start;var count=group.count;for(var j=start,jl=start+count;j<jl;j+=3){if(indices!==undefined){addFace(indices[j],indices[j+1],indices[j+2],group.materialIndex);}else{addFace(j,j+1,j+2,group.materialIndex);}}}}else{if(indices!==undefined){for(var i=0;i<indices.length;i+=3){addFace(indices[i],indices[i+1],indices[i+2]);}}else{for(var i=0;i<positions.length/3;i+=3){addFace(i,i+1,i+2);}}}this.computeFaceNormals();if(geometry.boundingBox!==null){this.boundingBox=geometry.boundingBox.clone();}if(geometry.boundingSphere!==null){this.boundingSphere=geometry.boundingSphere.clone();}return this;},center:function(){var offset=new Vector3();return function center(){this.computeBoundingBox();this.boundingBox.getCenter(offset).negate();this.translate(offset.x,offset.y,offset.z);return this;};}(),normalize:function normalize(){this.computeBoundingSphere();var center=this.boundingSphere.center;var radius=this.boundingSphere.radius;var s=radius===0?1:1.0/radius;var matrix=new Matrix4();matrix.set(s,0,0,-s*center.x,0,s,0,-s*center.y,0,0,s,-s*center.z,0,0,0,1);this.applyMatrix(matrix);return this;},computeFaceNormals:function computeFaceNormals(){var cb=new Vector3(),ab=new Vector3();for(var f=0,fl=this.faces.length;f<fl;f++){var face=this.faces[f];var vA=this.vertices[face.a];var vB=this.vertices[face.b];var vC=this.vertices[face.c];cb.subVectors(vC,vB);ab.subVectors(vA,vB);cb.cross(ab);cb.normalize();face.normal.copy(cb);}},computeVertexNormals:function computeVertexNormals(areaWeighted){if(areaWeighted===undefined)areaWeighted=true;var v,vl,f,fl,face,vertices;vertices=new Array(this.vertices.length);for(v=0,vl=this.vertices.length;v<vl;v++){vertices[v]=new Vector3();}if(areaWeighted){// vertex normals weighted by triangle areas
// http://www.iquilezles.org/www/articles/normals/normals.htm
var vA,vB,vC;var cb=new Vector3(),ab=new Vector3();for(f=0,fl=this.faces.length;f<fl;f++){face=this.faces[f];vA=this.vertices[face.a];vB=this.vertices[face.b];vC=this.vertices[face.c];cb.subVectors(vC,vB);ab.subVectors(vA,vB);cb.cross(ab);vertices[face.a].add(cb);vertices[face.b].add(cb);vertices[face.c].add(cb);}}else{this.computeFaceNormals();for(f=0,fl=this.faces.length;f<fl;f++){face=this.faces[f];vertices[face.a].add(face.normal);vertices[face.b].add(face.normal);vertices[face.c].add(face.normal);}}for(v=0,vl=this.vertices.length;v<vl;v++){vertices[v].normalize();}for(f=0,fl=this.faces.length;f<fl;f++){face=this.faces[f];var vertexNormals=face.vertexNormals;if(vertexNormals.length===3){vertexNormals[0].copy(vertices[face.a]);vertexNormals[1].copy(vertices[face.b]);vertexNormals[2].copy(vertices[face.c]);}else{vertexNormals[0]=vertices[face.a].clone();vertexNormals[1]=vertices[face.b].clone();vertexNormals[2]=vertices[face.c].clone();}}if(this.faces.length>0){this.normalsNeedUpdate=true;}},computeFlatVertexNormals:function computeFlatVertexNormals(){var f,fl,face;this.computeFaceNormals();for(f=0,fl=this.faces.length;f<fl;f++){face=this.faces[f];var vertexNormals=face.vertexNormals;if(vertexNormals.length===3){vertexNormals[0].copy(face.normal);vertexNormals[1].copy(face.normal);vertexNormals[2].copy(face.normal);}else{vertexNormals[0]=face.normal.clone();vertexNormals[1]=face.normal.clone();vertexNormals[2]=face.normal.clone();}}if(this.faces.length>0){this.normalsNeedUpdate=true;}},computeMorphNormals:function computeMorphNormals(){var i,il,f,fl,face;// save original normals
// - create temp variables on first access
//   otherwise just copy (for faster repeated calls)
for(f=0,fl=this.faces.length;f<fl;f++){face=this.faces[f];if(!face.__originalFaceNormal){face.__originalFaceNormal=face.normal.clone();}else{face.__originalFaceNormal.copy(face.normal);}if(!face.__originalVertexNormals)face.__originalVertexNormals=[];for(i=0,il=face.vertexNormals.length;i<il;i++){if(!face.__originalVertexNormals[i]){face.__originalVertexNormals[i]=face.vertexNormals[i].clone();}else{face.__originalVertexNormals[i].copy(face.vertexNormals[i]);}}}// use temp geometry to compute face and vertex normals for each morph
var tmpGeo=new Geometry();tmpGeo.faces=this.faces;for(i=0,il=this.morphTargets.length;i<il;i++){// create on first access
if(!this.morphNormals[i]){this.morphNormals[i]={};this.morphNormals[i].faceNormals=[];this.morphNormals[i].vertexNormals=[];var dstNormalsFace=this.morphNormals[i].faceNormals;var dstNormalsVertex=this.morphNormals[i].vertexNormals;var faceNormal,vertexNormals;for(f=0,fl=this.faces.length;f<fl;f++){faceNormal=new Vector3();vertexNormals={a:new Vector3(),b:new Vector3(),c:new Vector3()};dstNormalsFace.push(faceNormal);dstNormalsVertex.push(vertexNormals);}}var morphNormals=this.morphNormals[i];// set vertices to morph target
tmpGeo.vertices=this.morphTargets[i].vertices;// compute morph normals
tmpGeo.computeFaceNormals();tmpGeo.computeVertexNormals();// store morph normals
var faceNormal,vertexNormals;for(f=0,fl=this.faces.length;f<fl;f++){face=this.faces[f];faceNormal=morphNormals.faceNormals[f];vertexNormals=morphNormals.vertexNormals[f];faceNormal.copy(face.normal);vertexNormals.a.copy(face.vertexNormals[0]);vertexNormals.b.copy(face.vertexNormals[1]);vertexNormals.c.copy(face.vertexNormals[2]);}}// restore original normals
for(f=0,fl=this.faces.length;f<fl;f++){face=this.faces[f];face.normal=face.__originalFaceNormal;face.vertexNormals=face.__originalVertexNormals;}},computeBoundingBox:function computeBoundingBox(){if(this.boundingBox===null){this.boundingBox=new Box3();}this.boundingBox.setFromPoints(this.vertices);},computeBoundingSphere:function computeBoundingSphere(){if(this.boundingSphere===null){this.boundingSphere=new Sphere();}this.boundingSphere.setFromPoints(this.vertices);},merge:function merge(geometry,matrix,materialIndexOffset){if(!(geometry&&geometry.isGeometry)){console.error('THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.',geometry);return;}var normalMatrix,vertexOffset=this.vertices.length,vertices1=this.vertices,vertices2=geometry.vertices,faces1=this.faces,faces2=geometry.faces,uvs1=this.faceVertexUvs[0],uvs2=geometry.faceVertexUvs[0],colors1=this.colors,colors2=geometry.colors;if(materialIndexOffset===undefined)materialIndexOffset=0;if(matrix!==undefined){normalMatrix=new Matrix3().getNormalMatrix(matrix);}// vertices
for(var i=0,il=vertices2.length;i<il;i++){var vertex=vertices2[i];var vertexCopy=vertex.clone();if(matrix!==undefined)vertexCopy.applyMatrix4(matrix);vertices1.push(vertexCopy);}// colors
for(var i=0,il=colors2.length;i<il;i++){colors1.push(colors2[i].clone());}// faces
for(i=0,il=faces2.length;i<il;i++){var face=faces2[i],faceCopy,normal,color,faceVertexNormals=face.vertexNormals,faceVertexColors=face.vertexColors;faceCopy=new Face3(face.a+vertexOffset,face.b+vertexOffset,face.c+vertexOffset);faceCopy.normal.copy(face.normal);if(normalMatrix!==undefined){faceCopy.normal.applyMatrix3(normalMatrix).normalize();}for(var j=0,jl=faceVertexNormals.length;j<jl;j++){normal=faceVertexNormals[j].clone();if(normalMatrix!==undefined){normal.applyMatrix3(normalMatrix).normalize();}faceCopy.vertexNormals.push(normal);}faceCopy.color.copy(face.color);for(var j=0,jl=faceVertexColors.length;j<jl;j++){color=faceVertexColors[j];faceCopy.vertexColors.push(color.clone());}faceCopy.materialIndex=face.materialIndex+materialIndexOffset;faces1.push(faceCopy);}// uvs
for(i=0,il=uvs2.length;i<il;i++){var uv=uvs2[i],uvCopy=[];if(uv===undefined){continue;}for(var j=0,jl=uv.length;j<jl;j++){uvCopy.push(uv[j].clone());}uvs1.push(uvCopy);}},mergeMesh:function mergeMesh(mesh){if(!(mesh&&mesh.isMesh)){console.error('THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.',mesh);return;}if(mesh.matrixAutoUpdate)mesh.updateMatrix();this.merge(mesh.geometry,mesh.matrix);},/*
		 * Checks for duplicate vertices with hashmap.
		 * Duplicated vertices are removed
		 * and faces' vertices are updated.
		 */mergeVertices:function mergeVertices(){var verticesMap={};// Hashmap for looking up vertices by position coordinates (and making sure they are unique)
var unique=[],changes=[];var v,key;var precisionPoints=4;// number of decimal points, e.g. 4 for epsilon of 0.0001
var precision=Math.pow(10,precisionPoints);var i,il,face;var indices,j,jl;for(i=0,il=this.vertices.length;i<il;i++){v=this.vertices[i];key=Math.round(v.x*precision)+'_'+Math.round(v.y*precision)+'_'+Math.round(v.z*precision);if(verticesMap[key]===undefined){verticesMap[key]=i;unique.push(this.vertices[i]);changes[i]=unique.length-1;}else{//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);
changes[i]=changes[verticesMap[key]];}}// if faces are completely degenerate after merging vertices, we
// have to remove them from the geometry.
var faceIndicesToRemove=[];for(i=0,il=this.faces.length;i<il;i++){face=this.faces[i];face.a=changes[face.a];face.b=changes[face.b];face.c=changes[face.c];indices=[face.a,face.b,face.c];// if any duplicate vertices are found in a Face3
// we have to remove the face as nothing can be saved
for(var n=0;n<3;n++){if(indices[n]===indices[(n+1)%3]){faceIndicesToRemove.push(i);break;}}}for(i=faceIndicesToRemove.length-1;i>=0;i--){var idx=faceIndicesToRemove[i];this.faces.splice(idx,1);for(j=0,jl=this.faceVertexUvs.length;j<jl;j++){this.faceVertexUvs[j].splice(idx,1);}}// Use unique set of vertices
var diff=this.vertices.length-unique.length;this.vertices=unique;return diff;},setFromPoints:function setFromPoints(points){this.vertices=[];for(var i=0,l=points.length;i<l;i++){var point=points[i];this.vertices.push(new Vector3(point.x,point.y,point.z||0));}return this;},sortFacesByMaterialIndex:function sortFacesByMaterialIndex(){var faces=this.faces;var length=faces.length;// tag faces
for(var i=0;i<length;i++){faces[i]._id=i;}// sort faces
function materialIndexSort(a,b){return a.materialIndex-b.materialIndex;}faces.sort(materialIndexSort);// sort uvs
var uvs1=this.faceVertexUvs[0];var uvs2=this.faceVertexUvs[1];var newUvs1,newUvs2;if(uvs1&&uvs1.length===length)newUvs1=[];if(uvs2&&uvs2.length===length)newUvs2=[];for(var i=0;i<length;i++){var id=faces[i]._id;if(newUvs1)newUvs1.push(uvs1[id]);if(newUvs2)newUvs2.push(uvs2[id]);}if(newUvs1)this.faceVertexUvs[0]=newUvs1;if(newUvs2)this.faceVertexUvs[1]=newUvs2;},toJSON:function toJSON(){var data={metadata:{version:4.5,type:'Geometry',generator:'Geometry.toJSON'}};// standard Geometry serialization
data.uuid=this.uuid;data.type=this.type;if(this.name!=='')data.name=this.name;if(this.parameters!==undefined){var parameters=this.parameters;for(var key in parameters){if(parameters[key]!==undefined)data[key]=parameters[key];}return data;}var vertices=[];for(var i=0;i<this.vertices.length;i++){var vertex=this.vertices[i];vertices.push(vertex.x,vertex.y,vertex.z);}var faces=[];var normals=[];var normalsHash={};var colors=[];var colorsHash={};var uvs=[];var uvsHash={};for(var i=0;i<this.faces.length;i++){var face=this.faces[i];var hasMaterial=true;var hasFaceUv=false;// deprecated
var hasFaceVertexUv=this.faceVertexUvs[0][i]!==undefined;var hasFaceNormal=face.normal.length()>0;var hasFaceVertexNormal=face.vertexNormals.length>0;var hasFaceColor=face.color.r!==1||face.color.g!==1||face.color.b!==1;var hasFaceVertexColor=face.vertexColors.length>0;var faceType=0;faceType=setBit(faceType,0,0);// isQuad
faceType=setBit(faceType,1,hasMaterial);faceType=setBit(faceType,2,hasFaceUv);faceType=setBit(faceType,3,hasFaceVertexUv);faceType=setBit(faceType,4,hasFaceNormal);faceType=setBit(faceType,5,hasFaceVertexNormal);faceType=setBit(faceType,6,hasFaceColor);faceType=setBit(faceType,7,hasFaceVertexColor);faces.push(faceType);faces.push(face.a,face.b,face.c);faces.push(face.materialIndex);if(hasFaceVertexUv){var faceVertexUvs=this.faceVertexUvs[0][i];faces.push(getUvIndex(faceVertexUvs[0]),getUvIndex(faceVertexUvs[1]),getUvIndex(faceVertexUvs[2]));}if(hasFaceNormal){faces.push(getNormalIndex(face.normal));}if(hasFaceVertexNormal){var vertexNormals=face.vertexNormals;faces.push(getNormalIndex(vertexNormals[0]),getNormalIndex(vertexNormals[1]),getNormalIndex(vertexNormals[2]));}if(hasFaceColor){faces.push(getColorIndex(face.color));}if(hasFaceVertexColor){var vertexColors=face.vertexColors;faces.push(getColorIndex(vertexColors[0]),getColorIndex(vertexColors[1]),getColorIndex(vertexColors[2]));}}function setBit(value,position,enabled){return enabled?value|1<<position:value&~(1<<position);}function getNormalIndex(normal){var hash=normal.x.toString()+normal.y.toString()+normal.z.toString();if(normalsHash[hash]!==undefined){return normalsHash[hash];}normalsHash[hash]=normals.length/3;normals.push(normal.x,normal.y,normal.z);return normalsHash[hash];}function getColorIndex(color){var hash=color.r.toString()+color.g.toString()+color.b.toString();if(colorsHash[hash]!==undefined){return colorsHash[hash];}colorsHash[hash]=colors.length;colors.push(color.getHex());return colorsHash[hash];}function getUvIndex(uv){var hash=uv.x.toString()+uv.y.toString();if(uvsHash[hash]!==undefined){return uvsHash[hash];}uvsHash[hash]=uvs.length/2;uvs.push(uv.x,uv.y);return uvsHash[hash];}data.data={};data.data.vertices=vertices;data.data.normals=normals;if(colors.length>0)data.data.colors=colors;if(uvs.length>0)data.data.uvs=[uvs];// temporal backward compatibility
data.data.faces=faces;return data;},clone:function clone(){/*
			 // Handle primitives

			 var parameters = this.parameters;

			 if ( parameters !== undefined ) {

			 var values = [];

			 for ( var key in parameters ) {

			 values.push( parameters[ key ] );

			 }

			 var geometry = Object.create( this.constructor.prototype );
			 this.constructor.apply( geometry, values );
			 return geometry;

			 }

			 return new this.constructor().copy( this );
			 */return new Geometry().copy(this);},copy:function copy(source){var i,il,j,jl,k,kl;// reset
this.vertices=[];this.colors=[];this.faces=[];this.faceVertexUvs=[[]];this.morphTargets=[];this.morphNormals=[];this.skinWeights=[];this.skinIndices=[];this.lineDistances=[];this.boundingBox=null;this.boundingSphere=null;// name
this.name=source.name;// vertices
var vertices=source.vertices;for(i=0,il=vertices.length;i<il;i++){this.vertices.push(vertices[i].clone());}// colors
var colors=source.colors;for(i=0,il=colors.length;i<il;i++){this.colors.push(colors[i].clone());}// faces
var faces=source.faces;for(i=0,il=faces.length;i<il;i++){this.faces.push(faces[i].clone());}// face vertex uvs
for(i=0,il=source.faceVertexUvs.length;i<il;i++){var faceVertexUvs=source.faceVertexUvs[i];if(this.faceVertexUvs[i]===undefined){this.faceVertexUvs[i]=[];}for(j=0,jl=faceVertexUvs.length;j<jl;j++){var uvs=faceVertexUvs[j],uvsCopy=[];for(k=0,kl=uvs.length;k<kl;k++){var uv=uvs[k];uvsCopy.push(uv.clone());}this.faceVertexUvs[i].push(uvsCopy);}}// morph targets
var morphTargets=source.morphTargets;for(i=0,il=morphTargets.length;i<il;i++){var morphTarget={};morphTarget.name=morphTargets[i].name;// vertices
if(morphTargets[i].vertices!==undefined){morphTarget.vertices=[];for(j=0,jl=morphTargets[i].vertices.length;j<jl;j++){morphTarget.vertices.push(morphTargets[i].vertices[j].clone());}}// normals
if(morphTargets[i].normals!==undefined){morphTarget.normals=[];for(j=0,jl=morphTargets[i].normals.length;j<jl;j++){morphTarget.normals.push(morphTargets[i].normals[j].clone());}}this.morphTargets.push(morphTarget);}// morph normals
var morphNormals=source.morphNormals;for(i=0,il=morphNormals.length;i<il;i++){var morphNormal={};// vertex normals
if(morphNormals[i].vertexNormals!==undefined){morphNormal.vertexNormals=[];for(j=0,jl=morphNormals[i].vertexNormals.length;j<jl;j++){var srcVertexNormal=morphNormals[i].vertexNormals[j];var destVertexNormal={};destVertexNormal.a=srcVertexNormal.a.clone();destVertexNormal.b=srcVertexNormal.b.clone();destVertexNormal.c=srcVertexNormal.c.clone();morphNormal.vertexNormals.push(destVertexNormal);}}// face normals
if(morphNormals[i].faceNormals!==undefined){morphNormal.faceNormals=[];for(j=0,jl=morphNormals[i].faceNormals.length;j<jl;j++){morphNormal.faceNormals.push(morphNormals[i].faceNormals[j].clone());}}this.morphNormals.push(morphNormal);}// skin weights
var skinWeights=source.skinWeights;for(i=0,il=skinWeights.length;i<il;i++){this.skinWeights.push(skinWeights[i].clone());}// skin indices
var skinIndices=source.skinIndices;for(i=0,il=skinIndices.length;i<il;i++){this.skinIndices.push(skinIndices[i].clone());}// line distances
var lineDistances=source.lineDistances;for(i=0,il=lineDistances.length;i<il;i++){this.lineDistances.push(lineDistances[i]);}// bounding box
var boundingBox=source.boundingBox;if(boundingBox!==null){this.boundingBox=boundingBox.clone();}// bounding sphere
var boundingSphere=source.boundingSphere;if(boundingSphere!==null){this.boundingSphere=boundingSphere.clone();}// update flags
this.elementsNeedUpdate=source.elementsNeedUpdate;this.verticesNeedUpdate=source.verticesNeedUpdate;this.uvsNeedUpdate=source.uvsNeedUpdate;this.normalsNeedUpdate=source.normalsNeedUpdate;this.colorsNeedUpdate=source.colorsNeedUpdate;this.lineDistancesNeedUpdate=source.lineDistancesNeedUpdate;this.groupsNeedUpdate=source.groupsNeedUpdate;return this;},dispose:function dispose(){this.dispatchEvent({type:'dispose'});}});/**
	 * @author mrdoob / http://mrdoob.com/
	 */function BufferAttribute(array,itemSize,normalized){if(Array.isArray(array)){throw new TypeError('THREE.BufferAttribute: array should be a Typed Array.');}this.name='';this.array=array;this.itemSize=itemSize;this.count=array!==undefined?array.length/itemSize:0;this.normalized=normalized===true;this.dynamic=false;this.updateRange={offset:0,count:-1};this.version=0;}Object.defineProperty(BufferAttribute.prototype,'needsUpdate',{set:function set(value){if(value===true)this.version++;}});Object.assign(BufferAttribute.prototype,{isBufferAttribute:true,onUploadCallback:function onUploadCallback(){},setArray:function setArray(array){if(Array.isArray(array)){throw new TypeError('THREE.BufferAttribute: array should be a Typed Array.');}this.count=array!==undefined?array.length/this.itemSize:0;this.array=array;return this;},setDynamic:function setDynamic(value){this.dynamic=value;return this;},copy:function copy(source){this.name=source.name;this.array=new source.array.constructor(source.array);this.itemSize=source.itemSize;this.count=source.count;this.normalized=source.normalized;this.dynamic=source.dynamic;return this;},copyAt:function copyAt(index1,attribute,index2){index1*=this.itemSize;index2*=attribute.itemSize;for(var i=0,l=this.itemSize;i<l;i++){this.array[index1+i]=attribute.array[index2+i];}return this;},copyArray:function copyArray(array){this.array.set(array);return this;},copyColorsArray:function copyColorsArray(colors){var array=this.array,offset=0;for(var i=0,l=colors.length;i<l;i++){var color=colors[i];if(color===undefined){console.warn('THREE.BufferAttribute.copyColorsArray(): color is undefined',i);color=new Color();}array[offset++]=color.r;array[offset++]=color.g;array[offset++]=color.b;}return this;},copyVector2sArray:function copyVector2sArray(vectors){var array=this.array,offset=0;for(var i=0,l=vectors.length;i<l;i++){var vector=vectors[i];if(vector===undefined){console.warn('THREE.BufferAttribute.copyVector2sArray(): vector is undefined',i);vector=new Vector2();}array[offset++]=vector.x;array[offset++]=vector.y;}return this;},copyVector3sArray:function copyVector3sArray(vectors){var array=this.array,offset=0;for(var i=0,l=vectors.length;i<l;i++){var vector=vectors[i];if(vector===undefined){console.warn('THREE.BufferAttribute.copyVector3sArray(): vector is undefined',i);vector=new Vector3();}array[offset++]=vector.x;array[offset++]=vector.y;array[offset++]=vector.z;}return this;},copyVector4sArray:function copyVector4sArray(vectors){var array=this.array,offset=0;for(var i=0,l=vectors.length;i<l;i++){var vector=vectors[i];if(vector===undefined){console.warn('THREE.BufferAttribute.copyVector4sArray(): vector is undefined',i);vector=new Vector4();}array[offset++]=vector.x;array[offset++]=vector.y;array[offset++]=vector.z;array[offset++]=vector.w;}return this;},set:function set(value,offset){if(offset===undefined)offset=0;this.array.set(value,offset);return this;},getX:function getX(index){return this.array[index*this.itemSize];},setX:function setX(index,x){this.array[index*this.itemSize]=x;return this;},getY:function getY(index){return this.array[index*this.itemSize+1];},setY:function setY(index,y){this.array[index*this.itemSize+1]=y;return this;},getZ:function getZ(index){return this.array[index*this.itemSize+2];},setZ:function setZ(index,z){this.array[index*this.itemSize+2]=z;return this;},getW:function getW(index){return this.array[index*this.itemSize+3];},setW:function setW(index,w){this.array[index*this.itemSize+3]=w;return this;},setXY:function setXY(index,x,y){index*=this.itemSize;this.array[index+0]=x;this.array[index+1]=y;return this;},setXYZ:function setXYZ(index,x,y,z){index*=this.itemSize;this.array[index+0]=x;this.array[index+1]=y;this.array[index+2]=z;return this;},setXYZW:function setXYZW(index,x,y,z,w){index*=this.itemSize;this.array[index+0]=x;this.array[index+1]=y;this.array[index+2]=z;this.array[index+3]=w;return this;},onUpload:function onUpload(callback){this.onUploadCallback=callback;return this;},clone:function clone(){return new this.constructor(this.array,this.itemSize).copy(this);}});//
function Int8BufferAttribute(array,itemSize,normalized){BufferAttribute.call(this,new Int8Array(array),itemSize,normalized);}Int8BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Int8BufferAttribute.prototype.constructor=Int8BufferAttribute;function Uint8BufferAttribute(array,itemSize,normalized){BufferAttribute.call(this,new Uint8Array(array),itemSize,normalized);}Uint8BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Uint8BufferAttribute.prototype.constructor=Uint8BufferAttribute;function Uint8ClampedBufferAttribute(array,itemSize,normalized){BufferAttribute.call(this,new Uint8ClampedArray(array),itemSize,normalized);}Uint8ClampedBufferAttribute.prototype=Object.create(BufferAttribute.prototype);Uint8ClampedBufferAttribute.prototype.constructor=Uint8ClampedBufferAttribute;function Int16BufferAttribute(array,itemSize,normalized){BufferAttribute.call(this,new Int16Array(array),itemSize,normalized);}Int16BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Int16BufferAttribute.prototype.constructor=Int16BufferAttribute;function Uint16BufferAttribute(array,itemSize,normalized){BufferAttribute.call(this,new Uint16Array(array),itemSize,normalized);}Uint16BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Uint16BufferAttribute.prototype.constructor=Uint16BufferAttribute;function Int32BufferAttribute(array,itemSize,normalized){BufferAttribute.call(this,new Int32Array(array),itemSize,normalized);}Int32BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Int32BufferAttribute.prototype.constructor=Int32BufferAttribute;function Uint32BufferAttribute(array,itemSize,normalized){BufferAttribute.call(this,new Uint32Array(array),itemSize,normalized);}Uint32BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Uint32BufferAttribute.prototype.constructor=Uint32BufferAttribute;function Float32BufferAttribute(array,itemSize,normalized){BufferAttribute.call(this,new Float32Array(array),itemSize,normalized);}Float32BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Float32BufferAttribute.prototype.constructor=Float32BufferAttribute;function Float64BufferAttribute(array,itemSize,normalized){BufferAttribute.call(this,new Float64Array(array),itemSize,normalized);}Float64BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Float64BufferAttribute.prototype.constructor=Float64BufferAttribute;/**
	 * @author mrdoob / http://mrdoob.com/
	 */function DirectGeometry(){this.vertices=[];this.normals=[];this.colors=[];this.uvs=[];this.uvs2=[];this.groups=[];this.morphTargets={};this.skinWeights=[];this.skinIndices=[];// this.lineDistances = [];
this.boundingBox=null;this.boundingSphere=null;// update flags
this.verticesNeedUpdate=false;this.normalsNeedUpdate=false;this.colorsNeedUpdate=false;this.uvsNeedUpdate=false;this.groupsNeedUpdate=false;}Object.assign(DirectGeometry.prototype,{computeGroups:function computeGroups(geometry){var group;var groups=[];var materialIndex=undefined;var faces=geometry.faces;for(var i=0;i<faces.length;i++){var face=faces[i];// materials
if(face.materialIndex!==materialIndex){materialIndex=face.materialIndex;if(group!==undefined){group.count=i*3-group.start;groups.push(group);}group={start:i*3,materialIndex:materialIndex};}}if(group!==undefined){group.count=i*3-group.start;groups.push(group);}this.groups=groups;},fromGeometry:function fromGeometry(geometry){var faces=geometry.faces;var vertices=geometry.vertices;var faceVertexUvs=geometry.faceVertexUvs;var hasFaceVertexUv=faceVertexUvs[0]&&faceVertexUvs[0].length>0;var hasFaceVertexUv2=faceVertexUvs[1]&&faceVertexUvs[1].length>0;// morphs
var morphTargets=geometry.morphTargets;var morphTargetsLength=morphTargets.length;var morphTargetsPosition;if(morphTargetsLength>0){morphTargetsPosition=[];for(var i=0;i<morphTargetsLength;i++){morphTargetsPosition[i]={name:morphTargets[i].name,data:[]};}this.morphTargets.position=morphTargetsPosition;}var morphNormals=geometry.morphNormals;var morphNormalsLength=morphNormals.length;var morphTargetsNormal;if(morphNormalsLength>0){morphTargetsNormal=[];for(var i=0;i<morphNormalsLength;i++){morphTargetsNormal[i]={name:morphNormals[i].name,data:[]};}this.morphTargets.normal=morphTargetsNormal;}// skins
var skinIndices=geometry.skinIndices;var skinWeights=geometry.skinWeights;var hasSkinIndices=skinIndices.length===vertices.length;var hasSkinWeights=skinWeights.length===vertices.length;//
if(vertices.length>0&&faces.length===0){console.error('THREE.DirectGeometry: Faceless geometries are not supported.');}for(var i=0;i<faces.length;i++){var face=faces[i];this.vertices.push(vertices[face.a],vertices[face.b],vertices[face.c]);var vertexNormals=face.vertexNormals;if(vertexNormals.length===3){this.normals.push(vertexNormals[0],vertexNormals[1],vertexNormals[2]);}else{var normal=face.normal;this.normals.push(normal,normal,normal);}var vertexColors=face.vertexColors;if(vertexColors.length===3){this.colors.push(vertexColors[0],vertexColors[1],vertexColors[2]);}else{var color=face.color;this.colors.push(color,color,color);}if(hasFaceVertexUv===true){var vertexUvs=faceVertexUvs[0][i];if(vertexUvs!==undefined){this.uvs.push(vertexUvs[0],vertexUvs[1],vertexUvs[2]);}else{console.warn('THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ',i);this.uvs.push(new Vector2(),new Vector2(),new Vector2());}}if(hasFaceVertexUv2===true){var vertexUvs=faceVertexUvs[1][i];if(vertexUvs!==undefined){this.uvs2.push(vertexUvs[0],vertexUvs[1],vertexUvs[2]);}else{console.warn('THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ',i);this.uvs2.push(new Vector2(),new Vector2(),new Vector2());}}// morphs
for(var j=0;j<morphTargetsLength;j++){var morphTarget=morphTargets[j].vertices;morphTargetsPosition[j].data.push(morphTarget[face.a],morphTarget[face.b],morphTarget[face.c]);}for(var j=0;j<morphNormalsLength;j++){var morphNormal=morphNormals[j].vertexNormals[i];morphTargetsNormal[j].data.push(morphNormal.a,morphNormal.b,morphNormal.c);}// skins
if(hasSkinIndices){this.skinIndices.push(skinIndices[face.a],skinIndices[face.b],skinIndices[face.c]);}if(hasSkinWeights){this.skinWeights.push(skinWeights[face.a],skinWeights[face.b],skinWeights[face.c]);}}this.computeGroups(geometry);this.verticesNeedUpdate=geometry.verticesNeedUpdate;this.normalsNeedUpdate=geometry.normalsNeedUpdate;this.colorsNeedUpdate=geometry.colorsNeedUpdate;this.uvsNeedUpdate=geometry.uvsNeedUpdate;this.groupsNeedUpdate=geometry.groupsNeedUpdate;return this;}});/**
	 * @author mrdoob / http://mrdoob.com/
	 */function arrayMax(array){if(array.length===0)return-Infinity;var max=array[0];for(var i=1,l=array.length;i<l;++i){if(array[i]>max)max=array[i];}return max;}/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */var bufferGeometryId=1;// BufferGeometry uses odd numbers as Id
function BufferGeometry(){Object.defineProperty(this,'id',{value:bufferGeometryId+=2});this.uuid=_Math.generateUUID();this.name='';this.type='BufferGeometry';this.index=null;this.attributes={};this.morphAttributes={};this.groups=[];this.boundingBox=null;this.boundingSphere=null;this.drawRange={start:0,count:Infinity};this.userData={};}BufferGeometry.prototype=Object.assign(Object.create(EventDispatcher.prototype),{constructor:BufferGeometry,isBufferGeometry:true,getIndex:function getIndex(){return this.index;},setIndex:function setIndex(index){if(Array.isArray(index)){this.index=new(arrayMax(index)>65535?Uint32BufferAttribute:Uint16BufferAttribute)(index,1);}else{this.index=index;}},addAttribute:function addAttribute(name,attribute){if(!(attribute&&attribute.isBufferAttribute)&&!(attribute&&attribute.isInterleavedBufferAttribute)){console.warn('THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).');return this.addAttribute(name,new BufferAttribute(arguments[1],arguments[2]));}if(name==='index'){console.warn('THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.');this.setIndex(attribute);return this;}this.attributes[name]=attribute;return this;},getAttribute:function getAttribute(name){return this.attributes[name];},removeAttribute:function removeAttribute(name){delete this.attributes[name];return this;},addGroup:function addGroup(start,count,materialIndex){this.groups.push({start:start,count:count,materialIndex:materialIndex!==undefined?materialIndex:0});},clearGroups:function clearGroups(){this.groups=[];},setDrawRange:function setDrawRange(start,count){this.drawRange.start=start;this.drawRange.count=count;},applyMatrix:function applyMatrix(matrix){var position=this.attributes.position;if(position!==undefined){matrix.applyToBufferAttribute(position);position.needsUpdate=true;}var normal=this.attributes.normal;if(normal!==undefined){var normalMatrix=new Matrix3().getNormalMatrix(matrix);normalMatrix.applyToBufferAttribute(normal);normal.needsUpdate=true;}if(this.boundingBox!==null){this.computeBoundingBox();}if(this.boundingSphere!==null){this.computeBoundingSphere();}return this;},rotateX:function(){// rotate geometry around world x-axis
var m1=new Matrix4();return function rotateX(angle){m1.makeRotationX(angle);this.applyMatrix(m1);return this;};}(),rotateY:function(){// rotate geometry around world y-axis
var m1=new Matrix4();return function rotateY(angle){m1.makeRotationY(angle);this.applyMatrix(m1);return this;};}(),rotateZ:function(){// rotate geometry around world z-axis
var m1=new Matrix4();return function rotateZ(angle){m1.makeRotationZ(angle);this.applyMatrix(m1);return this;};}(),translate:function(){// translate geometry
var m1=new Matrix4();return function translate(x,y,z){m1.makeTranslation(x,y,z);this.applyMatrix(m1);return this;};}(),scale:function(){// scale geometry
var m1=new Matrix4();return function scale(x,y,z){m1.makeScale(x,y,z);this.applyMatrix(m1);return this;};}(),lookAt:function(){var obj=new Object3D();return function lookAt(vector){obj.lookAt(vector);obj.updateMatrix();this.applyMatrix(obj.matrix);};}(),center:function(){var offset=new Vector3();return function center(){this.computeBoundingBox();this.boundingBox.getCenter(offset).negate();this.translate(offset.x,offset.y,offset.z);return this;};}(),setFromObject:function setFromObject(object){// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );
var geometry=object.geometry;if(object.isPoints||object.isLine){var positions=new Float32BufferAttribute(geometry.vertices.length*3,3);var colors=new Float32BufferAttribute(geometry.colors.length*3,3);this.addAttribute('position',positions.copyVector3sArray(geometry.vertices));this.addAttribute('color',colors.copyColorsArray(geometry.colors));if(geometry.lineDistances&&geometry.lineDistances.length===geometry.vertices.length){var lineDistances=new Float32BufferAttribute(geometry.lineDistances.length,1);this.addAttribute('lineDistance',lineDistances.copyArray(geometry.lineDistances));}if(geometry.boundingSphere!==null){this.boundingSphere=geometry.boundingSphere.clone();}if(geometry.boundingBox!==null){this.boundingBox=geometry.boundingBox.clone();}}else if(object.isMesh){if(geometry&&geometry.isGeometry){this.fromGeometry(geometry);}}return this;},setFromPoints:function setFromPoints(points){var position=[];for(var i=0,l=points.length;i<l;i++){var point=points[i];position.push(point.x,point.y,point.z||0);}this.addAttribute('position',new Float32BufferAttribute(position,3));return this;},updateFromObject:function updateFromObject(object){var geometry=object.geometry;if(object.isMesh){var direct=geometry.__directGeometry;if(geometry.elementsNeedUpdate===true){direct=undefined;geometry.elementsNeedUpdate=false;}if(direct===undefined){return this.fromGeometry(geometry);}direct.verticesNeedUpdate=geometry.verticesNeedUpdate;direct.normalsNeedUpdate=geometry.normalsNeedUpdate;direct.colorsNeedUpdate=geometry.colorsNeedUpdate;direct.uvsNeedUpdate=geometry.uvsNeedUpdate;direct.groupsNeedUpdate=geometry.groupsNeedUpdate;geometry.verticesNeedUpdate=false;geometry.normalsNeedUpdate=false;geometry.colorsNeedUpdate=false;geometry.uvsNeedUpdate=false;geometry.groupsNeedUpdate=false;geometry=direct;}var attribute;if(geometry.verticesNeedUpdate===true){attribute=this.attributes.position;if(attribute!==undefined){attribute.copyVector3sArray(geometry.vertices);attribute.needsUpdate=true;}geometry.verticesNeedUpdate=false;}if(geometry.normalsNeedUpdate===true){attribute=this.attributes.normal;if(attribute!==undefined){attribute.copyVector3sArray(geometry.normals);attribute.needsUpdate=true;}geometry.normalsNeedUpdate=false;}if(geometry.colorsNeedUpdate===true){attribute=this.attributes.color;if(attribute!==undefined){attribute.copyColorsArray(geometry.colors);attribute.needsUpdate=true;}geometry.colorsNeedUpdate=false;}if(geometry.uvsNeedUpdate){attribute=this.attributes.uv;if(attribute!==undefined){attribute.copyVector2sArray(geometry.uvs);attribute.needsUpdate=true;}geometry.uvsNeedUpdate=false;}if(geometry.lineDistancesNeedUpdate){attribute=this.attributes.lineDistance;if(attribute!==undefined){attribute.copyArray(geometry.lineDistances);attribute.needsUpdate=true;}geometry.lineDistancesNeedUpdate=false;}if(geometry.groupsNeedUpdate){geometry.computeGroups(object.geometry);this.groups=geometry.groups;geometry.groupsNeedUpdate=false;}return this;},fromGeometry:function fromGeometry(geometry){geometry.__directGeometry=new DirectGeometry().fromGeometry(geometry);return this.fromDirectGeometry(geometry.__directGeometry);},fromDirectGeometry:function fromDirectGeometry(geometry){var positions=new Float32Array(geometry.vertices.length*3);this.addAttribute('position',new BufferAttribute(positions,3).copyVector3sArray(geometry.vertices));if(geometry.normals.length>0){var normals=new Float32Array(geometry.normals.length*3);this.addAttribute('normal',new BufferAttribute(normals,3).copyVector3sArray(geometry.normals));}if(geometry.colors.length>0){var colors=new Float32Array(geometry.colors.length*3);this.addAttribute('color',new BufferAttribute(colors,3).copyColorsArray(geometry.colors));}if(geometry.uvs.length>0){var uvs=new Float32Array(geometry.uvs.length*2);this.addAttribute('uv',new BufferAttribute(uvs,2).copyVector2sArray(geometry.uvs));}if(geometry.uvs2.length>0){var uvs2=new Float32Array(geometry.uvs2.length*2);this.addAttribute('uv2',new BufferAttribute(uvs2,2).copyVector2sArray(geometry.uvs2));}// groups
this.groups=geometry.groups;// morphs
for(var name in geometry.morphTargets){var array=[];var morphTargets=geometry.morphTargets[name];for(var i=0,l=morphTargets.length;i<l;i++){var morphTarget=morphTargets[i];var attribute=new Float32BufferAttribute(morphTarget.data.length*3,3);attribute.name=morphTarget.name;array.push(attribute.copyVector3sArray(morphTarget.data));}this.morphAttributes[name]=array;}// skinning
if(geometry.skinIndices.length>0){var skinIndices=new Float32BufferAttribute(geometry.skinIndices.length*4,4);this.addAttribute('skinIndex',skinIndices.copyVector4sArray(geometry.skinIndices));}if(geometry.skinWeights.length>0){var skinWeights=new Float32BufferAttribute(geometry.skinWeights.length*4,4);this.addAttribute('skinWeight',skinWeights.copyVector4sArray(geometry.skinWeights));}//
if(geometry.boundingSphere!==null){this.boundingSphere=geometry.boundingSphere.clone();}if(geometry.boundingBox!==null){this.boundingBox=geometry.boundingBox.clone();}return this;},computeBoundingBox:function computeBoundingBox(){if(this.boundingBox===null){this.boundingBox=new Box3();}var position=this.attributes.position;if(position!==undefined){this.boundingBox.setFromBufferAttribute(position);}else{this.boundingBox.makeEmpty();}if(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z)){console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this);}},computeBoundingSphere:function(){var box=new Box3();var vector=new Vector3();return function computeBoundingSphere(){if(this.boundingSphere===null){this.boundingSphere=new Sphere();}var position=this.attributes.position;if(position){var center=this.boundingSphere.center;box.setFromBufferAttribute(position);box.getCenter(center);// hoping to find a boundingSphere with a radius smaller than the
// boundingSphere of the boundingBox: sqrt(3) smaller in the best case
var maxRadiusSq=0;for(var i=0,il=position.count;i<il;i++){vector.x=position.getX(i);vector.y=position.getY(i);vector.z=position.getZ(i);maxRadiusSq=Math.max(maxRadiusSq,center.distanceToSquared(vector));}this.boundingSphere.radius=Math.sqrt(maxRadiusSq);if(isNaN(this.boundingSphere.radius)){console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this);}}};}(),computeFaceNormals:function computeFaceNormals(){// backwards compatibility
},computeVertexNormals:function computeVertexNormals(){var index=this.index;var attributes=this.attributes;if(attributes.position){var positions=attributes.position.array;if(attributes.normal===undefined){this.addAttribute('normal',new BufferAttribute(new Float32Array(positions.length),3));}else{// reset existing normals to zero
var array=attributes.normal.array;for(var i=0,il=array.length;i<il;i++){array[i]=0;}}var normals=attributes.normal.array;var vA,vB,vC;var pA=new Vector3(),pB=new Vector3(),pC=new Vector3();var cb=new Vector3(),ab=new Vector3();// indexed elements
if(index){var indices=index.array;for(var i=0,il=index.count;i<il;i+=3){vA=indices[i+0]*3;vB=indices[i+1]*3;vC=indices[i+2]*3;pA.fromArray(positions,vA);pB.fromArray(positions,vB);pC.fromArray(positions,vC);cb.subVectors(pC,pB);ab.subVectors(pA,pB);cb.cross(ab);normals[vA]+=cb.x;normals[vA+1]+=cb.y;normals[vA+2]+=cb.z;normals[vB]+=cb.x;normals[vB+1]+=cb.y;normals[vB+2]+=cb.z;normals[vC]+=cb.x;normals[vC+1]+=cb.y;normals[vC+2]+=cb.z;}}else{// non-indexed elements (unconnected triangle soup)
for(var i=0,il=positions.length;i<il;i+=9){pA.fromArray(positions,i);pB.fromArray(positions,i+3);pC.fromArray(positions,i+6);cb.subVectors(pC,pB);ab.subVectors(pA,pB);cb.cross(ab);normals[i]=cb.x;normals[i+1]=cb.y;normals[i+2]=cb.z;normals[i+3]=cb.x;normals[i+4]=cb.y;normals[i+5]=cb.z;normals[i+6]=cb.x;normals[i+7]=cb.y;normals[i+8]=cb.z;}}this.normalizeNormals();attributes.normal.needsUpdate=true;}},merge:function merge(geometry,offset){if(!(geometry&&geometry.isBufferGeometry)){console.error('THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.',geometry);return;}if(offset===undefined){offset=0;console.warn('THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '+'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.');}var attributes=this.attributes;for(var key in attributes){if(geometry.attributes[key]===undefined)continue;var attribute1=attributes[key];var attributeArray1=attribute1.array;var attribute2=geometry.attributes[key];var attributeArray2=attribute2.array;var attributeSize=attribute2.itemSize;for(var i=0,j=attributeSize*offset;i<attributeArray2.length;i++,j++){attributeArray1[j]=attributeArray2[i];}}return this;},normalizeNormals:function(){var vector=new Vector3();return function normalizeNormals(){var normals=this.attributes.normal;for(var i=0,il=normals.count;i<il;i++){vector.x=normals.getX(i);vector.y=normals.getY(i);vector.z=normals.getZ(i);vector.normalize();normals.setXYZ(i,vector.x,vector.y,vector.z);}};}(),toNonIndexed:function toNonIndexed(){if(this.index===null){console.warn('THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.');return this;}var geometry2=new BufferGeometry();var indices=this.index.array;var attributes=this.attributes;for(var name in attributes){var attribute=attributes[name];var array=attribute.array;var itemSize=attribute.itemSize;var array2=new array.constructor(indices.length*itemSize);var index=0,index2=0;for(var i=0,l=indices.length;i<l;i++){index=indices[i]*itemSize;for(var j=0;j<itemSize;j++){array2[index2++]=array[index++];}}geometry2.addAttribute(name,new BufferAttribute(array2,itemSize));}var groups=this.groups;for(var i=0,l=groups.length;i<l;i++){var group=groups[i];geometry2.addGroup(group.start,group.count,group.materialIndex);}return geometry2;},toJSON:function toJSON(){var data={metadata:{version:4.5,type:'BufferGeometry',generator:'BufferGeometry.toJSON'}};// standard BufferGeometry serialization
data.uuid=this.uuid;data.type=this.type;if(this.name!=='')data.name=this.name;if(Object.keys(this.userData).length>0)data.userData=this.userData;if(this.parameters!==undefined){var parameters=this.parameters;for(var key in parameters){if(parameters[key]!==undefined)data[key]=parameters[key];}return data;}data.data={attributes:{}};var index=this.index;if(index!==null){var array=Array.prototype.slice.call(index.array);data.data.index={type:index.array.constructor.name,array:array};}var attributes=this.attributes;for(var key in attributes){var attribute=attributes[key];var array=Array.prototype.slice.call(attribute.array);data.data.attributes[key]={itemSize:attribute.itemSize,type:attribute.array.constructor.name,array:array,normalized:attribute.normalized};}var groups=this.groups;if(groups.length>0){data.data.groups=JSON.parse(JSON.stringify(groups));}var boundingSphere=this.boundingSphere;if(boundingSphere!==null){data.data.boundingSphere={center:boundingSphere.center.toArray(),radius:boundingSphere.radius};}return data;},clone:function clone(){/*
			 // Handle primitives

			 var parameters = this.parameters;

			 if ( parameters !== undefined ) {

			 var values = [];

			 for ( var key in parameters ) {

			 values.push( parameters[ key ] );

			 }

			 var geometry = Object.create( this.constructor.prototype );
			 this.constructor.apply( geometry, values );
			 return geometry;

			 }

			 return new this.constructor().copy( this );
			 */return new BufferGeometry().copy(this);},copy:function copy(source){var name,i,l;// reset
this.index=null;this.attributes={};this.morphAttributes={};this.groups=[];this.boundingBox=null;this.boundingSphere=null;// name
this.name=source.name;// index
var index=source.index;if(index!==null){this.setIndex(index.clone());}// attributes
var attributes=source.attributes;for(name in attributes){var attribute=attributes[name];this.addAttribute(name,attribute.clone());}// morph attributes
var morphAttributes=source.morphAttributes;for(name in morphAttributes){var array=[];var morphAttribute=morphAttributes[name];// morphAttribute: array of Float32BufferAttributes
for(i=0,l=morphAttribute.length;i<l;i++){array.push(morphAttribute[i].clone());}this.morphAttributes[name]=array;}// groups
var groups=source.groups;for(i=0,l=groups.length;i<l;i++){var group=groups[i];this.addGroup(group.start,group.count,group.materialIndex);}// bounding box
var boundingBox=source.boundingBox;if(boundingBox!==null){this.boundingBox=boundingBox.clone();}// bounding sphere
var boundingSphere=source.boundingSphere;if(boundingSphere!==null){this.boundingSphere=boundingSphere.clone();}// draw range
this.drawRange.start=source.drawRange.start;this.drawRange.count=source.drawRange.count;// user data
this.userData=source.userData;return this;},dispose:function dispose(){this.dispatchEvent({type:'dispose'});}});/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */// BoxGeometry
function BoxGeometry(width,height,depth,widthSegments,heightSegments,depthSegments){Geometry.call(this);this.type='BoxGeometry';this.parameters={width:width,height:height,depth:depth,widthSegments:widthSegments,heightSegments:heightSegments,depthSegments:depthSegments};this.fromBufferGeometry(new BoxBufferGeometry(width,height,depth,widthSegments,heightSegments,depthSegments));this.mergeVertices();}BoxGeometry.prototype=Object.create(Geometry.prototype);BoxGeometry.prototype.constructor=BoxGeometry;// BoxBufferGeometry
function BoxBufferGeometry(width,height,depth,widthSegments,heightSegments,depthSegments){BufferGeometry.call(this);this.type='BoxBufferGeometry';this.parameters={width:width,height:height,depth:depth,widthSegments:widthSegments,heightSegments:heightSegments,depthSegments:depthSegments};var scope=this;width=width||1;height=height||1;depth=depth||1;// segments
widthSegments=Math.floor(widthSegments)||1;heightSegments=Math.floor(heightSegments)||1;depthSegments=Math.floor(depthSegments)||1;// buffers
var indices=[];var vertices=[];var normals=[];var uvs=[];// helper variables
var numberOfVertices=0;var groupStart=0;// build each side of the box geometry
buildPlane('z','y','x',-1,-1,depth,height,width,depthSegments,heightSegments,0);// px
buildPlane('z','y','x',1,-1,depth,height,-width,depthSegments,heightSegments,1);// nx
buildPlane('x','z','y',1,1,width,depth,height,widthSegments,depthSegments,2);// py
buildPlane('x','z','y',1,-1,width,depth,-height,widthSegments,depthSegments,3);// ny
buildPlane('x','y','z',1,-1,width,height,depth,widthSegments,heightSegments,4);// pz
buildPlane('x','y','z',-1,-1,width,height,-depth,widthSegments,heightSegments,5);// nz
// build geometry
this.setIndex(indices);this.addAttribute('position',new Float32BufferAttribute(vertices,3));this.addAttribute('normal',new Float32BufferAttribute(normals,3));this.addAttribute('uv',new Float32BufferAttribute(uvs,2));function buildPlane(u,v,w,udir,vdir,width,height,depth,gridX,gridY,materialIndex){var segmentWidth=width/gridX;var segmentHeight=height/gridY;var widthHalf=width/2;var heightHalf=height/2;var depthHalf=depth/2;var gridX1=gridX+1;var gridY1=gridY+1;var vertexCounter=0;var groupCount=0;var ix,iy;var vector=new Vector3();// generate vertices, normals and uvs
for(iy=0;iy<gridY1;iy++){var y=iy*segmentHeight-heightHalf;for(ix=0;ix<gridX1;ix++){var x=ix*segmentWidth-widthHalf;// set values to correct vector component
vector[u]=x*udir;vector[v]=y*vdir;vector[w]=depthHalf;// now apply vector to vertex buffer
vertices.push(vector.x,vector.y,vector.z);// set values to correct vector component
vector[u]=0;vector[v]=0;vector[w]=depth>0?1:-1;// now apply vector to normal buffer
normals.push(vector.x,vector.y,vector.z);// uvs
uvs.push(ix/gridX);uvs.push(1-iy/gridY);// counters
vertexCounter+=1;}}// indices
// 1. you need three indices to draw a single face
// 2. a single segment consists of two faces
// 3. so we need to generate six (2*3) indices per segment
for(iy=0;iy<gridY;iy++){for(ix=0;ix<gridX;ix++){var a=numberOfVertices+ix+gridX1*iy;var b=numberOfVertices+ix+gridX1*(iy+1);var c=numberOfVertices+(ix+1)+gridX1*(iy+1);var d=numberOfVertices+(ix+1)+gridX1*iy;// faces
indices.push(a,b,d);indices.push(b,c,d);// increase counter
groupCount+=6;}}// add a group to the geometry. this will ensure multi material support
scope.addGroup(groupStart,groupCount,materialIndex);// calculate new start value for groups
groupStart+=groupCount;// update total number of vertices
numberOfVertices+=vertexCounter;}}BoxBufferGeometry.prototype=Object.create(BufferGeometry.prototype);BoxBufferGeometry.prototype.constructor=BoxBufferGeometry;/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */// PlaneGeometry
function PlaneGeometry(width,height,widthSegments,heightSegments){Geometry.call(this);this.type='PlaneGeometry';this.parameters={width:width,height:height,widthSegments:widthSegments,heightSegments:heightSegments};this.fromBufferGeometry(new PlaneBufferGeometry(width,height,widthSegments,heightSegments));this.mergeVertices();}PlaneGeometry.prototype=Object.create(Geometry.prototype);PlaneGeometry.prototype.constructor=PlaneGeometry;// PlaneBufferGeometry
function PlaneBufferGeometry(width,height,widthSegments,heightSegments){BufferGeometry.call(this);this.type='PlaneBufferGeometry';this.parameters={width:width,height:height,widthSegments:widthSegments,heightSegments:heightSegments};width=width||1;height=height||1;var width_half=width/2;var height_half=height/2;var gridX=Math.floor(widthSegments)||1;var gridY=Math.floor(heightSegments)||1;var gridX1=gridX+1;var gridY1=gridY+1;var segment_width=width/gridX;var segment_height=height/gridY;var ix,iy;// buffers
var indices=[];var vertices=[];var normals=[];var uvs=[];// generate vertices, normals and uvs
for(iy=0;iy<gridY1;iy++){var y=iy*segment_height-height_half;for(ix=0;ix<gridX1;ix++){var x=ix*segment_width-width_half;vertices.push(x,-y,0);normals.push(0,0,1);uvs.push(ix/gridX);uvs.push(1-iy/gridY);}}// indices
for(iy=0;iy<gridY;iy++){for(ix=0;ix<gridX;ix++){var a=ix+gridX1*iy;var b=ix+gridX1*(iy+1);var c=ix+1+gridX1*(iy+1);var d=ix+1+gridX1*iy;// faces
indices.push(a,b,d);indices.push(b,c,d);}}// build geometry
this.setIndex(indices);this.addAttribute('position',new Float32BufferAttribute(vertices,3));this.addAttribute('normal',new Float32BufferAttribute(normals,3));this.addAttribute('uv',new Float32BufferAttribute(uvs,2));}PlaneBufferGeometry.prototype=Object.create(BufferGeometry.prototype);PlaneBufferGeometry.prototype.constructor=PlaneBufferGeometry;/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */var materialId=0;function Material(){Object.defineProperty(this,'id',{value:materialId++});this.uuid=_Math.generateUUID();this.name='';this.type='Material';this.fog=true;this.lights=true;this.blending=NormalBlending;this.side=FrontSide;this.flatShading=false;this.vertexColors=NoColors;// THREE.NoColors, THREE.VertexColors, THREE.FaceColors
this.opacity=1;this.transparent=false;this.blendSrc=SrcAlphaFactor;this.blendDst=OneMinusSrcAlphaFactor;this.blendEquation=AddEquation;this.blendSrcAlpha=null;this.blendDstAlpha=null;this.blendEquationAlpha=null;this.depthFunc=LessEqualDepth;this.depthTest=true;this.depthWrite=true;this.clippingPlanes=null;this.clipIntersection=false;this.clipShadows=false;this.shadowSide=null;this.colorWrite=true;this.precision=null;// override the renderer's default precision for this material
this.polygonOffset=false;this.polygonOffsetFactor=0;this.polygonOffsetUnits=0;this.dithering=false;this.alphaTest=0;this.premultipliedAlpha=false;this.overdraw=0;// Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer
this.visible=true;this.userData={};this.needsUpdate=true;}Material.prototype=Object.assign(Object.create(EventDispatcher.prototype),{constructor:Material,isMaterial:true,onBeforeCompile:function onBeforeCompile(){},setValues:function setValues(values){if(values===undefined)return;for(var key in values){var newValue=values[key];if(newValue===undefined){console.warn("THREE.Material: '"+key+"' parameter is undefined.");continue;}// for backward compatability if shading is set in the constructor
if(key==='shading'){console.warn('THREE.'+this.type+': .shading has been removed. Use the boolean .flatShading instead.');this.flatShading=newValue===FlatShading?true:false;continue;}var currentValue=this[key];if(currentValue===undefined){console.warn("THREE."+this.type+": '"+key+"' is not a property of this material.");continue;}if(currentValue&&currentValue.isColor){currentValue.set(newValue);}else if(currentValue&&currentValue.isVector3&&newValue&&newValue.isVector3){currentValue.copy(newValue);}else if(key==='overdraw'){// ensure overdraw is backwards-compatible with legacy boolean type
this[key]=Number(newValue);}else{this[key]=newValue;}}},toJSON:function toJSON(meta){var isRoot=meta===undefined||typeof meta==='string';if(isRoot){meta={textures:{},images:{}};}var data={metadata:{version:4.5,type:'Material',generator:'Material.toJSON'}};// standard Material serialization
data.uuid=this.uuid;data.type=this.type;if(this.name!=='')data.name=this.name;if(this.color&&this.color.isColor)data.color=this.color.getHex();if(this.roughness!==undefined)data.roughness=this.roughness;if(this.metalness!==undefined)data.metalness=this.metalness;if(this.emissive&&this.emissive.isColor)data.emissive=this.emissive.getHex();if(this.emissiveIntensity!==1)data.emissiveIntensity=this.emissiveIntensity;if(this.specular&&this.specular.isColor)data.specular=this.specular.getHex();if(this.shininess!==undefined)data.shininess=this.shininess;if(this.clearCoat!==undefined)data.clearCoat=this.clearCoat;if(this.clearCoatRoughness!==undefined)data.clearCoatRoughness=this.clearCoatRoughness;if(this.map&&this.map.isTexture)data.map=this.map.toJSON(meta).uuid;if(this.alphaMap&&this.alphaMap.isTexture)data.alphaMap=this.alphaMap.toJSON(meta).uuid;if(this.lightMap&&this.lightMap.isTexture)data.lightMap=this.lightMap.toJSON(meta).uuid;if(this.aoMap&&this.aoMap.isTexture){data.aoMap=this.aoMap.toJSON(meta).uuid;data.aoMapIntensity=this.aoMapIntensity;}if(this.bumpMap&&this.bumpMap.isTexture){data.bumpMap=this.bumpMap.toJSON(meta).uuid;data.bumpScale=this.bumpScale;}if(this.normalMap&&this.normalMap.isTexture){data.normalMap=this.normalMap.toJSON(meta).uuid;data.normalMapType=this.normalMapType;data.normalScale=this.normalScale.toArray();}if(this.displacementMap&&this.displacementMap.isTexture){data.displacementMap=this.displacementMap.toJSON(meta).uuid;data.displacementScale=this.displacementScale;data.displacementBias=this.displacementBias;}if(this.roughnessMap&&this.roughnessMap.isTexture)data.roughnessMap=this.roughnessMap.toJSON(meta).uuid;if(this.metalnessMap&&this.metalnessMap.isTexture)data.metalnessMap=this.metalnessMap.toJSON(meta).uuid;if(this.emissiveMap&&this.emissiveMap.isTexture)data.emissiveMap=this.emissiveMap.toJSON(meta).uuid;if(this.specularMap&&this.specularMap.isTexture)data.specularMap=this.specularMap.toJSON(meta).uuid;if(this.envMap&&this.envMap.isTexture){data.envMap=this.envMap.toJSON(meta).uuid;data.reflectivity=this.reflectivity;// Scale behind envMap
}if(this.gradientMap&&this.gradientMap.isTexture){data.gradientMap=this.gradientMap.toJSON(meta).uuid;}if(this.size!==undefined)data.size=this.size;if(this.sizeAttenuation!==undefined)data.sizeAttenuation=this.sizeAttenuation;if(this.blending!==NormalBlending)data.blending=this.blending;if(this.flatShading===true)data.flatShading=this.flatShading;if(this.side!==FrontSide)data.side=this.side;if(this.vertexColors!==NoColors)data.vertexColors=this.vertexColors;if(this.opacity<1)data.opacity=this.opacity;if(this.transparent===true)data.transparent=this.transparent;data.depthFunc=this.depthFunc;data.depthTest=this.depthTest;data.depthWrite=this.depthWrite;// rotation (SpriteMaterial)
if(this.rotation!==0)data.rotation=this.rotation;if(this.polygonOffset===true)data.polygonOffset=true;if(this.polygonOffsetFactor!==0)data.polygonOffsetFactor=this.polygonOffsetFactor;if(this.polygonOffsetUnits!==0)data.polygonOffsetUnits=this.polygonOffsetUnits;if(this.linewidth!==1)data.linewidth=this.linewidth;if(this.dashSize!==undefined)data.dashSize=this.dashSize;if(this.gapSize!==undefined)data.gapSize=this.gapSize;if(this.scale!==undefined)data.scale=this.scale;if(this.dithering===true)data.dithering=true;if(this.alphaTest>0)data.alphaTest=this.alphaTest;if(this.premultipliedAlpha===true)data.premultipliedAlpha=this.premultipliedAlpha;if(this.wireframe===true)data.wireframe=this.wireframe;if(this.wireframeLinewidth>1)data.wireframeLinewidth=this.wireframeLinewidth;if(this.wireframeLinecap!=='round')data.wireframeLinecap=this.wireframeLinecap;if(this.wireframeLinejoin!=='round')data.wireframeLinejoin=this.wireframeLinejoin;if(this.morphTargets===true)data.morphTargets=true;if(this.skinning===true)data.skinning=true;if(this.visible===false)data.visible=false;if(JSON.stringify(this.userData)!=='{}')data.userData=this.userData;// TODO: Copied from Object3D.toJSON
function extractFromCache(cache){var values=[];for(var key in cache){var data=cache[key];delete data.metadata;values.push(data);}return values;}if(isRoot){var textures=extractFromCache(meta.textures);var images=extractFromCache(meta.images);if(textures.length>0)data.textures=textures;if(images.length>0)data.images=images;}return data;},clone:function clone(){return new this.constructor().copy(this);},copy:function copy(source){this.name=source.name;this.fog=source.fog;this.lights=source.lights;this.blending=source.blending;this.side=source.side;this.flatShading=source.flatShading;this.vertexColors=source.vertexColors;this.opacity=source.opacity;this.transparent=source.transparent;this.blendSrc=source.blendSrc;this.blendDst=source.blendDst;this.blendEquation=source.blendEquation;this.blendSrcAlpha=source.blendSrcAlpha;this.blendDstAlpha=source.blendDstAlpha;this.blendEquationAlpha=source.blendEquationAlpha;this.depthFunc=source.depthFunc;this.depthTest=source.depthTest;this.depthWrite=source.depthWrite;this.colorWrite=source.colorWrite;this.precision=source.precision;this.polygonOffset=source.polygonOffset;this.polygonOffsetFactor=source.polygonOffsetFactor;this.polygonOffsetUnits=source.polygonOffsetUnits;this.dithering=source.dithering;this.alphaTest=source.alphaTest;this.premultipliedAlpha=source.premultipliedAlpha;this.overdraw=source.overdraw;this.visible=source.visible;this.userData=JSON.parse(JSON.stringify(source.userData));this.clipShadows=source.clipShadows;this.clipIntersection=source.clipIntersection;var srcPlanes=source.clippingPlanes,dstPlanes=null;if(srcPlanes!==null){var n=srcPlanes.length;dstPlanes=new Array(n);for(var i=0;i!==n;++i){dstPlanes[i]=srcPlanes[i].clone();}}this.clippingPlanes=dstPlanes;this.shadowSide=source.shadowSide;return this;},dispose:function dispose(){this.dispatchEvent({type:'dispose'});}});/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>
	 * }
	 */function MeshBasicMaterial(parameters){Material.call(this);this.type='MeshBasicMaterial';this.color=new Color(0xffffff);// emissive
this.map=null;this.lightMap=null;this.lightMapIntensity=1.0;this.aoMap=null;this.aoMapIntensity=1.0;this.specularMap=null;this.alphaMap=null;this.envMap=null;this.combine=MultiplyOperation;this.reflectivity=1;this.refractionRatio=0.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap='round';this.wireframeLinejoin='round';this.skinning=false;this.morphTargets=false;this.lights=false;this.setValues(parameters);}MeshBasicMaterial.prototype=Object.create(Material.prototype);MeshBasicMaterial.prototype.constructor=MeshBasicMaterial;MeshBasicMaterial.prototype.isMeshBasicMaterial=true;MeshBasicMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.color.copy(source.color);this.map=source.map;this.lightMap=source.lightMap;this.lightMapIntensity=source.lightMapIntensity;this.aoMap=source.aoMap;this.aoMapIntensity=source.aoMapIntensity;this.specularMap=source.specularMap;this.alphaMap=source.alphaMap;this.envMap=source.envMap;this.combine=source.combine;this.reflectivity=source.reflectivity;this.refractionRatio=source.refractionRatio;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.wireframeLinecap=source.wireframeLinecap;this.wireframeLinejoin=source.wireframeLinejoin;this.skinning=source.skinning;this.morphTargets=source.morphTargets;return this;};/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  defines: { "label" : "value" },
	 *  uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
	 *
	 *  fragmentShader: <string>,
	 *  vertexShader: <string>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  lights: <bool>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */function ShaderMaterial(parameters){Material.call(this);this.type='ShaderMaterial';this.defines={};this.uniforms={};this.vertexShader='void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}';this.fragmentShader='void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}';this.linewidth=1;this.wireframe=false;this.wireframeLinewidth=1;this.fog=false;// set to use scene fog
this.lights=false;// set to use scene lights
this.clipping=false;// set to use user-defined clipping planes
this.skinning=false;// set to use skinning attribute streams
this.morphTargets=false;// set to use morph targets
this.morphNormals=false;// set to use morph normals
this.extensions={derivatives:false,// set to use derivatives
fragDepth:false,// set to use fragment depth values
drawBuffers:false,// set to use draw buffers
shaderTextureLOD:false// set to use shader texture LOD
};// When rendered geometry doesn't include these attributes but the material does,
// use these default values in WebGL. This avoids errors when buffer data is missing.
this.defaultAttributeValues={'color':[1,1,1],'uv':[0,0],'uv2':[0,0]};this.index0AttributeName=undefined;this.uniformsNeedUpdate=false;if(parameters!==undefined){if(parameters.attributes!==undefined){console.error('THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.');}this.setValues(parameters);}}ShaderMaterial.prototype=Object.create(Material.prototype);ShaderMaterial.prototype.constructor=ShaderMaterial;ShaderMaterial.prototype.isShaderMaterial=true;ShaderMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.fragmentShader=source.fragmentShader;this.vertexShader=source.vertexShader;this.uniforms=UniformsUtils.clone(source.uniforms);this.defines=Object.assign({},source.defines);this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.lights=source.lights;this.clipping=source.clipping;this.skinning=source.skinning;this.morphTargets=source.morphTargets;this.morphNormals=source.morphNormals;this.extensions=source.extensions;return this;};ShaderMaterial.prototype.toJSON=function(meta){var data=Material.prototype.toJSON.call(this,meta);data.uniforms={};for(var name in this.uniforms){var uniform=this.uniforms[name];var value=uniform.value;if(value.isTexture){data.uniforms[name]={type:'t',value:value.toJSON(meta).uuid};}else if(value.isColor){data.uniforms[name]={type:'c',value:value.getHex()};}else if(value.isVector2){data.uniforms[name]={type:'v2',value:value.toArray()};}else if(value.isVector3){data.uniforms[name]={type:'v3',value:value.toArray()};}else if(value.isVector4){data.uniforms[name]={type:'v4',value:value.toArray()};}else if(value.isMatrix4){data.uniforms[name]={type:'m4',value:value.toArray()};}else{data.uniforms[name]={value:value};// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far
}}if(Object.keys(this.defines).length>0)data.defines=this.defines;data.vertexShader=this.vertexShader;data.fragmentShader=this.fragmentShader;return data;};/**
	 * @author bhouston / http://clara.io
	 */function Ray(origin,direction){this.origin=origin!==undefined?origin:new Vector3();this.direction=direction!==undefined?direction:new Vector3();}Object.assign(Ray.prototype,{set:function set(origin,direction){this.origin.copy(origin);this.direction.copy(direction);return this;},clone:function clone(){return new this.constructor().copy(this);},copy:function copy(ray){this.origin.copy(ray.origin);this.direction.copy(ray.direction);return this;},at:function at(t,target){if(target===undefined){console.warn('THREE.Ray: .at() target is now required');target=new Vector3();}return target.copy(this.direction).multiplyScalar(t).add(this.origin);},lookAt:function lookAt(v){this.direction.copy(v).sub(this.origin).normalize();return this;},recast:function(){var v1=new Vector3();return function recast(t){this.origin.copy(this.at(t,v1));return this;};}(),closestPointToPoint:function closestPointToPoint(point,target){if(target===undefined){console.warn('THREE.Ray: .closestPointToPoint() target is now required');target=new Vector3();}target.subVectors(point,this.origin);var directionDistance=target.dot(this.direction);if(directionDistance<0){return target.copy(this.origin);}return target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);},distanceToPoint:function distanceToPoint(point){return Math.sqrt(this.distanceSqToPoint(point));},distanceSqToPoint:function(){var v1=new Vector3();return function distanceSqToPoint(point){var directionDistance=v1.subVectors(point,this.origin).dot(this.direction);// point behind the ray
if(directionDistance<0){return this.origin.distanceToSquared(point);}v1.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);return v1.distanceToSquared(point);};}(),distanceSqToSegment:function(){var segCenter=new Vector3();var segDir=new Vector3();var diff=new Vector3();return function distanceSqToSegment(v0,v1,optionalPointOnRay,optionalPointOnSegment){// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h
// It returns the min distance between the ray and the segment
// defined by v0 and v1
// It can also set two optional targets :
// - The closest point on the ray
// - The closest point on the segment
segCenter.copy(v0).add(v1).multiplyScalar(0.5);segDir.copy(v1).sub(v0).normalize();diff.copy(this.origin).sub(segCenter);var segExtent=v0.distanceTo(v1)*0.5;var a01=-this.direction.dot(segDir);var b0=diff.dot(this.direction);var b1=-diff.dot(segDir);var c=diff.lengthSq();var det=Math.abs(1-a01*a01);var s0,s1,sqrDist,extDet;if(det>0){// The ray and segment are not parallel.
s0=a01*b1-b0;s1=a01*b0-b1;extDet=segExtent*det;if(s0>=0){if(s1>=-extDet){if(s1<=extDet){// region 0
// Minimum at interior points of ray and segment.
var invDet=1/det;s0*=invDet;s1*=invDet;sqrDist=s0*(s0+a01*s1+2*b0)+s1*(a01*s0+s1+2*b1)+c;}else{// region 1
s1=segExtent;s0=Math.max(0,-(a01*s1+b0));sqrDist=-s0*s0+s1*(s1+2*b1)+c;}}else{// region 5
s1=-segExtent;s0=Math.max(0,-(a01*s1+b0));sqrDist=-s0*s0+s1*(s1+2*b1)+c;}}else{if(s1<=-extDet){// region 4
s0=Math.max(0,-(-a01*segExtent+b0));s1=s0>0?-segExtent:Math.min(Math.max(-segExtent,-b1),segExtent);sqrDist=-s0*s0+s1*(s1+2*b1)+c;}else if(s1<=extDet){// region 3
s0=0;s1=Math.min(Math.max(-segExtent,-b1),segExtent);sqrDist=s1*(s1+2*b1)+c;}else{// region 2
s0=Math.max(0,-(a01*segExtent+b0));s1=s0>0?segExtent:Math.min(Math.max(-segExtent,-b1),segExtent);sqrDist=-s0*s0+s1*(s1+2*b1)+c;}}}else{// Ray and segment are parallel.
s1=a01>0?-segExtent:segExtent;s0=Math.max(0,-(a01*s1+b0));sqrDist=-s0*s0+s1*(s1+2*b1)+c;}if(optionalPointOnRay){optionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);}if(optionalPointOnSegment){optionalPointOnSegment.copy(segDir).multiplyScalar(s1).add(segCenter);}return sqrDist;};}(),intersectSphere:function(){var v1=new Vector3();return function intersectSphere(sphere,target){v1.subVectors(sphere.center,this.origin);var tca=v1.dot(this.direction);var d2=v1.dot(v1)-tca*tca;var radius2=sphere.radius*sphere.radius;if(d2>radius2)return null;var thc=Math.sqrt(radius2-d2);// t0 = first intersect point - entrance on front of sphere
var t0=tca-thc;// t1 = second intersect point - exit point on back of sphere
var t1=tca+thc;// test to see if both t0 and t1 are behind the ray - if so, return null
if(t0<0&&t1<0)return null;// test to see if t0 is behind the ray:
// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
// in order to always return an intersect point that is in front of the ray.
if(t0<0)return this.at(t1,target);// else t0 is in front of the ray, so return the first collision point scaled by t0
return this.at(t0,target);};}(),intersectsSphere:function intersectsSphere(sphere){return this.distanceSqToPoint(sphere.center)<=sphere.radius*sphere.radius;},distanceToPlane:function distanceToPlane(plane){var denominator=plane.normal.dot(this.direction);if(denominator===0){// line is coplanar, return origin
if(plane.distanceToPoint(this.origin)===0){return 0;}// Null is preferable to undefined since undefined means.... it is undefined
return null;}var t=-(this.origin.dot(plane.normal)+plane.constant)/denominator;// Return if the ray never intersects the plane
return t>=0?t:null;},intersectPlane:function intersectPlane(plane,target){var t=this.distanceToPlane(plane);if(t===null){return null;}return this.at(t,target);},intersectsPlane:function intersectsPlane(plane){// check if the ray lies on the plane first
var distToPoint=plane.distanceToPoint(this.origin);if(distToPoint===0){return true;}var denominator=plane.normal.dot(this.direction);if(denominator*distToPoint<0){return true;}// ray origin is behind the plane (and is pointing behind it)
return false;},intersectBox:function intersectBox(box,target){var tmin,tmax,tymin,tymax,tzmin,tzmax;var invdirx=1/this.direction.x,invdiry=1/this.direction.y,invdirz=1/this.direction.z;var origin=this.origin;if(invdirx>=0){tmin=(box.min.x-origin.x)*invdirx;tmax=(box.max.x-origin.x)*invdirx;}else{tmin=(box.max.x-origin.x)*invdirx;tmax=(box.min.x-origin.x)*invdirx;}if(invdiry>=0){tymin=(box.min.y-origin.y)*invdiry;tymax=(box.max.y-origin.y)*invdiry;}else{tymin=(box.max.y-origin.y)*invdiry;tymax=(box.min.y-origin.y)*invdiry;}if(tmin>tymax||tymin>tmax)return null;// These lines also handle the case where tmin or tmax is NaN
// (result of 0 * Infinity). x !== x returns true if x is NaN
if(tymin>tmin||tmin!==tmin)tmin=tymin;if(tymax<tmax||tmax!==tmax)tmax=tymax;if(invdirz>=0){tzmin=(box.min.z-origin.z)*invdirz;tzmax=(box.max.z-origin.z)*invdirz;}else{tzmin=(box.max.z-origin.z)*invdirz;tzmax=(box.min.z-origin.z)*invdirz;}if(tmin>tzmax||tzmin>tmax)return null;if(tzmin>tmin||tmin!==tmin)tmin=tzmin;if(tzmax<tmax||tmax!==tmax)tmax=tzmax;//return point closest to the ray (positive side)
if(tmax<0)return null;return this.at(tmin>=0?tmin:tmax,target);},intersectsBox:function(){var v=new Vector3();return function intersectsBox(box){return this.intersectBox(box,v)!==null;};}(),intersectTriangle:function(){// Compute the offset origin, edges, and normal.
var diff=new Vector3();var edge1=new Vector3();var edge2=new Vector3();var normal=new Vector3();return function intersectTriangle(a,b,c,backfaceCulling,target){// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h
edge1.subVectors(b,a);edge2.subVectors(c,a);normal.crossVectors(edge1,edge2);// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
var DdN=this.direction.dot(normal);var sign;if(DdN>0){if(backfaceCulling)return null;sign=1;}else if(DdN<0){sign=-1;DdN=-DdN;}else{return null;}diff.subVectors(this.origin,a);var DdQxE2=sign*this.direction.dot(edge2.crossVectors(diff,edge2));// b1 < 0, no intersection
if(DdQxE2<0){return null;}var DdE1xQ=sign*this.direction.dot(edge1.cross(diff));// b2 < 0, no intersection
if(DdE1xQ<0){return null;}// b1+b2 > 1, no intersection
if(DdQxE2+DdE1xQ>DdN){return null;}// Line intersects triangle, check if ray does.
var QdN=-sign*diff.dot(normal);// t < 0, no intersection
if(QdN<0){return null;}// Ray intersects triangle.
return this.at(QdN/DdN,target);};}(),applyMatrix4:function applyMatrix4(matrix4){this.origin.applyMatrix4(matrix4);this.direction.transformDirection(matrix4);return this;},equals:function equals(ray){return ray.origin.equals(this.origin)&&ray.direction.equals(this.direction);}});/**
	 * @author bhouston / http://clara.io
	 * @author mrdoob / http://mrdoob.com/
	 */function Triangle(a,b,c){this.a=a!==undefined?a:new Vector3();this.b=b!==undefined?b:new Vector3();this.c=c!==undefined?c:new Vector3();}Object.assign(Triangle,{getNormal:function(){var v0=new Vector3();return function getNormal(a,b,c,target){if(target===undefined){console.warn('THREE.Triangle: .getNormal() target is now required');target=new Vector3();}target.subVectors(c,b);v0.subVectors(a,b);target.cross(v0);var targetLengthSq=target.lengthSq();if(targetLengthSq>0){return target.multiplyScalar(1/Math.sqrt(targetLengthSq));}return target.set(0,0,0);};}(),// static/instance method to calculate barycentric coordinates
// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
getBarycoord:function(){var v0=new Vector3();var v1=new Vector3();var v2=new Vector3();return function getBarycoord(point,a,b,c,target){v0.subVectors(c,a);v1.subVectors(b,a);v2.subVectors(point,a);var dot00=v0.dot(v0);var dot01=v0.dot(v1);var dot02=v0.dot(v2);var dot11=v1.dot(v1);var dot12=v1.dot(v2);var denom=dot00*dot11-dot01*dot01;if(target===undefined){console.warn('THREE.Triangle: .getBarycoord() target is now required');target=new Vector3();}// collinear or singular triangle
if(denom===0){// arbitrary location outside of triangle?
// not sure if this is the best idea, maybe should be returning undefined
return target.set(-2,-1,-1);}var invDenom=1/denom;var u=(dot11*dot02-dot01*dot12)*invDenom;var v=(dot00*dot12-dot01*dot02)*invDenom;// barycentric coordinates must always sum to 1
return target.set(1-u-v,v,u);};}(),containsPoint:function(){var v1=new Vector3();return function containsPoint(point,a,b,c){Triangle.getBarycoord(point,a,b,c,v1);return v1.x>=0&&v1.y>=0&&v1.x+v1.y<=1;};}(),getUV:function(){var barycoord=new Vector3();return function getUV(point,p1,p2,p3,uv1,uv2,uv3,target){this.getBarycoord(point,p1,p2,p3,barycoord);target.set(0,0);target.addScaledVector(uv1,barycoord.x);target.addScaledVector(uv2,barycoord.y);target.addScaledVector(uv3,barycoord.z);return target;};}()});Object.assign(Triangle.prototype,{set:function set(a,b,c){this.a.copy(a);this.b.copy(b);this.c.copy(c);return this;},setFromPointsAndIndices:function setFromPointsAndIndices(points,i0,i1,i2){this.a.copy(points[i0]);this.b.copy(points[i1]);this.c.copy(points[i2]);return this;},clone:function clone(){return new this.constructor().copy(this);},copy:function copy(triangle){this.a.copy(triangle.a);this.b.copy(triangle.b);this.c.copy(triangle.c);return this;},getArea:function(){var v0=new Vector3();var v1=new Vector3();return function getArea(){v0.subVectors(this.c,this.b);v1.subVectors(this.a,this.b);return v0.cross(v1).length()*0.5;};}(),getMidpoint:function getMidpoint(target){if(target===undefined){console.warn('THREE.Triangle: .getMidpoint() target is now required');target=new Vector3();}return target.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3);},getNormal:function getNormal(target){return Triangle.getNormal(this.a,this.b,this.c,target);},getPlane:function getPlane(target){if(target===undefined){console.warn('THREE.Triangle: .getPlane() target is now required');target=new Vector3();}return target.setFromCoplanarPoints(this.a,this.b,this.c);},getBarycoord:function getBarycoord(point,target){return Triangle.getBarycoord(point,this.a,this.b,this.c,target);},containsPoint:function containsPoint(point){return Triangle.containsPoint(point,this.a,this.b,this.c);},getUV:function getUV(point,uv1,uv2,uv3,result){return Triangle.getUV(point,this.a,this.b,this.c,uv1,uv2,uv3,result);},intersectsBox:function intersectsBox(box){return box.intersectsTriangle(this);},closestPointToPoint:function(){var vab=new Vector3();var vac=new Vector3();var vbc=new Vector3();var vap=new Vector3();var vbp=new Vector3();var vcp=new Vector3();return function closestPointToPoint(p,target){if(target===undefined){console.warn('THREE.Triangle: .closestPointToPoint() target is now required');target=new Vector3();}var a=this.a,b=this.b,c=this.c;var v,w;// algorithm thanks to Real-Time Collision Detection by Christer Ericson,
// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
// under the accompanying license; see chapter 5.1.5 for detailed explanation.
// basically, we're distinguishing which of the voronoi regions of the triangle
// the point lies in with the minimum amount of redundant computation.
vab.subVectors(b,a);vac.subVectors(c,a);vap.subVectors(p,a);var d1=vab.dot(vap);var d2=vac.dot(vap);if(d1<=0&&d2<=0){// vertex region of A; barycentric coords (1, 0, 0)
return target.copy(a);}vbp.subVectors(p,b);var d3=vab.dot(vbp);var d4=vac.dot(vbp);if(d3>=0&&d4<=d3){// vertex region of B; barycentric coords (0, 1, 0)
return target.copy(b);}var vc=d1*d4-d3*d2;if(vc<=0&&d1>=0&&d3<=0){v=d1/(d1-d3);// edge region of AB; barycentric coords (1-v, v, 0)
return target.copy(a).addScaledVector(vab,v);}vcp.subVectors(p,c);var d5=vab.dot(vcp);var d6=vac.dot(vcp);if(d6>=0&&d5<=d6){// vertex region of C; barycentric coords (0, 0, 1)
return target.copy(c);}var vb=d5*d2-d1*d6;if(vb<=0&&d2>=0&&d6<=0){w=d2/(d2-d6);// edge region of AC; barycentric coords (1-w, 0, w)
return target.copy(a).addScaledVector(vac,w);}var va=d3*d6-d5*d4;if(va<=0&&d4-d3>=0&&d5-d6>=0){vbc.subVectors(c,b);w=(d4-d3)/(d4-d3+(d5-d6));// edge region of BC; barycentric coords (0, 1-w, w)
return target.copy(b).addScaledVector(vbc,w);// edge region of BC
}// face region
var denom=1/(va+vb+vc);// u = va * denom
v=vb*denom;w=vc*denom;return target.copy(a).addScaledVector(vab,v).addScaledVector(vac,w);};}(),equals:function equals(triangle){return triangle.a.equals(this.a)&&triangle.b.equals(this.b)&&triangle.c.equals(this.c);}});/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author jonobr1 / http://jonobr1.com/
	 */function Mesh(geometry,material){Object3D.call(this);this.type='Mesh';this.geometry=geometry!==undefined?geometry:new BufferGeometry();this.material=material!==undefined?material:new MeshBasicMaterial({color:Math.random()*0xffffff});this.drawMode=TrianglesDrawMode;this.updateMorphTargets();}Mesh.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Mesh,isMesh:true,setDrawMode:function setDrawMode(value){this.drawMode=value;},copy:function copy(source){Object3D.prototype.copy.call(this,source);this.drawMode=source.drawMode;if(source.morphTargetInfluences!==undefined){this.morphTargetInfluences=source.morphTargetInfluences.slice();}if(source.morphTargetDictionary!==undefined){this.morphTargetDictionary=Object.assign({},source.morphTargetDictionary);}return this;},updateMorphTargets:function updateMorphTargets(){var geometry=this.geometry;var m,ml,name;if(geometry.isBufferGeometry){var morphAttributes=geometry.morphAttributes;var keys=Object.keys(morphAttributes);if(keys.length>0){var morphAttribute=morphAttributes[keys[0]];if(morphAttribute!==undefined){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(m=0,ml=morphAttribute.length;m<ml;m++){name=morphAttribute[m].name||String(m);this.morphTargetInfluences.push(0);this.morphTargetDictionary[name]=m;}}}}else{var morphTargets=geometry.morphTargets;if(morphTargets!==undefined&&morphTargets.length>0){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(m=0,ml=morphTargets.length;m<ml;m++){name=morphTargets[m].name||String(m);this.morphTargetInfluences.push(0);this.morphTargetDictionary[name]=m;}}}},raycast:function(){var inverseMatrix=new Matrix4();var ray=new Ray();var sphere=new Sphere();var vA=new Vector3();var vB=new Vector3();var vC=new Vector3();var tempA=new Vector3();var tempB=new Vector3();var tempC=new Vector3();var uvA=new Vector2();var uvB=new Vector2();var uvC=new Vector2();var intersectionPoint=new Vector3();var intersectionPointWorld=new Vector3();function checkIntersection(object,material,raycaster,ray,pA,pB,pC,point){var intersect;if(material.side===BackSide){intersect=ray.intersectTriangle(pC,pB,pA,true,point);}else{intersect=ray.intersectTriangle(pA,pB,pC,material.side!==DoubleSide,point);}if(intersect===null)return null;intersectionPointWorld.copy(point);intersectionPointWorld.applyMatrix4(object.matrixWorld);var distance=raycaster.ray.origin.distanceTo(intersectionPointWorld);if(distance<raycaster.near||distance>raycaster.far)return null;return{distance:distance,point:intersectionPointWorld.clone(),object:object};}function checkBufferGeometryIntersection(object,material,raycaster,ray,position,uv,a,b,c){vA.fromBufferAttribute(position,a);vB.fromBufferAttribute(position,b);vC.fromBufferAttribute(position,c);var intersection=checkIntersection(object,material,raycaster,ray,vA,vB,vC,intersectionPoint);if(intersection){if(uv){uvA.fromBufferAttribute(uv,a);uvB.fromBufferAttribute(uv,b);uvC.fromBufferAttribute(uv,c);intersection.uv=Triangle.getUV(intersectionPoint,vA,vB,vC,uvA,uvB,uvC,new Vector2());}var face=new Face3(a,b,c);Triangle.getNormal(vA,vB,vC,face.normal);intersection.face=face;}return intersection;}return function raycast(raycaster,intersects){var geometry=this.geometry;var material=this.material;var matrixWorld=this.matrixWorld;if(material===undefined)return;// Checking boundingSphere distance to ray
if(geometry.boundingSphere===null)geometry.computeBoundingSphere();sphere.copy(geometry.boundingSphere);sphere.applyMatrix4(matrixWorld);if(raycaster.ray.intersectsSphere(sphere)===false)return;//
inverseMatrix.getInverse(matrixWorld);ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);// Check boundingBox before continuing
if(geometry.boundingBox!==null){if(ray.intersectsBox(geometry.boundingBox)===false)return;}var intersection;if(geometry.isBufferGeometry){var a,b,c;var index=geometry.index;var position=geometry.attributes.position;var uv=geometry.attributes.uv;var groups=geometry.groups;var drawRange=geometry.drawRange;var i,j,il,jl;var group,groupMaterial;var start,end;if(index!==null){// indexed buffer geometry
if(Array.isArray(material)){for(i=0,il=groups.length;i<il;i++){group=groups[i];groupMaterial=material[group.materialIndex];start=Math.max(group.start,drawRange.start);end=Math.min(group.start+group.count,drawRange.start+drawRange.count);for(j=start,jl=end;j<jl;j+=3){a=index.getX(j);b=index.getX(j+1);c=index.getX(j+2);intersection=checkBufferGeometryIntersection(this,groupMaterial,raycaster,ray,position,uv,a,b,c);if(intersection){intersection.faceIndex=Math.floor(j/3);// triangle number in indexed buffer semantics
intersects.push(intersection);}}}}else{start=Math.max(0,drawRange.start);end=Math.min(index.count,drawRange.start+drawRange.count);for(i=start,il=end;i<il;i+=3){a=index.getX(i);b=index.getX(i+1);c=index.getX(i+2);intersection=checkBufferGeometryIntersection(this,material,raycaster,ray,position,uv,a,b,c);if(intersection){intersection.faceIndex=Math.floor(i/3);// triangle number in indexed buffer semantics
intersects.push(intersection);}}}}else if(position!==undefined){// non-indexed buffer geometry
if(Array.isArray(material)){for(i=0,il=groups.length;i<il;i++){group=groups[i];groupMaterial=material[group.materialIndex];start=Math.max(group.start,drawRange.start);end=Math.min(group.start+group.count,drawRange.start+drawRange.count);for(j=start,jl=end;j<jl;j+=3){a=j;b=j+1;c=j+2;intersection=checkBufferGeometryIntersection(this,groupMaterial,raycaster,ray,position,uv,a,b,c);if(intersection){intersection.faceIndex=Math.floor(j/3);// triangle number in non-indexed buffer semantics
intersects.push(intersection);}}}}else{start=Math.max(0,drawRange.start);end=Math.min(position.count,drawRange.start+drawRange.count);for(i=start,il=end;i<il;i+=3){a=i;b=i+1;c=i+2;intersection=checkBufferGeometryIntersection(this,material,raycaster,ray,position,uv,a,b,c);if(intersection){intersection.faceIndex=Math.floor(i/3);// triangle number in non-indexed buffer semantics
intersects.push(intersection);}}}}}else if(geometry.isGeometry){var fvA,fvB,fvC;var isMultiMaterial=Array.isArray(material);var vertices=geometry.vertices;var faces=geometry.faces;var uvs;var faceVertexUvs=geometry.faceVertexUvs[0];if(faceVertexUvs.length>0)uvs=faceVertexUvs;for(var f=0,fl=faces.length;f<fl;f++){var face=faces[f];var faceMaterial=isMultiMaterial?material[face.materialIndex]:material;if(faceMaterial===undefined)continue;fvA=vertices[face.a];fvB=vertices[face.b];fvC=vertices[face.c];if(faceMaterial.morphTargets===true){var morphTargets=geometry.morphTargets;var morphInfluences=this.morphTargetInfluences;vA.set(0,0,0);vB.set(0,0,0);vC.set(0,0,0);for(var t=0,tl=morphTargets.length;t<tl;t++){var influence=morphInfluences[t];if(influence===0)continue;var targets=morphTargets[t].vertices;vA.addScaledVector(tempA.subVectors(targets[face.a],fvA),influence);vB.addScaledVector(tempB.subVectors(targets[face.b],fvB),influence);vC.addScaledVector(tempC.subVectors(targets[face.c],fvC),influence);}vA.add(fvA);vB.add(fvB);vC.add(fvC);fvA=vA;fvB=vB;fvC=vC;}intersection=checkIntersection(this,faceMaterial,raycaster,ray,fvA,fvB,fvC,intersectionPoint);if(intersection){if(uvs&&uvs[f]){var uvs_f=uvs[f];uvA.copy(uvs_f[0]);uvB.copy(uvs_f[1]);uvC.copy(uvs_f[2]);intersection.uv=Triangle.getUV(intersectionPoint,fvA,fvB,fvC,uvA,uvB,uvC,new Vector2());}intersection.face=face;intersection.faceIndex=f;intersects.push(intersection);}}}};}(),clone:function clone(){return new this.constructor(this.geometry,this.material).copy(this);}});/**
	 * @author mrdoob / http://mrdoob.com/
	 */function WebGLBackground(renderer,state,objects,premultipliedAlpha){var clearColor=new Color(0x000000);var clearAlpha=0;var planeCamera,planeMesh;var boxMesh;function render(renderList,scene,camera,forceClear){var background=scene.background;if(background===null){setClear(clearColor,clearAlpha);}else if(background&&background.isColor){setClear(background,1);forceClear=true;}if(renderer.autoClear||forceClear){renderer.clear(renderer.autoClearColor,renderer.autoClearDepth,renderer.autoClearStencil);}if(background&&background.isCubeTexture){if(boxMesh===undefined){boxMesh=new Mesh(new BoxBufferGeometry(1,1,1),new ShaderMaterial({uniforms:ShaderLib.cube.uniforms,vertexShader:ShaderLib.cube.vertexShader,fragmentShader:ShaderLib.cube.fragmentShader,side:BackSide,depthTest:true,depthWrite:false,fog:false}));boxMesh.geometry.removeAttribute('normal');boxMesh.geometry.removeAttribute('uv');boxMesh.onBeforeRender=function(renderer,scene,camera){this.matrixWorld.copyPosition(camera.matrixWorld);};objects.update(boxMesh);}boxMesh.material.uniforms.tCube.value=background;renderList.push(boxMesh,boxMesh.geometry,boxMesh.material,0,null);}else if(background&&background.isTexture){if(planeCamera===undefined){planeCamera=new OrthographicCamera(-1,1,1,-1,0,1);planeMesh=new Mesh(new PlaneBufferGeometry(2,2),new MeshBasicMaterial({depthTest:false,depthWrite:false,fog:false}));objects.update(planeMesh);}planeMesh.material.map=background;// TODO Push this to renderList
renderer.renderBufferDirect(planeCamera,null,planeMesh.geometry,planeMesh.material,planeMesh,null);}}function setClear(color,alpha){state.buffers.color.setClear(color.r,color.g,color.b,alpha,premultipliedAlpha);}return{getClearColor:function getClearColor(){return clearColor;},setClearColor:function setClearColor(color,alpha){clearColor.set(color);clearAlpha=alpha!==undefined?alpha:1;setClear(clearColor,clearAlpha);},getClearAlpha:function getClearAlpha(){return clearAlpha;},setClearAlpha:function setClearAlpha(alpha){clearAlpha=alpha;setClear(clearColor,clearAlpha);},render:render};}/**
	 * @author mrdoob / http://mrdoob.com/
	 */function WebGLBufferRenderer(gl,extensions,info,capabilities){var mode;function setMode(value){mode=value;}function render(start,count){gl.drawArrays(mode,start,count);info.update(count,mode);}function renderInstances(geometry,start,count){var extension;if(capabilities.isWebGL2){extension=gl;}else{extension=extensions.get('ANGLE_instanced_arrays');if(extension===null){console.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');return;}}extension[capabilities.isWebGL2?'drawArraysInstanced':'drawArraysInstancedANGLE'](mode,start,count,geometry.maxInstancedCount);info.update(count,mode,geometry.maxInstancedCount);}//
this.setMode=setMode;this.render=render;this.renderInstances=renderInstances;}/**
	 * @author mrdoob / http://mrdoob.com/
	 */function WebGLCapabilities(gl,extensions,parameters){var maxAnisotropy;function getMaxAnisotropy(){if(maxAnisotropy!==undefined)return maxAnisotropy;var extension=extensions.get('EXT_texture_filter_anisotropic');if(extension!==null){maxAnisotropy=gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);}else{maxAnisotropy=0;}return maxAnisotropy;}function getMaxPrecision(precision){if(precision==='highp'){if(gl.getShaderPrecisionFormat(gl.VERTEX_SHADER,gl.HIGH_FLOAT).precision>0&&gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER,gl.HIGH_FLOAT).precision>0){return'highp';}precision='mediump';}if(precision==='mediump'){if(gl.getShaderPrecisionFormat(gl.VERTEX_SHADER,gl.MEDIUM_FLOAT).precision>0&&gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER,gl.MEDIUM_FLOAT).precision>0){return'mediump';}}return'lowp';}var isWebGL2=typeof WebGL2RenderingContext!=='undefined'&&gl instanceof WebGL2RenderingContext;var precision=parameters.precision!==undefined?parameters.precision:'highp';var maxPrecision=getMaxPrecision(precision);if(maxPrecision!==precision){console.warn('THREE.WebGLRenderer:',precision,'not supported, using',maxPrecision,'instead.');precision=maxPrecision;}var logarithmicDepthBuffer=parameters.logarithmicDepthBuffer===true;var maxTextures=gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);var maxVertexTextures=gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);var maxTextureSize=gl.getParameter(gl.MAX_TEXTURE_SIZE);var maxCubemapSize=gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);var maxAttributes=gl.getParameter(gl.MAX_VERTEX_ATTRIBS);var maxVertexUniforms=gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);var maxVaryings=gl.getParameter(gl.MAX_VARYING_VECTORS);var maxFragmentUniforms=gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);var vertexTextures=maxVertexTextures>0;var floatFragmentTextures=isWebGL2||!!extensions.get('OES_texture_float');var floatVertexTextures=vertexTextures&&floatFragmentTextures;return{isWebGL2:isWebGL2,getMaxAnisotropy:getMaxAnisotropy,getMaxPrecision:getMaxPrecision,precision:precision,logarithmicDepthBuffer:logarithmicDepthBuffer,maxTextures:maxTextures,maxVertexTextures:maxVertexTextures,maxTextureSize:maxTextureSize,maxCubemapSize:maxCubemapSize,maxAttributes:maxAttributes,maxVertexUniforms:maxVertexUniforms,maxVaryings:maxVaryings,maxFragmentUniforms:maxFragmentUniforms,vertexTextures:vertexTextures,floatFragmentTextures:floatFragmentTextures,floatVertexTextures:floatVertexTextures};}/**
	 * @author tschw
	 */function WebGLClipping(){var scope=this,globalState=null,numGlobalPlanes=0,localClippingEnabled=false,renderingShadows=false,plane=new Plane(),viewNormalMatrix=new Matrix3(),uniform={value:null,needsUpdate:false};this.uniform=uniform;this.numPlanes=0;this.numIntersection=0;this.init=function(planes,enableLocalClipping,camera){var enabled=planes.length!==0||enableLocalClipping||// enable state of previous frame - the clipping code has to
// run another frame in order to reset the state:
numGlobalPlanes!==0||localClippingEnabled;localClippingEnabled=enableLocalClipping;globalState=projectPlanes(planes,camera,0);numGlobalPlanes=planes.length;return enabled;};this.beginShadows=function(){renderingShadows=true;projectPlanes(null);};this.endShadows=function(){renderingShadows=false;resetGlobalState();};this.setState=function(planes,clipIntersection,clipShadows,camera,cache,fromCache){if(!localClippingEnabled||planes===null||planes.length===0||renderingShadows&&!clipShadows){// there's no local clipping
if(renderingShadows){// there's no global clipping
projectPlanes(null);}else{resetGlobalState();}}else{var nGlobal=renderingShadows?0:numGlobalPlanes,lGlobal=nGlobal*4,dstArray=cache.clippingState||null;uniform.value=dstArray;// ensure unique state
dstArray=projectPlanes(planes,camera,lGlobal,fromCache);for(var i=0;i!==lGlobal;++i){dstArray[i]=globalState[i];}cache.clippingState=dstArray;this.numIntersection=clipIntersection?this.numPlanes:0;this.numPlanes+=nGlobal;}};function resetGlobalState(){if(uniform.value!==globalState){uniform.value=globalState;uniform.needsUpdate=numGlobalPlanes>0;}scope.numPlanes=numGlobalPlanes;scope.numIntersection=0;}function projectPlanes(planes,camera,dstOffset,skipTransform){var nPlanes=planes!==null?planes.length:0,dstArray=null;if(nPlanes!==0){dstArray=uniform.value;if(skipTransform!==true||dstArray===null){var flatSize=dstOffset+nPlanes*4,viewMatrix=camera.matrixWorldInverse;viewNormalMatrix.getNormalMatrix(viewMatrix);if(dstArray===null||dstArray.length<flatSize){dstArray=new Float32Array(flatSize);}for(var i=0,i4=dstOffset;i!==nPlanes;++i,i4+=4){plane.copy(planes[i]).applyMatrix4(viewMatrix,viewNormalMatrix);plane.normal.toArray(dstArray,i4);dstArray[i4+3]=plane.constant;}}uniform.value=dstArray;uniform.needsUpdate=true;}scope.numPlanes=nPlanes;return dstArray;}}/**
	 * @author mrdoob / http://mrdoob.com/
	 */function WebGLExtensions(gl){var extensions={};return{get:function get(name){if(extensions[name]!==undefined){return extensions[name];}var extension;switch(name){case'WEBGL_depth_texture':extension=gl.getExtension('WEBGL_depth_texture')||gl.getExtension('MOZ_WEBGL_depth_texture')||gl.getExtension('WEBKIT_WEBGL_depth_texture');break;case'EXT_texture_filter_anisotropic':extension=gl.getExtension('EXT_texture_filter_anisotropic')||gl.getExtension('MOZ_EXT_texture_filter_anisotropic')||gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');break;case'WEBGL_compressed_texture_s3tc':extension=gl.getExtension('WEBGL_compressed_texture_s3tc')||gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc')||gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');break;case'WEBGL_compressed_texture_pvrtc':extension=gl.getExtension('WEBGL_compressed_texture_pvrtc')||gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');break;default:extension=gl.getExtension(name);}if(extension===null){console.warn('THREE.WebGLRenderer: '+name+' extension not supported.');}extensions[name]=extension;return extension;}};}/**
	 * @author mrdoob / http://mrdoob.com/
	 */function WebGLGeometries(gl,attributes,info){var geometries={};var wireframeAttributes={};function onGeometryDispose(event){var geometry=event.target;var buffergeometry=geometries[geometry.id];if(buffergeometry.index!==null){attributes.remove(buffergeometry.index);}for(var name in buffergeometry.attributes){attributes.remove(buffergeometry.attributes[name]);}geometry.removeEventListener('dispose',onGeometryDispose);delete geometries[geometry.id];var attribute=wireframeAttributes[buffergeometry.id];if(attribute){attributes.remove(attribute);delete wireframeAttributes[buffergeometry.id];}//
info.memory.geometries--;}function get(object,geometry){var buffergeometry=geometries[geometry.id];if(buffergeometry)return buffergeometry;geometry.addEventListener('dispose',onGeometryDispose);if(geometry.isBufferGeometry){buffergeometry=geometry;}else if(geometry.isGeometry){if(geometry._bufferGeometry===undefined){geometry._bufferGeometry=new BufferGeometry().setFromObject(object);}buffergeometry=geometry._bufferGeometry;}geometries[geometry.id]=buffergeometry;info.memory.geometries++;return buffergeometry;}function update(geometry){var index=geometry.index;var geometryAttributes=geometry.attributes;if(index!==null){attributes.update(index,gl.ELEMENT_ARRAY_BUFFER);}for(var name in geometryAttributes){attributes.update(geometryAttributes[name],gl.ARRAY_BUFFER);}// morph targets
var morphAttributes=geometry.morphAttributes;for(var name in morphAttributes){var array=morphAttributes[name];for(var i=0,l=array.length;i<l;i++){attributes.update(array[i],gl.ARRAY_BUFFER);}}}function getWireframeAttribute(geometry){var attribute=wireframeAttributes[geometry.id];if(attribute)return attribute;var indices=[];var geometryIndex=geometry.index;var geometryAttributes=geometry.attributes;// console.time( 'wireframe' );
if(geometryIndex!==null){var array=geometryIndex.array;for(var i=0,l=array.length;i<l;i+=3){var a=array[i+0];var b=array[i+1];var c=array[i+2];indices.push(a,b,b,c,c,a);}}else{var array=geometryAttributes.position.array;for(var i=0,l=array.length/3-1;i<l;i+=3){var a=i+0;var b=i+1;var c=i+2;indices.push(a,b,b,c,c,a);}}// console.timeEnd( 'wireframe' );
attribute=new(arrayMax(indices)>65535?Uint32BufferAttribute:Uint16BufferAttribute)(indices,1);attributes.update(attribute,gl.ELEMENT_ARRAY_BUFFER);wireframeAttributes[geometry.id]=attribute;return attribute;}return{get:get,update:update,getWireframeAttribute:getWireframeAttribute};}/**
	 * @author mrdoob / http://mrdoob.com/
	 */function WebGLIndexedBufferRenderer(gl,extensions,info,capabilities){var mode;function setMode(value){mode=value;}var type,bytesPerElement;function setIndex(value){type=value.type;bytesPerElement=value.bytesPerElement;}function render(start,count){gl.drawElements(mode,count,type,start*bytesPerElement);info.update(count,mode);}function renderInstances(geometry,start,count){var extension;if(capabilities.isWebGL2){extension=gl;}else{var extension=extensions.get('ANGLE_instanced_arrays');if(extension===null){console.error('THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');return;}}extension[capabilities.isWebGL2?'drawElementsInstanced':'drawElementsInstancedANGLE'](mode,count,type,start*bytesPerElement,geometry.maxInstancedCount);info.update(count,mode,geometry.maxInstancedCount);}//
this.setMode=setMode;this.setIndex=setIndex;this.render=render;this.renderInstances=renderInstances;}/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */function WebGLInfo(gl){var memory={geometries:0,textures:0};var render={frame:0,calls:0,triangles:0,points:0,lines:0};function update(count,mode,instanceCount){instanceCount=instanceCount||1;render.calls++;switch(mode){case gl.TRIANGLES:render.triangles+=instanceCount*(count/3);break;case gl.TRIANGLE_STRIP:case gl.TRIANGLE_FAN:render.triangles+=instanceCount*(count-2);break;case gl.LINES:render.lines+=instanceCount*(count/2);break;case gl.LINE_STRIP:render.lines+=instanceCount*(count-1);break;case gl.LINE_LOOP:render.lines+=instanceCount*count;break;case gl.POINTS:render.points+=instanceCount*count;break;default:console.error('THREE.WebGLInfo: Unknown draw mode:',mode);break;}}function reset(){render.frame++;render.calls=0;render.triangles=0;render.points=0;render.lines=0;}return{memory:memory,render:render,programs:null,autoReset:true,reset:reset,update:update};}/**
	 * @author mrdoob / http://mrdoob.com/
	 */function absNumericalSort(a,b){return Math.abs(b[1])-Math.abs(a[1]);}function WebGLMorphtargets(gl){var influencesList={};var morphInfluences=new Float32Array(8);function update(object,geometry,material,program){var objectInfluences=object.morphTargetInfluences;var length=objectInfluences.length;var influences=influencesList[geometry.id];if(influences===undefined){// initialise list
influences=[];for(var i=0;i<length;i++){influences[i]=[i,0];}influencesList[geometry.id]=influences;}var morphTargets=material.morphTargets&&geometry.morphAttributes.position;var morphNormals=material.morphNormals&&geometry.morphAttributes.normal;// Remove current morphAttributes
for(var i=0;i<length;i++){var influence=influences[i];if(influence[1]!==0){if(morphTargets)geometry.removeAttribute('morphTarget'+i);if(morphNormals)geometry.removeAttribute('morphNormal'+i);}}// Collect influences
for(var i=0;i<length;i++){var influence=influences[i];influence[0]=i;influence[1]=objectInfluences[i];}influences.sort(absNumericalSort);// Add morphAttributes
for(var i=0;i<8;i++){var influence=influences[i];if(influence){var index=influence[0];var value=influence[1];if(value){if(morphTargets)geometry.addAttribute('morphTarget'+i,morphTargets[index]);if(morphNormals)geometry.addAttribute('morphNormal'+i,morphNormals[index]);morphInfluences[i]=value;continue;}}morphInfluences[i]=0;}program.getUniforms().setValue(gl,'morphTargetInfluences',morphInfluences);}return{update:update};}/**
	 * @author mrdoob / http://mrdoob.com/
	 */function WebGLObjects(geometries,info){var updateList={};function update(object){var frame=info.render.frame;var geometry=object.geometry;var buffergeometry=geometries.get(object,geometry);// Update once per frame
if(updateList[buffergeometry.id]!==frame){if(geometry.isGeometry){buffergeometry.updateFromObject(object);}geometries.update(buffergeometry);updateList[buffergeometry.id]=frame;}return buffergeometry;}function dispose(){updateList={};}return{update:update,dispose:dispose};}/**
	 * @author mrdoob / http://mrdoob.com/
	 */function CubeTexture(images,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding){images=images!==undefined?images:[];mapping=mapping!==undefined?mapping:CubeReflectionMapping;Texture.call(this,images,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding);this.flipY=false;}CubeTexture.prototype=Object.create(Texture.prototype);CubeTexture.prototype.constructor=CubeTexture;CubeTexture.prototype.isCubeTexture=true;Object.defineProperty(CubeTexture.prototype,'images',{get:function get(){return this.image;},set:function set(value){this.image=value;}});/**
	 * @author Artur Trzesiok
	 */function Texture3D(data,width,height,depth,format,type,mapping,wrapS,wrapT,magFilter,minFilter,anisotropy,encoding){Texture.call(this,null,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding);this.image={data:data,width:width,height:height,depth:depth};this.magFilter=magFilter!==undefined?magFilter:NearestFilter;this.minFilter=minFilter!==undefined?minFilter:NearestFilter;this.generateMipmaps=false;this.flipY=false;}Texture3D.prototype=Object.create(Texture.prototype);Texture3D.prototype.constructor=Texture3D;Texture3D.prototype.isTexture3D=true;/**
	 * @author tschw
	 * @author Mugen87 / https://github.com/Mugen87
	 * @author mrdoob / http://mrdoob.com/
	 *
	 * Uniforms of a program.
	 * Those form a tree structure with a special top-level container for the root,
	 * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.
	 *
	 *
	 * Properties of inner nodes including the top-level container:
	 *
	 * .seq - array of nested uniforms
	 * .map - nested uniforms by name
	 *
	 *
	 * Methods of all nodes except the top-level container:
	 *
	 * .setValue( gl, value, [renderer] )
	 *
	 * 		uploads a uniform value(s)
	 *  	the 'renderer' parameter is needed for sampler uniforms
	 *
	 *
	 * Static methods of the top-level container (renderer factorizations):
	 *
	 * .upload( gl, seq, values, renderer )
	 *
	 * 		sets uniforms in 'seq' to 'values[id].value'
	 *
	 * .seqWithValue( seq, values ) : filteredSeq
	 *
	 * 		filters 'seq' entries with corresponding entry in values
	 *
	 *
	 * Methods of the top-level container (renderer factorizations):
	 *
	 * .setValue( gl, name, value )
	 *
	 * 		sets uniform with  name 'name' to 'value'
	 *
	 * .set( gl, obj, prop )
	 *
	 * 		sets uniform from object and property with same name than uniform
	 *
	 * .setOptional( gl, obj, prop )
	 *
	 * 		like .set for an optional property of the object
	 *
	 */var emptyTexture=new Texture();var emptyTexture3d=new Texture3D();var emptyCubeTexture=new CubeTexture();// --- Base for inner nodes (including the root) ---
function UniformContainer(){this.seq=[];this.map={};}// --- Utilities ---
// Array Caches (provide typed arrays for temporary by size)
var arrayCacheF32=[];var arrayCacheI32=[];// Float32Array caches used for uploading Matrix uniforms
var mat4array=new Float32Array(16);var mat3array=new Float32Array(9);var mat2array=new Float32Array(4);// Flattening for arrays of vectors and matrices
function flatten(array,nBlocks,blockSize){var firstElem=array[0];if(firstElem<=0||firstElem>0)return array;// unoptimized: ! isNaN( firstElem )
// see http://jacksondunstan.com/articles/983
var n=nBlocks*blockSize,r=arrayCacheF32[n];if(r===undefined){r=new Float32Array(n);arrayCacheF32[n]=r;}if(nBlocks!==0){firstElem.toArray(r,0);for(var i=1,offset=0;i!==nBlocks;++i){offset+=blockSize;array[i].toArray(r,offset);}}return r;}function arraysEqual(a,b){if(a.length!==b.length)return false;for(var i=0,l=a.length;i<l;i++){if(a[i]!==b[i])return false;}return true;}function copyArray(a,b){for(var i=0,l=b.length;i<l;i++){a[i]=b[i];}}// Texture unit allocation
function allocTexUnits(renderer,n){var r=arrayCacheI32[n];if(r===undefined){r=new Int32Array(n);arrayCacheI32[n]=r;}for(var i=0;i!==n;++i){r[i]=renderer.allocTextureUnit();}return r;}// --- Setters ---
// Note: Defining these methods externally, because they come in a bunch
// and this way their names minify.
// Single scalar
function setValue1f(gl,v){var cache=this.cache;if(cache[0]===v)return;gl.uniform1f(this.addr,v);cache[0]=v;}function setValue1i(gl,v){var cache=this.cache;if(cache[0]===v)return;gl.uniform1i(this.addr,v);cache[0]=v;}// Single float vector (from flat array or THREE.VectorN)
function setValue2fv(gl,v){var cache=this.cache;if(v.x!==undefined){if(cache[0]!==v.x||cache[1]!==v.y){gl.uniform2f(this.addr,v.x,v.y);cache[0]=v.x;cache[1]=v.y;}}else{if(arraysEqual(cache,v))return;gl.uniform2fv(this.addr,v);copyArray(cache,v);}}function setValue3fv(gl,v){var cache=this.cache;if(v.x!==undefined){if(cache[0]!==v.x||cache[1]!==v.y||cache[2]!==v.z){gl.uniform3f(this.addr,v.x,v.y,v.z);cache[0]=v.x;cache[1]=v.y;cache[2]=v.z;}}else if(v.r!==undefined){if(cache[0]!==v.r||cache[1]!==v.g||cache[2]!==v.b){gl.uniform3f(this.addr,v.r,v.g,v.b);cache[0]=v.r;cache[1]=v.g;cache[2]=v.b;}}else{if(arraysEqual(cache,v))return;gl.uniform3fv(this.addr,v);copyArray(cache,v);}}function setValue4fv(gl,v){var cache=this.cache;if(v.x!==undefined){if(cache[0]!==v.x||cache[1]!==v.y||cache[2]!==v.z||cache[3]!==v.w){gl.uniform4f(this.addr,v.x,v.y,v.z,v.w);cache[0]=v.x;cache[1]=v.y;cache[2]=v.z;cache[3]=v.w;}}else{if(arraysEqual(cache,v))return;gl.uniform4fv(this.addr,v);copyArray(cache,v);}}// Single matrix (from flat array or MatrixN)
function setValue2fm(gl,v){var cache=this.cache;var elements=v.elements;if(elements===undefined){if(arraysEqual(cache,v))return;gl.uniformMatrix2fv(this.addr,false,v);copyArray(cache,v);}else{if(arraysEqual(cache,elements))return;mat2array.set(elements);gl.uniformMatrix2fv(this.addr,false,mat2array);copyArray(cache,elements);}}function setValue3fm(gl,v){var cache=this.cache;var elements=v.elements;if(elements===undefined){if(arraysEqual(cache,v))return;gl.uniformMatrix3fv(this.addr,false,v);copyArray(cache,v);}else{if(arraysEqual(cache,elements))return;mat3array.set(elements);gl.uniformMatrix3fv(this.addr,false,mat3array);copyArray(cache,elements);}}function setValue4fm(gl,v){var cache=this.cache;var elements=v.elements;if(elements===undefined){if(arraysEqual(cache,v))return;gl.uniformMatrix4fv(this.addr,false,v);copyArray(cache,v);}else{if(arraysEqual(cache,elements))return;mat4array.set(elements);gl.uniformMatrix4fv(this.addr,false,mat4array);copyArray(cache,elements);}}// Single texture (2D / Cube)
function setValueT1(gl,v,renderer){var cache=this.cache;var unit=renderer.allocTextureUnit();if(cache[0]!==unit){gl.uniform1i(this.addr,unit);cache[0]=unit;}renderer.setTexture2D(v||emptyTexture,unit);}function setValueT3D1(gl,v,renderer){var cache=this.cache;var unit=renderer.allocTextureUnit();if(cache[0]!==unit){gl.uniform1i(this.addr,unit);cache[0]=unit;}renderer.setTexture3D(v||emptyTexture3d,unit);}function setValueT6(gl,v,renderer){var cache=this.cache;var unit=renderer.allocTextureUnit();if(cache[0]!==unit){gl.uniform1i(this.addr,unit);cache[0]=unit;}renderer.setTextureCube(v||emptyCubeTexture,unit);}// Integer / Boolean vectors or arrays thereof (always flat arrays)
function setValue2iv(gl,v){var cache=this.cache;if(arraysEqual(cache,v))return;gl.uniform2iv(this.addr,v);copyArray(cache,v);}function setValue3iv(gl,v){var cache=this.cache;if(arraysEqual(cache,v))return;gl.uniform3iv(this.addr,v);copyArray(cache,v);}function setValue4iv(gl,v){var cache=this.cache;if(arraysEqual(cache,v))return;gl.uniform4iv(this.addr,v);copyArray(cache,v);}// Helper to pick the right setter for the singular case
function getSingularSetter(type){switch(type){case 0x1406:return setValue1f;// FLOAT
case 0x8b50:return setValue2fv;// _VEC2
case 0x8b51:return setValue3fv;// _VEC3
case 0x8b52:return setValue4fv;// _VEC4
case 0x8b5a:return setValue2fm;// _MAT2
case 0x8b5b:return setValue3fm;// _MAT3
case 0x8b5c:return setValue4fm;// _MAT4
case 0x8b5e:case 0x8d66:return setValueT1;// SAMPLER_2D, SAMPLER_EXTERNAL_OES
case 0x8B5F:return setValueT3D1;// SAMPLER_3D
case 0x8b60:return setValueT6;// SAMPLER_CUBE
case 0x1404:case 0x8b56:return setValue1i;// INT, BOOL
case 0x8b53:case 0x8b57:return setValue2iv;// _VEC2
case 0x8b54:case 0x8b58:return setValue3iv;// _VEC3
case 0x8b55:case 0x8b59:return setValue4iv;// _VEC4
}}// Array of scalars
function setValue1fv(gl,v){var cache=this.cache;if(arraysEqual(cache,v))return;gl.uniform1fv(this.addr,v);copyArray(cache,v);}function setValue1iv(gl,v){var cache=this.cache;if(arraysEqual(cache,v))return;gl.uniform1iv(this.addr,v);copyArray(cache,v);}// Array of vectors (flat or from THREE classes)
function setValueV2a(gl,v){var cache=this.cache;var data=flatten(v,this.size,2);if(arraysEqual(cache,data))return;gl.uniform2fv(this.addr,data);this.updateCache(data);}function setValueV3a(gl,v){var cache=this.cache;var data=flatten(v,this.size,3);if(arraysEqual(cache,data))return;gl.uniform3fv(this.addr,data);this.updateCache(data);}function setValueV4a(gl,v){var cache=this.cache;var data=flatten(v,this.size,4);if(arraysEqual(cache,data))return;gl.uniform4fv(this.addr,data);this.updateCache(data);}// Array of matrices (flat or from THREE clases)
function setValueM2a(gl,v){var cache=this.cache;var data=flatten(v,this.size,4);if(arraysEqual(cache,data))return;gl.uniformMatrix2fv(this.addr,false,data);this.updateCache(data);}function setValueM3a(gl,v){var cache=this.cache;var data=flatten(v,this.size,9);if(arraysEqual(cache,data))return;gl.uniformMatrix3fv(this.addr,false,data);this.updateCache(data);}function setValueM4a(gl,v){var cache=this.cache;var data=flatten(v,this.size,16);if(arraysEqual(cache,data))return;gl.uniformMatrix4fv(this.addr,false,data);this.updateCache(data);}// Array of textures (2D / Cube)
function setValueT1a(gl,v,renderer){var cache=this.cache;var n=v.length;var units=allocTexUnits(renderer,n);if(arraysEqual(cache,units)===false){gl.uniform1iv(this.addr,units);copyArray(cache,units);}for(var i=0;i!==n;++i){renderer.setTexture2D(v[i]||emptyTexture,units[i]);}}function setValueT6a(gl,v,renderer){var cache=this.cache;var n=v.length;var units=allocTexUnits(renderer,n);if(arraysEqual(cache,units)===false){gl.uniform1iv(this.addr,units);copyArray(cache,units);}for(var i=0;i!==n;++i){renderer.setTextureCube(v[i]||emptyCubeTexture,units[i]);}}// Helper to pick the right setter for a pure (bottom-level) array
function getPureArraySetter(type){switch(type){case 0x1406:return setValue1fv;// FLOAT
case 0x8b50:return setValueV2a;// _VEC2
case 0x8b51:return setValueV3a;// _VEC3
case 0x8b52:return setValueV4a;// _VEC4
case 0x8b5a:return setValueM2a;// _MAT2
case 0x8b5b:return setValueM3a;// _MAT3
case 0x8b5c:return setValueM4a;// _MAT4
case 0x8b5e:return setValueT1a;// SAMPLER_2D
case 0x8b60:return setValueT6a;// SAMPLER_CUBE
case 0x1404:case 0x8b56:return setValue1iv;// INT, BOOL
case 0x8b53:case 0x8b57:return setValue2iv;// _VEC2
case 0x8b54:case 0x8b58:return setValue3iv;// _VEC3
case 0x8b55:case 0x8b59:return setValue4iv;// _VEC4
}}// --- Uniform Classes ---
function SingleUniform(id,activeInfo,addr){this.id=id;this.addr=addr;this.cache=[];this.setValue=getSingularSetter(activeInfo.type);// this.path = activeInfo.name; // DEBUG
}function PureArrayUniform(id,activeInfo,addr){this.id=id;this.addr=addr;this.cache=[];this.size=activeInfo.size;this.setValue=getPureArraySetter(activeInfo.type);// this.path = activeInfo.name; // DEBUG
}PureArrayUniform.prototype.updateCache=function(data){var cache=this.cache;if(data instanceof Float32Array&&cache.length!==data.length){this.cache=new Float32Array(data.length);}copyArray(cache,data);};function StructuredUniform(id){this.id=id;UniformContainer.call(this);// mix-in
}StructuredUniform.prototype.setValue=function(gl,value,renderer){var seq=this.seq;for(var i=0,n=seq.length;i!==n;++i){var u=seq[i];u.setValue(gl,value[u.id],renderer);}};// --- Top-level ---
// Parser - builds up the property tree from the path strings
var RePathPart=/([\w\d_]+)(\])?(\[|\.)?/g;// extracts
// 	- the identifier (member name or array index)
//  - followed by an optional right bracket (found when array index)
//  - followed by an optional left bracket or dot (type of subscript)
//
// Note: These portions can be read in a non-overlapping fashion and
// allow straightforward parsing of the hierarchy that WebGL encodes
// in the uniform names.
function addUniform(container,uniformObject){container.seq.push(uniformObject);container.map[uniformObject.id]=uniformObject;}function parseUniform(activeInfo,addr,container){var path=activeInfo.name,pathLength=path.length;// reset RegExp object, because of the early exit of a previous run
RePathPart.lastIndex=0;while(true){var match=RePathPart.exec(path),matchEnd=RePathPart.lastIndex,id=match[1],idIsIndex=match[2]===']',subscript=match[3];if(idIsIndex)id=id|0;// convert to integer
if(subscript===undefined||subscript==='['&&matchEnd+2===pathLength){// bare name or "pure" bottom-level array "[0]" suffix
addUniform(container,subscript===undefined?new SingleUniform(id,activeInfo,addr):new PureArrayUniform(id,activeInfo,addr));break;}else{// step into inner node / create it in case it doesn't exist
var map=container.map,next=map[id];if(next===undefined){next=new StructuredUniform(id);addUniform(container,next);}container=next;}}}// Root Container
function WebGLUniforms(gl,program,renderer){UniformContainer.call(this);this.renderer=renderer;var n=gl.getProgramParameter(program,gl.ACTIVE_UNIFORMS);for(var i=0;i<n;++i){var info=gl.getActiveUniform(program,i),addr=gl.getUniformLocation(program,info.name);parseUniform(info,addr,this);}}WebGLUniforms.prototype.setValue=function(gl,name,value){var u=this.map[name];if(u!==undefined)u.setValue(gl,value,this.renderer);};WebGLUniforms.prototype.setOptional=function(gl,object,name){var v=object[name];if(v!==undefined)this.setValue(gl,name,v);};// Static interface
WebGLUniforms.upload=function(gl,seq,values,renderer){for(var i=0,n=seq.length;i!==n;++i){var u=seq[i],v=values[u.id];if(v.needsUpdate!==false){// note: always updating when .needsUpdate is undefined
u.setValue(gl,v.value,renderer);}}};WebGLUniforms.seqWithValue=function(seq,values){var r=[];for(var i=0,n=seq.length;i!==n;++i){var u=seq[i];if(u.id in values)r.push(u);}return r;};/**
	 * @author mrdoob / http://mrdoob.com/
	 */function addLineNumbers(string){var lines=string.split('\n');for(var i=0;i<lines.length;i++){lines[i]=i+1+': '+lines[i];}return lines.join('\n');}function WebGLShader(gl,type,string){var shader=gl.createShader(type);gl.shaderSource(shader,string);gl.compileShader(shader);if(gl.getShaderParameter(shader,gl.COMPILE_STATUS)===false){console.error('THREE.WebGLShader: Shader couldn\'t compile.');}if(gl.getShaderInfoLog(shader)!==''){console.warn('THREE.WebGLShader: gl.getShaderInfoLog()',type===gl.VERTEX_SHADER?'vertex':'fragment',gl.getShaderInfoLog(shader),addLineNumbers(string));}// --enable-privileged-webgl-extension
// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );
return shader;}/**
	 * @author mrdoob / http://mrdoob.com/
	 */var programIdCount=0;function getEncodingComponents(encoding){switch(encoding){case LinearEncoding:return['Linear','( value )'];case sRGBEncoding:return['sRGB','( value )'];case RGBEEncoding:return['RGBE','( value )'];case RGBM7Encoding:return['RGBM','( value, 7.0 )'];case RGBM16Encoding:return['RGBM','( value, 16.0 )'];case RGBDEncoding:return['RGBD','( value, 256.0 )'];case GammaEncoding:return['Gamma','( value, float( GAMMA_FACTOR ) )'];default:throw new Error('unsupported encoding: '+encoding);}}function getTexelDecodingFunction(functionName,encoding){var components=getEncodingComponents(encoding);return'vec4 '+functionName+'( vec4 value ) { return '+components[0]+'ToLinear'+components[1]+'; }';}function getTexelEncodingFunction(functionName,encoding){var components=getEncodingComponents(encoding);return'vec4 '+functionName+'( vec4 value ) { return LinearTo'+components[0]+components[1]+'; }';}function getToneMappingFunction(functionName,toneMapping){var toneMappingName;switch(toneMapping){case LinearToneMapping:toneMappingName='Linear';break;case ReinhardToneMapping:toneMappingName='Reinhard';break;case Uncharted2ToneMapping:toneMappingName='Uncharted2';break;case CineonToneMapping:toneMappingName='OptimizedCineon';break;default:throw new Error('unsupported toneMapping: '+toneMapping);}return'vec3 '+functionName+'( vec3 color ) { return '+toneMappingName+'ToneMapping( color ); }';}function generateExtensions(extensions,parameters,rendererExtensions){extensions=extensions||{};var chunks=[extensions.derivatives||parameters.envMapCubeUV||parameters.bumpMap||parameters.normalMap&&!parameters.objectSpaceNormalMap||parameters.flatShading?'#extension GL_OES_standard_derivatives : enable':'',(extensions.fragDepth||parameters.logarithmicDepthBuffer)&&rendererExtensions.get('EXT_frag_depth')?'#extension GL_EXT_frag_depth : enable':'',extensions.drawBuffers&&rendererExtensions.get('WEBGL_draw_buffers')?'#extension GL_EXT_draw_buffers : require':'',(extensions.shaderTextureLOD||parameters.envMap)&&rendererExtensions.get('EXT_shader_texture_lod')?'#extension GL_EXT_shader_texture_lod : enable':''];return chunks.filter(filterEmptyLine).join('\n');}function generateDefines(defines){var chunks=[];for(var name in defines){var value=defines[name];if(value===false)continue;chunks.push('#define '+name+' '+value);}return chunks.join('\n');}function fetchAttributeLocations(gl,program){var attributes={};var n=gl.getProgramParameter(program,gl.ACTIVE_ATTRIBUTES);for(var i=0;i<n;i++){var info=gl.getActiveAttrib(program,i);var name=info.name;// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );
attributes[name]=gl.getAttribLocation(program,name);}return attributes;}function filterEmptyLine(string){return string!=='';}function replaceLightNums(string,parameters){return string.replace(/NUM_DIR_LIGHTS/g,parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g,parameters.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g,parameters.numHemiLights);}function replaceClippingPlaneNums(string,parameters){return string.replace(/NUM_CLIPPING_PLANES/g,parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,parameters.numClippingPlanes-parameters.numClipIntersection);}function parseIncludes(string){var pattern=/^[ \t]*#include +<([\w\d./]+)>/gm;function replace(match,include){var replace=ShaderChunk[include];if(replace===undefined){throw new Error('Can not resolve #include <'+include+'>');}return parseIncludes(replace);}return string.replace(pattern,replace);}function unrollLoops(string){var pattern=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;function replace(match,start,end,snippet){var unroll='';for(var i=parseInt(start);i<parseInt(end);i++){unroll+=snippet.replace(/\[ i \]/g,'[ '+i+' ]');}return unroll;}return string.replace(pattern,replace);}function WebGLProgram(renderer,extensions,code,material,shader,parameters,capabilities){var gl=renderer.context;var defines=material.defines;var vertexShader=shader.vertexShader;var fragmentShader=shader.fragmentShader;var shadowMapTypeDefine='SHADOWMAP_TYPE_BASIC';if(parameters.shadowMapType===PCFShadowMap){shadowMapTypeDefine='SHADOWMAP_TYPE_PCF';}else if(parameters.shadowMapType===PCFSoftShadowMap){shadowMapTypeDefine='SHADOWMAP_TYPE_PCF_SOFT';}var envMapTypeDefine='ENVMAP_TYPE_CUBE';var envMapModeDefine='ENVMAP_MODE_REFLECTION';var envMapBlendingDefine='ENVMAP_BLENDING_MULTIPLY';if(parameters.envMap){switch(material.envMap.mapping){case CubeReflectionMapping:case CubeRefractionMapping:envMapTypeDefine='ENVMAP_TYPE_CUBE';break;case CubeUVReflectionMapping:case CubeUVRefractionMapping:envMapTypeDefine='ENVMAP_TYPE_CUBE_UV';break;case EquirectangularReflectionMapping:case EquirectangularRefractionMapping:envMapTypeDefine='ENVMAP_TYPE_EQUIREC';break;case SphericalReflectionMapping:envMapTypeDefine='ENVMAP_TYPE_SPHERE';break;}switch(material.envMap.mapping){case CubeRefractionMapping:case EquirectangularRefractionMapping:envMapModeDefine='ENVMAP_MODE_REFRACTION';break;}switch(material.combine){case MultiplyOperation:envMapBlendingDefine='ENVMAP_BLENDING_MULTIPLY';break;case MixOperation:envMapBlendingDefine='ENVMAP_BLENDING_MIX';break;case AddOperation:envMapBlendingDefine='ENVMAP_BLENDING_ADD';break;}}var gammaFactorDefine=renderer.gammaFactor>0?renderer.gammaFactor:1.0;// console.log( 'building new program ' );
//
var customExtensions=capabilities.isWebGL2?'':generateExtensions(material.extensions,parameters,extensions);var customDefines=generateDefines(defines);//
var program=gl.createProgram();var prefixVertex,prefixFragment;if(material.isRawShaderMaterial){prefixVertex=[customDefines].filter(filterEmptyLine).join('\n');if(prefixVertex.length>0){prefixVertex+='\n';}prefixFragment=[customExtensions,customDefines].filter(filterEmptyLine).join('\n');if(prefixFragment.length>0){prefixFragment+='\n';}}else{prefixVertex=['precision '+parameters.precision+' float;','precision '+parameters.precision+' int;','#define SHADER_NAME '+shader.name,customDefines,parameters.supportsVertexTextures?'#define VERTEX_TEXTURES':'','#define GAMMA_FACTOR '+gammaFactorDefine,'#define MAX_BONES '+parameters.maxBones,parameters.useFog&&parameters.fog?'#define USE_FOG':'',parameters.useFog&&parameters.fogExp?'#define FOG_EXP2':'',parameters.map?'#define USE_MAP':'',parameters.envMap?'#define USE_ENVMAP':'',parameters.envMap?'#define '+envMapModeDefine:'',parameters.lightMap?'#define USE_LIGHTMAP':'',parameters.aoMap?'#define USE_AOMAP':'',parameters.emissiveMap?'#define USE_EMISSIVEMAP':'',parameters.bumpMap?'#define USE_BUMPMAP':'',parameters.normalMap?'#define USE_NORMALMAP':'',parameters.normalMap&&parameters.objectSpaceNormalMap?'#define OBJECTSPACE_NORMALMAP':'',parameters.displacementMap&&parameters.supportsVertexTextures?'#define USE_DISPLACEMENTMAP':'',parameters.specularMap?'#define USE_SPECULARMAP':'',parameters.roughnessMap?'#define USE_ROUGHNESSMAP':'',parameters.metalnessMap?'#define USE_METALNESSMAP':'',parameters.alphaMap?'#define USE_ALPHAMAP':'',parameters.vertexColors?'#define USE_COLOR':'',parameters.flatShading?'#define FLAT_SHADED':'',parameters.skinning?'#define USE_SKINNING':'',parameters.useVertexTexture?'#define BONE_TEXTURE':'',parameters.morphTargets?'#define USE_MORPHTARGETS':'',parameters.morphNormals&&parameters.flatShading===false?'#define USE_MORPHNORMALS':'',parameters.doubleSided?'#define DOUBLE_SIDED':'',parameters.flipSided?'#define FLIP_SIDED':'',parameters.shadowMapEnabled?'#define USE_SHADOWMAP':'',parameters.shadowMapEnabled?'#define '+shadowMapTypeDefine:'',parameters.sizeAttenuation?'#define USE_SIZEATTENUATION':'',parameters.logarithmicDepthBuffer?'#define USE_LOGDEPTHBUF':'',parameters.logarithmicDepthBuffer&&(capabilities.isWebGL2||extensions.get('EXT_frag_depth'))?'#define USE_LOGDEPTHBUF_EXT':'','uniform mat4 modelMatrix;','uniform mat4 modelViewMatrix;','uniform mat4 projectionMatrix;','uniform mat4 viewMatrix;','uniform mat3 normalMatrix;','uniform vec3 cameraPosition;','attribute vec3 position;','attribute vec3 normal;','attribute vec2 uv;','#ifdef USE_COLOR','	attribute vec4 color;','#endif','#ifdef USE_MORPHTARGETS','	attribute vec3 morphTarget0;','	attribute vec3 morphTarget1;','	attribute vec3 morphTarget2;','	attribute vec3 morphTarget3;','	#ifdef USE_MORPHNORMALS','		attribute vec3 morphNormal0;','		attribute vec3 morphNormal1;','		attribute vec3 morphNormal2;','		attribute vec3 morphNormal3;','	#else','		attribute vec3 morphTarget4;','		attribute vec3 morphTarget5;','		attribute vec3 morphTarget6;','		attribute vec3 morphTarget7;','	#endif','#endif','#ifdef USE_SKINNING','	attribute vec4 skinIndex;','	attribute vec4 skinWeight;','#endif','\n'].filter(filterEmptyLine).join('\n');prefixFragment=[customExtensions,'precision '+parameters.precision+' float;','precision '+parameters.precision+' int;','#define SHADER_NAME '+shader.name,customDefines,parameters.alphaTest?'#define ALPHATEST '+parameters.alphaTest+(parameters.alphaTest%1?'':'.0'):'',// add '.0' if integer
'#define GAMMA_FACTOR '+gammaFactorDefine,parameters.useFog&&parameters.fog?'#define USE_FOG':'',parameters.useFog&&parameters.fogExp?'#define FOG_EXP2':'',parameters.map?'#define USE_MAP':'',parameters.envMap?'#define USE_ENVMAP':'',parameters.envMap?'#define '+envMapTypeDefine:'',parameters.envMap?'#define '+envMapModeDefine:'',parameters.envMap?'#define '+envMapBlendingDefine:'',parameters.lightMap?'#define USE_LIGHTMAP':'',parameters.aoMap?'#define USE_AOMAP':'',parameters.emissiveMap?'#define USE_EMISSIVEMAP':'',parameters.bumpMap?'#define USE_BUMPMAP':'',parameters.normalMap?'#define USE_NORMALMAP':'',parameters.normalMap&&parameters.objectSpaceNormalMap?'#define OBJECTSPACE_NORMALMAP':'',parameters.specularMap?'#define USE_SPECULARMAP':'',parameters.roughnessMap?'#define USE_ROUGHNESSMAP':'',parameters.metalnessMap?'#define USE_METALNESSMAP':'',parameters.alphaMap?'#define USE_ALPHAMAP':'',parameters.vertexColors?'#define USE_COLOR':'',parameters.gradientMap?'#define USE_GRADIENTMAP':'',parameters.flatShading?'#define FLAT_SHADED':'',parameters.doubleSided?'#define DOUBLE_SIDED':'',parameters.flipSided?'#define FLIP_SIDED':'',parameters.shadowMapEnabled?'#define USE_SHADOWMAP':'',parameters.shadowMapEnabled?'#define '+shadowMapTypeDefine:'',parameters.premultipliedAlpha?'#define PREMULTIPLIED_ALPHA':'',parameters.physicallyCorrectLights?'#define PHYSICALLY_CORRECT_LIGHTS':'',parameters.logarithmicDepthBuffer?'#define USE_LOGDEPTHBUF':'',parameters.logarithmicDepthBuffer&&(capabilities.isWebGL2||extensions.get('EXT_frag_depth'))?'#define USE_LOGDEPTHBUF_EXT':'',parameters.envMap&&(capabilities.isWebGL2||extensions.get('EXT_shader_texture_lod'))?'#define TEXTURE_LOD_EXT':'','uniform mat4 viewMatrix;','uniform vec3 cameraPosition;',parameters.toneMapping!==NoToneMapping?'#define TONE_MAPPING':'',parameters.toneMapping!==NoToneMapping?ShaderChunk['tonemapping_pars_fragment']:'',// this code is required here because it is used by the toneMapping() function defined below
parameters.toneMapping!==NoToneMapping?getToneMappingFunction('toneMapping',parameters.toneMapping):'',parameters.dithering?'#define DITHERING':'',parameters.outputEncoding||parameters.mapEncoding||parameters.matcapEncoding||parameters.envMapEncoding||parameters.emissiveMapEncoding?ShaderChunk['encodings_pars_fragment']:'',// this code is required here because it is used by the various encoding/decoding function defined below
parameters.mapEncoding?getTexelDecodingFunction('mapTexelToLinear',parameters.mapEncoding):'',parameters.matcapEncoding?getTexelDecodingFunction('matcapTexelToLinear',parameters.matcapEncoding):'',parameters.envMapEncoding?getTexelDecodingFunction('envMapTexelToLinear',parameters.envMapEncoding):'',parameters.emissiveMapEncoding?getTexelDecodingFunction('emissiveMapTexelToLinear',parameters.emissiveMapEncoding):'',parameters.outputEncoding?getTexelEncodingFunction('linearToOutputTexel',parameters.outputEncoding):'',parameters.depthPacking?'#define DEPTH_PACKING '+material.depthPacking:'','\n'].filter(filterEmptyLine).join('\n');}vertexShader=parseIncludes(vertexShader);vertexShader=replaceLightNums(vertexShader,parameters);vertexShader=replaceClippingPlaneNums(vertexShader,parameters);fragmentShader=parseIncludes(fragmentShader);fragmentShader=replaceLightNums(fragmentShader,parameters);fragmentShader=replaceClippingPlaneNums(fragmentShader,parameters);vertexShader=unrollLoops(vertexShader);fragmentShader=unrollLoops(fragmentShader);if(capabilities.isWebGL2&&!material.isRawShaderMaterial){var isGLSL3ShaderMaterial=false;var versionRegex=/^\s*#version\s+300\s+es\s*\n/;if(material.isShaderMaterial&&vertexShader.match(versionRegex)!==null&&fragmentShader.match(versionRegex)!==null){isGLSL3ShaderMaterial=true;vertexShader=vertexShader.replace(versionRegex,'');fragmentShader=fragmentShader.replace(versionRegex,'');}// GLSL 3.0 conversion
prefixVertex=['#version 300 es\n','#define attribute in','#define varying out','#define texture2D texture'].join('\n')+'\n'+prefixVertex;prefixFragment=['#version 300 es\n','#define varying in',isGLSL3ShaderMaterial?'':'out highp vec4 pc_fragColor;',isGLSL3ShaderMaterial?'':'#define gl_FragColor pc_fragColor','#define gl_FragDepthEXT gl_FragDepth','#define texture2D texture','#define textureCube texture','#define texture2DProj textureProj','#define texture2DLodEXT textureLod','#define texture2DProjLodEXT textureProjLod','#define textureCubeLodEXT textureLod','#define texture2DGradEXT textureGrad','#define texture2DProjGradEXT textureProjGrad','#define textureCubeGradEXT textureGrad'].join('\n')+'\n'+prefixFragment;}var vertexGlsl=prefixVertex+vertexShader;var fragmentGlsl=prefixFragment+fragmentShader;// console.log( '*VERTEX*', vertexGlsl );
// console.log( '*FRAGMENT*', fragmentGlsl );
var glVertexShader=WebGLShader(gl,gl.VERTEX_SHADER,vertexGlsl);var glFragmentShader=WebGLShader(gl,gl.FRAGMENT_SHADER,fragmentGlsl);gl.attachShader(program,glVertexShader);gl.attachShader(program,glFragmentShader);// Force a particular attribute to index 0.
if(material.index0AttributeName!==undefined){gl.bindAttribLocation(program,0,material.index0AttributeName);}else if(parameters.morphTargets===true){// programs with morphTargets displace position out of attribute 0
gl.bindAttribLocation(program,0,'position');}gl.linkProgram(program);var programLog=gl.getProgramInfoLog(program).trim();var vertexLog=gl.getShaderInfoLog(glVertexShader).trim();var fragmentLog=gl.getShaderInfoLog(glFragmentShader).trim();var runnable=true;var haveDiagnostics=true;// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );
// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );
if(gl.getProgramParameter(program,gl.LINK_STATUS)===false){runnable=false;console.error('THREE.WebGLProgram: shader error: ',gl.getError(),'gl.VALIDATE_STATUS',gl.getProgramParameter(program,gl.VALIDATE_STATUS),'gl.getProgramInfoLog',programLog,vertexLog,fragmentLog);}else if(programLog!==''){console.warn('THREE.WebGLProgram: gl.getProgramInfoLog()',programLog);}else if(vertexLog===''||fragmentLog===''){haveDiagnostics=false;}if(haveDiagnostics){this.diagnostics={runnable:runnable,material:material,programLog:programLog,vertexShader:{log:vertexLog,prefix:prefixVertex},fragmentShader:{log:fragmentLog,prefix:prefixFragment}};}// clean up
gl.deleteShader(glVertexShader);gl.deleteShader(glFragmentShader);// set up caching for uniform locations
var cachedUniforms;this.getUniforms=function(){if(cachedUniforms===undefined){cachedUniforms=new WebGLUniforms(gl,program,renderer);}return cachedUniforms;};// set up caching for attribute locations
var cachedAttributes;this.getAttributes=function(){if(cachedAttributes===undefined){cachedAttributes=fetchAttributeLocations(gl,program);}return cachedAttributes;};// free resource
this.destroy=function(){gl.deleteProgram(program);this.program=undefined;};// DEPRECATED
Object.defineProperties(this,{uniforms:{get:function get(){console.warn('THREE.WebGLProgram: .uniforms is now .getUniforms().');return this.getUniforms();}},attributes:{get:function get(){console.warn('THREE.WebGLProgram: .attributes is now .getAttributes().');return this.getAttributes();}}});//
this.name=shader.name;this.id=programIdCount++;this.code=code;this.usedTimes=1;this.program=program;this.vertexShader=glVertexShader;this.fragmentShader=glFragmentShader;return this;}/**
	 * @author mrdoob / http://mrdoob.com/
	 */function WebGLPrograms(renderer,extensions,capabilities){var programs=[];var shaderIDs={MeshDepthMaterial:'depth',MeshDistanceMaterial:'distanceRGBA',MeshNormalMaterial:'normal',MeshBasicMaterial:'basic',MeshLambertMaterial:'lambert',MeshPhongMaterial:'phong',MeshToonMaterial:'phong',MeshStandardMaterial:'physical',MeshPhysicalMaterial:'physical',MeshMatcapMaterial:'matcap',LineBasicMaterial:'basic',LineDashedMaterial:'dashed',PointsMaterial:'points',ShadowMaterial:'shadow',SpriteMaterial:'sprite'};var parameterNames=["precision","supportsVertexTextures","map","mapEncoding","matcapEncoding","envMap","envMapMode","envMapEncoding","lightMap","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","displacementMap","specularMap","roughnessMap","metalnessMap","gradientMap","alphaMap","combine","vertexColors","fog","useFog","fogExp","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","maxMorphTargets","maxMorphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","shadowMapEnabled","shadowMapType","toneMapping",'physicallyCorrectLights',"alphaTest","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering"];function allocateBones(object){var skeleton=object.skeleton;var bones=skeleton.bones;if(capabilities.floatVertexTextures){return 1024;}else{// default for when object is not specified
// ( for example when prebuilding shader to be used with multiple objects )
//
//  - leave some extra space for other uniforms
//  - limit here is ANGLE's 254 max uniform vectors
//    (up to 54 should be safe)
var nVertexUniforms=capabilities.maxVertexUniforms;var nVertexMatrices=Math.floor((nVertexUniforms-20)/4);var maxBones=Math.min(nVertexMatrices,bones.length);if(maxBones<bones.length){console.warn('THREE.WebGLRenderer: Skeleton has '+bones.length+' bones. This GPU supports '+maxBones+'.');return 0;}return maxBones;}}function getTextureEncodingFromMap(map,gammaOverrideLinear){var encoding;if(!map){encoding=LinearEncoding;}else if(map.isTexture){encoding=map.encoding;}else if(map.isWebGLRenderTarget){console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.");encoding=map.texture.encoding;}// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.
if(encoding===LinearEncoding&&gammaOverrideLinear){encoding=GammaEncoding;}return encoding;}this.getParameters=function(material,lights,shadows,fog,nClipPlanes,nClipIntersection,object){var shaderID=shaderIDs[material.type];// heuristics to create shader parameters according to lights in the scene
// (not to blow over maxLights budget)
var maxBones=object.isSkinnedMesh?allocateBones(object):0;var precision=capabilities.precision;if(material.precision!==null){precision=capabilities.getMaxPrecision(material.precision);if(precision!==material.precision){console.warn('THREE.WebGLProgram.getParameters:',material.precision,'not supported, using',precision,'instead.');}}var currentRenderTarget=renderer.getRenderTarget();var parameters={shaderID:shaderID,precision:precision,supportsVertexTextures:capabilities.vertexTextures,outputEncoding:getTextureEncodingFromMap(!currentRenderTarget?null:currentRenderTarget.texture,renderer.gammaOutput),map:!!material.map,mapEncoding:getTextureEncodingFromMap(material.map,renderer.gammaInput),matcap:!!material.matcap,matcapEncoding:getTextureEncodingFromMap(material.matcap,renderer.gammaInput),envMap:!!material.envMap,envMapMode:material.envMap&&material.envMap.mapping,envMapEncoding:getTextureEncodingFromMap(material.envMap,renderer.gammaInput),envMapCubeUV:!!material.envMap&&(material.envMap.mapping===CubeUVReflectionMapping||material.envMap.mapping===CubeUVRefractionMapping),lightMap:!!material.lightMap,aoMap:!!material.aoMap,emissiveMap:!!material.emissiveMap,emissiveMapEncoding:getTextureEncodingFromMap(material.emissiveMap,renderer.gammaInput),bumpMap:!!material.bumpMap,normalMap:!!material.normalMap,objectSpaceNormalMap:material.normalMapType===ObjectSpaceNormalMap,displacementMap:!!material.displacementMap,roughnessMap:!!material.roughnessMap,metalnessMap:!!material.metalnessMap,specularMap:!!material.specularMap,alphaMap:!!material.alphaMap,gradientMap:!!material.gradientMap,combine:material.combine,vertexColors:material.vertexColors,fog:!!fog,useFog:material.fog,fogExp:fog&&fog.isFogExp2,flatShading:material.flatShading,sizeAttenuation:material.sizeAttenuation,logarithmicDepthBuffer:capabilities.logarithmicDepthBuffer,skinning:material.skinning&&maxBones>0,maxBones:maxBones,useVertexTexture:capabilities.floatVertexTextures,morphTargets:material.morphTargets,morphNormals:material.morphNormals,maxMorphTargets:renderer.maxMorphTargets,maxMorphNormals:renderer.maxMorphNormals,numDirLights:lights.directional.length,numPointLights:lights.point.length,numSpotLights:lights.spot.length,numRectAreaLights:lights.rectArea.length,numHemiLights:lights.hemi.length,numClippingPlanes:nClipPlanes,numClipIntersection:nClipIntersection,dithering:material.dithering,shadowMapEnabled:renderer.shadowMap.enabled&&object.receiveShadow&&shadows.length>0,shadowMapType:renderer.shadowMap.type,toneMapping:renderer.toneMapping,physicallyCorrectLights:renderer.physicallyCorrectLights,premultipliedAlpha:material.premultipliedAlpha,alphaTest:material.alphaTest,doubleSided:material.side===DoubleSide,flipSided:material.side===BackSide,depthPacking:material.depthPacking!==undefined?material.depthPacking:false};return parameters;};this.getProgramCode=function(material,parameters){var array=[];if(parameters.shaderID){array.push(parameters.shaderID);}else{array.push(material.fragmentShader);array.push(material.vertexShader);}if(material.defines!==undefined){for(var name in material.defines){array.push(name);array.push(material.defines[name]);}}for(var i=0;i<parameterNames.length;i++){array.push(parameters[parameterNames[i]]);}array.push(material.onBeforeCompile.toString());array.push(renderer.gammaOutput);return array.join();};this.acquireProgram=function(material,shader,parameters,code){var program;// Check if code has been already compiled
for(var p=0,pl=programs.length;p<pl;p++){var programInfo=programs[p];if(programInfo.code===code){program=programInfo;++program.usedTimes;break;}}if(program===undefined){program=new WebGLProgram(renderer,extensions,code,material,shader,parameters,capabilities);programs.push(program);}return program;};this.releaseProgram=function(program){if(--program.usedTimes===0){// Remove from unordered set
var i=programs.indexOf(program);programs[i]=programs[programs.length-1];programs.pop();// Free WebGL resources
program.destroy();}};// Exposed for resource monitoring & error feedback via renderer.info:
this.programs=programs;}/**
	 * @author fordacious / fordacious.github.io
	 */function WebGLProperties(){var properties=new WeakMap();function get(object){var map=properties.get(object);if(map===undefined){map={};properties.set(object,map);}return map;}function remove(object){properties.delete(object);}function update(object,key,value){properties.get(object)[key]=value;}function dispose(){properties=new WeakMap();}return{get:get,remove:remove,update:update,dispose:dispose};}/**
	 * @author mrdoob / http://mrdoob.com/
	 */function painterSortStable(a,b){if(a.renderOrder!==b.renderOrder){return a.renderOrder-b.renderOrder;}else if(a.program&&b.program&&a.program!==b.program){return a.program.id-b.program.id;}else if(a.material.id!==b.material.id){return a.material.id-b.material.id;}else if(a.z!==b.z){return a.z-b.z;}else{return a.id-b.id;}}function reversePainterSortStable(a,b){if(a.renderOrder!==b.renderOrder){return a.renderOrder-b.renderOrder;}if(a.z!==b.z){return b.z-a.z;}else{return a.id-b.id;}}function WebGLRenderList(){var renderItems=[];var renderItemsIndex=0;var opaque=[];var transparent=[];function init(){renderItemsIndex=0;opaque.length=0;transparent.length=0;}function push(object,geometry,material,z,group){var renderItem=renderItems[renderItemsIndex];if(renderItem===undefined){renderItem={id:object.id,object:object,geometry:geometry,material:material,program:material.program,renderOrder:object.renderOrder,z:z,group:group};renderItems[renderItemsIndex]=renderItem;}else{renderItem.id=object.id;renderItem.object=object;renderItem.geometry=geometry;renderItem.material=material;renderItem.program=material.program;renderItem.renderOrder=object.renderOrder;renderItem.z=z;renderItem.group=group;}(material.transparent===true?transparent:opaque).push(renderItem);renderItemsIndex++;}function sort(){if(opaque.length>1)opaque.sort(painterSortStable);if(transparent.length>1)transparent.sort(reversePainterSortStable);}return{opaque:opaque,transparent:transparent,init:init,push:push,sort:sort};}function WebGLRenderLists(){var lists={};function get(scene,camera){var hash=scene.id+','+camera.id;var list=lists[hash];if(list===undefined){// console.log( 'THREE.WebGLRenderLists:', hash );
list=new WebGLRenderList();lists[hash]=list;}return list;}function dispose(){lists={};}return{get:get,dispose:dispose};}/**
	 * @author mrdoob / http://mrdoob.com/
	 */function UniformsCache(){var lights={};return{get:function get(light){if(lights[light.id]!==undefined){return lights[light.id];}var uniforms;switch(light.type){case'DirectionalLight':uniforms={direction:new Vector3(),color:new Color(),shadow:false,shadowBias:0,shadowRadius:1,shadowMapSize:new Vector2()};break;case'SpotLight':uniforms={position:new Vector3(),direction:new Vector3(),color:new Color(),distance:0,coneCos:0,penumbraCos:0,decay:0,shadow:false,shadowBias:0,shadowRadius:1,shadowMapSize:new Vector2()};break;case'PointLight':uniforms={position:new Vector3(),color:new Color(),distance:0,decay:0,shadow:false,shadowBias:0,shadowRadius:1,shadowMapSize:new Vector2(),shadowCameraNear:1,shadowCameraFar:1000};break;case'HemisphereLight':uniforms={direction:new Vector3(),skyColor:new Color(),groundColor:new Color()};break;case'RectAreaLight':uniforms={color:new Color(),position:new Vector3(),halfWidth:new Vector3(),halfHeight:new Vector3()// TODO (abelnation): set RectAreaLight shadow uniforms
};break;}lights[light.id]=uniforms;return uniforms;}};}var count=0;function WebGLLights(){var cache=new UniformsCache();var state={id:count++,hash:{stateID:-1,directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,shadowsLength:-1},ambient:[0,0,0],directional:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],point:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]};var vector3=new Vector3();var matrix4=new Matrix4();var matrix42=new Matrix4();function setup(lights,shadows,camera){var r=0,g=0,b=0;var directionalLength=0;var pointLength=0;var spotLength=0;var rectAreaLength=0;var hemiLength=0;var viewMatrix=camera.matrixWorldInverse;for(var i=0,l=lights.length;i<l;i++){var light=lights[i];var color=light.color;var intensity=light.intensity;var distance=light.distance;var shadowMap=light.shadow&&light.shadow.map?light.shadow.map.texture:null;if(light.isAmbientLight){r+=color.r*intensity;g+=color.g*intensity;b+=color.b*intensity;}else if(light.isDirectionalLight){var uniforms=cache.get(light);uniforms.color.copy(light.color).multiplyScalar(light.intensity);uniforms.direction.setFromMatrixPosition(light.matrixWorld);vector3.setFromMatrixPosition(light.target.matrixWorld);uniforms.direction.sub(vector3);uniforms.direction.transformDirection(viewMatrix);uniforms.shadow=light.castShadow;if(light.castShadow){var shadow=light.shadow;uniforms.shadowBias=shadow.bias;uniforms.shadowRadius=shadow.radius;uniforms.shadowMapSize=shadow.mapSize;}state.directionalShadowMap[directionalLength]=shadowMap;state.directionalShadowMatrix[directionalLength]=light.shadow.matrix;state.directional[directionalLength]=uniforms;directionalLength++;}else if(light.isSpotLight){var uniforms=cache.get(light);uniforms.position.setFromMatrixPosition(light.matrixWorld);uniforms.position.applyMatrix4(viewMatrix);uniforms.color.copy(color).multiplyScalar(intensity);uniforms.distance=distance;uniforms.direction.setFromMatrixPosition(light.matrixWorld);vector3.setFromMatrixPosition(light.target.matrixWorld);uniforms.direction.sub(vector3);uniforms.direction.transformDirection(viewMatrix);uniforms.coneCos=Math.cos(light.angle);uniforms.penumbraCos=Math.cos(light.angle*(1-light.penumbra));uniforms.decay=light.distance===0?0.0:light.decay;uniforms.shadow=light.castShadow;if(light.castShadow){var shadow=light.shadow;uniforms.shadowBias=shadow.bias;uniforms.shadowRadius=shadow.radius;uniforms.shadowMapSize=shadow.mapSize;}state.spotShadowMap[spotLength]=shadowMap;state.spotShadowMatrix[spotLength]=light.shadow.matrix;state.spot[spotLength]=uniforms;spotLength++;}else if(light.isRectAreaLight){var uniforms=cache.get(light);// (a) intensity is the total visible light emitted
//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );
// (b) intensity is the brightness of the light
uniforms.color.copy(color).multiplyScalar(intensity);uniforms.position.setFromMatrixPosition(light.matrixWorld);uniforms.position.applyMatrix4(viewMatrix);// extract local rotation of light to derive width/height half vectors
matrix42.identity();matrix4.copy(light.matrixWorld);matrix4.premultiply(viewMatrix);matrix42.extractRotation(matrix4);uniforms.halfWidth.set(light.width*0.5,0.0,0.0);uniforms.halfHeight.set(0.0,light.height*0.5,0.0);uniforms.halfWidth.applyMatrix4(matrix42);uniforms.halfHeight.applyMatrix4(matrix42);// TODO (abelnation): RectAreaLight distance?
// uniforms.distance = distance;
state.rectArea[rectAreaLength]=uniforms;rectAreaLength++;}else if(light.isPointLight){var uniforms=cache.get(light);uniforms.position.setFromMatrixPosition(light.matrixWorld);uniforms.position.applyMatrix4(viewMatrix);uniforms.color.copy(light.color).multiplyScalar(light.intensity);uniforms.distance=light.distance;uniforms.decay=light.distance===0?0.0:light.decay;uniforms.shadow=light.castShadow;if(light.castShadow){var shadow=light.shadow;uniforms.shadowBias=shadow.bias;uniforms.shadowRadius=shadow.radius;uniforms.shadowMapSize=shadow.mapSize;uniforms.shadowCameraNear=shadow.camera.near;uniforms.shadowCameraFar=shadow.camera.far;}state.pointShadowMap[pointLength]=shadowMap;state.pointShadowMatrix[pointLength]=light.shadow.matrix;state.point[pointLength]=uniforms;pointLength++;}else if(light.isHemisphereLight){var uniforms=cache.get(light);uniforms.direction.setFromMatrixPosition(light.matrixWorld);uniforms.direction.transformDirection(viewMatrix);uniforms.direction.normalize();uniforms.skyColor.copy(light.color).multiplyScalar(intensity);uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity);state.hemi[hemiLength]=uniforms;hemiLength++;}}state.ambient[0]=r;state.ambient[1]=g;state.ambient[2]=b;state.directional.length=directionalLength;state.spot.length=spotLength;state.rectArea.length=rectAreaLength;state.point.length=pointLength;state.hemi.length=hemiLength;state.hash.stateID=state.id;state.hash.directionalLength=directionalLength;state.hash.pointLength=pointLength;state.hash.spotLength=spotLength;state.hash.rectAreaLength=rectAreaLength;state.hash.hemiLength=hemiLength;state.hash.shadowsLength=shadows.length;}return{setup:setup,state:state};}/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */function WebGLRenderState(){var lights=new WebGLLights();var lightsArray=[];var shadowsArray=[];function init(){lightsArray.length=0;shadowsArray.length=0;}function pushLight(light){lightsArray.push(light);}function pushShadow(shadowLight){shadowsArray.push(shadowLight);}function setupLights(camera){lights.setup(lightsArray,shadowsArray,camera);}var state={lightsArray:lightsArray,shadowsArray:shadowsArray,lights:lights};return{init:init,state:state,setupLights:setupLights,pushLight:pushLight,pushShadow:pushShadow};}function WebGLRenderStates(){var renderStates={};function get(scene,camera){var renderState;if(renderStates[scene.id]===undefined){renderState=new WebGLRenderState();renderStates[scene.id]={};renderStates[scene.id][camera.id]=renderState;}else{if(renderStates[scene.id][camera.id]===undefined){renderState=new WebGLRenderState();renderStates[scene.id][camera.id]=renderState;}else{renderState=renderStates[scene.id][camera.id];}}return renderState;}function dispose(){renderStates={};}return{get:get,dispose:dispose};}/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author bhouston / https://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>
	 * }
	 */function MeshDepthMaterial(parameters){Material.call(this);this.type='MeshDepthMaterial';this.depthPacking=BasicDepthPacking;this.skinning=false;this.morphTargets=false;this.map=null;this.alphaMap=null;this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.wireframe=false;this.wireframeLinewidth=1;this.fog=false;this.lights=false;this.setValues(parameters);}MeshDepthMaterial.prototype=Object.create(Material.prototype);MeshDepthMaterial.prototype.constructor=MeshDepthMaterial;MeshDepthMaterial.prototype.isMeshDepthMaterial=true;MeshDepthMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.depthPacking=source.depthPacking;this.skinning=source.skinning;this.morphTargets=source.morphTargets;this.map=source.map;this.alphaMap=source.alphaMap;this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;return this;};/**
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *
	 *  referencePosition: <float>,
	 *  nearDistance: <float>,
	 *  farDistance: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>
	 *
	 * }
	 */function MeshDistanceMaterial(parameters){Material.call(this);this.type='MeshDistanceMaterial';this.referencePosition=new Vector3();this.nearDistance=1;this.farDistance=1000;this.skinning=false;this.morphTargets=false;this.map=null;this.alphaMap=null;this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.fog=false;this.lights=false;this.setValues(parameters);}MeshDistanceMaterial.prototype=Object.create(Material.prototype);MeshDistanceMaterial.prototype.constructor=MeshDistanceMaterial;MeshDistanceMaterial.prototype.isMeshDistanceMaterial=true;MeshDistanceMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.referencePosition.copy(source.referencePosition);this.nearDistance=source.nearDistance;this.farDistance=source.farDistance;this.skinning=source.skinning;this.morphTargets=source.morphTargets;this.map=source.map;this.alphaMap=source.alphaMap;this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;return this;};/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */function WebGLShadowMap(_renderer,_objects,maxTextureSize){var _frustum=new Frustum(),_projScreenMatrix=new Matrix4(),_shadowMapSize=new Vector2(),_maxShadowMapSize=new Vector2(maxTextureSize,maxTextureSize),_lookTarget=new Vector3(),_lightPositionWorld=new Vector3(),_MorphingFlag=1,_SkinningFlag=2,_NumberOfMaterialVariants=(_MorphingFlag|_SkinningFlag)+1,_depthMaterials=new Array(_NumberOfMaterialVariants),_distanceMaterials=new Array(_NumberOfMaterialVariants),_materialCache={};var shadowSide={0:BackSide,1:FrontSide,2:DoubleSide};var cubeDirections=[new Vector3(1,0,0),new Vector3(-1,0,0),new Vector3(0,0,1),new Vector3(0,0,-1),new Vector3(0,1,0),new Vector3(0,-1,0)];var cubeUps=[new Vector3(0,1,0),new Vector3(0,1,0),new Vector3(0,1,0),new Vector3(0,1,0),new Vector3(0,0,1),new Vector3(0,0,-1)];var cube2DViewPorts=[new Vector4(),new Vector4(),new Vector4(),new Vector4(),new Vector4(),new Vector4()];// init
for(var i=0;i!==_NumberOfMaterialVariants;++i){var useMorphing=(i&_MorphingFlag)!==0;var useSkinning=(i&_SkinningFlag)!==0;var depthMaterial=new MeshDepthMaterial({depthPacking:RGBADepthPacking,morphTargets:useMorphing,skinning:useSkinning});_depthMaterials[i]=depthMaterial;//
var distanceMaterial=new MeshDistanceMaterial({morphTargets:useMorphing,skinning:useSkinning});_distanceMaterials[i]=distanceMaterial;}//
var scope=this;this.enabled=false;this.autoUpdate=true;this.needsUpdate=false;this.type=PCFShadowMap;this.render=function(lights,scene,camera){if(scope.enabled===false)return;if(scope.autoUpdate===false&&scope.needsUpdate===false)return;if(lights.length===0)return;// TODO Clean up (needed in case of contextlost)
var _gl=_renderer.context;var _state=_renderer.state;// Set GL state for depth map.
_state.disable(_gl.BLEND);_state.buffers.color.setClear(1,1,1,1);_state.buffers.depth.setTest(true);_state.setScissorTest(false);// render depth map
var faceCount;for(var i=0,il=lights.length;i<il;i++){var light=lights[i];var shadow=light.shadow;var isPointLight=light&&light.isPointLight;if(shadow===undefined){console.warn('THREE.WebGLShadowMap:',light,'has no shadow.');continue;}var shadowCamera=shadow.camera;_shadowMapSize.copy(shadow.mapSize);_shadowMapSize.min(_maxShadowMapSize);if(isPointLight){var vpWidth=_shadowMapSize.x;var vpHeight=_shadowMapSize.y;// These viewports map a cube-map onto a 2D texture with the
// following orientation:
//
//  xzXZ
//   y Y
//
// X - Positive x direction
// x - Negative x direction
// Y - Positive y direction
// y - Negative y direction
// Z - Positive z direction
// z - Negative z direction
// positive X
cube2DViewPorts[0].set(vpWidth*2,vpHeight,vpWidth,vpHeight);// negative X
cube2DViewPorts[1].set(0,vpHeight,vpWidth,vpHeight);// positive Z
cube2DViewPorts[2].set(vpWidth*3,vpHeight,vpWidth,vpHeight);// negative Z
cube2DViewPorts[3].set(vpWidth,vpHeight,vpWidth,vpHeight);// positive Y
cube2DViewPorts[4].set(vpWidth*3,0,vpWidth,vpHeight);// negative Y
cube2DViewPorts[5].set(vpWidth,0,vpWidth,vpHeight);_shadowMapSize.x*=4.0;_shadowMapSize.y*=2.0;}if(shadow.map===null){var pars={minFilter:NearestFilter,magFilter:NearestFilter,format:RGBAFormat};shadow.map=new WebGLRenderTarget(_shadowMapSize.x,_shadowMapSize.y,pars);shadow.map.texture.name=light.name+".shadowMap";shadowCamera.updateProjectionMatrix();}if(shadow.isSpotLightShadow){shadow.update(light);}var shadowMap=shadow.map;var shadowMatrix=shadow.matrix;_lightPositionWorld.setFromMatrixPosition(light.matrixWorld);shadowCamera.position.copy(_lightPositionWorld);if(isPointLight){faceCount=6;// for point lights we set the shadow matrix to be a translation-only matrix
// equal to inverse of the light's position
shadowMatrix.makeTranslation(-_lightPositionWorld.x,-_lightPositionWorld.y,-_lightPositionWorld.z);}else{faceCount=1;_lookTarget.setFromMatrixPosition(light.target.matrixWorld);shadowCamera.lookAt(_lookTarget);shadowCamera.updateMatrixWorld();// compute shadow matrix
shadowMatrix.set(0.5,0.0,0.0,0.5,0.0,0.5,0.0,0.5,0.0,0.0,0.5,0.5,0.0,0.0,0.0,1.0);shadowMatrix.multiply(shadowCamera.projectionMatrix);shadowMatrix.multiply(shadowCamera.matrixWorldInverse);}_renderer.setRenderTarget(shadowMap);_renderer.clear();// render shadow map for each cube face (if omni-directional) or
// run a single pass if not
for(var face=0;face<faceCount;face++){if(isPointLight){_lookTarget.copy(shadowCamera.position);_lookTarget.add(cubeDirections[face]);shadowCamera.up.copy(cubeUps[face]);shadowCamera.lookAt(_lookTarget);shadowCamera.updateMatrixWorld();var vpDimensions=cube2DViewPorts[face];_state.viewport(vpDimensions);}// update camera matrices and frustum
_projScreenMatrix.multiplyMatrices(shadowCamera.projectionMatrix,shadowCamera.matrixWorldInverse);_frustum.setFromMatrix(_projScreenMatrix);// set object matrices & frustum culling
renderObject(scene,camera,shadowCamera,isPointLight);}}scope.needsUpdate=false;};function getDepthMaterial(object,material,isPointLight,lightPositionWorld,shadowCameraNear,shadowCameraFar){var geometry=object.geometry;var result=null;var materialVariants=_depthMaterials;var customMaterial=object.customDepthMaterial;if(isPointLight){materialVariants=_distanceMaterials;customMaterial=object.customDistanceMaterial;}if(!customMaterial){var useMorphing=false;if(material.morphTargets){if(geometry&&geometry.isBufferGeometry){useMorphing=geometry.morphAttributes&&geometry.morphAttributes.position&&geometry.morphAttributes.position.length>0;}else if(geometry&&geometry.isGeometry){useMorphing=geometry.morphTargets&&geometry.morphTargets.length>0;}}if(object.isSkinnedMesh&&material.skinning===false){console.warn('THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:',object);}var useSkinning=object.isSkinnedMesh&&material.skinning;var variantIndex=0;if(useMorphing)variantIndex|=_MorphingFlag;if(useSkinning)variantIndex|=_SkinningFlag;result=materialVariants[variantIndex];}else{result=customMaterial;}if(_renderer.localClippingEnabled&&material.clipShadows===true&&material.clippingPlanes.length!==0){// in this case we need a unique material instance reflecting the
// appropriate state
var keyA=result.uuid,keyB=material.uuid;var materialsForVariant=_materialCache[keyA];if(materialsForVariant===undefined){materialsForVariant={};_materialCache[keyA]=materialsForVariant;}var cachedMaterial=materialsForVariant[keyB];if(cachedMaterial===undefined){cachedMaterial=result.clone();materialsForVariant[keyB]=cachedMaterial;}result=cachedMaterial;}result.visible=material.visible;result.wireframe=material.wireframe;result.side=material.shadowSide!=null?material.shadowSide:shadowSide[material.side];result.clipShadows=material.clipShadows;result.clippingPlanes=material.clippingPlanes;result.clipIntersection=material.clipIntersection;result.wireframeLinewidth=material.wireframeLinewidth;result.linewidth=material.linewidth;if(isPointLight&&result.isMeshDistanceMaterial){result.referencePosition.copy(lightPositionWorld);result.nearDistance=shadowCameraNear;result.farDistance=shadowCameraFar;}return result;}function renderObject(object,camera,shadowCamera,isPointLight){if(object.visible===false)return;var visible=object.layers.test(camera.layers);if(visible&&(object.isMesh||object.isLine||object.isPoints)){if(object.castShadow&&(!object.frustumCulled||_frustum.intersectsObject(object))){object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse,object.matrixWorld);var geometry=_objects.update(object);var material=object.material;if(Array.isArray(material)){var groups=geometry.groups;for(var k=0,kl=groups.length;k<kl;k++){var group=groups[k];var groupMaterial=material[group.materialIndex];if(groupMaterial&&groupMaterial.visible){var depthMaterial=getDepthMaterial(object,groupMaterial,isPointLight,_lightPositionWorld,shadowCamera.near,shadowCamera.far);_renderer.renderBufferDirect(shadowCamera,null,geometry,depthMaterial,object,group);}}}else if(material.visible){var depthMaterial=getDepthMaterial(object,material,isPointLight,_lightPositionWorld,shadowCamera.near,shadowCamera.far);_renderer.renderBufferDirect(shadowCamera,null,geometry,depthMaterial,object,null);}}}var children=object.children;for(var i=0,l=children.length;i<l;i++){renderObject(children[i],camera,shadowCamera,isPointLight);}}}/**
	 * @author mrdoob / http://mrdoob.com/
	 */function WebGLState(gl,extensions,utils,capabilities){function ColorBuffer(){var locked=false;var color=new Vector4();var currentColorMask=null;var currentColorClear=new Vector4(0,0,0,0);return{setMask:function setMask(colorMask){if(currentColorMask!==colorMask&&!locked){gl.colorMask(colorMask,colorMask,colorMask,colorMask);currentColorMask=colorMask;}},setLocked:function setLocked(lock){locked=lock;},setClear:function setClear(r,g,b,a,premultipliedAlpha){if(premultipliedAlpha===true){r*=a;g*=a;b*=a;}color.set(r,g,b,a);if(currentColorClear.equals(color)===false){gl.clearColor(r,g,b,a);currentColorClear.copy(color);}},reset:function reset(){locked=false;currentColorMask=null;currentColorClear.set(-1,0,0,0);// set to invalid state
}};}function DepthBuffer(){var locked=false;var currentDepthMask=null;var currentDepthFunc=null;var currentDepthClear=null;return{setTest:function setTest(depthTest){if(depthTest){enable(gl.DEPTH_TEST);}else{disable(gl.DEPTH_TEST);}},setMask:function setMask(depthMask){if(currentDepthMask!==depthMask&&!locked){gl.depthMask(depthMask);currentDepthMask=depthMask;}},setFunc:function setFunc(depthFunc){if(currentDepthFunc!==depthFunc){if(depthFunc){switch(depthFunc){case NeverDepth:gl.depthFunc(gl.NEVER);break;case AlwaysDepth:gl.depthFunc(gl.ALWAYS);break;case LessDepth:gl.depthFunc(gl.LESS);break;case LessEqualDepth:gl.depthFunc(gl.LEQUAL);break;case EqualDepth:gl.depthFunc(gl.EQUAL);break;case GreaterEqualDepth:gl.depthFunc(gl.GEQUAL);break;case GreaterDepth:gl.depthFunc(gl.GREATER);break;case NotEqualDepth:gl.depthFunc(gl.NOTEQUAL);break;default:gl.depthFunc(gl.LEQUAL);}}else{gl.depthFunc(gl.LEQUAL);}currentDepthFunc=depthFunc;}},setLocked:function setLocked(lock){locked=lock;},setClear:function setClear(depth){if(currentDepthClear!==depth){gl.clearDepth(depth);currentDepthClear=depth;}},reset:function reset(){locked=false;currentDepthMask=null;currentDepthFunc=null;currentDepthClear=null;}};}function StencilBuffer(){var locked=false;var currentStencilMask=null;var currentStencilFunc=null;var currentStencilRef=null;var currentStencilFuncMask=null;var currentStencilFail=null;var currentStencilZFail=null;var currentStencilZPass=null;var currentStencilClear=null;return{setTest:function setTest(stencilTest){if(stencilTest){enable(gl.STENCIL_TEST);}else{disable(gl.STENCIL_TEST);}},setMask:function setMask(stencilMask){if(currentStencilMask!==stencilMask&&!locked){gl.stencilMask(stencilMask);currentStencilMask=stencilMask;}},setFunc:function setFunc(stencilFunc,stencilRef,stencilMask){if(currentStencilFunc!==stencilFunc||currentStencilRef!==stencilRef||currentStencilFuncMask!==stencilMask){gl.stencilFunc(stencilFunc,stencilRef,stencilMask);currentStencilFunc=stencilFunc;currentStencilRef=stencilRef;currentStencilFuncMask=stencilMask;}},setOp:function setOp(stencilFail,stencilZFail,stencilZPass){if(currentStencilFail!==stencilFail||currentStencilZFail!==stencilZFail||currentStencilZPass!==stencilZPass){gl.stencilOp(stencilFail,stencilZFail,stencilZPass);currentStencilFail=stencilFail;currentStencilZFail=stencilZFail;currentStencilZPass=stencilZPass;}},setLocked:function setLocked(lock){locked=lock;},setClear:function setClear(stencil){if(currentStencilClear!==stencil){gl.clearStencil(stencil);currentStencilClear=stencil;}},reset:function reset(){locked=false;currentStencilMask=null;currentStencilFunc=null;currentStencilRef=null;currentStencilFuncMask=null;currentStencilFail=null;currentStencilZFail=null;currentStencilZPass=null;currentStencilClear=null;}};}//
var colorBuffer=new ColorBuffer();var depthBuffer=new DepthBuffer();var stencilBuffer=new StencilBuffer();var maxVertexAttributes=gl.getParameter(gl.MAX_VERTEX_ATTRIBS);var newAttributes=new Uint8Array(maxVertexAttributes);var enabledAttributes=new Uint8Array(maxVertexAttributes);var attributeDivisors=new Uint8Array(maxVertexAttributes);var enabledCapabilities={};var compressedTextureFormats=null;var currentProgram=null;var currentBlendingEnabled=null;var currentBlending=null;var currentBlendEquation=null;var currentBlendSrc=null;var currentBlendDst=null;var currentBlendEquationAlpha=null;var currentBlendSrcAlpha=null;var currentBlendDstAlpha=null;var currentPremultipledAlpha=false;var currentFlipSided=null;var currentCullFace=null;var currentLineWidth=null;var currentPolygonOffsetFactor=null;var currentPolygonOffsetUnits=null;var maxTextures=gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);var lineWidthAvailable=false;var version=0;var glVersion=gl.getParameter(gl.VERSION);if(glVersion.indexOf('WebGL')!==-1){version=parseFloat(/^WebGL\ ([0-9])/.exec(glVersion)[1]);lineWidthAvailable=version>=1.0;}else if(glVersion.indexOf('OpenGL ES')!==-1){version=parseFloat(/^OpenGL\ ES\ ([0-9])/.exec(glVersion)[1]);lineWidthAvailable=version>=2.0;}var currentTextureSlot=null;var currentBoundTextures={};var currentScissor=new Vector4();var currentViewport=new Vector4();function createTexture(type,target,count){var data=new Uint8Array(4);// 4 is required to match default unpack alignment of 4.
var texture=gl.createTexture();gl.bindTexture(type,texture);gl.texParameteri(type,gl.TEXTURE_MIN_FILTER,gl.NEAREST);gl.texParameteri(type,gl.TEXTURE_MAG_FILTER,gl.NEAREST);for(var i=0;i<count;i++){gl.texImage2D(target+i,0,gl.RGBA,1,1,0,gl.RGBA,gl.UNSIGNED_BYTE,data);}return texture;}var emptyTextures={};emptyTextures[gl.TEXTURE_2D]=createTexture(gl.TEXTURE_2D,gl.TEXTURE_2D,1);emptyTextures[gl.TEXTURE_CUBE_MAP]=createTexture(gl.TEXTURE_CUBE_MAP,gl.TEXTURE_CUBE_MAP_POSITIVE_X,6);// init
colorBuffer.setClear(0,0,0,1);depthBuffer.setClear(1);stencilBuffer.setClear(0);enable(gl.DEPTH_TEST);depthBuffer.setFunc(LessEqualDepth);setFlipSided(false);setCullFace(CullFaceBack);enable(gl.CULL_FACE);setBlending(NoBlending);//
function initAttributes(){for(var i=0,l=newAttributes.length;i<l;i++){newAttributes[i]=0;}}function enableAttribute(attribute){enableAttributeAndDivisor(attribute,0);}function enableAttributeAndDivisor(attribute,meshPerAttribute){newAttributes[attribute]=1;if(enabledAttributes[attribute]===0){gl.enableVertexAttribArray(attribute);enabledAttributes[attribute]=1;}if(attributeDivisors[attribute]!==meshPerAttribute){var extension=capabilities.isWebGL2?gl:extensions.get('ANGLE_instanced_arrays');extension[capabilities.isWebGL2?'vertexAttribDivisor':'vertexAttribDivisorANGLE'](attribute,meshPerAttribute);attributeDivisors[attribute]=meshPerAttribute;}}function disableUnusedAttributes(){for(var i=0,l=enabledAttributes.length;i!==l;++i){if(enabledAttributes[i]!==newAttributes[i]){gl.disableVertexAttribArray(i);enabledAttributes[i]=0;}}}function enable(id){if(enabledCapabilities[id]!==true){gl.enable(id);enabledCapabilities[id]=true;}}function disable(id){if(enabledCapabilities[id]!==false){gl.disable(id);enabledCapabilities[id]=false;}}function getCompressedTextureFormats(){if(compressedTextureFormats===null){compressedTextureFormats=[];if(extensions.get('WEBGL_compressed_texture_pvrtc')||extensions.get('WEBGL_compressed_texture_s3tc')||extensions.get('WEBGL_compressed_texture_etc1')||extensions.get('WEBGL_compressed_texture_astc')){var formats=gl.getParameter(gl.COMPRESSED_TEXTURE_FORMATS);for(var i=0;i<formats.length;i++){compressedTextureFormats.push(formats[i]);}}}return compressedTextureFormats;}function useProgram(program){if(currentProgram!==program){gl.useProgram(program);currentProgram=program;return true;}return false;}function setBlending(blending,blendEquation,blendSrc,blendDst,blendEquationAlpha,blendSrcAlpha,blendDstAlpha,premultipliedAlpha){if(blending===NoBlending){if(currentBlendingEnabled){disable(gl.BLEND);currentBlendingEnabled=false;}return;}if(!currentBlendingEnabled){enable(gl.BLEND);currentBlendingEnabled=true;}if(blending!==CustomBlending){if(blending!==currentBlending||premultipliedAlpha!==currentPremultipledAlpha){if(currentBlendEquation!==AddEquation||currentBlendEquationAlpha!==AddEquation){gl.blendEquation(gl.FUNC_ADD);currentBlendEquation=AddEquation;currentBlendEquationAlpha=AddEquation;}if(premultipliedAlpha){switch(blending){case NormalBlending:gl.blendFuncSeparate(gl.ONE,gl.ONE_MINUS_SRC_ALPHA,gl.ONE,gl.ONE_MINUS_SRC_ALPHA);break;case AdditiveBlending:gl.blendFunc(gl.ONE,gl.ONE);break;case SubtractiveBlending:gl.blendFuncSeparate(gl.ZERO,gl.ZERO,gl.ONE_MINUS_SRC_COLOR,gl.ONE_MINUS_SRC_ALPHA);break;case MultiplyBlending:gl.blendFuncSeparate(gl.ZERO,gl.SRC_COLOR,gl.ZERO,gl.SRC_ALPHA);break;default:console.error('THREE.WebGLState: Invalid blending: ',blending);break;}}else{switch(blending){case NormalBlending:gl.blendFuncSeparate(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA,gl.ONE,gl.ONE_MINUS_SRC_ALPHA);break;case AdditiveBlending:gl.blendFunc(gl.SRC_ALPHA,gl.ONE);break;case SubtractiveBlending:gl.blendFunc(gl.ZERO,gl.ONE_MINUS_SRC_COLOR);break;case MultiplyBlending:gl.blendFunc(gl.ZERO,gl.SRC_COLOR);break;default:console.error('THREE.WebGLState: Invalid blending: ',blending);break;}}currentBlendSrc=null;currentBlendDst=null;currentBlendSrcAlpha=null;currentBlendDstAlpha=null;currentBlending=blending;currentPremultipledAlpha=premultipliedAlpha;}return;}// custom blending
blendEquationAlpha=blendEquationAlpha||blendEquation;blendSrcAlpha=blendSrcAlpha||blendSrc;blendDstAlpha=blendDstAlpha||blendDst;if(blendEquation!==currentBlendEquation||blendEquationAlpha!==currentBlendEquationAlpha){gl.blendEquationSeparate(utils.convert(blendEquation),utils.convert(blendEquationAlpha));currentBlendEquation=blendEquation;currentBlendEquationAlpha=blendEquationAlpha;}if(blendSrc!==currentBlendSrc||blendDst!==currentBlendDst||blendSrcAlpha!==currentBlendSrcAlpha||blendDstAlpha!==currentBlendDstAlpha){gl.blendFuncSeparate(utils.convert(blendSrc),utils.convert(blendDst),utils.convert(blendSrcAlpha),utils.convert(blendDstAlpha));currentBlendSrc=blendSrc;currentBlendDst=blendDst;currentBlendSrcAlpha=blendSrcAlpha;currentBlendDstAlpha=blendDstAlpha;}currentBlending=blending;currentPremultipledAlpha=null;}function setMaterial(material,frontFaceCW){material.side===DoubleSide?disable(gl.CULL_FACE):enable(gl.CULL_FACE);var flipSided=material.side===BackSide;if(frontFaceCW)flipSided=!flipSided;setFlipSided(flipSided);material.blending===NormalBlending&&material.transparent===false?setBlending(NoBlending):setBlending(material.blending,material.blendEquation,material.blendSrc,material.blendDst,material.blendEquationAlpha,material.blendSrcAlpha,material.blendDstAlpha,material.premultipliedAlpha);depthBuffer.setFunc(material.depthFunc);depthBuffer.setTest(material.depthTest);depthBuffer.setMask(material.depthWrite);colorBuffer.setMask(material.colorWrite);setPolygonOffset(material.polygonOffset,material.polygonOffsetFactor,material.polygonOffsetUnits);}//
function setFlipSided(flipSided){if(currentFlipSided!==flipSided){if(flipSided){gl.frontFace(gl.CW);}else{gl.frontFace(gl.CCW);}currentFlipSided=flipSided;}}function setCullFace(cullFace){if(cullFace!==CullFaceNone){enable(gl.CULL_FACE);if(cullFace!==currentCullFace){if(cullFace===CullFaceBack){gl.cullFace(gl.BACK);}else if(cullFace===CullFaceFront){gl.cullFace(gl.FRONT);}else{gl.cullFace(gl.FRONT_AND_BACK);}}}else{disable(gl.CULL_FACE);}currentCullFace=cullFace;}function setLineWidth(width){if(width!==currentLineWidth){if(lineWidthAvailable)gl.lineWidth(width);currentLineWidth=width;}}function setPolygonOffset(polygonOffset,factor,units){if(polygonOffset){enable(gl.POLYGON_OFFSET_FILL);if(currentPolygonOffsetFactor!==factor||currentPolygonOffsetUnits!==units){gl.polygonOffset(factor,units);currentPolygonOffsetFactor=factor;currentPolygonOffsetUnits=units;}}else{disable(gl.POLYGON_OFFSET_FILL);}}function setScissorTest(scissorTest){if(scissorTest){enable(gl.SCISSOR_TEST);}else{disable(gl.SCISSOR_TEST);}}// texture
function activeTexture(webglSlot){if(webglSlot===undefined)webglSlot=gl.TEXTURE0+maxTextures-1;if(currentTextureSlot!==webglSlot){gl.activeTexture(webglSlot);currentTextureSlot=webglSlot;}}function bindTexture(webglType,webglTexture){if(currentTextureSlot===null){activeTexture();}var boundTexture=currentBoundTextures[currentTextureSlot];if(boundTexture===undefined){boundTexture={type:undefined,texture:undefined};currentBoundTextures[currentTextureSlot]=boundTexture;}if(boundTexture.type!==webglType||boundTexture.texture!==webglTexture){gl.bindTexture(webglType,webglTexture||emptyTextures[webglType]);boundTexture.type=webglType;boundTexture.texture=webglTexture;}}function compressedTexImage2D(){try{gl.compressedTexImage2D.apply(gl,arguments);}catch(error){console.error('THREE.WebGLState:',error);}}function texImage2D(){try{gl.texImage2D.apply(gl,arguments);}catch(error){console.error('THREE.WebGLState:',error);}}function texImage3D(){try{gl.texImage3D.apply(gl,arguments);}catch(error){console.error('THREE.WebGLState:',error);}}//
function scissor(scissor){if(currentScissor.equals(scissor)===false){gl.scissor(scissor.x,scissor.y,scissor.z,scissor.w);currentScissor.copy(scissor);}}function viewport(viewport){if(currentViewport.equals(viewport)===false){gl.viewport(viewport.x,viewport.y,viewport.z,viewport.w);currentViewport.copy(viewport);}}//
function reset(){for(var i=0;i<enabledAttributes.length;i++){if(enabledAttributes[i]===1){gl.disableVertexAttribArray(i);enabledAttributes[i]=0;}}enabledCapabilities={};compressedTextureFormats=null;currentTextureSlot=null;currentBoundTextures={};currentProgram=null;currentBlending=null;currentFlipSided=null;currentCullFace=null;colorBuffer.reset();depthBuffer.reset();stencilBuffer.reset();}return{buffers:{color:colorBuffer,depth:depthBuffer,stencil:stencilBuffer},initAttributes:initAttributes,enableAttribute:enableAttribute,enableAttributeAndDivisor:enableAttributeAndDivisor,disableUnusedAttributes:disableUnusedAttributes,enable:enable,disable:disable,getCompressedTextureFormats:getCompressedTextureFormats,useProgram:useProgram,setBlending:setBlending,setMaterial:setMaterial,setFlipSided:setFlipSided,setCullFace:setCullFace,setLineWidth:setLineWidth,setPolygonOffset:setPolygonOffset,setScissorTest:setScissorTest,activeTexture:activeTexture,bindTexture:bindTexture,compressedTexImage2D:compressedTexImage2D,texImage2D:texImage2D,texImage3D:texImage3D,scissor:scissor,viewport:viewport,reset:reset};}/**
	 * @author mrdoob / http://mrdoob.com/
	 */function WebGLTextures(_gl,extensions,state,properties,capabilities,utils,info){var _videoTextures={};var _canvas;//
function clampToMaxSize(image,maxSize){if(image.width>maxSize||image.height>maxSize){if('data'in image){console.warn('THREE.WebGLRenderer: image in DataTexture is too big ('+image.width+'x'+image.height+').');return;}// Warning: Scaling through the canvas will only work with images that use
// premultiplied alpha.
var scale=maxSize/Math.max(image.width,image.height);var canvas=document.createElementNS('http://www.w3.org/1999/xhtml','canvas');canvas.width=Math.floor(image.width*scale);canvas.height=Math.floor(image.height*scale);var context=canvas.getContext('2d');context.drawImage(image,0,0,image.width,image.height,0,0,canvas.width,canvas.height);console.warn('THREE.WebGLRenderer: image is too big ('+image.width+'x'+image.height+'). Resized to '+canvas.width+'x'+canvas.height);return canvas;}return image;}function isPowerOfTwo(image){return _Math.isPowerOfTwo(image.width)&&_Math.isPowerOfTwo(image.height);}function makePowerOfTwo(image){if(image instanceof HTMLImageElement||image instanceof HTMLCanvasElement||image instanceof ImageBitmap){if(_canvas===undefined)_canvas=document.createElementNS('http://www.w3.org/1999/xhtml','canvas');_canvas.width=_Math.floorPowerOfTwo(image.width);_canvas.height=_Math.floorPowerOfTwo(image.height);var context=_canvas.getContext('2d');context.drawImage(image,0,0,_canvas.width,_canvas.height);console.warn('THREE.WebGLRenderer: image is not power of two ('+image.width+'x'+image.height+'). Resized to '+_canvas.width+'x'+_canvas.height);return _canvas;}return image;}function textureNeedsPowerOfTwo(texture){if(capabilities.isWebGL2)return false;return texture.wrapS!==ClampToEdgeWrapping||texture.wrapT!==ClampToEdgeWrapping||texture.minFilter!==NearestFilter&&texture.minFilter!==LinearFilter;}function textureNeedsGenerateMipmaps(texture,isPowerOfTwo){return texture.generateMipmaps&&isPowerOfTwo&&texture.minFilter!==NearestFilter&&texture.minFilter!==LinearFilter;}function generateMipmap(target,texture,width,height){_gl.generateMipmap(target);var textureProperties=properties.get(texture);// Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11
textureProperties.__maxMipLevel=Math.log(Math.max(width,height))*Math.LOG2E;}function getInternalFormat(glFormat,glType){if(!capabilities.isWebGL2)return glFormat;if(glFormat===_gl.RED){if(glType===_gl.FLOAT)return _gl.R32F;if(glType===_gl.HALF_FLOAT)return _gl.R16F;if(glType===_gl.UNSIGNED_BYTE)return _gl.R8;}if(glFormat===_gl.RGB){if(glType===_gl.FLOAT)return _gl.RGB32F;if(glType===_gl.HALF_FLOAT)return _gl.RGB16F;if(glType===_gl.UNSIGNED_BYTE)return _gl.RGB8;}if(glFormat===_gl.RGBA){if(glType===_gl.FLOAT)return _gl.RGBA32F;if(glType===_gl.HALF_FLOAT)return _gl.RGBA16F;if(glType===_gl.UNSIGNED_BYTE)return _gl.RGBA8;}return glFormat;}// Fallback filters for non-power-of-2 textures
function filterFallback(f){if(f===NearestFilter||f===NearestMipMapNearestFilter||f===NearestMipMapLinearFilter){return _gl.NEAREST;}return _gl.LINEAR;}//
function onTextureDispose(event){var texture=event.target;texture.removeEventListener('dispose',onTextureDispose);deallocateTexture(texture);if(texture.isVideoTexture){delete _videoTextures[texture.id];}info.memory.textures--;}function onRenderTargetDispose(event){var renderTarget=event.target;renderTarget.removeEventListener('dispose',onRenderTargetDispose);deallocateRenderTarget(renderTarget);info.memory.textures--;}//
function deallocateTexture(texture){var textureProperties=properties.get(texture);if(texture.image&&textureProperties.__image__webglTextureCube){// cube texture
_gl.deleteTexture(textureProperties.__image__webglTextureCube);}else{// 2D texture
if(textureProperties.__webglInit===undefined)return;_gl.deleteTexture(textureProperties.__webglTexture);}// remove all webgl properties
properties.remove(texture);}function deallocateRenderTarget(renderTarget){var renderTargetProperties=properties.get(renderTarget);var textureProperties=properties.get(renderTarget.texture);if(!renderTarget)return;if(textureProperties.__webglTexture!==undefined){_gl.deleteTexture(textureProperties.__webglTexture);}if(renderTarget.depthTexture){renderTarget.depthTexture.dispose();}if(renderTarget.isWebGLRenderTargetCube){for(var i=0;i<6;i++){_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);if(renderTargetProperties.__webglDepthbuffer)_gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);}}else{_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);if(renderTargetProperties.__webglDepthbuffer)_gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);}properties.remove(renderTarget.texture);properties.remove(renderTarget);}//
function setTexture2D(texture,slot){var textureProperties=properties.get(texture);if(texture.isVideoTexture)updateVideoTexture(texture);if(texture.version>0&&textureProperties.__version!==texture.version){var image=texture.image;if(image===undefined){console.warn('THREE.WebGLRenderer: Texture marked for update but image is undefined');}else if(image.complete===false){console.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete');}else{uploadTexture(textureProperties,texture,slot);return;}}state.activeTexture(_gl.TEXTURE0+slot);state.bindTexture(_gl.TEXTURE_2D,textureProperties.__webglTexture);}function setTexture3D(texture,slot){var textureProperties=properties.get(texture);if(texture.version>0&&textureProperties.__version!==texture.version){uploadTexture(textureProperties,texture,slot);return;}state.activeTexture(_gl.TEXTURE0+slot);state.bindTexture(_gl.TEXTURE_3D,textureProperties.__webglTexture);}function setTextureCube(texture,slot){var textureProperties=properties.get(texture);if(texture.image.length===6){if(texture.version>0&&textureProperties.__version!==texture.version){if(!textureProperties.__image__webglTextureCube){texture.addEventListener('dispose',onTextureDispose);textureProperties.__image__webglTextureCube=_gl.createTexture();info.memory.textures++;}state.activeTexture(_gl.TEXTURE0+slot);state.bindTexture(_gl.TEXTURE_CUBE_MAP,textureProperties.__image__webglTextureCube);_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL,texture.flipY);var isCompressed=texture&&texture.isCompressedTexture;var isDataTexture=texture.image[0]&&texture.image[0].isDataTexture;var cubeImage=[];for(var i=0;i<6;i++){if(!isCompressed&&!isDataTexture){cubeImage[i]=clampToMaxSize(texture.image[i],capabilities.maxCubemapSize);}else{cubeImage[i]=isDataTexture?texture.image[i].image:texture.image[i];}}var image=cubeImage[0],isPowerOfTwoImage=isPowerOfTwo(image),glFormat=utils.convert(texture.format),glType=utils.convert(texture.type),glInternalFormat=getInternalFormat(glFormat,glType);setTextureParameters(_gl.TEXTURE_CUBE_MAP,texture,isPowerOfTwoImage);for(var i=0;i<6;i++){if(!isCompressed){if(isDataTexture){state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X+i,0,glInternalFormat,cubeImage[i].width,cubeImage[i].height,0,glFormat,glType,cubeImage[i].data);}else{state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X+i,0,glInternalFormat,glFormat,glType,cubeImage[i]);}}else{var mipmap,mipmaps=cubeImage[i].mipmaps;for(var j=0,jl=mipmaps.length;j<jl;j++){mipmap=mipmaps[j];if(texture.format!==RGBAFormat&&texture.format!==RGBFormat){if(state.getCompressedTextureFormats().indexOf(glFormat)>-1){state.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X+i,j,glInternalFormat,mipmap.width,mipmap.height,0,mipmap.data);}else{console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()');}}else{state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X+i,j,glInternalFormat,mipmap.width,mipmap.height,0,glFormat,glType,mipmap.data);}}}}if(!isCompressed){textureProperties.__maxMipLevel=0;}else{textureProperties.__maxMipLevel=mipmaps.length-1;}if(textureNeedsGenerateMipmaps(texture,isPowerOfTwoImage)){// We assume images for cube map have the same size.
generateMipmap(_gl.TEXTURE_CUBE_MAP,texture,image.width,image.height);}textureProperties.__version=texture.version;if(texture.onUpdate)texture.onUpdate(texture);}else{state.activeTexture(_gl.TEXTURE0+slot);state.bindTexture(_gl.TEXTURE_CUBE_MAP,textureProperties.__image__webglTextureCube);}}}function setTextureCubeDynamic(texture,slot){state.activeTexture(_gl.TEXTURE0+slot);state.bindTexture(_gl.TEXTURE_CUBE_MAP,properties.get(texture).__webglTexture);}function setTextureParameters(textureType,texture,isPowerOfTwoImage){var extension;if(isPowerOfTwoImage){_gl.texParameteri(textureType,_gl.TEXTURE_WRAP_S,utils.convert(texture.wrapS));_gl.texParameteri(textureType,_gl.TEXTURE_WRAP_T,utils.convert(texture.wrapT));_gl.texParameteri(textureType,_gl.TEXTURE_MAG_FILTER,utils.convert(texture.magFilter));_gl.texParameteri(textureType,_gl.TEXTURE_MIN_FILTER,utils.convert(texture.minFilter));}else{_gl.texParameteri(textureType,_gl.TEXTURE_WRAP_S,_gl.CLAMP_TO_EDGE);_gl.texParameteri(textureType,_gl.TEXTURE_WRAP_T,_gl.CLAMP_TO_EDGE);if(texture.wrapS!==ClampToEdgeWrapping||texture.wrapT!==ClampToEdgeWrapping){console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.');}_gl.texParameteri(textureType,_gl.TEXTURE_MAG_FILTER,filterFallback(texture.magFilter));_gl.texParameteri(textureType,_gl.TEXTURE_MIN_FILTER,filterFallback(texture.minFilter));if(texture.minFilter!==NearestFilter&&texture.minFilter!==LinearFilter){console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.');}}extension=extensions.get('EXT_texture_filter_anisotropic');if(extension){if(texture.type===FloatType&&extensions.get('OES_texture_float_linear')===null)return;if(texture.type===HalfFloatType&&(capabilities.isWebGL2||extensions.get('OES_texture_half_float_linear'))===null)return;if(texture.anisotropy>1||properties.get(texture).__currentAnisotropy){_gl.texParameterf(textureType,extension.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(texture.anisotropy,capabilities.getMaxAnisotropy()));properties.get(texture).__currentAnisotropy=texture.anisotropy;}}}function uploadTexture(textureProperties,texture,slot){var textureType;if(texture.isTexture3D){textureType=_gl.TEXTURE_3D;}else{textureType=_gl.TEXTURE_2D;}if(textureProperties.__webglInit===undefined){textureProperties.__webglInit=true;texture.addEventListener('dispose',onTextureDispose);textureProperties.__webglTexture=_gl.createTexture();info.memory.textures++;}state.activeTexture(_gl.TEXTURE0+slot);state.bindTexture(textureType,textureProperties.__webglTexture);_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL,texture.flipY);_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,texture.premultiplyAlpha);_gl.pixelStorei(_gl.UNPACK_ALIGNMENT,texture.unpackAlignment);var image=clampToMaxSize(texture.image,capabilities.maxTextureSize);if(textureNeedsPowerOfTwo(texture)&&isPowerOfTwo(image)===false){image=makePowerOfTwo(image);}var isPowerOfTwoImage=isPowerOfTwo(image),glFormat=utils.convert(texture.format),glType=utils.convert(texture.type),glInternalFormat=getInternalFormat(glFormat,glType);setTextureParameters(textureType,texture,isPowerOfTwoImage);var mipmap,mipmaps=texture.mipmaps;if(texture.isDepthTexture){// populate depth texture with dummy data
glInternalFormat=_gl.DEPTH_COMPONENT;if(texture.type===FloatType){if(!capabilities.isWebGL2)throw new Error('Float Depth Texture only supported in WebGL2.0');glInternalFormat=_gl.DEPTH_COMPONENT32F;}else if(capabilities.isWebGL2){// WebGL 2.0 requires signed internalformat for glTexImage2D
glInternalFormat=_gl.DEPTH_COMPONENT16;}if(texture.format===DepthFormat&&glInternalFormat===_gl.DEPTH_COMPONENT){// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
if(texture.type!==UnsignedShortType&&texture.type!==UnsignedIntType){console.warn('THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.');texture.type=UnsignedShortType;glType=utils.convert(texture.type);}}// Depth stencil textures need the DEPTH_STENCIL internal format
// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
if(texture.format===DepthStencilFormat){glInternalFormat=_gl.DEPTH_STENCIL;// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
if(texture.type!==UnsignedInt248Type){console.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.');texture.type=UnsignedInt248Type;glType=utils.convert(texture.type);}}state.texImage2D(_gl.TEXTURE_2D,0,glInternalFormat,image.width,image.height,0,glFormat,glType,null);}else if(texture.isDataTexture){// use manually created mipmaps if available
// if there are no manual mipmaps
// set 0 level mipmap and then use GL to generate other mipmap levels
if(mipmaps.length>0&&isPowerOfTwoImage){for(var i=0,il=mipmaps.length;i<il;i++){mipmap=mipmaps[i];state.texImage2D(_gl.TEXTURE_2D,i,glInternalFormat,mipmap.width,mipmap.height,0,glFormat,glType,mipmap.data);}texture.generateMipmaps=false;textureProperties.__maxMipLevel=mipmaps.length-1;}else{state.texImage2D(_gl.TEXTURE_2D,0,glInternalFormat,image.width,image.height,0,glFormat,glType,image.data);textureProperties.__maxMipLevel=0;}}else if(texture.isCompressedTexture){for(var i=0,il=mipmaps.length;i<il;i++){mipmap=mipmaps[i];if(texture.format!==RGBAFormat&&texture.format!==RGBFormat){if(state.getCompressedTextureFormats().indexOf(glFormat)>-1){state.compressedTexImage2D(_gl.TEXTURE_2D,i,glInternalFormat,mipmap.width,mipmap.height,0,mipmap.data);}else{console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');}}else{state.texImage2D(_gl.TEXTURE_2D,i,glInternalFormat,mipmap.width,mipmap.height,0,glFormat,glType,mipmap.data);}}textureProperties.__maxMipLevel=mipmaps.length-1;}else if(texture.isTexture3D){state.texImage3D(_gl.TEXTURE_3D,0,glInternalFormat,image.width,image.height,image.depth,0,glFormat,glType,image.data);textureProperties.__maxMipLevel=0;}else{// regular Texture (image, video, canvas)
// use manually created mipmaps if available
// if there are no manual mipmaps
// set 0 level mipmap and then use GL to generate other mipmap levels
if(mipmaps.length>0&&isPowerOfTwoImage){for(var i=0,il=mipmaps.length;i<il;i++){mipmap=mipmaps[i];state.texImage2D(_gl.TEXTURE_2D,i,glInternalFormat,glFormat,glType,mipmap);}texture.generateMipmaps=false;textureProperties.__maxMipLevel=mipmaps.length-1;}else{state.texImage2D(_gl.TEXTURE_2D,0,glInternalFormat,glFormat,glType,image);textureProperties.__maxMipLevel=0;}}if(textureNeedsGenerateMipmaps(texture,isPowerOfTwoImage)){generateMipmap(_gl.TEXTURE_2D,texture,image.width,image.height);}textureProperties.__version=texture.version;if(texture.onUpdate)texture.onUpdate(texture);}// Render targets
// Setup storage for target texture and bind it to correct framebuffer
function setupFrameBufferTexture(framebuffer,renderTarget,attachment,textureTarget){var glFormat=utils.convert(renderTarget.texture.format);var glType=utils.convert(renderTarget.texture.type);var glInternalFormat=getInternalFormat(glFormat,glType);state.texImage2D(textureTarget,0,glInternalFormat,renderTarget.width,renderTarget.height,0,glFormat,glType,null);_gl.bindFramebuffer(_gl.FRAMEBUFFER,framebuffer);_gl.framebufferTexture2D(_gl.FRAMEBUFFER,attachment,textureTarget,properties.get(renderTarget.texture).__webglTexture,0);_gl.bindFramebuffer(_gl.FRAMEBUFFER,null);}// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
function setupRenderBufferStorage(renderbuffer,renderTarget){_gl.bindRenderbuffer(_gl.RENDERBUFFER,renderbuffer);if(renderTarget.depthBuffer&&!renderTarget.stencilBuffer){_gl.renderbufferStorage(_gl.RENDERBUFFER,_gl.DEPTH_COMPONENT16,renderTarget.width,renderTarget.height);_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER,_gl.DEPTH_ATTACHMENT,_gl.RENDERBUFFER,renderbuffer);}else if(renderTarget.depthBuffer&&renderTarget.stencilBuffer){_gl.renderbufferStorage(_gl.RENDERBUFFER,_gl.DEPTH_STENCIL,renderTarget.width,renderTarget.height);_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER,_gl.DEPTH_STENCIL_ATTACHMENT,_gl.RENDERBUFFER,renderbuffer);}else{// FIXME: We don't support !depth !stencil
_gl.renderbufferStorage(_gl.RENDERBUFFER,_gl.RGBA4,renderTarget.width,renderTarget.height);}_gl.bindRenderbuffer(_gl.RENDERBUFFER,null);}// Setup resources for a Depth Texture for a FBO (needs an extension)
function setupDepthTexture(framebuffer,renderTarget){var isCube=renderTarget&&renderTarget.isWebGLRenderTargetCube;if(isCube)throw new Error('Depth Texture with cube render targets is not supported');_gl.bindFramebuffer(_gl.FRAMEBUFFER,framebuffer);if(!(renderTarget.depthTexture&&renderTarget.depthTexture.isDepthTexture)){throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');}// upload an empty depth texture with framebuffer size
if(!properties.get(renderTarget.depthTexture).__webglTexture||renderTarget.depthTexture.image.width!==renderTarget.width||renderTarget.depthTexture.image.height!==renderTarget.height){renderTarget.depthTexture.image.width=renderTarget.width;renderTarget.depthTexture.image.height=renderTarget.height;renderTarget.depthTexture.needsUpdate=true;}setTexture2D(renderTarget.depthTexture,0);var webglDepthTexture=properties.get(renderTarget.depthTexture).__webglTexture;if(renderTarget.depthTexture.format===DepthFormat){_gl.framebufferTexture2D(_gl.FRAMEBUFFER,_gl.DEPTH_ATTACHMENT,_gl.TEXTURE_2D,webglDepthTexture,0);}else if(renderTarget.depthTexture.format===DepthStencilFormat){_gl.framebufferTexture2D(_gl.FRAMEBUFFER,_gl.DEPTH_STENCIL_ATTACHMENT,_gl.TEXTURE_2D,webglDepthTexture,0);}else{throw new Error('Unknown depthTexture format');}}// Setup GL resources for a non-texture depth buffer
function setupDepthRenderbuffer(renderTarget){var renderTargetProperties=properties.get(renderTarget);var isCube=renderTarget.isWebGLRenderTargetCube===true;if(renderTarget.depthTexture){if(isCube)throw new Error('target.depthTexture not supported in Cube render targets');setupDepthTexture(renderTargetProperties.__webglFramebuffer,renderTarget);}else{if(isCube){renderTargetProperties.__webglDepthbuffer=[];for(var i=0;i<6;i++){_gl.bindFramebuffer(_gl.FRAMEBUFFER,renderTargetProperties.__webglFramebuffer[i]);renderTargetProperties.__webglDepthbuffer[i]=_gl.createRenderbuffer();setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i],renderTarget);}}else{_gl.bindFramebuffer(_gl.FRAMEBUFFER,renderTargetProperties.__webglFramebuffer);renderTargetProperties.__webglDepthbuffer=_gl.createRenderbuffer();setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer,renderTarget);}}_gl.bindFramebuffer(_gl.FRAMEBUFFER,null);}// Set up GL resources for the render target
function setupRenderTarget(renderTarget){var renderTargetProperties=properties.get(renderTarget);var textureProperties=properties.get(renderTarget.texture);renderTarget.addEventListener('dispose',onRenderTargetDispose);textureProperties.__webglTexture=_gl.createTexture();info.memory.textures++;var isCube=renderTarget.isWebGLRenderTargetCube===true;var isTargetPowerOfTwo=isPowerOfTwo(renderTarget);// Setup framebuffer
if(isCube){renderTargetProperties.__webglFramebuffer=[];for(var i=0;i<6;i++){renderTargetProperties.__webglFramebuffer[i]=_gl.createFramebuffer();}}else{renderTargetProperties.__webglFramebuffer=_gl.createFramebuffer();}// Setup color buffer
if(isCube){state.bindTexture(_gl.TEXTURE_CUBE_MAP,textureProperties.__webglTexture);setTextureParameters(_gl.TEXTURE_CUBE_MAP,renderTarget.texture,isTargetPowerOfTwo);for(var i=0;i<6;i++){setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i],renderTarget,_gl.COLOR_ATTACHMENT0,_gl.TEXTURE_CUBE_MAP_POSITIVE_X+i);}if(textureNeedsGenerateMipmaps(renderTarget.texture,isTargetPowerOfTwo)){generateMipmap(_gl.TEXTURE_CUBE_MAP,renderTarget.texture,renderTarget.width,renderTarget.height);}state.bindTexture(_gl.TEXTURE_CUBE_MAP,null);}else{state.bindTexture(_gl.TEXTURE_2D,textureProperties.__webglTexture);setTextureParameters(_gl.TEXTURE_2D,renderTarget.texture,isTargetPowerOfTwo);setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer,renderTarget,_gl.COLOR_ATTACHMENT0,_gl.TEXTURE_2D);if(textureNeedsGenerateMipmaps(renderTarget.texture,isTargetPowerOfTwo)){generateMipmap(_gl.TEXTURE_2D,renderTarget.texture,renderTarget.width,renderTarget.height);}state.bindTexture(_gl.TEXTURE_2D,null);}// Setup depth and stencil buffers
if(renderTarget.depthBuffer){setupDepthRenderbuffer(renderTarget);}}function updateRenderTargetMipmap(renderTarget){var texture=renderTarget.texture;var isTargetPowerOfTwo=isPowerOfTwo(renderTarget);if(textureNeedsGenerateMipmaps(texture,isTargetPowerOfTwo)){var target=renderTarget.isWebGLRenderTargetCube?_gl.TEXTURE_CUBE_MAP:_gl.TEXTURE_2D;var webglTexture=properties.get(texture).__webglTexture;state.bindTexture(target,webglTexture);generateMipmap(target,texture,renderTarget.width,renderTarget.height);state.bindTexture(target,null);}}function updateVideoTexture(texture){var id=texture.id;var frame=info.render.frame;// Check the last frame we updated the VideoTexture
if(_videoTextures[id]!==frame){_videoTextures[id]=frame;texture.update();}}this.setTexture2D=setTexture2D;this.setTexture3D=setTexture3D;this.setTextureCube=setTextureCube;this.setTextureCubeDynamic=setTextureCubeDynamic;this.setupRenderTarget=setupRenderTarget;this.updateRenderTargetMipmap=updateRenderTargetMipmap;}/**
	 * @author thespite / http://www.twitter.com/thespite
	 */function WebGLUtils(gl,extensions,capabilities){function convert(p){var extension;if(p===RepeatWrapping)return gl.REPEAT;if(p===ClampToEdgeWrapping)return gl.CLAMP_TO_EDGE;if(p===MirroredRepeatWrapping)return gl.MIRRORED_REPEAT;if(p===NearestFilter)return gl.NEAREST;if(p===NearestMipMapNearestFilter)return gl.NEAREST_MIPMAP_NEAREST;if(p===NearestMipMapLinearFilter)return gl.NEAREST_MIPMAP_LINEAR;if(p===LinearFilter)return gl.LINEAR;if(p===LinearMipMapNearestFilter)return gl.LINEAR_MIPMAP_NEAREST;if(p===LinearMipMapLinearFilter)return gl.LINEAR_MIPMAP_LINEAR;if(p===UnsignedByteType)return gl.UNSIGNED_BYTE;if(p===UnsignedShort4444Type)return gl.UNSIGNED_SHORT_4_4_4_4;if(p===UnsignedShort5551Type)return gl.UNSIGNED_SHORT_5_5_5_1;if(p===UnsignedShort565Type)return gl.UNSIGNED_SHORT_5_6_5;if(p===ByteType)return gl.BYTE;if(p===ShortType)return gl.SHORT;if(p===UnsignedShortType)return gl.UNSIGNED_SHORT;if(p===IntType)return gl.INT;if(p===UnsignedIntType)return gl.UNSIGNED_INT;if(p===FloatType)return gl.FLOAT;if(p===HalfFloatType){if(capabilities.isWebGL2)return gl.HALF_FLOAT;extension=extensions.get('OES_texture_half_float');if(extension!==null)return extension.HALF_FLOAT_OES;}if(p===AlphaFormat)return gl.ALPHA;if(p===RGBFormat)return gl.RGB;if(p===RGBAFormat)return gl.RGBA;if(p===LuminanceFormat)return gl.LUMINANCE;if(p===LuminanceAlphaFormat)return gl.LUMINANCE_ALPHA;if(p===DepthFormat)return gl.DEPTH_COMPONENT;if(p===DepthStencilFormat)return gl.DEPTH_STENCIL;if(p===RedFormat)return gl.RED;if(p===AddEquation)return gl.FUNC_ADD;if(p===SubtractEquation)return gl.FUNC_SUBTRACT;if(p===ReverseSubtractEquation)return gl.FUNC_REVERSE_SUBTRACT;if(p===ZeroFactor)return gl.ZERO;if(p===OneFactor)return gl.ONE;if(p===SrcColorFactor)return gl.SRC_COLOR;if(p===OneMinusSrcColorFactor)return gl.ONE_MINUS_SRC_COLOR;if(p===SrcAlphaFactor)return gl.SRC_ALPHA;if(p===OneMinusSrcAlphaFactor)return gl.ONE_MINUS_SRC_ALPHA;if(p===DstAlphaFactor)return gl.DST_ALPHA;if(p===OneMinusDstAlphaFactor)return gl.ONE_MINUS_DST_ALPHA;if(p===DstColorFactor)return gl.DST_COLOR;if(p===OneMinusDstColorFactor)return gl.ONE_MINUS_DST_COLOR;if(p===SrcAlphaSaturateFactor)return gl.SRC_ALPHA_SATURATE;if(p===RGB_S3TC_DXT1_Format||p===RGBA_S3TC_DXT1_Format||p===RGBA_S3TC_DXT3_Format||p===RGBA_S3TC_DXT5_Format){extension=extensions.get('WEBGL_compressed_texture_s3tc');if(extension!==null){if(p===RGB_S3TC_DXT1_Format)return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;if(p===RGBA_S3TC_DXT1_Format)return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(p===RGBA_S3TC_DXT3_Format)return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(p===RGBA_S3TC_DXT5_Format)return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;}}if(p===RGB_PVRTC_4BPPV1_Format||p===RGB_PVRTC_2BPPV1_Format||p===RGBA_PVRTC_4BPPV1_Format||p===RGBA_PVRTC_2BPPV1_Format){extension=extensions.get('WEBGL_compressed_texture_pvrtc');if(extension!==null){if(p===RGB_PVRTC_4BPPV1_Format)return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(p===RGB_PVRTC_2BPPV1_Format)return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(p===RGBA_PVRTC_4BPPV1_Format)return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(p===RGBA_PVRTC_2BPPV1_Format)return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;}}if(p===RGB_ETC1_Format){extension=extensions.get('WEBGL_compressed_texture_etc1');if(extension!==null)return extension.COMPRESSED_RGB_ETC1_WEBGL;}if(p===RGBA_ASTC_4x4_Format||p===RGBA_ASTC_5x4_Format||p===RGBA_ASTC_5x5_Format||p===RGBA_ASTC_6x5_Format||p===RGBA_ASTC_6x6_Format||p===RGBA_ASTC_8x5_Format||p===RGBA_ASTC_8x6_Format||p===RGBA_ASTC_8x8_Format||p===RGBA_ASTC_10x5_Format||p===RGBA_ASTC_10x6_Format||p===RGBA_ASTC_10x8_Format||p===RGBA_ASTC_10x10_Format||p===RGBA_ASTC_12x10_Format||p===RGBA_ASTC_12x12_Format){extension=extensions.get('WEBGL_compressed_texture_astc');if(extension!==null){return p;}}if(p===MinEquation||p===MaxEquation){if(capabilities.isWebGL2){if(p===MinEquation)return gl.MIN;if(p===MaxEquation)return gl.MAX;}extension=extensions.get('EXT_blend_minmax');if(extension!==null){if(p===MinEquation)return extension.MIN_EXT;if(p===MaxEquation)return extension.MAX_EXT;}}if(p===UnsignedInt248Type){if(capabilities.isWebGL2)return gl.UNSIGNED_INT_24_8;extension=extensions.get('WEBGL_depth_texture');if(extension!==null)return extension.UNSIGNED_INT_24_8_WEBGL;}return 0;}return{convert:convert};}/**
	 * @author mrdoob / http://mrdoob.com/
	 */function Group(){Object3D.call(this);this.type='Group';}Group.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Group,isGroup:true});/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author greggman / http://games.greggman.com/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author tschw
	 */function PerspectiveCamera(fov,aspect,near,far){Camera.call(this);this.type='PerspectiveCamera';this.fov=fov!==undefined?fov:50;this.zoom=1;this.near=near!==undefined?near:0.1;this.far=far!==undefined?far:2000;this.focus=10;this.aspect=aspect!==undefined?aspect:1;this.view=null;this.filmGauge=35;// width of the film (default in millimeters)
this.filmOffset=0;// horizontal film offset (same unit as gauge)
this.updateProjectionMatrix();}PerspectiveCamera.prototype=Object.assign(Object.create(Camera.prototype),{constructor:PerspectiveCamera,isPerspectiveCamera:true,copy:function copy(source,recursive){Camera.prototype.copy.call(this,source,recursive);this.fov=source.fov;this.zoom=source.zoom;this.near=source.near;this.far=source.far;this.focus=source.focus;this.aspect=source.aspect;this.view=source.view===null?null:Object.assign({},source.view);this.filmGauge=source.filmGauge;this.filmOffset=source.filmOffset;return this;},/**
		 * Sets the FOV by focal length in respect to the current .filmGauge.
		 *
		 * The default film gauge is 35, so that the focal length can be specified for
		 * a 35mm (full frame) camera.
		 *
		 * Values for focal length and film gauge must have the same unit.
		 */setFocalLength:function setFocalLength(focalLength){// see http://www.bobatkins.com/photography/technical/field_of_view.html
var vExtentSlope=0.5*this.getFilmHeight()/focalLength;this.fov=_Math.RAD2DEG*2*Math.atan(vExtentSlope);this.updateProjectionMatrix();},/**
		 * Calculates the focal length from the current .fov and .filmGauge.
		 */getFocalLength:function getFocalLength(){var vExtentSlope=Math.tan(_Math.DEG2RAD*0.5*this.fov);return 0.5*this.getFilmHeight()/vExtentSlope;},getEffectiveFOV:function getEffectiveFOV(){return _Math.RAD2DEG*2*Math.atan(Math.tan(_Math.DEG2RAD*0.5*this.fov)/this.zoom);},getFilmWidth:function getFilmWidth(){// film not completely covered in portrait format (aspect < 1)
return this.filmGauge*Math.min(this.aspect,1);},getFilmHeight:function getFilmHeight(){// film not completely covered in landscape format (aspect > 1)
return this.filmGauge/Math.max(this.aspect,1);},/**
		 * Sets an offset in a larger frustum. This is useful for multi-window or
		 * multi-monitor/multi-machine setups.
		 *
		 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
		 * the monitors are in grid like this
		 *
		 *   +---+---+---+
		 *   | A | B | C |
		 *   +---+---+---+
		 *   | D | E | F |
		 *   +---+---+---+
		 *
		 * then for each monitor you would call it like this
		 *
		 *   var w = 1920;
		 *   var h = 1080;
		 *   var fullWidth = w * 3;
		 *   var fullHeight = h * 2;
		 *
		 *   --A--
		 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
		 *   --B--
		 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
		 *   --C--
		 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
		 *   --D--
		 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
		 *   --E--
		 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
		 *   --F--
		 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
		 *
		 *   Note there is no reason monitors have to be the same size or in a grid.
		 */setViewOffset:function setViewOffset(fullWidth,fullHeight,x,y,width,height){this.aspect=fullWidth/fullHeight;if(this.view===null){this.view={enabled:true,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1};}this.view.enabled=true;this.view.fullWidth=fullWidth;this.view.fullHeight=fullHeight;this.view.offsetX=x;this.view.offsetY=y;this.view.width=width;this.view.height=height;this.updateProjectionMatrix();},clearViewOffset:function clearViewOffset(){if(this.view!==null){this.view.enabled=false;}this.updateProjectionMatrix();},updateProjectionMatrix:function updateProjectionMatrix(){var near=this.near,top=near*Math.tan(_Math.DEG2RAD*0.5*this.fov)/this.zoom,height=2*top,width=this.aspect*height,left=-0.5*width,view=this.view;if(this.view!==null&&this.view.enabled){var fullWidth=view.fullWidth,fullHeight=view.fullHeight;left+=view.offsetX*width/fullWidth;top-=view.offsetY*height/fullHeight;width*=view.width/fullWidth;height*=view.height/fullHeight;}var skew=this.filmOffset;if(skew!==0)left+=near*skew/this.getFilmWidth();this.projectionMatrix.makePerspective(left,left+width,top,top-height,near,this.far);this.projectionMatrixInverse.getInverse(this.projectionMatrix);},toJSON:function toJSON(meta){var data=Object3D.prototype.toJSON.call(this,meta);data.object.fov=this.fov;data.object.zoom=this.zoom;data.object.near=this.near;data.object.far=this.far;data.object.focus=this.focus;data.object.aspect=this.aspect;if(this.view!==null)data.object.view=Object.assign({},this.view);data.object.filmGauge=this.filmGauge;data.object.filmOffset=this.filmOffset;return data;}});/**
	 * @author mrdoob / http://mrdoob.com/
	 */function ArrayCamera(array){PerspectiveCamera.call(this);this.cameras=array||[];}ArrayCamera.prototype=Object.assign(Object.create(PerspectiveCamera.prototype),{constructor:ArrayCamera,isArrayCamera:true});/**
	 * @author mrdoob / http://mrdoob.com/
	 */function WebVRManager(renderer){var scope=this;var device=null;var frameData=null;var poseTarget=null;var controllers=[];var standingMatrix=new Matrix4();var standingMatrixInverse=new Matrix4();var frameOfReferenceType='stage';if(typeof window!=='undefined'&&'VRFrameData'in window){frameData=new window.VRFrameData();window.addEventListener('vrdisplaypresentchange',onVRDisplayPresentChange,false);}var matrixWorldInverse=new Matrix4();var tempQuaternion=new Quaternion();var tempPosition=new Vector3();var cameraL=new PerspectiveCamera();cameraL.bounds=new Vector4(0.0,0.0,0.5,1.0);cameraL.layers.enable(1);var cameraR=new PerspectiveCamera();cameraR.bounds=new Vector4(0.5,0.0,0.5,1.0);cameraR.layers.enable(2);var cameraVR=new ArrayCamera([cameraL,cameraR]);cameraVR.layers.enable(1);cameraVR.layers.enable(2);//
function isPresenting(){return device!==null&&device.isPresenting===true;}var currentSize,currentPixelRatio;function onVRDisplayPresentChange(){if(isPresenting()){var eyeParameters=device.getEyeParameters('left');var renderWidth=eyeParameters.renderWidth;var renderHeight=eyeParameters.renderHeight;currentPixelRatio=renderer.getPixelRatio();currentSize=renderer.getSize();renderer.setDrawingBufferSize(renderWidth*2,renderHeight,1);animation.start();}else{if(scope.enabled){renderer.setDrawingBufferSize(currentSize.width,currentSize.height,currentPixelRatio);}animation.stop();}}//
var triggers=[];function findGamepad(id){var gamepads=navigator.getGamepads&&navigator.getGamepads();for(var i=0,j=0,l=gamepads.length;i<l;i++){var gamepad=gamepads[i];if(gamepad&&(gamepad.id==='Daydream Controller'||gamepad.id==='Gear VR Controller'||gamepad.id==='Oculus Go Controller'||gamepad.id==='OpenVR Gamepad'||gamepad.id.startsWith('Oculus Touch')||gamepad.id.startsWith('Spatial Controller'))){if(j===id)return gamepad;j++;}}}function updateControllers(){for(var i=0;i<controllers.length;i++){var controller=controllers[i];var gamepad=findGamepad(i);if(gamepad!==undefined&&gamepad.pose!==undefined){if(gamepad.pose===null)return;//  Pose
var pose=gamepad.pose;if(pose.hasPosition===false)controller.position.set(0.2,-0.6,-0.05);if(pose.position!==null)controller.position.fromArray(pose.position);if(pose.orientation!==null)controller.quaternion.fromArray(pose.orientation);controller.matrix.compose(controller.position,controller.quaternion,controller.scale);controller.matrix.premultiply(standingMatrix);controller.matrix.decompose(controller.position,controller.quaternion,controller.scale);controller.matrixWorldNeedsUpdate=true;controller.visible=true;//  Trigger
var buttonId=gamepad.id==='Daydream Controller'?0:1;if(triggers[i]!==gamepad.buttons[buttonId].pressed){triggers[i]=gamepad.buttons[buttonId].pressed;if(triggers[i]===true){controller.dispatchEvent({type:'selectstart'});}else{controller.dispatchEvent({type:'selectend'});controller.dispatchEvent({type:'select'});}}}else{controller.visible=false;}}}//
this.enabled=false;this.getController=function(id){var controller=controllers[id];if(controller===undefined){controller=new Group();controller.matrixAutoUpdate=false;controller.visible=false;controllers[id]=controller;}return controller;};this.getDevice=function(){return device;};this.setDevice=function(value){if(value!==undefined)device=value;animation.setContext(value);};this.setFrameOfReferenceType=function(value){frameOfReferenceType=value;};this.setPoseTarget=function(object){if(object!==undefined)poseTarget=object;};this.getCamera=function(camera){var userHeight=frameOfReferenceType==='stage'?1.6:0;if(device===null){camera.position.set(0,userHeight,0);return camera;}device.depthNear=camera.near;device.depthFar=camera.far;device.getFrameData(frameData);//
if(frameOfReferenceType==='stage'){var stageParameters=device.stageParameters;if(stageParameters){standingMatrix.fromArray(stageParameters.sittingToStandingTransform);}else{standingMatrix.makeTranslation(0,userHeight,0);}}var pose=frameData.pose;var poseObject=poseTarget!==null?poseTarget:camera;// We want to manipulate poseObject by its position and quaternion components since users may rely on them.
poseObject.matrix.copy(standingMatrix);poseObject.matrix.decompose(poseObject.position,poseObject.quaternion,poseObject.scale);if(pose.orientation!==null){tempQuaternion.fromArray(pose.orientation);poseObject.quaternion.multiply(tempQuaternion);}if(pose.position!==null){tempQuaternion.setFromRotationMatrix(standingMatrix);tempPosition.fromArray(pose.position);tempPosition.applyQuaternion(tempQuaternion);poseObject.position.add(tempPosition);}poseObject.updateMatrixWorld();if(device.isPresenting===false)return camera;//
cameraL.near=camera.near;cameraR.near=camera.near;cameraL.far=camera.far;cameraR.far=camera.far;cameraVR.matrixWorld.copy(camera.matrixWorld);cameraVR.matrixWorldInverse.copy(camera.matrixWorldInverse);cameraL.matrixWorldInverse.fromArray(frameData.leftViewMatrix);cameraR.matrixWorldInverse.fromArray(frameData.rightViewMatrix);// TODO (mrdoob) Double check this code
standingMatrixInverse.getInverse(standingMatrix);if(frameOfReferenceType==='stage'){cameraL.matrixWorldInverse.multiply(standingMatrixInverse);cameraR.matrixWorldInverse.multiply(standingMatrixInverse);}var parent=poseObject.parent;if(parent!==null){matrixWorldInverse.getInverse(parent.matrixWorld);cameraL.matrixWorldInverse.multiply(matrixWorldInverse);cameraR.matrixWorldInverse.multiply(matrixWorldInverse);}// envMap and Mirror needs camera.matrixWorld
cameraL.matrixWorld.getInverse(cameraL.matrixWorldInverse);cameraR.matrixWorld.getInverse(cameraR.matrixWorldInverse);cameraL.projectionMatrix.fromArray(frameData.leftProjectionMatrix);cameraR.projectionMatrix.fromArray(frameData.rightProjectionMatrix);// HACK (mrdoob)
// https://github.com/w3c/webvr/issues/203
cameraVR.projectionMatrix.copy(cameraL.projectionMatrix);//
var layers=device.getLayers();if(layers.length){var layer=layers[0];if(layer.leftBounds!==null&&layer.leftBounds.length===4){cameraL.bounds.fromArray(layer.leftBounds);}if(layer.rightBounds!==null&&layer.rightBounds.length===4){cameraR.bounds.fromArray(layer.rightBounds);}}updateControllers();return cameraVR;};this.getStandingMatrix=function(){return standingMatrix;};this.isPresenting=isPresenting;// Animation Loop
var animation=new WebGLAnimation();this.setAnimationLoop=function(callback){animation.setAnimationLoop(callback);};this.submitFrame=function(){if(isPresenting())device.submitFrame();};this.dispose=function(){if(typeof window!=='undefined'){window.removeEventListener('vrdisplaypresentchange',onVRDisplayPresentChange);}};}/**
	 * @author mrdoob / http://mrdoob.com/
	 */function WebXRManager(renderer){var gl=renderer.context;var device=null;var session=null;var frameOfReference=null;var frameOfReferenceType='stage';var pose=null;var controllers=[];var inputSources=[];function isPresenting(){return session!==null&&frameOfReference!==null;}//
var cameraL=new PerspectiveCamera();cameraL.layers.enable(1);cameraL.viewport=new Vector4();var cameraR=new PerspectiveCamera();cameraR.layers.enable(2);cameraR.viewport=new Vector4();var cameraVR=new ArrayCamera([cameraL,cameraR]);cameraVR.layers.enable(1);cameraVR.layers.enable(2);//
this.enabled=false;this.getController=function(id){var controller=controllers[id];if(controller===undefined){controller=new Group();controller.matrixAutoUpdate=false;controller.visible=false;controllers[id]=controller;}return controller;};this.getDevice=function(){return device;};this.setDevice=function(value){if(value!==undefined)device=value;if(value instanceof XRDevice)gl.setCompatibleXRDevice(value);};//
function onSessionEvent(event){var controller=controllers[inputSources.indexOf(event.inputSource)];if(controller)controller.dispatchEvent({type:event.type});}function onSessionEnd(){renderer.setFramebuffer(null);animation.stop();}this.setFrameOfReferenceType=function(value){frameOfReferenceType=value;};this.setSession=function(value){session=value;if(session!==null){session.addEventListener('select',onSessionEvent);session.addEventListener('selectstart',onSessionEvent);session.addEventListener('selectend',onSessionEvent);session.addEventListener('end',onSessionEnd);session.baseLayer=new XRWebGLLayer(session,gl);session.requestFrameOfReference(frameOfReferenceType).then(function(value){frameOfReference=value;renderer.setFramebuffer(session.baseLayer.framebuffer);animation.setContext(session);animation.start();});//
inputSources=session.getInputSources();session.addEventListener('inputsourceschange',function(){inputSources=session.getInputSources();console.log(inputSources);});}};function updateCamera(camera,parent){if(parent===null){camera.matrixWorld.copy(camera.matrix);}else{camera.matrixWorld.multiplyMatrices(parent.matrixWorld,camera.matrix);}camera.matrixWorldInverse.getInverse(camera.matrixWorld);}this.getCamera=function(camera){if(isPresenting()){var parent=camera.parent;var cameras=cameraVR.cameras;// apply camera.parent to cameraVR
updateCamera(cameraVR,parent);for(var i=0;i<cameras.length;i++){updateCamera(cameras[i],parent);}// update camera and its children
camera.matrixWorld.copy(cameraVR.matrixWorld);var children=camera.children;for(var i=0,l=children.length;i<l;i++){children[i].updateMatrixWorld(true);}return cameraVR;}return camera;};this.isPresenting=isPresenting;// Animation Loop
var onAnimationFrameCallback=null;function onAnimationFrame(time,frame){pose=frame.getDevicePose(frameOfReference);if(pose!==null){var layer=session.baseLayer;var views=frame.views;for(var i=0;i<views.length;i++){var view=views[i];var viewport=layer.getViewport(view);var viewMatrix=pose.getViewMatrix(view);var camera=cameraVR.cameras[i];camera.matrix.fromArray(viewMatrix).getInverse(camera.matrix);camera.projectionMatrix.fromArray(view.projectionMatrix);camera.viewport.set(viewport.x,viewport.y,viewport.width,viewport.height);if(i===0){cameraVR.matrix.copy(camera.matrix);// HACK (mrdoob)
// https://github.com/w3c/webvr/issues/203
cameraVR.projectionMatrix.copy(camera.projectionMatrix);}}}//
for(var i=0;i<controllers.length;i++){var controller=controllers[i];var inputSource=inputSources[i];if(inputSource){var inputPose=frame.getInputPose(inputSource,frameOfReference);if(inputPose!==null){if('targetRay'in inputPose){controller.matrix.elements=inputPose.targetRay.transformMatrix;}else if('pointerMatrix'in inputPose){// DEPRECATED
controller.matrix.elements=inputPose.pointerMatrix;}controller.matrix.decompose(controller.position,controller.rotation,controller.scale);controller.visible=true;continue;}}controller.visible=false;}if(onAnimationFrameCallback)onAnimationFrameCallback(time);}var animation=new WebGLAnimation();animation.setAnimationLoop(onAnimationFrame);this.setAnimationLoop=function(callback){onAnimationFrameCallback=callback;};this.dispose=function(){};// DEPRECATED
this.getStandingMatrix=function(){console.warn('THREE.WebXRManager: getStandingMatrix() is no longer needed.');return new THREE.Matrix4();};this.submitFrame=function(){};}/**
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author szimek / https://github.com/szimek/
	 * @author tschw
	 */function WebGLRenderer(parameters){console.log('THREE.WebGLRenderer',REVISION);parameters=parameters||{};var _canvas=parameters.canvas!==undefined?parameters.canvas:document.createElementNS('http://www.w3.org/1999/xhtml','canvas'),_context=parameters.context!==undefined?parameters.context:null,_alpha=parameters.alpha!==undefined?parameters.alpha:false,_depth=parameters.depth!==undefined?parameters.depth:true,_stencil=parameters.stencil!==undefined?parameters.stencil:true,_antialias=parameters.antialias!==undefined?parameters.antialias:false,_premultipliedAlpha=parameters.premultipliedAlpha!==undefined?parameters.premultipliedAlpha:true,_preserveDrawingBuffer=parameters.preserveDrawingBuffer!==undefined?parameters.preserveDrawingBuffer:false,_powerPreference=parameters.powerPreference!==undefined?parameters.powerPreference:'default';var currentRenderList=null;var currentRenderState=null;// public properties
this.domElement=_canvas;this.context=null;// clearing
this.autoClear=true;this.autoClearColor=true;this.autoClearDepth=true;this.autoClearStencil=true;// scene graph
this.sortObjects=true;// user-defined clipping
this.clippingPlanes=[];this.localClippingEnabled=false;// physically based shading
this.gammaFactor=2.0;// for backwards compatibility
this.gammaInput=false;this.gammaOutput=false;// physical lights
this.physicallyCorrectLights=false;// tone mapping
this.toneMapping=LinearToneMapping;this.toneMappingExposure=1.0;this.toneMappingWhitePoint=1.0;// morphs
this.maxMorphTargets=8;this.maxMorphNormals=4;// internal properties
var _this=this,_isContextLost=false,// internal state cache
_framebuffer=null,_currentRenderTarget=null,_currentFramebuffer=null,_currentMaterialId=-1,// geometry and program caching
_currentGeometryProgram={geometry:null,program:null,wireframe:false},_currentCamera=null,_currentArrayCamera=null,_currentViewport=new Vector4(),_currentScissor=new Vector4(),_currentScissorTest=null,//
_usedTextureUnits=0,//
_width=_canvas.width,_height=_canvas.height,_pixelRatio=1,_viewport=new Vector4(0,0,_width,_height),_scissor=new Vector4(0,0,_width,_height),_scissorTest=false,// frustum
_frustum=new Frustum(),// clipping
_clipping=new WebGLClipping(),_clippingEnabled=false,_localClippingEnabled=false,// camera matrices cache
_projScreenMatrix=new Matrix4(),_vector3=new Vector3();function getTargetPixelRatio(){return _currentRenderTarget===null?_pixelRatio:1;}// initialize
var _gl;try{var contextAttributes={alpha:_alpha,depth:_depth,stencil:_stencil,antialias:_antialias,premultipliedAlpha:_premultipliedAlpha,preserveDrawingBuffer:_preserveDrawingBuffer,powerPreference:_powerPreference};// event listeners must be registered before WebGL context is created, see #12753
_canvas.addEventListener('webglcontextlost',onContextLost,false);_canvas.addEventListener('webglcontextrestored',onContextRestore,false);_gl=_context||_canvas.getContext('webgl',contextAttributes)||_canvas.getContext('experimental-webgl',contextAttributes);if(_gl===null){if(_canvas.getContext('webgl')!==null){throw new Error('Error creating WebGL context with your selected attributes.');}else{throw new Error('Error creating WebGL context.');}}// Some experimental-webgl implementations do not have getShaderPrecisionFormat
if(_gl.getShaderPrecisionFormat===undefined){_gl.getShaderPrecisionFormat=function(){return{'rangeMin':1,'rangeMax':1,'precision':1};};}}catch(error){console.error('THREE.WebGLRenderer: '+error.message);}var extensions,capabilities,state,info;var properties,textures,attributes,geometries,objects;var programCache,renderLists,renderStates;var background,morphtargets,bufferRenderer,indexedBufferRenderer;var utils;function initGLContext(){extensions=new WebGLExtensions(_gl);capabilities=new WebGLCapabilities(_gl,extensions,parameters);if(!capabilities.isWebGL2){extensions.get('WEBGL_depth_texture');extensions.get('OES_texture_float');extensions.get('OES_texture_half_float');extensions.get('OES_texture_half_float_linear');extensions.get('OES_standard_derivatives');extensions.get('OES_element_index_uint');extensions.get('ANGLE_instanced_arrays');}extensions.get('OES_texture_float_linear');utils=new WebGLUtils(_gl,extensions,capabilities);state=new WebGLState(_gl,extensions,utils,capabilities);state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio));state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio));info=new WebGLInfo(_gl);properties=new WebGLProperties();textures=new WebGLTextures(_gl,extensions,state,properties,capabilities,utils,info);attributes=new WebGLAttributes(_gl);geometries=new WebGLGeometries(_gl,attributes,info);objects=new WebGLObjects(geometries,info);morphtargets=new WebGLMorphtargets(_gl);programCache=new WebGLPrograms(_this,extensions,capabilities);renderLists=new WebGLRenderLists();renderStates=new WebGLRenderStates();background=new WebGLBackground(_this,state,objects,_premultipliedAlpha);bufferRenderer=new WebGLBufferRenderer(_gl,extensions,info,capabilities);indexedBufferRenderer=new WebGLIndexedBufferRenderer(_gl,extensions,info,capabilities);info.programs=programCache.programs;_this.context=_gl;_this.capabilities=capabilities;_this.extensions=extensions;_this.properties=properties;_this.renderLists=renderLists;_this.state=state;_this.info=info;}initGLContext();// vr
var vr='xr'in navigator?new WebXRManager(_this):new WebVRManager(_this);this.vr=vr;// shadow map
var shadowMap=new WebGLShadowMap(_this,objects,capabilities.maxTextureSize);this.shadowMap=shadowMap;// API
this.getContext=function(){return _gl;};this.getContextAttributes=function(){return _gl.getContextAttributes();};this.forceContextLoss=function(){var extension=extensions.get('WEBGL_lose_context');if(extension)extension.loseContext();};this.forceContextRestore=function(){var extension=extensions.get('WEBGL_lose_context');if(extension)extension.restoreContext();};this.getPixelRatio=function(){return _pixelRatio;};this.setPixelRatio=function(value){if(value===undefined)return;_pixelRatio=value;this.setSize(_width,_height,false);};this.getSize=function(){return{width:_width,height:_height};};this.setSize=function(width,height,updateStyle){if(vr.isPresenting()){console.warn('THREE.WebGLRenderer: Can\'t change size while VR device is presenting.');return;}_width=width;_height=height;_canvas.width=width*_pixelRatio;_canvas.height=height*_pixelRatio;if(updateStyle!==false){_canvas.style.width=width+'px';_canvas.style.height=height+'px';}this.setViewport(0,0,width,height);};this.getDrawingBufferSize=function(){return{width:_width*_pixelRatio,height:_height*_pixelRatio};};this.setDrawingBufferSize=function(width,height,pixelRatio){_width=width;_height=height;_pixelRatio=pixelRatio;_canvas.width=width*pixelRatio;_canvas.height=height*pixelRatio;this.setViewport(0,0,width,height);};this.getCurrentViewport=function(){return _currentViewport;};this.setViewport=function(x,y,width,height){_viewport.set(x,_height-y-height,width,height);state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio));};this.setScissor=function(x,y,width,height){_scissor.set(x,_height-y-height,width,height);state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio));};this.setScissorTest=function(boolean){state.setScissorTest(_scissorTest=boolean);};// Clearing
this.getClearColor=function(){return background.getClearColor();};this.setClearColor=function(){background.setClearColor.apply(background,arguments);};this.getClearAlpha=function(){return background.getClearAlpha();};this.setClearAlpha=function(){background.setClearAlpha.apply(background,arguments);};this.clear=function(color,depth,stencil){var bits=0;if(color===undefined||color)bits|=_gl.COLOR_BUFFER_BIT;if(depth===undefined||depth)bits|=_gl.DEPTH_BUFFER_BIT;if(stencil===undefined||stencil)bits|=_gl.STENCIL_BUFFER_BIT;_gl.clear(bits);};this.clearColor=function(){this.clear(true,false,false);};this.clearDepth=function(){this.clear(false,true,false);};this.clearStencil=function(){this.clear(false,false,true);};this.clearTarget=function(renderTarget,color,depth,stencil){this.setRenderTarget(renderTarget);this.clear(color,depth,stencil);};//
this.dispose=function(){_canvas.removeEventListener('webglcontextlost',onContextLost,false);_canvas.removeEventListener('webglcontextrestored',onContextRestore,false);renderLists.dispose();renderStates.dispose();properties.dispose();objects.dispose();vr.dispose();animation.stop();};// Events
function onContextLost(event){event.preventDefault();console.log('THREE.WebGLRenderer: Context Lost.');_isContextLost=true;}function onContextRestore()/* event */{console.log('THREE.WebGLRenderer: Context Restored.');_isContextLost=false;initGLContext();}function onMaterialDispose(event){var material=event.target;material.removeEventListener('dispose',onMaterialDispose);deallocateMaterial(material);}// Buffer deallocation
function deallocateMaterial(material){releaseMaterialProgramReference(material);properties.remove(material);}function releaseMaterialProgramReference(material){var programInfo=properties.get(material).program;material.program=undefined;if(programInfo!==undefined){programCache.releaseProgram(programInfo);}}// Buffer rendering
function renderObjectImmediate(object,program){object.render(function(object){_this.renderBufferImmediate(object,program);});}this.renderBufferImmediate=function(object,program){state.initAttributes();var buffers=properties.get(object);if(object.hasPositions&&!buffers.position)buffers.position=_gl.createBuffer();if(object.hasNormals&&!buffers.normal)buffers.normal=_gl.createBuffer();if(object.hasUvs&&!buffers.uv)buffers.uv=_gl.createBuffer();if(object.hasColors&&!buffers.color)buffers.color=_gl.createBuffer();var programAttributes=program.getAttributes();if(object.hasPositions){_gl.bindBuffer(_gl.ARRAY_BUFFER,buffers.position);_gl.bufferData(_gl.ARRAY_BUFFER,object.positionArray,_gl.DYNAMIC_DRAW);state.enableAttribute(programAttributes.position);_gl.vertexAttribPointer(programAttributes.position,3,_gl.FLOAT,false,0,0);}if(object.hasNormals){_gl.bindBuffer(_gl.ARRAY_BUFFER,buffers.normal);_gl.bufferData(_gl.ARRAY_BUFFER,object.normalArray,_gl.DYNAMIC_DRAW);state.enableAttribute(programAttributes.normal);_gl.vertexAttribPointer(programAttributes.normal,3,_gl.FLOAT,false,0,0);}if(object.hasUvs){_gl.bindBuffer(_gl.ARRAY_BUFFER,buffers.uv);_gl.bufferData(_gl.ARRAY_BUFFER,object.uvArray,_gl.DYNAMIC_DRAW);state.enableAttribute(programAttributes.uv);_gl.vertexAttribPointer(programAttributes.uv,2,_gl.FLOAT,false,0,0);}if(object.hasColors){_gl.bindBuffer(_gl.ARRAY_BUFFER,buffers.color);_gl.bufferData(_gl.ARRAY_BUFFER,object.colorArray,_gl.DYNAMIC_DRAW);state.enableAttribute(programAttributes.color);_gl.vertexAttribPointer(programAttributes.color,3,_gl.FLOAT,false,0,0);}state.disableUnusedAttributes();_gl.drawArrays(_gl.TRIANGLES,0,object.count);object.count=0;};this.renderBufferDirect=function(camera,fog,geometry,material,object,group){var frontFaceCW=object.isMesh&&object.normalMatrix.determinant()<0;state.setMaterial(material,frontFaceCW);var program=setProgram(camera,fog,material,object);var updateBuffers=false;if(_currentGeometryProgram.geometry!==geometry.id||_currentGeometryProgram.program!==program.id||_currentGeometryProgram.wireframe!==(material.wireframe===true)){_currentGeometryProgram.geometry=geometry.id;_currentGeometryProgram.program=program.id;_currentGeometryProgram.wireframe=material.wireframe===true;updateBuffers=true;}if(object.morphTargetInfluences){morphtargets.update(object,geometry,material,program);updateBuffers=true;}//
var index=geometry.index;var position=geometry.attributes.position;var rangeFactor=1;if(material.wireframe===true){index=geometries.getWireframeAttribute(geometry);rangeFactor=2;}var attribute;var renderer=bufferRenderer;if(index!==null){attribute=attributes.get(index);renderer=indexedBufferRenderer;renderer.setIndex(attribute);}if(updateBuffers){setupVertexAttributes(material,program,geometry);if(index!==null){_gl.bindBuffer(_gl.ELEMENT_ARRAY_BUFFER,attribute.buffer);}}//
var dataCount=Infinity;if(index!==null){dataCount=index.count;}else if(position!==undefined){dataCount=position.count;}var rangeStart=geometry.drawRange.start*rangeFactor;var rangeCount=geometry.drawRange.count*rangeFactor;var groupStart=group!==null?group.start*rangeFactor:0;var groupCount=group!==null?group.count*rangeFactor:Infinity;var drawStart=Math.max(rangeStart,groupStart);var drawEnd=Math.min(dataCount,rangeStart+rangeCount,groupStart+groupCount)-1;var drawCount=Math.max(0,drawEnd-drawStart+1);if(drawCount===0)return;//
if(object.isMesh){if(material.wireframe===true){state.setLineWidth(material.wireframeLinewidth*getTargetPixelRatio());renderer.setMode(_gl.LINES);}else{switch(object.drawMode){case TrianglesDrawMode:renderer.setMode(_gl.TRIANGLES);break;case TriangleStripDrawMode:renderer.setMode(_gl.TRIANGLE_STRIP);break;case TriangleFanDrawMode:renderer.setMode(_gl.TRIANGLE_FAN);break;}}}else if(object.isLine){var lineWidth=material.linewidth;if(lineWidth===undefined)lineWidth=1;// Not using Line*Material
state.setLineWidth(lineWidth*getTargetPixelRatio());if(object.isLineSegments){renderer.setMode(_gl.LINES);}else if(object.isLineLoop){renderer.setMode(_gl.LINE_LOOP);}else{renderer.setMode(_gl.LINE_STRIP);}}else if(object.isPoints){renderer.setMode(_gl.POINTS);}else if(object.isSprite){renderer.setMode(_gl.TRIANGLES);}if(geometry&&geometry.isInstancedBufferGeometry){if(geometry.maxInstancedCount>0){renderer.renderInstances(geometry,drawStart,drawCount);}}else{renderer.render(drawStart,drawCount);}};function setupVertexAttributes(material,program,geometry){if(geometry&&geometry.isInstancedBufferGeometry&!capabilities.isWebGL2){if(extensions.get('ANGLE_instanced_arrays')===null){console.error('THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');return;}}state.initAttributes();var geometryAttributes=geometry.attributes;var programAttributes=program.getAttributes();var materialDefaultAttributeValues=material.defaultAttributeValues;for(var name in programAttributes){var programAttribute=programAttributes[name];if(programAttribute>=0){var geometryAttribute=geometryAttributes[name];if(geometryAttribute!==undefined){var normalized=geometryAttribute.normalized;var size=geometryAttribute.itemSize;var attribute=attributes.get(geometryAttribute);// TODO Attribute may not be available on context restore
if(attribute===undefined)continue;var buffer=attribute.buffer;var type=attribute.type;var bytesPerElement=attribute.bytesPerElement;if(geometryAttribute.isInterleavedBufferAttribute){var data=geometryAttribute.data;var stride=data.stride;var offset=geometryAttribute.offset;if(data&&data.isInstancedInterleavedBuffer){state.enableAttributeAndDivisor(programAttribute,data.meshPerAttribute);if(geometry.maxInstancedCount===undefined){geometry.maxInstancedCount=data.meshPerAttribute*data.count;}}else{state.enableAttribute(programAttribute);}_gl.bindBuffer(_gl.ARRAY_BUFFER,buffer);_gl.vertexAttribPointer(programAttribute,size,type,normalized,stride*bytesPerElement,offset*bytesPerElement);}else{if(geometryAttribute.isInstancedBufferAttribute){state.enableAttributeAndDivisor(programAttribute,geometryAttribute.meshPerAttribute);if(geometry.maxInstancedCount===undefined){geometry.maxInstancedCount=geometryAttribute.meshPerAttribute*geometryAttribute.count;}}else{state.enableAttribute(programAttribute);}_gl.bindBuffer(_gl.ARRAY_BUFFER,buffer);_gl.vertexAttribPointer(programAttribute,size,type,normalized,0,0);}}else if(materialDefaultAttributeValues!==undefined){var value=materialDefaultAttributeValues[name];if(value!==undefined){switch(value.length){case 2:_gl.vertexAttrib2fv(programAttribute,value);break;case 3:_gl.vertexAttrib3fv(programAttribute,value);break;case 4:_gl.vertexAttrib4fv(programAttribute,value);break;default:_gl.vertexAttrib1fv(programAttribute,value);}}}}}state.disableUnusedAttributes();}// Compile
this.compile=function(scene,camera){currentRenderState=renderStates.get(scene,camera);currentRenderState.init();scene.traverse(function(object){if(object.isLight){currentRenderState.pushLight(object);if(object.castShadow){currentRenderState.pushShadow(object);}}});currentRenderState.setupLights(camera);scene.traverse(function(object){if(object.material){if(Array.isArray(object.material)){for(var i=0;i<object.material.length;i++){initMaterial(object.material[i],scene.fog,object);}}else{initMaterial(object.material,scene.fog,object);}}});};// Animation Loop
var onAnimationFrameCallback=null;function onAnimationFrame(time){if(vr.isPresenting())return;if(onAnimationFrameCallback)onAnimationFrameCallback(time);}var animation=new WebGLAnimation();animation.setAnimationLoop(onAnimationFrame);if(typeof window!=='undefined')animation.setContext(window);this.setAnimationLoop=function(callback){onAnimationFrameCallback=callback;vr.setAnimationLoop(callback);animation.start();};// Rendering
this.render=function(scene,camera,renderTarget,forceClear){if(!(camera&&camera.isCamera)){console.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');return;}if(_isContextLost)return;// reset caching for this frame
_currentGeometryProgram.geometry=null;_currentGeometryProgram.program=null;_currentGeometryProgram.wireframe=false;_currentMaterialId=-1;_currentCamera=null;// update scene graph
if(scene.autoUpdate===true)scene.updateMatrixWorld();// update camera matrices and frustum
if(camera.parent===null)camera.updateMatrixWorld();if(vr.enabled){camera=vr.getCamera(camera);}//
currentRenderState=renderStates.get(scene,camera);currentRenderState.init();scene.onBeforeRender(_this,scene,camera,renderTarget);_projScreenMatrix.multiplyMatrices(camera.projectionMatrix,camera.matrixWorldInverse);_frustum.setFromMatrix(_projScreenMatrix);_localClippingEnabled=this.localClippingEnabled;_clippingEnabled=_clipping.init(this.clippingPlanes,_localClippingEnabled,camera);currentRenderList=renderLists.get(scene,camera);currentRenderList.init();projectObject(scene,camera,_this.sortObjects);if(_this.sortObjects===true){currentRenderList.sort();}//
if(_clippingEnabled)_clipping.beginShadows();var shadowsArray=currentRenderState.state.shadowsArray;shadowMap.render(shadowsArray,scene,camera);currentRenderState.setupLights(camera);if(_clippingEnabled)_clipping.endShadows();//
if(this.info.autoReset)this.info.reset();if(renderTarget===undefined){renderTarget=null;}this.setRenderTarget(renderTarget);//
background.render(currentRenderList,scene,camera,forceClear);// render scene
var opaqueObjects=currentRenderList.opaque;var transparentObjects=currentRenderList.transparent;if(scene.overrideMaterial){var overrideMaterial=scene.overrideMaterial;if(opaqueObjects.length)renderObjects(opaqueObjects,scene,camera,overrideMaterial);if(transparentObjects.length)renderObjects(transparentObjects,scene,camera,overrideMaterial);}else{// opaque pass (front-to-back order)
if(opaqueObjects.length)renderObjects(opaqueObjects,scene,camera);// transparent pass (back-to-front order)
if(transparentObjects.length)renderObjects(transparentObjects,scene,camera);}// Generate mipmap if we're using any kind of mipmap filtering
if(renderTarget){textures.updateRenderTargetMipmap(renderTarget);}// Ensure depth buffer writing is enabled so it can be cleared on next render
state.buffers.depth.setTest(true);state.buffers.depth.setMask(true);state.buffers.color.setMask(true);state.setPolygonOffset(false);scene.onAfterRender(_this,scene,camera);if(vr.enabled){vr.submitFrame();}// _gl.finish();
currentRenderList=null;currentRenderState=null;};/*
		// TODO Duplicated code (Frustum)

		var _sphere = new Sphere();

		function isObjectViewable( object ) {

			var geometry = object.geometry;

			if ( geometry.boundingSphere === null )
				geometry.computeBoundingSphere();

			_sphere.copy( geometry.boundingSphere ).
			applyMatrix4( object.matrixWorld );

			return isSphereViewable( _sphere );

		}

		function isSpriteViewable( sprite ) {

			_sphere.center.set( 0, 0, 0 );
			_sphere.radius = 0.7071067811865476;
			_sphere.applyMatrix4( sprite.matrixWorld );

			return isSphereViewable( _sphere );

		}

		function isSphereViewable( sphere ) {

			if ( ! _frustum.intersectsSphere( sphere ) ) return false;

			var numPlanes = _clipping.numPlanes;

			if ( numPlanes === 0 ) return true;

			var planes = _this.clippingPlanes,

				center = sphere.center,
				negRad = - sphere.radius,
				i = 0;

			do {

				// out when deeper than radius in the negative halfspace
				if ( planes[ i ].distanceToPoint( center ) < negRad ) return false;

			} while ( ++ i !== numPlanes );

			return true;

		}
		*/function projectObject(object,camera,sortObjects){if(object.visible===false)return;var visible=object.layers.test(camera.layers);if(visible){if(object.isLight){currentRenderState.pushLight(object);if(object.castShadow){currentRenderState.pushShadow(object);}}else if(object.isSprite){if(!object.frustumCulled||_frustum.intersectsSprite(object)){if(sortObjects){_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);}var geometry=objects.update(object);var material=object.material;currentRenderList.push(object,geometry,material,_vector3.z,null);}}else if(object.isImmediateRenderObject){if(sortObjects){_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);}currentRenderList.push(object,null,object.material,_vector3.z,null);}else if(object.isMesh||object.isLine||object.isPoints){if(object.isSkinnedMesh){object.skeleton.update();}if(!object.frustumCulled||_frustum.intersectsObject(object)){if(sortObjects){_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);}var geometry=objects.update(object);var material=object.material;if(Array.isArray(material)){var groups=geometry.groups;for(var i=0,l=groups.length;i<l;i++){var group=groups[i];var groupMaterial=material[group.materialIndex];if(groupMaterial&&groupMaterial.visible){currentRenderList.push(object,geometry,groupMaterial,_vector3.z,group);}}}else if(material.visible){currentRenderList.push(object,geometry,material,_vector3.z,null);}}}}var children=object.children;for(var i=0,l=children.length;i<l;i++){projectObject(children[i],camera,sortObjects);}}function renderObjects(renderList,scene,camera,overrideMaterial){for(var i=0,l=renderList.length;i<l;i++){var renderItem=renderList[i];var object=renderItem.object;var geometry=renderItem.geometry;var material=overrideMaterial===undefined?renderItem.material:overrideMaterial;var group=renderItem.group;if(camera.isArrayCamera){_currentArrayCamera=camera;var cameras=camera.cameras;for(var j=0,jl=cameras.length;j<jl;j++){var camera2=cameras[j];if(object.layers.test(camera2.layers)){if('viewport'in camera2){// XR
state.viewport(_currentViewport.copy(camera2.viewport));}else{var bounds=camera2.bounds;var x=bounds.x*_width;var y=bounds.y*_height;var width=bounds.z*_width;var height=bounds.w*_height;state.viewport(_currentViewport.set(x,y,width,height).multiplyScalar(_pixelRatio));}currentRenderState.setupLights(camera2);renderObject(object,scene,camera2,geometry,material,group);}}}else{_currentArrayCamera=null;renderObject(object,scene,camera,geometry,material,group);}}}function renderObject(object,scene,camera,geometry,material,group){object.onBeforeRender(_this,scene,camera,geometry,material,group);currentRenderState=renderStates.get(scene,_currentArrayCamera||camera);object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse,object.matrixWorld);object.normalMatrix.getNormalMatrix(object.modelViewMatrix);if(object.isImmediateRenderObject){state.setMaterial(material);var program=setProgram(camera,scene.fog,material,object);_currentGeometryProgram.geometry=null;_currentGeometryProgram.program=null;_currentGeometryProgram.wireframe=false;renderObjectImmediate(object,program);}else{_this.renderBufferDirect(camera,scene.fog,geometry,material,object,group);}object.onAfterRender(_this,scene,camera,geometry,material,group);currentRenderState=renderStates.get(scene,_currentArrayCamera||camera);}function initMaterial(material,fog,object){var materialProperties=properties.get(material);var lights=currentRenderState.state.lights;var shadowsArray=currentRenderState.state.shadowsArray;var lightsHash=materialProperties.lightsHash;var lightsStateHash=lights.state.hash;var parameters=programCache.getParameters(material,lights.state,shadowsArray,fog,_clipping.numPlanes,_clipping.numIntersection,object);var code=programCache.getProgramCode(material,parameters);var program=materialProperties.program;var programChange=true;if(program===undefined){// new material
material.addEventListener('dispose',onMaterialDispose);}else if(program.code!==code){// changed glsl or parameters
releaseMaterialProgramReference(material);}else if(lightsHash.stateID!==lightsStateHash.stateID||lightsHash.directionalLength!==lightsStateHash.directionalLength||lightsHash.pointLength!==lightsStateHash.pointLength||lightsHash.spotLength!==lightsStateHash.spotLength||lightsHash.rectAreaLength!==lightsStateHash.rectAreaLength||lightsHash.hemiLength!==lightsStateHash.hemiLength||lightsHash.shadowsLength!==lightsStateHash.shadowsLength){lightsHash.stateID=lightsStateHash.stateID;lightsHash.directionalLength=lightsStateHash.directionalLength;lightsHash.pointLength=lightsStateHash.pointLength;lightsHash.spotLength=lightsStateHash.spotLength;lightsHash.rectAreaLength=lightsStateHash.rectAreaLength;lightsHash.hemiLength=lightsStateHash.hemiLength;lightsHash.shadowsLength=lightsStateHash.shadowsLength;programChange=false;}else if(parameters.shaderID!==undefined){// same glsl and uniform list
return;}else{// only rebuild uniform list
programChange=false;}if(programChange){if(parameters.shaderID){var shader=ShaderLib[parameters.shaderID];materialProperties.shader={name:material.type,uniforms:UniformsUtils.clone(shader.uniforms),vertexShader:shader.vertexShader,fragmentShader:shader.fragmentShader};}else{materialProperties.shader={name:material.type,uniforms:material.uniforms,vertexShader:material.vertexShader,fragmentShader:material.fragmentShader};}material.onBeforeCompile(materialProperties.shader,_this);// Computing code again as onBeforeCompile may have changed the shaders
code=programCache.getProgramCode(material,parameters);program=programCache.acquireProgram(material,materialProperties.shader,parameters,code);materialProperties.program=program;material.program=program;}var programAttributes=program.getAttributes();if(material.morphTargets){material.numSupportedMorphTargets=0;for(var i=0;i<_this.maxMorphTargets;i++){if(programAttributes['morphTarget'+i]>=0){material.numSupportedMorphTargets++;}}}if(material.morphNormals){material.numSupportedMorphNormals=0;for(var i=0;i<_this.maxMorphNormals;i++){if(programAttributes['morphNormal'+i]>=0){material.numSupportedMorphNormals++;}}}var uniforms=materialProperties.shader.uniforms;if(!material.isShaderMaterial&&!material.isRawShaderMaterial||material.clipping===true){materialProperties.numClippingPlanes=_clipping.numPlanes;materialProperties.numIntersection=_clipping.numIntersection;uniforms.clippingPlanes=_clipping.uniform;}materialProperties.fog=fog;// store the light setup it was created for
if(lightsHash===undefined){materialProperties.lightsHash=lightsHash={};}lightsHash.stateID=lightsStateHash.stateID;lightsHash.directionalLength=lightsStateHash.directionalLength;lightsHash.pointLength=lightsStateHash.pointLength;lightsHash.spotLength=lightsStateHash.spotLength;lightsHash.rectAreaLength=lightsStateHash.rectAreaLength;lightsHash.hemiLength=lightsStateHash.hemiLength;lightsHash.shadowsLength=lightsStateHash.shadowsLength;if(material.lights){// wire up the material to this renderer's lighting state
uniforms.ambientLightColor.value=lights.state.ambient;uniforms.directionalLights.value=lights.state.directional;uniforms.spotLights.value=lights.state.spot;uniforms.rectAreaLights.value=lights.state.rectArea;uniforms.pointLights.value=lights.state.point;uniforms.hemisphereLights.value=lights.state.hemi;uniforms.directionalShadowMap.value=lights.state.directionalShadowMap;uniforms.directionalShadowMatrix.value=lights.state.directionalShadowMatrix;uniforms.spotShadowMap.value=lights.state.spotShadowMap;uniforms.spotShadowMatrix.value=lights.state.spotShadowMatrix;uniforms.pointShadowMap.value=lights.state.pointShadowMap;uniforms.pointShadowMatrix.value=lights.state.pointShadowMatrix;// TODO (abelnation): add area lights shadow info to uniforms
}var progUniforms=materialProperties.program.getUniforms(),uniformsList=WebGLUniforms.seqWithValue(progUniforms.seq,uniforms);materialProperties.uniformsList=uniformsList;}function setProgram(camera,fog,material,object){_usedTextureUnits=0;var materialProperties=properties.get(material);var lights=currentRenderState.state.lights;var lightsHash=materialProperties.lightsHash;var lightsStateHash=lights.state.hash;if(_clippingEnabled){if(_localClippingEnabled||camera!==_currentCamera){var useCache=camera===_currentCamera&&material.id===_currentMaterialId;// we might want to call this function with some ClippingGroup
// object instead of the material, once it becomes feasible
// (#8465, #8379)
_clipping.setState(material.clippingPlanes,material.clipIntersection,material.clipShadows,camera,materialProperties,useCache);}}if(material.needsUpdate===false){if(materialProperties.program===undefined){material.needsUpdate=true;}else if(material.fog&&materialProperties.fog!==fog){material.needsUpdate=true;}else if(material.lights&&(lightsHash.stateID!==lightsStateHash.stateID||lightsHash.directionalLength!==lightsStateHash.directionalLength||lightsHash.pointLength!==lightsStateHash.pointLength||lightsHash.spotLength!==lightsStateHash.spotLength||lightsHash.rectAreaLength!==lightsStateHash.rectAreaLength||lightsHash.hemiLength!==lightsStateHash.hemiLength||lightsHash.shadowsLength!==lightsStateHash.shadowsLength)){material.needsUpdate=true;}else if(materialProperties.numClippingPlanes!==undefined&&(materialProperties.numClippingPlanes!==_clipping.numPlanes||materialProperties.numIntersection!==_clipping.numIntersection)){material.needsUpdate=true;}}if(material.needsUpdate){initMaterial(material,fog,object);material.needsUpdate=false;}var refreshProgram=false;var refreshMaterial=false;var refreshLights=false;var program=materialProperties.program,p_uniforms=program.getUniforms(),m_uniforms=materialProperties.shader.uniforms;if(state.useProgram(program.program)){refreshProgram=true;refreshMaterial=true;refreshLights=true;}if(material.id!==_currentMaterialId){_currentMaterialId=material.id;refreshMaterial=true;}if(refreshProgram||_currentCamera!==camera){p_uniforms.setValue(_gl,'projectionMatrix',camera.projectionMatrix);if(capabilities.logarithmicDepthBuffer){p_uniforms.setValue(_gl,'logDepthBufFC',2.0/(Math.log(camera.far+1.0)/Math.LN2));}if(_currentCamera!==camera){_currentCamera=camera;// lighting uniforms depend on the camera so enforce an update
// now, in case this material supports lights - or later, when
// the next material that does gets activated:
refreshMaterial=true;// set to true on material change
refreshLights=true;// remains set until update done
}// load material specific uniforms
// (shader material also gets them for the sake of genericity)
if(material.isShaderMaterial||material.isMeshPhongMaterial||material.isMeshStandardMaterial||material.envMap){var uCamPos=p_uniforms.map.cameraPosition;if(uCamPos!==undefined){uCamPos.setValue(_gl,_vector3.setFromMatrixPosition(camera.matrixWorld));}}if(material.isMeshPhongMaterial||material.isMeshLambertMaterial||material.isMeshBasicMaterial||material.isMeshStandardMaterial||material.isShaderMaterial||material.skinning){p_uniforms.setValue(_gl,'viewMatrix',camera.matrixWorldInverse);}}// skinning uniforms must be set even if material didn't change
// auto-setting of texture unit for bone texture must go before other textures
// not sure why, but otherwise weird things happen
if(material.skinning){p_uniforms.setOptional(_gl,object,'bindMatrix');p_uniforms.setOptional(_gl,object,'bindMatrixInverse');var skeleton=object.skeleton;if(skeleton){var bones=skeleton.bones;if(capabilities.floatVertexTextures){if(skeleton.boneTexture===undefined){// layout (1 matrix = 4 pixels)
//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)
var size=Math.sqrt(bones.length*4);// 4 pixels needed for 1 matrix
size=_Math.ceilPowerOfTwo(size);size=Math.max(size,4);var boneMatrices=new Float32Array(size*size*4);// 4 floats per RGBA pixel
boneMatrices.set(skeleton.boneMatrices);// copy current values
var boneTexture=new DataTexture(boneMatrices,size,size,RGBAFormat,FloatType);boneTexture.needsUpdate=true;skeleton.boneMatrices=boneMatrices;skeleton.boneTexture=boneTexture;skeleton.boneTextureSize=size;}p_uniforms.setValue(_gl,'boneTexture',skeleton.boneTexture);p_uniforms.setValue(_gl,'boneTextureSize',skeleton.boneTextureSize);}else{p_uniforms.setOptional(_gl,skeleton,'boneMatrices');}}}if(refreshMaterial){p_uniforms.setValue(_gl,'toneMappingExposure',_this.toneMappingExposure);p_uniforms.setValue(_gl,'toneMappingWhitePoint',_this.toneMappingWhitePoint);if(material.lights){// the current material requires lighting info
// note: all lighting uniforms are always set correctly
// they simply reference the renderer's state for their
// values
//
// use the current material's .needsUpdate flags to set
// the GL state when required
markUniformsLightsNeedsUpdate(m_uniforms,refreshLights);}// refresh uniforms common to several materials
if(fog&&material.fog){refreshUniformsFog(m_uniforms,fog);}if(material.isMeshBasicMaterial){refreshUniformsCommon(m_uniforms,material);}else if(material.isMeshLambertMaterial){refreshUniformsCommon(m_uniforms,material);refreshUniformsLambert(m_uniforms,material);}else if(material.isMeshPhongMaterial){refreshUniformsCommon(m_uniforms,material);if(material.isMeshToonMaterial){refreshUniformsToon(m_uniforms,material);}else{refreshUniformsPhong(m_uniforms,material);}}else if(material.isMeshStandardMaterial){refreshUniformsCommon(m_uniforms,material);if(material.isMeshPhysicalMaterial){refreshUniformsPhysical(m_uniforms,material);}else{refreshUniformsStandard(m_uniforms,material);}}else if(material.isMeshMatcapMaterial){refreshUniformsCommon(m_uniforms,material);refreshUniformsMatcap(m_uniforms,material);}else if(material.isMeshDepthMaterial){refreshUniformsCommon(m_uniforms,material);refreshUniformsDepth(m_uniforms,material);}else if(material.isMeshDistanceMaterial){refreshUniformsCommon(m_uniforms,material);refreshUniformsDistance(m_uniforms,material);}else if(material.isMeshNormalMaterial){refreshUniformsCommon(m_uniforms,material);refreshUniformsNormal(m_uniforms,material);}else if(material.isLineBasicMaterial){refreshUniformsLine(m_uniforms,material);if(material.isLineDashedMaterial){refreshUniformsDash(m_uniforms,material);}}else if(material.isPointsMaterial){refreshUniformsPoints(m_uniforms,material);}else if(material.isSpriteMaterial){refreshUniformsSprites(m_uniforms,material);}else if(material.isShadowMaterial){m_uniforms.color.value=material.color;m_uniforms.opacity.value=material.opacity;}// RectAreaLight Texture
// TODO (mrdoob): Find a nicer implementation
if(m_uniforms.ltc_1!==undefined)m_uniforms.ltc_1.value=UniformsLib.LTC_1;if(m_uniforms.ltc_2!==undefined)m_uniforms.ltc_2.value=UniformsLib.LTC_2;WebGLUniforms.upload(_gl,materialProperties.uniformsList,m_uniforms,_this);}if(material.isShaderMaterial&&material.uniformsNeedUpdate===true){WebGLUniforms.upload(_gl,materialProperties.uniformsList,m_uniforms,_this);material.uniformsNeedUpdate=false;}if(material.isSpriteMaterial){p_uniforms.setValue(_gl,'center',object.center);}// common matrices
p_uniforms.setValue(_gl,'modelViewMatrix',object.modelViewMatrix);p_uniforms.setValue(_gl,'normalMatrix',object.normalMatrix);p_uniforms.setValue(_gl,'modelMatrix',object.matrixWorld);return program;}// Uniforms (refresh uniforms objects)
function refreshUniformsCommon(uniforms,material){uniforms.opacity.value=material.opacity;if(material.color){uniforms.diffuse.value=material.color;}if(material.emissive){uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);}if(material.map){uniforms.map.value=material.map;}if(material.alphaMap){uniforms.alphaMap.value=material.alphaMap;}if(material.specularMap){uniforms.specularMap.value=material.specularMap;}if(material.envMap){uniforms.envMap.value=material.envMap;// don't flip CubeTexture envMaps, flip everything else:
//  WebGLRenderTargetCube will be flipped for backwards compatibility
//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture
// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future
uniforms.flipEnvMap.value=!(material.envMap&&material.envMap.isCubeTexture)?1:-1;uniforms.reflectivity.value=material.reflectivity;uniforms.refractionRatio.value=material.refractionRatio;uniforms.maxMipLevel.value=properties.get(material.envMap).__maxMipLevel;}if(material.lightMap){uniforms.lightMap.value=material.lightMap;uniforms.lightMapIntensity.value=material.lightMapIntensity;}if(material.aoMap){uniforms.aoMap.value=material.aoMap;uniforms.aoMapIntensity.value=material.aoMapIntensity;}// uv repeat and offset setting priorities
// 1. color map
// 2. specular map
// 3. normal map
// 4. bump map
// 5. alpha map
// 6. emissive map
var uvScaleMap;if(material.map){uvScaleMap=material.map;}else if(material.specularMap){uvScaleMap=material.specularMap;}else if(material.displacementMap){uvScaleMap=material.displacementMap;}else if(material.normalMap){uvScaleMap=material.normalMap;}else if(material.bumpMap){uvScaleMap=material.bumpMap;}else if(material.roughnessMap){uvScaleMap=material.roughnessMap;}else if(material.metalnessMap){uvScaleMap=material.metalnessMap;}else if(material.alphaMap){uvScaleMap=material.alphaMap;}else if(material.emissiveMap){uvScaleMap=material.emissiveMap;}if(uvScaleMap!==undefined){// backwards compatibility
if(uvScaleMap.isWebGLRenderTarget){uvScaleMap=uvScaleMap.texture;}if(uvScaleMap.matrixAutoUpdate===true){uvScaleMap.updateMatrix();}uniforms.uvTransform.value.copy(uvScaleMap.matrix);}}function refreshUniformsLine(uniforms,material){uniforms.diffuse.value=material.color;uniforms.opacity.value=material.opacity;}function refreshUniformsDash(uniforms,material){uniforms.dashSize.value=material.dashSize;uniforms.totalSize.value=material.dashSize+material.gapSize;uniforms.scale.value=material.scale;}function refreshUniformsPoints(uniforms,material){uniforms.diffuse.value=material.color;uniforms.opacity.value=material.opacity;uniforms.size.value=material.size*_pixelRatio;uniforms.scale.value=_height*0.5;uniforms.map.value=material.map;if(material.map!==null){if(material.map.matrixAutoUpdate===true){material.map.updateMatrix();}uniforms.uvTransform.value.copy(material.map.matrix);}}function refreshUniformsSprites(uniforms,material){uniforms.diffuse.value=material.color;uniforms.opacity.value=material.opacity;uniforms.rotation.value=material.rotation;uniforms.map.value=material.map;if(material.map!==null){if(material.map.matrixAutoUpdate===true){material.map.updateMatrix();}uniforms.uvTransform.value.copy(material.map.matrix);}}function refreshUniformsFog(uniforms,fog){uniforms.fogColor.value=fog.color;if(fog.isFog){uniforms.fogNear.value=fog.near;uniforms.fogFar.value=fog.far;}else if(fog.isFogExp2){uniforms.fogDensity.value=fog.density;}}function refreshUniformsLambert(uniforms,material){if(material.emissiveMap){uniforms.emissiveMap.value=material.emissiveMap;}}function refreshUniformsPhong(uniforms,material){uniforms.specular.value=material.specular;uniforms.shininess.value=Math.max(material.shininess,1e-4);// to prevent pow( 0.0, 0.0 )
if(material.emissiveMap){uniforms.emissiveMap.value=material.emissiveMap;}if(material.bumpMap){uniforms.bumpMap.value=material.bumpMap;uniforms.bumpScale.value=material.bumpScale;if(material.side===BackSide)uniforms.bumpScale.value*=-1;}if(material.normalMap){uniforms.normalMap.value=material.normalMap;uniforms.normalScale.value.copy(material.normalScale);if(material.side===BackSide)uniforms.normalScale.value.negate();}if(material.displacementMap){uniforms.displacementMap.value=material.displacementMap;uniforms.displacementScale.value=material.displacementScale;uniforms.displacementBias.value=material.displacementBias;}}function refreshUniformsToon(uniforms,material){refreshUniformsPhong(uniforms,material);if(material.gradientMap){uniforms.gradientMap.value=material.gradientMap;}}function refreshUniformsStandard(uniforms,material){uniforms.roughness.value=material.roughness;uniforms.metalness.value=material.metalness;if(material.roughnessMap){uniforms.roughnessMap.value=material.roughnessMap;}if(material.metalnessMap){uniforms.metalnessMap.value=material.metalnessMap;}if(material.emissiveMap){uniforms.emissiveMap.value=material.emissiveMap;}if(material.bumpMap){uniforms.bumpMap.value=material.bumpMap;uniforms.bumpScale.value=material.bumpScale;if(material.side===BackSide)uniforms.bumpScale.value*=-1;}if(material.normalMap){uniforms.normalMap.value=material.normalMap;uniforms.normalScale.value.copy(material.normalScale);if(material.side===BackSide)uniforms.normalScale.value.negate();}if(material.displacementMap){uniforms.displacementMap.value=material.displacementMap;uniforms.displacementScale.value=material.displacementScale;uniforms.displacementBias.value=material.displacementBias;}if(material.envMap){//uniforms.envMap.value = material.envMap; // part of uniforms common
uniforms.envMapIntensity.value=material.envMapIntensity;}}function refreshUniformsPhysical(uniforms,material){refreshUniformsStandard(uniforms,material);uniforms.reflectivity.value=material.reflectivity;// also part of uniforms common
uniforms.clearCoat.value=material.clearCoat;uniforms.clearCoatRoughness.value=material.clearCoatRoughness;}function refreshUniformsMatcap(uniforms,material){if(material.matcap){uniforms.matcap.value=material.matcap;}if(material.bumpMap){uniforms.bumpMap.value=material.bumpMap;uniforms.bumpScale.value=material.bumpScale;if(material.side===BackSide)uniforms.bumpScale.value*=-1;}if(material.normalMap){uniforms.normalMap.value=material.normalMap;uniforms.normalScale.value.copy(material.normalScale);if(material.side===BackSide)uniforms.normalScale.value.negate();}if(material.displacementMap){uniforms.displacementMap.value=material.displacementMap;uniforms.displacementScale.value=material.displacementScale;uniforms.displacementBias.value=material.displacementBias;}}function refreshUniformsDepth(uniforms,material){if(material.displacementMap){uniforms.displacementMap.value=material.displacementMap;uniforms.displacementScale.value=material.displacementScale;uniforms.displacementBias.value=material.displacementBias;}}function refreshUniformsDistance(uniforms,material){if(material.displacementMap){uniforms.displacementMap.value=material.displacementMap;uniforms.displacementScale.value=material.displacementScale;uniforms.displacementBias.value=material.displacementBias;}uniforms.referencePosition.value.copy(material.referencePosition);uniforms.nearDistance.value=material.nearDistance;uniforms.farDistance.value=material.farDistance;}function refreshUniformsNormal(uniforms,material){if(material.bumpMap){uniforms.bumpMap.value=material.bumpMap;uniforms.bumpScale.value=material.bumpScale;if(material.side===BackSide)uniforms.bumpScale.value*=-1;}if(material.normalMap){uniforms.normalMap.value=material.normalMap;uniforms.normalScale.value.copy(material.normalScale);if(material.side===BackSide)uniforms.normalScale.value.negate();}if(material.displacementMap){uniforms.displacementMap.value=material.displacementMap;uniforms.displacementScale.value=material.displacementScale;uniforms.displacementBias.value=material.displacementBias;}}// If uniforms are marked as clean, they don't need to be loaded to the GPU.
function markUniformsLightsNeedsUpdate(uniforms,value){uniforms.ambientLightColor.needsUpdate=value;uniforms.directionalLights.needsUpdate=value;uniforms.pointLights.needsUpdate=value;uniforms.spotLights.needsUpdate=value;uniforms.rectAreaLights.needsUpdate=value;uniforms.hemisphereLights.needsUpdate=value;}// Textures
function allocTextureUnit(){var textureUnit=_usedTextureUnits;if(textureUnit>=capabilities.maxTextures){console.warn('THREE.WebGLRenderer: Trying to use '+textureUnit+' texture units while this GPU supports only '+capabilities.maxTextures);}_usedTextureUnits+=1;return textureUnit;}this.allocTextureUnit=allocTextureUnit;// this.setTexture2D = setTexture2D;
this.setTexture2D=function(){var warned=false;// backwards compatibility: peel texture.texture
return function setTexture2D(texture,slot){if(texture&&texture.isWebGLRenderTarget){if(!warned){console.warn("THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.");warned=true;}texture=texture.texture;}textures.setTexture2D(texture,slot);};}();this.setTexture3D=function(){// backwards compatibility: peel texture.texture
return function setTexture3D(texture,slot){textures.setTexture3D(texture,slot);};}();this.setTexture=function(){var warned=false;return function setTexture(texture,slot){if(!warned){console.warn("THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.");warned=true;}textures.setTexture2D(texture,slot);};}();this.setTextureCube=function(){var warned=false;return function setTextureCube(texture,slot){// backwards compatibility: peel texture.texture
if(texture&&texture.isWebGLRenderTargetCube){if(!warned){console.warn("THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.");warned=true;}texture=texture.texture;}// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture
// TODO: unify these code paths
if(texture&&texture.isCubeTexture||Array.isArray(texture.image)&&texture.image.length===6){// CompressedTexture can have Array in image :/
// this function alone should take care of cube textures
textures.setTextureCube(texture,slot);}else{// assumed: texture property of THREE.WebGLRenderTargetCube
textures.setTextureCubeDynamic(texture,slot);}};}();//
this.setFramebuffer=function(value){_framebuffer=value;};this.getRenderTarget=function(){return _currentRenderTarget;};this.setRenderTarget=function(renderTarget){_currentRenderTarget=renderTarget;if(renderTarget&&properties.get(renderTarget).__webglFramebuffer===undefined){textures.setupRenderTarget(renderTarget);}var framebuffer=_framebuffer;var isCube=false;if(renderTarget){var __webglFramebuffer=properties.get(renderTarget).__webglFramebuffer;if(renderTarget.isWebGLRenderTargetCube){framebuffer=__webglFramebuffer[renderTarget.activeCubeFace];isCube=true;}else{framebuffer=__webglFramebuffer;}_currentViewport.copy(renderTarget.viewport);_currentScissor.copy(renderTarget.scissor);_currentScissorTest=renderTarget.scissorTest;}else{_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio);_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio);_currentScissorTest=_scissorTest;}if(_currentFramebuffer!==framebuffer){_gl.bindFramebuffer(_gl.FRAMEBUFFER,framebuffer);_currentFramebuffer=framebuffer;}state.viewport(_currentViewport);state.scissor(_currentScissor);state.setScissorTest(_currentScissorTest);if(isCube){var textureProperties=properties.get(renderTarget.texture);_gl.framebufferTexture2D(_gl.FRAMEBUFFER,_gl.COLOR_ATTACHMENT0,_gl.TEXTURE_CUBE_MAP_POSITIVE_X+renderTarget.activeCubeFace,textureProperties.__webglTexture,renderTarget.activeMipMapLevel);}};this.readRenderTargetPixels=function(renderTarget,x,y,width,height,buffer){if(!(renderTarget&&renderTarget.isWebGLRenderTarget)){console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');return;}var framebuffer=properties.get(renderTarget).__webglFramebuffer;if(framebuffer){var restore=false;if(framebuffer!==_currentFramebuffer){_gl.bindFramebuffer(_gl.FRAMEBUFFER,framebuffer);restore=true;}try{var texture=renderTarget.texture;var textureFormat=texture.format;var textureType=texture.type;if(textureFormat!==RGBAFormat&&utils.convert(textureFormat)!==_gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_FORMAT)){console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.');return;}if(textureType!==UnsignedByteType&&utils.convert(textureType)!==_gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_TYPE)&&// IE11, Edge and Chrome Mac < 52 (#9513)
!(textureType===FloatType&&(capabilities.isWebGL2||extensions.get('OES_texture_float')||extensions.get('WEBGL_color_buffer_float')))&&// Chrome Mac >= 52 and Firefox
!(textureType===HalfFloatType&&(capabilities.isWebGL2?extensions.get('EXT_color_buffer_float'):extensions.get('EXT_color_buffer_half_float')))){console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.');return;}if(_gl.checkFramebufferStatus(_gl.FRAMEBUFFER)===_gl.FRAMEBUFFER_COMPLETE){// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)
if(x>=0&&x<=renderTarget.width-width&&y>=0&&y<=renderTarget.height-height){_gl.readPixels(x,y,width,height,utils.convert(textureFormat),utils.convert(textureType),buffer);}}else{console.error('THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.');}}finally{if(restore){_gl.bindFramebuffer(_gl.FRAMEBUFFER,_currentFramebuffer);}}}};this.copyFramebufferToTexture=function(position,texture,level){var width=texture.image.width;var height=texture.image.height;var glFormat=utils.convert(texture.format);this.setTexture2D(texture,0);_gl.copyTexImage2D(_gl.TEXTURE_2D,level||0,glFormat,position.x,position.y,width,height,0);};this.copyTextureToTexture=function(position,srcTexture,dstTexture,level){var width=srcTexture.image.width;var height=srcTexture.image.height;var glFormat=utils.convert(dstTexture.format);var glType=utils.convert(dstTexture.type);this.setTexture2D(dstTexture,0);if(srcTexture.isDataTexture){_gl.texSubImage2D(_gl.TEXTURE_2D,level||0,position.x,position.y,width,height,glFormat,glType,srcTexture.image.data);}else{_gl.texSubImage2D(_gl.TEXTURE_2D,level||0,position.x,position.y,glFormat,glType,srcTexture.image);}};}/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */function FogExp2(color,density){this.name='';this.color=new Color(color);this.density=density!==undefined?density:0.00025;}FogExp2.prototype.isFogExp2=true;FogExp2.prototype.clone=function(){return new FogExp2(this.color,this.density);};FogExp2.prototype.toJSON=function()/* meta */{return{type:'FogExp2',color:this.color.getHex(),density:this.density};};/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */function Fog(color,near,far){this.name='';this.color=new Color(color);this.near=near!==undefined?near:1;this.far=far!==undefined?far:1000;}Fog.prototype.isFog=true;Fog.prototype.clone=function(){return new Fog(this.color,this.near,this.far);};Fog.prototype.toJSON=function()/* meta */{return{type:'Fog',color:this.color.getHex(),near:this.near,far:this.far};};/**
	 * @author mrdoob / http://mrdoob.com/
	 */function Scene(){Object3D.call(this);this.type='Scene';this.background=null;this.fog=null;this.overrideMaterial=null;this.autoUpdate=true;// checked by the renderer
}Scene.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Scene,copy:function copy(source,recursive){Object3D.prototype.copy.call(this,source,recursive);if(source.background!==null)this.background=source.background.clone();if(source.fog!==null)this.fog=source.fog.clone();if(source.overrideMaterial!==null)this.overrideMaterial=source.overrideMaterial.clone();this.autoUpdate=source.autoUpdate;this.matrixAutoUpdate=source.matrixAutoUpdate;return this;},toJSON:function toJSON(meta){var data=Object3D.prototype.toJSON.call(this,meta);if(this.background!==null)data.object.background=this.background.toJSON(meta);if(this.fog!==null)data.object.fog=this.fog.toJSON();return data;}});/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */function InterleavedBuffer(array,stride){this.array=array;this.stride=stride;this.count=array!==undefined?array.length/stride:0;this.dynamic=false;this.updateRange={offset:0,count:-1};this.version=0;}Object.defineProperty(InterleavedBuffer.prototype,'needsUpdate',{set:function set(value){if(value===true)this.version++;}});Object.assign(InterleavedBuffer.prototype,{isInterleavedBuffer:true,onUploadCallback:function onUploadCallback(){},setArray:function setArray(array){if(Array.isArray(array)){throw new TypeError('THREE.BufferAttribute: array should be a Typed Array.');}this.count=array!==undefined?array.length/this.stride:0;this.array=array;return this;},setDynamic:function setDynamic(value){this.dynamic=value;return this;},copy:function copy(source){this.array=new source.array.constructor(source.array);this.count=source.count;this.stride=source.stride;this.dynamic=source.dynamic;return this;},copyAt:function copyAt(index1,attribute,index2){index1*=this.stride;index2*=attribute.stride;for(var i=0,l=this.stride;i<l;i++){this.array[index1+i]=attribute.array[index2+i];}return this;},set:function set(value,offset){if(offset===undefined)offset=0;this.array.set(value,offset);return this;},clone:function clone(){return new this.constructor().copy(this);},onUpload:function onUpload(callback){this.onUploadCallback=callback;return this;}});/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */function InterleavedBufferAttribute(interleavedBuffer,itemSize,offset,normalized){this.data=interleavedBuffer;this.itemSize=itemSize;this.offset=offset;this.normalized=normalized===true;}Object.defineProperties(InterleavedBufferAttribute.prototype,{count:{get:function get(){return this.data.count;}},array:{get:function get(){return this.data.array;}}});Object.assign(InterleavedBufferAttribute.prototype,{isInterleavedBufferAttribute:true,setX:function setX(index,x){this.data.array[index*this.data.stride+this.offset]=x;return this;},setY:function setY(index,y){this.data.array[index*this.data.stride+this.offset+1]=y;return this;},setZ:function setZ(index,z){this.data.array[index*this.data.stride+this.offset+2]=z;return this;},setW:function setW(index,w){this.data.array[index*this.data.stride+this.offset+3]=w;return this;},getX:function getX(index){return this.data.array[index*this.data.stride+this.offset];},getY:function getY(index){return this.data.array[index*this.data.stride+this.offset+1];},getZ:function getZ(index){return this.data.array[index*this.data.stride+this.offset+2];},getW:function getW(index){return this.data.array[index*this.data.stride+this.offset+3];},setXY:function setXY(index,x,y){index=index*this.data.stride+this.offset;this.data.array[index+0]=x;this.data.array[index+1]=y;return this;},setXYZ:function setXYZ(index,x,y,z){index=index*this.data.stride+this.offset;this.data.array[index+0]=x;this.data.array[index+1]=y;this.data.array[index+2]=z;return this;},setXYZW:function setXYZW(index,x,y,z,w){index=index*this.data.stride+this.offset;this.data.array[index+0]=x;this.data.array[index+1]=y;this.data.array[index+2]=z;this.data.array[index+3]=w;return this;}});/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  map: new THREE.Texture( <Image> ),
	 *  rotation: <float>,
	 *  sizeAttenuation: <bool>
	 * }
	 */function SpriteMaterial(parameters){Material.call(this);this.type='SpriteMaterial';this.color=new Color(0xffffff);this.map=null;this.rotation=0;this.sizeAttenuation=true;this.lights=false;this.transparent=true;this.setValues(parameters);}SpriteMaterial.prototype=Object.create(Material.prototype);SpriteMaterial.prototype.constructor=SpriteMaterial;SpriteMaterial.prototype.isSpriteMaterial=true;SpriteMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.color.copy(source.color);this.map=source.map;this.rotation=source.rotation;this.sizeAttenuation=source.sizeAttenuation;return this;};/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */var geometry;function Sprite(material){Object3D.call(this);this.type='Sprite';if(geometry===undefined){geometry=new BufferGeometry();var float32Array=new Float32Array([-0.5,-0.5,0,0,0,0.5,-0.5,0,1,0,0.5,0.5,0,1,1,-0.5,0.5,0,0,1]);var interleavedBuffer=new InterleavedBuffer(float32Array,5);geometry.setIndex([0,1,2,0,2,3]);geometry.addAttribute('position',new InterleavedBufferAttribute(interleavedBuffer,3,0,false));geometry.addAttribute('uv',new InterleavedBufferAttribute(interleavedBuffer,2,3,false));}this.geometry=geometry;this.material=material!==undefined?material:new SpriteMaterial();this.center=new Vector2(0.5,0.5);}Sprite.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Sprite,isSprite:true,raycast:function(){var intersectPoint=new Vector3();var worldScale=new Vector3();var mvPosition=new Vector3();var alignedPosition=new Vector2();var rotatedPosition=new Vector2();var viewWorldMatrix=new Matrix4();var vA=new Vector3();var vB=new Vector3();var vC=new Vector3();var uvA=new Vector2();var uvB=new Vector2();var uvC=new Vector2();function transformVertex(vertexPosition,mvPosition,center,scale,sin,cos){// compute position in camera space
alignedPosition.subVectors(vertexPosition,center).addScalar(0.5).multiply(scale);// to check if rotation is not zero
if(sin!==undefined){rotatedPosition.x=cos*alignedPosition.x-sin*alignedPosition.y;rotatedPosition.y=sin*alignedPosition.x+cos*alignedPosition.y;}else{rotatedPosition.copy(alignedPosition);}vertexPosition.copy(mvPosition);vertexPosition.x+=rotatedPosition.x;vertexPosition.y+=rotatedPosition.y;// transform to world space
vertexPosition.applyMatrix4(viewWorldMatrix);}return function raycast(raycaster,intersects){worldScale.setFromMatrixScale(this.matrixWorld);viewWorldMatrix.getInverse(this.modelViewMatrix).premultiply(this.matrixWorld);mvPosition.setFromMatrixPosition(this.modelViewMatrix);var rotation=this.material.rotation;var sin,cos;if(rotation!==0){cos=Math.cos(rotation);sin=Math.sin(rotation);}var center=this.center;transformVertex(vA.set(-0.5,-0.5,0),mvPosition,center,worldScale,sin,cos);transformVertex(vB.set(0.5,-0.5,0),mvPosition,center,worldScale,sin,cos);transformVertex(vC.set(0.5,0.5,0),mvPosition,center,worldScale,sin,cos);uvA.set(0,0);uvB.set(1,0);uvC.set(1,1);// check first triangle
var intersect=raycaster.ray.intersectTriangle(vA,vB,vC,false,intersectPoint);if(intersect===null){// check second triangle
transformVertex(vB.set(-0.5,0.5,0),mvPosition,center,worldScale,sin,cos);uvB.set(0,1);intersect=raycaster.ray.intersectTriangle(vA,vC,vB,false,intersectPoint);if(intersect===null){return;}}var distance=raycaster.ray.origin.distanceTo(intersectPoint);if(distance<raycaster.near||distance>raycaster.far)return;intersects.push({distance:distance,point:intersectPoint.clone(),uv:Triangle.getUV(intersectPoint,vA,vB,vC,uvA,uvB,uvC,new Vector2()),face:null,object:this});};}(),clone:function clone(){return new this.constructor(this.material).copy(this);},copy:function copy(source){Object3D.prototype.copy.call(this,source);if(source.center!==undefined)this.center.copy(source.center);return this;}});/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */function LOD(){Object3D.call(this);this.type='LOD';Object.defineProperties(this,{levels:{enumerable:true,value:[]}});}LOD.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:LOD,copy:function copy(source){Object3D.prototype.copy.call(this,source,false);var levels=source.levels;for(var i=0,l=levels.length;i<l;i++){var level=levels[i];this.addLevel(level.object.clone(),level.distance);}return this;},addLevel:function addLevel(object,distance){if(distance===undefined)distance=0;distance=Math.abs(distance);var levels=this.levels;for(var l=0;l<levels.length;l++){if(distance<levels[l].distance){break;}}levels.splice(l,0,{distance:distance,object:object});this.add(object);},getObjectForDistance:function getObjectForDistance(distance){var levels=this.levels;for(var i=1,l=levels.length;i<l;i++){if(distance<levels[i].distance){break;}}return levels[i-1].object;},raycast:function(){var matrixPosition=new Vector3();return function raycast(raycaster,intersects){matrixPosition.setFromMatrixPosition(this.matrixWorld);var distance=raycaster.ray.origin.distanceTo(matrixPosition);this.getObjectForDistance(distance).raycast(raycaster,intersects);};}(),update:function(){var v1=new Vector3();var v2=new Vector3();return function update(camera){var levels=this.levels;if(levels.length>1){v1.setFromMatrixPosition(camera.matrixWorld);v2.setFromMatrixPosition(this.matrixWorld);var distance=v1.distanceTo(v2);levels[0].object.visible=true;for(var i=1,l=levels.length;i<l;i++){if(distance>=levels[i].distance){levels[i-1].object.visible=false;levels[i].object.visible=true;}else{break;}}for(;i<l;i++){levels[i].object.visible=false;}}};}(),toJSON:function toJSON(meta){var data=Object3D.prototype.toJSON.call(this,meta);data.object.levels=[];var levels=this.levels;for(var i=0,l=levels.length;i<l;i++){var level=levels[i];data.object.levels.push({object:level.object.uuid,distance:level.distance});}return data;}});/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author michael guerrero / http://realitymeltdown.com
	 * @author ikerr / http://verold.com
	 */function Skeleton(bones,boneInverses){// copy the bone array
bones=bones||[];this.bones=bones.slice(0);this.boneMatrices=new Float32Array(this.bones.length*16);// use the supplied bone inverses or calculate the inverses
if(boneInverses===undefined){this.calculateInverses();}else{if(this.bones.length===boneInverses.length){this.boneInverses=boneInverses.slice(0);}else{console.warn('THREE.Skeleton boneInverses is the wrong length.');this.boneInverses=[];for(var i=0,il=this.bones.length;i<il;i++){this.boneInverses.push(new Matrix4());}}}}Object.assign(Skeleton.prototype,{calculateInverses:function calculateInverses(){this.boneInverses=[];for(var i=0,il=this.bones.length;i<il;i++){var inverse=new Matrix4();if(this.bones[i]){inverse.getInverse(this.bones[i].matrixWorld);}this.boneInverses.push(inverse);}},pose:function pose(){var bone,i,il;// recover the bind-time world matrices
for(i=0,il=this.bones.length;i<il;i++){bone=this.bones[i];if(bone){bone.matrixWorld.getInverse(this.boneInverses[i]);}}// compute the local matrices, positions, rotations and scales
for(i=0,il=this.bones.length;i<il;i++){bone=this.bones[i];if(bone){if(bone.parent&&bone.parent.isBone){bone.matrix.getInverse(bone.parent.matrixWorld);bone.matrix.multiply(bone.matrixWorld);}else{bone.matrix.copy(bone.matrixWorld);}bone.matrix.decompose(bone.position,bone.quaternion,bone.scale);}}},update:function(){var offsetMatrix=new Matrix4();var identityMatrix=new Matrix4();return function update(){var bones=this.bones;var boneInverses=this.boneInverses;var boneMatrices=this.boneMatrices;var boneTexture=this.boneTexture;// flatten bone matrices to array
for(var i=0,il=bones.length;i<il;i++){// compute the offset between the current and the original transform
var matrix=bones[i]?bones[i].matrixWorld:identityMatrix;offsetMatrix.multiplyMatrices(matrix,boneInverses[i]);offsetMatrix.toArray(boneMatrices,i*16);}if(boneTexture!==undefined){boneTexture.needsUpdate=true;}};}(),clone:function clone(){return new Skeleton(this.bones,this.boneInverses);},getBoneByName:function getBoneByName(name){for(var i=0,il=this.bones.length;i<il;i++){var bone=this.bones[i];if(bone.name===name){return bone;}}return undefined;}});/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author ikerr / http://verold.com
	 */function Bone(){Object3D.call(this);this.type='Bone';}Bone.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Bone,isBone:true});/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author ikerr / http://verold.com
	 */function SkinnedMesh(geometry,material){Mesh.call(this,geometry,material);this.type='SkinnedMesh';this.bindMode='attached';this.bindMatrix=new Matrix4();this.bindMatrixInverse=new Matrix4();var bones=this.initBones();var skeleton=new Skeleton(bones);this.bind(skeleton,this.matrixWorld);this.normalizeSkinWeights();}SkinnedMesh.prototype=Object.assign(Object.create(Mesh.prototype),{constructor:SkinnedMesh,isSkinnedMesh:true,initBones:function initBones(){var bones=[],bone,gbone;var i,il;if(this.geometry&&this.geometry.bones!==undefined){// first, create array of 'Bone' objects from geometry data
for(i=0,il=this.geometry.bones.length;i<il;i++){gbone=this.geometry.bones[i];// create new 'Bone' object
bone=new Bone();bones.push(bone);// apply values
bone.name=gbone.name;bone.position.fromArray(gbone.pos);bone.quaternion.fromArray(gbone.rotq);if(gbone.scl!==undefined)bone.scale.fromArray(gbone.scl);}// second, create bone hierarchy
for(i=0,il=this.geometry.bones.length;i<il;i++){gbone=this.geometry.bones[i];if(gbone.parent!==-1&&gbone.parent!==null&&bones[gbone.parent]!==undefined){// subsequent bones in the hierarchy
bones[gbone.parent].add(bones[i]);}else{// topmost bone, immediate child of the skinned mesh
this.add(bones[i]);}}}// now the bones are part of the scene graph and children of the skinned mesh.
// let's update the corresponding matrices
this.updateMatrixWorld(true);return bones;},bind:function bind(skeleton,bindMatrix){this.skeleton=skeleton;if(bindMatrix===undefined){this.updateMatrixWorld(true);this.skeleton.calculateInverses();bindMatrix=this.matrixWorld;}this.bindMatrix.copy(bindMatrix);this.bindMatrixInverse.getInverse(bindMatrix);},pose:function pose(){this.skeleton.pose();},normalizeSkinWeights:function normalizeSkinWeights(){var scale,i;if(this.geometry&&this.geometry.isGeometry){for(i=0;i<this.geometry.skinWeights.length;i++){var sw=this.geometry.skinWeights[i];scale=1.0/sw.manhattanLength();if(scale!==Infinity){sw.multiplyScalar(scale);}else{sw.set(1,0,0,0);// do something reasonable
}}}else if(this.geometry&&this.geometry.isBufferGeometry){var vec=new Vector4();var skinWeight=this.geometry.attributes.skinWeight;for(i=0;i<skinWeight.count;i++){vec.x=skinWeight.getX(i);vec.y=skinWeight.getY(i);vec.z=skinWeight.getZ(i);vec.w=skinWeight.getW(i);scale=1.0/vec.manhattanLength();if(scale!==Infinity){vec.multiplyScalar(scale);}else{vec.set(1,0,0,0);// do something reasonable
}skinWeight.setXYZW(i,vec.x,vec.y,vec.z,vec.w);}}},updateMatrixWorld:function updateMatrixWorld(force){Mesh.prototype.updateMatrixWorld.call(this,force);if(this.bindMode==='attached'){this.bindMatrixInverse.getInverse(this.matrixWorld);}else if(this.bindMode==='detached'){this.bindMatrixInverse.getInverse(this.bindMatrix);}else{console.warn('THREE.SkinnedMesh: Unrecognized bindMode: '+this.bindMode);}},clone:function clone(){return new this.constructor(this.geometry,this.material).copy(this);}});/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  linewidth: <float>,
	 *  linecap: "round",
	 *  linejoin: "round"
	 * }
	 */function LineBasicMaterial(parameters){Material.call(this);this.type='LineBasicMaterial';this.color=new Color(0xffffff);this.linewidth=1;this.linecap='round';this.linejoin='round';this.lights=false;this.setValues(parameters);}LineBasicMaterial.prototype=Object.create(Material.prototype);LineBasicMaterial.prototype.constructor=LineBasicMaterial;LineBasicMaterial.prototype.isLineBasicMaterial=true;LineBasicMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.color.copy(source.color);this.linewidth=source.linewidth;this.linecap=source.linecap;this.linejoin=source.linejoin;return this;};/**
	 * @author mrdoob / http://mrdoob.com/
	 */function Line(geometry,material,mode){if(mode===1){console.error('THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.');}Object3D.call(this);this.type='Line';this.geometry=geometry!==undefined?geometry:new BufferGeometry();this.material=material!==undefined?material:new LineBasicMaterial({color:Math.random()*0xffffff});}Line.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Line,isLine:true,computeLineDistances:function(){var start=new Vector3();var end=new Vector3();return function computeLineDistances(){var geometry=this.geometry;if(geometry.isBufferGeometry){// we assume non-indexed geometry
if(geometry.index===null){var positionAttribute=geometry.attributes.position;var lineDistances=[0];for(var i=1,l=positionAttribute.count;i<l;i++){start.fromBufferAttribute(positionAttribute,i-1);end.fromBufferAttribute(positionAttribute,i);lineDistances[i]=lineDistances[i-1];lineDistances[i]+=start.distanceTo(end);}geometry.addAttribute('lineDistance',new Float32BufferAttribute(lineDistances,1));}else{console.warn('THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');}}else if(geometry.isGeometry){var vertices=geometry.vertices;var lineDistances=geometry.lineDistances;lineDistances[0]=0;for(var i=1,l=vertices.length;i<l;i++){lineDistances[i]=lineDistances[i-1];lineDistances[i]+=vertices[i-1].distanceTo(vertices[i]);}}return this;};}(),raycast:function(){var inverseMatrix=new Matrix4();var ray=new Ray();var sphere=new Sphere();return function raycast(raycaster,intersects){var precision=raycaster.linePrecision;var geometry=this.geometry;var matrixWorld=this.matrixWorld;// Checking boundingSphere distance to ray
if(geometry.boundingSphere===null)geometry.computeBoundingSphere();sphere.copy(geometry.boundingSphere);sphere.applyMatrix4(matrixWorld);sphere.radius+=precision;if(raycaster.ray.intersectsSphere(sphere)===false)return;//
inverseMatrix.getInverse(matrixWorld);ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);var localPrecision=precision/((this.scale.x+this.scale.y+this.scale.z)/3);var localPrecisionSq=localPrecision*localPrecision;var vStart=new Vector3();var vEnd=new Vector3();var interSegment=new Vector3();var interRay=new Vector3();var step=this&&this.isLineSegments?2:1;if(geometry.isBufferGeometry){var index=geometry.index;var attributes=geometry.attributes;var positions=attributes.position.array;if(index!==null){var indices=index.array;for(var i=0,l=indices.length-1;i<l;i+=step){var a=indices[i];var b=indices[i+1];vStart.fromArray(positions,a*3);vEnd.fromArray(positions,b*3);var distSq=ray.distanceSqToSegment(vStart,vEnd,interRay,interSegment);if(distSq>localPrecisionSq)continue;interRay.applyMatrix4(this.matrixWorld);//Move back to world space for distance calculation
var distance=raycaster.ray.origin.distanceTo(interRay);if(distance<raycaster.near||distance>raycaster.far)continue;intersects.push({distance:distance,// What do we want? intersection point on the ray or on the segment??
// point: raycaster.ray.at( distance ),
point:interSegment.clone().applyMatrix4(this.matrixWorld),index:i,face:null,faceIndex:null,object:this});}}else{for(var i=0,l=positions.length/3-1;i<l;i+=step){vStart.fromArray(positions,3*i);vEnd.fromArray(positions,3*i+3);var distSq=ray.distanceSqToSegment(vStart,vEnd,interRay,interSegment);if(distSq>localPrecisionSq)continue;interRay.applyMatrix4(this.matrixWorld);//Move back to world space for distance calculation
var distance=raycaster.ray.origin.distanceTo(interRay);if(distance<raycaster.near||distance>raycaster.far)continue;intersects.push({distance:distance,// What do we want? intersection point on the ray or on the segment??
// point: raycaster.ray.at( distance ),
point:interSegment.clone().applyMatrix4(this.matrixWorld),index:i,face:null,faceIndex:null,object:this});}}}else if(geometry.isGeometry){var vertices=geometry.vertices;var nbVertices=vertices.length;for(var i=0;i<nbVertices-1;i+=step){var distSq=ray.distanceSqToSegment(vertices[i],vertices[i+1],interRay,interSegment);if(distSq>localPrecisionSq)continue;interRay.applyMatrix4(this.matrixWorld);//Move back to world space for distance calculation
var distance=raycaster.ray.origin.distanceTo(interRay);if(distance<raycaster.near||distance>raycaster.far)continue;intersects.push({distance:distance,// What do we want? intersection point on the ray or on the segment??
// point: raycaster.ray.at( distance ),
point:interSegment.clone().applyMatrix4(this.matrixWorld),index:i,face:null,faceIndex:null,object:this});}}};}(),clone:function clone(){return new this.constructor(this.geometry,this.material).copy(this);}});/**
	 * @author mrdoob / http://mrdoob.com/
	 */function LineSegments(geometry,material){Line.call(this,geometry,material);this.type='LineSegments';}LineSegments.prototype=Object.assign(Object.create(Line.prototype),{constructor:LineSegments,isLineSegments:true,computeLineDistances:function(){var start=new Vector3();var end=new Vector3();return function computeLineDistances(){var geometry=this.geometry;if(geometry.isBufferGeometry){// we assume non-indexed geometry
if(geometry.index===null){var positionAttribute=geometry.attributes.position;var lineDistances=[];for(var i=0,l=positionAttribute.count;i<l;i+=2){start.fromBufferAttribute(positionAttribute,i);end.fromBufferAttribute(positionAttribute,i+1);lineDistances[i]=i===0?0:lineDistances[i-1];lineDistances[i+1]=lineDistances[i]+start.distanceTo(end);}geometry.addAttribute('lineDistance',new Float32BufferAttribute(lineDistances,1));}else{console.warn('THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');}}else if(geometry.isGeometry){var vertices=geometry.vertices;var lineDistances=geometry.lineDistances;for(var i=0,l=vertices.length;i<l;i+=2){start.copy(vertices[i]);end.copy(vertices[i+1]);lineDistances[i]=i===0?0:lineDistances[i-1];lineDistances[i+1]=lineDistances[i]+start.distanceTo(end);}}return this;};}()});/**
	 * @author mgreter / http://github.com/mgreter
	 */function LineLoop(geometry,material){Line.call(this,geometry,material);this.type='LineLoop';}LineLoop.prototype=Object.assign(Object.create(Line.prototype),{constructor:LineLoop,isLineLoop:true});/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  size: <float>,
	 *  sizeAttenuation: <bool>
	 *
	 *  morphTargets: <bool>
	 * }
	 */function PointsMaterial(parameters){Material.call(this);this.type='PointsMaterial';this.color=new Color(0xffffff);this.map=null;this.size=1;this.sizeAttenuation=true;this.morphTargets=false;this.lights=false;this.setValues(parameters);}PointsMaterial.prototype=Object.create(Material.prototype);PointsMaterial.prototype.constructor=PointsMaterial;PointsMaterial.prototype.isPointsMaterial=true;PointsMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.color.copy(source.color);this.map=source.map;this.size=source.size;this.sizeAttenuation=source.sizeAttenuation;this.morphTargets=source.morphTargets;return this;};/**
	 * @author alteredq / http://alteredqualia.com/
	 */function Points(geometry,material){Object3D.call(this);this.type='Points';this.geometry=geometry!==undefined?geometry:new BufferGeometry();this.material=material!==undefined?material:new PointsMaterial({color:Math.random()*0xffffff});}Points.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Points,isPoints:true,raycast:function(){var inverseMatrix=new Matrix4();var ray=new Ray();var sphere=new Sphere();return function raycast(raycaster,intersects){var object=this;var geometry=this.geometry;var matrixWorld=this.matrixWorld;var threshold=raycaster.params.Points.threshold;// Checking boundingSphere distance to ray
if(geometry.boundingSphere===null)geometry.computeBoundingSphere();sphere.copy(geometry.boundingSphere);sphere.applyMatrix4(matrixWorld);sphere.radius+=threshold;if(raycaster.ray.intersectsSphere(sphere)===false)return;//
inverseMatrix.getInverse(matrixWorld);ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);var localThreshold=threshold/((this.scale.x+this.scale.y+this.scale.z)/3);var localThresholdSq=localThreshold*localThreshold;var position=new Vector3();var intersectPoint=new Vector3();function testPoint(point,index){var rayPointDistanceSq=ray.distanceSqToPoint(point);if(rayPointDistanceSq<localThresholdSq){ray.closestPointToPoint(point,intersectPoint);intersectPoint.applyMatrix4(matrixWorld);var distance=raycaster.ray.origin.distanceTo(intersectPoint);if(distance<raycaster.near||distance>raycaster.far)return;intersects.push({distance:distance,distanceToRay:Math.sqrt(rayPointDistanceSq),point:intersectPoint.clone(),index:index,face:null,object:object});}}if(geometry.isBufferGeometry){var index=geometry.index;var attributes=geometry.attributes;var positions=attributes.position.array;if(index!==null){var indices=index.array;for(var i=0,il=indices.length;i<il;i++){var a=indices[i];position.fromArray(positions,a*3);testPoint(position,a);}}else{for(var i=0,l=positions.length/3;i<l;i++){position.fromArray(positions,i*3);testPoint(position,i);}}}else{var vertices=geometry.vertices;for(var i=0,l=vertices.length;i<l;i++){testPoint(vertices[i],i);}}};}(),clone:function clone(){return new this.constructor(this.geometry,this.material).copy(this);}});/**
	 * @author mrdoob / http://mrdoob.com/
	 */function VideoTexture(video,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy){Texture.call(this,video,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy);this.generateMipmaps=false;}VideoTexture.prototype=Object.assign(Object.create(Texture.prototype),{constructor:VideoTexture,isVideoTexture:true,update:function update(){var video=this.image;if(video.readyState>=video.HAVE_CURRENT_DATA){this.needsUpdate=true;}}});/**
	 * @author alteredq / http://alteredqualia.com/
	 */function CompressedTexture(mipmaps,width,height,format,type,mapping,wrapS,wrapT,magFilter,minFilter,anisotropy,encoding){Texture.call(this,null,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding);this.image={width:width,height:height};this.mipmaps=mipmaps;// no flipping for cube textures
// (also flipping doesn't work for compressed textures )
this.flipY=false;// can't generate mipmaps for compressed textures
// mips must be embedded in DDS files
this.generateMipmaps=false;}CompressedTexture.prototype=Object.create(Texture.prototype);CompressedTexture.prototype.constructor=CompressedTexture;CompressedTexture.prototype.isCompressedTexture=true;/**
	 * @author mrdoob / http://mrdoob.com/
	 */function CanvasTexture(canvas,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy){Texture.call(this,canvas,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy);this.needsUpdate=true;}CanvasTexture.prototype=Object.create(Texture.prototype);CanvasTexture.prototype.constructor=CanvasTexture;CanvasTexture.prototype.isCanvasTexture=true;/**
	 * @author Matt DesLauriers / @mattdesl
	 * @author atix / arthursilber.de
	 */function DepthTexture(width,height,type,mapping,wrapS,wrapT,magFilter,minFilter,anisotropy,format){format=format!==undefined?format:DepthFormat;if(format!==DepthFormat&&format!==DepthStencilFormat){throw new Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat');}if(type===undefined&&format===DepthFormat)type=UnsignedShortType;if(type===undefined&&format===DepthStencilFormat)type=UnsignedInt248Type;Texture.call(this,null,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy);this.image={width:width,height:height};this.magFilter=magFilter!==undefined?magFilter:NearestFilter;this.minFilter=minFilter!==undefined?minFilter:NearestFilter;this.flipY=false;this.generateMipmaps=false;}DepthTexture.prototype=Object.create(Texture.prototype);DepthTexture.prototype.constructor=DepthTexture;DepthTexture.prototype.isDepthTexture=true;/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */function WireframeGeometry(geometry){BufferGeometry.call(this);this.type='WireframeGeometry';// buffer
var vertices=[];// helper variables
var i,j,l,o,ol;var edge=[0,0],edges={},e,edge1,edge2;var key,keys=['a','b','c'];var vertex;// different logic for Geometry and BufferGeometry
if(geometry&&geometry.isGeometry){// create a data structure that contains all edges without duplicates
var faces=geometry.faces;for(i=0,l=faces.length;i<l;i++){var face=faces[i];for(j=0;j<3;j++){edge1=face[keys[j]];edge2=face[keys[(j+1)%3]];edge[0]=Math.min(edge1,edge2);// sorting prevents duplicates
edge[1]=Math.max(edge1,edge2);key=edge[0]+','+edge[1];if(edges[key]===undefined){edges[key]={index1:edge[0],index2:edge[1]};}}}// generate vertices
for(key in edges){e=edges[key];vertex=geometry.vertices[e.index1];vertices.push(vertex.x,vertex.y,vertex.z);vertex=geometry.vertices[e.index2];vertices.push(vertex.x,vertex.y,vertex.z);}}else if(geometry&&geometry.isBufferGeometry){var position,indices,groups;var group,start,count;var index1,index2;vertex=new Vector3();if(geometry.index!==null){// indexed BufferGeometry
position=geometry.attributes.position;indices=geometry.index;groups=geometry.groups;if(groups.length===0){groups=[{start:0,count:indices.count,materialIndex:0}];}// create a data structure that contains all eges without duplicates
for(o=0,ol=groups.length;o<ol;++o){group=groups[o];start=group.start;count=group.count;for(i=start,l=start+count;i<l;i+=3){for(j=0;j<3;j++){edge1=indices.getX(i+j);edge2=indices.getX(i+(j+1)%3);edge[0]=Math.min(edge1,edge2);// sorting prevents duplicates
edge[1]=Math.max(edge1,edge2);key=edge[0]+','+edge[1];if(edges[key]===undefined){edges[key]={index1:edge[0],index2:edge[1]};}}}}// generate vertices
for(key in edges){e=edges[key];vertex.fromBufferAttribute(position,e.index1);vertices.push(vertex.x,vertex.y,vertex.z);vertex.fromBufferAttribute(position,e.index2);vertices.push(vertex.x,vertex.y,vertex.z);}}else{// non-indexed BufferGeometry
position=geometry.attributes.position;for(i=0,l=position.count/3;i<l;i++){for(j=0;j<3;j++){// three edges per triangle, an edge is represented as (index1, index2)
// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)
index1=3*i+j;vertex.fromBufferAttribute(position,index1);vertices.push(vertex.x,vertex.y,vertex.z);index2=3*i+(j+1)%3;vertex.fromBufferAttribute(position,index2);vertices.push(vertex.x,vertex.y,vertex.z);}}}}// build geometry
this.addAttribute('position',new Float32BufferAttribute(vertices,3));}WireframeGeometry.prototype=Object.create(BufferGeometry.prototype);WireframeGeometry.prototype.constructor=WireframeGeometry;/**
	 * @author zz85 / https://github.com/zz85
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 * Parametric Surfaces Geometry
	 * based on the brilliant article by @prideout http://prideout.net/blog/?p=44
	 */// ParametricGeometry
function ParametricGeometry(func,slices,stacks){Geometry.call(this);this.type='ParametricGeometry';this.parameters={func:func,slices:slices,stacks:stacks};this.fromBufferGeometry(new ParametricBufferGeometry(func,slices,stacks));this.mergeVertices();}ParametricGeometry.prototype=Object.create(Geometry.prototype);ParametricGeometry.prototype.constructor=ParametricGeometry;// ParametricBufferGeometry
function ParametricBufferGeometry(func,slices,stacks){BufferGeometry.call(this);this.type='ParametricBufferGeometry';this.parameters={func:func,slices:slices,stacks:stacks};// buffers
var indices=[];var vertices=[];var normals=[];var uvs=[];var EPS=0.00001;var normal=new Vector3();var p0=new Vector3(),p1=new Vector3();var pu=new Vector3(),pv=new Vector3();var i,j;if(func.length<3){console.error('THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.');}// generate vertices, normals and uvs
var sliceCount=slices+1;for(i=0;i<=stacks;i++){var v=i/stacks;for(j=0;j<=slices;j++){var u=j/slices;// vertex
func(u,v,p0);vertices.push(p0.x,p0.y,p0.z);// normal
// approximate tangent vectors via finite differences
if(u-EPS>=0){func(u-EPS,v,p1);pu.subVectors(p0,p1);}else{func(u+EPS,v,p1);pu.subVectors(p1,p0);}if(v-EPS>=0){func(u,v-EPS,p1);pv.subVectors(p0,p1);}else{func(u,v+EPS,p1);pv.subVectors(p1,p0);}// cross product of tangent vectors returns surface normal
normal.crossVectors(pu,pv).normalize();normals.push(normal.x,normal.y,normal.z);// uv
uvs.push(u,v);}}// generate indices
for(i=0;i<stacks;i++){for(j=0;j<slices;j++){var a=i*sliceCount+j;var b=i*sliceCount+j+1;var c=(i+1)*sliceCount+j+1;var d=(i+1)*sliceCount+j;// faces one and two
indices.push(a,b,d);indices.push(b,c,d);}}// build geometry
this.setIndex(indices);this.addAttribute('position',new Float32BufferAttribute(vertices,3));this.addAttribute('normal',new Float32BufferAttribute(normals,3));this.addAttribute('uv',new Float32BufferAttribute(uvs,2));}ParametricBufferGeometry.prototype=Object.create(BufferGeometry.prototype);ParametricBufferGeometry.prototype.constructor=ParametricBufferGeometry;/**
	 * @author clockworkgeek / https://github.com/clockworkgeek
	 * @author timothypratley / https://github.com/timothypratley
	 * @author WestLangley / http://github.com/WestLangley
	 * @author Mugen87 / https://github.com/Mugen87
	 */// PolyhedronGeometry
function PolyhedronGeometry(vertices,indices,radius,detail){Geometry.call(this);this.type='PolyhedronGeometry';this.parameters={vertices:vertices,indices:indices,radius:radius,detail:detail};this.fromBufferGeometry(new PolyhedronBufferGeometry(vertices,indices,radius,detail));this.mergeVertices();}PolyhedronGeometry.prototype=Object.create(Geometry.prototype);PolyhedronGeometry.prototype.constructor=PolyhedronGeometry;// PolyhedronBufferGeometry
function PolyhedronBufferGeometry(vertices,indices,radius,detail){BufferGeometry.call(this);this.type='PolyhedronBufferGeometry';this.parameters={vertices:vertices,indices:indices,radius:radius,detail:detail};radius=radius||1;detail=detail||0;// default buffer data
var vertexBuffer=[];var uvBuffer=[];// the subdivision creates the vertex buffer data
subdivide(detail);// all vertices should lie on a conceptual sphere with a given radius
appplyRadius(radius);// finally, create the uv data
generateUVs();// build non-indexed geometry
this.addAttribute('position',new Float32BufferAttribute(vertexBuffer,3));this.addAttribute('normal',new Float32BufferAttribute(vertexBuffer.slice(),3));this.addAttribute('uv',new Float32BufferAttribute(uvBuffer,2));if(detail===0){this.computeVertexNormals();// flat normals
}else{this.normalizeNormals();// smooth normals
}// helper functions
function subdivide(detail){var a=new Vector3();var b=new Vector3();var c=new Vector3();// iterate over all faces and apply a subdivison with the given detail value
for(var i=0;i<indices.length;i+=3){// get the vertices of the face
getVertexByIndex(indices[i+0],a);getVertexByIndex(indices[i+1],b);getVertexByIndex(indices[i+2],c);// perform subdivision
subdivideFace(a,b,c,detail);}}function subdivideFace(a,b,c,detail){var cols=Math.pow(2,detail);// we use this multidimensional array as a data structure for creating the subdivision
var v=[];var i,j;// construct all of the vertices for this subdivision
for(i=0;i<=cols;i++){v[i]=[];var aj=a.clone().lerp(c,i/cols);var bj=b.clone().lerp(c,i/cols);var rows=cols-i;for(j=0;j<=rows;j++){if(j===0&&i===cols){v[i][j]=aj;}else{v[i][j]=aj.clone().lerp(bj,j/rows);}}}// construct all of the faces
for(i=0;i<cols;i++){for(j=0;j<2*(cols-i)-1;j++){var k=Math.floor(j/2);if(j%2===0){pushVertex(v[i][k+1]);pushVertex(v[i+1][k]);pushVertex(v[i][k]);}else{pushVertex(v[i][k+1]);pushVertex(v[i+1][k+1]);pushVertex(v[i+1][k]);}}}}function appplyRadius(radius){var vertex=new Vector3();// iterate over the entire buffer and apply the radius to each vertex
for(var i=0;i<vertexBuffer.length;i+=3){vertex.x=vertexBuffer[i+0];vertex.y=vertexBuffer[i+1];vertex.z=vertexBuffer[i+2];vertex.normalize().multiplyScalar(radius);vertexBuffer[i+0]=vertex.x;vertexBuffer[i+1]=vertex.y;vertexBuffer[i+2]=vertex.z;}}function generateUVs(){var vertex=new Vector3();for(var i=0;i<vertexBuffer.length;i+=3){vertex.x=vertexBuffer[i+0];vertex.y=vertexBuffer[i+1];vertex.z=vertexBuffer[i+2];var u=azimuth(vertex)/2/Math.PI+0.5;var v=inclination(vertex)/Math.PI+0.5;uvBuffer.push(u,1-v);}correctUVs();correctSeam();}function correctSeam(){// handle case when face straddles the seam, see #3269
for(var i=0;i<uvBuffer.length;i+=6){// uv data of a single face
var x0=uvBuffer[i+0];var x1=uvBuffer[i+2];var x2=uvBuffer[i+4];var max=Math.max(x0,x1,x2);var min=Math.min(x0,x1,x2);// 0.9 is somewhat arbitrary
if(max>0.9&&min<0.1){if(x0<0.2)uvBuffer[i+0]+=1;if(x1<0.2)uvBuffer[i+2]+=1;if(x2<0.2)uvBuffer[i+4]+=1;}}}function pushVertex(vertex){vertexBuffer.push(vertex.x,vertex.y,vertex.z);}function getVertexByIndex(index,vertex){var stride=index*3;vertex.x=vertices[stride+0];vertex.y=vertices[stride+1];vertex.z=vertices[stride+2];}function correctUVs(){var a=new Vector3();var b=new Vector3();var c=new Vector3();var centroid=new Vector3();var uvA=new Vector2();var uvB=new Vector2();var uvC=new Vector2();for(var i=0,j=0;i<vertexBuffer.length;i+=9,j+=6){a.set(vertexBuffer[i+0],vertexBuffer[i+1],vertexBuffer[i+2]);b.set(vertexBuffer[i+3],vertexBuffer[i+4],vertexBuffer[i+5]);c.set(vertexBuffer[i+6],vertexBuffer[i+7],vertexBuffer[i+8]);uvA.set(uvBuffer[j+0],uvBuffer[j+1]);uvB.set(uvBuffer[j+2],uvBuffer[j+3]);uvC.set(uvBuffer[j+4],uvBuffer[j+5]);centroid.copy(a).add(b).add(c).divideScalar(3);var azi=azimuth(centroid);correctUV(uvA,j+0,a,azi);correctUV(uvB,j+2,b,azi);correctUV(uvC,j+4,c,azi);}}function correctUV(uv,stride,vector,azimuth){if(azimuth<0&&uv.x===1){uvBuffer[stride]=uv.x-1;}if(vector.x===0&&vector.z===0){uvBuffer[stride]=azimuth/2/Math.PI+0.5;}}// Angle around the Y axis, counter-clockwise when looking from above.
function azimuth(vector){return Math.atan2(vector.z,-vector.x);}// Angle above the XZ plane.
function inclination(vector){return Math.atan2(-vector.y,Math.sqrt(vector.x*vector.x+vector.z*vector.z));}}PolyhedronBufferGeometry.prototype=Object.create(BufferGeometry.prototype);PolyhedronBufferGeometry.prototype.constructor=PolyhedronBufferGeometry;/**
	 * @author timothypratley / https://github.com/timothypratley
	 * @author Mugen87 / https://github.com/Mugen87
	 */// TetrahedronGeometry
function TetrahedronGeometry(radius,detail){Geometry.call(this);this.type='TetrahedronGeometry';this.parameters={radius:radius,detail:detail};this.fromBufferGeometry(new TetrahedronBufferGeometry(radius,detail));this.mergeVertices();}TetrahedronGeometry.prototype=Object.create(Geometry.prototype);TetrahedronGeometry.prototype.constructor=TetrahedronGeometry;// TetrahedronBufferGeometry
function TetrahedronBufferGeometry(radius,detail){var vertices=[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1];var indices=[2,1,0,0,3,2,1,3,0,2,3,1];PolyhedronBufferGeometry.call(this,vertices,indices,radius,detail);this.type='TetrahedronBufferGeometry';this.parameters={radius:radius,detail:detail};}TetrahedronBufferGeometry.prototype=Object.create(PolyhedronBufferGeometry.prototype);TetrahedronBufferGeometry.prototype.constructor=TetrahedronBufferGeometry;/**
	 * @author timothypratley / https://github.com/timothypratley
	 * @author Mugen87 / https://github.com/Mugen87
	 */// OctahedronGeometry
function OctahedronGeometry(radius,detail){Geometry.call(this);this.type='OctahedronGeometry';this.parameters={radius:radius,detail:detail};this.fromBufferGeometry(new OctahedronBufferGeometry(radius,detail));this.mergeVertices();}OctahedronGeometry.prototype=Object.create(Geometry.prototype);OctahedronGeometry.prototype.constructor=OctahedronGeometry;// OctahedronBufferGeometry
function OctahedronBufferGeometry(radius,detail){var vertices=[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1];var indices=[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2];PolyhedronBufferGeometry.call(this,vertices,indices,radius,detail);this.type='OctahedronBufferGeometry';this.parameters={radius:radius,detail:detail};}OctahedronBufferGeometry.prototype=Object.create(PolyhedronBufferGeometry.prototype);OctahedronBufferGeometry.prototype.constructor=OctahedronBufferGeometry;/**
	 * @author timothypratley / https://github.com/timothypratley
	 * @author Mugen87 / https://github.com/Mugen87
	 */// IcosahedronGeometry
function IcosahedronGeometry(radius,detail){Geometry.call(this);this.type='IcosahedronGeometry';this.parameters={radius:radius,detail:detail};this.fromBufferGeometry(new IcosahedronBufferGeometry(radius,detail));this.mergeVertices();}IcosahedronGeometry.prototype=Object.create(Geometry.prototype);IcosahedronGeometry.prototype.constructor=IcosahedronGeometry;// IcosahedronBufferGeometry
function IcosahedronBufferGeometry(radius,detail){var t=(1+Math.sqrt(5))/2;var vertices=[-1,t,0,1,t,0,-1,-t,0,1,-t,0,0,-1,t,0,1,t,0,-1,-t,0,1,-t,t,0,-1,t,0,1,-t,0,-1,-t,0,1];var indices=[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1];PolyhedronBufferGeometry.call(this,vertices,indices,radius,detail);this.type='IcosahedronBufferGeometry';this.parameters={radius:radius,detail:detail};}IcosahedronBufferGeometry.prototype=Object.create(PolyhedronBufferGeometry.prototype);IcosahedronBufferGeometry.prototype.constructor=IcosahedronBufferGeometry;/**
	 * @author Abe Pazos / https://hamoid.com
	 * @author Mugen87 / https://github.com/Mugen87
	 */// DodecahedronGeometry
function DodecahedronGeometry(radius,detail){Geometry.call(this);this.type='DodecahedronGeometry';this.parameters={radius:radius,detail:detail};this.fromBufferGeometry(new DodecahedronBufferGeometry(radius,detail));this.mergeVertices();}DodecahedronGeometry.prototype=Object.create(Geometry.prototype);DodecahedronGeometry.prototype.constructor=DodecahedronGeometry;// DodecahedronBufferGeometry
function DodecahedronBufferGeometry(radius,detail){var t=(1+Math.sqrt(5))/2;var r=1/t;var vertices=[// (Â±1, Â±1, Â±1)
-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,// (0, Â±1/Ï, Â±Ï)
0,-r,-t,0,-r,t,0,r,-t,0,r,t,// (Â±1/Ï, Â±Ï, 0)
-r,-t,0,-r,t,0,r,-t,0,r,t,0,// (Â±Ï, 0, Â±1/Ï)
-t,0,-r,t,0,-r,-t,0,r,t,0,r];var indices=[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9];PolyhedronBufferGeometry.call(this,vertices,indices,radius,detail);this.type='DodecahedronBufferGeometry';this.parameters={radius:radius,detail:detail};}DodecahedronBufferGeometry.prototype=Object.create(PolyhedronBufferGeometry.prototype);DodecahedronBufferGeometry.prototype.constructor=DodecahedronBufferGeometry;/**
	 * @author oosmoxiecode / https://github.com/oosmoxiecode
	 * @author WestLangley / https://github.com/WestLangley
	 * @author zz85 / https://github.com/zz85
	 * @author miningold / https://github.com/miningold
	 * @author jonobr1 / https://github.com/jonobr1
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 */// TubeGeometry
function TubeGeometry(path,tubularSegments,radius,radialSegments,closed,taper){Geometry.call(this);this.type='TubeGeometry';this.parameters={path:path,tubularSegments:tubularSegments,radius:radius,radialSegments:radialSegments,closed:closed};if(taper!==undefined)console.warn('THREE.TubeGeometry: taper has been removed.');var bufferGeometry=new TubeBufferGeometry(path,tubularSegments,radius,radialSegments,closed);// expose internals
this.tangents=bufferGeometry.tangents;this.normals=bufferGeometry.normals;this.binormals=bufferGeometry.binormals;// create geometry
this.fromBufferGeometry(bufferGeometry);this.mergeVertices();}TubeGeometry.prototype=Object.create(Geometry.prototype);TubeGeometry.prototype.constructor=TubeGeometry;// TubeBufferGeometry
function TubeBufferGeometry(path,tubularSegments,radius,radialSegments,closed){BufferGeometry.call(this);this.type='TubeBufferGeometry';this.parameters={path:path,tubularSegments:tubularSegments,radius:radius,radialSegments:radialSegments,closed:closed};tubularSegments=tubularSegments||64;radius=radius||1;radialSegments=radialSegments||8;closed=closed||false;var frames=path.computeFrenetFrames(tubularSegments,closed);// expose internals
this.tangents=frames.tangents;this.normals=frames.normals;this.binormals=frames.binormals;// helper variables
var vertex=new Vector3();var normal=new Vector3();var uv=new Vector2();var P=new Vector3();var i,j;// buffer
var vertices=[];var normals=[];var uvs=[];var indices=[];// create buffer data
generateBufferData();// build geometry
this.setIndex(indices);this.addAttribute('position',new Float32BufferAttribute(vertices,3));this.addAttribute('normal',new Float32BufferAttribute(normals,3));this.addAttribute('uv',new Float32BufferAttribute(uvs,2));// functions
function generateBufferData(){for(i=0;i<tubularSegments;i++){generateSegment(i);}// if the geometry is not closed, generate the last row of vertices and normals
// at the regular position on the given path
//
// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)
generateSegment(closed===false?tubularSegments:0);// uvs are generated in a separate function.
// this makes it easy compute correct values for closed geometries
generateUVs();// finally create faces
generateIndices();}function generateSegment(i){// we use getPointAt to sample evenly distributed points from the given path
P=path.getPointAt(i/tubularSegments,P);// retrieve corresponding normal and binormal
var N=frames.normals[i];var B=frames.binormals[i];// generate normals and vertices for the current segment
for(j=0;j<=radialSegments;j++){var v=j/radialSegments*Math.PI*2;var sin=Math.sin(v);var cos=-Math.cos(v);// normal
normal.x=cos*N.x+sin*B.x;normal.y=cos*N.y+sin*B.y;normal.z=cos*N.z+sin*B.z;normal.normalize();normals.push(normal.x,normal.y,normal.z);// vertex
vertex.x=P.x+radius*normal.x;vertex.y=P.y+radius*normal.y;vertex.z=P.z+radius*normal.z;vertices.push(vertex.x,vertex.y,vertex.z);}}function generateIndices(){for(j=1;j<=tubularSegments;j++){for(i=1;i<=radialSegments;i++){var a=(radialSegments+1)*(j-1)+(i-1);var b=(radialSegments+1)*j+(i-1);var c=(radialSegments+1)*j+i;var d=(radialSegments+1)*(j-1)+i;// faces
indices.push(a,b,d);indices.push(b,c,d);}}}function generateUVs(){for(i=0;i<=tubularSegments;i++){for(j=0;j<=radialSegments;j++){uv.x=i/tubularSegments;uv.y=j/radialSegments;uvs.push(uv.x,uv.y);}}}}TubeBufferGeometry.prototype=Object.create(BufferGeometry.prototype);TubeBufferGeometry.prototype.constructor=TubeBufferGeometry;/**
	 * @author oosmoxiecode
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 * based on http://www.blackpawn.com/texts/pqtorus/
	 */// TorusKnotGeometry
function TorusKnotGeometry(radius,tube,tubularSegments,radialSegments,p,q,heightScale){Geometry.call(this);this.type='TorusKnotGeometry';this.parameters={radius:radius,tube:tube,tubularSegments:tubularSegments,radialSegments:radialSegments,p:p,q:q};if(heightScale!==undefined)console.warn('THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.');this.fromBufferGeometry(new TorusKnotBufferGeometry(radius,tube,tubularSegments,radialSegments,p,q));this.mergeVertices();}TorusKnotGeometry.prototype=Object.create(Geometry.prototype);TorusKnotGeometry.prototype.constructor=TorusKnotGeometry;// TorusKnotBufferGeometry
function TorusKnotBufferGeometry(radius,tube,tubularSegments,radialSegments,p,q){BufferGeometry.call(this);this.type='TorusKnotBufferGeometry';this.parameters={radius:radius,tube:tube,tubularSegments:tubularSegments,radialSegments:radialSegments,p:p,q:q};radius=radius||1;tube=tube||0.4;tubularSegments=Math.floor(tubularSegments)||64;radialSegments=Math.floor(radialSegments)||8;p=p||2;q=q||3;// buffers
var indices=[];var vertices=[];var normals=[];var uvs=[];// helper variables
var i,j;var vertex=new Vector3();var normal=new Vector3();var P1=new Vector3();var P2=new Vector3();var B=new Vector3();var T=new Vector3();var N=new Vector3();// generate vertices, normals and uvs
for(i=0;i<=tubularSegments;++i){// the radian "u" is used to calculate the position on the torus curve of the current tubular segement
var u=i/tubularSegments*p*Math.PI*2;// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
// these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions
calculatePositionOnCurve(u,p,q,radius,P1);calculatePositionOnCurve(u+0.01,p,q,radius,P2);// calculate orthonormal basis
T.subVectors(P2,P1);N.addVectors(P2,P1);B.crossVectors(T,N);N.crossVectors(B,T);// normalize B, N. T can be ignored, we don't use it
B.normalize();N.normalize();for(j=0;j<=radialSegments;++j){// now calculate the vertices. they are nothing more than an extrusion of the torus curve.
// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.
var v=j/radialSegments*Math.PI*2;var cx=-tube*Math.cos(v);var cy=tube*Math.sin(v);// now calculate the final vertex position.
// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve
vertex.x=P1.x+(cx*N.x+cy*B.x);vertex.y=P1.y+(cx*N.y+cy*B.y);vertex.z=P1.z+(cx*N.z+cy*B.z);vertices.push(vertex.x,vertex.y,vertex.z);// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)
normal.subVectors(vertex,P1).normalize();normals.push(normal.x,normal.y,normal.z);// uv
uvs.push(i/tubularSegments);uvs.push(j/radialSegments);}}// generate indices
for(j=1;j<=tubularSegments;j++){for(i=1;i<=radialSegments;i++){// indices
var a=(radialSegments+1)*(j-1)+(i-1);var b=(radialSegments+1)*j+(i-1);var c=(radialSegments+1)*j+i;var d=(radialSegments+1)*(j-1)+i;// faces
indices.push(a,b,d);indices.push(b,c,d);}}// build geometry
this.setIndex(indices);this.addAttribute('position',new Float32BufferAttribute(vertices,3));this.addAttribute('normal',new Float32BufferAttribute(normals,3));this.addAttribute('uv',new Float32BufferAttribute(uvs,2));// this function calculates the current position on the torus curve
function calculatePositionOnCurve(u,p,q,radius,position){var cu=Math.cos(u);var su=Math.sin(u);var quOverP=q/p*u;var cs=Math.cos(quOverP);position.x=radius*(2+cs)*0.5*cu;position.y=radius*(2+cs)*su*0.5;position.z=radius*Math.sin(quOverP)*0.5;}}TorusKnotBufferGeometry.prototype=Object.create(BufferGeometry.prototype);TorusKnotBufferGeometry.prototype.constructor=TorusKnotBufferGeometry;/**
	 * @author oosmoxiecode
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */// TorusGeometry
function TorusGeometry(radius,tube,radialSegments,tubularSegments,arc){Geometry.call(this);this.type='TorusGeometry';this.parameters={radius:radius,tube:tube,radialSegments:radialSegments,tubularSegments:tubularSegments,arc:arc};this.fromBufferGeometry(new TorusBufferGeometry(radius,tube,radialSegments,tubularSegments,arc));this.mergeVertices();}TorusGeometry.prototype=Object.create(Geometry.prototype);TorusGeometry.prototype.constructor=TorusGeometry;// TorusBufferGeometry
function TorusBufferGeometry(radius,tube,radialSegments,tubularSegments,arc){BufferGeometry.call(this);this.type='TorusBufferGeometry';this.parameters={radius:radius,tube:tube,radialSegments:radialSegments,tubularSegments:tubularSegments,arc:arc};radius=radius||1;tube=tube||0.4;radialSegments=Math.floor(radialSegments)||8;tubularSegments=Math.floor(tubularSegments)||6;arc=arc||Math.PI*2;// buffers
var indices=[];var vertices=[];var normals=[];var uvs=[];// helper variables
var center=new Vector3();var vertex=new Vector3();var normal=new Vector3();var j,i;// generate vertices, normals and uvs
for(j=0;j<=radialSegments;j++){for(i=0;i<=tubularSegments;i++){var u=i/tubularSegments*arc;var v=j/radialSegments*Math.PI*2;// vertex
vertex.x=(radius+tube*Math.cos(v))*Math.cos(u);vertex.y=(radius+tube*Math.cos(v))*Math.sin(u);vertex.z=tube*Math.sin(v);vertices.push(vertex.x,vertex.y,vertex.z);// normal
center.x=radius*Math.cos(u);center.y=radius*Math.sin(u);normal.subVectors(vertex,center).normalize();normals.push(normal.x,normal.y,normal.z);// uv
uvs.push(i/tubularSegments);uvs.push(j/radialSegments);}}// generate indices
for(j=1;j<=radialSegments;j++){for(i=1;i<=tubularSegments;i++){// indices
var a=(tubularSegments+1)*j+i-1;var b=(tubularSegments+1)*(j-1)+i-1;var c=(tubularSegments+1)*(j-1)+i;var d=(tubularSegments+1)*j+i;// faces
indices.push(a,b,d);indices.push(b,c,d);}}// build geometry
this.setIndex(indices);this.addAttribute('position',new Float32BufferAttribute(vertices,3));this.addAttribute('normal',new Float32BufferAttribute(normals,3));this.addAttribute('uv',new Float32BufferAttribute(uvs,2));}TorusBufferGeometry.prototype=Object.create(BufferGeometry.prototype);TorusBufferGeometry.prototype.constructor=TorusBufferGeometry;/**
	 * @author Mugen87 / https://github.com/Mugen87
	 * Port from https://github.com/mapbox/earcut (v2.1.2)
	 */var Earcut={triangulate:function triangulate(data,holeIndices,dim){dim=dim||2;var hasHoles=holeIndices&&holeIndices.length,outerLen=hasHoles?holeIndices[0]*dim:data.length,outerNode=linkedList(data,0,outerLen,dim,true),triangles=[];if(!outerNode)return triangles;var minX,minY,maxX,maxY,x,y,invSize;if(hasHoles)outerNode=eliminateHoles(data,holeIndices,outerNode,dim);// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
if(data.length>80*dim){minX=maxX=data[0];minY=maxY=data[1];for(var i=dim;i<outerLen;i+=dim){x=data[i];y=data[i+1];if(x<minX)minX=x;if(y<minY)minY=y;if(x>maxX)maxX=x;if(y>maxY)maxY=y;}// minX, minY and invSize are later used to transform coords into integers for z-order calculation
invSize=Math.max(maxX-minX,maxY-minY);invSize=invSize!==0?1/invSize:0;}earcutLinked(outerNode,triangles,dim,minX,minY,invSize);return triangles;}};// create a circular doubly linked list from polygon points in the specified winding order
function linkedList(data,start,end,dim,clockwise){var i,last;if(clockwise===signedArea(data,start,end,dim)>0){for(i=start;i<end;i+=dim){last=insertNode(i,data[i],data[i+1],last);}}else{for(i=end-dim;i>=start;i-=dim){last=insertNode(i,data[i],data[i+1],last);}}if(last&&equals(last,last.next)){removeNode(last);last=last.next;}return last;}// eliminate colinear or duplicate points
function filterPoints(start,end){if(!start)return start;if(!end)end=start;var p=start,again;do{again=false;if(!p.steiner&&(equals(p,p.next)||area(p.prev,p,p.next)===0)){removeNode(p);p=end=p.prev;if(p===p.next)break;again=true;}else{p=p.next;}}while(again||p!==end);return end;}// main ear slicing loop which triangulates a polygon (given as a linked list)
function earcutLinked(ear,triangles,dim,minX,minY,invSize,pass){if(!ear)return;// interlink polygon nodes in z-order
if(!pass&&invSize)indexCurve(ear,minX,minY,invSize);var stop=ear,prev,next;// iterate through ears, slicing them one by one
while(ear.prev!==ear.next){prev=ear.prev;next=ear.next;if(invSize?isEarHashed(ear,minX,minY,invSize):isEar(ear)){// cut off the triangle
triangles.push(prev.i/dim);triangles.push(ear.i/dim);triangles.push(next.i/dim);removeNode(ear);// skipping the next vertice leads to less sliver triangles
ear=next.next;stop=next.next;continue;}ear=next;// if we looped through the whole remaining polygon and can't find any more ears
if(ear===stop){// try filtering points and slicing again
if(!pass){earcutLinked(filterPoints(ear),triangles,dim,minX,minY,invSize,1);// if this didn't work, try curing all small self-intersections locally
}else if(pass===1){ear=cureLocalIntersections(ear,triangles,dim);earcutLinked(ear,triangles,dim,minX,minY,invSize,2);// as a last resort, try splitting the remaining polygon into two
}else if(pass===2){splitEarcut(ear,triangles,dim,minX,minY,invSize);}break;}}}// check whether a polygon node forms a valid ear with adjacent nodes
function isEar(ear){var a=ear.prev,b=ear,c=ear.next;if(area(a,b,c)>=0)return false;// reflex, can't be an ear
// now make sure we don't have other points inside the potential ear
var p=ear.next.next;while(p!==ear.prev){if(pointInTriangle(a.x,a.y,b.x,b.y,c.x,c.y,p.x,p.y)&&area(p.prev,p,p.next)>=0){return false;}p=p.next;}return true;}function isEarHashed(ear,minX,minY,invSize){var a=ear.prev,b=ear,c=ear.next;if(area(a,b,c)>=0)return false;// reflex, can't be an ear
// triangle bbox; min & max are calculated like this for speed
var minTX=a.x<b.x?a.x<c.x?a.x:c.x:b.x<c.x?b.x:c.x,minTY=a.y<b.y?a.y<c.y?a.y:c.y:b.y<c.y?b.y:c.y,maxTX=a.x>b.x?a.x>c.x?a.x:c.x:b.x>c.x?b.x:c.x,maxTY=a.y>b.y?a.y>c.y?a.y:c.y:b.y>c.y?b.y:c.y;// z-order range for the current triangle bbox;
var minZ=zOrder(minTX,minTY,minX,minY,invSize),maxZ=zOrder(maxTX,maxTY,minX,minY,invSize);// first look for points inside the triangle in increasing z-order
var p=ear.nextZ;while(p&&p.z<=maxZ){if(p!==ear.prev&&p!==ear.next&&pointInTriangle(a.x,a.y,b.x,b.y,c.x,c.y,p.x,p.y)&&area(p.prev,p,p.next)>=0)return false;p=p.nextZ;}// then look for points in decreasing z-order
p=ear.prevZ;while(p&&p.z>=minZ){if(p!==ear.prev&&p!==ear.next&&pointInTriangle(a.x,a.y,b.x,b.y,c.x,c.y,p.x,p.y)&&area(p.prev,p,p.next)>=0)return false;p=p.prevZ;}return true;}// go through all polygon nodes and cure small local self-intersections
function cureLocalIntersections(start,triangles,dim){var p=start;do{var a=p.prev,b=p.next.next;if(!equals(a,b)&&intersects(a,p,p.next,b)&&locallyInside(a,b)&&locallyInside(b,a)){triangles.push(a.i/dim);triangles.push(p.i/dim);triangles.push(b.i/dim);// remove two nodes involved
removeNode(p);removeNode(p.next);p=start=b;}p=p.next;}while(p!==start);return p;}// try splitting polygon into two and triangulate them independently
function splitEarcut(start,triangles,dim,minX,minY,invSize){// look for a valid diagonal that divides the polygon into two
var a=start;do{var b=a.next.next;while(b!==a.prev){if(a.i!==b.i&&isValidDiagonal(a,b)){// split the polygon in two by the diagonal
var c=splitPolygon(a,b);// filter colinear points around the cuts
a=filterPoints(a,a.next);c=filterPoints(c,c.next);// run earcut on each half
earcutLinked(a,triangles,dim,minX,minY,invSize);earcutLinked(c,triangles,dim,minX,minY,invSize);return;}b=b.next;}a=a.next;}while(a!==start);}// link every hole into the outer loop, producing a single-ring polygon without holes
function eliminateHoles(data,holeIndices,outerNode,dim){var queue=[],i,len,start,end,list;for(i=0,len=holeIndices.length;i<len;i++){start=holeIndices[i]*dim;end=i<len-1?holeIndices[i+1]*dim:data.length;list=linkedList(data,start,end,dim,false);if(list===list.next)list.steiner=true;queue.push(getLeftmost(list));}queue.sort(compareX);// process holes from left to right
for(i=0;i<queue.length;i++){eliminateHole(queue[i],outerNode);outerNode=filterPoints(outerNode,outerNode.next);}return outerNode;}function compareX(a,b){return a.x-b.x;}// find a bridge between vertices that connects hole with an outer ring and and link it
function eliminateHole(hole,outerNode){outerNode=findHoleBridge(hole,outerNode);if(outerNode){var b=splitPolygon(outerNode,hole);filterPoints(b,b.next);}}// David Eberly's algorithm for finding a bridge between hole and outer polygon
function findHoleBridge(hole,outerNode){var p=outerNode,hx=hole.x,hy=hole.y,qx=-Infinity,m;// find a segment intersected by a ray from the hole's leftmost point to the left;
// segment's endpoint with lesser x will be potential connection point
do{if(hy<=p.y&&hy>=p.next.y&&p.next.y!==p.y){var x=p.x+(hy-p.y)*(p.next.x-p.x)/(p.next.y-p.y);if(x<=hx&&x>qx){qx=x;if(x===hx){if(hy===p.y)return p;if(hy===p.next.y)return p.next;}m=p.x<p.next.x?p:p.next;}}p=p.next;}while(p!==outerNode);if(!m)return null;if(hx===qx)return m.prev;// hole touches outer segment; pick lower endpoint
// look for points inside the triangle of hole point, segment intersection and endpoint;
// if there are no points found, we have a valid connection;
// otherwise choose the point of the minimum angle with the ray as connection point
var stop=m,mx=m.x,my=m.y,tanMin=Infinity,tan;p=m.next;while(p!==stop){if(hx>=p.x&&p.x>=mx&&hx!==p.x&&pointInTriangle(hy<my?hx:qx,hy,mx,my,hy<my?qx:hx,hy,p.x,p.y)){tan=Math.abs(hy-p.y)/(hx-p.x);// tangential
if((tan<tanMin||tan===tanMin&&p.x>m.x)&&locallyInside(p,hole)){m=p;tanMin=tan;}}p=p.next;}return m;}// interlink polygon nodes in z-order
function indexCurve(start,minX,minY,invSize){var p=start;do{if(p.z===null)p.z=zOrder(p.x,p.y,minX,minY,invSize);p.prevZ=p.prev;p.nextZ=p.next;p=p.next;}while(p!==start);p.prevZ.nextZ=null;p.prevZ=null;sortLinked(p);}// Simon Tatham's linked list merge sort algorithm
// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
function sortLinked(list){var i,p,q,e,tail,numMerges,pSize,qSize,inSize=1;do{p=list;list=null;tail=null;numMerges=0;while(p){numMerges++;q=p;pSize=0;for(i=0;i<inSize;i++){pSize++;q=q.nextZ;if(!q)break;}qSize=inSize;while(pSize>0||qSize>0&&q){if(pSize!==0&&(qSize===0||!q||p.z<=q.z)){e=p;p=p.nextZ;pSize--;}else{e=q;q=q.nextZ;qSize--;}if(tail)tail.nextZ=e;else list=e;e.prevZ=tail;tail=e;}p=q;}tail.nextZ=null;inSize*=2;}while(numMerges>1);return list;}// z-order of a point given coords and inverse of the longer side of data bbox
function zOrder(x,y,minX,minY,invSize){// coords are transformed into non-negative 15-bit integer range
x=32767*(x-minX)*invSize;y=32767*(y-minY)*invSize;x=(x|x<<8)&0x00FF00FF;x=(x|x<<4)&0x0F0F0F0F;x=(x|x<<2)&0x33333333;x=(x|x<<1)&0x55555555;y=(y|y<<8)&0x00FF00FF;y=(y|y<<4)&0x0F0F0F0F;y=(y|y<<2)&0x33333333;y=(y|y<<1)&0x55555555;return x|y<<1;}// find the leftmost node of a polygon ring
function getLeftmost(start){var p=start,leftmost=start;do{if(p.x<leftmost.x)leftmost=p;p=p.next;}while(p!==start);return leftmost;}// check if a point lies within a convex triangle
function pointInTriangle(ax,ay,bx,by,cx,cy,px,py){return(cx-px)*(ay-py)-(ax-px)*(cy-py)>=0&&(ax-px)*(by-py)-(bx-px)*(ay-py)>=0&&(bx-px)*(cy-py)-(cx-px)*(by-py)>=0;}// check if a diagonal between two polygon nodes is valid (lies in polygon interior)
function isValidDiagonal(a,b){return a.next.i!==b.i&&a.prev.i!==b.i&&!intersectsPolygon(a,b)&&locallyInside(a,b)&&locallyInside(b,a)&&middleInside(a,b);}// signed area of a triangle
function area(p,q,r){return(q.y-p.y)*(r.x-q.x)-(q.x-p.x)*(r.y-q.y);}// check if two points are equal
function equals(p1,p2){return p1.x===p2.x&&p1.y===p2.y;}// check if two segments intersect
function intersects(p1,q1,p2,q2){if(equals(p1,q1)&&equals(p2,q2)||equals(p1,q2)&&equals(p2,q1))return true;return area(p1,q1,p2)>0!==area(p1,q1,q2)>0&&area(p2,q2,p1)>0!==area(p2,q2,q1)>0;}// check if a polygon diagonal intersects any polygon segments
function intersectsPolygon(a,b){var p=a;do{if(p.i!==a.i&&p.next.i!==a.i&&p.i!==b.i&&p.next.i!==b.i&&intersects(p,p.next,a,b)){return true;}p=p.next;}while(p!==a);return false;}// check if a polygon diagonal is locally inside the polygon
function locallyInside(a,b){return area(a.prev,a,a.next)<0?area(a,b,a.next)>=0&&area(a,a.prev,b)>=0:area(a,b,a.prev)<0||area(a,a.next,b)<0;}// check if the middle point of a polygon diagonal is inside the polygon
function middleInside(a,b){var p=a,inside=false,px=(a.x+b.x)/2,py=(a.y+b.y)/2;do{if(p.y>py!==p.next.y>py&&p.next.y!==p.y&&px<(p.next.x-p.x)*(py-p.y)/(p.next.y-p.y)+p.x){inside=!inside;}p=p.next;}while(p!==a);return inside;}// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
// if one belongs to the outer ring and another to a hole, it merges it into a single ring
function splitPolygon(a,b){var a2=new Node(a.i,a.x,a.y),b2=new Node(b.i,b.x,b.y),an=a.next,bp=b.prev;a.next=b;b.prev=a;a2.next=an;an.prev=a2;b2.next=a2;a2.prev=b2;bp.next=b2;b2.prev=bp;return b2;}// create a node and optionally link it with previous one (in a circular doubly linked list)
function insertNode(i,x,y,last){var p=new Node(i,x,y);if(!last){p.prev=p;p.next=p;}else{p.next=last.next;p.prev=last;last.next.prev=p;last.next=p;}return p;}function removeNode(p){p.next.prev=p.prev;p.prev.next=p.next;if(p.prevZ)p.prevZ.nextZ=p.nextZ;if(p.nextZ)p.nextZ.prevZ=p.prevZ;}function Node(i,x,y){// vertice index in coordinates array
this.i=i;// vertex coordinates
this.x=x;this.y=y;// previous and next vertice nodes in a polygon ring
this.prev=null;this.next=null;// z-order curve value
this.z=null;// previous and next nodes in z-order
this.prevZ=null;this.nextZ=null;// indicates whether this is a steiner point
this.steiner=false;}function signedArea(data,start,end,dim){var sum=0;for(var i=start,j=end-dim;i<end;i+=dim){sum+=(data[j]-data[i])*(data[i+1]+data[j+1]);j=i;}return sum;}/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */var ShapeUtils={// calculate area of the contour polygon
area:function area(contour){var n=contour.length;var a=0.0;for(var p=n-1,q=0;q<n;p=q++){a+=contour[p].x*contour[q].y-contour[q].x*contour[p].y;}return a*0.5;},isClockWise:function isClockWise(pts){return ShapeUtils.area(pts)<0;},triangulateShape:function triangulateShape(contour,holes){var vertices=[];// flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]
var holeIndices=[];// array of hole indices
var faces=[];// final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]
removeDupEndPts(contour);addContour(vertices,contour);//
var holeIndex=contour.length;holes.forEach(removeDupEndPts);for(var i=0;i<holes.length;i++){holeIndices.push(holeIndex);holeIndex+=holes[i].length;addContour(vertices,holes[i]);}//
var triangles=Earcut.triangulate(vertices,holeIndices);//
for(var i=0;i<triangles.length;i+=3){faces.push(triangles.slice(i,i+3));}return faces;}};function removeDupEndPts(points){var l=points.length;if(l>2&&points[l-1].equals(points[0])){points.pop();}}function addContour(vertices,contour){for(var i=0;i<contour.length;i++){vertices.push(contour[i].x);vertices.push(contour[i].y);}}/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 *
	 * Creates extruded geometry from a path shape.
	 *
	 * parameters = {
	 *
	 *  curveSegments: <int>, // number of points on the curves
	 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
	 *  depth: <float>, // Depth to extrude the shape
	 *
	 *  bevelEnabled: <bool>, // turn on bevel
	 *  bevelThickness: <float>, // how deep into the original shape bevel goes
	 *  bevelSize: <float>, // how far from shape outline is bevel
	 *  bevelSegments: <int>, // number of bevel layers
	 *
	 *  extrudePath: <THREE.Curve> // curve to extrude shape along
	 *
	 *  UVGenerator: <Object> // object that provides UV generator functions
	 *
	 * }
	 */// ExtrudeGeometry
function ExtrudeGeometry(shapes,options){Geometry.call(this);this.type='ExtrudeGeometry';this.parameters={shapes:shapes,options:options};this.fromBufferGeometry(new ExtrudeBufferGeometry(shapes,options));this.mergeVertices();}ExtrudeGeometry.prototype=Object.create(Geometry.prototype);ExtrudeGeometry.prototype.constructor=ExtrudeGeometry;ExtrudeGeometry.prototype.toJSON=function(){var data=Geometry.prototype.toJSON.call(this);var shapes=this.parameters.shapes;var options=this.parameters.options;return toJSON(shapes,options,data);};// ExtrudeBufferGeometry
function ExtrudeBufferGeometry(shapes,options){BufferGeometry.call(this);this.type='ExtrudeBufferGeometry';this.parameters={shapes:shapes,options:options};shapes=Array.isArray(shapes)?shapes:[shapes];var scope=this;var verticesArray=[];var uvArray=[];for(var i=0,l=shapes.length;i<l;i++){var shape=shapes[i];addShape(shape);}// build geometry
this.addAttribute('position',new Float32BufferAttribute(verticesArray,3));this.addAttribute('uv',new Float32BufferAttribute(uvArray,2));this.computeVertexNormals();// functions
function addShape(shape){var placeholder=[];// options
var curveSegments=options.curveSegments!==undefined?options.curveSegments:12;var steps=options.steps!==undefined?options.steps:1;var depth=options.depth!==undefined?options.depth:100;var bevelEnabled=options.bevelEnabled!==undefined?options.bevelEnabled:true;var bevelThickness=options.bevelThickness!==undefined?options.bevelThickness:6;var bevelSize=options.bevelSize!==undefined?options.bevelSize:bevelThickness-2;var bevelSegments=options.bevelSegments!==undefined?options.bevelSegments:3;var extrudePath=options.extrudePath;var uvgen=options.UVGenerator!==undefined?options.UVGenerator:WorldUVGenerator;// deprecated options
if(options.amount!==undefined){console.warn('THREE.ExtrudeBufferGeometry: amount has been renamed to depth.');depth=options.amount;}//
var extrudePts,extrudeByPath=false;var splineTube,binormal,normal,position2;if(extrudePath){extrudePts=extrudePath.getSpacedPoints(steps);extrudeByPath=true;bevelEnabled=false;// bevels not supported for path extrusion
// SETUP TNB variables
// TODO1 - have a .isClosed in spline?
splineTube=extrudePath.computeFrenetFrames(steps,false);// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);
binormal=new Vector3();normal=new Vector3();position2=new Vector3();}// Safeguards if bevels are not enabled
if(!bevelEnabled){bevelSegments=0;bevelThickness=0;bevelSize=0;}// Variables initialization
var ahole,h,hl;// looping of holes
var shapePoints=shape.extractPoints(curveSegments);var vertices=shapePoints.shape;var holes=shapePoints.holes;var reverse=!ShapeUtils.isClockWise(vertices);if(reverse){vertices=vertices.reverse();// Maybe we should also check if holes are in the opposite direction, just to be safe ...
for(h=0,hl=holes.length;h<hl;h++){ahole=holes[h];if(ShapeUtils.isClockWise(ahole)){holes[h]=ahole.reverse();}}}var faces=ShapeUtils.triangulateShape(vertices,holes);/* Vertices */var contour=vertices;// vertices has all points but contour has only points of circumference
for(h=0,hl=holes.length;h<hl;h++){ahole=holes[h];vertices=vertices.concat(ahole);}function scalePt2(pt,vec,size){if(!vec)console.error("THREE.ExtrudeGeometry: vec does not exist");return vec.clone().multiplyScalar(size).add(pt);}var b,bs,t,z,vert,vlen=vertices.length,face,flen=faces.length;// Find directions for point movement
function getBevelVec(inPt,inPrev,inNext){// computes for inPt the corresponding point inPt' on a new contour
//   shifted by 1 unit (length of normalized vector) to the left
// if we walk along contour clockwise, this new contour is outside the old one
//
// inPt' is the intersection of the two lines parallel to the two
//  adjacent edges of inPt at a distance of 1 unit on the left side.
var v_trans_x,v_trans_y,shrink_by;// resulting translation vector for inPt
// good reading for geometry algorithms (here: line-line intersection)
// http://geomalgorithms.com/a05-_intersect-1.html
var v_prev_x=inPt.x-inPrev.x,v_prev_y=inPt.y-inPrev.y;var v_next_x=inNext.x-inPt.x,v_next_y=inNext.y-inPt.y;var v_prev_lensq=v_prev_x*v_prev_x+v_prev_y*v_prev_y;// check for collinear edges
var collinear0=v_prev_x*v_next_y-v_prev_y*v_next_x;if(Math.abs(collinear0)>Number.EPSILON){// not collinear
// length of vectors for normalizing
var v_prev_len=Math.sqrt(v_prev_lensq);var v_next_len=Math.sqrt(v_next_x*v_next_x+v_next_y*v_next_y);// shift adjacent points by unit vectors to the left
var ptPrevShift_x=inPrev.x-v_prev_y/v_prev_len;var ptPrevShift_y=inPrev.y+v_prev_x/v_prev_len;var ptNextShift_x=inNext.x-v_next_y/v_next_len;var ptNextShift_y=inNext.y+v_next_x/v_next_len;// scaling factor for v_prev to intersection point
var sf=((ptNextShift_x-ptPrevShift_x)*v_next_y-(ptNextShift_y-ptPrevShift_y)*v_next_x)/(v_prev_x*v_next_y-v_prev_y*v_next_x);// vector from inPt to intersection point
v_trans_x=ptPrevShift_x+v_prev_x*sf-inPt.x;v_trans_y=ptPrevShift_y+v_prev_y*sf-inPt.y;// Don't normalize!, otherwise sharp corners become ugly
//  but prevent crazy spikes
var v_trans_lensq=v_trans_x*v_trans_x+v_trans_y*v_trans_y;if(v_trans_lensq<=2){return new Vector2(v_trans_x,v_trans_y);}else{shrink_by=Math.sqrt(v_trans_lensq/2);}}else{// handle special case of collinear edges
var direction_eq=false;// assumes: opposite
if(v_prev_x>Number.EPSILON){if(v_next_x>Number.EPSILON){direction_eq=true;}}else{if(v_prev_x<-Number.EPSILON){if(v_next_x<-Number.EPSILON){direction_eq=true;}}else{if(Math.sign(v_prev_y)===Math.sign(v_next_y)){direction_eq=true;}}}if(direction_eq){// console.log("Warning: lines are a straight sequence");
v_trans_x=-v_prev_y;v_trans_y=v_prev_x;shrink_by=Math.sqrt(v_prev_lensq);}else{// console.log("Warning: lines are a straight spike");
v_trans_x=v_prev_x;v_trans_y=v_prev_y;shrink_by=Math.sqrt(v_prev_lensq/2);}}return new Vector2(v_trans_x/shrink_by,v_trans_y/shrink_by);}var contourMovements=[];for(var i=0,il=contour.length,j=il-1,k=i+1;i<il;i++,j++,k++){if(j===il)j=0;if(k===il)k=0;//  (j)---(i)---(k)
// console.log('i,j,k', i, j , k)
contourMovements[i]=getBevelVec(contour[i],contour[j],contour[k]);}var holesMovements=[],oneHoleMovements,verticesMovements=contourMovements.concat();for(h=0,hl=holes.length;h<hl;h++){ahole=holes[h];oneHoleMovements=[];for(i=0,il=ahole.length,j=il-1,k=i+1;i<il;i++,j++,k++){if(j===il)j=0;if(k===il)k=0;//  (j)---(i)---(k)
oneHoleMovements[i]=getBevelVec(ahole[i],ahole[j],ahole[k]);}holesMovements.push(oneHoleMovements);verticesMovements=verticesMovements.concat(oneHoleMovements);}// Loop bevelSegments, 1 for the front, 1 for the back
for(b=0;b<bevelSegments;b++){//for ( b = bevelSegments; b > 0; b -- ) {
t=b/bevelSegments;z=bevelThickness*Math.cos(t*Math.PI/2);bs=bevelSize*Math.sin(t*Math.PI/2);// contract shape
for(i=0,il=contour.length;i<il;i++){vert=scalePt2(contour[i],contourMovements[i],bs);v(vert.x,vert.y,-z);}// expand holes
for(h=0,hl=holes.length;h<hl;h++){ahole=holes[h];oneHoleMovements=holesMovements[h];for(i=0,il=ahole.length;i<il;i++){vert=scalePt2(ahole[i],oneHoleMovements[i],bs);v(vert.x,vert.y,-z);}}}bs=bevelSize;// Back facing vertices
for(i=0;i<vlen;i++){vert=bevelEnabled?scalePt2(vertices[i],verticesMovements[i],bs):vertices[i];if(!extrudeByPath){v(vert.x,vert.y,0);}else{// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );
normal.copy(splineTube.normals[0]).multiplyScalar(vert.x);binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);position2.copy(extrudePts[0]).add(normal).add(binormal);v(position2.x,position2.y,position2.z);}}// Add stepped vertices...
// Including front facing vertices
var s;for(s=1;s<=steps;s++){for(i=0;i<vlen;i++){vert=bevelEnabled?scalePt2(vertices[i],verticesMovements[i],bs):vertices[i];if(!extrudeByPath){v(vert.x,vert.y,depth/steps*s);}else{// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );
normal.copy(splineTube.normals[s]).multiplyScalar(vert.x);binormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y);position2.copy(extrudePts[s]).add(normal).add(binormal);v(position2.x,position2.y,position2.z);}}}// Add bevel segments planes
//for ( b = 1; b <= bevelSegments; b ++ ) {
for(b=bevelSegments-1;b>=0;b--){t=b/bevelSegments;z=bevelThickness*Math.cos(t*Math.PI/2);bs=bevelSize*Math.sin(t*Math.PI/2);// contract shape
for(i=0,il=contour.length;i<il;i++){vert=scalePt2(contour[i],contourMovements[i],bs);v(vert.x,vert.y,depth+z);}// expand holes
for(h=0,hl=holes.length;h<hl;h++){ahole=holes[h];oneHoleMovements=holesMovements[h];for(i=0,il=ahole.length;i<il;i++){vert=scalePt2(ahole[i],oneHoleMovements[i],bs);if(!extrudeByPath){v(vert.x,vert.y,depth+z);}else{v(vert.x,vert.y+extrudePts[steps-1].y,extrudePts[steps-1].x+z);}}}}/* Faces */// Top and bottom faces
buildLidFaces();// Sides faces
buildSideFaces();/////  Internal functions
function buildLidFaces(){var start=verticesArray.length/3;if(bevelEnabled){var layer=0;// steps + 1
var offset=vlen*layer;// Bottom faces
for(i=0;i<flen;i++){face=faces[i];f3(face[2]+offset,face[1]+offset,face[0]+offset);}layer=steps+bevelSegments*2;offset=vlen*layer;// Top faces
for(i=0;i<flen;i++){face=faces[i];f3(face[0]+offset,face[1]+offset,face[2]+offset);}}else{// Bottom faces
for(i=0;i<flen;i++){face=faces[i];f3(face[2],face[1],face[0]);}// Top faces
for(i=0;i<flen;i++){face=faces[i];f3(face[0]+vlen*steps,face[1]+vlen*steps,face[2]+vlen*steps);}}scope.addGroup(start,verticesArray.length/3-start,0);}// Create faces for the z-sides of the shape
function buildSideFaces(){var start=verticesArray.length/3;var layeroffset=0;sidewalls(contour,layeroffset);layeroffset+=contour.length;for(h=0,hl=holes.length;h<hl;h++){ahole=holes[h];sidewalls(ahole,layeroffset);//, true
layeroffset+=ahole.length;}scope.addGroup(start,verticesArray.length/3-start,1);}function sidewalls(contour,layeroffset){var j,k;i=contour.length;while(--i>=0){j=i;k=i-1;if(k<0)k=contour.length-1;//console.log('b', i,j, i-1, k,vertices.length);
var s=0,sl=steps+bevelSegments*2;for(s=0;s<sl;s++){var slen1=vlen*s;var slen2=vlen*(s+1);var a=layeroffset+j+slen1,b=layeroffset+k+slen1,c=layeroffset+k+slen2,d=layeroffset+j+slen2;f4(a,b,c,d);}}}function v(x,y,z){placeholder.push(x);placeholder.push(y);placeholder.push(z);}function f3(a,b,c){addVertex(a);addVertex(b);addVertex(c);var nextIndex=verticesArray.length/3;var uvs=uvgen.generateTopUV(scope,verticesArray,nextIndex-3,nextIndex-2,nextIndex-1);addUV(uvs[0]);addUV(uvs[1]);addUV(uvs[2]);}function f4(a,b,c,d){addVertex(a);addVertex(b);addVertex(d);addVertex(b);addVertex(c);addVertex(d);var nextIndex=verticesArray.length/3;var uvs=uvgen.generateSideWallUV(scope,verticesArray,nextIndex-6,nextIndex-3,nextIndex-2,nextIndex-1);addUV(uvs[0]);addUV(uvs[1]);addUV(uvs[3]);addUV(uvs[1]);addUV(uvs[2]);addUV(uvs[3]);}function addVertex(index){verticesArray.push(placeholder[index*3+0]);verticesArray.push(placeholder[index*3+1]);verticesArray.push(placeholder[index*3+2]);}function addUV(vector2){uvArray.push(vector2.x);uvArray.push(vector2.y);}}}ExtrudeBufferGeometry.prototype=Object.create(BufferGeometry.prototype);ExtrudeBufferGeometry.prototype.constructor=ExtrudeBufferGeometry;ExtrudeBufferGeometry.prototype.toJSON=function(){var data=BufferGeometry.prototype.toJSON.call(this);var shapes=this.parameters.shapes;var options=this.parameters.options;return toJSON(shapes,options,data);};//
var WorldUVGenerator={generateTopUV:function generateTopUV(geometry,vertices,indexA,indexB,indexC){var a_x=vertices[indexA*3];var a_y=vertices[indexA*3+1];var b_x=vertices[indexB*3];var b_y=vertices[indexB*3+1];var c_x=vertices[indexC*3];var c_y=vertices[indexC*3+1];return[new Vector2(a_x,a_y),new Vector2(b_x,b_y),new Vector2(c_x,c_y)];},generateSideWallUV:function generateSideWallUV(geometry,vertices,indexA,indexB,indexC,indexD){var a_x=vertices[indexA*3];var a_y=vertices[indexA*3+1];var a_z=vertices[indexA*3+2];var b_x=vertices[indexB*3];var b_y=vertices[indexB*3+1];var b_z=vertices[indexB*3+2];var c_x=vertices[indexC*3];var c_y=vertices[indexC*3+1];var c_z=vertices[indexC*3+2];var d_x=vertices[indexD*3];var d_y=vertices[indexD*3+1];var d_z=vertices[indexD*3+2];if(Math.abs(a_y-b_y)<0.01){return[new Vector2(a_x,1-a_z),new Vector2(b_x,1-b_z),new Vector2(c_x,1-c_z),new Vector2(d_x,1-d_z)];}else{return[new Vector2(a_y,1-a_z),new Vector2(b_y,1-b_z),new Vector2(c_y,1-c_z),new Vector2(d_y,1-d_z)];}}};function toJSON(shapes,options,data){//
data.shapes=[];if(Array.isArray(shapes)){for(var i=0,l=shapes.length;i<l;i++){var shape=shapes[i];data.shapes.push(shape.uuid);}}else{data.shapes.push(shapes.uuid);}//
if(options.extrudePath!==undefined)data.options.extrudePath=options.extrudePath.toJSON();return data;}/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Text = 3D Text
	 *
	 * parameters = {
	 *  font: <THREE.Font>, // font
	 *
	 *  size: <float>, // size of the text
	 *  height: <float>, // thickness to extrude text
	 *  curveSegments: <int>, // number of points on the curves
	 *
	 *  bevelEnabled: <bool>, // turn on bevel
	 *  bevelThickness: <float>, // how deep into text bevel goes
	 *  bevelSize: <float> // how far from text outline is bevel
	 * }
	 */// TextGeometry
function TextGeometry(text,parameters){Geometry.call(this);this.type='TextGeometry';this.parameters={text:text,parameters:parameters};this.fromBufferGeometry(new TextBufferGeometry(text,parameters));this.mergeVertices();}TextGeometry.prototype=Object.create(Geometry.prototype);TextGeometry.prototype.constructor=TextGeometry;// TextBufferGeometry
function TextBufferGeometry(text,parameters){parameters=parameters||{};var font=parameters.font;if(!(font&&font.isFont)){console.error('THREE.TextGeometry: font parameter is not an instance of THREE.Font.');return new Geometry();}var shapes=font.generateShapes(text,parameters.size);// translate parameters to ExtrudeGeometry API
parameters.depth=parameters.height!==undefined?parameters.height:50;// defaults
if(parameters.bevelThickness===undefined)parameters.bevelThickness=10;if(parameters.bevelSize===undefined)parameters.bevelSize=8;if(parameters.bevelEnabled===undefined)parameters.bevelEnabled=false;ExtrudeBufferGeometry.call(this,shapes,parameters);this.type='TextBufferGeometry';}TextBufferGeometry.prototype=Object.create(ExtrudeBufferGeometry.prototype);TextBufferGeometry.prototype.constructor=TextBufferGeometry;/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author benaadams / https://twitter.com/ben_a_adams
	 * @author Mugen87 / https://github.com/Mugen87
	 */// SphereGeometry
function SphereGeometry(radius,widthSegments,heightSegments,phiStart,phiLength,thetaStart,thetaLength){Geometry.call(this);this.type='SphereGeometry';this.parameters={radius:radius,widthSegments:widthSegments,heightSegments:heightSegments,phiStart:phiStart,phiLength:phiLength,thetaStart:thetaStart,thetaLength:thetaLength};this.fromBufferGeometry(new SphereBufferGeometry(radius,widthSegments,heightSegments,phiStart,phiLength,thetaStart,thetaLength));this.mergeVertices();}SphereGeometry.prototype=Object.create(Geometry.prototype);SphereGeometry.prototype.constructor=SphereGeometry;// SphereBufferGeometry
function SphereBufferGeometry(radius,widthSegments,heightSegments,phiStart,phiLength,thetaStart,thetaLength){BufferGeometry.call(this);this.type='SphereBufferGeometry';this.parameters={radius:radius,widthSegments:widthSegments,heightSegments:heightSegments,phiStart:phiStart,phiLength:phiLength,thetaStart:thetaStart,thetaLength:thetaLength};radius=radius||1;widthSegments=Math.max(3,Math.floor(widthSegments)||8);heightSegments=Math.max(2,Math.floor(heightSegments)||6);phiStart=phiStart!==undefined?phiStart:0;phiLength=phiLength!==undefined?phiLength:Math.PI*2;thetaStart=thetaStart!==undefined?thetaStart:0;thetaLength=thetaLength!==undefined?thetaLength:Math.PI;var thetaEnd=thetaStart+thetaLength;var ix,iy;var index=0;var grid=[];var vertex=new Vector3();var normal=new Vector3();// buffers
var indices=[];var vertices=[];var normals=[];var uvs=[];// generate vertices, normals and uvs
for(iy=0;iy<=heightSegments;iy++){var verticesRow=[];var v=iy/heightSegments;for(ix=0;ix<=widthSegments;ix++){var u=ix/widthSegments;// vertex
vertex.x=-radius*Math.cos(phiStart+u*phiLength)*Math.sin(thetaStart+v*thetaLength);vertex.y=radius*Math.cos(thetaStart+v*thetaLength);vertex.z=radius*Math.sin(phiStart+u*phiLength)*Math.sin(thetaStart+v*thetaLength);vertices.push(vertex.x,vertex.y,vertex.z);// normal
normal.set(vertex.x,vertex.y,vertex.z).normalize();normals.push(normal.x,normal.y,normal.z);// uv
uvs.push(u,1-v);verticesRow.push(index++);}grid.push(verticesRow);}// indices
for(iy=0;iy<heightSegments;iy++){for(ix=0;ix<widthSegments;ix++){var a=grid[iy][ix+1];var b=grid[iy][ix];var c=grid[iy+1][ix];var d=grid[iy+1][ix+1];if(iy!==0||thetaStart>0)indices.push(a,b,d);if(iy!==heightSegments-1||thetaEnd<Math.PI)indices.push(b,c,d);}}// build geometry
this.setIndex(indices);this.addAttribute('position',new Float32BufferAttribute(vertices,3));this.addAttribute('normal',new Float32BufferAttribute(normals,3));this.addAttribute('uv',new Float32BufferAttribute(uvs,2));}SphereBufferGeometry.prototype=Object.create(BufferGeometry.prototype);SphereBufferGeometry.prototype.constructor=SphereBufferGeometry;/**
	 * @author Kaleb Murphy
	 * @author Mugen87 / https://github.com/Mugen87
	 */// RingGeometry
function RingGeometry(innerRadius,outerRadius,thetaSegments,phiSegments,thetaStart,thetaLength){Geometry.call(this);this.type='RingGeometry';this.parameters={innerRadius:innerRadius,outerRadius:outerRadius,thetaSegments:thetaSegments,phiSegments:phiSegments,thetaStart:thetaStart,thetaLength:thetaLength};this.fromBufferGeometry(new RingBufferGeometry(innerRadius,outerRadius,thetaSegments,phiSegments,thetaStart,thetaLength));this.mergeVertices();}RingGeometry.prototype=Object.create(Geometry.prototype);RingGeometry.prototype.constructor=RingGeometry;// RingBufferGeometry
function RingBufferGeometry(innerRadius,outerRadius,thetaSegments,phiSegments,thetaStart,thetaLength){BufferGeometry.call(this);this.type='RingBufferGeometry';this.parameters={innerRadius:innerRadius,outerRadius:outerRadius,thetaSegments:thetaSegments,phiSegments:phiSegments,thetaStart:thetaStart,thetaLength:thetaLength};innerRadius=innerRadius||0.5;outerRadius=outerRadius||1;thetaStart=thetaStart!==undefined?thetaStart:0;thetaLength=thetaLength!==undefined?thetaLength:Math.PI*2;thetaSegments=thetaSegments!==undefined?Math.max(3,thetaSegments):8;phiSegments=phiSegments!==undefined?Math.max(1,phiSegments):1;// buffers
var indices=[];var vertices=[];var normals=[];var uvs=[];// some helper variables
var segment;var radius=innerRadius;var radiusStep=(outerRadius-innerRadius)/phiSegments;var vertex=new Vector3();var uv=new Vector2();var j,i;// generate vertices, normals and uvs
for(j=0;j<=phiSegments;j++){for(i=0;i<=thetaSegments;i++){// values are generate from the inside of the ring to the outside
segment=thetaStart+i/thetaSegments*thetaLength;// vertex
vertex.x=radius*Math.cos(segment);vertex.y=radius*Math.sin(segment);vertices.push(vertex.x,vertex.y,vertex.z);// normal
normals.push(0,0,1);// uv
uv.x=(vertex.x/outerRadius+1)/2;uv.y=(vertex.y/outerRadius+1)/2;uvs.push(uv.x,uv.y);}// increase the radius for next row of vertices
radius+=radiusStep;}// indices
for(j=0;j<phiSegments;j++){var thetaSegmentLevel=j*(thetaSegments+1);for(i=0;i<thetaSegments;i++){segment=i+thetaSegmentLevel;var a=segment;var b=segment+thetaSegments+1;var c=segment+thetaSegments+2;var d=segment+1;// faces
indices.push(a,b,d);indices.push(b,c,d);}}// build geometry
this.setIndex(indices);this.addAttribute('position',new Float32BufferAttribute(vertices,3));this.addAttribute('normal',new Float32BufferAttribute(normals,3));this.addAttribute('uv',new Float32BufferAttribute(uvs,2));}RingBufferGeometry.prototype=Object.create(BufferGeometry.prototype);RingBufferGeometry.prototype.constructor=RingBufferGeometry;/**
	 * @author zz85 / https://github.com/zz85
	 * @author bhouston / http://clara.io
	 * @author Mugen87 / https://github.com/Mugen87
	 */// LatheGeometry
function LatheGeometry(points,segments,phiStart,phiLength){Geometry.call(this);this.type='LatheGeometry';this.parameters={points:points,segments:segments,phiStart:phiStart,phiLength:phiLength};this.fromBufferGeometry(new LatheBufferGeometry(points,segments,phiStart,phiLength));this.mergeVertices();}LatheGeometry.prototype=Object.create(Geometry.prototype);LatheGeometry.prototype.constructor=LatheGeometry;// LatheBufferGeometry
function LatheBufferGeometry(points,segments,phiStart,phiLength){BufferGeometry.call(this);this.type='LatheBufferGeometry';this.parameters={points:points,segments:segments,phiStart:phiStart,phiLength:phiLength};segments=Math.floor(segments)||12;phiStart=phiStart||0;phiLength=phiLength||Math.PI*2;// clamp phiLength so it's in range of [ 0, 2PI ]
phiLength=_Math.clamp(phiLength,0,Math.PI*2);// buffers
var indices=[];var vertices=[];var uvs=[];// helper variables
var base;var inverseSegments=1.0/segments;var vertex=new Vector3();var uv=new Vector2();var i,j;// generate vertices and uvs
for(i=0;i<=segments;i++){var phi=phiStart+i*inverseSegments*phiLength;var sin=Math.sin(phi);var cos=Math.cos(phi);for(j=0;j<=points.length-1;j++){// vertex
vertex.x=points[j].x*sin;vertex.y=points[j].y;vertex.z=points[j].x*cos;vertices.push(vertex.x,vertex.y,vertex.z);// uv
uv.x=i/segments;uv.y=j/(points.length-1);uvs.push(uv.x,uv.y);}}// indices
for(i=0;i<segments;i++){for(j=0;j<points.length-1;j++){base=j+i*points.length;var a=base;var b=base+points.length;var c=base+points.length+1;var d=base+1;// faces
indices.push(a,b,d);indices.push(b,c,d);}}// build geometry
this.setIndex(indices);this.addAttribute('position',new Float32BufferAttribute(vertices,3));this.addAttribute('uv',new Float32BufferAttribute(uvs,2));// generate normals
this.computeVertexNormals();// if the geometry is closed, we need to average the normals along the seam.
// because the corresponding vertices are identical (but still have different UVs).
if(phiLength===Math.PI*2){var normals=this.attributes.normal.array;var n1=new Vector3();var n2=new Vector3();var n=new Vector3();// this is the buffer offset for the last line of vertices
base=segments*points.length*3;for(i=0,j=0;i<points.length;i++,j+=3){// select the normal of the vertex in the first line
n1.x=normals[j+0];n1.y=normals[j+1];n1.z=normals[j+2];// select the normal of the vertex in the last line
n2.x=normals[base+j+0];n2.y=normals[base+j+1];n2.z=normals[base+j+2];// average normals
n.addVectors(n1,n2).normalize();// assign the new values to both normals
normals[j+0]=normals[base+j+0]=n.x;normals[j+1]=normals[base+j+1]=n.y;normals[j+2]=normals[base+j+2]=n.z;}}}LatheBufferGeometry.prototype=Object.create(BufferGeometry.prototype);LatheBufferGeometry.prototype.constructor=LatheBufferGeometry;/**
	 * @author jonobr1 / http://jonobr1.com
	 * @author Mugen87 / https://github.com/Mugen87
	 */// ShapeGeometry
function ShapeGeometry(shapes,curveSegments){Geometry.call(this);this.type='ShapeGeometry';if((typeof curveSegments==='undefined'?'undefined':_typeof(curveSegments))==='object'){console.warn('THREE.ShapeGeometry: Options parameter has been removed.');curveSegments=curveSegments.curveSegments;}this.parameters={shapes:shapes,curveSegments:curveSegments};this.fromBufferGeometry(new ShapeBufferGeometry(shapes,curveSegments));this.mergeVertices();}ShapeGeometry.prototype=Object.create(Geometry.prototype);ShapeGeometry.prototype.constructor=ShapeGeometry;ShapeGeometry.prototype.toJSON=function(){var data=Geometry.prototype.toJSON.call(this);var shapes=this.parameters.shapes;return toJSON$1(shapes,data);};// ShapeBufferGeometry
function ShapeBufferGeometry(shapes,curveSegments){BufferGeometry.call(this);this.type='ShapeBufferGeometry';this.parameters={shapes:shapes,curveSegments:curveSegments};curveSegments=curveSegments||12;// buffers
var indices=[];var vertices=[];var normals=[];var uvs=[];// helper variables
var groupStart=0;var groupCount=0;// allow single and array values for "shapes" parameter
if(Array.isArray(shapes)===false){addShape(shapes);}else{for(var i=0;i<shapes.length;i++){addShape(shapes[i]);this.addGroup(groupStart,groupCount,i);// enables MultiMaterial support
groupStart+=groupCount;groupCount=0;}}// build geometry
this.setIndex(indices);this.addAttribute('position',new Float32BufferAttribute(vertices,3));this.addAttribute('normal',new Float32BufferAttribute(normals,3));this.addAttribute('uv',new Float32BufferAttribute(uvs,2));// helper functions
function addShape(shape){var i,l,shapeHole;var indexOffset=vertices.length/3;var points=shape.extractPoints(curveSegments);var shapeVertices=points.shape;var shapeHoles=points.holes;// check direction of vertices
if(ShapeUtils.isClockWise(shapeVertices)===false){shapeVertices=shapeVertices.reverse();// also check if holes are in the opposite direction
for(i=0,l=shapeHoles.length;i<l;i++){shapeHole=shapeHoles[i];if(ShapeUtils.isClockWise(shapeHole)===true){shapeHoles[i]=shapeHole.reverse();}}}var faces=ShapeUtils.triangulateShape(shapeVertices,shapeHoles);// join vertices of inner and outer paths to a single array
for(i=0,l=shapeHoles.length;i<l;i++){shapeHole=shapeHoles[i];shapeVertices=shapeVertices.concat(shapeHole);}// vertices, normals, uvs
for(i=0,l=shapeVertices.length;i<l;i++){var vertex=shapeVertices[i];vertices.push(vertex.x,vertex.y,0);normals.push(0,0,1);uvs.push(vertex.x,vertex.y);// world uvs
}// incides
for(i=0,l=faces.length;i<l;i++){var face=faces[i];var a=face[0]+indexOffset;var b=face[1]+indexOffset;var c=face[2]+indexOffset;indices.push(a,b,c);groupCount+=3;}}}ShapeBufferGeometry.prototype=Object.create(BufferGeometry.prototype);ShapeBufferGeometry.prototype.constructor=ShapeBufferGeometry;ShapeBufferGeometry.prototype.toJSON=function(){var data=BufferGeometry.prototype.toJSON.call(this);var shapes=this.parameters.shapes;return toJSON$1(shapes,data);};//
function toJSON$1(shapes,data){data.shapes=[];if(Array.isArray(shapes)){for(var i=0,l=shapes.length;i<l;i++){var shape=shapes[i];data.shapes.push(shape.uuid);}}else{data.shapes.push(shapes.uuid);}return data;}/**
	 * @author WestLangley / http://github.com/WestLangley
	 * @author Mugen87 / https://github.com/Mugen87
	 */function EdgesGeometry(geometry,thresholdAngle){BufferGeometry.call(this);this.type='EdgesGeometry';this.parameters={thresholdAngle:thresholdAngle};thresholdAngle=thresholdAngle!==undefined?thresholdAngle:1;// buffer
var vertices=[];// helper variables
var thresholdDot=Math.cos(_Math.DEG2RAD*thresholdAngle);var edge=[0,0],edges={},edge1,edge2;var key,keys=['a','b','c'];// prepare source geometry
var geometry2;if(geometry.isBufferGeometry){geometry2=new Geometry();geometry2.fromBufferGeometry(geometry);}else{geometry2=geometry.clone();}geometry2.mergeVertices();geometry2.computeFaceNormals();var sourceVertices=geometry2.vertices;var faces=geometry2.faces;// now create a data structure where each entry represents an edge with its adjoining faces
for(var i=0,l=faces.length;i<l;i++){var face=faces[i];for(var j=0;j<3;j++){edge1=face[keys[j]];edge2=face[keys[(j+1)%3]];edge[0]=Math.min(edge1,edge2);edge[1]=Math.max(edge1,edge2);key=edge[0]+','+edge[1];if(edges[key]===undefined){edges[key]={index1:edge[0],index2:edge[1],face1:i,face2:undefined};}else{edges[key].face2=i;}}}// generate vertices
for(key in edges){var e=edges[key];// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.
if(e.face2===undefined||faces[e.face1].normal.dot(faces[e.face2].normal)<=thresholdDot){var vertex=sourceVertices[e.index1];vertices.push(vertex.x,vertex.y,vertex.z);vertex=sourceVertices[e.index2];vertices.push(vertex.x,vertex.y,vertex.z);}}// build geometry
this.addAttribute('position',new Float32BufferAttribute(vertices,3));}EdgesGeometry.prototype=Object.create(BufferGeometry.prototype);EdgesGeometry.prototype.constructor=EdgesGeometry;/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */// CylinderGeometry
function CylinderGeometry(radiusTop,radiusBottom,height,radialSegments,heightSegments,openEnded,thetaStart,thetaLength){Geometry.call(this);this.type='CylinderGeometry';this.parameters={radiusTop:radiusTop,radiusBottom:radiusBottom,height:height,radialSegments:radialSegments,heightSegments:heightSegments,openEnded:openEnded,thetaStart:thetaStart,thetaLength:thetaLength};this.fromBufferGeometry(new CylinderBufferGeometry(radiusTop,radiusBottom,height,radialSegments,heightSegments,openEnded,thetaStart,thetaLength));this.mergeVertices();}CylinderGeometry.prototype=Object.create(Geometry.prototype);CylinderGeometry.prototype.constructor=CylinderGeometry;// CylinderBufferGeometry
function CylinderBufferGeometry(radiusTop,radiusBottom,height,radialSegments,heightSegments,openEnded,thetaStart,thetaLength){BufferGeometry.call(this);this.type='CylinderBufferGeometry';this.parameters={radiusTop:radiusTop,radiusBottom:radiusBottom,height:height,radialSegments:radialSegments,heightSegments:heightSegments,openEnded:openEnded,thetaStart:thetaStart,thetaLength:thetaLength};var scope=this;radiusTop=radiusTop!==undefined?radiusTop:1;radiusBottom=radiusBottom!==undefined?radiusBottom:1;height=height||1;radialSegments=Math.floor(radialSegments)||8;heightSegments=Math.floor(heightSegments)||1;openEnded=openEnded!==undefined?openEnded:false;thetaStart=thetaStart!==undefined?thetaStart:0.0;thetaLength=thetaLength!==undefined?thetaLength:Math.PI*2;// buffers
var indices=[];var vertices=[];var normals=[];var uvs=[];// helper variables
var index=0;var indexArray=[];var halfHeight=height/2;var groupStart=0;// generate geometry
generateTorso();if(openEnded===false){if(radiusTop>0)generateCap(true);if(radiusBottom>0)generateCap(false);}// build geometry
this.setIndex(indices);this.addAttribute('position',new Float32BufferAttribute(vertices,3));this.addAttribute('normal',new Float32BufferAttribute(normals,3));this.addAttribute('uv',new Float32BufferAttribute(uvs,2));function generateTorso(){var x,y;var normal=new Vector3();var vertex=new Vector3();var groupCount=0;// this will be used to calculate the normal
var slope=(radiusBottom-radiusTop)/height;// generate vertices, normals and uvs
for(y=0;y<=heightSegments;y++){var indexRow=[];var v=y/heightSegments;// calculate the radius of the current row
var radius=v*(radiusBottom-radiusTop)+radiusTop;for(x=0;x<=radialSegments;x++){var u=x/radialSegments;var theta=u*thetaLength+thetaStart;var sinTheta=Math.sin(theta);var cosTheta=Math.cos(theta);// vertex
vertex.x=radius*sinTheta;vertex.y=-v*height+halfHeight;vertex.z=radius*cosTheta;vertices.push(vertex.x,vertex.y,vertex.z);// normal
normal.set(sinTheta,slope,cosTheta).normalize();normals.push(normal.x,normal.y,normal.z);// uv
uvs.push(u,1-v);// save index of vertex in respective row
indexRow.push(index++);}// now save vertices of the row in our index array
indexArray.push(indexRow);}// generate indices
for(x=0;x<radialSegments;x++){for(y=0;y<heightSegments;y++){// we use the index array to access the correct indices
var a=indexArray[y][x];var b=indexArray[y+1][x];var c=indexArray[y+1][x+1];var d=indexArray[y][x+1];// faces
indices.push(a,b,d);indices.push(b,c,d);// update group counter
groupCount+=6;}}// add a group to the geometry. this will ensure multi material support
scope.addGroup(groupStart,groupCount,0);// calculate new start value for groups
groupStart+=groupCount;}function generateCap(top){var x,centerIndexStart,centerIndexEnd;var uv=new Vector2();var vertex=new Vector3();var groupCount=0;var radius=top===true?radiusTop:radiusBottom;var sign=top===true?1:-1;// save the index of the first center vertex
centerIndexStart=index;// first we generate the center vertex data of the cap.
// because the geometry needs one set of uvs per face,
// we must generate a center vertex per face/segment
for(x=1;x<=radialSegments;x++){// vertex
vertices.push(0,halfHeight*sign,0);// normal
normals.push(0,sign,0);// uv
uvs.push(0.5,0.5);// increase index
index++;}// save the index of the last center vertex
centerIndexEnd=index;// now we generate the surrounding vertices, normals and uvs
for(x=0;x<=radialSegments;x++){var u=x/radialSegments;var theta=u*thetaLength+thetaStart;var cosTheta=Math.cos(theta);var sinTheta=Math.sin(theta);// vertex
vertex.x=radius*sinTheta;vertex.y=halfHeight*sign;vertex.z=radius*cosTheta;vertices.push(vertex.x,vertex.y,vertex.z);// normal
normals.push(0,sign,0);// uv
uv.x=cosTheta*0.5+0.5;uv.y=sinTheta*0.5*sign+0.5;uvs.push(uv.x,uv.y);// increase index
index++;}// generate indices
for(x=0;x<radialSegments;x++){var c=centerIndexStart+x;var i=centerIndexEnd+x;if(top===true){// face top
indices.push(i,i+1,c);}else{// face bottom
indices.push(i+1,i,c);}groupCount+=3;}// add a group to the geometry. this will ensure multi material support
scope.addGroup(groupStart,groupCount,top===true?1:2);// calculate new start value for groups
groupStart+=groupCount;}}CylinderBufferGeometry.prototype=Object.create(BufferGeometry.prototype);CylinderBufferGeometry.prototype.constructor=CylinderBufferGeometry;/**
	 * @author abelnation / http://github.com/abelnation
	 */// ConeGeometry
function ConeGeometry(radius,height,radialSegments,heightSegments,openEnded,thetaStart,thetaLength){CylinderGeometry.call(this,0,radius,height,radialSegments,heightSegments,openEnded,thetaStart,thetaLength);this.type='ConeGeometry';this.parameters={radius:radius,height:height,radialSegments:radialSegments,heightSegments:heightSegments,openEnded:openEnded,thetaStart:thetaStart,thetaLength:thetaLength};}ConeGeometry.prototype=Object.create(CylinderGeometry.prototype);ConeGeometry.prototype.constructor=ConeGeometry;// ConeBufferGeometry
function ConeBufferGeometry(radius,height,radialSegments,heightSegments,openEnded,thetaStart,thetaLength){CylinderBufferGeometry.call(this,0,radius,height,radialSegments,heightSegments,openEnded,thetaStart,thetaLength);this.type='ConeBufferGeometry';this.parameters={radius:radius,height:height,radialSegments:radialSegments,heightSegments:heightSegments,openEnded:openEnded,thetaStart:thetaStart,thetaLength:thetaLength};}ConeBufferGeometry.prototype=Object.create(CylinderBufferGeometry.prototype);ConeBufferGeometry.prototype.constructor=ConeBufferGeometry;/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 * @author Mugen87 / https://github.com/Mugen87
	 * @author hughes
	 */// CircleGeometry
function CircleGeometry(radius,segments,thetaStart,thetaLength){Geometry.call(this);this.type='CircleGeometry';this.parameters={radius:radius,segments:segments,thetaStart:thetaStart,thetaLength:thetaLength};this.fromBufferGeometry(new CircleBufferGeometry(radius,segments,thetaStart,thetaLength));this.mergeVertices();}CircleGeometry.prototype=Object.create(Geometry.prototype);CircleGeometry.prototype.constructor=CircleGeometry;// CircleBufferGeometry
function CircleBufferGeometry(radius,segments,thetaStart,thetaLength){BufferGeometry.call(this);this.type='CircleBufferGeometry';this.parameters={radius:radius,segments:segments,thetaStart:thetaStart,thetaLength:thetaLength};radius=radius||1;segments=segments!==undefined?Math.max(3,segments):8;thetaStart=thetaStart!==undefined?thetaStart:0;thetaLength=thetaLength!==undefined?thetaLength:Math.PI*2;// buffers
var indices=[];var vertices=[];var normals=[];var uvs=[];// helper variables
var i,s;var vertex=new Vector3();var uv=new Vector2();// center point
vertices.push(0,0,0);normals.push(0,0,1);uvs.push(0.5,0.5);for(s=0,i=3;s<=segments;s++,i+=3){var segment=thetaStart+s/segments*thetaLength;// vertex
vertex.x=radius*Math.cos(segment);vertex.y=radius*Math.sin(segment);vertices.push(vertex.x,vertex.y,vertex.z);// normal
normals.push(0,0,1);// uvs
uv.x=(vertices[i]/radius+1)/2;uv.y=(vertices[i+1]/radius+1)/2;uvs.push(uv.x,uv.y);}// indices
for(i=1;i<=segments;i++){indices.push(i,i+1,0);}// build geometry
this.setIndex(indices);this.addAttribute('position',new Float32BufferAttribute(vertices,3));this.addAttribute('normal',new Float32BufferAttribute(normals,3));this.addAttribute('uv',new Float32BufferAttribute(uvs,2));}CircleBufferGeometry.prototype=Object.create(BufferGeometry.prototype);CircleBufferGeometry.prototype.constructor=CircleBufferGeometry;var Geometries=/*#__PURE__*/Object.freeze({WireframeGeometry:WireframeGeometry,ParametricGeometry:ParametricGeometry,ParametricBufferGeometry:ParametricBufferGeometry,TetrahedronGeometry:TetrahedronGeometry,TetrahedronBufferGeometry:TetrahedronBufferGeometry,OctahedronGeometry:OctahedronGeometry,OctahedronBufferGeometry:OctahedronBufferGeometry,IcosahedronGeometry:IcosahedronGeometry,IcosahedronBufferGeometry:IcosahedronBufferGeometry,DodecahedronGeometry:DodecahedronGeometry,DodecahedronBufferGeometry:DodecahedronBufferGeometry,PolyhedronGeometry:PolyhedronGeometry,PolyhedronBufferGeometry:PolyhedronBufferGeometry,TubeGeometry:TubeGeometry,TubeBufferGeometry:TubeBufferGeometry,TorusKnotGeometry:TorusKnotGeometry,TorusKnotBufferGeometry:TorusKnotBufferGeometry,TorusGeometry:TorusGeometry,TorusBufferGeometry:TorusBufferGeometry,TextGeometry:TextGeometry,TextBufferGeometry:TextBufferGeometry,SphereGeometry:SphereGeometry,SphereBufferGeometry:SphereBufferGeometry,RingGeometry:RingGeometry,RingBufferGeometry:RingBufferGeometry,PlaneGeometry:PlaneGeometry,PlaneBufferGeometry:PlaneBufferGeometry,LatheGeometry:LatheGeometry,LatheBufferGeometry:LatheBufferGeometry,ShapeGeometry:ShapeGeometry,ShapeBufferGeometry:ShapeBufferGeometry,ExtrudeGeometry:ExtrudeGeometry,ExtrudeBufferGeometry:ExtrudeBufferGeometry,EdgesGeometry:EdgesGeometry,ConeGeometry:ConeGeometry,ConeBufferGeometry:ConeBufferGeometry,CylinderGeometry:CylinderGeometry,CylinderBufferGeometry:CylinderBufferGeometry,CircleGeometry:CircleGeometry,CircleBufferGeometry:CircleBufferGeometry,BoxGeometry:BoxGeometry,BoxBufferGeometry:BoxBufferGeometry});/**
	 * @author mrdoob / http://mrdoob.com/
	 *
	 * parameters = {
	 *  color: <THREE.Color>
	 * }
	 */function ShadowMaterial(parameters){Material.call(this);this.type='ShadowMaterial';this.color=new Color(0x000000);this.transparent=true;this.setValues(parameters);}ShadowMaterial.prototype=Object.create(Material.prototype);ShadowMaterial.prototype.constructor=ShadowMaterial;ShadowMaterial.prototype.isShadowMaterial=true;ShadowMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.color.copy(source.color);return this;};/**
	 * @author mrdoob / http://mrdoob.com/
	 */function RawShaderMaterial(parameters){ShaderMaterial.call(this,parameters);this.type='RawShaderMaterial';}RawShaderMaterial.prototype=Object.create(ShaderMaterial.prototype);RawShaderMaterial.prototype.constructor=RawShaderMaterial;RawShaderMaterial.prototype.isRawShaderMaterial=true;/**
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  roughness: <float>,
	 *  metalness: <float>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  emissive: <hex>,
	 *  emissiveIntensity: <float>
	 *  emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *  bumpMap: new THREE.Texture( <Image> ),
	 *  bumpScale: <float>,
	 *
	 *  normalMap: new THREE.Texture( <Image> ),
	 *  normalMapType: THREE.TangentSpaceNormalMap,
	 *  normalScale: <Vector2>,
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  roughnessMap: new THREE.Texture( <Image> ),
	 *
	 *  metalnessMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
	 *  envMapIntensity: <float>
	 *
	 *  refractionRatio: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */function MeshStandardMaterial(parameters){Material.call(this);this.defines={'STANDARD':''};this.type='MeshStandardMaterial';this.color=new Color(0xffffff);// diffuse
this.roughness=0.5;this.metalness=0.5;this.map=null;this.lightMap=null;this.lightMapIntensity=1.0;this.aoMap=null;this.aoMapIntensity=1.0;this.emissive=new Color(0x000000);this.emissiveIntensity=1.0;this.emissiveMap=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.roughnessMap=null;this.metalnessMap=null;this.alphaMap=null;this.envMap=null;this.envMapIntensity=1.0;this.refractionRatio=0.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap='round';this.wireframeLinejoin='round';this.skinning=false;this.morphTargets=false;this.morphNormals=false;this.setValues(parameters);}MeshStandardMaterial.prototype=Object.create(Material.prototype);MeshStandardMaterial.prototype.constructor=MeshStandardMaterial;MeshStandardMaterial.prototype.isMeshStandardMaterial=true;MeshStandardMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.defines={'STANDARD':''};this.color.copy(source.color);this.roughness=source.roughness;this.metalness=source.metalness;this.map=source.map;this.lightMap=source.lightMap;this.lightMapIntensity=source.lightMapIntensity;this.aoMap=source.aoMap;this.aoMapIntensity=source.aoMapIntensity;this.emissive.copy(source.emissive);this.emissiveMap=source.emissiveMap;this.emissiveIntensity=source.emissiveIntensity;this.bumpMap=source.bumpMap;this.bumpScale=source.bumpScale;this.normalMap=source.normalMap;this.normalMapType=source.normalMapType;this.normalScale.copy(source.normalScale);this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.roughnessMap=source.roughnessMap;this.metalnessMap=source.metalnessMap;this.alphaMap=source.alphaMap;this.envMap=source.envMap;this.envMapIntensity=source.envMapIntensity;this.refractionRatio=source.refractionRatio;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.wireframeLinecap=source.wireframeLinecap;this.wireframeLinejoin=source.wireframeLinejoin;this.skinning=source.skinning;this.morphTargets=source.morphTargets;this.morphNormals=source.morphNormals;return this;};/**
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *  reflectivity: <float>
	 * }
	 */function MeshPhysicalMaterial(parameters){MeshStandardMaterial.call(this);this.defines={'PHYSICAL':''};this.type='MeshPhysicalMaterial';this.reflectivity=0.5;// maps to F0 = 0.04
this.clearCoat=0.0;this.clearCoatRoughness=0.0;this.setValues(parameters);}MeshPhysicalMaterial.prototype=Object.create(MeshStandardMaterial.prototype);MeshPhysicalMaterial.prototype.constructor=MeshPhysicalMaterial;MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial=true;MeshPhysicalMaterial.prototype.copy=function(source){MeshStandardMaterial.prototype.copy.call(this,source);this.defines={'PHYSICAL':''};this.reflectivity=source.reflectivity;this.clearCoat=source.clearCoat;this.clearCoatRoughness=source.clearCoatRoughness;return this;};/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  specular: <hex>,
	 *  shininess: <float>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  emissive: <hex>,
	 *  emissiveIntensity: <float>
	 *  emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *  bumpMap: new THREE.Texture( <Image> ),
	 *  bumpScale: <float>,
	 *
	 *  normalMap: new THREE.Texture( <Image> ),
	 *  normalMapType: THREE.TangentSpaceNormalMap,
	 *  normalScale: <Vector2>,
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */function MeshPhongMaterial(parameters){Material.call(this);this.type='MeshPhongMaterial';this.color=new Color(0xffffff);// diffuse
this.specular=new Color(0x111111);this.shininess=30;this.map=null;this.lightMap=null;this.lightMapIntensity=1.0;this.aoMap=null;this.aoMapIntensity=1.0;this.emissive=new Color(0x000000);this.emissiveIntensity=1.0;this.emissiveMap=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.specularMap=null;this.alphaMap=null;this.envMap=null;this.combine=MultiplyOperation;this.reflectivity=1;this.refractionRatio=0.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap='round';this.wireframeLinejoin='round';this.skinning=false;this.morphTargets=false;this.morphNormals=false;this.setValues(parameters);}MeshPhongMaterial.prototype=Object.create(Material.prototype);MeshPhongMaterial.prototype.constructor=MeshPhongMaterial;MeshPhongMaterial.prototype.isMeshPhongMaterial=true;MeshPhongMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.color.copy(source.color);this.specular.copy(source.specular);this.shininess=source.shininess;this.map=source.map;this.lightMap=source.lightMap;this.lightMapIntensity=source.lightMapIntensity;this.aoMap=source.aoMap;this.aoMapIntensity=source.aoMapIntensity;this.emissive.copy(source.emissive);this.emissiveMap=source.emissiveMap;this.emissiveIntensity=source.emissiveIntensity;this.bumpMap=source.bumpMap;this.bumpScale=source.bumpScale;this.normalMap=source.normalMap;this.normalMapType=source.normalMapType;this.normalScale.copy(source.normalScale);this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.specularMap=source.specularMap;this.alphaMap=source.alphaMap;this.envMap=source.envMap;this.combine=source.combine;this.reflectivity=source.reflectivity;this.refractionRatio=source.refractionRatio;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.wireframeLinecap=source.wireframeLinecap;this.wireframeLinejoin=source.wireframeLinejoin;this.skinning=source.skinning;this.morphTargets=source.morphTargets;this.morphNormals=source.morphNormals;return this;};/**
	 * @author takahirox / http://github.com/takahirox
	 *
	 * parameters = {
	 *  gradientMap: new THREE.Texture( <Image> )
	 * }
	 */function MeshToonMaterial(parameters){MeshPhongMaterial.call(this);this.defines={'TOON':''};this.type='MeshToonMaterial';this.gradientMap=null;this.setValues(parameters);}MeshToonMaterial.prototype=Object.create(MeshPhongMaterial.prototype);MeshToonMaterial.prototype.constructor=MeshToonMaterial;MeshToonMaterial.prototype.isMeshToonMaterial=true;MeshToonMaterial.prototype.copy=function(source){MeshPhongMaterial.prototype.copy.call(this,source);this.gradientMap=source.gradientMap;return this;};/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *  opacity: <float>,
	 *
	 *  bumpMap: new THREE.Texture( <Image> ),
	 *  bumpScale: <float>,
	 *
	 *  normalMap: new THREE.Texture( <Image> ),
	 *  normalMapType: THREE.TangentSpaceNormalMap,
	 *  normalScale: <Vector2>,
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */function MeshNormalMaterial(parameters){Material.call(this);this.type='MeshNormalMaterial';this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.wireframe=false;this.wireframeLinewidth=1;this.fog=false;this.lights=false;this.skinning=false;this.morphTargets=false;this.morphNormals=false;this.setValues(parameters);}MeshNormalMaterial.prototype=Object.create(Material.prototype);MeshNormalMaterial.prototype.constructor=MeshNormalMaterial;MeshNormalMaterial.prototype.isMeshNormalMaterial=true;MeshNormalMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.bumpMap=source.bumpMap;this.bumpScale=source.bumpScale;this.normalMap=source.normalMap;this.normalMapType=source.normalMapType;this.normalScale.copy(source.normalScale);this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.skinning=source.skinning;this.morphTargets=source.morphTargets;this.morphNormals=source.morphNormals;return this;};/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  emissive: <hex>,
	 *  emissiveIntensity: <float>
	 *  emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */function MeshLambertMaterial(parameters){Material.call(this);this.type='MeshLambertMaterial';this.color=new Color(0xffffff);// diffuse
this.map=null;this.lightMap=null;this.lightMapIntensity=1.0;this.aoMap=null;this.aoMapIntensity=1.0;this.emissive=new Color(0x000000);this.emissiveIntensity=1.0;this.emissiveMap=null;this.specularMap=null;this.alphaMap=null;this.envMap=null;this.combine=MultiplyOperation;this.reflectivity=1;this.refractionRatio=0.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap='round';this.wireframeLinejoin='round';this.skinning=false;this.morphTargets=false;this.morphNormals=false;this.setValues(parameters);}MeshLambertMaterial.prototype=Object.create(Material.prototype);MeshLambertMaterial.prototype.constructor=MeshLambertMaterial;MeshLambertMaterial.prototype.isMeshLambertMaterial=true;MeshLambertMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.color.copy(source.color);this.map=source.map;this.lightMap=source.lightMap;this.lightMapIntensity=source.lightMapIntensity;this.aoMap=source.aoMap;this.aoMapIntensity=source.aoMapIntensity;this.emissive.copy(source.emissive);this.emissiveMap=source.emissiveMap;this.emissiveIntensity=source.emissiveIntensity;this.specularMap=source.specularMap;this.alphaMap=source.alphaMap;this.envMap=source.envMap;this.combine=source.combine;this.reflectivity=source.reflectivity;this.refractionRatio=source.refractionRatio;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.wireframeLinecap=source.wireframeLinecap;this.wireframeLinejoin=source.wireframeLinejoin;this.skinning=source.skinning;this.morphTargets=source.morphTargets;this.morphNormals=source.morphNormals;return this;};/**
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  matcap: new THREE.Texture( <Image> ),
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  bumpMap: new THREE.Texture( <Image> ),
	 *  bumpScale: <float>,
	 *
	 *  normalMap: new THREE.Texture( <Image> ),
	 *  normalMapType: THREE.TangentSpaceNormalMap,
	 *  normalScale: <Vector2>,
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */function MeshMatcapMaterial(parameters){Material.call(this);this.defines={'MATCAP':''};this.type='MeshMatcapMaterial';this.color=new Color(0xffffff);// diffuse
this.matcap=null;this.map=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.alphaMap=null;this.skinning=false;this.morphTargets=false;this.morphNormals=false;this.lights=false;this.setValues(parameters);// a matcap is required
if(this.matcap===null){var canvas=document.createElement('canvas');canvas.width=1;canvas.height=1;var context=canvas.getContext('2d');context.fillStyle='#fff';context.fillRect(0,0,1,1);this.matcap=new THREE.CanvasTexture(canvas);}}MeshMatcapMaterial.prototype=Object.create(Material.prototype);MeshMatcapMaterial.prototype.constructor=MeshMatcapMaterial;MeshMatcapMaterial.prototype.isMeshMatcapMaterial=true;MeshMatcapMaterial.prototype.copy=function(source){Material.prototype.copy.call(this,source);this.defines={'MATCAP':''};this.color.copy(source.color);this.matcap=source.map;this.map=source.map;this.bumpMap=source.bumpMap;this.bumpScale=source.bumpScale;this.normalMap=source.normalMap;this.normalMapType=source.normalMapType;this.normalScale.copy(source.normalScale);this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.alphaMap=source.alphaMap;this.skinning=source.skinning;this.morphTargets=source.morphTargets;this.morphNormals=source.morphNormals;return this;};/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  linewidth: <float>,
	 *
	 *  scale: <float>,
	 *  dashSize: <float>,
	 *  gapSize: <float>
	 * }
	 */function LineDashedMaterial(parameters){LineBasicMaterial.call(this);this.type='LineDashedMaterial';this.scale=1;this.dashSize=3;this.gapSize=1;this.setValues(parameters);}LineDashedMaterial.prototype=Object.create(LineBasicMaterial.prototype);LineDashedMaterial.prototype.constructor=LineDashedMaterial;LineDashedMaterial.prototype.isLineDashedMaterial=true;LineDashedMaterial.prototype.copy=function(source){LineBasicMaterial.prototype.copy.call(this,source);this.scale=source.scale;this.dashSize=source.dashSize;this.gapSize=source.gapSize;return this;};var Materials=/*#__PURE__*/Object.freeze({ShadowMaterial:ShadowMaterial,SpriteMaterial:SpriteMaterial,RawShaderMaterial:RawShaderMaterial,ShaderMaterial:ShaderMaterial,PointsMaterial:PointsMaterial,MeshPhysicalMaterial:MeshPhysicalMaterial,MeshStandardMaterial:MeshStandardMaterial,MeshPhongMaterial:MeshPhongMaterial,MeshToonMaterial:MeshToonMaterial,MeshNormalMaterial:MeshNormalMaterial,MeshLambertMaterial:MeshLambertMaterial,MeshDepthMaterial:MeshDepthMaterial,MeshDistanceMaterial:MeshDistanceMaterial,MeshBasicMaterial:MeshBasicMaterial,MeshMatcapMaterial:MeshMatcapMaterial,LineDashedMaterial:LineDashedMaterial,LineBasicMaterial:LineBasicMaterial,Material:Material});/**
	 * @author mrdoob / http://mrdoob.com/
	 */var Cache={enabled:false,files:{},add:function add(key,file){if(this.enabled===false)return;// console.log( 'THREE.Cache', 'Adding key:', key );
this.files[key]=file;},get:function get(key){if(this.enabled===false)return;// console.log( 'THREE.Cache', 'Checking key:', key );
return this.files[key];},remove:function remove(key){delete this.files[key];},clear:function clear(){this.files={};}};/**
	 * @author mrdoob / http://mrdoob.com/
	 */function LoadingManager(onLoad,onProgress,onError){var scope=this;var isLoading=false;var itemsLoaded=0;var itemsTotal=0;var urlModifier=undefined;// Refer to #5689 for the reason why we don't set .onStart
// in the constructor
this.onStart=undefined;this.onLoad=onLoad;this.onProgress=onProgress;this.onError=onError;this.itemStart=function(url){itemsTotal++;if(isLoading===false){if(scope.onStart!==undefined){scope.onStart(url,itemsLoaded,itemsTotal);}}isLoading=true;};this.itemEnd=function(url){itemsLoaded++;if(scope.onProgress!==undefined){scope.onProgress(url,itemsLoaded,itemsTotal);}if(itemsLoaded===itemsTotal){isLoading=false;if(scope.onLoad!==undefined){scope.onLoad();}}};this.itemError=function(url){if(scope.onError!==undefined){scope.onError(url);}};this.resolveURL=function(url){if(urlModifier){return urlModifier(url);}return url;};this.setURLModifier=function(transform){urlModifier=transform;return this;};}var DefaultLoadingManager=new LoadingManager();/**
	 * @author mrdoob / http://mrdoob.com/
	 */var loading={};function FileLoader(manager){this.manager=manager!==undefined?manager:DefaultLoadingManager;}Object.assign(FileLoader.prototype,{load:function load(url,onLoad,onProgress,onError){if(url===undefined)url='';if(this.path!==undefined)url=this.path+url;url=this.manager.resolveURL(url);var scope=this;var cached=Cache.get(url);if(cached!==undefined){scope.manager.itemStart(url);setTimeout(function(){if(onLoad)onLoad(cached);scope.manager.itemEnd(url);},0);return cached;}// Check if request is duplicate
if(loading[url]!==undefined){loading[url].push({onLoad:onLoad,onProgress:onProgress,onError:onError});return;}// Check for data: URI
var dataUriRegex=/^data:(.*?)(;base64)?,(.*)$/;var dataUriRegexResult=url.match(dataUriRegex);// Safari can not handle Data URIs through XMLHttpRequest so process manually
if(dataUriRegexResult){var mimeType=dataUriRegexResult[1];var isBase64=!!dataUriRegexResult[2];var data=dataUriRegexResult[3];data=window.decodeURIComponent(data);if(isBase64)data=window.atob(data);try{var response;var responseType=(this.responseType||'').toLowerCase();switch(responseType){case'arraybuffer':case'blob':var view=new Uint8Array(data.length);for(var i=0;i<data.length;i++){view[i]=data.charCodeAt(i);}if(responseType==='blob'){response=new Blob([view.buffer],{type:mimeType});}else{response=view.buffer;}break;case'document':var parser=new DOMParser();response=parser.parseFromString(data,mimeType);break;case'json':response=JSON.parse(data);break;default:// 'text' or other
response=data;break;}// Wait for next browser tick like standard XMLHttpRequest event dispatching does
window.setTimeout(function(){if(onLoad)onLoad(response);scope.manager.itemEnd(url);},0);}catch(error){// Wait for next browser tick like standard XMLHttpRequest event dispatching does
window.setTimeout(function(){if(onError)onError(error);scope.manager.itemEnd(url);scope.manager.itemError(url);},0);}}else{// Initialise array for duplicate requests
loading[url]=[];loading[url].push({onLoad:onLoad,onProgress:onProgress,onError:onError});var request=new XMLHttpRequest();request.open('GET',url,true);request.addEventListener('load',function(event){var response=this.response;Cache.add(url,response);var callbacks=loading[url];delete loading[url];if(this.status===200||this.status===0){// Some browsers return HTTP Status 0 when using non-http protocol
// e.g. 'file://' or 'data://'. Handle as success.
if(this.status===0)console.warn('THREE.FileLoader: HTTP Status 0 received.');for(var i=0,il=callbacks.length;i<il;i++){var callback=callbacks[i];if(callback.onLoad)callback.onLoad(response);}scope.manager.itemEnd(url);}else{for(var i=0,il=callbacks.length;i<il;i++){var callback=callbacks[i];if(callback.onError)callback.onError(event);}scope.manager.itemEnd(url);scope.manager.itemError(url);}},false);request.addEventListener('progress',function(event){var callbacks=loading[url];for(var i=0,il=callbacks.length;i<il;i++){var callback=callbacks[i];if(callback.onProgress)callback.onProgress(event);}},false);request.addEventListener('error',function(event){var callbacks=loading[url];delete loading[url];for(var i=0,il=callbacks.length;i<il;i++){var callback=callbacks[i];if(callback.onError)callback.onError(event);}scope.manager.itemEnd(url);scope.manager.itemError(url);},false);request.addEventListener('abort',function(event){var callbacks=loading[url];delete loading[url];for(var i=0,il=callbacks.length;i<il;i++){var callback=callbacks[i];if(callback.onError)callback.onError(event);}scope.manager.itemEnd(url);scope.manager.itemError(url);},false);if(this.responseType!==undefined)request.responseType=this.responseType;if(this.withCredentials!==undefined)request.withCredentials=this.withCredentials;if(request.overrideMimeType)request.overrideMimeType(this.mimeType!==undefined?this.mimeType:'text/plain');for(var header in this.requestHeader){request.setRequestHeader(header,this.requestHeader[header]);}request.send(null);}scope.manager.itemStart(url);return request;},setPath:function setPath(value){this.path=value;return this;},setResponseType:function setResponseType(value){this.responseType=value;return this;},setWithCredentials:function setWithCredentials(value){this.withCredentials=value;return this;},setMimeType:function setMimeType(value){this.mimeType=value;return this;},setRequestHeader:function setRequestHeader(value){this.requestHeader=value;return this;}});/**
	 * @author mrdoob / http://mrdoob.com/
	 *
	 * Abstract Base class to block based textures loader (dds, pvr, ...)
	 */function CompressedTextureLoader(manager){this.manager=manager!==undefined?manager:DefaultLoadingManager;// override in sub classes
this._parser=null;}Object.assign(CompressedTextureLoader.prototype,{load:function load(url,onLoad,onProgress,onError){var scope=this;var images=[];var texture=new CompressedTexture();texture.image=images;var loader=new FileLoader(this.manager);loader.setPath(this.path);loader.setResponseType('arraybuffer');function loadTexture(i){loader.load(url[i],function(buffer){var texDatas=scope._parser(buffer,true);images[i]={width:texDatas.width,height:texDatas.height,format:texDatas.format,mipmaps:texDatas.mipmaps};loaded+=1;if(loaded===6){if(texDatas.mipmapCount===1)texture.minFilter=LinearFilter;texture.format=texDatas.format;texture.needsUpdate=true;if(onLoad)onLoad(texture);}},onProgress,onError);}if(Array.isArray(url)){var loaded=0;for(var i=0,il=url.length;i<il;++i){loadTexture(i);}}else{// compressed cubemap texture stored in a single DDS file
loader.load(url,function(buffer){var texDatas=scope._parser(buffer,true);if(texDatas.isCubemap){var faces=texDatas.mipmaps.length/texDatas.mipmapCount;for(var f=0;f<faces;f++){images[f]={mipmaps:[]};for(var i=0;i<texDatas.mipmapCount;i++){images[f].mipmaps.push(texDatas.mipmaps[f*texDatas.mipmapCount+i]);images[f].format=texDatas.format;images[f].width=texDatas.width;images[f].height=texDatas.height;}}}else{texture.image.width=texDatas.width;texture.image.height=texDatas.height;texture.mipmaps=texDatas.mipmaps;}if(texDatas.mipmapCount===1){texture.minFilter=LinearFilter;}texture.format=texDatas.format;texture.needsUpdate=true;if(onLoad)onLoad(texture);},onProgress,onError);}return texture;},setPath:function setPath(value){this.path=value;return this;}});/**
	 * @author Nikos M. / https://github.com/foo123/
	 *
	 * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
	 */function DataTextureLoader(manager){this.manager=manager!==undefined?manager:DefaultLoadingManager;// override in sub classes
this._parser=null;}Object.assign(DataTextureLoader.prototype,{load:function load(url,onLoad,onProgress,onError){var scope=this;var texture=new DataTexture();var loader=new FileLoader(this.manager);loader.setResponseType('arraybuffer');loader.load(url,function(buffer){var texData=scope._parser(buffer);if(!texData)return;if(undefined!==texData.image){texture.image=texData.image;}else if(undefined!==texData.data){texture.image.width=texData.width;texture.image.height=texData.height;texture.image.data=texData.data;}texture.wrapS=undefined!==texData.wrapS?texData.wrapS:ClampToEdgeWrapping;texture.wrapT=undefined!==texData.wrapT?texData.wrapT:ClampToEdgeWrapping;texture.magFilter=undefined!==texData.magFilter?texData.magFilter:LinearFilter;texture.minFilter=undefined!==texData.minFilter?texData.minFilter:LinearMipMapLinearFilter;texture.anisotropy=undefined!==texData.anisotropy?texData.anisotropy:1;if(undefined!==texData.format){texture.format=texData.format;}if(undefined!==texData.type){texture.type=texData.type;}if(undefined!==texData.mipmaps){texture.mipmaps=texData.mipmaps;}if(1===texData.mipmapCount){texture.minFilter=LinearFilter;}texture.needsUpdate=true;if(onLoad)onLoad(texture,texData);},onProgress,onError);return texture;}});/**
	 * @author mrdoob / http://mrdoob.com/
	 */function ImageLoader(manager){this.manager=manager!==undefined?manager:DefaultLoadingManager;}Object.assign(ImageLoader.prototype,{crossOrigin:'anonymous',load:function load(url,onLoad,onProgress,onError){if(url===undefined)url='';if(this.path!==undefined)url=this.path+url;url=this.manager.resolveURL(url);var scope=this;var cached=Cache.get(url);if(cached!==undefined){scope.manager.itemStart(url);setTimeout(function(){if(onLoad)onLoad(cached);scope.manager.itemEnd(url);},0);return cached;}var image=document.createElementNS('http://www.w3.org/1999/xhtml','img');function onImageLoad(){image.removeEventListener('load',onImageLoad,false);image.removeEventListener('error',onImageError,false);Cache.add(url,this);if(onLoad)onLoad(this);scope.manager.itemEnd(url);}function onImageError(event){image.removeEventListener('load',onImageLoad,false);image.removeEventListener('error',onImageError,false);if(onError)onError(event);scope.manager.itemEnd(url);scope.manager.itemError(url);}image.addEventListener('load',onImageLoad,false);image.addEventListener('error',onImageError,false);if(url.substr(0,5)!=='data:'){if(this.crossOrigin!==undefined)image.crossOrigin=this.crossOrigin;}scope.manager.itemStart(url);image.src=url;return image;},setCrossOrigin:function setCrossOrigin(value){this.crossOrigin=value;return this;},setPath:function setPath(value){this.path=value;return this;}});/**
	 * @author mrdoob / http://mrdoob.com/
	 */function CubeTextureLoader(manager){this.manager=manager!==undefined?manager:DefaultLoadingManager;}Object.assign(CubeTextureLoader.prototype,{crossOrigin:'anonymous',load:function load(urls,onLoad,onProgress,onError){var texture=new CubeTexture();var loader=new ImageLoader(this.manager);loader.setCrossOrigin(this.crossOrigin);loader.setPath(this.path);var loaded=0;function loadTexture(i){loader.load(urls[i],function(image){texture.images[i]=image;loaded++;if(loaded===6){texture.needsUpdate=true;if(onLoad)onLoad(texture);}},undefined,onError);}for(var i=0;i<urls.length;++i){loadTexture(i);}return texture;},setCrossOrigin:function setCrossOrigin(value){this.crossOrigin=value;return this;},setPath:function setPath(value){this.path=value;return this;}});/**
	 * @author mrdoob / http://mrdoob.com/
	 */function TextureLoader(manager){this.manager=manager!==undefined?manager:DefaultLoadingManager;}Object.assign(TextureLoader.prototype,{crossOrigin:'anonymous',load:function load(url,onLoad,onProgress,onError){var texture=new Texture();var loader=new ImageLoader(this.manager);loader.setCrossOrigin(this.crossOrigin);loader.setPath(this.path);loader.load(url,function(image){texture.image=image;// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.
var isJPEG=url.search(/\.jpe?g$/i)>0||url.search(/^data\:image\/jpeg/)===0;texture.format=isJPEG?RGBFormat:RGBAFormat;texture.needsUpdate=true;if(onLoad!==undefined){onLoad(texture);}},onProgress,onError);return texture;},setCrossOrigin:function setCrossOrigin(value){this.crossOrigin=value;return this;},setPath:function setPath(value){this.path=value;return this;}});/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Extensible curve object
	 *
	 * Some common of curve methods:
	 * .getPoint( t, optionalTarget ), .getTangent( t )
	 * .getPointAt( u, optionalTarget ), .getTangentAt( u )
	 * .getPoints(), .getSpacedPoints()
	 * .getLength()
	 * .updateArcLengths()
	 *
	 * This following curves inherit from THREE.Curve:
	 *
	 * -- 2D curves --
	 * THREE.ArcCurve
	 * THREE.CubicBezierCurve
	 * THREE.EllipseCurve
	 * THREE.LineCurve
	 * THREE.QuadraticBezierCurve
	 * THREE.SplineCurve
	 *
	 * -- 3D curves --
	 * THREE.CatmullRomCurve3
	 * THREE.CubicBezierCurve3
	 * THREE.LineCurve3
	 * THREE.QuadraticBezierCurve3
	 *
	 * A series of curves can be represented as a THREE.CurvePath.
	 *
	 **//**************************************************************
	 *	Abstract Curve base class
	 **************************************************************/function Curve(){this.type='Curve';this.arcLengthDivisions=200;}Object.assign(Curve.prototype,{// Virtual base class method to overwrite and implement in subclasses
//	- t [0 .. 1]
getPoint:function getPoint()/* t, optionalTarget */{console.warn('THREE.Curve: .getPoint() not implemented.');return null;},// Get point at relative position in curve according to arc length
// - u [0 .. 1]
getPointAt:function getPointAt(u,optionalTarget){var t=this.getUtoTmapping(u);return this.getPoint(t,optionalTarget);},// Get sequence of points using getPoint( t )
getPoints:function getPoints(divisions){if(divisions===undefined)divisions=5;var points=[];for(var d=0;d<=divisions;d++){points.push(this.getPoint(d/divisions));}return points;},// Get sequence of points using getPointAt( u )
getSpacedPoints:function getSpacedPoints(divisions){if(divisions===undefined)divisions=5;var points=[];for(var d=0;d<=divisions;d++){points.push(this.getPointAt(d/divisions));}return points;},// Get total curve arc length
getLength:function getLength(){var lengths=this.getLengths();return lengths[lengths.length-1];},// Get list of cumulative segment lengths
getLengths:function getLengths(divisions){if(divisions===undefined)divisions=this.arcLengthDivisions;if(this.cacheArcLengths&&this.cacheArcLengths.length===divisions+1&&!this.needsUpdate){return this.cacheArcLengths;}this.needsUpdate=false;var cache=[];var current,last=this.getPoint(0);var p,sum=0;cache.push(0);for(p=1;p<=divisions;p++){current=this.getPoint(p/divisions);sum+=current.distanceTo(last);cache.push(sum);last=current;}this.cacheArcLengths=cache;return cache;// { sums: cache, sum: sum }; Sum is in the last element.
},updateArcLengths:function updateArcLengths(){this.needsUpdate=true;this.getLengths();},// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
getUtoTmapping:function getUtoTmapping(u,distance){var arcLengths=this.getLengths();var i=0,il=arcLengths.length;var targetArcLength;// The targeted u distance value to get
if(distance){targetArcLength=distance;}else{targetArcLength=u*arcLengths[il-1];}// binary search for the index with largest value smaller than target u distance
var low=0,high=il-1,comparison;while(low<=high){i=Math.floor(low+(high-low)/2);// less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats
comparison=arcLengths[i]-targetArcLength;if(comparison<0){low=i+1;}else if(comparison>0){high=i-1;}else{high=i;break;// DONE
}}i=high;if(arcLengths[i]===targetArcLength){return i/(il-1);}// we could get finer grain at lengths, or use simple interpolation between two points
var lengthBefore=arcLengths[i];var lengthAfter=arcLengths[i+1];var segmentLength=lengthAfter-lengthBefore;// determine where we are between the 'before' and 'after' points
var segmentFraction=(targetArcLength-lengthBefore)/segmentLength;// add that fractional amount to t
var t=(i+segmentFraction)/(il-1);return t;},// Returns a unit vector tangent at t
// In case any sub curve does not implement its tangent derivation,
// 2 points a small delta apart will be used to find its gradient
// which seems to give a reasonable approximation
getTangent:function getTangent(t){var delta=0.0001;var t1=t-delta;var t2=t+delta;// Capping in case of danger
if(t1<0)t1=0;if(t2>1)t2=1;var pt1=this.getPoint(t1);var pt2=this.getPoint(t2);var vec=pt2.clone().sub(pt1);return vec.normalize();},getTangentAt:function getTangentAt(u){var t=this.getUtoTmapping(u);return this.getTangent(t);},computeFrenetFrames:function computeFrenetFrames(segments,closed){// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf
var normal=new Vector3();var tangents=[];var normals=[];var binormals=[];var vec=new Vector3();var mat=new Matrix4();var i,u,theta;// compute the tangent vectors for each segment on the curve
for(i=0;i<=segments;i++){u=i/segments;tangents[i]=this.getTangentAt(u);tangents[i].normalize();}// select an initial normal vector perpendicular to the first tangent vector,
// and in the direction of the minimum tangent xyz component
normals[0]=new Vector3();binormals[0]=new Vector3();var min=Number.MAX_VALUE;var tx=Math.abs(tangents[0].x);var ty=Math.abs(tangents[0].y);var tz=Math.abs(tangents[0].z);if(tx<=min){min=tx;normal.set(1,0,0);}if(ty<=min){min=ty;normal.set(0,1,0);}if(tz<=min){normal.set(0,0,1);}vec.crossVectors(tangents[0],normal).normalize();normals[0].crossVectors(tangents[0],vec);binormals[0].crossVectors(tangents[0],normals[0]);// compute the slowly-varying normal and binormal vectors for each segment on the curve
for(i=1;i<=segments;i++){normals[i]=normals[i-1].clone();binormals[i]=binormals[i-1].clone();vec.crossVectors(tangents[i-1],tangents[i]);if(vec.length()>Number.EPSILON){vec.normalize();theta=Math.acos(_Math.clamp(tangents[i-1].dot(tangents[i]),-1,1));// clamp for floating pt errors
normals[i].applyMatrix4(mat.makeRotationAxis(vec,theta));}binormals[i].crossVectors(tangents[i],normals[i]);}// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same
if(closed===true){theta=Math.acos(_Math.clamp(normals[0].dot(normals[segments]),-1,1));theta/=segments;if(tangents[0].dot(vec.crossVectors(normals[0],normals[segments]))>0){theta=-theta;}for(i=1;i<=segments;i++){// twist a little...
normals[i].applyMatrix4(mat.makeRotationAxis(tangents[i],theta*i));binormals[i].crossVectors(tangents[i],normals[i]);}}return{tangents:tangents,normals:normals,binormals:binormals};},clone:function clone(){return new this.constructor().copy(this);},copy:function copy(source){this.arcLengthDivisions=source.arcLengthDivisions;return this;},toJSON:function toJSON(){var data={metadata:{version:4.5,type:'Curve',generator:'Curve.toJSON'}};data.arcLengthDivisions=this.arcLengthDivisions;data.type=this.type;return data;},fromJSON:function fromJSON(json){this.arcLengthDivisions=json.arcLengthDivisions;return this;}});function EllipseCurve(aX,aY,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation){Curve.call(this);this.type='EllipseCurve';this.aX=aX||0;this.aY=aY||0;this.xRadius=xRadius||1;this.yRadius=yRadius||1;this.aStartAngle=aStartAngle||0;this.aEndAngle=aEndAngle||2*Math.PI;this.aClockwise=aClockwise||false;this.aRotation=aRotation||0;}EllipseCurve.prototype=Object.create(Curve.prototype);EllipseCurve.prototype.constructor=EllipseCurve;EllipseCurve.prototype.isEllipseCurve=true;EllipseCurve.prototype.getPoint=function(t,optionalTarget){var point=optionalTarget||new Vector2();var twoPi=Math.PI*2;var deltaAngle=this.aEndAngle-this.aStartAngle;var samePoints=Math.abs(deltaAngle)<Number.EPSILON;// ensures that deltaAngle is 0 .. 2 PI
while(deltaAngle<0){deltaAngle+=twoPi;}while(deltaAngle>twoPi){deltaAngle-=twoPi;}if(deltaAngle<Number.EPSILON){if(samePoints){deltaAngle=0;}else{deltaAngle=twoPi;}}if(this.aClockwise===true&&!samePoints){if(deltaAngle===twoPi){deltaAngle=-twoPi;}else{deltaAngle=deltaAngle-twoPi;}}var angle=this.aStartAngle+t*deltaAngle;var x=this.aX+this.xRadius*Math.cos(angle);var y=this.aY+this.yRadius*Math.sin(angle);if(this.aRotation!==0){var cos=Math.cos(this.aRotation);var sin=Math.sin(this.aRotation);var tx=x-this.aX;var ty=y-this.aY;// Rotate the point about the center of the ellipse.
x=tx*cos-ty*sin+this.aX;y=tx*sin+ty*cos+this.aY;}return point.set(x,y);};EllipseCurve.prototype.copy=function(source){Curve.prototype.copy.call(this,source);this.aX=source.aX;this.aY=source.aY;this.xRadius=source.xRadius;this.yRadius=source.yRadius;this.aStartAngle=source.aStartAngle;this.aEndAngle=source.aEndAngle;this.aClockwise=source.aClockwise;this.aRotation=source.aRotation;return this;};EllipseCurve.prototype.toJSON=function(){var data=Curve.prototype.toJSON.call(this);data.aX=this.aX;data.aY=this.aY;data.xRadius=this.xRadius;data.yRadius=this.yRadius;data.aStartAngle=this.aStartAngle;data.aEndAngle=this.aEndAngle;data.aClockwise=this.aClockwise;data.aRotation=this.aRotation;return data;};EllipseCurve.prototype.fromJSON=function(json){Curve.prototype.fromJSON.call(this,json);this.aX=json.aX;this.aY=json.aY;this.xRadius=json.xRadius;this.yRadius=json.yRadius;this.aStartAngle=json.aStartAngle;this.aEndAngle=json.aEndAngle;this.aClockwise=json.aClockwise;this.aRotation=json.aRotation;return this;};function ArcCurve(aX,aY,aRadius,aStartAngle,aEndAngle,aClockwise){EllipseCurve.call(this,aX,aY,aRadius,aRadius,aStartAngle,aEndAngle,aClockwise);this.type='ArcCurve';}ArcCurve.prototype=Object.create(EllipseCurve.prototype);ArcCurve.prototype.constructor=ArcCurve;ArcCurve.prototype.isArcCurve=true;/**
	 * @author zz85 https://github.com/zz85
	 *
	 * Centripetal CatmullRom Curve - which is useful for avoiding
	 * cusps and self-intersections in non-uniform catmull rom curves.
	 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
	 *
	 * curve.type accepts centripetal(default), chordal and catmullrom
	 * curve.tension is used for catmullrom which defaults to 0.5
	 *//*
	Based on an optimized c++ solution in
	 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
	 - http://ideone.com/NoEbVM

	This CubicPoly class could be used for reusing some variables and calculations,
	but for three.js curve use, it could be possible inlined and flatten into a single function call
	which can be placed in CurveUtils.
	*/function CubicPoly(){var c0=0,c1=0,c2=0,c3=0;/*
		 * Compute coefficients for a cubic polynomial
		 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
		 * such that
		 *   p(0) = x0, p(1) = x1
		 *  and
		 *   p'(0) = t0, p'(1) = t1.
		 */function init(x0,x1,t0,t1){c0=x0;c1=t0;c2=-3*x0+3*x1-2*t0-t1;c3=2*x0-2*x1+t0+t1;}return{initCatmullRom:function initCatmullRom(x0,x1,x2,x3,tension){init(x1,x2,tension*(x2-x0),tension*(x3-x1));},initNonuniformCatmullRom:function initNonuniformCatmullRom(x0,x1,x2,x3,dt0,dt1,dt2){// compute tangents when parameterized in [t1,t2]
var t1=(x1-x0)/dt0-(x2-x0)/(dt0+dt1)+(x2-x1)/dt1;var t2=(x2-x1)/dt1-(x3-x1)/(dt1+dt2)+(x3-x2)/dt2;// rescale tangents for parametrization in [0,1]
t1*=dt1;t2*=dt1;init(x1,x2,t1,t2);},calc:function calc(t){var t2=t*t;var t3=t2*t;return c0+c1*t+c2*t2+c3*t3;}};}//
var tmp=new Vector3();var px=new CubicPoly(),py=new CubicPoly(),pz=new CubicPoly();function CatmullRomCurve3(points,closed,curveType,tension){Curve.call(this);this.type='CatmullRomCurve3';this.points=points||[];this.closed=closed||false;this.curveType=curveType||'centripetal';this.tension=tension||0.5;}CatmullRomCurve3.prototype=Object.create(Curve.prototype);CatmullRomCurve3.prototype.constructor=CatmullRomCurve3;CatmullRomCurve3.prototype.isCatmullRomCurve3=true;CatmullRomCurve3.prototype.getPoint=function(t,optionalTarget){var point=optionalTarget||new Vector3();var points=this.points;var l=points.length;var p=(l-(this.closed?0:1))*t;var intPoint=Math.floor(p);var weight=p-intPoint;if(this.closed){intPoint+=intPoint>0?0:(Math.floor(Math.abs(intPoint)/l)+1)*l;}else if(weight===0&&intPoint===l-1){intPoint=l-2;weight=1;}var p0,p1,p2,p3;// 4 points
if(this.closed||intPoint>0){p0=points[(intPoint-1)%l];}else{// extrapolate first point
tmp.subVectors(points[0],points[1]).add(points[0]);p0=tmp;}p1=points[intPoint%l];p2=points[(intPoint+1)%l];if(this.closed||intPoint+2<l){p3=points[(intPoint+2)%l];}else{// extrapolate last point
tmp.subVectors(points[l-1],points[l-2]).add(points[l-1]);p3=tmp;}if(this.curveType==='centripetal'||this.curveType==='chordal'){// init Centripetal / Chordal Catmull-Rom
var pow=this.curveType==='chordal'?0.5:0.25;var dt0=Math.pow(p0.distanceToSquared(p1),pow);var dt1=Math.pow(p1.distanceToSquared(p2),pow);var dt2=Math.pow(p2.distanceToSquared(p3),pow);// safety check for repeated points
if(dt1<1e-4)dt1=1.0;if(dt0<1e-4)dt0=dt1;if(dt2<1e-4)dt2=dt1;px.initNonuniformCatmullRom(p0.x,p1.x,p2.x,p3.x,dt0,dt1,dt2);py.initNonuniformCatmullRom(p0.y,p1.y,p2.y,p3.y,dt0,dt1,dt2);pz.initNonuniformCatmullRom(p0.z,p1.z,p2.z,p3.z,dt0,dt1,dt2);}else if(this.curveType==='catmullrom'){px.initCatmullRom(p0.x,p1.x,p2.x,p3.x,this.tension);py.initCatmullRom(p0.y,p1.y,p2.y,p3.y,this.tension);pz.initCatmullRom(p0.z,p1.z,p2.z,p3.z,this.tension);}point.set(px.calc(weight),py.calc(weight),pz.calc(weight));return point;};CatmullRomCurve3.prototype.copy=function(source){Curve.prototype.copy.call(this,source);this.points=[];for(var i=0,l=source.points.length;i<l;i++){var point=source.points[i];this.points.push(point.clone());}this.closed=source.closed;this.curveType=source.curveType;this.tension=source.tension;return this;};CatmullRomCurve3.prototype.toJSON=function(){var data=Curve.prototype.toJSON.call(this);data.points=[];for(var i=0,l=this.points.length;i<l;i++){var point=this.points[i];data.points.push(point.toArray());}data.closed=this.closed;data.curveType=this.curveType;data.tension=this.tension;return data;};CatmullRomCurve3.prototype.fromJSON=function(json){Curve.prototype.fromJSON.call(this,json);this.points=[];for(var i=0,l=json.points.length;i<l;i++){var point=json.points[i];this.points.push(new Vector3().fromArray(point));}this.closed=json.closed;this.curveType=json.curveType;this.tension=json.tension;return this;};/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 *
	 * Bezier Curves formulas obtained from
	 * http://en.wikipedia.org/wiki/BÃ©zier_curve
	 */function CatmullRom(t,p0,p1,p2,p3){var v0=(p2-p0)*0.5;var v1=(p3-p1)*0.5;var t2=t*t;var t3=t*t2;return(2*p1-2*p2+v0+v1)*t3+(-3*p1+3*p2-2*v0-v1)*t2+v0*t+p1;}//
function QuadraticBezierP0(t,p){var k=1-t;return k*k*p;}function QuadraticBezierP1(t,p){return 2*(1-t)*t*p;}function QuadraticBezierP2(t,p){return t*t*p;}function QuadraticBezier(t,p0,p1,p2){return QuadraticBezierP0(t,p0)+QuadraticBezierP1(t,p1)+QuadraticBezierP2(t,p2);}//
function CubicBezierP0(t,p){var k=1-t;return k*k*k*p;}function CubicBezierP1(t,p){var k=1-t;return 3*k*k*t*p;}function CubicBezierP2(t,p){return 3*(1-t)*t*t*p;}function CubicBezierP3(t,p){return t*t*t*p;}function CubicBezier(t,p0,p1,p2,p3){return CubicBezierP0(t,p0)+CubicBezierP1(t,p1)+CubicBezierP2(t,p2)+CubicBezierP3(t,p3);}function CubicBezierCurve(v0,v1,v2,v3){Curve.call(this);this.type='CubicBezierCurve';this.v0=v0||new Vector2();this.v1=v1||new Vector2();this.v2=v2||new Vector2();this.v3=v3||new Vector2();}CubicBezierCurve.prototype=Object.create(Curve.prototype);CubicBezierCurve.prototype.constructor=CubicBezierCurve;CubicBezierCurve.prototype.isCubicBezierCurve=true;CubicBezierCurve.prototype.getPoint=function(t,optionalTarget){var point=optionalTarget||new Vector2();var v0=this.v0,v1=this.v1,v2=this.v2,v3=this.v3;point.set(CubicBezier(t,v0.x,v1.x,v2.x,v3.x),CubicBezier(t,v0.y,v1.y,v2.y,v3.y));return point;};CubicBezierCurve.prototype.copy=function(source){Curve.prototype.copy.call(this,source);this.v0.copy(source.v0);this.v1.copy(source.v1);this.v2.copy(source.v2);this.v3.copy(source.v3);return this;};CubicBezierCurve.prototype.toJSON=function(){var data=Curve.prototype.toJSON.call(this);data.v0=this.v0.toArray();data.v1=this.v1.toArray();data.v2=this.v2.toArray();data.v3=this.v3.toArray();return data;};CubicBezierCurve.prototype.fromJSON=function(json){Curve.prototype.fromJSON.call(this,json);this.v0.fromArray(json.v0);this.v1.fromArray(json.v1);this.v2.fromArray(json.v2);this.v3.fromArray(json.v3);return this;};function CubicBezierCurve3(v0,v1,v2,v3){Curve.call(this);this.type='CubicBezierCurve3';this.v0=v0||new Vector3();this.v1=v1||new Vector3();this.v2=v2||new Vector3();this.v3=v3||new Vector3();}CubicBezierCurve3.prototype=Object.create(Curve.prototype);CubicBezierCurve3.prototype.constructor=CubicBezierCurve3;CubicBezierCurve3.prototype.isCubicBezierCurve3=true;CubicBezierCurve3.prototype.getPoint=function(t,optionalTarget){var point=optionalTarget||new Vector3();var v0=this.v0,v1=this.v1,v2=this.v2,v3=this.v3;point.set(CubicBezier(t,v0.x,v1.x,v2.x,v3.x),CubicBezier(t,v0.y,v1.y,v2.y,v3.y),CubicBezier(t,v0.z,v1.z,v2.z,v3.z));return point;};CubicBezierCurve3.prototype.copy=function(source){Curve.prototype.copy.call(this,source);this.v0.copy(source.v0);this.v1.copy(source.v1);this.v2.copy(source.v2);this.v3.copy(source.v3);return this;};CubicBezierCurve3.prototype.toJSON=function(){var data=Curve.prototype.toJSON.call(this);data.v0=this.v0.toArray();data.v1=this.v1.toArray();data.v2=this.v2.toArray();data.v3=this.v3.toArray();return data;};CubicBezierCurve3.prototype.fromJSON=function(json){Curve.prototype.fromJSON.call(this,json);this.v0.fromArray(json.v0);this.v1.fromArray(json.v1);this.v2.fromArray(json.v2);this.v3.fromArray(json.v3);return this;};function LineCurve(v1,v2){Curve.call(this);this.type='LineCurve';this.v1=v1||new Vector2();this.v2=v2||new Vector2();}LineCurve.prototype=Object.create(Curve.prototype);LineCurve.prototype.constructor=LineCurve;LineCurve.prototype.isLineCurve=true;LineCurve.prototype.getPoint=function(t,optionalTarget){var point=optionalTarget||new Vector2();if(t===1){point.copy(this.v2);}else{point.copy(this.v2).sub(this.v1);point.multiplyScalar(t).add(this.v1);}return point;};// Line curve is linear, so we can overwrite default getPointAt
LineCurve.prototype.getPointAt=function(u,optionalTarget){return this.getPoint(u,optionalTarget);};LineCurve.prototype.getTangent=function()/* t */{var tangent=this.v2.clone().sub(this.v1);return tangent.normalize();};LineCurve.prototype.copy=function(source){Curve.prototype.copy.call(this,source);this.v1.copy(source.v1);this.v2.copy(source.v2);return this;};LineCurve.prototype.toJSON=function(){var data=Curve.prototype.toJSON.call(this);data.v1=this.v1.toArray();data.v2=this.v2.toArray();return data;};LineCurve.prototype.fromJSON=function(json){Curve.prototype.fromJSON.call(this,json);this.v1.fromArray(json.v1);this.v2.fromArray(json.v2);return this;};function LineCurve3(v1,v2){Curve.call(this);this.type='LineCurve3';this.v1=v1||new Vector3();this.v2=v2||new Vector3();}LineCurve3.prototype=Object.create(Curve.prototype);LineCurve3.prototype.constructor=LineCurve3;LineCurve3.prototype.isLineCurve3=true;LineCurve3.prototype.getPoint=function(t,optionalTarget){var point=optionalTarget||new Vector3();if(t===1){point.copy(this.v2);}else{point.copy(this.v2).sub(this.v1);point.multiplyScalar(t).add(this.v1);}return point;};// Line curve is linear, so we can overwrite default getPointAt
LineCurve3.prototype.getPointAt=function(u,optionalTarget){return this.getPoint(u,optionalTarget);};LineCurve3.prototype.copy=function(source){Curve.prototype.copy.call(this,source);this.v1.copy(source.v1);this.v2.copy(source.v2);return this;};LineCurve3.prototype.toJSON=function(){var data=Curve.prototype.toJSON.call(this);data.v1=this.v1.toArray();data.v2=this.v2.toArray();return data;};LineCurve3.prototype.fromJSON=function(json){Curve.prototype.fromJSON.call(this,json);this.v1.fromArray(json.v1);this.v2.fromArray(json.v2);return this;};function QuadraticBezierCurve(v0,v1,v2){Curve.call(this);this.type='QuadraticBezierCurve';this.v0=v0||new Vector2();this.v1=v1||new Vector2();this.v2=v2||new Vector2();}QuadraticBezierCurve.prototype=Object.create(Curve.prototype);QuadraticBezierCurve.prototype.constructor=QuadraticBezierCurve;QuadraticBezierCurve.prototype.isQuadraticBezierCurve=true;QuadraticBezierCurve.prototype.getPoint=function(t,optionalTarget){var point=optionalTarget||new Vector2();var v0=this.v0,v1=this.v1,v2=this.v2;point.set(QuadraticBezier(t,v0.x,v1.x,v2.x),QuadraticBezier(t,v0.y,v1.y,v2.y));return point;};QuadraticBezierCurve.prototype.copy=function(source){Curve.prototype.copy.call(this,source);this.v0.copy(source.v0);this.v1.copy(source.v1);this.v2.copy(source.v2);return this;};QuadraticBezierCurve.prototype.toJSON=function(){var data=Curve.prototype.toJSON.call(this);data.v0=this.v0.toArray();data.v1=this.v1.toArray();data.v2=this.v2.toArray();return data;};QuadraticBezierCurve.prototype.fromJSON=function(json){Curve.prototype.fromJSON.call(this,json);this.v0.fromArray(json.v0);this.v1.fromArray(json.v1);this.v2.fromArray(json.v2);return this;};function QuadraticBezierCurve3(v0,v1,v2){Curve.call(this);this.type='QuadraticBezierCurve3';this.v0=v0||new Vector3();this.v1=v1||new Vector3();this.v2=v2||new Vector3();}QuadraticBezierCurve3.prototype=Object.create(Curve.prototype);QuadraticBezierCurve3.prototype.constructor=QuadraticBezierCurve3;QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3=true;QuadraticBezierCurve3.prototype.getPoint=function(t,optionalTarget){var point=optionalTarget||new Vector3();var v0=this.v0,v1=this.v1,v2=this.v2;point.set(QuadraticBezier(t,v0.x,v1.x,v2.x),QuadraticBezier(t,v0.y,v1.y,v2.y),QuadraticBezier(t,v0.z,v1.z,v2.z));return point;};QuadraticBezierCurve3.prototype.copy=function(source){Curve.prototype.copy.call(this,source);this.v0.copy(source.v0);this.v1.copy(source.v1);this.v2.copy(source.v2);return this;};QuadraticBezierCurve3.prototype.toJSON=function(){var data=Curve.prototype.toJSON.call(this);data.v0=this.v0.toArray();data.v1=this.v1.toArray();data.v2=this.v2.toArray();return data;};QuadraticBezierCurve3.prototype.fromJSON=function(json){Curve.prototype.fromJSON.call(this,json);this.v0.fromArray(json.v0);this.v1.fromArray(json.v1);this.v2.fromArray(json.v2);return this;};function SplineCurve(points/* array of Vector2 */){Curve.call(this);this.type='SplineCurve';this.points=points||[];}SplineCurve.prototype=Object.create(Curve.prototype);SplineCurve.prototype.constructor=SplineCurve;SplineCurve.prototype.isSplineCurve=true;SplineCurve.prototype.getPoint=function(t,optionalTarget){var point=optionalTarget||new Vector2();var points=this.points;var p=(points.length-1)*t;var intPoint=Math.floor(p);var weight=p-intPoint;var p0=points[intPoint===0?intPoint:intPoint-1];var p1=points[intPoint];var p2=points[intPoint>points.length-2?points.length-1:intPoint+1];var p3=points[intPoint>points.length-3?points.length-1:intPoint+2];point.set(CatmullRom(weight,p0.x,p1.x,p2.x,p3.x),CatmullRom(weight,p0.y,p1.y,p2.y,p3.y));return point;};SplineCurve.prototype.copy=function(source){Curve.prototype.copy.call(this,source);this.points=[];for(var i=0,l=source.points.length;i<l;i++){var point=source.points[i];this.points.push(point.clone());}return this;};SplineCurve.prototype.toJSON=function(){var data=Curve.prototype.toJSON.call(this);data.points=[];for(var i=0,l=this.points.length;i<l;i++){var point=this.points[i];data.points.push(point.toArray());}return data;};SplineCurve.prototype.fromJSON=function(json){Curve.prototype.fromJSON.call(this,json);this.points=[];for(var i=0,l=json.points.length;i<l;i++){var point=json.points[i];this.points.push(new Vector2().fromArray(point));}return this;};var Curves=/*#__PURE__*/Object.freeze({ArcCurve:ArcCurve,CatmullRomCurve3:CatmullRomCurve3,CubicBezierCurve:CubicBezierCurve,CubicBezierCurve3:CubicBezierCurve3,EllipseCurve:EllipseCurve,LineCurve:LineCurve,LineCurve3:LineCurve3,QuadraticBezierCurve:QuadraticBezierCurve,QuadraticBezierCurve3:QuadraticBezierCurve3,SplineCurve:SplineCurve});/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 *
	 **//**************************************************************
	 *	Curved Path - a curve path is simply a array of connected
	 *  curves, but retains the api of a curve
	 **************************************************************/function CurvePath(){Curve.call(this);this.type='CurvePath';this.curves=[];this.autoClose=false;// Automatically closes the path
}CurvePath.prototype=Object.assign(Object.create(Curve.prototype),{constructor:CurvePath,add:function add(curve){this.curves.push(curve);},closePath:function closePath(){// Add a line curve if start and end of lines are not connected
var startPoint=this.curves[0].getPoint(0);var endPoint=this.curves[this.curves.length-1].getPoint(1);if(!startPoint.equals(endPoint)){this.curves.push(new LineCurve(endPoint,startPoint));}},// To get accurate point with reference to
// entire path distance at time t,
// following has to be done:
// 1. Length of each sub path have to be known
// 2. Locate and identify type of curve
// 3. Get t for the curve
// 4. Return curve.getPointAt(t')
getPoint:function getPoint(t){var d=t*this.getLength();var curveLengths=this.getCurveLengths();var i=0;// To think about boundaries points.
while(i<curveLengths.length){if(curveLengths[i]>=d){var diff=curveLengths[i]-d;var curve=this.curves[i];var segmentLength=curve.getLength();var u=segmentLength===0?0:1-diff/segmentLength;return curve.getPointAt(u);}i++;}return null;// loop where sum != 0, sum > d , sum+1 <d
},// We cannot use the default THREE.Curve getPoint() with getLength() because in
// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
// getPoint() depends on getLength
getLength:function getLength(){var lens=this.getCurveLengths();return lens[lens.length-1];},// cacheLengths must be recalculated.
updateArcLengths:function updateArcLengths(){this.needsUpdate=true;this.cacheLengths=null;this.getCurveLengths();},// Compute lengths and cache them
// We cannot overwrite getLengths() because UtoT mapping uses it.
getCurveLengths:function getCurveLengths(){// We use cache values if curves and cache array are same length
if(this.cacheLengths&&this.cacheLengths.length===this.curves.length){return this.cacheLengths;}// Get length of sub-curve
// Push sums into cached array
var lengths=[],sums=0;for(var i=0,l=this.curves.length;i<l;i++){sums+=this.curves[i].getLength();lengths.push(sums);}this.cacheLengths=lengths;return lengths;},getSpacedPoints:function getSpacedPoints(divisions){if(divisions===undefined)divisions=40;var points=[];for(var i=0;i<=divisions;i++){points.push(this.getPoint(i/divisions));}if(this.autoClose){points.push(points[0]);}return points;},getPoints:function getPoints(divisions){divisions=divisions||12;var points=[],last;for(var i=0,curves=this.curves;i<curves.length;i++){var curve=curves[i];var resolution=curve&&curve.isEllipseCurve?divisions*2:curve&&(curve.isLineCurve||curve.isLineCurve3)?1:curve&&curve.isSplineCurve?divisions*curve.points.length:divisions;var pts=curve.getPoints(resolution);for(var j=0;j<pts.length;j++){var point=pts[j];if(last&&last.equals(point))continue;// ensures no consecutive points are duplicates
points.push(point);last=point;}}if(this.autoClose&&points.length>1&&!points[points.length-1].equals(points[0])){points.push(points[0]);}return points;},copy:function copy(source){Curve.prototype.copy.call(this,source);this.curves=[];for(var i=0,l=source.curves.length;i<l;i++){var curve=source.curves[i];this.curves.push(curve.clone());}this.autoClose=source.autoClose;return this;},toJSON:function toJSON(){var data=Curve.prototype.toJSON.call(this);data.autoClose=this.autoClose;data.curves=[];for(var i=0,l=this.curves.length;i<l;i++){var curve=this.curves[i];data.curves.push(curve.toJSON());}return data;},fromJSON:function fromJSON(json){Curve.prototype.fromJSON.call(this,json);this.autoClose=json.autoClose;this.curves=[];for(var i=0,l=json.curves.length;i<l;i++){var curve=json.curves[i];this.curves.push(new Curves[curve.type]().fromJSON(curve));}return this;}});/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Creates free form 2d path using series of points, lines or curves.
	 **/function Path(points){CurvePath.call(this);this.type='Path';this.currentPoint=new Vector2();if(points){this.setFromPoints(points);}}Path.prototype=Object.assign(Object.create(CurvePath.prototype),{constructor:Path,setFromPoints:function setFromPoints(points){this.moveTo(points[0].x,points[0].y);for(var i=1,l=points.length;i<l;i++){this.lineTo(points[i].x,points[i].y);}},moveTo:function moveTo(x,y){this.currentPoint.set(x,y);// TODO consider referencing vectors instead of copying?
},lineTo:function lineTo(x,y){var curve=new LineCurve(this.currentPoint.clone(),new Vector2(x,y));this.curves.push(curve);this.currentPoint.set(x,y);},quadraticCurveTo:function quadraticCurveTo(aCPx,aCPy,aX,aY){var curve=new QuadraticBezierCurve(this.currentPoint.clone(),new Vector2(aCPx,aCPy),new Vector2(aX,aY));this.curves.push(curve);this.currentPoint.set(aX,aY);},bezierCurveTo:function bezierCurveTo(aCP1x,aCP1y,aCP2x,aCP2y,aX,aY){var curve=new CubicBezierCurve(this.currentPoint.clone(),new Vector2(aCP1x,aCP1y),new Vector2(aCP2x,aCP2y),new Vector2(aX,aY));this.curves.push(curve);this.currentPoint.set(aX,aY);},splineThru:function splineThru(pts/*Array of Vector*/){var npts=[this.currentPoint.clone()].concat(pts);var curve=new SplineCurve(npts);this.curves.push(curve);this.currentPoint.copy(pts[pts.length-1]);},arc:function arc(aX,aY,aRadius,aStartAngle,aEndAngle,aClockwise){var x0=this.currentPoint.x;var y0=this.currentPoint.y;this.absarc(aX+x0,aY+y0,aRadius,aStartAngle,aEndAngle,aClockwise);},absarc:function absarc(aX,aY,aRadius,aStartAngle,aEndAngle,aClockwise){this.absellipse(aX,aY,aRadius,aRadius,aStartAngle,aEndAngle,aClockwise);},ellipse:function ellipse(aX,aY,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation){var x0=this.currentPoint.x;var y0=this.currentPoint.y;this.absellipse(aX+x0,aY+y0,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation);},absellipse:function absellipse(aX,aY,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation){var curve=new EllipseCurve(aX,aY,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation);if(this.curves.length>0){// if a previous curve is present, attempt to join
var firstPoint=curve.getPoint(0);if(!firstPoint.equals(this.currentPoint)){this.lineTo(firstPoint.x,firstPoint.y);}}this.curves.push(curve);var lastPoint=curve.getPoint(1);this.currentPoint.copy(lastPoint);},copy:function copy(source){CurvePath.prototype.copy.call(this,source);this.currentPoint.copy(source.currentPoint);return this;},toJSON:function toJSON(){var data=CurvePath.prototype.toJSON.call(this);data.currentPoint=this.currentPoint.toArray();return data;},fromJSON:function fromJSON(json){CurvePath.prototype.fromJSON.call(this,json);this.currentPoint.fromArray(json.currentPoint);return this;}});/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Defines a 2d shape plane using paths.
	 **/// STEP 1 Create a path.
// STEP 2 Turn path into shape.
// STEP 3 ExtrudeGeometry takes in Shape/Shapes
// STEP 3a - Extract points from each shape, turn to vertices
// STEP 3b - Triangulate each shape, add faces.
function Shape(points){Path.call(this,points);this.uuid=_Math.generateUUID();this.type='Shape';this.holes=[];}Shape.prototype=Object.assign(Object.create(Path.prototype),{constructor:Shape,getPointsHoles:function getPointsHoles(divisions){var holesPts=[];for(var i=0,l=this.holes.length;i<l;i++){holesPts[i]=this.holes[i].getPoints(divisions);}return holesPts;},// get points of shape and holes (keypoints based on segments parameter)
extractPoints:function extractPoints(divisions){return{shape:this.getPoints(divisions),holes:this.getPointsHoles(divisions)};},copy:function copy(source){Path.prototype.copy.call(this,source);this.holes=[];for(var i=0,l=source.holes.length;i<l;i++){var hole=source.holes[i];this.holes.push(hole.clone());}return this;},toJSON:function toJSON(){var data=Path.prototype.toJSON.call(this);data.uuid=this.uuid;data.holes=[];for(var i=0,l=this.holes.length;i<l;i++){var hole=this.holes[i];data.holes.push(hole.toJSON());}return data;},fromJSON:function fromJSON(json){Path.prototype.fromJSON.call(this,json);this.uuid=json.uuid;this.holes=[];for(var i=0,l=json.holes.length;i<l;i++){var hole=json.holes[i];this.holes.push(new Path().fromJSON(hole));}return this;}});/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */function Light(color,intensity){Object3D.call(this);this.type='Light';this.color=new Color(color);this.intensity=intensity!==undefined?intensity:1;this.receiveShadow=undefined;}Light.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Light,isLight:true,copy:function copy(source){Object3D.prototype.copy.call(this,source);this.color.copy(source.color);this.intensity=source.intensity;return this;},toJSON:function toJSON(meta){var data=Object3D.prototype.toJSON.call(this,meta);data.object.color=this.color.getHex();data.object.intensity=this.intensity;if(this.groundColor!==undefined)data.object.groundColor=this.groundColor.getHex();if(this.distance!==undefined)data.object.distance=this.distance;if(this.angle!==undefined)data.object.angle=this.angle;if(this.decay!==undefined)data.object.decay=this.decay;if(this.penumbra!==undefined)data.object.penumbra=this.penumbra;if(this.shadow!==undefined)data.object.shadow=this.shadow.toJSON();return data;}});/**
	 * @author alteredq / http://alteredqualia.com/
	 */function HemisphereLight(skyColor,groundColor,intensity){Light.call(this,skyColor,intensity);this.type='HemisphereLight';this.castShadow=undefined;this.position.copy(Object3D.DefaultUp);this.updateMatrix();this.groundColor=new Color(groundColor);}HemisphereLight.prototype=Object.assign(Object.create(Light.prototype),{constructor:HemisphereLight,isHemisphereLight:true,copy:function copy(source){Light.prototype.copy.call(this,source);this.groundColor.copy(source.groundColor);return this;}});/**
	 * @author mrdoob / http://mrdoob.com/
	 */function LightShadow(camera){this.camera=camera;this.bias=0;this.radius=1;this.mapSize=new Vector2(512,512);this.map=null;this.matrix=new Matrix4();}Object.assign(LightShadow.prototype,{copy:function copy(source){this.camera=source.camera.clone();this.bias=source.bias;this.radius=source.radius;this.mapSize.copy(source.mapSize);return this;},clone:function clone(){return new this.constructor().copy(this);},toJSON:function toJSON(){var object={};if(this.bias!==0)object.bias=this.bias;if(this.radius!==1)object.radius=this.radius;if(this.mapSize.x!==512||this.mapSize.y!==512)object.mapSize=this.mapSize.toArray();object.camera=this.camera.toJSON(false).object;delete object.camera.matrix;return object;}});/**
	 * @author mrdoob / http://mrdoob.com/
	 */function SpotLightShadow(){LightShadow.call(this,new PerspectiveCamera(50,1,0.5,500));}SpotLightShadow.prototype=Object.assign(Object.create(LightShadow.prototype),{constructor:SpotLightShadow,isSpotLightShadow:true,update:function update(light){var camera=this.camera;var fov=_Math.RAD2DEG*2*light.angle;var aspect=this.mapSize.width/this.mapSize.height;var far=light.distance||camera.far;if(fov!==camera.fov||aspect!==camera.aspect||far!==camera.far){camera.fov=fov;camera.aspect=aspect;camera.far=far;camera.updateProjectionMatrix();}}});/**
	 * @author alteredq / http://alteredqualia.com/
	 */function SpotLight(color,intensity,distance,angle,penumbra,decay){Light.call(this,color,intensity);this.type='SpotLight';this.position.copy(Object3D.DefaultUp);this.updateMatrix();this.target=new Object3D();Object.defineProperty(this,'power',{get:function get(){// intensity = power per solid angle.
// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
return this.intensity*Math.PI;},set:function set(power){// intensity = power per solid angle.
// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
this.intensity=power/Math.PI;}});this.distance=distance!==undefined?distance:0;this.angle=angle!==undefined?angle:Math.PI/3;this.penumbra=penumbra!==undefined?penumbra:0;this.decay=decay!==undefined?decay:1;// for physically correct lights, should be 2.
this.shadow=new SpotLightShadow();}SpotLight.prototype=Object.assign(Object.create(Light.prototype),{constructor:SpotLight,isSpotLight:true,copy:function copy(source){Light.prototype.copy.call(this,source);this.distance=source.distance;this.angle=source.angle;this.penumbra=source.penumbra;this.decay=source.decay;this.target=source.target.clone();this.shadow=source.shadow.clone();return this;}});/**
	 * @author mrdoob / http://mrdoob.com/
	 */function PointLight(color,intensity,distance,decay){Light.call(this,color,intensity);this.type='PointLight';Object.defineProperty(this,'power',{get:function get(){// intensity = power per solid angle.
// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
return this.intensity*4*Math.PI;},set:function set(power){// intensity = power per solid angle.
// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
this.intensity=power/(4*Math.PI);}});this.distance=distance!==undefined?distance:0;this.decay=decay!==undefined?decay:1;// for physically correct lights, should be 2.
this.shadow=new LightShadow(new PerspectiveCamera(90,1,0.5,500));}PointLight.prototype=Object.assign(Object.create(Light.prototype),{constructor:PointLight,isPointLight:true,copy:function copy(source){Light.prototype.copy.call(this,source);this.distance=source.distance;this.decay=source.decay;this.shadow=source.shadow.clone();return this;}});/**
	 * @author mrdoob / http://mrdoob.com/
	 */function DirectionalLightShadow(){LightShadow.call(this,new OrthographicCamera(-5,5,5,-5,0.5,500));}DirectionalLightShadow.prototype=Object.assign(Object.create(LightShadow.prototype),{constructor:DirectionalLightShadow});/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */function DirectionalLight(color,intensity){Light.call(this,color,intensity);this.type='DirectionalLight';this.position.copy(Object3D.DefaultUp);this.updateMatrix();this.target=new Object3D();this.shadow=new DirectionalLightShadow();}DirectionalLight.prototype=Object.assign(Object.create(Light.prototype),{constructor:DirectionalLight,isDirectionalLight:true,copy:function copy(source){Light.prototype.copy.call(this,source);this.target=source.target.clone();this.shadow=source.shadow.clone();return this;}});/**
	 * @author mrdoob / http://mrdoob.com/
	 */function AmbientLight(color,intensity){Light.call(this,color,intensity);this.type='AmbientLight';this.castShadow=undefined;}AmbientLight.prototype=Object.assign(Object.create(Light.prototype),{constructor:AmbientLight,isAmbientLight:true});/**
	 * @author abelnation / http://github.com/abelnation
	 */function RectAreaLight(color,intensity,width,height){Light.call(this,color,intensity);this.type='RectAreaLight';this.width=width!==undefined?width:10;this.height=height!==undefined?height:10;}RectAreaLight.prototype=Object.assign(Object.create(Light.prototype),{constructor:RectAreaLight,isRectAreaLight:true,copy:function copy(source){Light.prototype.copy.call(this,source);this.width=source.width;this.height=source.height;return this;},toJSON:function toJSON(meta){var data=Light.prototype.toJSON.call(this,meta);data.object.width=this.width;data.object.height=this.height;return data;}});/**
	 * @author tschw
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 */var AnimationUtils={// same as Array.prototype.slice, but also works on typed arrays
arraySlice:function arraySlice(array,from,to){if(AnimationUtils.isTypedArray(array)){// in ios9 array.subarray(from, undefined) will return empty array
// but array.subarray(from) or array.subarray(from, len) is correct
return new array.constructor(array.subarray(from,to!==undefined?to:array.length));}return array.slice(from,to);},// converts an array to a specific type
convertArray:function convertArray(array,type,forceClone){if(!array||// let 'undefined' and 'null' pass
!forceClone&&array.constructor===type)return array;if(typeof type.BYTES_PER_ELEMENT==='number'){return new type(array);// create typed array
}return Array.prototype.slice.call(array);// create Array
},isTypedArray:function isTypedArray(object){return ArrayBuffer.isView(object)&&!(object instanceof DataView);},// returns an array by which times and values can be sorted
getKeyframeOrder:function getKeyframeOrder(times){function compareTime(i,j){return times[i]-times[j];}var n=times.length;var result=new Array(n);for(var i=0;i!==n;++i){result[i]=i;}result.sort(compareTime);return result;},// uses the array previously returned by 'getKeyframeOrder' to sort data
sortedArray:function sortedArray(values,stride,order){var nValues=values.length;var result=new values.constructor(nValues);for(var i=0,dstOffset=0;dstOffset!==nValues;++i){var srcOffset=order[i]*stride;for(var j=0;j!==stride;++j){result[dstOffset++]=values[srcOffset+j];}}return result;},// function for parsing AOS keyframe formats
flattenJSON:function flattenJSON(jsonKeys,times,values,valuePropertyName){var i=1,key=jsonKeys[0];while(key!==undefined&&key[valuePropertyName]===undefined){key=jsonKeys[i++];}if(key===undefined)return;// no data
var value=key[valuePropertyName];if(value===undefined)return;// no data
if(Array.isArray(value)){do{value=key[valuePropertyName];if(value!==undefined){times.push(key.time);values.push.apply(values,value);// push all elements
}key=jsonKeys[i++];}while(key!==undefined);}else if(value.toArray!==undefined){// ...assume THREE.Math-ish
do{value=key[valuePropertyName];if(value!==undefined){times.push(key.time);value.toArray(values,values.length);}key=jsonKeys[i++];}while(key!==undefined);}else{// otherwise push as-is
do{value=key[valuePropertyName];if(value!==undefined){times.push(key.time);values.push(value);}key=jsonKeys[i++];}while(key!==undefined);}}};/**
	 * Abstract base class of interpolants over parametric samples.
	 *
	 * The parameter domain is one dimensional, typically the time or a path
	 * along a curve defined by the data.
	 *
	 * The sample values can have any dimensionality and derived classes may
	 * apply special interpretations to the data.
	 *
	 * This class provides the interval seek in a Template Method, deferring
	 * the actual interpolation to derived classes.
	 *
	 * Time complexity is O(1) for linear access crossing at most two points
	 * and O(log N) for random access, where N is the number of positions.
	 *
	 * References:
	 *
	 * 		http://www.oodesign.com/template-method-pattern.html
	 *
	 * @author tschw
	 */function Interpolant(parameterPositions,sampleValues,sampleSize,resultBuffer){this.parameterPositions=parameterPositions;this._cachedIndex=0;this.resultBuffer=resultBuffer!==undefined?resultBuffer:new sampleValues.constructor(sampleSize);this.sampleValues=sampleValues;this.valueSize=sampleSize;}Object.assign(Interpolant.prototype,{evaluate:function evaluate(t){var pp=this.parameterPositions,i1=this._cachedIndex,t1=pp[i1],t0=pp[i1-1];validate_interval:{seek:{var right;linear_scan:{//- See http://jsperf.com/comparison-to-undefined/3
//- slower code:
//-
//- 				if ( t >= t1 || t1 === undefined ) {
forward_scan:if(!(t<t1)){for(var giveUpAt=i1+2;;){if(t1===undefined){if(t<t0)break forward_scan;// after end
i1=pp.length;this._cachedIndex=i1;return this.afterEnd_(i1-1,t,t0);}if(i1===giveUpAt)break;// this loop
t0=t1;t1=pp[++i1];if(t<t1){// we have arrived at the sought interval
break seek;}}// prepare binary search on the right side of the index
right=pp.length;break linear_scan;}//- slower code:
//-					if ( t < t0 || t0 === undefined ) {
if(!(t>=t0)){// looping?
var t1global=pp[1];if(t<t1global){i1=2;// + 1, using the scan for the details
t0=t1global;}// linear reverse scan
for(var giveUpAt=i1-2;;){if(t0===undefined){// before start
this._cachedIndex=0;return this.beforeStart_(0,t,t1);}if(i1===giveUpAt)break;// this loop
t1=t0;t0=pp[--i1-1];if(t>=t0){// we have arrived at the sought interval
break seek;}}// prepare binary search on the left side of the index
right=i1;i1=0;break linear_scan;}// the interval is valid
break validate_interval;}// linear scan
// binary search
while(i1<right){var mid=i1+right>>>1;if(t<pp[mid]){right=mid;}else{i1=mid+1;}}t1=pp[i1];t0=pp[i1-1];// check boundary cases, again
if(t0===undefined){this._cachedIndex=0;return this.beforeStart_(0,t,t1);}if(t1===undefined){i1=pp.length;this._cachedIndex=i1;return this.afterEnd_(i1-1,t0,t);}}// seek
this._cachedIndex=i1;this.intervalChanged_(i1,t0,t1);}// validate_interval
return this.interpolate_(i1,t0,t,t1);},settings:null,// optional, subclass-specific settings structure
// Note: The indirection allows central control of many interpolants.
// --- Protected interface
DefaultSettings_:{},getSettings_:function getSettings_(){return this.settings||this.DefaultSettings_;},copySampleValue_:function copySampleValue_(index){// copies a sample value to the result buffer
var result=this.resultBuffer,values=this.sampleValues,stride=this.valueSize,offset=index*stride;for(var i=0;i!==stride;++i){result[i]=values[offset+i];}return result;},// Template methods for derived classes:
interpolate_:function interpolate_()/* i1, t0, t, t1 */{throw new Error('call to abstract method');// implementations shall return this.resultBuffer
},intervalChanged_:function intervalChanged_()/* i1, t0, t1 */{// empty
}});//!\ DECLARE ALIAS AFTER assign prototype !
Object.assign(Interpolant.prototype,{//( 0, t, t0 ), returns this.resultBuffer
beforeStart_:Interpolant.prototype.copySampleValue_,//( N-1, tN-1, t ), returns this.resultBuffer
afterEnd_:Interpolant.prototype.copySampleValue_});/**
	 * Fast and simple cubic spline interpolant.
	 *
	 * It was derived from a Hermitian construction setting the first derivative
	 * at each sample position to the linear slope between neighboring positions
	 * over their parameter interval.
	 *
	 * @author tschw
	 */function CubicInterpolant(parameterPositions,sampleValues,sampleSize,resultBuffer){Interpolant.call(this,parameterPositions,sampleValues,sampleSize,resultBuffer);this._weightPrev=-0;this._offsetPrev=-0;this._weightNext=-0;this._offsetNext=-0;}CubicInterpolant.prototype=Object.assign(Object.create(Interpolant.prototype),{constructor:CubicInterpolant,DefaultSettings_:{endingStart:ZeroCurvatureEnding,endingEnd:ZeroCurvatureEnding},intervalChanged_:function intervalChanged_(i1,t0,t1){var pp=this.parameterPositions,iPrev=i1-2,iNext=i1+1,tPrev=pp[iPrev],tNext=pp[iNext];if(tPrev===undefined){switch(this.getSettings_().endingStart){case ZeroSlopeEnding:// f'(t0) = 0
iPrev=i1;tPrev=2*t0-t1;break;case WrapAroundEnding:// use the other end of the curve
iPrev=pp.length-2;tPrev=t0+pp[iPrev]-pp[iPrev+1];break;default:// ZeroCurvatureEnding
// f''(t0) = 0 a.k.a. Natural Spline
iPrev=i1;tPrev=t1;}}if(tNext===undefined){switch(this.getSettings_().endingEnd){case ZeroSlopeEnding:// f'(tN) = 0
iNext=i1;tNext=2*t1-t0;break;case WrapAroundEnding:// use the other end of the curve
iNext=1;tNext=t1+pp[1]-pp[0];break;default:// ZeroCurvatureEnding
// f''(tN) = 0, a.k.a. Natural Spline
iNext=i1-1;tNext=t0;}}var halfDt=(t1-t0)*0.5,stride=this.valueSize;this._weightPrev=halfDt/(t0-tPrev);this._weightNext=halfDt/(tNext-t1);this._offsetPrev=iPrev*stride;this._offsetNext=iNext*stride;},interpolate_:function interpolate_(i1,t0,t,t1){var result=this.resultBuffer,values=this.sampleValues,stride=this.valueSize,o1=i1*stride,o0=o1-stride,oP=this._offsetPrev,oN=this._offsetNext,wP=this._weightPrev,wN=this._weightNext,p=(t-t0)/(t1-t0),pp=p*p,ppp=pp*p;// evaluate polynomials
var sP=-wP*ppp+2*wP*pp-wP*p;var s0=(1+wP)*ppp+(-1.5-2*wP)*pp+(-0.5+wP)*p+1;var s1=(-1-wN)*ppp+(1.5+wN)*pp+0.5*p;var sN=wN*ppp-wN*pp;// combine data linearly
for(var i=0;i!==stride;++i){result[i]=sP*values[oP+i]+s0*values[o0+i]+s1*values[o1+i]+sN*values[oN+i];}return result;}});/**
	 * @author tschw
	 */function LinearInterpolant(parameterPositions,sampleValues,sampleSize,resultBuffer){Interpolant.call(this,parameterPositions,sampleValues,sampleSize,resultBuffer);}LinearInterpolant.prototype=Object.assign(Object.create(Interpolant.prototype),{constructor:LinearInterpolant,interpolate_:function interpolate_(i1,t0,t,t1){var result=this.resultBuffer,values=this.sampleValues,stride=this.valueSize,offset1=i1*stride,offset0=offset1-stride,weight1=(t-t0)/(t1-t0),weight0=1-weight1;for(var i=0;i!==stride;++i){result[i]=values[offset0+i]*weight0+values[offset1+i]*weight1;}return result;}});/**
	 *
	 * Interpolant that evaluates to the sample value at the position preceeding
	 * the parameter.
	 *
	 * @author tschw
	 */function DiscreteInterpolant(parameterPositions,sampleValues,sampleSize,resultBuffer){Interpolant.call(this,parameterPositions,sampleValues,sampleSize,resultBuffer);}DiscreteInterpolant.prototype=Object.assign(Object.create(Interpolant.prototype),{constructor:DiscreteInterpolant,interpolate_:function interpolate_(i1/*, t0, t, t1 */){return this.copySampleValue_(i1-1);}});/**
	 *
	 * A timed sequence of keyframes for a specific property.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */function KeyframeTrack(name,times,values,interpolation){if(name===undefined)throw new Error('THREE.KeyframeTrack: track name is undefined');if(times===undefined||times.length===0)throw new Error('THREE.KeyframeTrack: no keyframes in track named '+name);this.name=name;this.times=AnimationUtils.convertArray(times,this.TimeBufferType);this.values=AnimationUtils.convertArray(values,this.ValueBufferType);this.setInterpolation(interpolation||this.DefaultInterpolation);}// Static methods
Object.assign(KeyframeTrack,{// Serialization (in static context, because of constructor invocation
// and automatic invocation of .toJSON):
toJSON:function toJSON(track){var trackType=track.constructor;var json;// derived classes can define a static toJSON method
if(trackType.toJSON!==undefined){json=trackType.toJSON(track);}else{// by default, we assume the data can be serialized as-is
json={'name':track.name,'times':AnimationUtils.convertArray(track.times,Array),'values':AnimationUtils.convertArray(track.values,Array)};var interpolation=track.getInterpolation();if(interpolation!==track.DefaultInterpolation){json.interpolation=interpolation;}}json.type=track.ValueTypeName;// mandatory
return json;}});Object.assign(KeyframeTrack.prototype,{constructor:KeyframeTrack,TimeBufferType:Float32Array,ValueBufferType:Float32Array,DefaultInterpolation:InterpolateLinear,InterpolantFactoryMethodDiscrete:function InterpolantFactoryMethodDiscrete(result){return new DiscreteInterpolant(this.times,this.values,this.getValueSize(),result);},InterpolantFactoryMethodLinear:function InterpolantFactoryMethodLinear(result){return new LinearInterpolant(this.times,this.values,this.getValueSize(),result);},InterpolantFactoryMethodSmooth:function InterpolantFactoryMethodSmooth(result){return new CubicInterpolant(this.times,this.values,this.getValueSize(),result);},setInterpolation:function setInterpolation(interpolation){var factoryMethod;switch(interpolation){case InterpolateDiscrete:factoryMethod=this.InterpolantFactoryMethodDiscrete;break;case InterpolateLinear:factoryMethod=this.InterpolantFactoryMethodLinear;break;case InterpolateSmooth:factoryMethod=this.InterpolantFactoryMethodSmooth;break;}if(factoryMethod===undefined){var message="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(this.createInterpolant===undefined){// fall back to default, unless the default itself is messed up
if(interpolation!==this.DefaultInterpolation){this.setInterpolation(this.DefaultInterpolation);}else{throw new Error(message);// fatal, in this case
}}console.warn('THREE.KeyframeTrack:',message);return this;}this.createInterpolant=factoryMethod;return this;},getInterpolation:function getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return InterpolateDiscrete;case this.InterpolantFactoryMethodLinear:return InterpolateLinear;case this.InterpolantFactoryMethodSmooth:return InterpolateSmooth;}},getValueSize:function getValueSize(){return this.values.length/this.times.length;},// move all keyframes either forwards or backwards in time
shift:function shift(timeOffset){if(timeOffset!==0.0){var times=this.times;for(var i=0,n=times.length;i!==n;++i){times[i]+=timeOffset;}}return this;},// scale all keyframe times by a factor (useful for frame <-> seconds conversions)
scale:function scale(timeScale){if(timeScale!==1.0){var times=this.times;for(var i=0,n=times.length;i!==n;++i){times[i]*=timeScale;}}return this;},// removes keyframes before and after animation without changing any values within the range [startTime, endTime].
// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
trim:function trim(startTime,endTime){var times=this.times,nKeys=times.length,from=0,to=nKeys-1;while(from!==nKeys&&times[from]<startTime){++from;}while(to!==-1&&times[to]>endTime){--to;}++to;// inclusive -> exclusive bound
if(from!==0||to!==nKeys){// empty tracks are forbidden, so keep at least one keyframe
if(from>=to)to=Math.max(to,1),from=to-1;var stride=this.getValueSize();this.times=AnimationUtils.arraySlice(times,from,to);this.values=AnimationUtils.arraySlice(this.values,from*stride,to*stride);}return this;},// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
validate:function validate(){var valid=true;var valueSize=this.getValueSize();if(valueSize-Math.floor(valueSize)!==0){console.error('THREE.KeyframeTrack: Invalid value size in track.',this);valid=false;}var times=this.times,values=this.values,nKeys=times.length;if(nKeys===0){console.error('THREE.KeyframeTrack: Track is empty.',this);valid=false;}var prevTime=null;for(var i=0;i!==nKeys;i++){var currTime=times[i];if(typeof currTime==='number'&&isNaN(currTime)){console.error('THREE.KeyframeTrack: Time is not a valid number.',this,i,currTime);valid=false;break;}if(prevTime!==null&&prevTime>currTime){console.error('THREE.KeyframeTrack: Out of order keys.',this,i,currTime,prevTime);valid=false;break;}prevTime=currTime;}if(values!==undefined){if(AnimationUtils.isTypedArray(values)){for(var i=0,n=values.length;i!==n;++i){var value=values[i];if(isNaN(value)){console.error('THREE.KeyframeTrack: Value is not a valid number.',this,i,value);valid=false;break;}}}}return valid;},// removes equivalent sequential keys as common in morph target sequences
// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
optimize:function optimize(){var times=this.times,values=this.values,stride=this.getValueSize(),smoothInterpolation=this.getInterpolation()===InterpolateSmooth,writeIndex=1,lastIndex=times.length-1;for(var i=1;i<lastIndex;++i){var keep=false;var time=times[i];var timeNext=times[i+1];// remove adjacent keyframes scheduled at the same time
if(time!==timeNext&&(i!==1||time!==time[0])){if(!smoothInterpolation){// remove unnecessary keyframes same as their neighbors
var offset=i*stride,offsetP=offset-stride,offsetN=offset+stride;for(var j=0;j!==stride;++j){var value=values[offset+j];if(value!==values[offsetP+j]||value!==values[offsetN+j]){keep=true;break;}}}else{keep=true;}}// in-place compaction
if(keep){if(i!==writeIndex){times[writeIndex]=times[i];var readOffset=i*stride,writeOffset=writeIndex*stride;for(var j=0;j!==stride;++j){values[writeOffset+j]=values[readOffset+j];}}++writeIndex;}}// flush last keyframe (compaction looks ahead)
if(lastIndex>0){times[writeIndex]=times[lastIndex];for(var readOffset=lastIndex*stride,writeOffset=writeIndex*stride,j=0;j!==stride;++j){values[writeOffset+j]=values[readOffset+j];}++writeIndex;}if(writeIndex!==times.length){this.times=AnimationUtils.arraySlice(times,0,writeIndex);this.values=AnimationUtils.arraySlice(values,0,writeIndex*stride);}return this;}});/**
	 *
	 * A Track of Boolean keyframe values.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */function BooleanKeyframeTrack(name,times,values){KeyframeTrack.call(this,name,times,values);}BooleanKeyframeTrack.prototype=Object.assign(Object.create(KeyframeTrack.prototype),{constructor:BooleanKeyframeTrack,ValueTypeName:'bool',ValueBufferType:Array,DefaultInterpolation:InterpolateDiscrete,InterpolantFactoryMethodLinear:undefined,InterpolantFactoryMethodSmooth:undefined// Note: Actually this track could have a optimized / compressed
// representation of a single value and a custom interpolant that
// computes "firstValue ^ isOdd( index )".
});/**
	 *
	 * A Track of keyframe values that represent color.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */function ColorKeyframeTrack(name,times,values,interpolation){KeyframeTrack.call(this,name,times,values,interpolation);}ColorKeyframeTrack.prototype=Object.assign(Object.create(KeyframeTrack.prototype),{constructor:ColorKeyframeTrack,ValueTypeName:'color'// ValueBufferType is inherited
// DefaultInterpolation is inherited
// Note: Very basic implementation and nothing special yet.
// However, this is the place for color space parameterization.
});/**
	 *
	 * A Track of numeric keyframe values.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */function NumberKeyframeTrack(name,times,values,interpolation){KeyframeTrack.call(this,name,times,values,interpolation);}NumberKeyframeTrack.prototype=Object.assign(Object.create(KeyframeTrack.prototype),{constructor:NumberKeyframeTrack,ValueTypeName:'number'// ValueBufferType is inherited
// DefaultInterpolation is inherited
});/**
	 * Spherical linear unit quaternion interpolant.
	 *
	 * @author tschw
	 */function QuaternionLinearInterpolant(parameterPositions,sampleValues,sampleSize,resultBuffer){Interpolant.call(this,parameterPositions,sampleValues,sampleSize,resultBuffer);}QuaternionLinearInterpolant.prototype=Object.assign(Object.create(Interpolant.prototype),{constructor:QuaternionLinearInterpolant,interpolate_:function interpolate_(i1,t0,t,t1){var result=this.resultBuffer,values=this.sampleValues,stride=this.valueSize,offset=i1*stride,alpha=(t-t0)/(t1-t0);for(var end=offset+stride;offset!==end;offset+=4){Quaternion.slerpFlat(result,0,values,offset-stride,values,offset,alpha);}return result;}});/**
	 *
	 * A Track of quaternion keyframe values.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */function QuaternionKeyframeTrack(name,times,values,interpolation){KeyframeTrack.call(this,name,times,values,interpolation);}QuaternionKeyframeTrack.prototype=Object.assign(Object.create(KeyframeTrack.prototype),{constructor:QuaternionKeyframeTrack,ValueTypeName:'quaternion',// ValueBufferType is inherited
DefaultInterpolation:InterpolateLinear,InterpolantFactoryMethodLinear:function InterpolantFactoryMethodLinear(result){return new QuaternionLinearInterpolant(this.times,this.values,this.getValueSize(),result);},InterpolantFactoryMethodSmooth:undefined// not yet implemented
});/**
	 *
	 * A Track that interpolates Strings
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */function StringKeyframeTrack(name,times,values,interpolation){KeyframeTrack.call(this,name,times,values,interpolation);}StringKeyframeTrack.prototype=Object.assign(Object.create(KeyframeTrack.prototype),{constructor:StringKeyframeTrack,ValueTypeName:'string',ValueBufferType:Array,DefaultInterpolation:InterpolateDiscrete,InterpolantFactoryMethodLinear:undefined,InterpolantFactoryMethodSmooth:undefined});/**
	 *
	 * A Track of vectored keyframe values.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */function VectorKeyframeTrack(name,times,values,interpolation){KeyframeTrack.call(this,name,times,values,interpolation);}VectorKeyframeTrack.prototype=Object.assign(Object.create(KeyframeTrack.prototype),{constructor:VectorKeyframeTrack,ValueTypeName:'vector'// ValueBufferType is inherited
// DefaultInterpolation is inherited
});/**
	 *
	 * Reusable set of Tracks that represent an animation.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 */function AnimationClip(name,duration,tracks){this.name=name;this.tracks=tracks;this.duration=duration!==undefined?duration:-1;this.uuid=_Math.generateUUID();// this means it should figure out its duration by scanning the tracks
if(this.duration<0){this.resetDuration();}}function getTrackTypeForValueTypeName(typeName){switch(typeName.toLowerCase()){case'scalar':case'double':case'float':case'number':case'integer':return NumberKeyframeTrack;case'vector':case'vector2':case'vector3':case'vector4':return VectorKeyframeTrack;case'color':return ColorKeyframeTrack;case'quaternion':return QuaternionKeyframeTrack;case'bool':case'boolean':return BooleanKeyframeTrack;case'string':return StringKeyframeTrack;}throw new Error('THREE.KeyframeTrack: Unsupported typeName: '+typeName);}function parseKeyframeTrack(json){if(json.type===undefined){throw new Error('THREE.KeyframeTrack: track type undefined, can not parse');}var trackType=getTrackTypeForValueTypeName(json.type);if(json.times===undefined){var times=[],values=[];AnimationUtils.flattenJSON(json.keys,times,values,'value');json.times=times;json.values=values;}// derived classes can define a static parse method
if(trackType.parse!==undefined){return trackType.parse(json);}else{// by default, we assume a constructor compatible with the base
return new trackType(json.name,json.times,json.values,json.interpolation);}}Object.assign(AnimationClip,{parse:function parse(json){var tracks=[],jsonTracks=json.tracks,frameTime=1.0/(json.fps||1.0);for(var i=0,n=jsonTracks.length;i!==n;++i){tracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));}return new AnimationClip(json.name,json.duration,tracks);},toJSON:function toJSON(clip){var tracks=[],clipTracks=clip.tracks;var json={'name':clip.name,'duration':clip.duration,'tracks':tracks,'uuid':clip.uuid};for(var i=0,n=clipTracks.length;i!==n;++i){tracks.push(KeyframeTrack.toJSON(clipTracks[i]));}return json;},CreateFromMorphTargetSequence:function CreateFromMorphTargetSequence(name,morphTargetSequence,fps,noLoop){var numMorphTargets=morphTargetSequence.length;var tracks=[];for(var i=0;i<numMorphTargets;i++){var times=[];var values=[];times.push((i+numMorphTargets-1)%numMorphTargets,i,(i+1)%numMorphTargets);values.push(0,1,0);var order=AnimationUtils.getKeyframeOrder(times);times=AnimationUtils.sortedArray(times,1,order);values=AnimationUtils.sortedArray(values,1,order);// if there is a key at the first frame, duplicate it as the
// last frame as well for perfect loop.
if(!noLoop&&times[0]===0){times.push(numMorphTargets);values.push(values[0]);}tracks.push(new NumberKeyframeTrack('.morphTargetInfluences['+morphTargetSequence[i].name+']',times,values).scale(1.0/fps));}return new AnimationClip(name,-1,tracks);},findByName:function findByName(objectOrClipArray,name){var clipArray=objectOrClipArray;if(!Array.isArray(objectOrClipArray)){var o=objectOrClipArray;clipArray=o.geometry&&o.geometry.animations||o.animations;}for(var i=0;i<clipArray.length;i++){if(clipArray[i].name===name){return clipArray[i];}}return null;},CreateClipsFromMorphTargetSequences:function CreateClipsFromMorphTargetSequences(morphTargets,fps,noLoop){var animationToMorphTargets={};// tested with https://regex101.com/ on trick sequences
// such flamingo_flyA_003, flamingo_run1_003, crdeath0059
var pattern=/^([\w-]*?)([\d]+)$/;// sort morph target names into animation groups based
// patterns like Walk_001, Walk_002, Run_001, Run_002
for(var i=0,il=morphTargets.length;i<il;i++){var morphTarget=morphTargets[i];var parts=morphTarget.name.match(pattern);if(parts&&parts.length>1){var name=parts[1];var animationMorphTargets=animationToMorphTargets[name];if(!animationMorphTargets){animationToMorphTargets[name]=animationMorphTargets=[];}animationMorphTargets.push(morphTarget);}}var clips=[];for(var name in animationToMorphTargets){clips.push(AnimationClip.CreateFromMorphTargetSequence(name,animationToMorphTargets[name],fps,noLoop));}return clips;},// parse the animation.hierarchy format
parseAnimation:function parseAnimation(animation,bones){if(!animation){console.error('THREE.AnimationClip: No animation in JSONLoader data.');return null;}var addNonemptyTrack=function addNonemptyTrack(trackType,trackName,animationKeys,propertyName,destTracks){// only return track if there are actually keys.
if(animationKeys.length!==0){var times=[];var values=[];AnimationUtils.flattenJSON(animationKeys,times,values,propertyName);// empty keys are filtered out, so check again
if(times.length!==0){destTracks.push(new trackType(trackName,times,values));}}};var tracks=[];var clipName=animation.name||'default';// automatic length determination in AnimationClip.
var duration=animation.length||-1;var fps=animation.fps||30;var hierarchyTracks=animation.hierarchy||[];for(var h=0;h<hierarchyTracks.length;h++){var animationKeys=hierarchyTracks[h].keys;// skip empty tracks
if(!animationKeys||animationKeys.length===0)continue;// process morph targets
if(animationKeys[0].morphTargets){// figure out all morph targets used in this track
var morphTargetNames={};for(var k=0;k<animationKeys.length;k++){if(animationKeys[k].morphTargets){for(var m=0;m<animationKeys[k].morphTargets.length;m++){morphTargetNames[animationKeys[k].morphTargets[m]]=-1;}}}// create a track for each morph target with all zero
// morphTargetInfluences except for the keys in which
// the morphTarget is named.
for(var morphTargetName in morphTargetNames){var times=[];var values=[];for(var m=0;m!==animationKeys[k].morphTargets.length;++m){var animationKey=animationKeys[k];times.push(animationKey.time);values.push(animationKey.morphTarget===morphTargetName?1:0);}tracks.push(new NumberKeyframeTrack('.morphTargetInfluence['+morphTargetName+']',times,values));}duration=morphTargetNames.length*(fps||1.0);}else{// ...assume skeletal animation
var boneName='.bones['+bones[h].name+']';addNonemptyTrack(VectorKeyframeTrack,boneName+'.position',animationKeys,'pos',tracks);addNonemptyTrack(QuaternionKeyframeTrack,boneName+'.quaternion',animationKeys,'rot',tracks);addNonemptyTrack(VectorKeyframeTrack,boneName+'.scale',animationKeys,'scl',tracks);}}if(tracks.length===0){return null;}var clip=new AnimationClip(clipName,duration,tracks);return clip;}});Object.assign(AnimationClip.prototype,{resetDuration:function resetDuration(){var tracks=this.tracks,duration=0;for(var i=0,n=tracks.length;i!==n;++i){var track=this.tracks[i];duration=Math.max(duration,track.times[track.times.length-1]);}this.duration=duration;return this;},trim:function trim(){for(var i=0;i<this.tracks.length;i++){this.tracks[i].trim(0,this.duration);}return this;},validate:function validate(){var valid=true;for(var i=0;i<this.tracks.length;i++){valid=valid&&this.tracks[i].validate();}return valid;},optimize:function optimize(){for(var i=0;i<this.tracks.length;i++){this.tracks[i].optimize();}return this;}});/**
	 * @author mrdoob / http://mrdoob.com/
	 */function MaterialLoader(manager){this.manager=manager!==undefined?manager:DefaultLoadingManager;this.textures={};}Object.assign(MaterialLoader.prototype,{load:function load(url,onLoad,onProgress,onError){var scope=this;var loader=new FileLoader(scope.manager);loader.load(url,function(text){onLoad(scope.parse(JSON.parse(text)));},onProgress,onError);},setTextures:function setTextures(value){this.textures=value;},parse:function parse(json){var textures=this.textures;function getTexture(name){if(textures[name]===undefined){console.warn('THREE.MaterialLoader: Undefined texture',name);}return textures[name];}var material=new Materials[json.type]();if(json.uuid!==undefined)material.uuid=json.uuid;if(json.name!==undefined)material.name=json.name;if(json.color!==undefined)material.color.setHex(json.color);if(json.roughness!==undefined)material.roughness=json.roughness;if(json.metalness!==undefined)material.metalness=json.metalness;if(json.emissive!==undefined)material.emissive.setHex(json.emissive);if(json.specular!==undefined)material.specular.setHex(json.specular);if(json.shininess!==undefined)material.shininess=json.shininess;if(json.clearCoat!==undefined)material.clearCoat=json.clearCoat;if(json.clearCoatRoughness!==undefined)material.clearCoatRoughness=json.clearCoatRoughness;if(json.vertexColors!==undefined)material.vertexColors=json.vertexColors;if(json.fog!==undefined)material.fog=json.fog;if(json.flatShading!==undefined)material.flatShading=json.flatShading;if(json.blending!==undefined)material.blending=json.blending;if(json.side!==undefined)material.side=json.side;if(json.opacity!==undefined)material.opacity=json.opacity;if(json.transparent!==undefined)material.transparent=json.transparent;if(json.alphaTest!==undefined)material.alphaTest=json.alphaTest;if(json.depthTest!==undefined)material.depthTest=json.depthTest;if(json.depthWrite!==undefined)material.depthWrite=json.depthWrite;if(json.colorWrite!==undefined)material.colorWrite=json.colorWrite;if(json.wireframe!==undefined)material.wireframe=json.wireframe;if(json.wireframeLinewidth!==undefined)material.wireframeLinewidth=json.wireframeLinewidth;if(json.wireframeLinecap!==undefined)material.wireframeLinecap=json.wireframeLinecap;if(json.wireframeLinejoin!==undefined)material.wireframeLinejoin=json.wireframeLinejoin;if(json.rotation!==undefined)material.rotation=json.rotation;if(json.linewidth!==1)material.linewidth=json.linewidth;if(json.dashSize!==undefined)material.dashSize=json.dashSize;if(json.gapSize!==undefined)material.gapSize=json.gapSize;if(json.scale!==undefined)material.scale=json.scale;if(json.polygonOffset!==undefined)material.polygonOffset=json.polygonOffset;if(json.polygonOffsetFactor!==undefined)material.polygonOffsetFactor=json.polygonOffsetFactor;if(json.polygonOffsetUnits!==undefined)material.polygonOffsetUnits=json.polygonOffsetUnits;if(json.skinning!==undefined)material.skinning=json.skinning;if(json.morphTargets!==undefined)material.morphTargets=json.morphTargets;if(json.dithering!==undefined)material.dithering=json.dithering;if(json.visible!==undefined)material.visible=json.visible;if(json.userData!==undefined)material.userData=json.userData;// Shader Material
if(json.uniforms!==undefined){for(var name in json.uniforms){var uniform=json.uniforms[name];material.uniforms[name]={};switch(uniform.type){case't':material.uniforms[name].value=getTexture(uniform.value);break;case'c':material.uniforms[name].value=new Color().setHex(uniform.value);break;case'v2':material.uniforms[name].value=new Vector2().fromArray(uniform.value);break;case'v3':material.uniforms[name].value=new Vector3().fromArray(uniform.value);break;case'v4':material.uniforms[name].value=new Vector4().fromArray(uniform.value);break;case'm4':material.uniforms[name].value=new Matrix4().fromArray(uniform.value);break;default:material.uniforms[name].value=uniform.value;}}}if(json.defines!==undefined)material.defines=json.defines;if(json.vertexShader!==undefined)material.vertexShader=json.vertexShader;if(json.fragmentShader!==undefined)material.fragmentShader=json.fragmentShader;// Deprecated
if(json.shading!==undefined)material.flatShading=json.shading===1;// THREE.FlatShading
// for PointsMaterial
if(json.size!==undefined)material.size=json.size;if(json.sizeAttenuation!==undefined)material.sizeAttenuation=json.sizeAttenuation;// maps
if(json.map!==undefined)material.map=getTexture(json.map);if(json.alphaMap!==undefined){material.alphaMap=getTexture(json.alphaMap);material.transparent=true;}if(json.bumpMap!==undefined)material.bumpMap=getTexture(json.bumpMap);if(json.bumpScale!==undefined)material.bumpScale=json.bumpScale;if(json.normalMap!==undefined)material.normalMap=getTexture(json.normalMap);if(json.normalMapType!==undefined)material.normalMapType=json.normalMapType;if(json.normalScale!==undefined){var normalScale=json.normalScale;if(Array.isArray(normalScale)===false){// Blender exporter used to export a scalar. See #7459
normalScale=[normalScale,normalScale];}material.normalScale=new Vector2().fromArray(normalScale);}if(json.displacementMap!==undefined)material.displacementMap=getTexture(json.displacementMap);if(json.displacementScale!==undefined)material.displacementScale=json.displacementScale;if(json.displacementBias!==undefined)material.displacementBias=json.displacementBias;if(json.roughnessMap!==undefined)material.roughnessMap=getTexture(json.roughnessMap);if(json.metalnessMap!==undefined)material.metalnessMap=getTexture(json.metalnessMap);if(json.emissiveMap!==undefined)material.emissiveMap=getTexture(json.emissiveMap);if(json.emissiveIntensity!==undefined)material.emissiveIntensity=json.emissiveIntensity;if(json.specularMap!==undefined)material.specularMap=getTexture(json.specularMap);if(json.envMap!==undefined)material.envMap=getTexture(json.envMap);if(json.reflectivity!==undefined)material.reflectivity=json.reflectivity;if(json.lightMap!==undefined)material.lightMap=getTexture(json.lightMap);if(json.lightMapIntensity!==undefined)material.lightMapIntensity=json.lightMapIntensity;if(json.aoMap!==undefined)material.aoMap=getTexture(json.aoMap);if(json.aoMapIntensity!==undefined)material.aoMapIntensity=json.aoMapIntensity;if(json.gradientMap!==undefined)material.gradientMap=getTexture(json.gradientMap);return material;}});/**
	 * @author mrdoob / http://mrdoob.com/
	 */function BufferGeometryLoader(manager){this.manager=manager!==undefined?manager:DefaultLoadingManager;}Object.assign(BufferGeometryLoader.prototype,{load:function load(url,onLoad,onProgress,onError){var scope=this;var loader=new FileLoader(scope.manager);loader.load(url,function(text){onLoad(scope.parse(JSON.parse(text)));},onProgress,onError);},parse:function parse(json){var geometry=new BufferGeometry();var index=json.data.index;if(index!==undefined){var typedArray=new TYPED_ARRAYS[index.type](index.array);geometry.setIndex(new BufferAttribute(typedArray,1));}var attributes=json.data.attributes;for(var key in attributes){var attribute=attributes[key];var typedArray=new TYPED_ARRAYS[attribute.type](attribute.array);geometry.addAttribute(key,new BufferAttribute(typedArray,attribute.itemSize,attribute.normalized));}var groups=json.data.groups||json.data.drawcalls||json.data.offsets;if(groups!==undefined){for(var i=0,n=groups.length;i!==n;++i){var group=groups[i];geometry.addGroup(group.start,group.count,group.materialIndex);}}var boundingSphere=json.data.boundingSphere;if(boundingSphere!==undefined){var center=new Vector3();if(boundingSphere.center!==undefined){center.fromArray(boundingSphere.center);}geometry.boundingSphere=new Sphere(center,boundingSphere.radius);}return geometry;}});var TYPED_ARRAYS={Int8Array:Int8Array,Uint8Array:Uint8Array,// Workaround for IE11 pre KB2929437. See #11440
Uint8ClampedArray:typeof Uint8ClampedArray!=='undefined'?Uint8ClampedArray:Uint8Array,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};/**
	 * @author alteredq / http://alteredqualia.com/
	 */function Loader(){}Loader.Handlers={handlers:[],add:function add(regex,loader){this.handlers.push(regex,loader);},get:function get(file){var handlers=this.handlers;for(var i=0,l=handlers.length;i<l;i+=2){var regex=handlers[i];var loader=handlers[i+1];if(regex.test(file)){return loader;}}return null;}};Object.assign(Loader.prototype,{crossOrigin:'anonymous',onLoadStart:function onLoadStart(){},onLoadProgress:function onLoadProgress(){},onLoadComplete:function onLoadComplete(){},initMaterials:function initMaterials(materials,texturePath,crossOrigin){var array=[];for(var i=0;i<materials.length;++i){array[i]=this.createMaterial(materials[i],texturePath,crossOrigin);}return array;},createMaterial:function(){var BlendingMode={NoBlending:NoBlending,NormalBlending:NormalBlending,AdditiveBlending:AdditiveBlending,SubtractiveBlending:SubtractiveBlending,MultiplyBlending:MultiplyBlending,CustomBlending:CustomBlending};var color=new Color();var textureLoader=new TextureLoader();var materialLoader=new MaterialLoader();return function createMaterial(m,texturePath,crossOrigin){// convert from old material format
var textures={};function loadTexture(path,repeat,offset,wrap,anisotropy){var fullPath=texturePath+path;var loader=Loader.Handlers.get(fullPath);var texture;if(loader!==null){texture=loader.load(fullPath);}else{textureLoader.setCrossOrigin(crossOrigin);texture=textureLoader.load(fullPath);}if(repeat!==undefined){texture.repeat.fromArray(repeat);if(repeat[0]!==1)texture.wrapS=RepeatWrapping;if(repeat[1]!==1)texture.wrapT=RepeatWrapping;}if(offset!==undefined){texture.offset.fromArray(offset);}if(wrap!==undefined){if(wrap[0]==='repeat')texture.wrapS=RepeatWrapping;if(wrap[0]==='mirror')texture.wrapS=MirroredRepeatWrapping;if(wrap[1]==='repeat')texture.wrapT=RepeatWrapping;if(wrap[1]==='mirror')texture.wrapT=MirroredRepeatWrapping;}if(anisotropy!==undefined){texture.anisotropy=anisotropy;}var uuid=_Math.generateUUID();textures[uuid]=texture;return uuid;}//
var json={uuid:_Math.generateUUID(),type:'MeshLambertMaterial'};for(var name in m){var value=m[name];switch(name){case'DbgColor':case'DbgIndex':case'opticalDensity':case'illumination':break;case'DbgName':json.name=value;break;case'blending':json.blending=BlendingMode[value];break;case'colorAmbient':case'mapAmbient':console.warn('THREE.Loader.createMaterial:',name,'is no longer supported.');break;case'colorDiffuse':json.color=color.fromArray(value).getHex();break;case'colorSpecular':json.specular=color.fromArray(value).getHex();break;case'colorEmissive':json.emissive=color.fromArray(value).getHex();break;case'specularCoef':json.shininess=value;break;case'shading':if(value.toLowerCase()==='basic')json.type='MeshBasicMaterial';if(value.toLowerCase()==='phong')json.type='MeshPhongMaterial';if(value.toLowerCase()==='standard')json.type='MeshStandardMaterial';break;case'mapDiffuse':json.map=loadTexture(value,m.mapDiffuseRepeat,m.mapDiffuseOffset,m.mapDiffuseWrap,m.mapDiffuseAnisotropy);break;case'mapDiffuseRepeat':case'mapDiffuseOffset':case'mapDiffuseWrap':case'mapDiffuseAnisotropy':break;case'mapEmissive':json.emissiveMap=loadTexture(value,m.mapEmissiveRepeat,m.mapEmissiveOffset,m.mapEmissiveWrap,m.mapEmissiveAnisotropy);break;case'mapEmissiveRepeat':case'mapEmissiveOffset':case'mapEmissiveWrap':case'mapEmissiveAnisotropy':break;case'mapLight':json.lightMap=loadTexture(value,m.mapLightRepeat,m.mapLightOffset,m.mapLightWrap,m.mapLightAnisotropy);break;case'mapLightRepeat':case'mapLightOffset':case'mapLightWrap':case'mapLightAnisotropy':break;case'mapAO':json.aoMap=loadTexture(value,m.mapAORepeat,m.mapAOOffset,m.mapAOWrap,m.mapAOAnisotropy);break;case'mapAORepeat':case'mapAOOffset':case'mapAOWrap':case'mapAOAnisotropy':break;case'mapBump':json.bumpMap=loadTexture(value,m.mapBumpRepeat,m.mapBumpOffset,m.mapBumpWrap,m.mapBumpAnisotropy);break;case'mapBumpScale':json.bumpScale=value;break;case'mapBumpRepeat':case'mapBumpOffset':case'mapBumpWrap':case'mapBumpAnisotropy':break;case'mapNormal':json.normalMap=loadTexture(value,m.mapNormalRepeat,m.mapNormalOffset,m.mapNormalWrap,m.mapNormalAnisotropy);break;case'mapNormalFactor':json.normalScale=value;break;case'mapNormalRepeat':case'mapNormalOffset':case'mapNormalWrap':case'mapNormalAnisotropy':break;case'mapSpecular':json.specularMap=loadTexture(value,m.mapSpecularRepeat,m.mapSpecularOffset,m.mapSpecularWrap,m.mapSpecularAnisotropy);break;case'mapSpecularRepeat':case'mapSpecularOffset':case'mapSpecularWrap':case'mapSpecularAnisotropy':break;case'mapMetalness':json.metalnessMap=loadTexture(value,m.mapMetalnessRepeat,m.mapMetalnessOffset,m.mapMetalnessWrap,m.mapMetalnessAnisotropy);break;case'mapMetalnessRepeat':case'mapMetalnessOffset':case'mapMetalnessWrap':case'mapMetalnessAnisotropy':break;case'mapRoughness':json.roughnessMap=loadTexture(value,m.mapRoughnessRepeat,m.mapRoughnessOffset,m.mapRoughnessWrap,m.mapRoughnessAnisotropy);break;case'mapRoughnessRepeat':case'mapRoughnessOffset':case'mapRoughnessWrap':case'mapRoughnessAnisotropy':break;case'mapAlpha':json.alphaMap=loadTexture(value,m.mapAlphaRepeat,m.mapAlphaOffset,m.mapAlphaWrap,m.mapAlphaAnisotropy);break;case'mapAlphaRepeat':case'mapAlphaOffset':case'mapAlphaWrap':case'mapAlphaAnisotropy':break;case'flipSided':json.side=BackSide;break;case'doubleSided':json.side=DoubleSide;break;case'transparency':console.warn('THREE.Loader.createMaterial: transparency has been renamed to opacity');json.opacity=value;break;case'depthTest':case'depthWrite':case'colorWrite':case'opacity':case'reflectivity':case'transparent':case'visible':case'wireframe':json[name]=value;break;case'vertexColors':if(value===true)json.vertexColors=VertexColors;if(value==='face')json.vertexColors=FaceColors;break;default:console.error('THREE.Loader.createMaterial: Unsupported',name,value);break;}}if(json.type==='MeshBasicMaterial')delete json.emissive;if(json.type!=='MeshPhongMaterial')delete json.specular;if(json.opacity<1)json.transparent=true;materialLoader.setTextures(textures);return materialLoader.parse(json);};}()});/**
	 * @author Don McCurdy / https://www.donmccurdy.com
	 */var LoaderUtils={decodeText:function decodeText(array){if(typeof TextDecoder!=='undefined'){return new TextDecoder().decode(array);}// Avoid the String.fromCharCode.apply(null, array) shortcut, which
// throws a "maximum call stack size exceeded" error for large arrays.
var s='';for(var i=0,il=array.length;i<il;i++){// Implicitly assumes little-endian.
s+=String.fromCharCode(array[i]);}// Merges multi-byte utf-8 characters.
return decodeURIComponent(escape(s));},extractUrlBase:function extractUrlBase(url){var index=url.lastIndexOf('/');if(index===-1)return'./';return url.substr(0,index+1);}};/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */function JSONLoader(manager){if(typeof manager==='boolean'){console.warn('THREE.JSONLoader: showStatus parameter has been removed from constructor.');manager=undefined;}this.manager=manager!==undefined?manager:DefaultLoadingManager;this.withCredentials=false;}Object.assign(JSONLoader.prototype,{crossOrigin:'anonymous',load:function load(url,onLoad,onProgress,onError){var scope=this;var texturePath=this.texturePath&&typeof this.texturePath==='string'?this.texturePath:LoaderUtils.extractUrlBase(url);var loader=new FileLoader(this.manager);loader.setWithCredentials(this.withCredentials);loader.load(url,function(text){var json=JSON.parse(text);var metadata=json.metadata;if(metadata!==undefined){var type=metadata.type;if(type!==undefined){if(type.toLowerCase()==='object'){console.error('THREE.JSONLoader: '+url+' should be loaded with THREE.ObjectLoader instead.');return;}}}var object=scope.parse(json,texturePath);onLoad(object.geometry,object.materials);},onProgress,onError);},setCrossOrigin:function setCrossOrigin(value){this.crossOrigin=value;return this;},setTexturePath:function setTexturePath(value){this.texturePath=value;return this;},parse:function(){function parseModel(json,geometry){function isBitSet(value,position){return value&1<<position;}var i,j,fi,offset,zLength,colorIndex,normalIndex,uvIndex,materialIndex,type,isQuad,hasMaterial,hasFaceVertexUv,hasFaceNormal,hasFaceVertexNormal,hasFaceColor,hasFaceVertexColor,vertex,face,faceA,faceB,hex,normal,uvLayer,uv,u,v,faces=json.faces,vertices=json.vertices,normals=json.normals,colors=json.colors,scale=json.scale,nUvLayers=0;if(json.uvs!==undefined){// disregard empty arrays
for(i=0;i<json.uvs.length;i++){if(json.uvs[i].length)nUvLayers++;}for(i=0;i<nUvLayers;i++){geometry.faceVertexUvs[i]=[];}}offset=0;zLength=vertices.length;while(offset<zLength){vertex=new Vector3();vertex.x=vertices[offset++]*scale;vertex.y=vertices[offset++]*scale;vertex.z=vertices[offset++]*scale;geometry.vertices.push(vertex);}offset=0;zLength=faces.length;while(offset<zLength){type=faces[offset++];isQuad=isBitSet(type,0);hasMaterial=isBitSet(type,1);hasFaceVertexUv=isBitSet(type,3);hasFaceNormal=isBitSet(type,4);hasFaceVertexNormal=isBitSet(type,5);hasFaceColor=isBitSet(type,6);hasFaceVertexColor=isBitSet(type,7);// console.log("type", type, "bits", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);
if(isQuad){faceA=new Face3();faceA.a=faces[offset];faceA.b=faces[offset+1];faceA.c=faces[offset+3];faceB=new Face3();faceB.a=faces[offset+1];faceB.b=faces[offset+2];faceB.c=faces[offset+3];offset+=4;if(hasMaterial){materialIndex=faces[offset++];faceA.materialIndex=materialIndex;faceB.materialIndex=materialIndex;}// to get face <=> uv index correspondence
fi=geometry.faces.length;if(hasFaceVertexUv){for(i=0;i<nUvLayers;i++){uvLayer=json.uvs[i];geometry.faceVertexUvs[i][fi]=[];geometry.faceVertexUvs[i][fi+1]=[];for(j=0;j<4;j++){uvIndex=faces[offset++];u=uvLayer[uvIndex*2];v=uvLayer[uvIndex*2+1];uv=new Vector2(u,v);if(j!==2)geometry.faceVertexUvs[i][fi].push(uv);if(j!==0)geometry.faceVertexUvs[i][fi+1].push(uv);}}}if(hasFaceNormal){normalIndex=faces[offset++]*3;faceA.normal.set(normals[normalIndex++],normals[normalIndex++],normals[normalIndex]);faceB.normal.copy(faceA.normal);}if(hasFaceVertexNormal){for(i=0;i<4;i++){normalIndex=faces[offset++]*3;normal=new Vector3(normals[normalIndex++],normals[normalIndex++],normals[normalIndex]);if(i!==2)faceA.vertexNormals.push(normal);if(i!==0)faceB.vertexNormals.push(normal);}}if(hasFaceColor){colorIndex=faces[offset++];hex=colors[colorIndex];faceA.color.setHex(hex);faceB.color.setHex(hex);}if(hasFaceVertexColor){for(i=0;i<4;i++){colorIndex=faces[offset++];hex=colors[colorIndex];if(i!==2)faceA.vertexColors.push(new Color(hex));if(i!==0)faceB.vertexColors.push(new Color(hex));}}geometry.faces.push(faceA);geometry.faces.push(faceB);}else{face=new Face3();face.a=faces[offset++];face.b=faces[offset++];face.c=faces[offset++];if(hasMaterial){materialIndex=faces[offset++];face.materialIndex=materialIndex;}// to get face <=> uv index correspondence
fi=geometry.faces.length;if(hasFaceVertexUv){for(i=0;i<nUvLayers;i++){uvLayer=json.uvs[i];geometry.faceVertexUvs[i][fi]=[];for(j=0;j<3;j++){uvIndex=faces[offset++];u=uvLayer[uvIndex*2];v=uvLayer[uvIndex*2+1];uv=new Vector2(u,v);geometry.faceVertexUvs[i][fi].push(uv);}}}if(hasFaceNormal){normalIndex=faces[offset++]*3;face.normal.set(normals[normalIndex++],normals[normalIndex++],normals[normalIndex]);}if(hasFaceVertexNormal){for(i=0;i<3;i++){normalIndex=faces[offset++]*3;normal=new Vector3(normals[normalIndex++],normals[normalIndex++],normals[normalIndex]);face.vertexNormals.push(normal);}}if(hasFaceColor){colorIndex=faces[offset++];face.color.setHex(colors[colorIndex]);}if(hasFaceVertexColor){for(i=0;i<3;i++){colorIndex=faces[offset++];face.vertexColors.push(new Color(colors[colorIndex]));}}geometry.faces.push(face);}}}function parseSkin(json,geometry){var influencesPerVertex=json.influencesPerVertex!==undefined?json.influencesPerVertex:2;if(json.skinWeights){for(var i=0,l=json.skinWeights.length;i<l;i+=influencesPerVertex){var x=json.skinWeights[i];var y=influencesPerVertex>1?json.skinWeights[i+1]:0;var z=influencesPerVertex>2?json.skinWeights[i+2]:0;var w=influencesPerVertex>3?json.skinWeights[i+3]:0;geometry.skinWeights.push(new Vector4(x,y,z,w));}}if(json.skinIndices){for(var i=0,l=json.skinIndices.length;i<l;i+=influencesPerVertex){var a=json.skinIndices[i];var b=influencesPerVertex>1?json.skinIndices[i+1]:0;var c=influencesPerVertex>2?json.skinIndices[i+2]:0;var d=influencesPerVertex>3?json.skinIndices[i+3]:0;geometry.skinIndices.push(new Vector4(a,b,c,d));}}geometry.bones=json.bones;if(geometry.bones&&geometry.bones.length>0&&(geometry.skinWeights.length!==geometry.skinIndices.length||geometry.skinIndices.length!==geometry.vertices.length)){console.warn('When skinning, number of vertices ('+geometry.vertices.length+'), skinIndices ('+geometry.skinIndices.length+'), and skinWeights ('+geometry.skinWeights.length+') should match.');}}function parseMorphing(json,geometry){var scale=json.scale;if(json.morphTargets!==undefined){for(var i=0,l=json.morphTargets.length;i<l;i++){geometry.morphTargets[i]={};geometry.morphTargets[i].name=json.morphTargets[i].name;geometry.morphTargets[i].vertices=[];var dstVertices=geometry.morphTargets[i].vertices;var srcVertices=json.morphTargets[i].vertices;for(var v=0,vl=srcVertices.length;v<vl;v+=3){var vertex=new Vector3();vertex.x=srcVertices[v]*scale;vertex.y=srcVertices[v+1]*scale;vertex.z=srcVertices[v+2]*scale;dstVertices.push(vertex);}}}if(json.morphColors!==undefined&&json.morphColors.length>0){console.warn('THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.');var faces=geometry.faces;var morphColors=json.morphColors[0].colors;for(var i=0,l=faces.length;i<l;i++){faces[i].color.fromArray(morphColors,i*3);}}}function parseAnimations(json,geometry){var outputAnimations=[];// parse old style Bone/Hierarchy animations
var animations=[];if(json.animation!==undefined){animations.push(json.animation);}if(json.animations!==undefined){if(json.animations.length){animations=animations.concat(json.animations);}else{animations.push(json.animations);}}for(var i=0;i<animations.length;i++){var clip=AnimationClip.parseAnimation(animations[i],geometry.bones);if(clip)outputAnimations.push(clip);}// parse implicit morph animations
if(geometry.morphTargets){// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.
var morphAnimationClips=AnimationClip.CreateClipsFromMorphTargetSequences(geometry.morphTargets,10);outputAnimations=outputAnimations.concat(morphAnimationClips);}if(outputAnimations.length>0)geometry.animations=outputAnimations;}return function parse(json,texturePath){if(json.data!==undefined){// Geometry 4.0 spec
json=json.data;}if(json.scale!==undefined){json.scale=1.0/json.scale;}else{json.scale=1.0;}var geometry=new Geometry();parseModel(json,geometry);parseSkin(json,geometry);parseMorphing(json,geometry);parseAnimations(json,geometry);geometry.computeFaceNormals();geometry.computeBoundingSphere();if(json.materials===undefined||json.materials.length===0){return{geometry:geometry};}else{var materials=Loader.prototype.initMaterials(json.materials,texturePath,this.crossOrigin);return{geometry:geometry,materials:materials};}};}()});/**
	 * @author mrdoob / http://mrdoob.com/
	 */function ObjectLoader(manager){this.manager=manager!==undefined?manager:DefaultLoadingManager;this.texturePath='';}Object.assign(ObjectLoader.prototype,{crossOrigin:'anonymous',load:function load(url,onLoad,onProgress,onError){if(this.texturePath===''){this.texturePath=url.substring(0,url.lastIndexOf('/')+1);}var scope=this;var loader=new FileLoader(scope.manager);loader.load(url,function(text){var json=null;try{json=JSON.parse(text);}catch(error){if(onError!==undefined)onError(error);console.error('THREE:ObjectLoader: Can\'t parse '+url+'.',error.message);return;}var metadata=json.metadata;if(metadata===undefined||metadata.type===undefined||metadata.type.toLowerCase()==='geometry'){console.error('THREE.ObjectLoader: Can\'t load '+url+'. Use THREE.JSONLoader instead.');return;}scope.parse(json,onLoad);},onProgress,onError);},setTexturePath:function setTexturePath(value){this.texturePath=value;return this;},setCrossOrigin:function setCrossOrigin(value){this.crossOrigin=value;return this;},parse:function parse(json,onLoad){var shapes=this.parseShape(json.shapes);var geometries=this.parseGeometries(json.geometries,shapes);var images=this.parseImages(json.images,function(){if(onLoad!==undefined)onLoad(object);});var textures=this.parseTextures(json.textures,images);var materials=this.parseMaterials(json.materials,textures);var object=this.parseObject(json.object,geometries,materials);if(json.animations){object.animations=this.parseAnimations(json.animations);}if(json.images===undefined||json.images.length===0){if(onLoad!==undefined)onLoad(object);}return object;},parseShape:function parseShape(json){var shapes={};if(json!==undefined){for(var i=0,l=json.length;i<l;i++){var shape=new Shape().fromJSON(json[i]);shapes[shape.uuid]=shape;}}return shapes;},parseGeometries:function parseGeometries(json,shapes){var geometries={};if(json!==undefined){var geometryLoader=new JSONLoader();var bufferGeometryLoader=new BufferGeometryLoader();for(var i=0,l=json.length;i<l;i++){var geometry;var data=json[i];switch(data.type){case'PlaneGeometry':case'PlaneBufferGeometry':geometry=new Geometries[data.type](data.width,data.height,data.widthSegments,data.heightSegments);break;case'BoxGeometry':case'BoxBufferGeometry':case'CubeGeometry':// backwards compatible
geometry=new Geometries[data.type](data.width,data.height,data.depth,data.widthSegments,data.heightSegments,data.depthSegments);break;case'CircleGeometry':case'CircleBufferGeometry':geometry=new Geometries[data.type](data.radius,data.segments,data.thetaStart,data.thetaLength);break;case'CylinderGeometry':case'CylinderBufferGeometry':geometry=new Geometries[data.type](data.radiusTop,data.radiusBottom,data.height,data.radialSegments,data.heightSegments,data.openEnded,data.thetaStart,data.thetaLength);break;case'ConeGeometry':case'ConeBufferGeometry':geometry=new Geometries[data.type](data.radius,data.height,data.radialSegments,data.heightSegments,data.openEnded,data.thetaStart,data.thetaLength);break;case'SphereGeometry':case'SphereBufferGeometry':geometry=new Geometries[data.type](data.radius,data.widthSegments,data.heightSegments,data.phiStart,data.phiLength,data.thetaStart,data.thetaLength);break;case'DodecahedronGeometry':case'DodecahedronBufferGeometry':case'IcosahedronGeometry':case'IcosahedronBufferGeometry':case'OctahedronGeometry':case'OctahedronBufferGeometry':case'TetrahedronGeometry':case'TetrahedronBufferGeometry':geometry=new Geometries[data.type](data.radius,data.detail);break;case'RingGeometry':case'RingBufferGeometry':geometry=new Geometries[data.type](data.innerRadius,data.outerRadius,data.thetaSegments,data.phiSegments,data.thetaStart,data.thetaLength);break;case'TorusGeometry':case'TorusBufferGeometry':geometry=new Geometries[data.type](data.radius,data.tube,data.radialSegments,data.tubularSegments,data.arc);break;case'TorusKnotGeometry':case'TorusKnotBufferGeometry':geometry=new Geometries[data.type](data.radius,data.tube,data.tubularSegments,data.radialSegments,data.p,data.q);break;case'LatheGeometry':case'LatheBufferGeometry':geometry=new Geometries[data.type](data.points,data.segments,data.phiStart,data.phiLength);break;case'PolyhedronGeometry':case'PolyhedronBufferGeometry':geometry=new Geometries[data.type](data.vertices,data.indices,data.radius,data.details);break;case'ShapeGeometry':case'ShapeBufferGeometry':var geometryShapes=[];for(var j=0,jl=data.shapes.length;j<jl;j++){var shape=shapes[data.shapes[j]];geometryShapes.push(shape);}geometry=new Geometries[data.type](geometryShapes,data.curveSegments);break;case'ExtrudeGeometry':case'ExtrudeBufferGeometry':var geometryShapes=[];for(var j=0,jl=data.shapes.length;j<jl;j++){var shape=shapes[data.shapes[j]];geometryShapes.push(shape);}var extrudePath=data.options.extrudePath;if(extrudePath!==undefined){data.options.extrudePath=new Curves[extrudePath.type]().fromJSON(extrudePath);}geometry=new Geometries[data.type](geometryShapes,data.options);break;case'BufferGeometry':geometry=bufferGeometryLoader.parse(data);break;case'Geometry':geometry=geometryLoader.parse(data,this.texturePath).geometry;break;default:console.warn('THREE.ObjectLoader: Unsupported geometry type "'+data.type+'"');continue;}geometry.uuid=data.uuid;if(data.name!==undefined)geometry.name=data.name;if(geometry.isBufferGeometry===true&&data.userData!==undefined)geometry.userData=data.userData;geometries[data.uuid]=geometry;}}return geometries;},parseMaterials:function parseMaterials(json,textures){var materials={};if(json!==undefined){var loader=new MaterialLoader();loader.setTextures(textures);for(var i=0,l=json.length;i<l;i++){var data=json[i];if(data.type==='MultiMaterial'){// Deprecated
var array=[];for(var j=0;j<data.materials.length;j++){array.push(loader.parse(data.materials[j]));}materials[data.uuid]=array;}else{materials[data.uuid]=loader.parse(data);}}}return materials;},parseAnimations:function parseAnimations(json){var animations=[];for(var i=0;i<json.length;i++){var data=json[i];var clip=AnimationClip.parse(data);if(data.uuid!==undefined)clip.uuid=data.uuid;animations.push(clip);}return animations;},parseImages:function parseImages(json,onLoad){var scope=this;var images={};function loadImage(url){scope.manager.itemStart(url);return loader.load(url,function(){scope.manager.itemEnd(url);},undefined,function(){scope.manager.itemEnd(url);scope.manager.itemError(url);});}if(json!==undefined&&json.length>0){var manager=new LoadingManager(onLoad);var loader=new ImageLoader(manager);loader.setCrossOrigin(this.crossOrigin);for(var i=0,il=json.length;i<il;i++){var image=json[i];var url=image.url;if(Array.isArray(url)){// load array of images e.g CubeTexture
images[image.uuid]=[];for(var j=0,jl=url.length;j<jl;j++){var currentUrl=url[j];var path=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(currentUrl)?currentUrl:scope.texturePath+currentUrl;images[image.uuid].push(loadImage(path));}}else{// load single image
var path=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(image.url)?image.url:scope.texturePath+image.url;images[image.uuid]=loadImage(path);}}}return images;},parseTextures:function parseTextures(json,images){function parseConstant(value,type){if(typeof value==='number')return value;console.warn('THREE.ObjectLoader.parseTexture: Constant should be in numeric form.',value);return type[value];}var textures={};if(json!==undefined){for(var i=0,l=json.length;i<l;i++){var data=json[i];if(data.image===undefined){console.warn('THREE.ObjectLoader: No "image" specified for',data.uuid);}if(images[data.image]===undefined){console.warn('THREE.ObjectLoader: Undefined image',data.image);}var texture;if(Array.isArray(images[data.image])){texture=new CubeTexture(images[data.image]);}else{texture=new Texture(images[data.image]);}texture.needsUpdate=true;texture.uuid=data.uuid;if(data.name!==undefined)texture.name=data.name;if(data.mapping!==undefined)texture.mapping=parseConstant(data.mapping,TEXTURE_MAPPING);if(data.offset!==undefined)texture.offset.fromArray(data.offset);if(data.repeat!==undefined)texture.repeat.fromArray(data.repeat);if(data.center!==undefined)texture.center.fromArray(data.center);if(data.rotation!==undefined)texture.rotation=data.rotation;if(data.wrap!==undefined){texture.wrapS=parseConstant(data.wrap[0],TEXTURE_WRAPPING);texture.wrapT=parseConstant(data.wrap[1],TEXTURE_WRAPPING);}if(data.format!==undefined)texture.format=data.format;if(data.minFilter!==undefined)texture.minFilter=parseConstant(data.minFilter,TEXTURE_FILTER);if(data.magFilter!==undefined)texture.magFilter=parseConstant(data.magFilter,TEXTURE_FILTER);if(data.anisotropy!==undefined)texture.anisotropy=data.anisotropy;if(data.flipY!==undefined)texture.flipY=data.flipY;textures[data.uuid]=texture;}}return textures;},parseObject:function parseObject(data,geometries,materials){var object;function getGeometry(name){if(geometries[name]===undefined){console.warn('THREE.ObjectLoader: Undefined geometry',name);}return geometries[name];}function getMaterial(name){if(name===undefined)return undefined;if(Array.isArray(name)){var array=[];for(var i=0,l=name.length;i<l;i++){var uuid=name[i];if(materials[uuid]===undefined){console.warn('THREE.ObjectLoader: Undefined material',uuid);}array.push(materials[uuid]);}return array;}if(materials[name]===undefined){console.warn('THREE.ObjectLoader: Undefined material',name);}return materials[name];}switch(data.type){case'Scene':object=new Scene();if(data.background!==undefined){if(Number.isInteger(data.background)){object.background=new Color(data.background);}}if(data.fog!==undefined){if(data.fog.type==='Fog'){object.fog=new Fog(data.fog.color,data.fog.near,data.fog.far);}else if(data.fog.type==='FogExp2'){object.fog=new FogExp2(data.fog.color,data.fog.density);}}break;case'PerspectiveCamera':object=new PerspectiveCamera(data.fov,data.aspect,data.near,data.far);if(data.focus!==undefined)object.focus=data.focus;if(data.zoom!==undefined)object.zoom=data.zoom;if(data.filmGauge!==undefined)object.filmGauge=data.filmGauge;if(data.filmOffset!==undefined)object.filmOffset=data.filmOffset;if(data.view!==undefined)object.view=Object.assign({},data.view);break;case'OrthographicCamera':object=new OrthographicCamera(data.left,data.right,data.top,data.bottom,data.near,data.far);if(data.zoom!==undefined)object.zoom=data.zoom;if(data.view!==undefined)object.view=Object.assign({},data.view);break;case'AmbientLight':object=new AmbientLight(data.color,data.intensity);break;case'DirectionalLight':object=new DirectionalLight(data.color,data.intensity);break;case'PointLight':object=new PointLight(data.color,data.intensity,data.distance,data.decay);break;case'RectAreaLight':object=new RectAreaLight(data.color,data.intensity,data.width,data.height);break;case'SpotLight':object=new SpotLight(data.color,data.intensity,data.distance,data.angle,data.penumbra,data.decay);break;case'HemisphereLight':object=new HemisphereLight(data.color,data.groundColor,data.intensity);break;case'SkinnedMesh':console.warn('THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.');case'Mesh':var geometry=getGeometry(data.geometry);var material=getMaterial(data.material);if(geometry.bones&&geometry.bones.length>0){object=new SkinnedMesh(geometry,material);}else{object=new Mesh(geometry,material);}break;case'LOD':object=new LOD();break;case'Line':object=new Line(getGeometry(data.geometry),getMaterial(data.material),data.mode);break;case'LineLoop':object=new LineLoop(getGeometry(data.geometry),getMaterial(data.material));break;case'LineSegments':object=new LineSegments(getGeometry(data.geometry),getMaterial(data.material));break;case'PointCloud':case'Points':object=new Points(getGeometry(data.geometry),getMaterial(data.material));break;case'Sprite':object=new Sprite(getMaterial(data.material));break;case'Group':object=new Group();break;default:object=new Object3D();}object.uuid=data.uuid;if(data.name!==undefined)object.name=data.name;if(data.matrix!==undefined){object.matrix.fromArray(data.matrix);if(data.matrixAutoUpdate!==undefined)object.matrixAutoUpdate=data.matrixAutoUpdate;if(object.matrixAutoUpdate)object.matrix.decompose(object.position,object.quaternion,object.scale);}else{if(data.position!==undefined)object.position.fromArray(data.position);if(data.rotation!==undefined)object.rotation.fromArray(data.rotation);if(data.quaternion!==undefined)object.quaternion.fromArray(data.quaternion);if(data.scale!==undefined)object.scale.fromArray(data.scale);}if(data.castShadow!==undefined)object.castShadow=data.castShadow;if(data.receiveShadow!==undefined)object.receiveShadow=data.receiveShadow;if(data.shadow){if(data.shadow.bias!==undefined)object.shadow.bias=data.shadow.bias;if(data.shadow.radius!==undefined)object.shadow.radius=data.shadow.radius;if(data.shadow.mapSize!==undefined)object.shadow.mapSize.fromArray(data.shadow.mapSize);if(data.shadow.camera!==undefined)object.shadow.camera=this.parseObject(data.shadow.camera);}if(data.visible!==undefined)object.visible=data.visible;if(data.frustumCulled!==undefined)object.frustumCulled=data.frustumCulled;if(data.renderOrder!==undefined)object.renderOrder=data.renderOrder;if(data.userData!==undefined)object.userData=data.userData;if(data.layers!==undefined)object.layers.mask=data.layers;if(data.children!==undefined){var children=data.children;for(var i=0;i<children.length;i++){object.add(this.parseObject(children[i],geometries,materials));}}if(data.type==='LOD'){var levels=data.levels;for(var l=0;l<levels.length;l++){var level=levels[l];var child=object.getObjectByProperty('uuid',level.object);if(child!==undefined){object.addLevel(child,level.distance);}}}return object;}});var TEXTURE_MAPPING={UVMapping:UVMapping,CubeReflectionMapping:CubeReflectionMapping,CubeRefractionMapping:CubeRefractionMapping,EquirectangularReflectionMapping:EquirectangularReflectionMapping,EquirectangularRefractionMapping:EquirectangularRefractionMapping,SphericalReflectionMapping:SphericalReflectionMapping,CubeUVReflectionMapping:CubeUVReflectionMapping,CubeUVRefractionMapping:CubeUVRefractionMapping};var TEXTURE_WRAPPING={RepeatWrapping:RepeatWrapping,ClampToEdgeWrapping:ClampToEdgeWrapping,MirroredRepeatWrapping:MirroredRepeatWrapping};var TEXTURE_FILTER={NearestFilter:NearestFilter,NearestMipMapNearestFilter:NearestMipMapNearestFilter,NearestMipMapLinearFilter:NearestMipMapLinearFilter,LinearFilter:LinearFilter,LinearMipMapNearestFilter:LinearMipMapNearestFilter,LinearMipMapLinearFilter:LinearMipMapLinearFilter};/**
	 * @author thespite / http://clicktorelease.com/
	 */function ImageBitmapLoader(manager){if(typeof createImageBitmap==='undefined'){console.warn('THREE.ImageBitmapLoader: createImageBitmap() not supported.');}if(typeof fetch==='undefined'){console.warn('THREE.ImageBitmapLoader: fetch() not supported.');}this.manager=manager!==undefined?manager:DefaultLoadingManager;this.options=undefined;}ImageBitmapLoader.prototype={constructor:ImageBitmapLoader,setOptions:function setOptions(options){this.options=options;return this;},load:function load(url,onLoad,onProgress,onError){if(url===undefined)url='';if(this.path!==undefined)url=this.path+url;url=this.manager.resolveURL(url);var scope=this;var cached=Cache.get(url);if(cached!==undefined){scope.manager.itemStart(url);setTimeout(function(){if(onLoad)onLoad(cached);scope.manager.itemEnd(url);},0);return cached;}fetch(url).then(function(res){return res.blob();}).then(function(blob){return createImageBitmap(blob,scope.options);}).then(function(imageBitmap){Cache.add(url,imageBitmap);if(onLoad)onLoad(imageBitmap);scope.manager.itemEnd(url);}).catch(function(e){if(onError)onError(e);scope.manager.itemEnd(url);scope.manager.itemError(url);});},setCrossOrigin:function setCrossOrigin()/* value */{return this;},setPath:function setPath(value){this.path=value;return this;}};/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * minimal class for proxing functions to Path. Replaces old "extractSubpaths()"
	 **/function ShapePath(){this.type='ShapePath';this.color=new Color();this.subPaths=[];this.currentPath=null;}Object.assign(ShapePath.prototype,{moveTo:function moveTo(x,y){this.currentPath=new Path();this.subPaths.push(this.currentPath);this.currentPath.moveTo(x,y);},lineTo:function lineTo(x,y){this.currentPath.lineTo(x,y);},quadraticCurveTo:function quadraticCurveTo(aCPx,aCPy,aX,aY){this.currentPath.quadraticCurveTo(aCPx,aCPy,aX,aY);},bezierCurveTo:function bezierCurveTo(aCP1x,aCP1y,aCP2x,aCP2y,aX,aY){this.currentPath.bezierCurveTo(aCP1x,aCP1y,aCP2x,aCP2y,aX,aY);},splineThru:function splineThru(pts){this.currentPath.splineThru(pts);},toShapes:function toShapes(isCCW,noHoles){function toShapesNoHoles(inSubpaths){var shapes=[];for(var i=0,l=inSubpaths.length;i<l;i++){var tmpPath=inSubpaths[i];var tmpShape=new Shape();tmpShape.curves=tmpPath.curves;shapes.push(tmpShape);}return shapes;}function isPointInsidePolygon(inPt,inPolygon){var polyLen=inPolygon.length;// inPt on polygon contour => immediate success    or
// toggling of inside/outside at every single! intersection point of an edge
//  with the horizontal line through inPt, left of inPt
//  not counting lowerY endpoints of edges and whole edges on that line
var inside=false;for(var p=polyLen-1,q=0;q<polyLen;p=q++){var edgeLowPt=inPolygon[p];var edgeHighPt=inPolygon[q];var edgeDx=edgeHighPt.x-edgeLowPt.x;var edgeDy=edgeHighPt.y-edgeLowPt.y;if(Math.abs(edgeDy)>Number.EPSILON){// not parallel
if(edgeDy<0){edgeLowPt=inPolygon[q];edgeDx=-edgeDx;edgeHighPt=inPolygon[p];edgeDy=-edgeDy;}if(inPt.y<edgeLowPt.y||inPt.y>edgeHighPt.y)continue;if(inPt.y===edgeLowPt.y){if(inPt.x===edgeLowPt.x)return true;// inPt is on contour ?
// continue;				// no intersection or edgeLowPt => doesn't count !!!
}else{var perpEdge=edgeDy*(inPt.x-edgeLowPt.x)-edgeDx*(inPt.y-edgeLowPt.y);if(perpEdge===0)return true;// inPt is on contour ?
if(perpEdge<0)continue;inside=!inside;// true intersection left of inPt
}}else{// parallel or collinear
if(inPt.y!==edgeLowPt.y)continue;// parallel
// edge lies on the same horizontal line as inPt
if(edgeHighPt.x<=inPt.x&&inPt.x<=edgeLowPt.x||edgeLowPt.x<=inPt.x&&inPt.x<=edgeHighPt.x)return true;// inPt: Point on contour !
// continue;
}}return inside;}var isClockWise=ShapeUtils.isClockWise;var subPaths=this.subPaths;if(subPaths.length===0)return[];if(noHoles===true)return toShapesNoHoles(subPaths);var solid,tmpPath,tmpShape,shapes=[];if(subPaths.length===1){tmpPath=subPaths[0];tmpShape=new Shape();tmpShape.curves=tmpPath.curves;shapes.push(tmpShape);return shapes;}var holesFirst=!isClockWise(subPaths[0].getPoints());holesFirst=isCCW?!holesFirst:holesFirst;// console.log("Holes first", holesFirst);
var betterShapeHoles=[];var newShapes=[];var newShapeHoles=[];var mainIdx=0;var tmpPoints;newShapes[mainIdx]=undefined;newShapeHoles[mainIdx]=[];for(var i=0,l=subPaths.length;i<l;i++){tmpPath=subPaths[i];tmpPoints=tmpPath.getPoints();solid=isClockWise(tmpPoints);solid=isCCW?!solid:solid;if(solid){if(!holesFirst&&newShapes[mainIdx])mainIdx++;newShapes[mainIdx]={s:new Shape(),p:tmpPoints};newShapes[mainIdx].s.curves=tmpPath.curves;if(holesFirst)mainIdx++;newShapeHoles[mainIdx]=[];//console.log('cw', i);
}else{newShapeHoles[mainIdx].push({h:tmpPath,p:tmpPoints[0]});//console.log('ccw', i);
}}// only Holes? -> probably all Shapes with wrong orientation
if(!newShapes[0])return toShapesNoHoles(subPaths);if(newShapes.length>1){var ambiguous=false;var toChange=[];for(var sIdx=0,sLen=newShapes.length;sIdx<sLen;sIdx++){betterShapeHoles[sIdx]=[];}for(var sIdx=0,sLen=newShapes.length;sIdx<sLen;sIdx++){var sho=newShapeHoles[sIdx];for(var hIdx=0;hIdx<sho.length;hIdx++){var ho=sho[hIdx];var hole_unassigned=true;for(var s2Idx=0;s2Idx<newShapes.length;s2Idx++){if(isPointInsidePolygon(ho.p,newShapes[s2Idx].p)){if(sIdx!==s2Idx)toChange.push({froms:sIdx,tos:s2Idx,hole:hIdx});if(hole_unassigned){hole_unassigned=false;betterShapeHoles[s2Idx].push(ho);}else{ambiguous=true;}}}if(hole_unassigned){betterShapeHoles[sIdx].push(ho);}}}// console.log("ambiguous: ", ambiguous);
if(toChange.length>0){// console.log("to change: ", toChange);
if(!ambiguous)newShapeHoles=betterShapeHoles;}}var tmpHoles;for(var i=0,il=newShapes.length;i<il;i++){tmpShape=newShapes[i].s;shapes.push(tmpShape);tmpHoles=newShapeHoles[i];for(var j=0,jl=tmpHoles.length;j<jl;j++){tmpShape.holes.push(tmpHoles[j].h);}}//console.log("shape", shapes);
return shapes;}});/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author mrdoob / http://mrdoob.com/
	 */function Font(data){this.type='Font';this.data=data;}Object.assign(Font.prototype,{isFont:true,generateShapes:function generateShapes(text,size){if(size===undefined)size=100;var shapes=[];var paths=createPaths(text,size,this.data);for(var p=0,pl=paths.length;p<pl;p++){Array.prototype.push.apply(shapes,paths[p].toShapes());}return shapes;}});function createPaths(text,size,data){var chars=Array.from?Array.from(text):String(text).split('');// see #13988
var scale=size/data.resolution;var line_height=(data.boundingBox.yMax-data.boundingBox.yMin+data.underlineThickness)*scale;var paths=[];var offsetX=0,offsetY=0;for(var i=0;i<chars.length;i++){var char=chars[i];if(char==='\n'){offsetX=0;offsetY-=line_height;}else{var ret=createPath(char,scale,offsetX,offsetY,data);offsetX+=ret.offsetX;paths.push(ret.path);}}return paths;}function createPath(char,scale,offsetX,offsetY,data){var glyph=data.glyphs[char]||data.glyphs['?'];if(!glyph)return;var path=new ShapePath();var x,y,cpx,cpy,cpx1,cpy1,cpx2,cpy2;if(glyph.o){var outline=glyph._cachedOutline||(glyph._cachedOutline=glyph.o.split(' '));for(var i=0,l=outline.length;i<l;){var action=outline[i++];switch(action){case'm':// moveTo
x=outline[i++]*scale+offsetX;y=outline[i++]*scale+offsetY;path.moveTo(x,y);break;case'l':// lineTo
x=outline[i++]*scale+offsetX;y=outline[i++]*scale+offsetY;path.lineTo(x,y);break;case'q':// quadraticCurveTo
cpx=outline[i++]*scale+offsetX;cpy=outline[i++]*scale+offsetY;cpx1=outline[i++]*scale+offsetX;cpy1=outline[i++]*scale+offsetY;path.quadraticCurveTo(cpx1,cpy1,cpx,cpy);break;case'b':// bezierCurveTo
cpx=outline[i++]*scale+offsetX;cpy=outline[i++]*scale+offsetY;cpx1=outline[i++]*scale+offsetX;cpy1=outline[i++]*scale+offsetY;cpx2=outline[i++]*scale+offsetX;cpy2=outline[i++]*scale+offsetY;path.bezierCurveTo(cpx1,cpy1,cpx2,cpy2,cpx,cpy);break;}}}return{offsetX:glyph.ha*scale,path:path};}/**
	 * @author mrdoob / http://mrdoob.com/
	 */function FontLoader(manager){this.manager=manager!==undefined?manager:DefaultLoadingManager;}Object.assign(FontLoader.prototype,{load:function load(url,onLoad,onProgress,onError){var scope=this;var loader=new FileLoader(this.manager);loader.setPath(this.path);loader.load(url,function(text){var json;try{json=JSON.parse(text);}catch(e){console.warn('THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.');json=JSON.parse(text.substring(65,text.length-2));}var font=scope.parse(json);if(onLoad)onLoad(font);},onProgress,onError);},parse:function parse(json){return new Font(json);},setPath:function setPath(value){this.path=value;return this;}});/**
	 * @author mrdoob / http://mrdoob.com/
	 */var context;var AudioContext={getContext:function getContext(){if(context===undefined){context=new(window.AudioContext||window.webkitAudioContext)();}return context;},setContext:function setContext(value){context=value;}};/**
	 * @author Reece Aaron Lecrivain / http://reecenotes.com/
	 */function AudioLoader(manager){this.manager=manager!==undefined?manager:DefaultLoadingManager;}Object.assign(AudioLoader.prototype,{load:function load(url,onLoad,onProgress,onError){var loader=new FileLoader(this.manager);loader.setResponseType('arraybuffer');loader.load(url,function(buffer){// Create a copy of the buffer. The `decodeAudioData` method
// detaches the buffer when complete, preventing reuse.
var bufferCopy=buffer.slice(0);var context=AudioContext.getContext();context.decodeAudioData(bufferCopy,function(audioBuffer){onLoad(audioBuffer);});},onProgress,onError);}});/**
	 * @author mrdoob / http://mrdoob.com/
	 */function StereoCamera(){this.type='StereoCamera';this.aspect=1;this.eyeSep=0.064;this.cameraL=new PerspectiveCamera();this.cameraL.layers.enable(1);this.cameraL.matrixAutoUpdate=false;this.cameraR=new PerspectiveCamera();this.cameraR.layers.enable(2);this.cameraR.matrixAutoUpdate=false;}Object.assign(StereoCamera.prototype,{update:function(){var instance,focus,fov,aspect,near,far,zoom,eyeSep;var eyeRight=new Matrix4();var eyeLeft=new Matrix4();return function update(camera){var needsUpdate=instance!==this||focus!==camera.focus||fov!==camera.fov||aspect!==camera.aspect*this.aspect||near!==camera.near||far!==camera.far||zoom!==camera.zoom||eyeSep!==this.eyeSep;if(needsUpdate){instance=this;focus=camera.focus;fov=camera.fov;aspect=camera.aspect*this.aspect;near=camera.near;far=camera.far;zoom=camera.zoom;// Off-axis stereoscopic effect based on
// http://paulbourke.net/stereographics/stereorender/
var projectionMatrix=camera.projectionMatrix.clone();eyeSep=this.eyeSep/2;var eyeSepOnProjection=eyeSep*near/focus;var ymax=near*Math.tan(_Math.DEG2RAD*fov*0.5)/zoom;var xmin,xmax;// translate xOffset
eyeLeft.elements[12]=-eyeSep;eyeRight.elements[12]=eyeSep;// for left eye
xmin=-ymax*aspect+eyeSepOnProjection;xmax=ymax*aspect+eyeSepOnProjection;projectionMatrix.elements[0]=2*near/(xmax-xmin);projectionMatrix.elements[8]=(xmax+xmin)/(xmax-xmin);this.cameraL.projectionMatrix.copy(projectionMatrix);// for right eye
xmin=-ymax*aspect-eyeSepOnProjection;xmax=ymax*aspect-eyeSepOnProjection;projectionMatrix.elements[0]=2*near/(xmax-xmin);projectionMatrix.elements[8]=(xmax+xmin)/(xmax-xmin);this.cameraR.projectionMatrix.copy(projectionMatrix);}this.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(eyeLeft);this.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(eyeRight);};}()});/**
	 * Camera for rendering cube maps
	 *	- renders scene into axis-aligned cube
	 *
	 * @author alteredq / http://alteredqualia.com/
	 */function CubeCamera(near,far,cubeResolution){Object3D.call(this);this.type='CubeCamera';var fov=90,aspect=1;var cameraPX=new PerspectiveCamera(fov,aspect,near,far);cameraPX.up.set(0,-1,0);cameraPX.lookAt(new Vector3(1,0,0));this.add(cameraPX);var cameraNX=new PerspectiveCamera(fov,aspect,near,far);cameraNX.up.set(0,-1,0);cameraNX.lookAt(new Vector3(-1,0,0));this.add(cameraNX);var cameraPY=new PerspectiveCamera(fov,aspect,near,far);cameraPY.up.set(0,0,1);cameraPY.lookAt(new Vector3(0,1,0));this.add(cameraPY);var cameraNY=new PerspectiveCamera(fov,aspect,near,far);cameraNY.up.set(0,0,-1);cameraNY.lookAt(new Vector3(0,-1,0));this.add(cameraNY);var cameraPZ=new PerspectiveCamera(fov,aspect,near,far);cameraPZ.up.set(0,-1,0);cameraPZ.lookAt(new Vector3(0,0,1));this.add(cameraPZ);var cameraNZ=new PerspectiveCamera(fov,aspect,near,far);cameraNZ.up.set(0,-1,0);cameraNZ.lookAt(new Vector3(0,0,-1));this.add(cameraNZ);var options={format:RGBFormat,magFilter:LinearFilter,minFilter:LinearFilter};this.renderTarget=new WebGLRenderTargetCube(cubeResolution,cubeResolution,options);this.renderTarget.texture.name="CubeCamera";this.update=function(renderer,scene){if(this.parent===null)this.updateMatrixWorld();var renderTarget=this.renderTarget;var generateMipmaps=renderTarget.texture.generateMipmaps;renderTarget.texture.generateMipmaps=false;renderTarget.activeCubeFace=0;renderer.render(scene,cameraPX,renderTarget);renderTarget.activeCubeFace=1;renderer.render(scene,cameraNX,renderTarget);renderTarget.activeCubeFace=2;renderer.render(scene,cameraPY,renderTarget);renderTarget.activeCubeFace=3;renderer.render(scene,cameraNY,renderTarget);renderTarget.activeCubeFace=4;renderer.render(scene,cameraPZ,renderTarget);renderTarget.texture.generateMipmaps=generateMipmaps;renderTarget.activeCubeFace=5;renderer.render(scene,cameraNZ,renderTarget);renderer.setRenderTarget(null);};this.clear=function(renderer,color,depth,stencil){var renderTarget=this.renderTarget;for(var i=0;i<6;i++){renderTarget.activeCubeFace=i;renderer.setRenderTarget(renderTarget);renderer.clear(color,depth,stencil);}renderer.setRenderTarget(null);};}CubeCamera.prototype=Object.create(Object3D.prototype);CubeCamera.prototype.constructor=CubeCamera;/**
	 * @author mrdoob / http://mrdoob.com/
	 */function AudioListener(){Object3D.call(this);this.type='AudioListener';this.context=AudioContext.getContext();this.gain=this.context.createGain();this.gain.connect(this.context.destination);this.filter=null;}AudioListener.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:AudioListener,getInput:function getInput(){return this.gain;},removeFilter:function removeFilter(){if(this.filter!==null){this.gain.disconnect(this.filter);this.filter.disconnect(this.context.destination);this.gain.connect(this.context.destination);this.filter=null;}return this;},getFilter:function getFilter(){return this.filter;},setFilter:function setFilter(value){if(this.filter!==null){this.gain.disconnect(this.filter);this.filter.disconnect(this.context.destination);}else{this.gain.disconnect(this.context.destination);}this.filter=value;this.gain.connect(this.filter);this.filter.connect(this.context.destination);return this;},getMasterVolume:function getMasterVolume(){return this.gain.gain.value;},setMasterVolume:function setMasterVolume(value){this.gain.gain.setTargetAtTime(value,this.context.currentTime,0.01);return this;},updateMatrixWorld:function(){var position=new Vector3();var quaternion=new Quaternion();var scale=new Vector3();var orientation=new Vector3();return function updateMatrixWorld(force){Object3D.prototype.updateMatrixWorld.call(this,force);var listener=this.context.listener;var up=this.up;this.matrixWorld.decompose(position,quaternion,scale);orientation.set(0,0,-1).applyQuaternion(quaternion);if(listener.positionX){listener.positionX.setValueAtTime(position.x,this.context.currentTime);listener.positionY.setValueAtTime(position.y,this.context.currentTime);listener.positionZ.setValueAtTime(position.z,this.context.currentTime);listener.forwardX.setValueAtTime(orientation.x,this.context.currentTime);listener.forwardY.setValueAtTime(orientation.y,this.context.currentTime);listener.forwardZ.setValueAtTime(orientation.z,this.context.currentTime);listener.upX.setValueAtTime(up.x,this.context.currentTime);listener.upY.setValueAtTime(up.y,this.context.currentTime);listener.upZ.setValueAtTime(up.z,this.context.currentTime);}else{listener.setPosition(position.x,position.y,position.z);listener.setOrientation(orientation.x,orientation.y,orientation.z,up.x,up.y,up.z);}};}()});/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Reece Aaron Lecrivain / http://reecenotes.com/
	 */function Audio(listener){Object3D.call(this);this.type='Audio';this.context=listener.context;this.gain=this.context.createGain();this.gain.connect(listener.getInput());this.autoplay=false;this.buffer=null;this.detune=0;this.loop=false;this.startTime=0;this.offset=0;this.playbackRate=1;this.isPlaying=false;this.hasPlaybackControl=true;this.sourceType='empty';this.filters=[];}Audio.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Audio,getOutput:function getOutput(){return this.gain;},setNodeSource:function setNodeSource(audioNode){this.hasPlaybackControl=false;this.sourceType='audioNode';this.source=audioNode;this.connect();return this;},setMediaElementSource:function setMediaElementSource(mediaElement){this.hasPlaybackControl=false;this.sourceType='mediaNode';this.source=this.context.createMediaElementSource(mediaElement);this.connect();return this;},setBuffer:function setBuffer(audioBuffer){this.buffer=audioBuffer;this.sourceType='buffer';if(this.autoplay)this.play();return this;},play:function play(){if(this.isPlaying===true){console.warn('THREE.Audio: Audio is already playing.');return;}if(this.hasPlaybackControl===false){console.warn('THREE.Audio: this Audio has no playback control.');return;}var source=this.context.createBufferSource();source.buffer=this.buffer;source.loop=this.loop;source.onended=this.onEnded.bind(this);source.playbackRate.setValueAtTime(this.playbackRate,this.startTime);this.startTime=this.context.currentTime;source.start(this.startTime,this.offset);this.isPlaying=true;this.source=source;this.setDetune(this.detune);return this.connect();},pause:function pause(){if(this.hasPlaybackControl===false){console.warn('THREE.Audio: this Audio has no playback control.');return;}if(this.isPlaying===true){this.source.stop();this.source.onended=null;this.offset+=(this.context.currentTime-this.startTime)*this.playbackRate;this.isPlaying=false;}return this;},stop:function stop(){if(this.hasPlaybackControl===false){console.warn('THREE.Audio: this Audio has no playback control.');return;}this.source.stop();this.source.onended=null;this.offset=0;this.isPlaying=false;return this;},connect:function connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(var i=1,l=this.filters.length;i<l;i++){this.filters[i-1].connect(this.filters[i]);}this.filters[this.filters.length-1].connect(this.getOutput());}else{this.source.connect(this.getOutput());}return this;},disconnect:function disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(var i=1,l=this.filters.length;i<l;i++){this.filters[i-1].disconnect(this.filters[i]);}this.filters[this.filters.length-1].disconnect(this.getOutput());}else{this.source.disconnect(this.getOutput());}return this;},getFilters:function getFilters(){return this.filters;},setFilters:function setFilters(value){if(!value)value=[];if(this.isPlaying===true){this.disconnect();this.filters=value;this.connect();}else{this.filters=value;}return this;},getFilter:function getFilter(){return this.getFilters()[0];},setFilter:function setFilter(filter){return this.setFilters(filter?[filter]:[]);},setDetune:function setDetune(value){this.detune=value;if(this.source!==undefined&&this.source.detune===undefined)return;// only set detune when available
if(this.source!==undefined&&this.isPlaying===true){this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,0.01);}return this;},getDetune:function getDetune(){return this.detune;},setPlaybackRate:function setPlaybackRate(value){if(this.hasPlaybackControl===false){console.warn('THREE.Audio: this Audio has no playback control.');return;}this.playbackRate=value;if(this.isPlaying===true){this.source.playbackRate.setValueAtTime(this.playbackRate,this.context.currentTime);}return this;},getPlaybackRate:function getPlaybackRate(){return this.playbackRate;},onEnded:function onEnded(){this.isPlaying=false;},getLoop:function getLoop(){if(this.hasPlaybackControl===false){console.warn('THREE.Audio: this Audio has no playback control.');return false;}return this.loop;},setLoop:function setLoop(value){if(this.hasPlaybackControl===false){console.warn('THREE.Audio: this Audio has no playback control.');return;}this.loop=value;if(this.isPlaying===true){this.source.loop=this.loop;}return this;},getVolume:function getVolume(){return this.gain.gain.value;},setVolume:function setVolume(value){this.gain.gain.setTargetAtTime(value,this.context.currentTime,0.01);return this;}});/**
	 * @author mrdoob / http://mrdoob.com/
	 */function PositionalAudio(listener){Audio.call(this,listener);this.panner=this.context.createPanner();this.panner.connect(this.gain);}PositionalAudio.prototype=Object.assign(Object.create(Audio.prototype),{constructor:PositionalAudio,getOutput:function getOutput(){return this.panner;},getRefDistance:function getRefDistance(){return this.panner.refDistance;},setRefDistance:function setRefDistance(value){this.panner.refDistance=value;return this;},getRolloffFactor:function getRolloffFactor(){return this.panner.rolloffFactor;},setRolloffFactor:function setRolloffFactor(value){this.panner.rolloffFactor=value;return this;},getDistanceModel:function getDistanceModel(){return this.panner.distanceModel;},setDistanceModel:function setDistanceModel(value){this.panner.distanceModel=value;return this;},getMaxDistance:function getMaxDistance(){return this.panner.maxDistance;},setMaxDistance:function setMaxDistance(value){this.panner.maxDistance=value;return this;},setDirectionalCone:function setDirectionalCone(coneInnerAngle,coneOuterAngle,coneOuterGain){this.panner.coneInnerAngle=coneInnerAngle;this.panner.coneOuterAngle=coneOuterAngle;this.panner.coneOuterGain=coneOuterGain;return this;},updateMatrixWorld:function(){var position=new Vector3();var quaternion=new Quaternion();var scale=new Vector3();var orientation=new Vector3();return function updateMatrixWorld(force){Object3D.prototype.updateMatrixWorld.call(this,force);var panner=this.panner;this.matrixWorld.decompose(position,quaternion,scale);orientation.set(0,0,1).applyQuaternion(quaternion);panner.setPosition(position.x,position.y,position.z);panner.setOrientation(orientation.x,orientation.y,orientation.z);};}()});/**
	 * @author mrdoob / http://mrdoob.com/
	 */function AudioAnalyser(audio,fftSize){this.analyser=audio.context.createAnalyser();this.analyser.fftSize=fftSize!==undefined?fftSize:2048;this.data=new Uint8Array(this.analyser.frequencyBinCount);audio.getOutput().connect(this.analyser);}Object.assign(AudioAnalyser.prototype,{getFrequencyData:function getFrequencyData(){this.analyser.getByteFrequencyData(this.data);return this.data;},getAverageFrequency:function getAverageFrequency(){var value=0,data=this.getFrequencyData();for(var i=0;i<data.length;i++){value+=data[i];}return value/data.length;}});/**
	 *
	 * Buffered scene graph property that allows weighted accumulation.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */function PropertyMixer(binding,typeName,valueSize){this.binding=binding;this.valueSize=valueSize;var bufferType=Float64Array,mixFunction;switch(typeName){case'quaternion':mixFunction=this._slerp;break;case'string':case'bool':bufferType=Array;mixFunction=this._select;break;default:mixFunction=this._lerp;}this.buffer=new bufferType(valueSize*4);// layout: [ incoming | accu0 | accu1 | orig ]
//
// interpolators can use .buffer as their .result
// the data then goes to 'incoming'
//
// 'accu0' and 'accu1' are used frame-interleaved for
// the cumulative result and are compared to detect
// changes
//
// 'orig' stores the original state of the property
this._mixBufferRegion=mixFunction;this.cumulativeWeight=0;this.useCount=0;this.referenceCount=0;}Object.assign(PropertyMixer.prototype,{// accumulate data in the 'incoming' region into 'accu<i>'
accumulate:function accumulate(accuIndex,weight){// note: happily accumulating nothing when weight = 0, the caller knows
// the weight and shouldn't have made the call in the first place
var buffer=this.buffer,stride=this.valueSize,offset=accuIndex*stride+stride,currentWeight=this.cumulativeWeight;if(currentWeight===0){// accuN := incoming * weight
for(var i=0;i!==stride;++i){buffer[offset+i]=buffer[i];}currentWeight=weight;}else{// accuN := accuN + incoming * weight
currentWeight+=weight;var mix=weight/currentWeight;this._mixBufferRegion(buffer,offset,0,mix,stride);}this.cumulativeWeight=currentWeight;},// apply the state of 'accu<i>' to the binding when accus differ
apply:function apply(accuIndex){var stride=this.valueSize,buffer=this.buffer,offset=accuIndex*stride+stride,weight=this.cumulativeWeight,binding=this.binding;this.cumulativeWeight=0;if(weight<1){// accuN := accuN + original * ( 1 - cumulativeWeight )
var originalValueOffset=stride*3;this._mixBufferRegion(buffer,offset,originalValueOffset,1-weight,stride);}for(var i=stride,e=stride+stride;i!==e;++i){if(buffer[i]!==buffer[i+stride]){// value has changed -> update scene graph
binding.setValue(buffer,offset);break;}}},// remember the state of the bound property and copy it to both accus
saveOriginalState:function saveOriginalState(){var binding=this.binding;var buffer=this.buffer,stride=this.valueSize,originalValueOffset=stride*3;binding.getValue(buffer,originalValueOffset);// accu[0..1] := orig -- initially detect changes against the original
for(var i=stride,e=originalValueOffset;i!==e;++i){buffer[i]=buffer[originalValueOffset+i%stride];}this.cumulativeWeight=0;},// apply the state previously taken via 'saveOriginalState' to the binding
restoreOriginalState:function restoreOriginalState(){var originalValueOffset=this.valueSize*3;this.binding.setValue(this.buffer,originalValueOffset);},// mix functions
_select:function _select(buffer,dstOffset,srcOffset,t,stride){if(t>=0.5){for(var i=0;i!==stride;++i){buffer[dstOffset+i]=buffer[srcOffset+i];}}},_slerp:function _slerp(buffer,dstOffset,srcOffset,t){Quaternion.slerpFlat(buffer,dstOffset,buffer,dstOffset,buffer,srcOffset,t);},_lerp:function _lerp(buffer,dstOffset,srcOffset,t,stride){var s=1-t;for(var i=0;i!==stride;++i){var j=dstOffset+i;buffer[j]=buffer[j]*s+buffer[srcOffset+i]*t;}}});/**
	 *
	 * A reference to a real property in the scene graph.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */// Characters [].:/ are reserved for track binding syntax.
var RESERVED_CHARS_RE='\\[\\]\\.:\\/';function Composite(targetGroup,path,optionalParsedPath){var parsedPath=optionalParsedPath||PropertyBinding.parseTrackName(path);this._targetGroup=targetGroup;this._bindings=targetGroup.subscribe_(path,parsedPath);}Object.assign(Composite.prototype,{getValue:function getValue(array,offset){this.bind();// bind all binding
var firstValidIndex=this._targetGroup.nCachedObjects_,binding=this._bindings[firstValidIndex];// and only call .getValue on the first
if(binding!==undefined)binding.getValue(array,offset);},setValue:function setValue(array,offset){var bindings=this._bindings;for(var i=this._targetGroup.nCachedObjects_,n=bindings.length;i!==n;++i){bindings[i].setValue(array,offset);}},bind:function bind(){var bindings=this._bindings;for(var i=this._targetGroup.nCachedObjects_,n=bindings.length;i!==n;++i){bindings[i].bind();}},unbind:function unbind(){var bindings=this._bindings;for(var i=this._targetGroup.nCachedObjects_,n=bindings.length;i!==n;++i){bindings[i].unbind();}}});function PropertyBinding(rootNode,path,parsedPath){this.path=path;this.parsedPath=parsedPath||PropertyBinding.parseTrackName(path);this.node=PropertyBinding.findNode(rootNode,this.parsedPath.nodeName)||rootNode;this.rootNode=rootNode;}Object.assign(PropertyBinding,{Composite:Composite,create:function create(root,path,parsedPath){if(!(root&&root.isAnimationObjectGroup)){return new PropertyBinding(root,path,parsedPath);}else{return new PropertyBinding.Composite(root,path,parsedPath);}},/**
		 * Replaces spaces with underscores and removes unsupported characters from
		 * node names, to ensure compatibility with parseTrackName().
		 *
		 * @param  {string} name Node name to be sanitized.
		 * @return {string}
		 */sanitizeNodeName:function(){var reservedRe=new RegExp('['+RESERVED_CHARS_RE+']','g');return function sanitizeNodeName(name){return name.replace(/\s/g,'_').replace(reservedRe,'');};}(),parseTrackName:function(){// Attempts to allow node names from any language. ES5's `\w` regexp matches
// only latin characters, and the unicode \p{L} is not yet supported. So
// instead, we exclude reserved characters and match everything else.
var wordChar='[^'+RESERVED_CHARS_RE+']';var wordCharOrDot='[^'+RESERVED_CHARS_RE.replace('\\.','')+']';// Parent directories, delimited by '/' or ':'. Currently unused, but must
// be matched to parse the rest of the track name.
var directoryRe=/((?:WC+[\/:])*)/.source.replace('WC',wordChar);// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.
var nodeRe=/(WCOD+)?/.source.replace('WCOD',wordCharOrDot);// Object on target node, and accessor. May not contain reserved
// characters. Accessor may contain any character except closing bracket.
var objectRe=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace('WC',wordChar);// Property and accessor. May not contain reserved characters. Accessor may
// contain any non-bracket characters.
var propertyRe=/\.(WC+)(?:\[(.+)\])?/.source.replace('WC',wordChar);var trackRe=new RegExp(''+'^'+directoryRe+nodeRe+objectRe+propertyRe+'$');var supportedObjectNames=['material','materials','bones'];return function parseTrackName(trackName){var matches=trackRe.exec(trackName);if(!matches){throw new Error('PropertyBinding: Cannot parse trackName: '+trackName);}var results={// directoryName: matches[ 1 ], // (tschw) currently unused
nodeName:matches[2],objectName:matches[3],objectIndex:matches[4],propertyName:matches[5],// required
propertyIndex:matches[6]};var lastDot=results.nodeName&&results.nodeName.lastIndexOf('.');if(lastDot!==undefined&&lastDot!==-1){var objectName=results.nodeName.substring(lastDot+1);// Object names must be checked against a whitelist. Otherwise, there
// is no way to parse 'foo.bar.baz': 'baz' must be a property, but
// 'bar' could be the objectName, or part of a nodeName (which can
// include '.' characters).
if(supportedObjectNames.indexOf(objectName)!==-1){results.nodeName=results.nodeName.substring(0,lastDot);results.objectName=objectName;}}if(results.propertyName===null||results.propertyName.length===0){throw new Error('PropertyBinding: can not parse propertyName from trackName: '+trackName);}return results;};}(),findNode:function findNode(root,nodeName){if(!nodeName||nodeName===""||nodeName==="root"||nodeName==="."||nodeName===-1||nodeName===root.name||nodeName===root.uuid){return root;}// search into skeleton bones.
if(root.skeleton){var bone=root.skeleton.getBoneByName(nodeName);if(bone!==undefined){return bone;}}// search into node subtree.
if(root.children){var searchNodeSubtree=function searchNodeSubtree(children){for(var i=0;i<children.length;i++){var childNode=children[i];if(childNode.name===nodeName||childNode.uuid===nodeName){return childNode;}var result=searchNodeSubtree(childNode.children);if(result)return result;}return null;};var subTreeNode=searchNodeSubtree(root.children);if(subTreeNode){return subTreeNode;}}return null;}});Object.assign(PropertyBinding.prototype,{// prototype, continued
// these are used to "bind" a nonexistent property
_getValue_unavailable:function _getValue_unavailable(){},_setValue_unavailable:function _setValue_unavailable(){},BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},GetterByBindingType:[function getValue_direct(buffer,offset){buffer[offset]=this.node[this.propertyName];},function getValue_array(buffer,offset){var source=this.resolvedProperty;for(var i=0,n=source.length;i!==n;++i){buffer[offset++]=source[i];}},function getValue_arrayElement(buffer,offset){buffer[offset]=this.resolvedProperty[this.propertyIndex];},function getValue_toArray(buffer,offset){this.resolvedProperty.toArray(buffer,offset);}],SetterByBindingTypeAndVersioning:[[// Direct
function setValue_direct(buffer,offset){this.targetObject[this.propertyName]=buffer[offset];},function setValue_direct_setNeedsUpdate(buffer,offset){this.targetObject[this.propertyName]=buffer[offset];this.targetObject.needsUpdate=true;},function setValue_direct_setMatrixWorldNeedsUpdate(buffer,offset){this.targetObject[this.propertyName]=buffer[offset];this.targetObject.matrixWorldNeedsUpdate=true;}],[// EntireArray
function setValue_array(buffer,offset){var dest=this.resolvedProperty;for(var i=0,n=dest.length;i!==n;++i){dest[i]=buffer[offset++];}},function setValue_array_setNeedsUpdate(buffer,offset){var dest=this.resolvedProperty;for(var i=0,n=dest.length;i!==n;++i){dest[i]=buffer[offset++];}this.targetObject.needsUpdate=true;},function setValue_array_setMatrixWorldNeedsUpdate(buffer,offset){var dest=this.resolvedProperty;for(var i=0,n=dest.length;i!==n;++i){dest[i]=buffer[offset++];}this.targetObject.matrixWorldNeedsUpdate=true;}],[// ArrayElement
function setValue_arrayElement(buffer,offset){this.resolvedProperty[this.propertyIndex]=buffer[offset];},function setValue_arrayElement_setNeedsUpdate(buffer,offset){this.resolvedProperty[this.propertyIndex]=buffer[offset];this.targetObject.needsUpdate=true;},function setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer,offset){this.resolvedProperty[this.propertyIndex]=buffer[offset];this.targetObject.matrixWorldNeedsUpdate=true;}],[// HasToFromArray
function setValue_fromArray(buffer,offset){this.resolvedProperty.fromArray(buffer,offset);},function setValue_fromArray_setNeedsUpdate(buffer,offset){this.resolvedProperty.fromArray(buffer,offset);this.targetObject.needsUpdate=true;},function setValue_fromArray_setMatrixWorldNeedsUpdate(buffer,offset){this.resolvedProperty.fromArray(buffer,offset);this.targetObject.matrixWorldNeedsUpdate=true;}]],getValue:function getValue_unbound(targetArray,offset){this.bind();this.getValue(targetArray,offset);// Note: This class uses a State pattern on a per-method basis:
// 'bind' sets 'this.getValue' / 'setValue' and shadows the
// prototype version of these methods with one that represents
// the bound state. When the property is not found, the methods
// become no-ops.
},setValue:function getValue_unbound(sourceArray,offset){this.bind();this.setValue(sourceArray,offset);},// create getter / setter pair for a property in the scene graph
bind:function bind(){var targetObject=this.node,parsedPath=this.parsedPath,objectName=parsedPath.objectName,propertyName=parsedPath.propertyName,propertyIndex=parsedPath.propertyIndex;if(!targetObject){targetObject=PropertyBinding.findNode(this.rootNode,parsedPath.nodeName)||this.rootNode;this.node=targetObject;}// set fail state so we can just 'return' on error
this.getValue=this._getValue_unavailable;this.setValue=this._setValue_unavailable;// ensure there is a value node
if(!targetObject){console.error('THREE.PropertyBinding: Trying to update node for track: '+this.path+' but it wasn\'t found.');return;}if(objectName){var objectIndex=parsedPath.objectIndex;// special cases were we need to reach deeper into the hierarchy to get the face materials....
switch(objectName){case'materials':if(!targetObject.material){console.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.',this);return;}if(!targetObject.material.materials){console.error('THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.',this);return;}targetObject=targetObject.material.materials;break;case'bones':if(!targetObject.skeleton){console.error('THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.',this);return;}// potential future optimization: skip this if propertyIndex is already an integer
// and convert the integer string to a true integer.
targetObject=targetObject.skeleton.bones;// support resolving morphTarget names into indices.
for(var i=0;i<targetObject.length;i++){if(targetObject[i].name===objectIndex){objectIndex=i;break;}}break;default:if(targetObject[objectName]===undefined){console.error('THREE.PropertyBinding: Can not bind to objectName of node undefined.',this);return;}targetObject=targetObject[objectName];}if(objectIndex!==undefined){if(targetObject[objectIndex]===undefined){console.error('THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.',this,targetObject);return;}targetObject=targetObject[objectIndex];}}// resolve property
var nodeProperty=targetObject[propertyName];if(nodeProperty===undefined){var nodeName=parsedPath.nodeName;console.error('THREE.PropertyBinding: Trying to update property for track: '+nodeName+'.'+propertyName+' but it wasn\'t found.',targetObject);return;}// determine versioning scheme
var versioning=this.Versioning.None;this.targetObject=targetObject;if(targetObject.needsUpdate!==undefined){// material
versioning=this.Versioning.NeedsUpdate;}else if(targetObject.matrixWorldNeedsUpdate!==undefined){// node transform
versioning=this.Versioning.MatrixWorldNeedsUpdate;}// determine how the property gets bound
var bindingType=this.BindingType.Direct;if(propertyIndex!==undefined){// access a sub element of the property array (only primitives are supported right now)
if(propertyName==="morphTargetInfluences"){// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.
// support resolving morphTarget names into indices.
if(!targetObject.geometry){console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.',this);return;}if(targetObject.geometry.isBufferGeometry){if(!targetObject.geometry.morphAttributes){console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.',this);return;}for(var i=0;i<this.node.geometry.morphAttributes.position.length;i++){if(targetObject.geometry.morphAttributes.position[i].name===propertyIndex){propertyIndex=i;break;}}}else{if(!targetObject.geometry.morphTargets){console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.',this);return;}for(var i=0;i<this.node.geometry.morphTargets.length;i++){if(targetObject.geometry.morphTargets[i].name===propertyIndex){propertyIndex=i;break;}}}}bindingType=this.BindingType.ArrayElement;this.resolvedProperty=nodeProperty;this.propertyIndex=propertyIndex;}else if(nodeProperty.fromArray!==undefined&&nodeProperty.toArray!==undefined){// must use copy for Object3D.Euler/Quaternion
bindingType=this.BindingType.HasFromToArray;this.resolvedProperty=nodeProperty;}else if(Array.isArray(nodeProperty)){bindingType=this.BindingType.EntireArray;this.resolvedProperty=nodeProperty;}else{this.propertyName=propertyName;}// select getter / setter
this.getValue=this.GetterByBindingType[bindingType];this.setValue=this.SetterByBindingTypeAndVersioning[bindingType][versioning];},unbind:function unbind(){this.node=null;// back to the prototype version of getValue / setValue
// note: avoiding to mutate the shape of 'this' via 'delete'
this.getValue=this._getValue_unbound;this.setValue=this._setValue_unbound;}});//!\ DECLARE ALIAS AFTER assign prototype !
Object.assign(PropertyBinding.prototype,{// initial state of these methods that calls 'bind'
_getValue_unbound:PropertyBinding.prototype.getValue,_setValue_unbound:PropertyBinding.prototype.setValue});/**
	 *
	 * A group of objects that receives a shared animation state.
	 *
	 * Usage:
	 *
	 * 	-	Add objects you would otherwise pass as 'root' to the
	 * 		constructor or the .clipAction method of AnimationMixer.
	 *
	 * 	-	Instead pass this object as 'root'.
	 *
	 * 	-	You can also add and remove objects later when the mixer
	 * 		is running.
	 *
	 * Note:
	 *
	 *  	Objects of this class appear as one object to the mixer,
	 *  	so cache control of the individual objects must be done
	 *  	on the group.
	 *
	 * Limitation:
	 *
	 * 	- 	The animated properties must be compatible among the
	 * 		all objects in the group.
	 *
	 *  -	A single property can either be controlled through a
	 *  	target group or directly, but not both.
	 *
	 * @author tschw
	 */function AnimationObjectGroup(){this.uuid=_Math.generateUUID();// cached objects followed by the active ones
this._objects=Array.prototype.slice.call(arguments);this.nCachedObjects_=0;// threshold
// note: read by PropertyBinding.Composite
var indices={};this._indicesByUUID=indices;// for bookkeeping
for(var i=0,n=arguments.length;i!==n;++i){indices[arguments[i].uuid]=i;}this._paths=[];// inside: string
this._parsedPaths=[];// inside: { we don't care, here }
this._bindings=[];// inside: Array< PropertyBinding >
this._bindingsIndicesByPath={};// inside: indices in these arrays
var scope=this;this.stats={objects:{get total(){return scope._objects.length;},get inUse(){return this.total-scope.nCachedObjects_;}},get bindingsPerObject(){return scope._bindings.length;}};}Object.assign(AnimationObjectGroup.prototype,{isAnimationObjectGroup:true,add:function add(){var objects=this._objects,nObjects=objects.length,nCachedObjects=this.nCachedObjects_,indicesByUUID=this._indicesByUUID,paths=this._paths,parsedPaths=this._parsedPaths,bindings=this._bindings,nBindings=bindings.length,knownObject=undefined;for(var i=0,n=arguments.length;i!==n;++i){var object=arguments[i],uuid=object.uuid,index=indicesByUUID[uuid];if(index===undefined){// unknown object -> add it to the ACTIVE region
index=nObjects++;indicesByUUID[uuid]=index;objects.push(object);// accounting is done, now do the same for all bindings
for(var j=0,m=nBindings;j!==m;++j){bindings[j].push(new PropertyBinding(object,paths[j],parsedPaths[j]));}}else if(index<nCachedObjects){knownObject=objects[index];// move existing object to the ACTIVE region
var firstActiveIndex=--nCachedObjects,lastCachedObject=objects[firstActiveIndex];indicesByUUID[lastCachedObject.uuid]=index;objects[index]=lastCachedObject;indicesByUUID[uuid]=firstActiveIndex;objects[firstActiveIndex]=object;// accounting is done, now do the same for all bindings
for(var j=0,m=nBindings;j!==m;++j){var bindingsForPath=bindings[j],lastCached=bindingsForPath[firstActiveIndex],binding=bindingsForPath[index];bindingsForPath[index]=lastCached;if(binding===undefined){// since we do not bother to create new bindings
// for objects that are cached, the binding may
// or may not exist
binding=new PropertyBinding(object,paths[j],parsedPaths[j]);}bindingsForPath[firstActiveIndex]=binding;}}else if(objects[index]!==knownObject){console.error('THREE.AnimationObjectGroup: Different objects with the same UUID '+'detected. Clean the caches or recreate your infrastructure when reloading scenes.');}// else the object is already where we want it to be
}// for arguments
this.nCachedObjects_=nCachedObjects;},remove:function remove(){var objects=this._objects,nCachedObjects=this.nCachedObjects_,indicesByUUID=this._indicesByUUID,bindings=this._bindings,nBindings=bindings.length;for(var i=0,n=arguments.length;i!==n;++i){var object=arguments[i],uuid=object.uuid,index=indicesByUUID[uuid];if(index!==undefined&&index>=nCachedObjects){// move existing object into the CACHED region
var lastCachedIndex=nCachedObjects++,firstActiveObject=objects[lastCachedIndex];indicesByUUID[firstActiveObject.uuid]=index;objects[index]=firstActiveObject;indicesByUUID[uuid]=lastCachedIndex;objects[lastCachedIndex]=object;// accounting is done, now do the same for all bindings
for(var j=0,m=nBindings;j!==m;++j){var bindingsForPath=bindings[j],firstActive=bindingsForPath[lastCachedIndex],binding=bindingsForPath[index];bindingsForPath[index]=firstActive;bindingsForPath[lastCachedIndex]=binding;}}}// for arguments
this.nCachedObjects_=nCachedObjects;},// remove & forget
uncache:function uncache(){var objects=this._objects,nObjects=objects.length,nCachedObjects=this.nCachedObjects_,indicesByUUID=this._indicesByUUID,bindings=this._bindings,nBindings=bindings.length;for(var i=0,n=arguments.length;i!==n;++i){var object=arguments[i],uuid=object.uuid,index=indicesByUUID[uuid];if(index!==undefined){delete indicesByUUID[uuid];if(index<nCachedObjects){// object is cached, shrink the CACHED region
var firstActiveIndex=--nCachedObjects,lastCachedObject=objects[firstActiveIndex],lastIndex=--nObjects,lastObject=objects[lastIndex];// last cached object takes this object's place
indicesByUUID[lastCachedObject.uuid]=index;objects[index]=lastCachedObject;// last object goes to the activated slot and pop
indicesByUUID[lastObject.uuid]=firstActiveIndex;objects[firstActiveIndex]=lastObject;objects.pop();// accounting is done, now do the same for all bindings
for(var j=0,m=nBindings;j!==m;++j){var bindingsForPath=bindings[j],lastCached=bindingsForPath[firstActiveIndex],last=bindingsForPath[lastIndex];bindingsForPath[index]=lastCached;bindingsForPath[firstActiveIndex]=last;bindingsForPath.pop();}}else{// object is active, just swap with the last and pop
var lastIndex=--nObjects,lastObject=objects[lastIndex];indicesByUUID[lastObject.uuid]=index;objects[index]=lastObject;objects.pop();// accounting is done, now do the same for all bindings
for(var j=0,m=nBindings;j!==m;++j){var bindingsForPath=bindings[j];bindingsForPath[index]=bindingsForPath[lastIndex];bindingsForPath.pop();}}// cached or active
}// if object is known
}// for arguments
this.nCachedObjects_=nCachedObjects;},// Internal interface used by befriended PropertyBinding.Composite:
subscribe_:function subscribe_(path,parsedPath){// returns an array of bindings for the given path that is changed
// according to the contained objects in the group
var indicesByPath=this._bindingsIndicesByPath,index=indicesByPath[path],bindings=this._bindings;if(index!==undefined)return bindings[index];var paths=this._paths,parsedPaths=this._parsedPaths,objects=this._objects,nObjects=objects.length,nCachedObjects=this.nCachedObjects_,bindingsForPath=new Array(nObjects);index=bindings.length;indicesByPath[path]=index;paths.push(path);parsedPaths.push(parsedPath);bindings.push(bindingsForPath);for(var i=nCachedObjects,n=objects.length;i!==n;++i){var object=objects[i];bindingsForPath[i]=new PropertyBinding(object,path,parsedPath);}return bindingsForPath;},unsubscribe_:function unsubscribe_(path){// tells the group to forget about a property path and no longer
// update the array previously obtained with 'subscribe_'
var indicesByPath=this._bindingsIndicesByPath,index=indicesByPath[path];if(index!==undefined){var paths=this._paths,parsedPaths=this._parsedPaths,bindings=this._bindings,lastBindingsIndex=bindings.length-1,lastBindings=bindings[lastBindingsIndex],lastBindingsPath=path[lastBindingsIndex];indicesByPath[lastBindingsPath]=index;bindings[index]=lastBindings;bindings.pop();parsedPaths[index]=parsedPaths[lastBindingsIndex];parsedPaths.pop();paths[index]=paths[lastBindingsIndex];paths.pop();}}});/**
	 *
	 * Action provided by AnimationMixer for scheduling clip playback on specific
	 * objects.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 *
	 */function AnimationAction(mixer,clip,localRoot){this._mixer=mixer;this._clip=clip;this._localRoot=localRoot||null;var tracks=clip.tracks,nTracks=tracks.length,interpolants=new Array(nTracks);var interpolantSettings={endingStart:ZeroCurvatureEnding,endingEnd:ZeroCurvatureEnding};for(var i=0;i!==nTracks;++i){var interpolant=tracks[i].createInterpolant(null);interpolants[i]=interpolant;interpolant.settings=interpolantSettings;}this._interpolantSettings=interpolantSettings;this._interpolants=interpolants;// bound by the mixer
// inside: PropertyMixer (managed by the mixer)
this._propertyBindings=new Array(nTracks);this._cacheIndex=null;// for the memory manager
this._byClipCacheIndex=null;// for the memory manager
this._timeScaleInterpolant=null;this._weightInterpolant=null;this.loop=LoopRepeat;this._loopCount=-1;// global mixer time when the action is to be started
// it's set back to 'null' upon start of the action
this._startTime=null;// scaled local time of the action
// gets clamped or wrapped to 0..clip.duration according to loop
this.time=0;this.timeScale=1;this._effectiveTimeScale=1;this.weight=1;this._effectiveWeight=1;this.repetitions=Infinity;// no. of repetitions when looping
this.paused=false;// true -> zero effective time scale
this.enabled=true;// false -> zero effective weight
this.clampWhenFinished=false;// keep feeding the last frame?
this.zeroSlopeAtStart=true;// for smooth interpolation w/o separate
this.zeroSlopeAtEnd=true;// clips for start, loop and end
}Object.assign(AnimationAction.prototype,{// State & Scheduling
play:function play(){this._mixer._activateAction(this);return this;},stop:function stop(){this._mixer._deactivateAction(this);return this.reset();},reset:function reset(){this.paused=false;this.enabled=true;this.time=0;// restart clip
this._loopCount=-1;// forget previous loops
this._startTime=null;// forget scheduling
return this.stopFading().stopWarping();},isRunning:function isRunning(){return this.enabled&&!this.paused&&this.timeScale!==0&&this._startTime===null&&this._mixer._isActiveAction(this);},// return true when play has been called
isScheduled:function isScheduled(){return this._mixer._isActiveAction(this);},startAt:function startAt(time){this._startTime=time;return this;},setLoop:function setLoop(mode,repetitions){this.loop=mode;this.repetitions=repetitions;return this;},// Weight
// set the weight stopping any scheduled fading
// although .enabled = false yields an effective weight of zero, this
// method does *not* change .enabled, because it would be confusing
setEffectiveWeight:function setEffectiveWeight(weight){this.weight=weight;// note: same logic as when updated at runtime
this._effectiveWeight=this.enabled?weight:0;return this.stopFading();},// return the weight considering fading and .enabled
getEffectiveWeight:function getEffectiveWeight(){return this._effectiveWeight;},fadeIn:function fadeIn(duration){return this._scheduleFading(duration,0,1);},fadeOut:function fadeOut(duration){return this._scheduleFading(duration,1,0);},crossFadeFrom:function crossFadeFrom(fadeOutAction,duration,warp){fadeOutAction.fadeOut(duration);this.fadeIn(duration);if(warp){var fadeInDuration=this._clip.duration,fadeOutDuration=fadeOutAction._clip.duration,startEndRatio=fadeOutDuration/fadeInDuration,endStartRatio=fadeInDuration/fadeOutDuration;fadeOutAction.warp(1.0,startEndRatio,duration);this.warp(endStartRatio,1.0,duration);}return this;},crossFadeTo:function crossFadeTo(fadeInAction,duration,warp){return fadeInAction.crossFadeFrom(this,duration,warp);},stopFading:function stopFading(){var weightInterpolant=this._weightInterpolant;if(weightInterpolant!==null){this._weightInterpolant=null;this._mixer._takeBackControlInterpolant(weightInterpolant);}return this;},// Time Scale Control
// set the time scale stopping any scheduled warping
// although .paused = true yields an effective time scale of zero, this
// method does *not* change .paused, because it would be confusing
setEffectiveTimeScale:function setEffectiveTimeScale(timeScale){this.timeScale=timeScale;this._effectiveTimeScale=this.paused?0:timeScale;return this.stopWarping();},// return the time scale considering warping and .paused
getEffectiveTimeScale:function getEffectiveTimeScale(){return this._effectiveTimeScale;},setDuration:function setDuration(duration){this.timeScale=this._clip.duration/duration;return this.stopWarping();},syncWith:function syncWith(action){this.time=action.time;this.timeScale=action.timeScale;return this.stopWarping();},halt:function halt(duration){return this.warp(this._effectiveTimeScale,0,duration);},warp:function warp(startTimeScale,endTimeScale,duration){var mixer=this._mixer,now=mixer.time,interpolant=this._timeScaleInterpolant,timeScale=this.timeScale;if(interpolant===null){interpolant=mixer._lendControlInterpolant();this._timeScaleInterpolant=interpolant;}var times=interpolant.parameterPositions,values=interpolant.sampleValues;times[0]=now;times[1]=now+duration;values[0]=startTimeScale/timeScale;values[1]=endTimeScale/timeScale;return this;},stopWarping:function stopWarping(){var timeScaleInterpolant=this._timeScaleInterpolant;if(timeScaleInterpolant!==null){this._timeScaleInterpolant=null;this._mixer._takeBackControlInterpolant(timeScaleInterpolant);}return this;},// Object Accessors
getMixer:function getMixer(){return this._mixer;},getClip:function getClip(){return this._clip;},getRoot:function getRoot(){return this._localRoot||this._mixer._root;},// Interna
_update:function _update(time,deltaTime,timeDirection,accuIndex){// called by the mixer
if(!this.enabled){// call ._updateWeight() to update ._effectiveWeight
this._updateWeight(time);return;}var startTime=this._startTime;if(startTime!==null){// check for scheduled start of action
var timeRunning=(time-startTime)*timeDirection;if(timeRunning<0||timeDirection===0){return;// yet to come / don't decide when delta = 0
}// start
this._startTime=null;// unschedule
deltaTime=timeDirection*timeRunning;}// apply time scale and advance time
deltaTime*=this._updateTimeScale(time);var clipTime=this._updateTime(deltaTime);// note: _updateTime may disable the action resulting in
// an effective weight of 0
var weight=this._updateWeight(time);if(weight>0){var interpolants=this._interpolants;var propertyMixers=this._propertyBindings;for(var j=0,m=interpolants.length;j!==m;++j){interpolants[j].evaluate(clipTime);propertyMixers[j].accumulate(accuIndex,weight);}}},_updateWeight:function _updateWeight(time){var weight=0;if(this.enabled){weight=this.weight;var interpolant=this._weightInterpolant;if(interpolant!==null){var interpolantValue=interpolant.evaluate(time)[0];weight*=interpolantValue;if(time>interpolant.parameterPositions[1]){this.stopFading();if(interpolantValue===0){// faded out, disable
this.enabled=false;}}}}this._effectiveWeight=weight;return weight;},_updateTimeScale:function _updateTimeScale(time){var timeScale=0;if(!this.paused){timeScale=this.timeScale;var interpolant=this._timeScaleInterpolant;if(interpolant!==null){var interpolantValue=interpolant.evaluate(time)[0];timeScale*=interpolantValue;if(time>interpolant.parameterPositions[1]){this.stopWarping();if(timeScale===0){// motion has halted, pause
this.paused=true;}else{// warp done - apply final time scale
this.timeScale=timeScale;}}}}this._effectiveTimeScale=timeScale;return timeScale;},_updateTime:function _updateTime(deltaTime){var time=this.time+deltaTime;var duration=this._clip.duration;var loop=this.loop;var loopCount=this._loopCount;var pingPong=loop===LoopPingPong;if(deltaTime===0){if(loopCount===-1)return time;return pingPong&&(loopCount&1)===1?duration-time:time;}if(loop===LoopOnce){if(loopCount===-1){// just started
this._loopCount=0;this._setEndings(true,true,false);}handle_stop:{if(time>=duration){time=duration;}else if(time<0){time=0;}else break handle_stop;if(this.clampWhenFinished)this.paused=true;else this.enabled=false;this._mixer.dispatchEvent({type:'finished',action:this,direction:deltaTime<0?-1:1});}}else{// repetitive Repeat or PingPong
if(loopCount===-1){// just started
if(deltaTime>=0){loopCount=0;this._setEndings(true,this.repetitions===0,pingPong);}else{// when looping in reverse direction, the initial
// transition through zero counts as a repetition,
// so leave loopCount at -1
this._setEndings(this.repetitions===0,true,pingPong);}}if(time>=duration||time<0){// wrap around
var loopDelta=Math.floor(time/duration);// signed
time-=duration*loopDelta;loopCount+=Math.abs(loopDelta);var pending=this.repetitions-loopCount;if(pending<=0){// have to stop (switch state, clamp time, fire event)
if(this.clampWhenFinished)this.paused=true;else this.enabled=false;time=deltaTime>0?duration:0;this._mixer.dispatchEvent({type:'finished',action:this,direction:deltaTime>0?1:-1});}else{// keep running
if(pending===1){// entering the last round
var atStart=deltaTime<0;this._setEndings(atStart,!atStart,pingPong);}else{this._setEndings(false,false,pingPong);}this._loopCount=loopCount;this._mixer.dispatchEvent({type:'loop',action:this,loopDelta:loopDelta});}}if(pingPong&&(loopCount&1)===1){// invert time for the "pong round"
this.time=time;return duration-time;}}this.time=time;return time;},_setEndings:function _setEndings(atStart,atEnd,pingPong){var settings=this._interpolantSettings;if(pingPong){settings.endingStart=ZeroSlopeEnding;settings.endingEnd=ZeroSlopeEnding;}else{// assuming for LoopOnce atStart == atEnd == true
if(atStart){settings.endingStart=this.zeroSlopeAtStart?ZeroSlopeEnding:ZeroCurvatureEnding;}else{settings.endingStart=WrapAroundEnding;}if(atEnd){settings.endingEnd=this.zeroSlopeAtEnd?ZeroSlopeEnding:ZeroCurvatureEnding;}else{settings.endingEnd=WrapAroundEnding;}}},_scheduleFading:function _scheduleFading(duration,weightNow,weightThen){var mixer=this._mixer,now=mixer.time,interpolant=this._weightInterpolant;if(interpolant===null){interpolant=mixer._lendControlInterpolant();this._weightInterpolant=interpolant;}var times=interpolant.parameterPositions,values=interpolant.sampleValues;times[0]=now;values[0]=weightNow;times[1]=now+duration;values[1]=weightThen;return this;}});/**
	 *
	 * Player for AnimationClips.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */function AnimationMixer(root){this._root=root;this._initMemoryManager();this._accuIndex=0;this.time=0;this.timeScale=1.0;}AnimationMixer.prototype=Object.assign(Object.create(EventDispatcher.prototype),{constructor:AnimationMixer,_bindAction:function _bindAction(action,prototypeAction){var root=action._localRoot||this._root,tracks=action._clip.tracks,nTracks=tracks.length,bindings=action._propertyBindings,interpolants=action._interpolants,rootUuid=root.uuid,bindingsByRoot=this._bindingsByRootAndName,bindingsByName=bindingsByRoot[rootUuid];if(bindingsByName===undefined){bindingsByName={};bindingsByRoot[rootUuid]=bindingsByName;}for(var i=0;i!==nTracks;++i){var track=tracks[i],trackName=track.name,binding=bindingsByName[trackName];if(binding!==undefined){bindings[i]=binding;}else{binding=bindings[i];if(binding!==undefined){// existing binding, make sure the cache knows
if(binding._cacheIndex===null){++binding.referenceCount;this._addInactiveBinding(binding,rootUuid,trackName);}continue;}var path=prototypeAction&&prototypeAction._propertyBindings[i].binding.parsedPath;binding=new PropertyMixer(PropertyBinding.create(root,trackName,path),track.ValueTypeName,track.getValueSize());++binding.referenceCount;this._addInactiveBinding(binding,rootUuid,trackName);bindings[i]=binding;}interpolants[i].resultBuffer=binding.buffer;}},_activateAction:function _activateAction(action){if(!this._isActiveAction(action)){if(action._cacheIndex===null){// this action has been forgotten by the cache, but the user
// appears to be still using it -> rebind
var rootUuid=(action._localRoot||this._root).uuid,clipUuid=action._clip.uuid,actionsForClip=this._actionsByClip[clipUuid];this._bindAction(action,actionsForClip&&actionsForClip.knownActions[0]);this._addInactiveAction(action,clipUuid,rootUuid);}var bindings=action._propertyBindings;// increment reference counts / sort out state
for(var i=0,n=bindings.length;i!==n;++i){var binding=bindings[i];if(binding.useCount++===0){this._lendBinding(binding);binding.saveOriginalState();}}this._lendAction(action);}},_deactivateAction:function _deactivateAction(action){if(this._isActiveAction(action)){var bindings=action._propertyBindings;// decrement reference counts / sort out state
for(var i=0,n=bindings.length;i!==n;++i){var binding=bindings[i];if(--binding.useCount===0){binding.restoreOriginalState();this._takeBackBinding(binding);}}this._takeBackAction(action);}},// Memory manager
_initMemoryManager:function _initMemoryManager(){this._actions=[];// 'nActiveActions' followed by inactive ones
this._nActiveActions=0;this._actionsByClip={};// inside:
// {
// 		knownActions: Array< AnimationAction >	- used as prototypes
// 		actionByRoot: AnimationAction			- lookup
// }
this._bindings=[];// 'nActiveBindings' followed by inactive ones
this._nActiveBindings=0;this._bindingsByRootAndName={};// inside: Map< name, PropertyMixer >
this._controlInterpolants=[];// same game as above
this._nActiveControlInterpolants=0;var scope=this;this.stats={actions:{get total(){return scope._actions.length;},get inUse(){return scope._nActiveActions;}},bindings:{get total(){return scope._bindings.length;},get inUse(){return scope._nActiveBindings;}},controlInterpolants:{get total(){return scope._controlInterpolants.length;},get inUse(){return scope._nActiveControlInterpolants;}}};},// Memory management for AnimationAction objects
_isActiveAction:function _isActiveAction(action){var index=action._cacheIndex;return index!==null&&index<this._nActiveActions;},_addInactiveAction:function _addInactiveAction(action,clipUuid,rootUuid){var actions=this._actions,actionsByClip=this._actionsByClip,actionsForClip=actionsByClip[clipUuid];if(actionsForClip===undefined){actionsForClip={knownActions:[action],actionByRoot:{}};action._byClipCacheIndex=0;actionsByClip[clipUuid]=actionsForClip;}else{var knownActions=actionsForClip.knownActions;action._byClipCacheIndex=knownActions.length;knownActions.push(action);}action._cacheIndex=actions.length;actions.push(action);actionsForClip.actionByRoot[rootUuid]=action;},_removeInactiveAction:function _removeInactiveAction(action){var actions=this._actions,lastInactiveAction=actions[actions.length-1],cacheIndex=action._cacheIndex;lastInactiveAction._cacheIndex=cacheIndex;actions[cacheIndex]=lastInactiveAction;actions.pop();action._cacheIndex=null;var clipUuid=action._clip.uuid,actionsByClip=this._actionsByClip,actionsForClip=actionsByClip[clipUuid],knownActionsForClip=actionsForClip.knownActions,lastKnownAction=knownActionsForClip[knownActionsForClip.length-1],byClipCacheIndex=action._byClipCacheIndex;lastKnownAction._byClipCacheIndex=byClipCacheIndex;knownActionsForClip[byClipCacheIndex]=lastKnownAction;knownActionsForClip.pop();action._byClipCacheIndex=null;var actionByRoot=actionsForClip.actionByRoot,rootUuid=(action._localRoot||this._root).uuid;delete actionByRoot[rootUuid];if(knownActionsForClip.length===0){delete actionsByClip[clipUuid];}this._removeInactiveBindingsForAction(action);},_removeInactiveBindingsForAction:function _removeInactiveBindingsForAction(action){var bindings=action._propertyBindings;for(var i=0,n=bindings.length;i!==n;++i){var binding=bindings[i];if(--binding.referenceCount===0){this._removeInactiveBinding(binding);}}},_lendAction:function _lendAction(action){// [ active actions |  inactive actions  ]
// [  active actions >| inactive actions ]
//                 s        a
//                  <-swap->
//                 a        s
var actions=this._actions,prevIndex=action._cacheIndex,lastActiveIndex=this._nActiveActions++,firstInactiveAction=actions[lastActiveIndex];action._cacheIndex=lastActiveIndex;actions[lastActiveIndex]=action;firstInactiveAction._cacheIndex=prevIndex;actions[prevIndex]=firstInactiveAction;},_takeBackAction:function _takeBackAction(action){// [  active actions  | inactive actions ]
// [ active actions |< inactive actions  ]
//        a        s
//         <-swap->
//        s        a
var actions=this._actions,prevIndex=action._cacheIndex,firstInactiveIndex=--this._nActiveActions,lastActiveAction=actions[firstInactiveIndex];action._cacheIndex=firstInactiveIndex;actions[firstInactiveIndex]=action;lastActiveAction._cacheIndex=prevIndex;actions[prevIndex]=lastActiveAction;},// Memory management for PropertyMixer objects
_addInactiveBinding:function _addInactiveBinding(binding,rootUuid,trackName){var bindingsByRoot=this._bindingsByRootAndName,bindingByName=bindingsByRoot[rootUuid],bindings=this._bindings;if(bindingByName===undefined){bindingByName={};bindingsByRoot[rootUuid]=bindingByName;}bindingByName[trackName]=binding;binding._cacheIndex=bindings.length;bindings.push(binding);},_removeInactiveBinding:function _removeInactiveBinding(binding){var bindings=this._bindings,propBinding=binding.binding,rootUuid=propBinding.rootNode.uuid,trackName=propBinding.path,bindingsByRoot=this._bindingsByRootAndName,bindingByName=bindingsByRoot[rootUuid],lastInactiveBinding=bindings[bindings.length-1],cacheIndex=binding._cacheIndex;lastInactiveBinding._cacheIndex=cacheIndex;bindings[cacheIndex]=lastInactiveBinding;bindings.pop();delete bindingByName[trackName];remove_empty_map:{for(var _ in bindingByName){break remove_empty_map;}// eslint-disable-line no-unused-vars
delete bindingsByRoot[rootUuid];}},_lendBinding:function _lendBinding(binding){var bindings=this._bindings,prevIndex=binding._cacheIndex,lastActiveIndex=this._nActiveBindings++,firstInactiveBinding=bindings[lastActiveIndex];binding._cacheIndex=lastActiveIndex;bindings[lastActiveIndex]=binding;firstInactiveBinding._cacheIndex=prevIndex;bindings[prevIndex]=firstInactiveBinding;},_takeBackBinding:function _takeBackBinding(binding){var bindings=this._bindings,prevIndex=binding._cacheIndex,firstInactiveIndex=--this._nActiveBindings,lastActiveBinding=bindings[firstInactiveIndex];binding._cacheIndex=firstInactiveIndex;bindings[firstInactiveIndex]=binding;lastActiveBinding._cacheIndex=prevIndex;bindings[prevIndex]=lastActiveBinding;},// Memory management of Interpolants for weight and time scale
_lendControlInterpolant:function _lendControlInterpolant(){var interpolants=this._controlInterpolants,lastActiveIndex=this._nActiveControlInterpolants++,interpolant=interpolants[lastActiveIndex];if(interpolant===undefined){interpolant=new LinearInterpolant(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer);interpolant.__cacheIndex=lastActiveIndex;interpolants[lastActiveIndex]=interpolant;}return interpolant;},_takeBackControlInterpolant:function _takeBackControlInterpolant(interpolant){var interpolants=this._controlInterpolants,prevIndex=interpolant.__cacheIndex,firstInactiveIndex=--this._nActiveControlInterpolants,lastActiveInterpolant=interpolants[firstInactiveIndex];interpolant.__cacheIndex=firstInactiveIndex;interpolants[firstInactiveIndex]=interpolant;lastActiveInterpolant.__cacheIndex=prevIndex;interpolants[prevIndex]=lastActiveInterpolant;},_controlInterpolantsResultBuffer:new Float32Array(1),// return an action for a clip optionally using a custom root target
// object (this method allocates a lot of dynamic memory in case a
// previously unknown clip/root combination is specified)
clipAction:function clipAction(clip,optionalRoot){var root=optionalRoot||this._root,rootUuid=root.uuid,clipObject=typeof clip==='string'?AnimationClip.findByName(root,clip):clip,clipUuid=clipObject!==null?clipObject.uuid:clip,actionsForClip=this._actionsByClip[clipUuid],prototypeAction=null;if(actionsForClip!==undefined){var existingAction=actionsForClip.actionByRoot[rootUuid];if(existingAction!==undefined){return existingAction;}// we know the clip, so we don't have to parse all
// the bindings again but can just copy
prototypeAction=actionsForClip.knownActions[0];// also, take the clip from the prototype action
if(clipObject===null)clipObject=prototypeAction._clip;}// clip must be known when specified via string
if(clipObject===null)return null;// allocate all resources required to run it
var newAction=new AnimationAction(this,clipObject,optionalRoot);this._bindAction(newAction,prototypeAction);// and make the action known to the memory manager
this._addInactiveAction(newAction,clipUuid,rootUuid);return newAction;},// get an existing action
existingAction:function existingAction(clip,optionalRoot){var root=optionalRoot||this._root,rootUuid=root.uuid,clipObject=typeof clip==='string'?AnimationClip.findByName(root,clip):clip,clipUuid=clipObject?clipObject.uuid:clip,actionsForClip=this._actionsByClip[clipUuid];if(actionsForClip!==undefined){return actionsForClip.actionByRoot[rootUuid]||null;}return null;},// deactivates all previously scheduled actions
stopAllAction:function stopAllAction(){var actions=this._actions,nActions=this._nActiveActions,bindings=this._bindings,nBindings=this._nActiveBindings;this._nActiveActions=0;this._nActiveBindings=0;for(var i=0;i!==nActions;++i){actions[i].reset();}for(var i=0;i!==nBindings;++i){bindings[i].useCount=0;}return this;},// advance the time and update apply the animation
update:function update(deltaTime){deltaTime*=this.timeScale;var actions=this._actions,nActions=this._nActiveActions,time=this.time+=deltaTime,timeDirection=Math.sign(deltaTime),accuIndex=this._accuIndex^=1;// run active actions
for(var i=0;i!==nActions;++i){var action=actions[i];action._update(time,deltaTime,timeDirection,accuIndex);}// update scene graph
var bindings=this._bindings,nBindings=this._nActiveBindings;for(var i=0;i!==nBindings;++i){bindings[i].apply(accuIndex);}return this;},// return this mixer's root target object
getRoot:function getRoot(){return this._root;},// free all resources specific to a particular clip
uncacheClip:function uncacheClip(clip){var actions=this._actions,clipUuid=clip.uuid,actionsByClip=this._actionsByClip,actionsForClip=actionsByClip[clipUuid];if(actionsForClip!==undefined){// note: just calling _removeInactiveAction would mess up the
// iteration state and also require updating the state we can
// just throw away
var actionsToRemove=actionsForClip.knownActions;for(var i=0,n=actionsToRemove.length;i!==n;++i){var action=actionsToRemove[i];this._deactivateAction(action);var cacheIndex=action._cacheIndex,lastInactiveAction=actions[actions.length-1];action._cacheIndex=null;action._byClipCacheIndex=null;lastInactiveAction._cacheIndex=cacheIndex;actions[cacheIndex]=lastInactiveAction;actions.pop();this._removeInactiveBindingsForAction(action);}delete actionsByClip[clipUuid];}},// free all resources specific to a particular root target object
uncacheRoot:function uncacheRoot(root){var rootUuid=root.uuid,actionsByClip=this._actionsByClip;for(var clipUuid in actionsByClip){var actionByRoot=actionsByClip[clipUuid].actionByRoot,action=actionByRoot[rootUuid];if(action!==undefined){this._deactivateAction(action);this._removeInactiveAction(action);}}var bindingsByRoot=this._bindingsByRootAndName,bindingByName=bindingsByRoot[rootUuid];if(bindingByName!==undefined){for(var trackName in bindingByName){var binding=bindingByName[trackName];binding.restoreOriginalState();this._removeInactiveBinding(binding);}}},// remove a targeted clip from the cache
uncacheAction:function uncacheAction(clip,optionalRoot){var action=this.existingAction(clip,optionalRoot);if(action!==null){this._deactivateAction(action);this._removeInactiveAction(action);}}});/**
	 * @author mrdoob / http://mrdoob.com/
	 */function Uniform(value){if(typeof value==='string'){console.warn('THREE.Uniform: Type parameter is no longer needed.');value=arguments[1];}this.value=value;}Uniform.prototype.clone=function(){return new Uniform(this.value.clone===undefined?this.value:this.value.clone());};/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */function InstancedBufferGeometry(){BufferGeometry.call(this);this.type='InstancedBufferGeometry';this.maxInstancedCount=undefined;}InstancedBufferGeometry.prototype=Object.assign(Object.create(BufferGeometry.prototype),{constructor:InstancedBufferGeometry,isInstancedBufferGeometry:true,copy:function copy(source){BufferGeometry.prototype.copy.call(this,source);this.maxInstancedCount=source.maxInstancedCount;return this;},clone:function clone(){return new this.constructor().copy(this);}});/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */function InstancedInterleavedBuffer(array,stride,meshPerAttribute){InterleavedBuffer.call(this,array,stride);this.meshPerAttribute=meshPerAttribute||1;}InstancedInterleavedBuffer.prototype=Object.assign(Object.create(InterleavedBuffer.prototype),{constructor:InstancedInterleavedBuffer,isInstancedInterleavedBuffer:true,copy:function copy(source){InterleavedBuffer.prototype.copy.call(this,source);this.meshPerAttribute=source.meshPerAttribute;return this;}});/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */function InstancedBufferAttribute(array,itemSize,normalized,meshPerAttribute){if(typeof normalized==='number'){meshPerAttribute=normalized;normalized=false;console.error('THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.');}BufferAttribute.call(this,array,itemSize,normalized);this.meshPerAttribute=meshPerAttribute||1;}InstancedBufferAttribute.prototype=Object.assign(Object.create(BufferAttribute.prototype),{constructor:InstancedBufferAttribute,isInstancedBufferAttribute:true,copy:function copy(source){BufferAttribute.prototype.copy.call(this,source);this.meshPerAttribute=source.meshPerAttribute;return this;}});/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author bhouston / http://clara.io/
	 * @author stephomi / http://stephaneginier.com/
	 */function Raycaster(origin,direction,near,far){this.ray=new Ray(origin,direction);// direction is assumed to be normalized (for accurate distance calculations)
this.near=near||0;this.far=far||Infinity;this.params={Mesh:{},Line:{},LOD:{},Points:{threshold:1},Sprite:{}};Object.defineProperties(this.params,{PointCloud:{get:function get(){console.warn('THREE.Raycaster: params.PointCloud has been renamed to params.Points.');return this.Points;}}});}function ascSort(a,b){return a.distance-b.distance;}function _intersectObject(object,raycaster,intersects,recursive){if(object.visible===false)return;object.raycast(raycaster,intersects);if(recursive===true){var children=object.children;for(var i=0,l=children.length;i<l;i++){_intersectObject(children[i],raycaster,intersects,true);}}}Object.assign(Raycaster.prototype,{linePrecision:1,set:function set(origin,direction){// direction is assumed to be normalized (for accurate distance calculations)
this.ray.set(origin,direction);},setFromCamera:function setFromCamera(coords,camera){if(camera&&camera.isPerspectiveCamera){this.ray.origin.setFromMatrixPosition(camera.matrixWorld);this.ray.direction.set(coords.x,coords.y,0.5).unproject(camera).sub(this.ray.origin).normalize();}else if(camera&&camera.isOrthographicCamera){this.ray.origin.set(coords.x,coords.y,(camera.near+camera.far)/(camera.near-camera.far)).unproject(camera);// set origin in plane of camera
this.ray.direction.set(0,0,-1).transformDirection(camera.matrixWorld);}else{console.error('THREE.Raycaster: Unsupported camera type.');}},intersectObject:function intersectObject(object,recursive,optionalTarget){var intersects=optionalTarget||[];_intersectObject(object,this,intersects,recursive);intersects.sort(ascSort);return intersects;},intersectObjects:function intersectObjects(objects,recursive,optionalTarget){var intersects=optionalTarget||[];if(Array.isArray(objects)===false){console.warn('THREE.Raycaster.intersectObjects: objects is not an Array.');return intersects;}for(var i=0,l=objects.length;i<l;i++){_intersectObject(objects[i],this,intersects,recursive);}intersects.sort(ascSort);return intersects;}});/**
	 * @author alteredq / http://alteredqualia.com/
	 */function Clock(autoStart){this.autoStart=autoStart!==undefined?autoStart:true;this.startTime=0;this.oldTime=0;this.elapsedTime=0;this.running=false;}Object.assign(Clock.prototype,{start:function start(){this.startTime=(typeof performance==='undefined'?Date:performance).now();// see #10732
this.oldTime=this.startTime;this.elapsedTime=0;this.running=true;},stop:function stop(){this.getElapsedTime();this.running=false;this.autoStart=false;},getElapsedTime:function getElapsedTime(){this.getDelta();return this.elapsedTime;},getDelta:function getDelta(){var diff=0;if(this.autoStart&&!this.running){this.start();return 0;}if(this.running){var newTime=(typeof performance==='undefined'?Date:performance).now();diff=(newTime-this.oldTime)/1000;this.oldTime=newTime;this.elapsedTime+=diff;}return diff;}});/**
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
	 *
	 * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.
	 * The azimuthal angle (theta) is measured from the positive z-axiz.
	 */function Spherical(radius,phi,theta){this.radius=radius!==undefined?radius:1.0;this.phi=phi!==undefined?phi:0;// polar angle
this.theta=theta!==undefined?theta:0;// azimuthal angle
return this;}Object.assign(Spherical.prototype,{set:function set(radius,phi,theta){this.radius=radius;this.phi=phi;this.theta=theta;return this;},clone:function clone(){return new this.constructor().copy(this);},copy:function copy(other){this.radius=other.radius;this.phi=other.phi;this.theta=other.theta;return this;},// restrict phi to be betwee EPS and PI-EPS
makeSafe:function makeSafe(){var EPS=0.000001;this.phi=Math.max(EPS,Math.min(Math.PI-EPS,this.phi));return this;},setFromVector3:function setFromVector3(v){return this.setFromCartesianCoords(v.x,v.y,v.z);},setFromCartesianCoords:function setFromCartesianCoords(x,y,z){this.radius=Math.sqrt(x*x+y*y+z*z);if(this.radius===0){this.theta=0;this.phi=0;}else{this.theta=Math.atan2(x,z);this.phi=Math.acos(_Math.clamp(y/this.radius,-1,1));}return this;}});/**
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system
	 *
	 */function Cylindrical(radius,theta,y){this.radius=radius!==undefined?radius:1.0;// distance from the origin to a point in the x-z plane
this.theta=theta!==undefined?theta:0;// counterclockwise angle in the x-z plane measured in radians from the positive z-axis
this.y=y!==undefined?y:0;// height above the x-z plane
return this;}Object.assign(Cylindrical.prototype,{set:function set(radius,theta,y){this.radius=radius;this.theta=theta;this.y=y;return this;},clone:function clone(){return new this.constructor().copy(this);},copy:function copy(other){this.radius=other.radius;this.theta=other.theta;this.y=other.y;return this;},setFromVector3:function setFromVector3(v){return this.setFromCartesianCoords(v.x,v.y,v.z);},setFromCartesianCoords:function setFromCartesianCoords(x,y,z){this.radius=Math.sqrt(x*x+z*z);this.theta=Math.atan2(x,z);this.y=y;return this;}});/**
	 * @author bhouston / http://clara.io
	 */function Box2(min,max){this.min=min!==undefined?min:new Vector2(+Infinity,+Infinity);this.max=max!==undefined?max:new Vector2(-Infinity,-Infinity);}Object.assign(Box2.prototype,{set:function set(min,max){this.min.copy(min);this.max.copy(max);return this;},setFromPoints:function setFromPoints(points){this.makeEmpty();for(var i=0,il=points.length;i<il;i++){this.expandByPoint(points[i]);}return this;},setFromCenterAndSize:function(){var v1=new Vector2();return function setFromCenterAndSize(center,size){var halfSize=v1.copy(size).multiplyScalar(0.5);this.min.copy(center).sub(halfSize);this.max.copy(center).add(halfSize);return this;};}(),clone:function clone(){return new this.constructor().copy(this);},copy:function copy(box){this.min.copy(box.min);this.max.copy(box.max);return this;},makeEmpty:function makeEmpty(){this.min.x=this.min.y=+Infinity;this.max.x=this.max.y=-Infinity;return this;},isEmpty:function isEmpty(){// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
return this.max.x<this.min.x||this.max.y<this.min.y;},getCenter:function getCenter(target){if(target===undefined){console.warn('THREE.Box2: .getCenter() target is now required');target=new Vector2();}return this.isEmpty()?target.set(0,0):target.addVectors(this.min,this.max).multiplyScalar(0.5);},getSize:function getSize(target){if(target===undefined){console.warn('THREE.Box2: .getSize() target is now required');target=new Vector2();}return this.isEmpty()?target.set(0,0):target.subVectors(this.max,this.min);},expandByPoint:function expandByPoint(point){this.min.min(point);this.max.max(point);return this;},expandByVector:function expandByVector(vector){this.min.sub(vector);this.max.add(vector);return this;},expandByScalar:function expandByScalar(scalar){this.min.addScalar(-scalar);this.max.addScalar(scalar);return this;},containsPoint:function containsPoint(point){return point.x<this.min.x||point.x>this.max.x||point.y<this.min.y||point.y>this.max.y?false:true;},containsBox:function containsBox(box){return this.min.x<=box.min.x&&box.max.x<=this.max.x&&this.min.y<=box.min.y&&box.max.y<=this.max.y;},getParameter:function getParameter(point,target){// This can potentially have a divide by zero if the box
// has a size dimension of 0.
if(target===undefined){console.warn('THREE.Box2: .getParameter() target is now required');target=new Vector2();}return target.set((point.x-this.min.x)/(this.max.x-this.min.x),(point.y-this.min.y)/(this.max.y-this.min.y));},intersectsBox:function intersectsBox(box){// using 4 splitting planes to rule out intersections
return box.max.x<this.min.x||box.min.x>this.max.x||box.max.y<this.min.y||box.min.y>this.max.y?false:true;},clampPoint:function clampPoint(point,target){if(target===undefined){console.warn('THREE.Box2: .clampPoint() target is now required');target=new Vector2();}return target.copy(point).clamp(this.min,this.max);},distanceToPoint:function(){var v1=new Vector2();return function distanceToPoint(point){var clampedPoint=v1.copy(point).clamp(this.min,this.max);return clampedPoint.sub(point).length();};}(),intersect:function intersect(box){this.min.max(box.min);this.max.min(box.max);return this;},union:function union(box){this.min.min(box.min);this.max.max(box.max);return this;},translate:function translate(offset){this.min.add(offset);this.max.add(offset);return this;},equals:function equals(box){return box.min.equals(this.min)&&box.max.equals(this.max);}});/**
	 * @author bhouston / http://clara.io
	 */function Line3(start,end){this.start=start!==undefined?start:new Vector3();this.end=end!==undefined?end:new Vector3();}Object.assign(Line3.prototype,{set:function set(start,end){this.start.copy(start);this.end.copy(end);return this;},clone:function clone(){return new this.constructor().copy(this);},copy:function copy(line){this.start.copy(line.start);this.end.copy(line.end);return this;},getCenter:function getCenter(target){if(target===undefined){console.warn('THREE.Line3: .getCenter() target is now required');target=new Vector3();}return target.addVectors(this.start,this.end).multiplyScalar(0.5);},delta:function delta(target){if(target===undefined){console.warn('THREE.Line3: .delta() target is now required');target=new Vector3();}return target.subVectors(this.end,this.start);},distanceSq:function distanceSq(){return this.start.distanceToSquared(this.end);},distance:function distance(){return this.start.distanceTo(this.end);},at:function at(t,target){if(target===undefined){console.warn('THREE.Line3: .at() target is now required');target=new Vector3();}return this.delta(target).multiplyScalar(t).add(this.start);},closestPointToPointParameter:function(){var startP=new Vector3();var startEnd=new Vector3();return function closestPointToPointParameter(point,clampToLine){startP.subVectors(point,this.start);startEnd.subVectors(this.end,this.start);var startEnd2=startEnd.dot(startEnd);var startEnd_startP=startEnd.dot(startP);var t=startEnd_startP/startEnd2;if(clampToLine){t=_Math.clamp(t,0,1);}return t;};}(),closestPointToPoint:function closestPointToPoint(point,clampToLine,target){var t=this.closestPointToPointParameter(point,clampToLine);if(target===undefined){console.warn('THREE.Line3: .closestPointToPoint() target is now required');target=new Vector3();}return this.delta(target).multiplyScalar(t).add(this.start);},applyMatrix4:function applyMatrix4(matrix){this.start.applyMatrix4(matrix);this.end.applyMatrix4(matrix);return this;},equals:function equals(line){return line.start.equals(this.start)&&line.end.equals(this.end);}});/**
	 * @author alteredq / http://alteredqualia.com/
	 */function ImmediateRenderObject(material){Object3D.call(this);this.material=material;this.render=function()/* renderCallback */{};}ImmediateRenderObject.prototype=Object.create(Object3D.prototype);ImmediateRenderObject.prototype.constructor=ImmediateRenderObject;ImmediateRenderObject.prototype.isImmediateRenderObject=true;/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */function VertexNormalsHelper(object,size,hex,linewidth){this.object=object;this.size=size!==undefined?size:1;var color=hex!==undefined?hex:0xff0000;var width=linewidth!==undefined?linewidth:1;//
var nNormals=0;var objGeometry=this.object.geometry;if(objGeometry&&objGeometry.isGeometry){nNormals=objGeometry.faces.length*3;}else if(objGeometry&&objGeometry.isBufferGeometry){nNormals=objGeometry.attributes.normal.count;}//
var geometry=new BufferGeometry();var positions=new Float32BufferAttribute(nNormals*2*3,3);geometry.addAttribute('position',positions);LineSegments.call(this,geometry,new LineBasicMaterial({color:color,linewidth:width}));//
this.matrixAutoUpdate=false;this.update();}VertexNormalsHelper.prototype=Object.create(LineSegments.prototype);VertexNormalsHelper.prototype.constructor=VertexNormalsHelper;VertexNormalsHelper.prototype.update=function(){var v1=new Vector3();var v2=new Vector3();var normalMatrix=new Matrix3();return function update(){var keys=['a','b','c'];this.object.updateMatrixWorld(true);normalMatrix.getNormalMatrix(this.object.matrixWorld);var matrixWorld=this.object.matrixWorld;var position=this.geometry.attributes.position;//
var objGeometry=this.object.geometry;if(objGeometry&&objGeometry.isGeometry){var vertices=objGeometry.vertices;var faces=objGeometry.faces;var idx=0;for(var i=0,l=faces.length;i<l;i++){var face=faces[i];for(var j=0,jl=face.vertexNormals.length;j<jl;j++){var vertex=vertices[face[keys[j]]];var normal=face.vertexNormals[j];v1.copy(vertex).applyMatrix4(matrixWorld);v2.copy(normal).applyMatrix3(normalMatrix).normalize().multiplyScalar(this.size).add(v1);position.setXYZ(idx,v1.x,v1.y,v1.z);idx=idx+1;position.setXYZ(idx,v2.x,v2.y,v2.z);idx=idx+1;}}}else if(objGeometry&&objGeometry.isBufferGeometry){var objPos=objGeometry.attributes.position;var objNorm=objGeometry.attributes.normal;var idx=0;// for simplicity, ignore index and drawcalls, and render every normal
for(var j=0,jl=objPos.count;j<jl;j++){v1.set(objPos.getX(j),objPos.getY(j),objPos.getZ(j)).applyMatrix4(matrixWorld);v2.set(objNorm.getX(j),objNorm.getY(j),objNorm.getZ(j));v2.applyMatrix3(normalMatrix).normalize().multiplyScalar(this.size).add(v1);position.setXYZ(idx,v1.x,v1.y,v1.z);idx=idx+1;position.setXYZ(idx,v2.x,v2.y,v2.z);idx=idx+1;}}position.needsUpdate=true;};}();/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */function SpotLightHelper(light,color){Object3D.call(this);this.light=light;this.light.updateMatrixWorld();this.matrix=light.matrixWorld;this.matrixAutoUpdate=false;this.color=color;var geometry=new BufferGeometry();var positions=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1];for(var i=0,j=1,l=32;i<l;i++,j++){var p1=i/l*Math.PI*2;var p2=j/l*Math.PI*2;positions.push(Math.cos(p1),Math.sin(p1),1,Math.cos(p2),Math.sin(p2),1);}geometry.addAttribute('position',new Float32BufferAttribute(positions,3));var material=new LineBasicMaterial({fog:false});this.cone=new LineSegments(geometry,material);this.add(this.cone);this.update();}SpotLightHelper.prototype=Object.create(Object3D.prototype);SpotLightHelper.prototype.constructor=SpotLightHelper;SpotLightHelper.prototype.dispose=function(){this.cone.geometry.dispose();this.cone.material.dispose();};SpotLightHelper.prototype.update=function(){var vector=new Vector3();var vector2=new Vector3();return function update(){this.light.updateMatrixWorld();var coneLength=this.light.distance?this.light.distance:1000;var coneWidth=coneLength*Math.tan(this.light.angle);this.cone.scale.set(coneWidth,coneWidth,coneLength);vector.setFromMatrixPosition(this.light.matrixWorld);vector2.setFromMatrixPosition(this.light.target.matrixWorld);this.cone.lookAt(vector2.sub(vector));if(this.color!==undefined){this.cone.material.color.set(this.color);}else{this.cone.material.color.copy(this.light.color);}};}();/**
	 * @author Sean Griffin / http://twitter.com/sgrif
	 * @author Michael Guerrero / http://realitymeltdown.com
	 * @author mrdoob / http://mrdoob.com/
	 * @author ikerr / http://verold.com
	 * @author Mugen87 / https://github.com/Mugen87
	 */function getBoneList(object){var boneList=[];if(object&&object.isBone){boneList.push(object);}for(var i=0;i<object.children.length;i++){boneList.push.apply(boneList,getBoneList(object.children[i]));}return boneList;}function SkeletonHelper(object){var bones=getBoneList(object);var geometry=new BufferGeometry();var vertices=[];var colors=[];var color1=new Color(0,0,1);var color2=new Color(0,1,0);for(var i=0;i<bones.length;i++){var bone=bones[i];if(bone.parent&&bone.parent.isBone){vertices.push(0,0,0);vertices.push(0,0,0);colors.push(color1.r,color1.g,color1.b);colors.push(color2.r,color2.g,color2.b);}}geometry.addAttribute('position',new Float32BufferAttribute(vertices,3));geometry.addAttribute('color',new Float32BufferAttribute(colors,3));var material=new LineBasicMaterial({vertexColors:VertexColors,depthTest:false,depthWrite:false,transparent:true});LineSegments.call(this,geometry,material);this.root=object;this.bones=bones;this.matrix=object.matrixWorld;this.matrixAutoUpdate=false;}SkeletonHelper.prototype=Object.create(LineSegments.prototype);SkeletonHelper.prototype.constructor=SkeletonHelper;SkeletonHelper.prototype.updateMatrixWorld=function(){var vector=new Vector3();var boneMatrix=new Matrix4();var matrixWorldInv=new Matrix4();return function updateMatrixWorld(force){var bones=this.bones;var geometry=this.geometry;var position=geometry.getAttribute('position');matrixWorldInv.getInverse(this.root.matrixWorld);for(var i=0,j=0;i<bones.length;i++){var bone=bones[i];if(bone.parent&&bone.parent.isBone){boneMatrix.multiplyMatrices(matrixWorldInv,bone.matrixWorld);vector.setFromMatrixPosition(boneMatrix);position.setXYZ(j,vector.x,vector.y,vector.z);boneMatrix.multiplyMatrices(matrixWorldInv,bone.parent.matrixWorld);vector.setFromMatrixPosition(boneMatrix);position.setXYZ(j+1,vector.x,vector.y,vector.z);j+=2;}}geometry.getAttribute('position').needsUpdate=true;Object3D.prototype.updateMatrixWorld.call(this,force);};}();/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */function PointLightHelper(light,sphereSize,color){this.light=light;this.light.updateMatrixWorld();this.color=color;var geometry=new SphereBufferGeometry(sphereSize,4,2);var material=new MeshBasicMaterial({wireframe:true,fog:false});Mesh.call(this,geometry,material);this.matrix=this.light.matrixWorld;this.matrixAutoUpdate=false;this.update();/*
		var distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );
		var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );

		this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
		this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );

		var d = light.distance;

		if ( d === 0.0 ) {

			this.lightDistance.visible = false;

		} else {

			this.lightDistance.scale.set( d, d, d );

		}

		this.add( this.lightDistance );
		*/}PointLightHelper.prototype=Object.create(Mesh.prototype);PointLightHelper.prototype.constructor=PointLightHelper;PointLightHelper.prototype.dispose=function(){this.geometry.dispose();this.material.dispose();};PointLightHelper.prototype.update=function(){if(this.color!==undefined){this.material.color.set(this.color);}else{this.material.color.copy(this.light.color);}/*
		var d = this.light.distance;

		if ( d === 0.0 ) {

			this.lightDistance.visible = false;

		} else {

			this.lightDistance.visible = true;
			this.lightDistance.scale.set( d, d, d );

		}
		*/};/**
	 * @author abelnation / http://github.com/abelnation
	 * @author Mugen87 / http://github.com/Mugen87
	 * @author WestLangley / http://github.com/WestLangley
	 */function RectAreaLightHelper(light,color){Object3D.call(this);this.light=light;this.light.updateMatrixWorld();this.matrix=light.matrixWorld;this.matrixAutoUpdate=false;this.color=color;var material=new LineBasicMaterial({fog:false});var geometry=new BufferGeometry();geometry.addAttribute('position',new BufferAttribute(new Float32Array(5*3),3));this.line=new Line(geometry,material);this.add(this.line);this.update();}RectAreaLightHelper.prototype=Object.create(Object3D.prototype);RectAreaLightHelper.prototype.constructor=RectAreaLightHelper;RectAreaLightHelper.prototype.dispose=function(){this.children[0].geometry.dispose();this.children[0].material.dispose();};RectAreaLightHelper.prototype.update=function(){// calculate new dimensions of the helper
var hx=this.light.width*0.5;var hy=this.light.height*0.5;var position=this.line.geometry.attributes.position;var array=position.array;// update vertices
array[0]=hx;array[1]=-hy;array[2]=0;array[3]=hx;array[4]=hy;array[5]=0;array[6]=-hx;array[7]=hy;array[8]=0;array[9]=-hx;array[10]=-hy;array[11]=0;array[12]=hx;array[13]=-hy;array[14]=0;position.needsUpdate=true;if(this.color!==undefined){this.line.material.color.set(this.color);}else{this.line.material.color.copy(this.light.color);}};/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */function HemisphereLightHelper(light,size,color){Object3D.call(this);this.light=light;this.light.updateMatrixWorld();this.matrix=light.matrixWorld;this.matrixAutoUpdate=false;this.color=color;var geometry=new OctahedronBufferGeometry(size);geometry.rotateY(Math.PI*0.5);this.material=new MeshBasicMaterial({wireframe:true,fog:false});if(this.color===undefined)this.material.vertexColors=VertexColors;var position=geometry.getAttribute('position');var colors=new Float32Array(position.count*3);geometry.addAttribute('color',new BufferAttribute(colors,3));this.add(new Mesh(geometry,this.material));this.update();}HemisphereLightHelper.prototype=Object.create(Object3D.prototype);HemisphereLightHelper.prototype.constructor=HemisphereLightHelper;HemisphereLightHelper.prototype.dispose=function(){this.children[0].geometry.dispose();this.children[0].material.dispose();};HemisphereLightHelper.prototype.update=function(){var vector=new Vector3();var color1=new Color();var color2=new Color();return function update(){var mesh=this.children[0];if(this.color!==undefined){this.material.color.set(this.color);}else{var colors=mesh.geometry.getAttribute('color');color1.copy(this.light.color);color2.copy(this.light.groundColor);for(var i=0,l=colors.count;i<l;i++){var color=i<l/2?color1:color2;colors.setXYZ(i,color.r,color.g,color.b);}colors.needsUpdate=true;}mesh.lookAt(vector.setFromMatrixPosition(this.light.matrixWorld).negate());};}();/**
	 * @author mrdoob / http://mrdoob.com/
	 */function GridHelper(size,divisions,color1,color2){size=size||10;divisions=divisions||10;color1=new Color(color1!==undefined?color1:0x444444);color2=new Color(color2!==undefined?color2:0x888888);var center=divisions/2;var step=size/divisions;var halfSize=size/2;var vertices=[],colors=[];for(var i=0,j=0,k=-halfSize;i<=divisions;i++,k+=step){vertices.push(-halfSize,0,k,halfSize,0,k);vertices.push(k,0,-halfSize,k,0,halfSize);var color=i===center?color1:color2;color.toArray(colors,j);j+=3;color.toArray(colors,j);j+=3;color.toArray(colors,j);j+=3;color.toArray(colors,j);j+=3;}var geometry=new BufferGeometry();geometry.addAttribute('position',new Float32BufferAttribute(vertices,3));geometry.addAttribute('color',new Float32BufferAttribute(colors,3));var material=new LineBasicMaterial({vertexColors:VertexColors});LineSegments.call(this,geometry,material);}GridHelper.prototype=Object.create(LineSegments.prototype);GridHelper.prototype.constructor=GridHelper;/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / http://github.com/Mugen87
	 * @author Hectate / http://www.github.com/Hectate
	 */function PolarGridHelper(radius,radials,circles,divisions,color1,color2){radius=radius||10;radials=radials||16;circles=circles||8;divisions=divisions||64;color1=new Color(color1!==undefined?color1:0x444444);color2=new Color(color2!==undefined?color2:0x888888);var vertices=[];var colors=[];var x,z;var v,i,j,r,color;// create the radials
for(i=0;i<=radials;i++){v=i/radials*(Math.PI*2);x=Math.sin(v)*radius;z=Math.cos(v)*radius;vertices.push(0,0,0);vertices.push(x,0,z);color=i&1?color1:color2;colors.push(color.r,color.g,color.b);colors.push(color.r,color.g,color.b);}// create the circles
for(i=0;i<=circles;i++){color=i&1?color1:color2;r=radius-radius/circles*i;for(j=0;j<divisions;j++){// first vertex
v=j/divisions*(Math.PI*2);x=Math.sin(v)*r;z=Math.cos(v)*r;vertices.push(x,0,z);colors.push(color.r,color.g,color.b);// second vertex
v=(j+1)/divisions*(Math.PI*2);x=Math.sin(v)*r;z=Math.cos(v)*r;vertices.push(x,0,z);colors.push(color.r,color.g,color.b);}}var geometry=new BufferGeometry();geometry.addAttribute('position',new Float32BufferAttribute(vertices,3));geometry.addAttribute('color',new Float32BufferAttribute(colors,3));var material=new LineBasicMaterial({vertexColors:VertexColors});LineSegments.call(this,geometry,material);}PolarGridHelper.prototype=Object.create(LineSegments.prototype);PolarGridHelper.prototype.constructor=PolarGridHelper;/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */function FaceNormalsHelper(object,size,hex,linewidth){// FaceNormalsHelper only supports THREE.Geometry
this.object=object;this.size=size!==undefined?size:1;var color=hex!==undefined?hex:0xffff00;var width=linewidth!==undefined?linewidth:1;//
var nNormals=0;var objGeometry=this.object.geometry;if(objGeometry&&objGeometry.isGeometry){nNormals=objGeometry.faces.length;}else{console.warn('THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.');}//
var geometry=new BufferGeometry();var positions=new Float32BufferAttribute(nNormals*2*3,3);geometry.addAttribute('position',positions);LineSegments.call(this,geometry,new LineBasicMaterial({color:color,linewidth:width}));//
this.matrixAutoUpdate=false;this.update();}FaceNormalsHelper.prototype=Object.create(LineSegments.prototype);FaceNormalsHelper.prototype.constructor=FaceNormalsHelper;FaceNormalsHelper.prototype.update=function(){var v1=new Vector3();var v2=new Vector3();var normalMatrix=new Matrix3();return function update(){this.object.updateMatrixWorld(true);normalMatrix.getNormalMatrix(this.object.matrixWorld);var matrixWorld=this.object.matrixWorld;var position=this.geometry.attributes.position;//
var objGeometry=this.object.geometry;var vertices=objGeometry.vertices;var faces=objGeometry.faces;var idx=0;for(var i=0,l=faces.length;i<l;i++){var face=faces[i];var normal=face.normal;v1.copy(vertices[face.a]).add(vertices[face.b]).add(vertices[face.c]).divideScalar(3).applyMatrix4(matrixWorld);v2.copy(normal).applyMatrix3(normalMatrix).normalize().multiplyScalar(this.size).add(v1);position.setXYZ(idx,v1.x,v1.y,v1.z);idx=idx+1;position.setXYZ(idx,v2.x,v2.y,v2.z);idx=idx+1;}position.needsUpdate=true;};}();/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */function DirectionalLightHelper(light,size,color){Object3D.call(this);this.light=light;this.light.updateMatrixWorld();this.matrix=light.matrixWorld;this.matrixAutoUpdate=false;this.color=color;if(size===undefined)size=1;var geometry=new BufferGeometry();geometry.addAttribute('position',new Float32BufferAttribute([-size,size,0,size,size,0,size,-size,0,-size,-size,0,-size,size,0],3));var material=new LineBasicMaterial({fog:false});this.lightPlane=new Line(geometry,material);this.add(this.lightPlane);geometry=new BufferGeometry();geometry.addAttribute('position',new Float32BufferAttribute([0,0,0,0,0,1],3));this.targetLine=new Line(geometry,material);this.add(this.targetLine);this.update();}DirectionalLightHelper.prototype=Object.create(Object3D.prototype);DirectionalLightHelper.prototype.constructor=DirectionalLightHelper;DirectionalLightHelper.prototype.dispose=function(){this.lightPlane.geometry.dispose();this.lightPlane.material.dispose();this.targetLine.geometry.dispose();this.targetLine.material.dispose();};DirectionalLightHelper.prototype.update=function(){var v1=new Vector3();var v2=new Vector3();var v3=new Vector3();return function update(){v1.setFromMatrixPosition(this.light.matrixWorld);v2.setFromMatrixPosition(this.light.target.matrixWorld);v3.subVectors(v2,v1);this.lightPlane.lookAt(v3);if(this.color!==undefined){this.lightPlane.material.color.set(this.color);this.targetLine.material.color.set(this.color);}else{this.lightPlane.material.color.copy(this.light.color);this.targetLine.material.color.copy(this.light.color);}this.targetLine.lookAt(v3);this.targetLine.scale.z=v3.length();};}();/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 *	- shows frustum, line of sight and up of the camera
	 *	- suitable for fast updates
	 * 	- based on frustum visualization in lightgl.js shadowmap example
	 *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
	 */function CameraHelper(camera){var geometry=new BufferGeometry();var material=new LineBasicMaterial({color:0xffffff,vertexColors:FaceColors});var vertices=[];var colors=[];var pointMap={};// colors
var colorFrustum=new Color(0xffaa00);var colorCone=new Color(0xff0000);var colorUp=new Color(0x00aaff);var colorTarget=new Color(0xffffff);var colorCross=new Color(0x333333);// near
addLine('n1','n2',colorFrustum);addLine('n2','n4',colorFrustum);addLine('n4','n3',colorFrustum);addLine('n3','n1',colorFrustum);// far
addLine('f1','f2',colorFrustum);addLine('f2','f4',colorFrustum);addLine('f4','f3',colorFrustum);addLine('f3','f1',colorFrustum);// sides
addLine('n1','f1',colorFrustum);addLine('n2','f2',colorFrustum);addLine('n3','f3',colorFrustum);addLine('n4','f4',colorFrustum);// cone
addLine('p','n1',colorCone);addLine('p','n2',colorCone);addLine('p','n3',colorCone);addLine('p','n4',colorCone);// up
addLine('u1','u2',colorUp);addLine('u2','u3',colorUp);addLine('u3','u1',colorUp);// target
addLine('c','t',colorTarget);addLine('p','c',colorCross);// cross
addLine('cn1','cn2',colorCross);addLine('cn3','cn4',colorCross);addLine('cf1','cf2',colorCross);addLine('cf3','cf4',colorCross);function addLine(a,b,color){addPoint(a,color);addPoint(b,color);}function addPoint(id,color){vertices.push(0,0,0);colors.push(color.r,color.g,color.b);if(pointMap[id]===undefined){pointMap[id]=[];}pointMap[id].push(vertices.length/3-1);}geometry.addAttribute('position',new Float32BufferAttribute(vertices,3));geometry.addAttribute('color',new Float32BufferAttribute(colors,3));LineSegments.call(this,geometry,material);this.camera=camera;if(this.camera.updateProjectionMatrix)this.camera.updateProjectionMatrix();this.matrix=camera.matrixWorld;this.matrixAutoUpdate=false;this.pointMap=pointMap;this.update();}CameraHelper.prototype=Object.create(LineSegments.prototype);CameraHelper.prototype.constructor=CameraHelper;CameraHelper.prototype.update=function(){var geometry,pointMap;var vector=new Vector3();var camera=new Camera();function setPoint(point,x,y,z){vector.set(x,y,z).unproject(camera);var points=pointMap[point];if(points!==undefined){var position=geometry.getAttribute('position');for(var i=0,l=points.length;i<l;i++){position.setXYZ(points[i],vector.x,vector.y,vector.z);}}}return function update(){geometry=this.geometry;pointMap=this.pointMap;var w=1,h=1;// we need just camera projection matrix
// world matrix must be identity
camera.projectionMatrix.copy(this.camera.projectionMatrix);// center / target
setPoint('c',0,0,-1);setPoint('t',0,0,1);// near
setPoint('n1',-w,-h,-1);setPoint('n2',w,-h,-1);setPoint('n3',-w,h,-1);setPoint('n4',w,h,-1);// far
setPoint('f1',-w,-h,1);setPoint('f2',w,-h,1);setPoint('f3',-w,h,1);setPoint('f4',w,h,1);// up
setPoint('u1',w*0.7,h*1.1,-1);setPoint('u2',-w*0.7,h*1.1,-1);setPoint('u3',0,h*2,-1);// cross
setPoint('cf1',-w,0,1);setPoint('cf2',w,0,1);setPoint('cf3',0,-h,1);setPoint('cf4',0,h,1);setPoint('cn1',-w,0,-1);setPoint('cn2',w,0,-1);setPoint('cn3',0,-h,-1);setPoint('cn4',0,h,-1);geometry.getAttribute('position').needsUpdate=true;};}();/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / http://github.com/Mugen87
	 */function BoxHelper(object,color){this.object=object;if(color===undefined)color=0xffff00;var indices=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]);var positions=new Float32Array(8*3);var geometry=new BufferGeometry();geometry.setIndex(new BufferAttribute(indices,1));geometry.addAttribute('position',new BufferAttribute(positions,3));LineSegments.call(this,geometry,new LineBasicMaterial({color:color}));this.matrixAutoUpdate=false;this.update();}BoxHelper.prototype=Object.create(LineSegments.prototype);BoxHelper.prototype.constructor=BoxHelper;BoxHelper.prototype.update=function(){var box=new Box3();return function update(object){if(object!==undefined){console.warn('THREE.BoxHelper: .update() has no longer arguments.');}if(this.object!==undefined){box.setFromObject(this.object);}if(box.isEmpty())return;var min=box.min;var max=box.max;/*
			  5____4
			1/___0/|
			| 6__|_7
			2/___3/

			0: max.x, max.y, max.z
			1: min.x, max.y, max.z
			2: min.x, min.y, max.z
			3: max.x, min.y, max.z
			4: max.x, max.y, min.z
			5: min.x, max.y, min.z
			6: min.x, min.y, min.z
			7: max.x, min.y, min.z
			*/var position=this.geometry.attributes.position;var array=position.array;array[0]=max.x;array[1]=max.y;array[2]=max.z;array[3]=min.x;array[4]=max.y;array[5]=max.z;array[6]=min.x;array[7]=min.y;array[8]=max.z;array[9]=max.x;array[10]=min.y;array[11]=max.z;array[12]=max.x;array[13]=max.y;array[14]=min.z;array[15]=min.x;array[16]=max.y;array[17]=min.z;array[18]=min.x;array[19]=min.y;array[20]=min.z;array[21]=max.x;array[22]=min.y;array[23]=min.z;position.needsUpdate=true;this.geometry.computeBoundingSphere();};}();BoxHelper.prototype.setFromObject=function(object){this.object=object;this.update();return this;};/**
	 * @author WestLangley / http://github.com/WestLangley
	 */function Box3Helper(box,hex){this.type='Box3Helper';this.box=box;var color=hex!==undefined?hex:0xffff00;var indices=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]);var positions=[1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1];var geometry=new BufferGeometry();geometry.setIndex(new BufferAttribute(indices,1));geometry.addAttribute('position',new Float32BufferAttribute(positions,3));LineSegments.call(this,geometry,new LineBasicMaterial({color:color}));this.geometry.computeBoundingSphere();}Box3Helper.prototype=Object.create(LineSegments.prototype);Box3Helper.prototype.constructor=Box3Helper;Box3Helper.prototype.updateMatrixWorld=function(force){var box=this.box;if(box.isEmpty())return;box.getCenter(this.position);box.getSize(this.scale);this.scale.multiplyScalar(0.5);Object3D.prototype.updateMatrixWorld.call(this,force);};/**
	 * @author WestLangley / http://github.com/WestLangley
	 */function PlaneHelper(plane,size,hex){this.type='PlaneHelper';this.plane=plane;this.size=size===undefined?1:size;var color=hex!==undefined?hex:0xffff00;var positions=[1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,0,0,1,0,0,0];var geometry=new BufferGeometry();geometry.addAttribute('position',new Float32BufferAttribute(positions,3));geometry.computeBoundingSphere();Line.call(this,geometry,new LineBasicMaterial({color:color}));//
var positions2=[1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,1,-1,1];var geometry2=new BufferGeometry();geometry2.addAttribute('position',new Float32BufferAttribute(positions2,3));geometry2.computeBoundingSphere();this.add(new Mesh(geometry2,new MeshBasicMaterial({color:color,opacity:0.2,transparent:true,depthWrite:false})));}PlaneHelper.prototype=Object.create(Line.prototype);PlaneHelper.prototype.constructor=PlaneHelper;PlaneHelper.prototype.updateMatrixWorld=function(force){var scale=-this.plane.constant;if(Math.abs(scale)<1e-8)scale=1e-8;// sign does not matter
this.scale.set(0.5*this.size,0.5*this.size,scale);this.children[0].material.side=scale<0?BackSide:FrontSide;// renderer flips side when determinant < 0; flipping not wanted here
this.lookAt(this.plane.normal);Object3D.prototype.updateMatrixWorld.call(this,force);};/**
	 * @author WestLangley / http://github.com/WestLangley
	 * @author zz85 / http://github.com/zz85
	 * @author bhouston / http://clara.io
	 *
	 * Creates an arrow for visualizing directions
	 *
	 * Parameters:
	 *  dir - Vector3
	 *  origin - Vector3
	 *  length - Number
	 *  color - color in hex value
	 *  headLength - Number
	 *  headWidth - Number
	 */var lineGeometry,coneGeometry;function ArrowHelper(dir,origin,length,color,headLength,headWidth){// dir is assumed to be normalized
Object3D.call(this);if(color===undefined)color=0xffff00;if(length===undefined)length=1;if(headLength===undefined)headLength=0.2*length;if(headWidth===undefined)headWidth=0.2*headLength;if(lineGeometry===undefined){lineGeometry=new BufferGeometry();lineGeometry.addAttribute('position',new Float32BufferAttribute([0,0,0,0,1,0],3));coneGeometry=new CylinderBufferGeometry(0,0.5,1,5,1);coneGeometry.translate(0,-0.5,0);}this.position.copy(origin);this.line=new Line(lineGeometry,new LineBasicMaterial({color:color}));this.line.matrixAutoUpdate=false;this.add(this.line);this.cone=new Mesh(coneGeometry,new MeshBasicMaterial({color:color}));this.cone.matrixAutoUpdate=false;this.add(this.cone);this.setDirection(dir);this.setLength(length,headLength,headWidth);}ArrowHelper.prototype=Object.create(Object3D.prototype);ArrowHelper.prototype.constructor=ArrowHelper;ArrowHelper.prototype.setDirection=function(){var axis=new Vector3();var radians;return function setDirection(dir){// dir is assumed to be normalized
if(dir.y>0.99999){this.quaternion.set(0,0,0,1);}else if(dir.y<-0.99999){this.quaternion.set(1,0,0,0);}else{axis.set(dir.z,0,-dir.x).normalize();radians=Math.acos(dir.y);this.quaternion.setFromAxisAngle(axis,radians);}};}();ArrowHelper.prototype.setLength=function(length,headLength,headWidth){if(headLength===undefined)headLength=0.2*length;if(headWidth===undefined)headWidth=0.2*headLength;this.line.scale.set(1,Math.max(0,length-headLength),1);this.line.updateMatrix();this.cone.scale.set(headWidth,headLength,headWidth);this.cone.position.y=length;this.cone.updateMatrix();};ArrowHelper.prototype.setColor=function(color){this.line.material.color.copy(color);this.cone.material.color.copy(color);};/**
	 * @author sroucheray / http://sroucheray.org/
	 * @author mrdoob / http://mrdoob.com/
	 */function AxesHelper(size){size=size||1;var vertices=[0,0,0,size,0,0,0,0,0,0,size,0,0,0,0,0,0,size];var colors=[1,0,0,1,0.6,0,0,1,0,0.6,1,0,0,0,1,0,0.6,1];var geometry=new BufferGeometry();geometry.addAttribute('position',new Float32BufferAttribute(vertices,3));geometry.addAttribute('color',new Float32BufferAttribute(colors,3));var material=new LineBasicMaterial({vertexColors:VertexColors});LineSegments.call(this,geometry,material);}AxesHelper.prototype=Object.create(LineSegments.prototype);AxesHelper.prototype.constructor=AxesHelper;/**
	 * @author mrdoob / http://mrdoob.com/
	 */function Face4(a,b,c,d,normal,color,materialIndex){console.warn('THREE.Face4 has been removed. A THREE.Face3 will be created instead.');return new Face3(a,b,c,normal,color,materialIndex);}var LineStrip=0;var LinePieces=1;function MeshFaceMaterial(materials){console.warn('THREE.MeshFaceMaterial has been removed. Use an Array instead.');return materials;}function MultiMaterial(materials){if(materials===undefined)materials=[];console.warn('THREE.MultiMaterial has been removed. Use an Array instead.');materials.isMultiMaterial=true;materials.materials=materials;materials.clone=function(){return materials.slice();};return materials;}function PointCloud(geometry,material){console.warn('THREE.PointCloud has been renamed to THREE.Points.');return new Points(geometry,material);}function Particle(material){console.warn('THREE.Particle has been renamed to THREE.Sprite.');return new Sprite(material);}function ParticleSystem(geometry,material){console.warn('THREE.ParticleSystem has been renamed to THREE.Points.');return new Points(geometry,material);}function PointCloudMaterial(parameters){console.warn('THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.');return new PointsMaterial(parameters);}function ParticleBasicMaterial(parameters){console.warn('THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.');return new PointsMaterial(parameters);}function ParticleSystemMaterial(parameters){console.warn('THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.');return new PointsMaterial(parameters);}function Vertex(x,y,z){console.warn('THREE.Vertex has been removed. Use THREE.Vector3 instead.');return new Vector3(x,y,z);}//
function DynamicBufferAttribute(array,itemSize){console.warn('THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.');return new BufferAttribute(array,itemSize).setDynamic(true);}function Int8Attribute(array,itemSize){console.warn('THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.');return new Int8BufferAttribute(array,itemSize);}function Uint8Attribute(array,itemSize){console.warn('THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.');return new Uint8BufferAttribute(array,itemSize);}function Uint8ClampedAttribute(array,itemSize){console.warn('THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.');return new Uint8ClampedBufferAttribute(array,itemSize);}function Int16Attribute(array,itemSize){console.warn('THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.');return new Int16BufferAttribute(array,itemSize);}function Uint16Attribute(array,itemSize){console.warn('THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.');return new Uint16BufferAttribute(array,itemSize);}function Int32Attribute(array,itemSize){console.warn('THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.');return new Int32BufferAttribute(array,itemSize);}function Uint32Attribute(array,itemSize){console.warn('THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.');return new Uint32BufferAttribute(array,itemSize);}function Float32Attribute(array,itemSize){console.warn('THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.');return new Float32BufferAttribute(array,itemSize);}function Float64Attribute(array,itemSize){console.warn('THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.');return new Float64BufferAttribute(array,itemSize);}//
Curve.create=function(construct,getPoint){console.log('THREE.Curve.create() has been deprecated');construct.prototype=Object.create(Curve.prototype);construct.prototype.constructor=construct;construct.prototype.getPoint=getPoint;return construct;};//
Object.assign(CurvePath.prototype,{createPointsGeometry:function createPointsGeometry(divisions){console.warn('THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.');// generate geometry from path points (for Line or Points objects)
var pts=this.getPoints(divisions);return this.createGeometry(pts);},createSpacedPointsGeometry:function createSpacedPointsGeometry(divisions){console.warn('THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.');// generate geometry from equidistant sampling along the path
var pts=this.getSpacedPoints(divisions);return this.createGeometry(pts);},createGeometry:function createGeometry(points){console.warn('THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.');var geometry=new Geometry();for(var i=0,l=points.length;i<l;i++){var point=points[i];geometry.vertices.push(new Vector3(point.x,point.y,point.z||0));}return geometry;}});//
Object.assign(Path.prototype,{fromPoints:function fromPoints(points){console.warn('THREE.Path: .fromPoints() has been renamed to .setFromPoints().');this.setFromPoints(points);}});//
function ClosedSplineCurve3(points){console.warn('THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.');CatmullRomCurve3.call(this,points);this.type='catmullrom';this.closed=true;}ClosedSplineCurve3.prototype=Object.create(CatmullRomCurve3.prototype);//
function SplineCurve3(points){console.warn('THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.');CatmullRomCurve3.call(this,points);this.type='catmullrom';}SplineCurve3.prototype=Object.create(CatmullRomCurve3.prototype);//
function Spline(points){console.warn('THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.');CatmullRomCurve3.call(this,points);this.type='catmullrom';}Spline.prototype=Object.create(CatmullRomCurve3.prototype);Object.assign(Spline.prototype,{initFromArray:function initFromArray()/* a */{console.error('THREE.Spline: .initFromArray() has been removed.');},getControlPointsArray:function getControlPointsArray()/* optionalTarget */{console.error('THREE.Spline: .getControlPointsArray() has been removed.');},reparametrizeByArcLength:function reparametrizeByArcLength()/* samplingCoef */{console.error('THREE.Spline: .reparametrizeByArcLength() has been removed.');}});//
function AxisHelper(size){console.warn('THREE.AxisHelper has been renamed to THREE.AxesHelper.');return new AxesHelper(size);}function BoundingBoxHelper(object,color){console.warn('THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.');return new BoxHelper(object,color);}function EdgesHelper(object,hex){console.warn('THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.');return new LineSegments(new EdgesGeometry(object.geometry),new LineBasicMaterial({color:hex!==undefined?hex:0xffffff}));}GridHelper.prototype.setColors=function(){console.error('THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.');};SkeletonHelper.prototype.update=function(){console.error('THREE.SkeletonHelper: update() no longer needs to be called.');};function WireframeHelper(object,hex){console.warn('THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.');return new LineSegments(new WireframeGeometry(object.geometry),new LineBasicMaterial({color:hex!==undefined?hex:0xffffff}));}//
Object.assign(Loader.prototype,{extractUrlBase:function extractUrlBase(url){console.warn('THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.');return LoaderUtils.extractUrlBase(url);}});function XHRLoader(manager){console.warn('THREE.XHRLoader has been renamed to THREE.FileLoader.');return new FileLoader(manager);}function BinaryTextureLoader(manager){console.warn('THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.');return new DataTextureLoader(manager);}//
Object.assign(Box2.prototype,{center:function center(optionalTarget){console.warn('THREE.Box2: .center() has been renamed to .getCenter().');return this.getCenter(optionalTarget);},empty:function empty(){console.warn('THREE.Box2: .empty() has been renamed to .isEmpty().');return this.isEmpty();},isIntersectionBox:function isIntersectionBox(box){console.warn('THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().');return this.intersectsBox(box);},size:function size(optionalTarget){console.warn('THREE.Box2: .size() has been renamed to .getSize().');return this.getSize(optionalTarget);}});Object.assign(Box3.prototype,{center:function center(optionalTarget){console.warn('THREE.Box3: .center() has been renamed to .getCenter().');return this.getCenter(optionalTarget);},empty:function empty(){console.warn('THREE.Box3: .empty() has been renamed to .isEmpty().');return this.isEmpty();},isIntersectionBox:function isIntersectionBox(box){console.warn('THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().');return this.intersectsBox(box);},isIntersectionSphere:function isIntersectionSphere(sphere){console.warn('THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().');return this.intersectsSphere(sphere);},size:function size(optionalTarget){console.warn('THREE.Box3: .size() has been renamed to .getSize().');return this.getSize(optionalTarget);}});Line3.prototype.center=function(optionalTarget){console.warn('THREE.Line3: .center() has been renamed to .getCenter().');return this.getCenter(optionalTarget);};Object.assign(_Math,{random16:function random16(){console.warn('THREE.Math: .random16() has been deprecated. Use Math.random() instead.');return Math.random();},nearestPowerOfTwo:function nearestPowerOfTwo(value){console.warn('THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().');return _Math.floorPowerOfTwo(value);},nextPowerOfTwo:function nextPowerOfTwo(value){console.warn('THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().');return _Math.ceilPowerOfTwo(value);}});Object.assign(Matrix3.prototype,{flattenToArrayOffset:function flattenToArrayOffset(array,offset){console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");return this.toArray(array,offset);},multiplyVector3:function multiplyVector3(vector){console.warn('THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.');return vector.applyMatrix3(this);},multiplyVector3Array:function multiplyVector3Array()/* a */{console.error('THREE.Matrix3: .multiplyVector3Array() has been removed.');},applyToBuffer:function applyToBuffer(buffer/*, offset, length */){console.warn('THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.');return this.applyToBufferAttribute(buffer);},applyToVector3Array:function applyToVector3Array()/* array, offset, length */{console.error('THREE.Matrix3: .applyToVector3Array() has been removed.');}});Object.assign(Matrix4.prototype,{extractPosition:function extractPosition(m){console.warn('THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().');return this.copyPosition(m);},flattenToArrayOffset:function flattenToArrayOffset(array,offset){console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");return this.toArray(array,offset);},getPosition:function(){var v1;return function getPosition(){if(v1===undefined)v1=new Vector3();console.warn('THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.');return v1.setFromMatrixColumn(this,3);};}(),setRotationFromQuaternion:function setRotationFromQuaternion(q){console.warn('THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().');return this.makeRotationFromQuaternion(q);},multiplyToArray:function multiplyToArray(){console.warn('THREE.Matrix4: .multiplyToArray() has been removed.');},multiplyVector3:function multiplyVector3(vector){console.warn('THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.');return vector.applyMatrix4(this);},multiplyVector4:function multiplyVector4(vector){console.warn('THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.');return vector.applyMatrix4(this);},multiplyVector3Array:function multiplyVector3Array()/* a */{console.error('THREE.Matrix4: .multiplyVector3Array() has been removed.');},rotateAxis:function rotateAxis(v){console.warn('THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.');v.transformDirection(this);},crossVector:function crossVector(vector){console.warn('THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.');return vector.applyMatrix4(this);},translate:function translate(){console.error('THREE.Matrix4: .translate() has been removed.');},rotateX:function rotateX(){console.error('THREE.Matrix4: .rotateX() has been removed.');},rotateY:function rotateY(){console.error('THREE.Matrix4: .rotateY() has been removed.');},rotateZ:function rotateZ(){console.error('THREE.Matrix4: .rotateZ() has been removed.');},rotateByAxis:function rotateByAxis(){console.error('THREE.Matrix4: .rotateByAxis() has been removed.');},applyToBuffer:function applyToBuffer(buffer/*, offset, length */){console.warn('THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.');return this.applyToBufferAttribute(buffer);},applyToVector3Array:function applyToVector3Array()/* array, offset, length */{console.error('THREE.Matrix4: .applyToVector3Array() has been removed.');},makeFrustum:function makeFrustum(left,right,bottom,top,near,far){console.warn('THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.');return this.makePerspective(left,right,top,bottom,near,far);}});Plane.prototype.isIntersectionLine=function(line){console.warn('THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().');return this.intersectsLine(line);};Quaternion.prototype.multiplyVector3=function(vector){console.warn('THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.');return vector.applyQuaternion(this);};Object.assign(Ray.prototype,{isIntersectionBox:function isIntersectionBox(box){console.warn('THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().');return this.intersectsBox(box);},isIntersectionPlane:function isIntersectionPlane(plane){console.warn('THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().');return this.intersectsPlane(plane);},isIntersectionSphere:function isIntersectionSphere(sphere){console.warn('THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().');return this.intersectsSphere(sphere);}});Object.assign(Triangle.prototype,{area:function area(){console.warn('THREE.Triangle: .area() has been renamed to .getArea().');return this.getArea();},barycoordFromPoint:function barycoordFromPoint(point,target){console.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');return this.getBarycoord(point,target);},midpoint:function midpoint(target){console.warn('THREE.Triangle: .midpoint() has been renamed to .getMidpoint().');return this.getMidpoint(target);},normal:function normal(target){console.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');return this.getNormal(target);},plane:function plane(target){console.warn('THREE.Triangle: .plane() has been renamed to .getPlane().');return this.getPlane(target);}});Object.assign(Triangle,{barycoordFromPoint:function barycoordFromPoint(point,a,b,c,target){console.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');return Triangle.getBarycoord(point,a,b,c,target);},normal:function normal(a,b,c,target){console.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');return Triangle.getNormal(a,b,c,target);}});Object.assign(Shape.prototype,{extractAllPoints:function extractAllPoints(divisions){console.warn('THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.');return this.extractPoints(divisions);},extrude:function extrude(options){console.warn('THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.');return new ExtrudeGeometry(this,options);},makeGeometry:function makeGeometry(options){console.warn('THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.');return new ShapeGeometry(this,options);}});Object.assign(Vector2.prototype,{fromAttribute:function fromAttribute(attribute,index,offset){console.warn('THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().');return this.fromBufferAttribute(attribute,index,offset);},distanceToManhattan:function distanceToManhattan(v){console.warn('THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');return this.manhattanDistanceTo(v);},lengthManhattan:function lengthManhattan(){console.warn('THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().');return this.manhattanLength();}});Object.assign(Vector3.prototype,{setEulerFromRotationMatrix:function setEulerFromRotationMatrix(){console.error('THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.');},setEulerFromQuaternion:function setEulerFromQuaternion(){console.error('THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.');},getPositionFromMatrix:function getPositionFromMatrix(m){console.warn('THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().');return this.setFromMatrixPosition(m);},getScaleFromMatrix:function getScaleFromMatrix(m){console.warn('THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().');return this.setFromMatrixScale(m);},getColumnFromMatrix:function getColumnFromMatrix(index,matrix){console.warn('THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().');return this.setFromMatrixColumn(matrix,index);},applyProjection:function applyProjection(m){console.warn('THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.');return this.applyMatrix4(m);},fromAttribute:function fromAttribute(attribute,index,offset){console.warn('THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().');return this.fromBufferAttribute(attribute,index,offset);},distanceToManhattan:function distanceToManhattan(v){console.warn('THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');return this.manhattanDistanceTo(v);},lengthManhattan:function lengthManhattan(){console.warn('THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().');return this.manhattanLength();}});Object.assign(Vector4.prototype,{fromAttribute:function fromAttribute(attribute,index,offset){console.warn('THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().');return this.fromBufferAttribute(attribute,index,offset);},lengthManhattan:function lengthManhattan(){console.warn('THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().');return this.manhattanLength();}});//
Object.assign(Geometry.prototype,{computeTangents:function computeTangents(){console.error('THREE.Geometry: .computeTangents() has been removed.');},computeLineDistances:function computeLineDistances(){console.error('THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.');}});Object.assign(Object3D.prototype,{getChildByName:function getChildByName(name){console.warn('THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().');return this.getObjectByName(name);},renderDepth:function renderDepth(){console.warn('THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.');},translate:function translate(distance,axis){console.warn('THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.');return this.translateOnAxis(axis,distance);},getWorldRotation:function getWorldRotation(){console.error('THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.');}});Object.defineProperties(Object3D.prototype,{eulerOrder:{get:function get(){console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');return this.rotation.order;},set:function set(value){console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');this.rotation.order=value;}},useQuaternion:{get:function get(){console.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');},set:function set(){console.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');}}});Object.defineProperties(LOD.prototype,{objects:{get:function get(){console.warn('THREE.LOD: .objects has been renamed to .levels.');return this.levels;}}});Object.defineProperty(Skeleton.prototype,'useVertexTexture',{get:function get(){console.warn('THREE.Skeleton: useVertexTexture has been removed.');},set:function set(){console.warn('THREE.Skeleton: useVertexTexture has been removed.');}});Object.defineProperty(Curve.prototype,'__arcLengthDivisions',{get:function get(){console.warn('THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.');return this.arcLengthDivisions;},set:function set(value){console.warn('THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.');this.arcLengthDivisions=value;}});//
PerspectiveCamera.prototype.setLens=function(focalLength,filmGauge){console.warn("THREE.PerspectiveCamera.setLens is deprecated. "+"Use .setFocalLength and .filmGauge for a photographic setup.");if(filmGauge!==undefined)this.filmGauge=filmGauge;this.setFocalLength(focalLength);};//
Object.defineProperties(Light.prototype,{onlyShadow:{set:function set(){console.warn('THREE.Light: .onlyShadow has been removed.');}},shadowCameraFov:{set:function set(value){console.warn('THREE.Light: .shadowCameraFov is now .shadow.camera.fov.');this.shadow.camera.fov=value;}},shadowCameraLeft:{set:function set(value){console.warn('THREE.Light: .shadowCameraLeft is now .shadow.camera.left.');this.shadow.camera.left=value;}},shadowCameraRight:{set:function set(value){console.warn('THREE.Light: .shadowCameraRight is now .shadow.camera.right.');this.shadow.camera.right=value;}},shadowCameraTop:{set:function set(value){console.warn('THREE.Light: .shadowCameraTop is now .shadow.camera.top.');this.shadow.camera.top=value;}},shadowCameraBottom:{set:function set(value){console.warn('THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.');this.shadow.camera.bottom=value;}},shadowCameraNear:{set:function set(value){console.warn('THREE.Light: .shadowCameraNear is now .shadow.camera.near.');this.shadow.camera.near=value;}},shadowCameraFar:{set:function set(value){console.warn('THREE.Light: .shadowCameraFar is now .shadow.camera.far.');this.shadow.camera.far=value;}},shadowCameraVisible:{set:function set(){console.warn('THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.');}},shadowBias:{set:function set(value){console.warn('THREE.Light: .shadowBias is now .shadow.bias.');this.shadow.bias=value;}},shadowDarkness:{set:function set(){console.warn('THREE.Light: .shadowDarkness has been removed.');}},shadowMapWidth:{set:function set(value){console.warn('THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.');this.shadow.mapSize.width=value;}},shadowMapHeight:{set:function set(value){console.warn('THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.');this.shadow.mapSize.height=value;}}});//
Object.defineProperties(BufferAttribute.prototype,{length:{get:function get(){console.warn('THREE.BufferAttribute: .length has been deprecated. Use .count instead.');return this.array.length;}},copyIndicesArray:function copyIndicesArray()/* indices */{console.error('THREE.BufferAttribute: .copyIndicesArray() has been removed.');}});Object.assign(BufferGeometry.prototype,{addIndex:function addIndex(index){console.warn('THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().');this.setIndex(index);},addDrawCall:function addDrawCall(start,count,indexOffset){if(indexOffset!==undefined){console.warn('THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.');}console.warn('THREE.BufferGeometry: .addDrawCall() is now .addGroup().');this.addGroup(start,count);},clearDrawCalls:function clearDrawCalls(){console.warn('THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().');this.clearGroups();},computeTangents:function computeTangents(){console.warn('THREE.BufferGeometry: .computeTangents() has been removed.');},computeOffsets:function computeOffsets(){console.warn('THREE.BufferGeometry: .computeOffsets() has been removed.');}});Object.defineProperties(BufferGeometry.prototype,{drawcalls:{get:function get(){console.error('THREE.BufferGeometry: .drawcalls has been renamed to .groups.');return this.groups;}},offsets:{get:function get(){console.warn('THREE.BufferGeometry: .offsets has been renamed to .groups.');return this.groups;}}});//
Object.assign(ExtrudeBufferGeometry.prototype,{getArrays:function getArrays(){console.error('THREE.ExtrudeBufferGeometry: .getArrays() has been removed.');},addShapeList:function addShapeList(){console.error('THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.');},addShape:function addShape(){console.error('THREE.ExtrudeBufferGeometry: .addShape() has been removed.');}});//
Object.defineProperties(Uniform.prototype,{dynamic:{set:function set(){console.warn('THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.');}},onUpdate:{value:function value(){console.warn('THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.');return this;}}});//
Object.defineProperties(Material.prototype,{wrapAround:{get:function get(){console.warn('THREE.Material: .wrapAround has been removed.');},set:function set(){console.warn('THREE.Material: .wrapAround has been removed.');}},wrapRGB:{get:function get(){console.warn('THREE.Material: .wrapRGB has been removed.');return new Color();}},shading:{get:function get(){console.error('THREE.'+this.type+': .shading has been removed. Use the boolean .flatShading instead.');},set:function set(value){console.warn('THREE.'+this.type+': .shading has been removed. Use the boolean .flatShading instead.');this.flatShading=value===FlatShading;}}});Object.defineProperties(MeshPhongMaterial.prototype,{metal:{get:function get(){console.warn('THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.');return false;},set:function set(){console.warn('THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead');}}});Object.defineProperties(ShaderMaterial.prototype,{derivatives:{get:function get(){console.warn('THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');return this.extensions.derivatives;},set:function set(value){console.warn('THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');this.extensions.derivatives=value;}}});//
Object.assign(WebGLRenderer.prototype,{animate:function animate(callback){console.warn('THREE.WebGLRenderer: .animate() is now .setAnimationLoop().');this.setAnimationLoop(callback);},getCurrentRenderTarget:function getCurrentRenderTarget(){console.warn('THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().');return this.getRenderTarget();},getMaxAnisotropy:function getMaxAnisotropy(){console.warn('THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().');return this.capabilities.getMaxAnisotropy();},getPrecision:function getPrecision(){console.warn('THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.');return this.capabilities.precision;},resetGLState:function resetGLState(){console.warn('THREE.WebGLRenderer: .resetGLState() is now .state.reset().');return this.state.reset();},supportsFloatTextures:function supportsFloatTextures(){console.warn('THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).');return this.extensions.get('OES_texture_float');},supportsHalfFloatTextures:function supportsHalfFloatTextures(){console.warn('THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).');return this.extensions.get('OES_texture_half_float');},supportsStandardDerivatives:function supportsStandardDerivatives(){console.warn('THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).');return this.extensions.get('OES_standard_derivatives');},supportsCompressedTextureS3TC:function supportsCompressedTextureS3TC(){console.warn('THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).');return this.extensions.get('WEBGL_compressed_texture_s3tc');},supportsCompressedTexturePVRTC:function supportsCompressedTexturePVRTC(){console.warn('THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).');return this.extensions.get('WEBGL_compressed_texture_pvrtc');},supportsBlendMinMax:function supportsBlendMinMax(){console.warn('THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).');return this.extensions.get('EXT_blend_minmax');},supportsVertexTextures:function supportsVertexTextures(){console.warn('THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.');return this.capabilities.vertexTextures;},supportsInstancedArrays:function supportsInstancedArrays(){console.warn('THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).');return this.extensions.get('ANGLE_instanced_arrays');},enableScissorTest:function enableScissorTest(boolean){console.warn('THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().');this.setScissorTest(boolean);},initMaterial:function initMaterial(){console.warn('THREE.WebGLRenderer: .initMaterial() has been removed.');},addPrePlugin:function addPrePlugin(){console.warn('THREE.WebGLRenderer: .addPrePlugin() has been removed.');},addPostPlugin:function addPostPlugin(){console.warn('THREE.WebGLRenderer: .addPostPlugin() has been removed.');},updateShadowMap:function updateShadowMap(){console.warn('THREE.WebGLRenderer: .updateShadowMap() has been removed.');},setFaceCulling:function setFaceCulling(){console.warn('THREE.WebGLRenderer: .setFaceCulling() has been removed.');}});Object.defineProperties(WebGLRenderer.prototype,{shadowMapEnabled:{get:function get(){return this.shadowMap.enabled;},set:function set(value){console.warn('THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.');this.shadowMap.enabled=value;}},shadowMapType:{get:function get(){return this.shadowMap.type;},set:function set(value){console.warn('THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.');this.shadowMap.type=value;}},shadowMapCullFace:{get:function get(){console.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');return undefined;},set:function set()/* value */{console.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');}}});Object.defineProperties(WebGLShadowMap.prototype,{cullFace:{get:function get(){console.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');return undefined;},set:function set()/* cullFace */{console.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');}},renderReverseSided:{get:function get(){console.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');return undefined;},set:function set(){console.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');}},renderSingleSided:{get:function get(){console.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');return undefined;},set:function set(){console.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');}}});//
Object.defineProperties(WebGLRenderTarget.prototype,{wrapS:{get:function get(){console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');return this.texture.wrapS;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');this.texture.wrapS=value;}},wrapT:{get:function get(){console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');return this.texture.wrapT;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');this.texture.wrapT=value;}},magFilter:{get:function get(){console.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');return this.texture.magFilter;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');this.texture.magFilter=value;}},minFilter:{get:function get(){console.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');return this.texture.minFilter;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');this.texture.minFilter=value;}},anisotropy:{get:function get(){console.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');return this.texture.anisotropy;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');this.texture.anisotropy=value;}},offset:{get:function get(){console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');return this.texture.offset;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');this.texture.offset=value;}},repeat:{get:function get(){console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');return this.texture.repeat;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');this.texture.repeat=value;}},format:{get:function get(){console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');return this.texture.format;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');this.texture.format=value;}},type:{get:function get(){console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');return this.texture.type;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');this.texture.type=value;}},generateMipmaps:{get:function get(){console.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');return this.texture.generateMipmaps;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');this.texture.generateMipmaps=value;}}});//
Object.defineProperties(WebVRManager.prototype,{standing:{set:function set()/* value */{console.warn('THREE.WebVRManager: .standing has been removed.');}},userHeight:{set:function set()/* value */{console.warn('THREE.WebVRManager: .userHeight has been removed.');}}});//
Audio.prototype.load=function(file){console.warn('THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.');var scope=this;var audioLoader=new AudioLoader();audioLoader.load(file,function(buffer){scope.setBuffer(buffer);});return this;};AudioAnalyser.prototype.getData=function(){console.warn('THREE.AudioAnalyser: .getData() is now .getFrequencyData().');return this.getFrequencyData();};//
CubeCamera.prototype.updateCubeMap=function(renderer,scene){console.warn('THREE.CubeCamera: .updateCubeMap() is now .update().');return this.update(renderer,scene);};//
var GeometryUtils={merge:function merge(geometry1,geometry2,materialIndexOffset){console.warn('THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.');var matrix;if(geometry2.isMesh){geometry2.matrixAutoUpdate&&geometry2.updateMatrix();matrix=geometry2.matrix;geometry2=geometry2.geometry;}geometry1.merge(geometry2,matrix,materialIndexOffset);},center:function center(geometry){console.warn('THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.');return geometry.center();}};ImageUtils.crossOrigin=undefined;ImageUtils.loadTexture=function(url,mapping,onLoad,onError){console.warn('THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.');var loader=new TextureLoader();loader.setCrossOrigin(this.crossOrigin);var texture=loader.load(url,onLoad,undefined,onError);if(mapping)texture.mapping=mapping;return texture;};ImageUtils.loadTextureCube=function(urls,mapping,onLoad,onError){console.warn('THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.');var loader=new CubeTextureLoader();loader.setCrossOrigin(this.crossOrigin);var texture=loader.load(urls,onLoad,undefined,onError);if(mapping)texture.mapping=mapping;return texture;};ImageUtils.loadCompressedTexture=function(){console.error('THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.');};ImageUtils.loadCompressedTextureCube=function(){console.error('THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.');};//
function Projector(){console.error('THREE.Projector has been moved to /examples/js/renderers/Projector.js.');this.projectVector=function(vector,camera){console.warn('THREE.Projector: .projectVector() is now vector.project().');vector.project(camera);};this.unprojectVector=function(vector,camera){console.warn('THREE.Projector: .unprojectVector() is now vector.unproject().');vector.unproject(camera);};this.pickingRay=function(){console.error('THREE.Projector: .pickingRay() is now raycaster.setFromCamera().');};}//
function CanvasRenderer(){console.error('THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js');this.domElement=document.createElementNS('http://www.w3.org/1999/xhtml','canvas');this.clear=function(){};this.render=function(){};this.setClearColor=function(){};this.setSize=function(){};}//
var SceneUtils={createMultiMaterialObject:function createMultiMaterialObject()/* geometry, materials */{console.error('THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js');},detach:function detach()/* child, parent, scene */{console.error('THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js');},attach:function attach()/* child, scene, parent */{console.error('THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js');}};//
function LensFlare(){console.error('THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js');}exports.WebGLRenderTargetCube=WebGLRenderTargetCube;exports.WebGLRenderTarget=WebGLRenderTarget;exports.WebGLRenderer=WebGLRenderer;exports.ShaderLib=ShaderLib;exports.UniformsLib=UniformsLib;exports.UniformsUtils=UniformsUtils;exports.ShaderChunk=ShaderChunk;exports.FogExp2=FogExp2;exports.Fog=Fog;exports.Scene=Scene;exports.Sprite=Sprite;exports.LOD=LOD;exports.SkinnedMesh=SkinnedMesh;exports.Skeleton=Skeleton;exports.Bone=Bone;exports.Mesh=Mesh;exports.LineSegments=LineSegments;exports.LineLoop=LineLoop;exports.Line=Line;exports.Points=Points;exports.Group=Group;exports.VideoTexture=VideoTexture;exports.DataTexture=DataTexture;exports.Texture3D=Texture3D;exports.CompressedTexture=CompressedTexture;exports.CubeTexture=CubeTexture;exports.CanvasTexture=CanvasTexture;exports.DepthTexture=DepthTexture;exports.Texture=Texture;exports.CompressedTextureLoader=CompressedTextureLoader;exports.DataTextureLoader=DataTextureLoader;exports.CubeTextureLoader=CubeTextureLoader;exports.TextureLoader=TextureLoader;exports.ObjectLoader=ObjectLoader;exports.MaterialLoader=MaterialLoader;exports.BufferGeometryLoader=BufferGeometryLoader;exports.DefaultLoadingManager=DefaultLoadingManager;exports.LoadingManager=LoadingManager;exports.JSONLoader=JSONLoader;exports.ImageLoader=ImageLoader;exports.ImageBitmapLoader=ImageBitmapLoader;exports.FontLoader=FontLoader;exports.FileLoader=FileLoader;exports.Loader=Loader;exports.LoaderUtils=LoaderUtils;exports.Cache=Cache;exports.AudioLoader=AudioLoader;exports.SpotLightShadow=SpotLightShadow;exports.SpotLight=SpotLight;exports.PointLight=PointLight;exports.RectAreaLight=RectAreaLight;exports.HemisphereLight=HemisphereLight;exports.DirectionalLightShadow=DirectionalLightShadow;exports.DirectionalLight=DirectionalLight;exports.AmbientLight=AmbientLight;exports.LightShadow=LightShadow;exports.Light=Light;exports.StereoCamera=StereoCamera;exports.PerspectiveCamera=PerspectiveCamera;exports.OrthographicCamera=OrthographicCamera;exports.CubeCamera=CubeCamera;exports.ArrayCamera=ArrayCamera;exports.Camera=Camera;exports.AudioListener=AudioListener;exports.PositionalAudio=PositionalAudio;exports.AudioContext=AudioContext;exports.AudioAnalyser=AudioAnalyser;exports.Audio=Audio;exports.VectorKeyframeTrack=VectorKeyframeTrack;exports.StringKeyframeTrack=StringKeyframeTrack;exports.QuaternionKeyframeTrack=QuaternionKeyframeTrack;exports.NumberKeyframeTrack=NumberKeyframeTrack;exports.ColorKeyframeTrack=ColorKeyframeTrack;exports.BooleanKeyframeTrack=BooleanKeyframeTrack;exports.PropertyMixer=PropertyMixer;exports.PropertyBinding=PropertyBinding;exports.KeyframeTrack=KeyframeTrack;exports.AnimationUtils=AnimationUtils;exports.AnimationObjectGroup=AnimationObjectGroup;exports.AnimationMixer=AnimationMixer;exports.AnimationClip=AnimationClip;exports.Uniform=Uniform;exports.InstancedBufferGeometry=InstancedBufferGeometry;exports.BufferGeometry=BufferGeometry;exports.Geometry=Geometry;exports.InterleavedBufferAttribute=InterleavedBufferAttribute;exports.InstancedInterleavedBuffer=InstancedInterleavedBuffer;exports.InterleavedBuffer=InterleavedBuffer;exports.InstancedBufferAttribute=InstancedBufferAttribute;exports.Face3=Face3;exports.Object3D=Object3D;exports.Raycaster=Raycaster;exports.Layers=Layers;exports.EventDispatcher=EventDispatcher;exports.Clock=Clock;exports.QuaternionLinearInterpolant=QuaternionLinearInterpolant;exports.LinearInterpolant=LinearInterpolant;exports.DiscreteInterpolant=DiscreteInterpolant;exports.CubicInterpolant=CubicInterpolant;exports.Interpolant=Interpolant;exports.Triangle=Triangle;exports.Math=_Math;exports.Spherical=Spherical;exports.Cylindrical=Cylindrical;exports.Plane=Plane;exports.Frustum=Frustum;exports.Sphere=Sphere;exports.Ray=Ray;exports.Matrix4=Matrix4;exports.Matrix3=Matrix3;exports.Box3=Box3;exports.Box2=Box2;exports.Line3=Line3;exports.Euler=Euler;exports.Vector4=Vector4;exports.Vector3=Vector3;exports.Vector2=Vector2;exports.Quaternion=Quaternion;exports.Color=Color;exports.ImmediateRenderObject=ImmediateRenderObject;exports.VertexNormalsHelper=VertexNormalsHelper;exports.SpotLightHelper=SpotLightHelper;exports.SkeletonHelper=SkeletonHelper;exports.PointLightHelper=PointLightHelper;exports.RectAreaLightHelper=RectAreaLightHelper;exports.HemisphereLightHelper=HemisphereLightHelper;exports.GridHelper=GridHelper;exports.PolarGridHelper=PolarGridHelper;exports.FaceNormalsHelper=FaceNormalsHelper;exports.DirectionalLightHelper=DirectionalLightHelper;exports.CameraHelper=CameraHelper;exports.BoxHelper=BoxHelper;exports.Box3Helper=Box3Helper;exports.PlaneHelper=PlaneHelper;exports.ArrowHelper=ArrowHelper;exports.AxesHelper=AxesHelper;exports.Shape=Shape;exports.Path=Path;exports.ShapePath=ShapePath;exports.Font=Font;exports.CurvePath=CurvePath;exports.Curve=Curve;exports.ImageUtils=ImageUtils;exports.ShapeUtils=ShapeUtils;exports.WebGLUtils=WebGLUtils;exports.WireframeGeometry=WireframeGeometry;exports.ParametricGeometry=ParametricGeometry;exports.ParametricBufferGeometry=ParametricBufferGeometry;exports.TetrahedronGeometry=TetrahedronGeometry;exports.TetrahedronBufferGeometry=TetrahedronBufferGeometry;exports.OctahedronGeometry=OctahedronGeometry;exports.OctahedronBufferGeometry=OctahedronBufferGeometry;exports.IcosahedronGeometry=IcosahedronGeometry;exports.IcosahedronBufferGeometry=IcosahedronBufferGeometry;exports.DodecahedronGeometry=DodecahedronGeometry;exports.DodecahedronBufferGeometry=DodecahedronBufferGeometry;exports.PolyhedronGeometry=PolyhedronGeometry;exports.PolyhedronBufferGeometry=PolyhedronBufferGeometry;exports.TubeGeometry=TubeGeometry;exports.TubeBufferGeometry=TubeBufferGeometry;exports.TorusKnotGeometry=TorusKnotGeometry;exports.TorusKnotBufferGeometry=TorusKnotBufferGeometry;exports.TorusGeometry=TorusGeometry;exports.TorusBufferGeometry=TorusBufferGeometry;exports.TextGeometry=TextGeometry;exports.TextBufferGeometry=TextBufferGeometry;exports.SphereGeometry=SphereGeometry;exports.SphereBufferGeometry=SphereBufferGeometry;exports.RingGeometry=RingGeometry;exports.RingBufferGeometry=RingBufferGeometry;exports.PlaneGeometry=PlaneGeometry;exports.PlaneBufferGeometry=PlaneBufferGeometry;exports.LatheGeometry=LatheGeometry;exports.LatheBufferGeometry=LatheBufferGeometry;exports.ShapeGeometry=ShapeGeometry;exports.ShapeBufferGeometry=ShapeBufferGeometry;exports.ExtrudeGeometry=ExtrudeGeometry;exports.ExtrudeBufferGeometry=ExtrudeBufferGeometry;exports.EdgesGeometry=EdgesGeometry;exports.ConeGeometry=ConeGeometry;exports.ConeBufferGeometry=ConeBufferGeometry;exports.CylinderGeometry=CylinderGeometry;exports.CylinderBufferGeometry=CylinderBufferGeometry;exports.CircleGeometry=CircleGeometry;exports.CircleBufferGeometry=CircleBufferGeometry;exports.BoxGeometry=BoxGeometry;exports.BoxBufferGeometry=BoxBufferGeometry;exports.ShadowMaterial=ShadowMaterial;exports.SpriteMaterial=SpriteMaterial;exports.RawShaderMaterial=RawShaderMaterial;exports.ShaderMaterial=ShaderMaterial;exports.PointsMaterial=PointsMaterial;exports.MeshPhysicalMaterial=MeshPhysicalMaterial;exports.MeshStandardMaterial=MeshStandardMaterial;exports.MeshPhongMaterial=MeshPhongMaterial;exports.MeshToonMaterial=MeshToonMaterial;exports.MeshNormalMaterial=MeshNormalMaterial;exports.MeshLambertMaterial=MeshLambertMaterial;exports.MeshDepthMaterial=MeshDepthMaterial;exports.MeshDistanceMaterial=MeshDistanceMaterial;exports.MeshBasicMaterial=MeshBasicMaterial;exports.MeshMatcapMaterial=MeshMatcapMaterial;exports.LineDashedMaterial=LineDashedMaterial;exports.LineBasicMaterial=LineBasicMaterial;exports.Material=Material;exports.Float64BufferAttribute=Float64BufferAttribute;exports.Float32BufferAttribute=Float32BufferAttribute;exports.Uint32BufferAttribute=Uint32BufferAttribute;exports.Int32BufferAttribute=Int32BufferAttribute;exports.Uint16BufferAttribute=Uint16BufferAttribute;exports.Int16BufferAttribute=Int16BufferAttribute;exports.Uint8ClampedBufferAttribute=Uint8ClampedBufferAttribute;exports.Uint8BufferAttribute=Uint8BufferAttribute;exports.Int8BufferAttribute=Int8BufferAttribute;exports.BufferAttribute=BufferAttribute;exports.ArcCurve=ArcCurve;exports.CatmullRomCurve3=CatmullRomCurve3;exports.CubicBezierCurve=CubicBezierCurve;exports.CubicBezierCurve3=CubicBezierCurve3;exports.EllipseCurve=EllipseCurve;exports.LineCurve=LineCurve;exports.LineCurve3=LineCurve3;exports.QuadraticBezierCurve=QuadraticBezierCurve;exports.QuadraticBezierCurve3=QuadraticBezierCurve3;exports.SplineCurve=SplineCurve;exports.REVISION=REVISION;exports.MOUSE=MOUSE;exports.CullFaceNone=CullFaceNone;exports.CullFaceBack=CullFaceBack;exports.CullFaceFront=CullFaceFront;exports.CullFaceFrontBack=CullFaceFrontBack;exports.FrontFaceDirectionCW=FrontFaceDirectionCW;exports.FrontFaceDirectionCCW=FrontFaceDirectionCCW;exports.BasicShadowMap=BasicShadowMap;exports.PCFShadowMap=PCFShadowMap;exports.PCFSoftShadowMap=PCFSoftShadowMap;exports.FrontSide=FrontSide;exports.BackSide=BackSide;exports.DoubleSide=DoubleSide;exports.FlatShading=FlatShading;exports.SmoothShading=SmoothShading;exports.NoColors=NoColors;exports.FaceColors=FaceColors;exports.VertexColors=VertexColors;exports.NoBlending=NoBlending;exports.NormalBlending=NormalBlending;exports.AdditiveBlending=AdditiveBlending;exports.SubtractiveBlending=SubtractiveBlending;exports.MultiplyBlending=MultiplyBlending;exports.CustomBlending=CustomBlending;exports.AddEquation=AddEquation;exports.SubtractEquation=SubtractEquation;exports.ReverseSubtractEquation=ReverseSubtractEquation;exports.MinEquation=MinEquation;exports.MaxEquation=MaxEquation;exports.ZeroFactor=ZeroFactor;exports.OneFactor=OneFactor;exports.SrcColorFactor=SrcColorFactor;exports.OneMinusSrcColorFactor=OneMinusSrcColorFactor;exports.SrcAlphaFactor=SrcAlphaFactor;exports.OneMinusSrcAlphaFactor=OneMinusSrcAlphaFactor;exports.DstAlphaFactor=DstAlphaFactor;exports.OneMinusDstAlphaFactor=OneMinusDstAlphaFactor;exports.DstColorFactor=DstColorFactor;exports.OneMinusDstColorFactor=OneMinusDstColorFactor;exports.SrcAlphaSaturateFactor=SrcAlphaSaturateFactor;exports.NeverDepth=NeverDepth;exports.AlwaysDepth=AlwaysDepth;exports.LessDepth=LessDepth;exports.LessEqualDepth=LessEqualDepth;exports.EqualDepth=EqualDepth;exports.GreaterEqualDepth=GreaterEqualDepth;exports.GreaterDepth=GreaterDepth;exports.NotEqualDepth=NotEqualDepth;exports.MultiplyOperation=MultiplyOperation;exports.MixOperation=MixOperation;exports.AddOperation=AddOperation;exports.NoToneMapping=NoToneMapping;exports.LinearToneMapping=LinearToneMapping;exports.ReinhardToneMapping=ReinhardToneMapping;exports.Uncharted2ToneMapping=Uncharted2ToneMapping;exports.CineonToneMapping=CineonToneMapping;exports.UVMapping=UVMapping;exports.CubeReflectionMapping=CubeReflectionMapping;exports.CubeRefractionMapping=CubeRefractionMapping;exports.EquirectangularReflectionMapping=EquirectangularReflectionMapping;exports.EquirectangularRefractionMapping=EquirectangularRefractionMapping;exports.SphericalReflectionMapping=SphericalReflectionMapping;exports.CubeUVReflectionMapping=CubeUVReflectionMapping;exports.CubeUVRefractionMapping=CubeUVRefractionMapping;exports.RepeatWrapping=RepeatWrapping;exports.ClampToEdgeWrapping=ClampToEdgeWrapping;exports.MirroredRepeatWrapping=MirroredRepeatWrapping;exports.NearestFilter=NearestFilter;exports.NearestMipMapNearestFilter=NearestMipMapNearestFilter;exports.NearestMipMapLinearFilter=NearestMipMapLinearFilter;exports.LinearFilter=LinearFilter;exports.LinearMipMapNearestFilter=LinearMipMapNearestFilter;exports.LinearMipMapLinearFilter=LinearMipMapLinearFilter;exports.UnsignedByteType=UnsignedByteType;exports.ByteType=ByteType;exports.ShortType=ShortType;exports.UnsignedShortType=UnsignedShortType;exports.IntType=IntType;exports.UnsignedIntType=UnsignedIntType;exports.FloatType=FloatType;exports.HalfFloatType=HalfFloatType;exports.UnsignedShort4444Type=UnsignedShort4444Type;exports.UnsignedShort5551Type=UnsignedShort5551Type;exports.UnsignedShort565Type=UnsignedShort565Type;exports.UnsignedInt248Type=UnsignedInt248Type;exports.AlphaFormat=AlphaFormat;exports.RGBFormat=RGBFormat;exports.RGBAFormat=RGBAFormat;exports.LuminanceFormat=LuminanceFormat;exports.LuminanceAlphaFormat=LuminanceAlphaFormat;exports.RGBEFormat=RGBEFormat;exports.DepthFormat=DepthFormat;exports.DepthStencilFormat=DepthStencilFormat;exports.RedFormat=RedFormat;exports.RGB_S3TC_DXT1_Format=RGB_S3TC_DXT1_Format;exports.RGBA_S3TC_DXT1_Format=RGBA_S3TC_DXT1_Format;exports.RGBA_S3TC_DXT3_Format=RGBA_S3TC_DXT3_Format;exports.RGBA_S3TC_DXT5_Format=RGBA_S3TC_DXT5_Format;exports.RGB_PVRTC_4BPPV1_Format=RGB_PVRTC_4BPPV1_Format;exports.RGB_PVRTC_2BPPV1_Format=RGB_PVRTC_2BPPV1_Format;exports.RGBA_PVRTC_4BPPV1_Format=RGBA_PVRTC_4BPPV1_Format;exports.RGBA_PVRTC_2BPPV1_Format=RGBA_PVRTC_2BPPV1_Format;exports.RGB_ETC1_Format=RGB_ETC1_Format;exports.RGBA_ASTC_4x4_Format=RGBA_ASTC_4x4_Format;exports.RGBA_ASTC_5x4_Format=RGBA_ASTC_5x4_Format;exports.RGBA_ASTC_5x5_Format=RGBA_ASTC_5x5_Format;exports.RGBA_ASTC_6x5_Format=RGBA_ASTC_6x5_Format;exports.RGBA_ASTC_6x6_Format=RGBA_ASTC_6x6_Format;exports.RGBA_ASTC_8x5_Format=RGBA_ASTC_8x5_Format;exports.RGBA_ASTC_8x6_Format=RGBA_ASTC_8x6_Format;exports.RGBA_ASTC_8x8_Format=RGBA_ASTC_8x8_Format;exports.RGBA_ASTC_10x5_Format=RGBA_ASTC_10x5_Format;exports.RGBA_ASTC_10x6_Format=RGBA_ASTC_10x6_Format;exports.RGBA_ASTC_10x8_Format=RGBA_ASTC_10x8_Format;exports.RGBA_ASTC_10x10_Format=RGBA_ASTC_10x10_Format;exports.RGBA_ASTC_12x10_Format=RGBA_ASTC_12x10_Format;exports.RGBA_ASTC_12x12_Format=RGBA_ASTC_12x12_Format;exports.LoopOnce=LoopOnce;exports.LoopRepeat=LoopRepeat;exports.LoopPingPong=LoopPingPong;exports.InterpolateDiscrete=InterpolateDiscrete;exports.InterpolateLinear=InterpolateLinear;exports.InterpolateSmooth=InterpolateSmooth;exports.ZeroCurvatureEnding=ZeroCurvatureEnding;exports.ZeroSlopeEnding=ZeroSlopeEnding;exports.WrapAroundEnding=WrapAroundEnding;exports.TrianglesDrawMode=TrianglesDrawMode;exports.TriangleStripDrawMode=TriangleStripDrawMode;exports.TriangleFanDrawMode=TriangleFanDrawMode;exports.LinearEncoding=LinearEncoding;exports.sRGBEncoding=sRGBEncoding;exports.GammaEncoding=GammaEncoding;exports.RGBEEncoding=RGBEEncoding;exports.LogLuvEncoding=LogLuvEncoding;exports.RGBM7Encoding=RGBM7Encoding;exports.RGBM16Encoding=RGBM16Encoding;exports.RGBDEncoding=RGBDEncoding;exports.BasicDepthPacking=BasicDepthPacking;exports.RGBADepthPacking=RGBADepthPacking;exports.TangentSpaceNormalMap=TangentSpaceNormalMap;exports.ObjectSpaceNormalMap=ObjectSpaceNormalMap;exports.CubeGeometry=BoxGeometry;exports.Face4=Face4;exports.LineStrip=LineStrip;exports.LinePieces=LinePieces;exports.MeshFaceMaterial=MeshFaceMaterial;exports.MultiMaterial=MultiMaterial;exports.PointCloud=PointCloud;exports.Particle=Particle;exports.ParticleSystem=ParticleSystem;exports.PointCloudMaterial=PointCloudMaterial;exports.ParticleBasicMaterial=ParticleBasicMaterial;exports.ParticleSystemMaterial=ParticleSystemMaterial;exports.Vertex=Vertex;exports.DynamicBufferAttribute=DynamicBufferAttribute;exports.Int8Attribute=Int8Attribute;exports.Uint8Attribute=Uint8Attribute;exports.Uint8ClampedAttribute=Uint8ClampedAttribute;exports.Int16Attribute=Int16Attribute;exports.Uint16Attribute=Uint16Attribute;exports.Int32Attribute=Int32Attribute;exports.Uint32Attribute=Uint32Attribute;exports.Float32Attribute=Float32Attribute;exports.Float64Attribute=Float64Attribute;exports.ClosedSplineCurve3=ClosedSplineCurve3;exports.SplineCurve3=SplineCurve3;exports.Spline=Spline;exports.AxisHelper=AxisHelper;exports.BoundingBoxHelper=BoundingBoxHelper;exports.EdgesHelper=EdgesHelper;exports.WireframeHelper=WireframeHelper;exports.XHRLoader=XHRLoader;exports.BinaryTextureLoader=BinaryTextureLoader;exports.GeometryUtils=GeometryUtils;exports.Projector=Projector;exports.CanvasRenderer=CanvasRenderer;exports.SceneUtils=SceneUtils;exports.LensFlare=LensFlare;Object.defineProperty(exports,'__esModule',{value:true});});

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.

var THREE = __webpack_require__(1);

var GameStore = __webpack_require__(0);

// Rotate an object around an arbitrary axis in object space
function rotateAroundObjectAxis(object, axis, radians) {
    var rotObjectMatrix = new THREE.Matrix4();
    rotObjectMatrix.makeRotationAxis(axis.normalize(), radians);
    object.matrix.multiply(rotObjectMatrix);
    object.rotation.setFromRotationMatrix(object.matrix);
}

// Rotate an object around an arbitrary axis in world space       
function rotateAroundWorldAxis(objectMatrix, objectRotation, axis, radians) {
    var rotWorldMatrix = new THREE.Matrix4();
    rotWorldMatrix.makeRotationAxis(axis.normalize(), radians);
    rotWorldMatrix.multiply(objectMatrix); // pre-multiply
    objectMatrix = rotWorldMatrix;
    objectRotation.setFromRotationMatrix(objectMatrix);
}
module.exports.rotateAroundWorldAxis = rotateAroundWorldAxis;

function GetDistance(v1, v2) {
    var dx = v1.x - v2.x;
    var dy = v1.y - v2.y;
    var dz = v1.z - v2.z;
    return Math.sqrt(dx * dx + dy * dy + dz * dz);
}

module.exports.GetDistance = GetDistance;

function UniqueArr(a) {
    var temp = {};
    for (var i = 0; i < a.length; i++) {
        temp[a[i]] = true;
    }

    var r = [];
    for (var k in temp) {
        r.push(k);
    }

    return r;
}

function timeStamp() {
    var now = new Date();
    var date = [now.getMonth() + 1, now.getDate(), now.getFullYear()];
    var time = [now.getHours(), now.getMinutes(), now.getSeconds()];
    time[0] = time[0] < 12 ? time[0] : time[0] - 12;
    time[0] = time[0] || 12;
    for (var i = 1; i < 3; i++) {
        if (time[i] < 10) {
            time[i] = "0" + time[i];
        }
    }

    return date.join("/") + " " + time.join(":");
}

function Log(msg) {

    if ((typeof msg === "undefined" ? "undefined" : _typeof(msg)) !== "object") {
        console.log("[" + timeStamp() + "] " + msg);
    } else {
        console.log(msg);
    }
}

module.exports.Log = Log;

THREE.PerspectiveCamera.prototype.setRotateX = function (deg) {
    if (typeof deg === "number" && parseInt(deg) === deg) {
        this.rotation.x = deg * (Math.PI / 180);
    }
};

THREE.PerspectiveCamera.prototype.setRotateY = function (deg) {
    if (typeof deg === "number" && parseInt(deg) === deg) {
        this.rotation.y = deg * (Math.PI / 180);
    }
};

THREE.PerspectiveCamera.prototype.setRotateZ = function (deg) {
    if (typeof deg === "number" && parseInt(deg) === deg) {
        this.rotation.z = deg * (Math.PI / 180);
    }
};

THREE.PerspectiveCamera.prototype.getRotateX = function () {
    return Math.round(this.rotation.x * (180 / Math.PI));
};

THREE.PerspectiveCamera.prototype.getRotateY = function () {
    return Math.round(this.rotation.y * (180 / Math.PI));
};

THREE.PerspectiveCamera.prototype.getRotateZ = function () {
    return Math.round(this.rotation.z * (180 / Math.PI));
};

function MsgBoard(msg) {}

function CreateBoundingBox2(obj) {
    var object3D = obj.mesh;
    var box = null;
    object3D.geometry.computeBoundingBox();
    box = geometry.boundingBox;

    var x = box.max.x - box.min.x;
    var y = box.max.y - box.min.y;
    var z = box.max.z - box.min.z;

    obj.bbox = box;

    var bcube = new THREE.Mesh(new THREE.BoxGeometry(x, y, z), new THREE.MeshNormalMaterial({ visible: false, wireframe: true, color: 0xAA3333 }));

    GameStore.GameInstance.scene.add(bcube);

    var bboxCenter = new THREE.Vector3();
    box.getCenter(bboxCenter);
    bcube.translateX(bboxCenter.x);
    bcube.translateY(bboxCenter.y);
    bcube.translateZ(bboxCenter.z);
    obj.bcube = bcube;
    object3D.add(bcube);

    bcube.that = obj.mesh.that;
}

function CreateBoundingBox(obj) {
    var object3D = obj.mesh;
    var box = null;
    object3D.traverse(function (obj3D) {
        var geometry = obj3D.geometry;
        if (geometry === undefined) {
            return;
        }

        geometry.computeBoundingBox();

        if (box === null) {
            box = geometry.boundingBox;
        } else {
            box.union(geometry.boundingBox);
        }
    });

    var x = box.max.x - box.min.x;
    var y = box.max.y - box.min.y;
    var z = box.max.z - box.min.z;

    obj.bbox = box;

    var bcube = new THREE.Mesh(new THREE.BoxGeometry(x, y, z), new THREE.MeshNormalMaterial({ visible: false, wireframe: true, color: 0xAA3333 }));

    var bboxCenter = new THREE.Vector3();
    bboxCenter = box.getCenter(bboxCenter);

    bcube.translateX(bboxCenter.x);
    bcube.translateY(bboxCenter.y);
    bcube.translateZ(bboxCenter.z);
    obj.bcube = bcube;
    object3D.add(bcube);

    bcube.that = obj.mesh.that;

    GameStore.GameInstance.targets.push(bcube);
    //    return bcube
}

/**
 * @description Convert color to 0x000000 formated hex color
 * @param {number} r Whole number between 0 and 255
 * @param {number} g Whole number between 0 and 255
 * @param {number} b Whole number between 0 and 255
 * @return {number} Returns converted color to 0x000000 format
 */
function rgbToHex(r, g, b) {
    if (r < 0) {
        r = 0;
    }

    if (g < 0) {
        g = 0;
    }

    return "0x" + componentToHex(r) + componentToHex(g) + componentToHex(b);
}
module.exports.rgbToHex = rgbToHex;

/**
 * @description Convert color to #000000 formated hex color
 * @param {number} r Whole number between 0 and 255
 * @param {number} g Whole number between 0 and 255
 * @param {number} b Whole number between 0 and 255
 * @return {number} Returns converted color to #000000 format
 */
function rgbToHex2(r, g, b) {
    if (r < 0) {
        r = 0;
    }

    if (g < 0) {
        g = 0;
    }

    return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b);
}
module.exports.rgbToHex2 = rgbToHex2;

function componentToHex(c) {
    var hex = c.toString(16);
    return hex.length === 1 ? "0" + hex : hex;
}

function GetWorldYVector(vector) {
    var world = GameStore.GameInstance.terrain.GetNoise();
    var x = Math.round(vector.x / 10) + world.length / 2;
    var z = Math.round(vector.z / 10) + world.length / 2;
    var y = 0;
    if (x < world.length - 1) {
        if (world[x] !== undefined && z < world[x].length - 1) {
            y = world[x][z] * 200;
        }
    } else {
        y = 0;
    }

    return y;
}

function GetWorldY(mesh) {
    var world = GameStore.GameInstance.terrain.GetNoise();
    var x = Math.round(mesh.position.x / 10) + world.length / 2;
    var z = Math.round(mesh.position.z / 10) + world.length / 2;
    var y = 0;

    if (x < world.length - 1) {
        if (world[x] !== undefined && z < world[x].length - 1) {
            y = world[x][z] * 200;
        }
    } else {
        y = 0;
    }

    return y;
}

// Interp value from start to end multiplied by dt and speed
function interpTo(start, end, speed, dt) {
    return start + speed * dt * (end - start);
}
module.exports.interpTo = interpTo;

/**
 * @description Lerp start to end based on percent.
 * @param {number} start Value you're lerping from.
 * @param {number} end Value you're lerping to.
 * @param {number} percent Percent to lerp toward end. 0 will utilize 100% of start value, 1 will utilize 100% of end value.
 * @return {number}  Returns value between start and end based on percent.
 */
function Lerp(start, end, percent) {
    return (1 - percent) * start + percent * end;
}
module.exports.Lerp = Lerp;

/**
 * @description Returns a value from 0 to num - 1
 * @param {number} num The number of random integers you would like returned.  
 * @return {number} Returns a value from 0 to num - 1
 */
function RandomInt(num) {
    return Math.floor(Math.random() * num);
}
module.exports.RandomInt = RandomInt;

/**
 * @description Returns a random number between min & max
 * @param {number} min A minimum value integer
 * @param {number} max A maximum value integer
 * @return {number} Returns a random int between min & max
 */
function RandomRange(min, max) {
    return min + Math.random() * (max - min);
}
module.exports.RandomRange = RandomRange;

/**
 * @description Returns a random int between min & max
 * @param {number} min A minimum value integer
 * @param {number} max A maximum value integer
 * @return {number} Returns a random int between min & max
 */
function RandomRangeInt(min, max) {
    return Math.floor(min) + RandomInt(max - min);
}
module.exports.RandomRangeInt = RandomRangeInt;

/**
 * @description Returns 1 or -1
 * @return {number} Returns 1 or -1
 */
function RandomSign() {
    return Math.round(Math.random()) * 2 - 1;
}
module.exports.RandomSign = RandomSign;

/**
 * @description Given a number returns a number between min & max
 * @param {number} value The number to clamp
 * @param {number} min A minimum value integer
 * @param {number} max A maximum value integer
 * @return {number} Returns a number between min & max
 */
function Clamp(value, min, max) {
    return Math.min(Math.max(value, min), max);
}
module.exports.Clamp = Clamp;

/**
 * @description Check if two floating point values are nearly equal
 * @param {number} v1 Value to compare
 * @param {number} v2 Other value to compare
 * @param {number} tolerance Range to be within
 * @return {boolean} Returns true if within threshold
 */
function NearlyEqual(v1, v2, tolerance) {
    if (tolerance === null) {
        tolerance = 0.001;
    }

    return Math.abs(v1 - v2) < tolerance;
}
module.exports.NearlyEqual = NearlyEqual;

/**
 * @description Converts a value in degrees to radians
 * @param {number} value Value in degrees
 * @return {number} Returns a value in radians
 */
function DegToRad(value) {
    return value * Math.PI / 180;
}
module.exports.DegToRad = DegToRad;

/**
 * @description Converts a value in radians to degrees
 * @param {number} value Value in radians
 * @return {number} Returns a value in degrees
 */
function RadToDeg(value) {
    return value * 180 / Math.PI;
}
module.exports.RadToDeg = RadToDeg;

/**
 * @description Finds the forward vector of a Object3D
 * @param {Object} object Object3D to find forward vector on
 * @return {Object} Unit vector of the forward direction
 */
function GetForwardVector(object) {
    var quaternion = new THREE.Quaternion();
    var direction = new THREE.Vector3();

    object.getWorldQuaternion(quaternion);
    direction.set(0, -1, 0).applyQuaternion(quaternion);

    return direction;
}
module.exports.GetForwardVector = GetForwardVector;

/**
 * @description Finds the right vector of a Object3D
 * @param {Object} object Object3D to find right vector on
 * @return {Object} Unit vector of the right direction
 */
function GetRightVector(object) {
    var quaternion = new THREE.Quaternion();
    var direction = new THREE.Vector3();

    object.getWorldQuaternion(quaternion);
    direction.set(1, 0, 0).applyQuaternion(quaternion);

    return direction;
}
module.exports.GetRightVector = GetRightVector;

function ReleasePointer() {
    var instructions = document.getElementsByTagName("body")[0];
    instructions.removeEventListener("click", instrClick);
    keys_enabled = 0;
    document.exitPointerLock = document.exitPointerLock || document.mozExitPointerLock || document.webkitExitPointerLock;
    document.exitPointerLock();
}
module.exports.ReleasePointer = ReleasePointer;

// http://www.html5rocks.com/en/tutorials/pointerlock/intro/
function LockPointer() {
    var instructions = document.getElementsByTagName("body")[0];

    var havePointerLock = "pointerLockElement" in document || "mozPointerLockElement" in document || "webkitPointerLockElement" in document;
    if (havePointerLock) {
        var element = document.body;
        var pointerlockchange = function pointerlockchange(event) {
            if (document.pointerLockElement === element || document.mozPointerLockElement === element || document.webkitPointerLockElement === element) {
                keys_enabled = 1;
                return;
            } else {
                keys_enabled = 0;
            }
        };

        document.addEventListener("pointerlockchange", pointerlockchange, false);
        document.addEventListener("mozpointerlockchange", pointerlockchange, false);
        document.addEventListener("webkitpointerlockchange", pointerlockchange, false);
        instructions.addEventListener("click", instrClick, false);
    }
}
module.exports.LockPointer = LockPointer;

function instrClick(event) {
    var element = document.body;
    keys_enabled = 1;
    element.requestPointerLock = element.requestPointerLock || element.mozRequestPointerLock || element.webkitRequestPointerLock;
    element.requestPointerLock();
}

function BufferLoader(context, urlList, callback) {
    this.context = context;
    this.urlList = urlList;
    this.onload = callback;
    this.bufferList = new Array();
    this.loadCount = 0;
}
module.exports.BufferLoader = BufferLoader;

function fadeOut(elementToFade, time) {
    elementToFade.style.opacity = 1;

    var last = new Date();
    var tick = function tick() {
        elementToFade.style.opacity = elementToFade.style.opacity - (new Date() - last) / time;
        last = new Date();

        if (elementToFade.style.opacity > 0) {
            setTimeout(tick, 16);
        }
    };

    tick();
}
module.exports.fadeOut = fadeOut;

/**
 * @description Given a value from 0 to 1, convert to quadratic for easing in and out
 * @param {number} x Our value
 * @return {number} Returns a number from 0 to 1 in quadratic form
 */
function EaseInOutQuad(x) {
    return x * x * (3 - 2 * x);
}
module.exports.EaseInOutQuad = EaseInOutQuad;

/**
 * @description Given a value from 0 to 1, convert to cubic for easing in and out
 * @param {number} x Our value
 * @return {number} Returns a number from 0 to 1 in cubic form
 */
function EaseInOutCubic(x) {
    return x < 0.5 ? 4 * x * x * x : (x - 1) * (2 * x - 2) * (2 * x - 2) + 1;
}
module.exports.EaseInOutCubic = EaseInOutCubic;

/**
 * @description Remap a range of values to another range
 * @param {number} value Our value to remap
 * @param {number} inRangeMin The min range of our input value
 * @param {number} inRangeMax The max range of our input value
 * @param {number} outRangeMin The min range of our output value
 * @param {number} outRangeMax The max range of our output value
 * @return {number} Returns a number remapped to the new range
 */
function MapRange(value, inRangeMin, inRangeMax, outRangeMin, outRangeMax) {
    return outRangeMin + (outRangeMax - outRangeMin) * (value - inRangeMin) / (inRangeMax - inRangeMin);
}
module.exports.MapRange = MapRange;

/**
 * @description Remap a range of values to another range, with the bounds clamped by the new range
 * @param {number} value Our value to remap
 * @param {number} inRangeMin The min range of our input value
 * @param {number} inRangeMax The max range of our input value
 * @param {number} outRangeMin The min range of our output value
 * @param {number} outRangeMax The max range of our output value
 * @return {number} Returns a number remapped to the new range
 */
function MapRangeClamped(value, inRangeMin, inRangeMax, outRangeMin, outRangeMax) {
    return Clamp(MapRange(value, inRangeMin, inRangeMax, outRangeMin, outRangeMax), outRangeMin, outRangeMax);
}
module.exports.MapRangeClamped = MapRangeClamped;

/**
 * @description Creates a debug line object
 * @param {Object} posStart Vector3 of the start position
 * @param {Object} posEnd Vector3 of the end position
 * @param {number} lineColor Colorof the line in hex
 * @return {number} Returns debug line object
 */
function CreateDebugLine(posStart, posEnd, lineColor) {
    var material = new THREE.LineBasicMaterial({ color: lineColor });

    var geometry = new THREE.Geometry();
    geometry.vertices.push(posStart);
    geometry.vertices.push(posEnd);

    var line = new THREE.Line(geometry, material);
    GameStore.GameInstance.scene.add(line);

    return line;
}
module.exports.CreateDebugLine = CreateDebugLine;

/**
 * @description Creates a debug line object
 * @param {Object} pos Vector3 of the start position
 * @param {number} radius Radius of sphere
 * @param {number} color Color of the sphere in hex
 * @return {number} Returns debug sphere mesh
 */
function CreateDebugSphere(pos, radius, color) {
    var material = new THREE.MeshBasicMaterial({
        color: color,
        wireframe: true
    });
    var geometry = new THREE.SphereGeometry(radius, 6, 6);

    var sphere = new THREE.Mesh(geometry, material);
    sphere.position.copy(pos);

    GameStore.GameInstance.scene.add(sphere);

    return sphere;
}
module.exports.CreateDebugSphere = CreateDebugSphere;

BufferLoader.prototype.loadBuffer = function (url, index) {
    // Load buffer asynchronously
    //console.log("URL: "+url)
    var request = new XMLHttpRequest();
    request.open("GET", url, true);
    request.responseType = "arraybuffer";

    var loader = this;

    request.onload = function () {
        // Asynchronously decode the audio file data in request.response
        loader.context.decodeAudioData(request.response, function (buffer) {
            if (!buffer) {
                alert("error decoding file data: " + url);
                return;
            }
            loader.bufferList[index] = buffer;
            if (++loader.loadCount === loader.urlList.length) {
                loader.onload(loader.bufferList);
            }
        }, function (error) {
            console.log("ERROR FOR URL: " + url);
            console.log("decodeAudioData error", error);
        });
    };

    request.onerror = function () {
        alert("BufferLoader: XHR error");
    };

    request.send();
};

BufferLoader.prototype.load = function () {
    for (var i = 0; i < this.urlList.length; ++i) {
        this.loadBuffer(this.urlList[i], i);
    }
};

module.exports.convertTimeMsToString = function (milliseconds) {
    var date = new Date(null);
    date.setMilliseconds(milliseconds);
    return date.toISOString().substr(11, 11);
};

module.exports.getPaletteColorIndex = function (r, g, b) {
    var minDist = Infinity;
    var retIndex = undefined;
    var paletteInfo = GameStore.GameInstance.stampManager.getPalette();
    for (var i = 0; i < paletteInfo.length; ++i) {
        var colorInfo = paletteInfo[i];
        var dist = getColorDist(r, g, b, colorInfo.r * 255, colorInfo.g * 255, colorInfo.b * 255);
        if (dist < minDist) {
            minDist = dist;
            retIndex = i;
        }
    }

    return retIndex;
};

function getColorDist(r1, g1, b1, r2, g2, b2) {
    var dr = r1 - r2;
    var dg = g1 - g2;
    var db = b1 - b2;

    // Scale color importance based on eye perception
    // https://web.archive.org/web/20100316195057/http://www.dfanning.com/ip_tips/color2gray.html
    return .3 * dr * dr + .59 * dg * dg + .11 * db * db;
}

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function (useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if (item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function (modules, mediaQuery) {
		if (typeof modules === "string") modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for (var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if (typeof id === "number") alreadyImportedModules[id] = true;
		}
		for (i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if (typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if (mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if (mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */';
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getElement = (function (fn) {
	var memo = {};

	return function(selector) {
		if (typeof memo[selector] === "undefined") {
			var styleTarget = fn.call(this, selector);
			// Special case to return head of iframe instead of iframe itself
			if (styleTarget instanceof window.HTMLIFrameElement) {
				try {
					// This will throw an exception if access to iframe is blocked
					// due to cross-origin restrictions
					styleTarget = styleTarget.contentDocument.head;
				} catch(e) {
					styleTarget = null;
				}
			}
			memo[selector] = styleTarget;
		}
		return memo[selector]
	};
})(function (target) {
	return document.querySelector(target)
});

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(72);

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton && typeof options.singleton !== "boolean") options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
	if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else if (typeof options.insertAt === "object" && options.insertAt.before) {
		var nextSibling = getElement(options.insertInto + " " + options.insertAt.before);
		target.insertBefore(style, nextSibling);
	} else {
		throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	options.attrs.type = "text/css";

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	options.attrs.type = "text/css";
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = options.transform(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (process.env.NODE_ENV === 'production') {
  module.exports = __webpack_require__(73);
} else {
  module.exports = __webpack_require__(74);
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

// Because of the Multiple Universe Theory, Confirmed by Andrew McPherson on 10/11/2018,
// we are now using one and only one definition of
if (window.masterNimbleClient) {
    module.exports = window.masterNimbleClient;
} else {
    module.exports.uri = __webpack_require__(92);
    module.exports.logger = __webpack_require__(44);
    module.exports.hubble = __webpack_require__(93);
    module.exports.bits = __webpack_require__(103);
    module.exports.twitch = __webpack_require__(48);
    module.exports.twitchsparks = __webpack_require__(108);
    module.exports.arcade = __webpack_require__(110);
    module.exports.experiments = __webpack_require__(111);
    module.exports.nexus = __webpack_require__(119);
    module.exports.errors = __webpack_require__(120);
    module.exports.audio = __webpack_require__(121);
    module.exports.network = __webpack_require__(123);

    module.exports.utility = {
        "flattenLocXML": __webpack_require__(126)
    };

    module.exports.views = {
        "Leaderboard": __webpack_require__(127),
        "BrowsableLeaderboard": __webpack_require__(130)
    };

    module.exports.extension = {
        "instance": "ARCADE" // the default
    };
    window.masterNimbleClient = module.exports;
}

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var THREE = __webpack_require__(1);
var Utils = __webpack_require__(2);
var GameStore = __webpack_require__(0);

var DEFAULT_SOUND_RADIUS = 60.0;

var CHANNELS = Object.freeze({
    DEFAULT: 0,
    ENEMY_IDLES: 1,
    ENEMY_IDLES_MED: 2,
    ENEMY_IDLES_BIG: 3,
    WEAPONS: 4
});
module.exports.CHANNELS = CHANNELS;

var ChannelSettings = [{ name: CHANNELS.DEFAULT, max: Infinity, current: 0 }, { name: CHANNELS.ENEMY_IDLES, max: 3, current: 0 }, { name: CHANNELS.ENEMY_IDLES_MED, max: 3, current: 0 }, { name: CHANNELS.ENEMY_IDLES_BIG, max: 3, current: 0 }, { name: CHANNELS.WEAPONS, max: 9, current: 0 }];
module.exports.ChannelSettings = ChannelSettings;

module.exports.debugData = {
    loadCount: 0,
    destroyCount: 0
};

var AudioPool = function () {
    function AudioPool() {
        _classCallCheck(this, AudioPool);

        this.poolList = [];
        this.freeIndexList = [];
    }

    _createClass(AudioPool, [{
        key: "getAudio",
        value: function getAudio() {
            if (this.freeIndexList.length === 0) {
                var audio = new THREE.Audio(global.listener);

                this.poolList.push(audio);

                return audio;
            } else {
                var index = this.freeIndexList.pop();
                return this.poolList[index];
            }
        }
    }, {
        key: "freeAudio",
        value: function freeAudio(audio) {
            var index = this.poolList.indexOf(audio);
            if (index !== -1) {
                this.freeIndexList.push(index);
            }
        }
    }]);

    return AudioPool;
}();

var audioPool = new AudioPool();
module.exports.audioPool = audioPool;

var SoundShader = function () {
    /**
     * @constructor Use to create SoundShader and optionally load initial sound
     * @param {string} [fileName] Path to the sound file (supports wav, mp3)
     * @param {number} [radius] Distance the sound can be heard
     * @param {number} [volume] Value to set volume between 0 and 1
     * @param {number} [shaderVolume] Value to multiply volume for the entire shader
     * @param {Object} [position] THREE.Vector3 world position
     * @param {boolean} [looping] Use to set the initially loaded sound to loop
     * @param {boolean} [globalSound] Is the sound global? If so create non-positional sound
     * @param {Object} [channel] Optionally set sound channel
     * @param {boolean} [letPreviousSoundFinish] Option to allow previous sounds finish
     */
    function SoundShader(fileName, radius, volume, shaderVolume, position, looping, globalSound, channel, letPreviousSoundFinish) {
        _classCallCheck(this, SoundShader);

        this.sounds = [];
        this.fadeDeltaTime = 0.1; // Time between frames in seconds when fading
        this.fadeInterval = undefined; // Used to store fade interval function
        this.fileName = "";
        this.detune = 0;

        if (globalSound === undefined) {
            globalSound = true;
        }

        if (position === undefined && !globalSound) {
            position = new THREE.Vector3();
        }

        if (shaderVolume === undefined) {
            shaderVolume = 1;
        } else {
            shaderVolume = Utils.Clamp(shaderVolume, 0, 1);
        }

        if (!globalSound) {
            this.Object3D = new THREE.Object3D();
            this.Object3D.position.copy(position);
        }

        if (channel === undefined) {
            channel = CHANNELS.DEFAULT;
        }

        this.letPreviousSoundFinish = letPreviousSoundFinish === undefined ? false : letPreviousSoundFinish;

        // Shader volume scaler, multiplies with all sounds
        this.shaderVolume = shaderVolume;

        if (fileName !== undefined) {
            this.LoadSound(fileName, radius, volume, looping, globalSound, channel);
        }
    }

    /**
     * @description Use to load and add sounds to the shader
     * @param {string} fileName Path to the sound file (supports wav, mp3)
     * @param {number} [radius] Distance the sound can be heard
     * @param {number} [volume] Value to set volume
     * @param {boolean} [looping] Use to set the initially loaded sound to loop
     * @param {boolean} [globalSound] Is the sound global? If so create non-positional sound
     * @param {Object} [channel] Optionally set sound channel
     */


    _createClass(SoundShader, [{
        key: "LoadSound",
        value: function LoadSound(fileName, radius, volume, looping, globalSound, channel) {
            this.loading = true;
            this.fileName = fileName;

            if (!global.listener) {
                console.log("Cannot load sound " + fileName + " due to global listener being uninitialized");
                return;
            }

            if (globalSound === undefined) {
                globalSound = true;
            }

            var soundRef = undefined;
            if (globalSound) {
                soundRef = audioPool.getAudio();
            } else {
                soundRef = new THREE.PositionalAudio(global.listener);
            }

            if (radius === undefined && !globalSound) {
                radius = DEFAULT_SOUND_RADIUS;
            }

            if (volume === undefined) {
                volume = 1;
            } else {
                volume = Utils.Clamp(volume, 0, 1);
            }

            if (looping === undefined) {
                looping = false;
            }

            if (channel === undefined) {
                channel = CHANNELS.DEFAULT;
            }
            this.channel = channel;

            soundRef.loadVolume = volume; // Store starting volume

            global.LoadSound(fileName, soundRef, radius, volume * this.shaderVolume, looping, globalSound, this);
        }

        /**
         * @description Callback function used once a sound is finished loading
         * @param {Object} soundRef A reference to a THREE.PositionalAudio
         */

    }, {
        key: "Loaded",
        value: function Loaded(soundRef) {
            this.loading = false;

            if (soundRef) {
                // console.log("Successfully loaded " + this.fileName)

                // If positional sound, add new sounds to the shader world position
                if (this.Object3D) {
                    this.Object3D.add(soundRef);
                }

                ++module.exports.debugData.loadCount;
                this.sounds.push(soundRef);

                soundRef.onEnded = this.OnEnded.bind(this);
            }
        }
    }, {
        key: "OnEnded",
        value: function OnEnded() {
            if (this.currentSound !== undefined) {
                this.currentSound.isPlaying = false;
            }

            this.currentSound = undefined;

            if (ChannelSettings[this.channel].current > 0) {
                ChannelSettings[this.channel].current--;
            }
        }

        /**
         * @description Plays random sound within sound shader
         */

    }, {
        key: "Play",
        value: function Play() {
            if (this.sounds && this.sounds.length > 0) {
                var randomSoundIndex = void 0;
                var sound = void 0;
                var i = 0;

                // Try to avoid playing the same sound back to back if more than 1 available
                do {
                    randomSoundIndex = Utils.RandomInt(this.sounds.length);
                    sound = this.sounds[randomSoundIndex];
                    ++i;
                } while (sound === this.currentSound && this.sounds.length > 1 && i < this.sounds.length * 5);

                if (sound !== undefined) {
                    var newVolume = this.shaderVolume * sound.loadVolume;
                    if (sound.getVolume() !== newVolume) {
                        sound.setVolume(this.shaderVolume * sound.loadVolume);
                    }

                    // If sound is aleady playing then start over
                    if (sound.isPlaying) {
                        if (ChannelSettings[this.channel].current > 0) {
                            ChannelSettings[this.channel].current--;
                        }

                        sound.stop();
                        sound.isPlaying = false;
                    }

                    // If this.currentSound is aleady playing then start over
                    if (this.currentSound !== undefined && this.currentSound.isPlaying) {
                        if (ChannelSettings[this.channel].current > 0) {
                            ChannelSettings[this.channel].current--;
                        }

                        // Stop previous sound if specified or trying to play the same exact sound within a multi-sound shader
                        if (!this.letPreviousSoundFinish || sound === this.currentSound) {
                            this.currentSound.stop();
                        }

                        this.currentSound.isPlaying = false;
                    }

                    // console.log("Playing sound " + this.fileName)
                    this.currentSound = sound;
                    this.CheckFree();
                }
            }
        }
    }, {
        key: "CheckFree",
        value: function CheckFree() {
            if (this.currentSound !== undefined && this.sounds.length > 0) {
                if (ChannelSettings[this.channel].current < ChannelSettings[this.channel].max) {
                    ChannelSettings[this.channel].current++;
                    this.currentSound.detune = this.detune;
                    this.currentSound.play();
                } else {
                    setTimeout(this.CheckFree.bind(this), 33);
                }
            }
        }

        /**
         * @description Stops sound if it is playing
         */

    }, {
        key: "Stop",
        value: function Stop() {
            if (this.IsPlaying()) {
                this.currentSound.stop();
                this.currentSound.isPlaying = false;
            }

            if (this.currentSound !== undefined && ChannelSettings[this.channel].current > 0) {
                ChannelSettings[this.channel].current--;
            }

            this.currentSound = undefined;
        }

        /**
         * @description Sets volume on sound shader
         * @param {number} volume A number from 0 to 1 to set volume
         */

    }, {
        key: "SetShaderVolume",
        value: function SetShaderVolume(volume) {
            this.shaderVolume = Utils.Clamp(volume, 0, 1);

            // If any sound is playing set its volume
            if (this.IsPlaying()) {

                this.currentSound.setVolume(this.shaderVolume * this.currentSound.loadVolume);

                // If not audible then stop playing
                if (this.shaderVolume <= 0) {
                    if (ChannelSettings[this.channel].current > 0) {
                        ChannelSettings[this.channel].current--;
                    }

                    this.currentSound.stop();
                    this.currentSound.isPlaying = false;
                    this.currentSound = undefined;
                }
            }
        }

        /**
         * @description Finds if this shader is currently playing
         * @return {Object} Returns the playing sound
         */

    }, {
        key: "IsPlaying",
        value: function IsPlaying() {
            return this.currentSound !== undefined ? this.currentSound.isPlaying : false;
        }

        /**
         * @description Reduces shader volume to 0 over the specified duration
         * @param {number} duration Time to fade in seconds
         */

    }, {
        key: "FadeOut",
        value: function FadeOut(duration) {
            if (this.IsPlaying()) {
                // console.log("Fading out " + this.fileName + " to 0 over " + duration)
                this.FadeTo(duration, 0);
            }
        }

        /**
         * @description Fade in to desired volume
         * @param {number} duration Time to fade in seconds
         * @param {number} desiredVolume New desired volume
         */

    }, {
        key: "FadeIn",
        value: function FadeIn(duration, desiredVolume) {
            this.SetShaderVolume(0.01);
            this.Play();

            // console.log("Fading in " + this.fileName + " to " + desiredVolume + " over " + duration)
            this.FadeTo(duration, desiredVolume);
        }

        /**
         * @description Fades shader volume to new volume over the specified duration
         * @param {number} duration Time to fade in seconds
         * @param {number} desiredVolume New desired volume
         */

    }, {
        key: "FadeTo",
        value: function FadeTo(duration, desiredVolume) {
            var _this = this;

            // Cancel any existing fades
            if (this.fadeInterval) {
                clearInterval(this.fadeInterval);
                this.fadeInterval = undefined;
            }

            var numFrames = duration / this.fadeDeltaTime;
            var stepValue = (desiredVolume - this.shaderVolume) / numFrames;
            var intervalTimeMS = this.fadeDeltaTime * 1000;

            this.fadeInterval = setInterval(function () {
                var newVolume = _this.shaderVolume + stepValue;
                // console.log("newVolume: " + newVolume)
                _this.SetShaderVolume(newVolume);

                if (Utils.NearlyEqual(_this.shaderVolume, desiredVolume, 0.01)) {
                    _this.SetShaderVolume(desiredVolume);

                    if (desiredVolume === 0) {
                        _this.Stop();
                    }

                    clearInterval(_this.fadeInterval);
                    _this.fadeInterval = undefined;
                }
            }, intervalTimeMS);
        }
    }, {
        key: "Destroy",
        value: function Destroy() {
            var _this2 = this;

            this.Stop();

            // Remove shader if attached to parent
            if (this.Object3D && this.Object3D.parent) {
                this.Object3D.parent.remove(this.Object3D);
            }

            // Remove attached sounds if any
            if (this.Object3D) {
                this.Object3D.children.forEach(function (child) {
                    _this2.Object3D.remove(child);
                });
            }

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.sounds[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var sound = _step.value;

                    sound.setBuffer(undefined);
                    audioPool.freeAudio(sound);
                    ++module.exports.debugData.destroyCount;
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            this.sounds = [];

            this.fadeInterval = undefined; // Stop fading if any
        }
    }]);

    return SoundShader;
}();

module.exports.SoundShader = SoundShader;

var SoundSystem = function () {
    /**
     * Use to create sound system. There should only be one global
     * instance created below.
     * @constructor
     */
    function SoundSystem() {
        _classCallCheck(this, SoundSystem);

        this.audioLoader = new THREE.AudioLoader();
        this.loading = false;
        this.loadingProgress = 0;
        this.listener = new THREE.AudioListener();
        this.soundCache = [];
    }

    /**
     * @description Used to attach listener to camera once it has spawned
     * @param {Object} camera A reference to a THREE.Camera
     */


    _createClass(SoundSystem, [{
        key: "AttachListener",
        value: function AttachListener(camera) {
            camera.add(this.listener);
        }

        /**
         * @description Loads a sound file into memory and assigns a reference name
         * @param {string} fileName Path to the sound file (supports wav, mp3)
         * @param {Object} soundRef A reference to a THREE.PositionalAudio
         * @param {number} radius Sound radius in world units
         * @param {number} volume Value to set volume
         * @param {boolean} looping Use to set the initially loaded sound to loop
         * @param {boolean} globalSound Is the sound global? If so create non-positional sound
         * @param {Object} callbackObj Object with callback function Loaded
         * @return {boolean} Returns true if the sound was successfully loaded
         */

    }, {
        key: "LoadSound",
        value: function LoadSound(fileName, soundRef, radius, volume, looping, globalSound, callbackObj) {
            // Check for previously loaded sound
            if (this.soundCache[fileName] !== undefined) {
                this.loading = false;
                soundRef.setBuffer(this.soundCache[fileName]);

                if (!globalSound) {
                    soundRef.setRefDistance(radius);
                }

                soundRef.setVolume(volume);

                soundRef.setLoop(looping);

                callbackObj.Loaded(soundRef);

                return true;
            }

            if (soundRef) {
                this.loading = true;
                var soundSuccessfullyLoaded = false;

                this.audioLoader.load(fileName,
                // onLoad callback
                function (buffer) {
                    this.loading = false;
                    soundSuccessfullyLoaded = true;

                    soundRef.setBuffer(buffer);
                    // console.log("Caching new audio instance of " + fileName)

                    // Add buffer to cache
                    this.soundCache[fileName] = buffer;

                    if (!globalSound) {
                        soundRef.setRefDistance(radius);
                    }

                    soundRef.setVolume(volume);

                    soundRef.setLoop(looping);

                    callbackObj.Loaded(soundRef);
                }.bind(this),

                // onProgress callback
                function (xhr) {
                    this.loadingProgress = xhr.loaded / xhr.total;
                }.bind(this),

                // onError callback
                function (err) {
                    soundRef = undefined;
                    soundRef.loadVolume = undefined;
                    console.log("Error loading " + fileName);
                    this.loadingProgress = 0;
                    this.loading = false;
                }.bind(this));

                return soundSuccessfullyLoaded;
            }
        }
    }]);

    return SoundSystem;
}();

var global = new SoundSystem();
module.exports.global = global;

var MusicManager = function () {
    /**
     * @constructor Initializes, starts, and ends combat music. Handles transitions back to idle music.
     */
    function MusicManager() {
        _classCallCheck(this, MusicManager);

        // TODO: These sounds should be loaded by map instead
        this.combatMusic = new SoundShader("sound/music/combat_music-01.mp3", undefined, 1, 0, undefined, true, true);
        this.combatMusic.LoadSound("sound/music/combat_music-01b.mp3", undefined, 1, true, true);
        this.combatMusic.LoadSound("sound/music/combat_music-01c.mp3", undefined, 1, true, true);
        this.idleMusic = new SoundShader("sound/music/intro_tycho.mp3", undefined, 1, 0.25, undefined, true, true);
        this.countState = new SoundShader("sound/count_stats.mp3", undefined, 1, 0.7, undefined, false, true);
        this.closeState = new SoundShader("sound/victory_close.mp3", undefined, 1, 0.7, undefined, false, true);
        this.levelUp = new SoundShader("sound/player_level-01.mp3", undefined, 1, 0.7, undefined, false, true);
        this.levelUp.LoadSound("sound/player_level-02.mp3", undefined, 0.7, false, true);
        this.levelUp.LoadSound("sound/player_level-03.mp3", undefined, 0.7, false, true);
        this.tutorialNewLine = new SoundShader("sound/tutorial_newline-01.mp3", undefined, 1, 0.7, undefined, false, true);
        this.tutorialNewLine.LoadSound("sound/tutorial_newline-02.mp3", undefined, 0.7, false, true);
        this.tutorialNewLine.LoadSound("sound/tutorial_newline-03.mp3", undefined, 0.7, false, true);
        this.tutorialNewLine.LoadSound("sound/tutorial_newline-04.mp3", undefined, 0.7, false, true);
        this.idleMusicMode = true;

        this.combatMusicVolume = 0.25;
        this.fadeInCombatMusicTime = 2;
        this.fadeOutCombatMusicTime = 2;

        this.idleMusicVolume = 0.25;
        this.fadeInIdleMusicTime = 2;
        this.fadeOutIdleMusicTime = 2;

        // TODO: Waiting on method to check aggro, naively startingCombatMusic from waveSpawner on start
        // this.startIdleMusic()
    }

    _createClass(MusicManager, [{
        key: "playNewLine",
        value: function playNewLine() {
            if (this.tutorialNewLine.currentSound === undefined || !this.tutorialNewLine.currentSound.isPlaying) {
                this.tutorialNewLine.Play();
            }
        }
    }, {
        key: "playLevelUp",
        value: function playLevelUp() {
            if (this.levelUp.currentSound === undefined || !this.levelUp.currentSound.isPlaying) {
                this.levelUp.Play();
            }
        }
    }, {
        key: "playCounter",
        value: function playCounter() {
            if (this.countState.currentSound === undefined || !this.countState.currentSound.isPlaying) {
                this.countState.FadeIn(0.1, 0.7);
            }
        }
    }, {
        key: "stopCounter",
        value: function stopCounter() {
            this.countState.FadeOut(0.25);
        }

        /**
         * @description Use to start combat music. Should be started by any enemy aggro.
         */

    }, {
        key: "startCombatMusic",
        value: function startCombatMusic() {
            if (this.combatMusic.loading) {
                var that = this;
                setTimeout(function () {
                    that.startCombatMusic();
                }, 500);

                console.log("loading combat music...");
                return;
            }

            // TODO: Add method to check if any enemies has aggro
            this.combatMusic.FadeIn(this.fadeInCombatMusicTime, GameStore.optionsMenu.musicVolume * this.combatMusicVolume);
        }

        /**
         * @description Use to end combat music and transition back to idle. Should end when no enemies have aggro.
         */

    }, {
        key: "endCombatMusic",
        value: function endCombatMusic() {
            this.combatMusic.FadeOut(this.fadeOutCombatMusicTime);

            setTimeout(this.startIdleMusic.bind(this), this.fadeOutCombatMusicTime * 1000);
        }

        /**
         * @description Use to end combat music and transition back to idle. Should start on level load and when no aggro.
         */

    }, {
        key: "startIdleMusic",
        value: function startIdleMusic() {
            if (this.idleMusic.loading) {
                var that = this;
                setTimeout(function () {
                    that.startIdleMusic();
                }, 500);

                console.log("loading idle music...");
                return;
            }

            // TODO: Add method to check if no enemies have aggro
            this.idleMusicMode = true;
            this.idleMusic.FadeIn(this.fadeInIdleMusicTime, GameStore.optionsMenu.musicVolume * this.idleMusicVolume);
        }

        /**
         * @description Use to end idle music and transition to combat. Should end when any enemies have aggro.
         */

    }, {
        key: "endIdleMusic",
        value: function endIdleMusic() {
            this.idleMusic.FadeOut(this.fadeOutIdleMusicTime);
            this.idleMusicMode = false;

            setTimeout(this.startCombatMusic.bind(this), this.fadeOutIdleMusicTime * 1000);
        }
    }, {
        key: "adjustMusicFromOptionsMenu",
        value: function adjustMusicFromOptionsMenu() {
            this.idleMusic.SetShaderVolume(this.idleMusicMode * GameStore.optionsMenu.musicVolume * this.idleMusicVolume);
            this.combatMusic.SetShaderVolume(!this.idleMusicMode * GameStore.optionsMenu.musicVolume * this.combatMusicVolume);

            if (GameStore.optionsMenu.musicVolume) {
                if (this.idleMusicMode) {
                    if (!this.idleMusic.IsPlaying()) {
                        this.idleMusic.Play();
                    }
                } else {
                    if (!this.combatMusic.IsPlaying()) {
                        this.combatMusic.Play();
                    }
                }
            }
        }
    }]);

    return MusicManager;
}();

var globalMusic = new MusicManager();
module.exports.globalMusic = globalMusic;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "66456c0e27376a2b78616184ac4db72d.png";

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function escape(url) {
    if (typeof url !== 'string') {
        return url;
    }
    // If url is already wrapped in quotes, remove them
    if (/^['"].*['"]$/.test(url)) {
        url = url.slice(1, -1);
    }
    // Should url be wrapped?
    // See https://drafts.csswg.org/css-values-3/#urls
    if (/["'() \t\n]/.test(url)) {
        return '"' + url.replace(/"/g, '\\"').replace(/\n/g, '\\n') + '"';
    }

    return url;
};

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var pubSubType = {
    "cameraMove": 0,
    "gameState": 1,
    "tag": 2,
    "bounty": 3,
    "levelStart": 4,
    "levelComplete": 5,
    "prespawn": 6,
    "spawn": 7,
    "viewerPoints": 8,
    "settingsUpdate": 9,
    "coachNotification": 10,
    "subBot": 11
};

var nexusMessageType = {
    "stamp": 0,
    "vote": 1,
    "tag": 2,
    "bounty": 3,
    "bitsBounty": 4,
    "bitsTransaction": 5,
    "subBot": 6,
    "recolor": 7,
    "badBitBot": 8
};

var subBotMessageType = {
    "show": 0,
    "hide": 1,
    "update": 2
};

var botType = {
    "bitBot": 0,
    "subBot": 1

    // There is a max of 16 enemies per wave, see waveSpawner.js
    // Found maximum constrasting colors to define here:
    // https://sashat.me/2017/01/11/list-of-20-simple-distinct-colors/
};var tagColors = ["#E6194B", // 1 - Red
"#F58231", // 2 - Orange
"#FFE119", // 3 - Yellow
"#9AF200", // 4 - Lime
"#179627", // 5 - Green
"#42D4F4", // 6 - Cyan
"#4363D8", // 7 - Blue
"#911EB4", // 8 - Purple
"#F032E6", // 9 - Magenta
"#FF8989", // 10 - Pink
"#FFC975", // 11 - Apricot
"#DFD9AB", // 12 - Beige
"#808000", // 13 - Olive
"#469990", // 14 - Teal
"#E6BEFF", // 15 - Lavender
"#AAFFC3" // 16 - Mint
];

var levelColors = ["232, 94, 190", "0, 255, 198", "213, 255, 0", "1, 0, 103", "255, 0, 86", "158, 0, 142", "14, 76, 161", "255, 229, 2", "0, 95, 57", "0, 255, 0", "149, 0, 58", "255, 147, 126", "164, 36, 0", "0, 21, 68", "145, 208, 203", "98, 14, 0", "107, 104, 130", "0, 0, 255", "0, 125, 181", "106, 130, 108", "0, 174, 126", "194, 140, 159", "190, 153, 112", "0, 143, 156", "95, 173, 78", "255, 0, 0", "255, 0, 246", "255, 2, 157", "104, 61, 59", "255, 116, 163", "150, 138, 232", "152, 255, 82", "167, 87, 64", "1, 255, 254", "255, 238, 232", "254, 137, 0", "189, 198, 255", "1, 208, 255", "187, 136, 0", "117, 68, 177", "165, 255, 210", "255, 166, 254", "119, 77, 0", "122, 71, 130", "38, 52, 0", "0, 71, 84", "67, 0, 44", "181, 0, 255", "255, 177, 103", "255, 219, 102", "144, 251, 146", "126, 45, 210", "189, 211, 147", "229, 111, 254", "222, 255, 116", "0, 255, 120", "0, 155, 255", "0, 100, 1", "0, 118, 255", "133, 169, 0", "0, 185, 23", "120, 130, 49", "255, 110, 65", "0, 0, 0"];

module.exports.constants = {
    pubSubType: pubSubType,
    botType: botType,
    buffVoteLifetime: 10,
    nexusMessageType: nexusMessageType,
    subBotMessageType: subBotMessageType,
    tagColors: tagColors,
    levelColors: levelColors,
    coinMineTimeMS: 1500,
    access: {
        anonymous: false,
        vanilla: true,
        follower: true,
        subscriber: true,
        moderator: true
    },
    baseXpNeeded: 1000,
    xpNeededIncrease: .3,
    voteCooldownMs: 2000,
    chatStampCooldownMs: 60000
};

module.exports.bitsProducts = {
    voxelCoins: {
        sku: "coins-beta",
        coins: 1000
    },
    stampSaveSlots: {
        sku: "stampSaveSlots-beta",
        slots: 1
    },
    bitBotNew: {
        sku: "bitBotNew-beta",
        timePerBitSeconds: .6
    },
    bitBotExtend: {
        sku: "bitBotExtend-beta",
        timePerBitSeconds: 1.2
    },
    recolorPlayer: {
        sku: "recolor-beta"
    },
    badBitBot: {
        sku: "badBitBot-beta"
    }
};

module.exports.calcLevelFromXp = function (xp) {
    var remainingXp = xp;
    var retLevel = 0;
    var xpNeeded = module.exports.constants.baseXpNeeded;

    while (remainingXp > xpNeeded) {
        remainingXp -= xpNeeded;
        ++retLevel;

        xpNeeded *= 1 + module.exports.constants.xpNeededIncrease;
    }

    return retLevel;
};

function lerpColor(a, b, amount) {
    var ar = a >> 16;
    var ag = a >> 8 & 0xff;
    var ab = a & 0xff;

    var br = b >> 16;
    var bg = b >> 8 & 0xff;
    var bb = b & 0xff;

    var rr = ar + amount * (br - ar);
    var rg = ag + amount * (bg - ag);
    var rb = ab + amount * (bb - ab);

    return (rr << 16) + (rg << 8) + (rb | 0);
}

module.exports.getXpColor = function (xp, xpEvil) {
    var totalXp = xp + xpEvil;
    var evilRatio = totalXp > 0 ? xp / totalXp : .5;
    return "#" + lerpColor(0xff0000, 0x1dff00, evilRatio).toString(16);
};

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.
module.exports = {
    UI: {
        NEW_GAME: "PLAY ON TWITCH",
        OFFLINE_GAME: "PLAY OFFLINE",
        OPTIONS: "OPTIONS",
        CREDITS: "CREDITS",
        LOGIN: "LOGIN TO TWITCH",
        LOGIN_S: "LOGIN",
        LOGGING_IN: "LOGGING IN...",
        CHECKLIST: "TWITCH PLAY CHECKLIST",
        LOGGED_IN: "Logged into Twitch",
        HELP: "HELP",
        STREAM_DETECTED: "Stream Detected",
        EXT_INSTALLED: "Extension Installed",
        EXT_ACTIVATED: "Extension Setup",
        LOW_LATENCY: "Enable Low Latency Mode",
        RESOLUTION: "16:9 Resolution",
        OPEN_16: "OPEN 16:9 WINDOW",
        COPYRIGHT: " ",
        OVERLOADED: "Overloaded Warning!",
        OVERLOADED_STAMPS: "Receiving too many Stamps!",
        OVERLOADED_SOLUTION: "Reduce Voxel Coin Mine Time or limit Stamping Access in the options menu (esc).",
        INSTALL: "INSTALL",
        ACTIVATE: "SETUP",
        CHECK: "CHECK",
        LOCKED: "This window is locked at 16:9 ratio for Twitch Play. Resolution may be changed in the options menu.",
        CLOSE_LOCKED: "A new window locked at 16:9 has been created. You may close this window at any time.",
        SUPPORTED: "Our apologies! Only Google Chrome, Mozilla Firefox, and Safari are currently supported.",
        LOGIN_FAILED: "Login failed. Please try again.",
        COACH: "STAMP THEME SUGGESTIONS",
        COACH_BUTTON: "RANDOMIZE",
        LEVEL_UP: "LEVEL UP",
        LEVEL_UP_PRIZE: "Pickup Upgrade in Next Stage",
        END_SCREEN_FAIL: "PROGRAM: FAILURE",
        PRESS: "Press",
        ENTER: "ENTER",
        CONTINUE: "to continue.",
        TRY_AGAIN: "to try again.",
        TUTORIAL_NEXT_BTN_TEXT: "NEXT",
        TUTORIAL_SKIP_TEXT: "Skip Tutorial",
        GREETING: "Welcome",
        BITS_FROM: "bits from",
        SUB_BY: " Subscribed",
        LOGOUT: "Logout on Twitch",
        OPTIONS_MENU_TITLE: "OPTIONS MENU",
        OPTION_ON: "ON",
        OPTION_OFF: "OFF",
        OPTION_TUTORIAL: "Tutorial",
        OPTION_FPS: "Show FPS",
        OPTION_MUSIC: "Music",
        OPTION_FEEDBACK: "Feedback",
        OPTION_MINE_TIME: "Mine Time",
        OPTION_RESOLUTION: "Resolution",
        OPTION_ACCESS: "Stamping Access Levels",
        OPTION_ANON: "Anonymous",
        OPTION_CHOOSE_PLAYER_MODEL: "Customize Player",
        OPTION_LOGGED_IN: "Logged In",
        OPTION_FOLLOWER: "Follower",
        OPTION_SUB: "Subscriber",
        OPTION_MOD: "Moderator",
        OPTION_POST: "Post Processing Effects",
        OPTION_TILT: "Tilt Shift",
        OPTION_BLOOM: "Bloom",
        OPTION_SSAO: "SSAO",
        OPTION_VIGNETTE: "Vignette",
        OPTION_RATE: "Please Rate Your Experience",
        VERSION_LABEL_PRE: "EARLY_ACCESS",
        VERSION_LABEL: "BETA",
        TAKE_DOWN_MSG: "Coming Soon!",
        TAKE_DOWN_UPDATES: "For future updates check back here or follow us: ",
        TAKE_DOWN_LINK: "@Collaborative",
        CHROME_OBS: "There is a known issue with Google Chrome where window capture fails with broadcast software\nsuch as OBS.\n\n"
    },
    TUTORIAL: {
        WELCOME_1: "Hello... Ama #0059.\n\nWe are the Collaborative.\n\nWe are speaking to you from the Blue Ocean\nSatellite Systems or B.O.S.S.",
        WELCOME_2: "We (Twitch Viewers) can help you three ways.\n\nFirst, we can boost energy towards repair,\nspeed, or cannons.",
        BUFF_1: "You will glow green (repair), magenta (speed),\nor orange (cannons) when boosted.",
        STAMPS_1: "Second, we can energize surfaces with images\ncalled Stamps.\n\nWe are sending some now.",
        STAMPS_2: "Green, magenta, and orange Stamps can\nboost you just like energy allocation.\n\nTry standing on one now.",
        STAMPS_5: "You can also RIGHT CLICK any Stamp to bring it\nto life. These are limited so choose wisely.\n\nTry it now.",
        STAMPS_6: "Good work!\n\nYou may also MIDDLE CLICK on Stamps to delete them.",
        BITBOT_1: "We can send a powerful supporter called the\nBit Bot. It is fueled by bits, so time is\nlimited.",
        SUBBOT_1: "Last, we can send the Sub Bot. It kills\nanything it touches but it is controled by us.",
        BYE_1: "Best of luck on your adventure, Ama #0059.\n\nWe will be observing you.",
        UNLOCK_PREVIEW: "Great work! Complete stage ten to permanently\nunlock Anti-Collaborative mode. In this mode we\ncan work against you!",
        UNLOCKED: "Congratulations! Anti-Collaborative mode is\npermanently unlocked...\n\nGood luck!"
    },
    TOOLTIP: {
        COLLAPSABLE_WINDOW_OPEN: "Click to open",
        COLLAPSABLE_WINDOW_CLOSE: "Click to close.",
        COLLAPSABLE_WINDOW_MAX: "Click to maximize.",
        COLLAPSABLE_WINDOW_MIN: "Click to minimize.",
        TWITCH_PLAY: "Checklist to play on Twitch.",
        HELP: "Set of frequently asked questions by streamers.",
        BUTTON_CLICK: "Click to ",
        COACH: "This shows the percent of viewers\nwho recently interacted. Try options\nbelow to encourage participation.",
        OPTION_TUTORIAL: "Enable or disable the tutorial the next time you play.",
        OPTION_FPS: "Enable or disable the display of frames per second in the top right corner.",
        OPTION_MUSIC: "Adjust music volume. All music is approved for use on Twitch.",
        OPTION_FEEDBACK: "Send us your feedback about the game!",
        OPTION_MINE_TIME: "Set time in seconds for viewers to earn a Voxel Coin.",
        OPTION_CHOOSE_PLAYER_MODEL: "Select a vox file to replace the player model.\n\nSee FAQ from Help section for more information.",
        OPTION_ACCESS: "Enable or disable who can Stamp.",
        OPTION_SSAO: "Enable or disable ambient occlusion.\nOnly recommended for NVIDIA GeForce GTX 1070 | AMD Vega 56 with 6GB VRAM or better.",
        OPTION_TILT: "Enable or disable blurring at the top and bottom of the screen.",
        OPTION_BLOOM: "Enable or disable glow from bright surfaces.",
        OPTION_VIGNETTE: "Enable or disable darkening in the corners of the screen."
    }
};

module.exports.stampCategorySuggestionList = ["8-bit Era", "16-bit Era", "Hats", "Sandwiches", "Lettuce", "Kitties", "Puppies", "Cakes", "Pies", "Dragons", "Cars", "Fires", "Airplanes", "Ghosts", "Masks", "Dinosaurs", "Fruits", "Sushi", "Turkey Day", "Winter Holidays", "Halloween", "Super Heroes"];

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AiSimple = __webpack_require__(156);
var AiGoal = __webpack_require__(161);
var AiDrop = __webpack_require__(162);
var AiStamp = __webpack_require__(163);
var AiBitBot = __webpack_require__(164);
var AiSubBot = __webpack_require__(166);
var AiBeacon = __webpack_require__(167);
var THREE = __webpack_require__(1);

/**
 * @typedef {Object} EAiType Enum
 * @property {number} Simple 1
 * @property {number} Goal 2
 */
var EAiType = Object.freeze({
    Simple: 1,
    Goal: 2,
    Drop: 3,
    Stamp: 4,
    BitBot: 5,
    Gord: 6,
    Chibi: 7,
    BadBitBot: 8,
    SubBot: 9,
    Beacon: 10
});
module.exports.EAiType = EAiType;

var SpawnProperties = [{ type: EAiType.Simple, cost: 3, weight: 1 }];
module.exports.SpawnProperties = SpawnProperties;

var AiManager = function () {
    function AiManager() {
        _classCallCheck(this, AiManager);

        this.aiList = [];

        // Wave combat params
        this.doWaveCombat = false;
        this.numWaves = 5;
        this.currentWave = 0;
        this.firstWaveMin = 2;
        this.firstWaveMax = 3;
        this.lastWaveMin = 12;
        this.lastWaveMax = 15;
        this.timeBetweenWaves = 5000; // time between waves in ms
        this.minSpawnDistance = 12;

        this.worldPosition = new THREE.Vector3();
        this.directionForceAI = new THREE.Vector3(); // Utilized to avoid cloning in getForceFromAI
        this.directionForceInternal = new THREE.Vector3(); // Utilized to avoid cloning in getForceFromWithin

        // Minimum distance (squared) for forces to be relevant
        this.minForceDistance = 40;

        // These are coords to help randomly decide where to spawn AI.
        // Ultimately these will be deleted when we implement generated
        // levels. Wave combat is just for early testing in map1.
        this.mapMaxCoordsX = 88;
        this.mapMinCoordsX = 38;
        this.mapMaxCoordsY = 74;
        this.mapMinCoordsY = 33;
        this.spawnHeightMax = 48;
        this.spawnHeightMin = 41;

        this.collisionBoxMat = new THREE.MeshBasicMaterial({ color: 0x00ff00, opacity: 0.5, wireframe: true });
    }

    /**
     * @description Use to remove AI from the managed list aiList.
     * @param {EAiType} type The type of AI to spawn
     * @param {number} x Spawn coordinate
     * @param {number} y Spawn coordinate
     * @param {number} z Spawn coordinate
     * @returns {Object} Returns a reference to the spawned AI
     */


    _createClass(AiManager, [{
        key: "spawnAi",
        value: function spawnAi(type, x, y, z, optionalParams) {
            var newAi = undefined;

            switch (type) {
                case EAiType.Simple:
                    newAi = new AiSimple(x, y, z, optionalParams);
                    this.aiList.push(newAi);
                    break;
                case EAiType.Goal:
                    newAi = new AiGoal(x, y, z, optionalParams);
                    this.aiList.push(newAi);
                    break;
                case EAiType.Drop:
                    newAi = new AiDrop(x, y, z, optionalParams);
                    this.aiList.push(newAi);
                    break;
                case EAiType.Stamp:
                    newAi = new AiStamp(x, y, z, optionalParams);
                    this.aiList.push(newAi);
                    break;
                case EAiType.BitBot:
                    newAi = new AiBitBot(x, y, z, optionalParams);
                    this.aiList.push(newAi);
                    break;
                case EAiType.Gord:
                    newAi = new AiStamp.AiGord(x, y, z, optionalParams);
                    this.aiList.push(newAi);
                    break;
                case EAiType.Chibi:
                    newAi = new AiSimple.AiChibi(x, y, z, optionalParams);
                    this.aiList.push(newAi);
                    break;
                case EAiType.BadBitBot:
                    newAi = new AiBitBot.AiBadBitBot(x, y, z, optionalParams);
                    this.aiList.push(newAi);
                    break;
                case EAiType.SubBot:
                    newAi = new AiSubBot(x, y, z, optionalParams);
                    this.aiList.push(newAi);
                    break;
                case EAiType.Beacon:
                    newAi = new AiBeacon(x, y, z, optionalParams);
                    this.aiList.push(newAi);
                    break;
                default:
                    break;
            }

            if (newAi !== undefined) {
                newAi.type = type;
            }

            return newAi;
        }

        /**
         * @description Use to remove AI from the managed list aiList.
         * @param {Object} ai A reference to the AI object to be removed.
         */

    }, {
        key: "removeAi",
        value: function removeAi(ai) {
            var index = this.aiList.indexOf(ai);
            if (index !== -1) {
                this.aiList.splice(index, 1);
            }
        }

        /**
         * @description Removes all ai from the world except the goal
         */

    }, {
        key: "removeAllAi",
        value: function removeAllAi() {
            var i = 0;
            while (i < this.aiList.length) {
                var ai = this.aiList[i];
                if (ai.type !== EAiType.Goal) {
                    this.aiList.splice(i, 1);
                    ai.Die();
                } else {
                    i++;
                }
            }
        }

        /**
         * @description Finds the forces from obstacleAI on avoidingAI
         * @param {Object} avoidingAI Reference to our avoiding AI
         * @param {Object} obstacleAI Reference to our obstacle AI
         * @returns {Object} Returns an Vector3 with x & z force from obstacleAI
         */

    }, {
        key: "getForceFromAI",
        value: function getForceFromAI(avoidingAI, obstacleAI) {
            var shouldAvoid = avoidingAI.ShouldAvoid(obstacleAI);

            if (obstacleAI.mass && obstacleAI.mesh.position && avoidingAI.mesh.position && shouldAvoid) {
                obstacleAI.mesh.getWorldPosition(this.worldPosition);
                var distanceSquare = this.worldPosition.distanceToSquared(avoidingAI.mesh.position);

                if (distanceSquare < this.minForceDistance) {
                    var magnitude = obstacleAI.mass / distanceSquare;

                    // Vector copy instead of clone for performance
                    this.directionForceAI.x = avoidingAI.mesh.position.x;
                    this.directionForceAI.y = avoidingAI.mesh.position.y;
                    this.directionForceAI.z = avoidingAI.mesh.position.z;

                    this.directionForceAI.sub(this.worldPosition).normalize();
                    this.directionForceAI.multiplyScalar(magnitude);

                    return this.directionForceAI;
                } else {
                    // Vector copy instead of clone for performance
                    this.directionForceAI.x = this.directionForceAI.y = this.directionForceAI.z = 0;

                    return this.directionForceAI;
                }
            } else {
                // Vector copy instead of clone for performance
                this.directionForceAI.x = this.directionForceAI.y = this.directionForceAI.z = 0;

                return this.directionForceAI;
            }
        }

        /**
        * @description Finds the forces from internalForce on forceAI
        * @param {Object} forceAI Reference to our AI to calculate force
        * @param {Object} internalForce Reference to an internal force
        * @returns {Object} Returns an Vector3 with x & z force from an internal force (such as knockback)
        */

    }, {
        key: "getForceFromWithin",
        value: function getForceFromWithin(forceAI, internalForce) {
            if (internalForce.mass && internalForce.spawnPos.position && forceAI.mesh.position) {
                var distanceSquare = internalForce.spawnPos.position.distanceToSquared(forceAI.mesh.position);

                if (distanceSquare < this.minForceDistance) {
                    var magnitude = internalForce.mass / distanceSquare;

                    // Vector copy instead of clone for performance
                    this.directionForceInternal.x = forceAI.mesh.position.x;
                    this.directionForceInternal.y = forceAI.mesh.position.y;
                    this.directionForceInternal.z = forceAI.mesh.position.z;

                    this.directionForceInternal.sub(internalForce.spawnPos.position).normalize();
                    this.directionForceInternal.multiplyScalar(magnitude);

                    return this.directionForceInternal;
                } else {
                    // Vector copy instead of clone for performance
                    this.directionForceInternal.x = this.directionForceInternal.y = this.directionForceInternal.z = 0;
                    return this.directionForceInternal;
                }
            } else {
                // Vector copy instead of clone for performance
                this.directionForceInternal.x = this.directionForceInternal.y = this.directionForceInternal.z = 0;
                return this.directionForceInternal;
            }
        }

        /**
         * @description Finds all the forces from other AI for AI avoidance
         * @param {Object} avoidingAI Reference to our avoiding AI
         * @returns {Object} Returns an Vector3 with x & z forces from all other AI
         */

    }, {
        key: "getForcesFromOtherAI",
        value: function getForcesFromOtherAI(avoidingAI) {
            var force = new THREE.Vector3();

            for (var i = 0; i < this.aiList.length; i++) {
                if (avoidingAI !== this.aiList[i]) {
                    var forceFromOtherAI = this.getForceFromAI(avoidingAI, this.aiList[i]);
                    force.x += forceFromOtherAI.x;
                    force.z += forceFromOtherAI.z;
                }
            }

            return force;
        }

        /**
         * @description Finds all the forces from internal forces (such as knockback)
         * @param {Object} forceAI Reference to our avoiding AI
         * @returns {Object} Returns an Vector3 with x & z forces from all internal forces
         */

    }, {
        key: "getInternalForces",
        value: function getInternalForces(forceAI) {
            var force = new THREE.Vector3();

            // Calculate internal forces on AI such as knockback
            for (var i = 0; i < forceAI.forces.length; i++) {
                var internalForce = this.getForceFromWithin(forceAI, forceAI.forces[i]);
                force.x += internalForce.x;
                force.z += internalForce.z;
            }

            return force;
        }
    }]);

    return AiManager;
}();

module.exports.AiManager = AiManager;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
    return [];
};

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () {
    return '/';
};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function () {
    return 0;
};

/***/ }),
/* 14 */
/***/ (function(module, exports) {

module.exports = {"PRODUCTION":{"HUBBLE_URI":"https://<production>.execute-api.us-east-1.amazonaws.com/production/<version>/submitTychoEvent","NEXUS_GET_MESSAGES_URI":"https://w39k8eqjq7.execute-api.us-east-1.amazonaws.com/production/v1/app/tycho/channel/{channelId}/messages","NEXUS_SEND_MESSAGES_URI":"https://w39k8eqjq7.execute-api.us-east-1.amazonaws.com/production/v1/app/tycho/channel/{channelId}/gameMessage","TWITCH_AUTH_URI":"https://id.twitch.tv/oauth2/authorize?response_type=code&client_id={clientId}&redirect_uri=https://{address}/index.html&scope=openid+user:edit:broadcast+channel_subscriptions+chat:edit+chat:read+whispers:edit","TWITCH_REDIRECT_URI":"https://{address}/index.html","TWITCH_BROADCAST_URI":"https://<production>.execute-api.us-east-1.amazonaws.com/production/<version>/channel/{channelId}/pubsub","GET_BITBOT_TRANSACTIONS_URI":"https://<production>.execute-api.us-east-1.amazonaws.com/production/<version>/channel/{channelId}/GetBitBotTransactions","SET_PROCESSED_BITBOT_TRANSACTION_URI":"https://<production>.execute-api.us-east-1.amazonaws.com/production/<version>/channel/{channelId}/SetProcessedBitBotTransaction","ADD_SUBBOT_URI":"https://<production>.execute-api.us-east-1.amazonaws.com/production/v2/channel/{channelId}/addSubBot","PUBLISH_SNS_URI":"https://<production>.execute-api.us-east-1.amazonaws.com/production/v2/channel/{channelId}/publishTychoSNS","TWITCH_STREAM_INFO_URI":"https://api.twitch.tv/kraken/streams/{channelId}","TWITCH_EXTENSIONS_INFO_URI":"https://api.twitch.tv/helix/users/extensions","TWITCH_EXTENSION_LIST_URI":"https://api.twitch.tv/helix/users/extensions/list","TWITCH_FOLLOWERS_LIST_URI":"https://api.twitch.tv/kraken/channels/{channelId}/follows","TWITCH_SUBSCRIBERS_LIST_URI":"https://api.twitch.tv/kraken/channels/{channelId}/subscriptions","EXTENSION_INSTALL_URI":"https://www.twitch.tv/ext/38v1o52q1c2qja1lfr73uid3r5rj8u-0.6.0","SET_STREAMER_DATA_URI":"https://<production>.execute-api.us-east-1.amazonaws.com/production/<version>/channel/{channelId}/setstreamerdata","GET_STREAMER_DATA_URI":"https://<production>.execute-api.us-east-1.amazonaws.com/production/<version>/channel/{channelId}/getstreamerdata","SET_STREAMER_STATE_URI":"https://<production>.execute-api.us-east-1.amazonaws.com/production/<version>/channel/{channelId}/setstreamerstate","GET_STREAMER_STATE_URI":"https://<production>.execute-api.us-east-1.amazonaws.com/production/<version>/channel/{channelId}/getstreamerstate","GAMESPARKS_URI":"https://<production>.execute-api.us-east-1.amazonaws.com/production/<version>/channel/{channelId}/getGameSparksCredentials/{nonce}","COIN_TRANSACTION_URI":"https://<production>.execute-api.us-east-1.amazonaws.com/production/<version>/channel/{channelId}/chatCoinTransaction"},"GAMMA":{"HUBBLE_URI":"https://<development>.execute-api.us-east-1.amazonaws.com/development/<version>/submitTychoEvent","NEXUS_GET_MESSAGES_URI":"https://pjb0ly4vu6.execute-api.us-east-1.amazonaws.com/production/v1/app/tycho/channel/{channelId}/messages","NEXUS_SEND_MESSAGES_URI":"https://pjb0ly4vu6.execute-api.us-east-1.amazonaws.com/production/v1/app/tycho/channel/{channelId}/gameMessage","TWITCH_AUTH_URI":"https://id.twitch.tv/oauth2/authorize?response_type=code&client_id={clientId}&redirect_uri=https://{address}/index.html&scope=openid+user:edit:broadcast+channel_subscriptions+chat:edit+chat:read+whispers:edit","TWITCH_REDIRECT_URI":"https://{address}/index.html","TWITCH_BROADCAST_URI":"https://<gamma>.execute-api.us-east-1.amazonaws.com/production/<version>/channel/{channelId}/pubsub","GET_BITBOT_TRANSACTIONS_URI":"https://<gamma>.execute-api.us-east-1.amazonaws.com/production/<version>/channel/{channelId}/GetBitBotTransactions","SET_PROCESSED_BITBOT_TRANSACTION_URI":"https://<gamma>.execute-api.us-east-1.amazonaws.com/production/<version>/channel/{channelId}/SetProcessedBitBotTransaction","ADD_SUBBOT_URI":"https://<gamma>.execute-api.us-east-1.amazonaws.com/production/v2/channel/{channelId}/addSubBot","PUBLISH_SNS_URI":"https://<gamma>.execute-api.us-east-1.amazonaws.com/production/v2/channel/{channelId}/publishTychoSNS","TWITCH_STREAM_INFO_URI":"https://api.twitch.tv/kraken/streams/{channelId}","TWITCH_EXTENSIONS_INFO_URI":"https://api.twitch.tv/helix/users/extensions","TWITCH_EXTENSION_LIST_URI":"https://api.twitch.tv/helix/users/extensions/list","TWITCH_FOLLOWERS_LIST_URI":"https://api.twitch.tv/kraken/channels/{channelId}/follows","TWITCH_SUBSCRIBERS_LIST_URI":"https://api.twitch.tv/kraken/channels/{channelId}/subscriptions","EXTENSION_INSTALL_URI":"https://www.twitch.tv/ext/38v1o52q1c2qja1lfr73uid3r5rj8u-0.6.0","SET_STREAMER_DATA_URI":"https://<gamma>.execute-api.us-east-1.amazonaws.com/production/<version>/channel/{channelId}/setstreamerdata","GET_STREAMER_DATA_URI":"https://<gamma>.execute-api.us-east-1.amazonaws.com/production/<version>/channel/{channelId}/getstreamerdata","SET_STREAMER_STATE_URI":"https://<gamma>.execute-api.us-east-1.amazonaws.com/production/<version>/channel/{channelId}/setstreamerstate","GET_STREAMER_STATE_URI":"https://<gamma>.execute-api.us-east-1.amazonaws.com/production/<version>/channel/{channelId}/getstreamerstate","GAMESPARKS_URI":"https://<gamma>.execute-api.us-east-1.amazonaws.com/development/<version>/channel/{channelId}/getGameSparksCredentials/{nonce}","COIN_TRANSACTION_URI":"https://<gamma>.execute-api.us-east-1.amazonaws.com/production/<version>/channel/{channelId}/chatCoinTransaction"},"DEVELOPMENT":{"HUBBLE_URI":"https://<development>.execute-api.us-east-1.amazonaws.com/development/<version>/submitTychoEvent","NEXUS_GET_MESSAGES_URI":"https://yopmbjwita.execute-api.us-east-1.amazonaws.com/development/v1/app/tycho/channel/{channelId}/messages","NEXUS_SEND_MESSAGES_URI":"https://yopmbjwita.execute-api.us-east-1.amazonaws.com/development/v1/app/tycho/channel/{channelId}/gameMessage","TWITCH_AUTH_URI":"https://id.twitch.tv/oauth2/authorize?response_type=code&client_id={clientId}&redirect_uri=https://{address}/index.html&scope=openid+user:edit:broadcast+channel_subscriptions+chat:edit+chat:read+whispers:edit","TWITCH_REDIRECT_URI":"https://{address}/index.html","TWITCH_BROADCAST_URI":"https://<development>.execute-api.us-east-1.amazonaws.com/development/<version>/channel/{channelId}/pubsub","GET_BITBOT_TRANSACTIONS_URI":"https://<development>.execute-api.us-east-1.amazonaws.com/development/<version>/channel/{channelId}/GetBitBotTransactions","SET_PROCESSED_BITBOT_TRANSACTION_URI":"https://<development>.execute-api.us-east-1.amazonaws.com/development/<version>/channel/{channelId}/SetProcessedBitBotTransaction","ADD_SUBBOT_URI":"https://<development>.execute-api.us-east-1.amazonaws.com/development/v2/channel/{channelId}/addSubBot","PUBLISH_SNS_URI":"https://<development>.execute-api.us-east-1.amazonaws.com/development/v2/channel/{channelId}/publishTychoSNS","TWITCH_STREAM_INFO_URI":"https://api.twitch.tv/kraken/streams/{channelId}","TWITCH_EXTENSIONS_INFO_URI":"https://api.twitch.tv/helix/users/extensions","TWITCH_EXTENSION_LIST_URI":"https://api.twitch.tv/helix/users/extensions/list","TWITCH_FOLLOWERS_LIST_URI":"https://api.twitch.tv/kraken/channels/{channelId}/follows","TWITCH_SUBSCRIBERS_LIST_URI":"https://api.twitch.tv/kraken/channels/{channelId}/subscriptions","EXTENSION_INSTALL_URI":"https://www.twitch.tv/ext/38v1o52q1c2qja1lfr73uid3r5rj8u-0.6.0","SET_STREAMER_DATA_URI":"https://<development>.execute-api.us-east-1.amazonaws.com/development/<version>/channel/{channelId}/setstreamerdata","GET_STREAMER_DATA_URI":"https://<development>.execute-api.us-east-1.amazonaws.com/development/<version>/channel/{channelId}/getstreamerdata","SET_STREAMER_STATE_URI":"https://<development>.execute-api.us-east-1.amazonaws.com/development/<version>/channel/{channelId}/setstreamerstate","GET_STREAMER_STATE_URI":"https://<development>.execute-api.us-east-1.amazonaws.com/development/<version>/channel/{channelId}/getstreamerstate","GAMESPARKS_URI":"https://<development>.execute-api.us-east-1.amazonaws.com/development/<version>/channel/{channelId}/getGameSparksCredentials/{nonce}","COIN_TRANSACTION_URI":"https://<development>.execute-api.us-east-1.amazonaws.com/development/<version>/channel/{channelId}/chatCoinTransaction"}}

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "ac92dbb0f729d6177539813b8566d8ef.ttf";

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Nimble = __webpack_require__(6);

module.exports.TWITCH_USER_URI = new Nimble.uri("https://api.twitch.tv/kraken/users/{userId}");
module.exports.TWITCH_CHANNEL_URI = new Nimble.uri("https://api.twitch.tv/kraken/channels/{channelId}");
module.exports.GAMESPARKS_NONCE_URI = new Nimble.uri("https://bpb5tvnz87.execute-api.us-east-1.amazonaws.com/development/v1/channels/abc/gamesparks/{nonce}");
module.exports.TWITCH_AUTH_HELIX_URI = new Nimble.uri("https://id.twitch.tv/oauth2/token?client_id={clientId}&client_secret={secret}&code={code}&grant_type=authorization_code&redirect_uri={redirectUrl}");
module.exports.TWITCH_USER_HELIX_URI = new Nimble.uri("https://api.twitch.tv/helix/users");
module.exports.NEXUS_AUTH_URI = new Nimble.uri("https://v3hjewppx3.execute-api.us-east-1.amazonaws.com/development/v1/{channelId}/auth");
module.exports.TWITCH_CHAT_URI = new Nimble.uri("https://api.twitch.tv/extensions/{clientId}/{version}/channels/{channelId}/chat");
module.exports.TWITCH_OAUTH_REFRESH_URI = new Nimble.uri("https://id.twitch.tv/oauth2/token?grant_type=refresh_token&refresh_token={refreshToken}&client_id={clientId}&client_secret={secret}");

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.
var THREE = __webpack_require__(1);

module.exports = {
    showHud: false,
    maxHealth: 0,
    health: 0,
    speed: 0,
    takeDamageScaler: 1
};

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GameStore = __webpack_require__(0);
var THREE = __webpack_require__(1);
var buffVoteLifetime = __webpack_require__(10).constants.buffVoteLifetime;

var buffInfo = [{
    displayName: "REPAIR", // Display name
    amount: 0, // Amount on buff from -1 to 1
    altAmount: 0,
    hue: 180, // Amount to hue shift meter color
    hueEvil: 85, // Amount to hue shift when evil
    votes: 0,
    votesEvil: 0,
    spawnRate: 13, // Spawn rate in particles per second when amount equals 1
    deltaScalar: 1, // Multiplies delta speed for slow or fast forward effect
    timeSinceLastEmitterSpawned: 0,
    buffParticleColor: new THREE.Color("rgb(0, 255, 0)"),
    stampColorIndex: [6],
    altInstances: []
}, {
    displayName: "SPEED", // Display name
    amount: 0, // Amount on buff from -1 to 1
    altAmount: 0,
    hue: -10, // Amount to hue shift meter color
    hueEvil: 85, // Amount to hue shift when evil
    votes: 0,
    votesEvil: 0,
    spawnRate: 13, // Spawn rate in particles per second when amount equals 1
    deltaScalar: 2.5, // Multiplies delta speed for slow or fast forward effect
    timeSinceLastEmitterSpawned: 0,
    buffParticleColor: new THREE.Color("rgb(255, 0, 255)"),
    stampColorIndex: [4],
    altInstances: []
}, {
    displayName: "CANNON", // Display name
    amount: 0, // Amount on buff from -1 to 1
    altAmount: 0,
    hue: 100, // Amount to hue shift meter color
    hueEvil: 85, // Amount to hue shift when evil
    votes: 0,
    votesEvil: 0,
    spawnRate: 13, // Spawn rate in particles per second when amount equals 1
    deltaScalar: 1, // Multiplies delta speed for slow or fast forward effect
    timeSinceLastEmitterSpawned: 0,
    buffParticleColor: new THREE.Color("rgb(255, 100, 0)"),
    stampColorIndex: [8],
    altInstances: []
}];
module.exports.buffInfo = buffInfo;

module.exports.BuffManager = function () {
    function _class() {
        _classCallCheck(this, _class);

        this.voteHistoryInterval = .5;
        this.voteHistory = [];
        this.cachedTotalVotes = 0;
        this.nextCacheTime = 0;
        this.playerVoteIntervalMs = 100;
        this.playerVoteLifetimeMs = 1000;
        this.nextPlayerVoteTime = 0;
        this.nextAltInstanceId = 1;
        this.evilBuffColor = {
            r: 247,
            g: 24,
            b: 24
        };
    }

    _createClass(_class, [{
        key: "viewerBuffVote",
        value: function viewerBuffVote(buffType, voteCount, name, isEvil) {
            this.addVote(buffType, voteCount, buffVoteLifetime * 1000, isEvil);

            var player = GameStore.GameInstance.player;
            var normal = new THREE.Vector3(0, -0.5, 1); // Offset up and left a bit to center
            var rawParticleColor = buffInfo[buffType].buffParticleColor;
            var color = undefined;
            if (isEvil) {
                color = this.evilBuffColor;
            } else {
                color = {
                    r: Math.round(rawParticleColor.r * 255),
                    g: Math.round(rawParticleColor.g * 255),
                    b: Math.round(rawParticleColor.b * 255)
                };
            }

            GameStore.GameInstance.worldTextManager.spawnTextForStamp(player.mesh.position, name, normal, color);

            this.UpdateVotes();
        }
    }, {
        key: "playerBuffVote",
        value: function playerBuffVote(buffType) {
            var now = Date.now();
            if (this.nextPlayerVoteTime < now) {
                this.nextPlayerVoteTime = now + this.playerVoteIntervalMs;

                this.addVote(buffType, 1, this.playerVoteLifetimeMs);

                this.UpdateVotes();
            }
        }
    }, {
        key: "addVote",
        value: function addVote(buffType, voteCount, lifetimeMs, isEvil) {
            if (this.voteHistory.length === 0 || this.nextCacheTime < Date.now()) {

                this.nextCacheTime = Date.now() + this.voteHistoryInterval * 1000;

                this.voteHistory.push({
                    time: Date.now() + lifetimeMs,
                    votes: {}
                });
            }

            var buffIndex = buffType + (isEvil ? buffInfo.length : 0);

            var latestData = this.voteHistory[this.voteHistory.length - 1];
            latestData.votes[buffIndex] = (latestData.votes[buffIndex] || 0) + voteCount;
        }
    }, {
        key: "UpdateVotes",
        value: function UpdateVotes() {
            var _this = this;

            this.cachedTotalVotes = 0;
            this.cachedTotalVotesEvil = 0;
            buffInfo.forEach(function (buff) {
                buff.votes = 0;
                buff.votesEvil = 0;
            });

            var buffCount = buffInfo.length;
            this.voteHistory.forEach(function (interval) {
                for (var i = 0; i < buffCount; ++i) {
                    var buff = buffInfo[i];

                    var votes = interval.votes[i] || 0;
                    buff.votes += votes;
                    _this.cachedTotalVotes += votes;

                    var votesEvil = interval.votes[i + buffCount] || 0;
                    buff.votesEvil += votesEvil;
                    _this.cachedTotalVotesEvil += votesEvil;
                }
            });

            buffInfo.forEach(function (buff) {
                var amount = _this.cachedTotalVotes > 0 ? buff.votes / _this.cachedTotalVotes : 0;
                var totalVotes = _this.cachedTotalVotes + _this.cachedTotalVotesEvil;
                var amountEvil = totalVotes > 0 ? buff.votesEvil / totalVotes : 0;
                buff.amount = amount - amountEvil;
            });
        }
    }, {
        key: "Update",
        value: function Update(time, delta) {
            while (this.voteHistory.length > 0 && this.voteHistory[0].time < Date.now()) {

                this.voteHistory.shift();

                this.UpdateVotes();
            }

            buffInfo.forEach(function (info) {
                info.altAmount = 0;
                info.altInstances.forEach(function (instance) {
                    info.altAmount += instance.amount;
                });
            });
        }
    }, {
        key: "addAltInstance",
        value: function addAltInstance(buffType, amount, userId) {
            var id = this.nextAltInstanceId++;
            var info = buffInfo[buffType];

            info.altAmount += amount;
            info.altInstances.push({
                id: id,
                amount: amount,
                userId: userId
            });

            return id;
        }
    }, {
        key: "removeAltInstance",
        value: function removeAltInstance(id) {
            buffInfo.forEach(function (info) {
                var instanceIndex = info.altInstances.findIndex(function (instance) {
                    return instance.id === id;
                });

                if (instanceIndex !== -1) {
                    info.altAmount -= info.altInstances[instanceIndex].amount;
                    info.altInstances.splice(instanceIndex, 1);
                }
            });
        }
    }]);

    return _class;
}();

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory) {
	if (( false ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory();
	} else if (true) {
		// AMD
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		// Global (browser)
		root.CryptoJS = factory();
	}
})(undefined, function () {

	/**
  * CryptoJS core components.
  */
	var CryptoJS = CryptoJS || function (Math, undefined) {
		/**
   * CryptoJS namespace.
   */
		var C = {};

		/**
   * Library namespace.
   */
		var C_lib = C.lib = {};

		/**
   * Base object for prototypal inheritance.
   */
		var Base = C_lib.Base = function () {
			function F() {}

			return {
				/**
     * Creates a new object that inherits from this object.
     *
     * @param {Object} overrides Properties to copy into the new object.
     *
     * @return {Object} The new object.
     *
     * @static
     *
     * @example
     *
     *     var MyType = CryptoJS.lib.Base.extend({
     *         field: 'value',
     *
     *         method: function () {
     *         }
     *     });
     */
				extend: function extend(overrides) {
					// Spawn
					F.prototype = this;
					var subtype = new F();

					// Augment
					if (overrides) {
						subtype.mixIn(overrides);
					}

					// Create default initializer
					if (!subtype.hasOwnProperty('init')) {
						subtype.init = function () {
							subtype.$super.init.apply(this, arguments);
						};
					}

					// Initializer's prototype is the subtype object
					subtype.init.prototype = subtype;

					// Reference supertype
					subtype.$super = this;

					return subtype;
				},

				/**
     * Extends this object and runs the init method.
     * Arguments to create() will be passed to init().
     *
     * @return {Object} The new object.
     *
     * @static
     *
     * @example
     *
     *     var instance = MyType.create();
     */
				create: function create() {
					var instance = this.extend();
					instance.init.apply(instance, arguments);

					return instance;
				},

				/**
     * Initializes a newly created object.
     * Override this method to add some logic when your objects are created.
     *
     * @example
     *
     *     var MyType = CryptoJS.lib.Base.extend({
     *         init: function () {
     *             // ...
     *         }
     *     });
     */
				init: function init() {},

				/**
     * Copies properties into this object.
     *
     * @param {Object} properties The properties to mix in.
     *
     * @example
     *
     *     MyType.mixIn({
     *         field: 'value'
     *     });
     */
				mixIn: function mixIn(properties) {
					for (var propertyName in properties) {
						if (properties.hasOwnProperty(propertyName)) {
							this[propertyName] = properties[propertyName];
						}
					}

					// IE won't copy toString using the loop above
					if (properties.hasOwnProperty('toString')) {
						this.toString = properties.toString;
					}
				},

				/**
     * Creates a copy of this object.
     *
     * @return {Object} The clone.
     *
     * @example
     *
     *     var clone = instance.clone();
     */
				clone: function clone() {
					return this.init.prototype.extend(this);
				}
			};
		}();

		/**
   * An array of 32-bit words.
   *
   * @property {Array} words The array of 32-bit words.
   * @property {number} sigBytes The number of significant bytes in this word array.
   */
		var WordArray = C_lib.WordArray = Base.extend({
			/**
    * Initializes a newly created word array.
    *
    * @param {Array} words (Optional) An array of 32-bit words.
    * @param {number} sigBytes (Optional) The number of significant bytes in the words.
    *
    * @example
    *
    *     var wordArray = CryptoJS.lib.WordArray.create();
    *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
    *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
    */
			init: function init(words, sigBytes) {
				words = this.words = words || [];

				if (sigBytes != undefined) {
					this.sigBytes = sigBytes;
				} else {
					this.sigBytes = words.length * 4;
				}
			},

			/**
    * Converts this word array to a string.
    *
    * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
    *
    * @return {string} The stringified word array.
    *
    * @example
    *
    *     var string = wordArray + '';
    *     var string = wordArray.toString();
    *     var string = wordArray.toString(CryptoJS.enc.Utf8);
    */
			toString: function toString(encoder) {
				return (encoder || Hex).stringify(this);
			},

			/**
    * Concatenates a word array to this word array.
    *
    * @param {WordArray} wordArray The word array to append.
    *
    * @return {WordArray} This word array.
    *
    * @example
    *
    *     wordArray1.concat(wordArray2);
    */
			concat: function concat(wordArray) {
				// Shortcuts
				var thisWords = this.words;
				var thatWords = wordArray.words;
				var thisSigBytes = this.sigBytes;
				var thatSigBytes = wordArray.sigBytes;

				// Clamp excess bits
				this.clamp();

				// Concat
				if (thisSigBytes % 4) {
					// Copy one byte at a time
					for (var i = 0; i < thatSigBytes; i++) {
						var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
						thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
					}
				} else {
					// Copy one word at a time
					for (var i = 0; i < thatSigBytes; i += 4) {
						thisWords[thisSigBytes + i >>> 2] = thatWords[i >>> 2];
					}
				}
				this.sigBytes += thatSigBytes;

				// Chainable
				return this;
			},

			/**
    * Removes insignificant bits.
    *
    * @example
    *
    *     wordArray.clamp();
    */
			clamp: function clamp() {
				// Shortcuts
				var words = this.words;
				var sigBytes = this.sigBytes;

				// Clamp
				words[sigBytes >>> 2] &= 0xffffffff << 32 - sigBytes % 4 * 8;
				words.length = Math.ceil(sigBytes / 4);
			},

			/**
    * Creates a copy of this word array.
    *
    * @return {WordArray} The clone.
    *
    * @example
    *
    *     var clone = wordArray.clone();
    */
			clone: function clone() {
				var clone = Base.clone.call(this);
				clone.words = this.words.slice(0);

				return clone;
			},

			/**
    * Creates a word array filled with random bytes.
    *
    * @param {number} nBytes The number of random bytes to generate.
    *
    * @return {WordArray} The random word array.
    *
    * @static
    *
    * @example
    *
    *     var wordArray = CryptoJS.lib.WordArray.random(16);
    */
			random: function random(nBytes) {
				var words = [];

				var r = function r(m_w) {
					var m_w = m_w;
					var m_z = 0x3ade68b1;
					var mask = 0xffffffff;

					return function () {
						m_z = 0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10) & mask;
						m_w = 0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10) & mask;
						var result = (m_z << 0x10) + m_w & mask;
						result /= 0x100000000;
						result += 0.5;
						return result * (Math.random() > .5 ? 1 : -1);
					};
				};

				for (var i = 0, rcache; i < nBytes; i += 4) {
					var _r = r((rcache || Math.random()) * 0x100000000);

					rcache = _r() * 0x3ade67b7;
					words.push(_r() * 0x100000000 | 0);
				}

				return new WordArray.init(words, nBytes);
			}
		});

		/**
   * Encoder namespace.
   */
		var C_enc = C.enc = {};

		/**
   * Hex encoding strategy.
   */
		var Hex = C_enc.Hex = {
			/**
    * Converts a word array to a hex string.
    *
    * @param {WordArray} wordArray The word array.
    *
    * @return {string} The hex string.
    *
    * @static
    *
    * @example
    *
    *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
    */
			stringify: function stringify(wordArray) {
				// Shortcuts
				var words = wordArray.words;
				var sigBytes = wordArray.sigBytes;

				// Convert
				var hexChars = [];
				for (var i = 0; i < sigBytes; i++) {
					var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
					hexChars.push((bite >>> 4).toString(16));
					hexChars.push((bite & 0x0f).toString(16));
				}

				return hexChars.join('');
			},

			/**
    * Converts a hex string to a word array.
    *
    * @param {string} hexStr The hex string.
    *
    * @return {WordArray} The word array.
    *
    * @static
    *
    * @example
    *
    *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
    */
			parse: function parse(hexStr) {
				// Shortcut
				var hexStrLength = hexStr.length;

				// Convert
				var words = [];
				for (var i = 0; i < hexStrLength; i += 2) {
					words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
				}

				return new WordArray.init(words, hexStrLength / 2);
			}
		};

		/**
   * Latin1 encoding strategy.
   */
		var Latin1 = C_enc.Latin1 = {
			/**
    * Converts a word array to a Latin1 string.
    *
    * @param {WordArray} wordArray The word array.
    *
    * @return {string} The Latin1 string.
    *
    * @static
    *
    * @example
    *
    *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
    */
			stringify: function stringify(wordArray) {
				// Shortcuts
				var words = wordArray.words;
				var sigBytes = wordArray.sigBytes;

				// Convert
				var latin1Chars = [];
				for (var i = 0; i < sigBytes; i++) {
					var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
					latin1Chars.push(String.fromCharCode(bite));
				}

				return latin1Chars.join('');
			},

			/**
    * Converts a Latin1 string to a word array.
    *
    * @param {string} latin1Str The Latin1 string.
    *
    * @return {WordArray} The word array.
    *
    * @static
    *
    * @example
    *
    *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
    */
			parse: function parse(latin1Str) {
				// Shortcut
				var latin1StrLength = latin1Str.length;

				// Convert
				var words = [];
				for (var i = 0; i < latin1StrLength; i++) {
					words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << 24 - i % 4 * 8;
				}

				return new WordArray.init(words, latin1StrLength);
			}
		};

		/**
   * UTF-8 encoding strategy.
   */
		var Utf8 = C_enc.Utf8 = {
			/**
    * Converts a word array to a UTF-8 string.
    *
    * @param {WordArray} wordArray The word array.
    *
    * @return {string} The UTF-8 string.
    *
    * @static
    *
    * @example
    *
    *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
    */
			stringify: function stringify(wordArray) {
				try {
					return decodeURIComponent(escape(Latin1.stringify(wordArray)));
				} catch (e) {
					throw new Error('Malformed UTF-8 data');
				}
			},

			/**
    * Converts a UTF-8 string to a word array.
    *
    * @param {string} utf8Str The UTF-8 string.
    *
    * @return {WordArray} The word array.
    *
    * @static
    *
    * @example
    *
    *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
    */
			parse: function parse(utf8Str) {
				return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
			}
		};

		/**
   * Abstract buffered block algorithm template.
   *
   * The property blockSize must be implemented in a concrete subtype.
   *
   * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
   */
		var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
			/**
    * Resets this block algorithm's data buffer to its initial state.
    *
    * @example
    *
    *     bufferedBlockAlgorithm.reset();
    */
			reset: function reset() {
				// Initial values
				this._data = new WordArray.init();
				this._nDataBytes = 0;
			},

			/**
    * Adds new data to this block algorithm's buffer.
    *
    * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
    *
    * @example
    *
    *     bufferedBlockAlgorithm._append('data');
    *     bufferedBlockAlgorithm._append(wordArray);
    */
			_append: function _append(data) {
				// Convert string to WordArray, else assume WordArray already
				if (typeof data == 'string') {
					data = Utf8.parse(data);
				}

				// Append
				this._data.concat(data);
				this._nDataBytes += data.sigBytes;
			},

			/**
    * Processes available data blocks.
    *
    * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
    *
    * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
    *
    * @return {WordArray} The processed data.
    *
    * @example
    *
    *     var processedData = bufferedBlockAlgorithm._process();
    *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
    */
			_process: function _process(doFlush) {
				// Shortcuts
				var data = this._data;
				var dataWords = data.words;
				var dataSigBytes = data.sigBytes;
				var blockSize = this.blockSize;
				var blockSizeBytes = blockSize * 4;

				// Count blocks ready
				var nBlocksReady = dataSigBytes / blockSizeBytes;
				if (doFlush) {
					// Round up to include partial blocks
					nBlocksReady = Math.ceil(nBlocksReady);
				} else {
					// Round down to include only full blocks,
					// less the number of blocks that must remain in the buffer
					nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
				}

				// Count words ready
				var nWordsReady = nBlocksReady * blockSize;

				// Count bytes ready
				var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

				// Process blocks
				if (nWordsReady) {
					for (var offset = 0; offset < nWordsReady; offset += blockSize) {
						// Perform concrete-algorithm logic
						this._doProcessBlock(dataWords, offset);
					}

					// Remove processed words
					var processedWords = dataWords.splice(0, nWordsReady);
					data.sigBytes -= nBytesReady;
				}

				// Return processed words
				return new WordArray.init(processedWords, nBytesReady);
			},

			/**
    * Creates a copy of this object.
    *
    * @return {Object} The clone.
    *
    * @example
    *
    *     var clone = bufferedBlockAlgorithm.clone();
    */
			clone: function clone() {
				var clone = Base.clone.call(this);
				clone._data = this._data.clone();

				return clone;
			},

			_minBufferSize: 0
		});

		/**
   * Abstract hasher template.
   *
   * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
   */
		var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
			/**
    * Configuration options.
    */
			cfg: Base.extend(),

			/**
    * Initializes a newly created hasher.
    *
    * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
    *
    * @example
    *
    *     var hasher = CryptoJS.algo.SHA256.create();
    */
			init: function init(cfg) {
				// Apply config defaults
				this.cfg = this.cfg.extend(cfg);

				// Set initial values
				this.reset();
			},

			/**
    * Resets this hasher to its initial state.
    *
    * @example
    *
    *     hasher.reset();
    */
			reset: function reset() {
				// Reset data buffer
				BufferedBlockAlgorithm.reset.call(this);

				// Perform concrete-hasher logic
				this._doReset();
			},

			/**
    * Updates this hasher with a message.
    *
    * @param {WordArray|string} messageUpdate The message to append.
    *
    * @return {Hasher} This hasher.
    *
    * @example
    *
    *     hasher.update('message');
    *     hasher.update(wordArray);
    */
			update: function update(messageUpdate) {
				// Append
				this._append(messageUpdate);

				// Update the hash
				this._process();

				// Chainable
				return this;
			},

			/**
    * Finalizes the hash computation.
    * Note that the finalize operation is effectively a destructive, read-once operation.
    *
    * @param {WordArray|string} messageUpdate (Optional) A final message update.
    *
    * @return {WordArray} The hash.
    *
    * @example
    *
    *     var hash = hasher.finalize();
    *     var hash = hasher.finalize('message');
    *     var hash = hasher.finalize(wordArray);
    */
			finalize: function finalize(messageUpdate) {
				// Final message update
				if (messageUpdate) {
					this._append(messageUpdate);
				}

				// Perform concrete-hasher logic
				var hash = this._doFinalize();

				return hash;
			},

			blockSize: 512 / 32,

			/**
    * Creates a shortcut function to a hasher's object interface.
    *
    * @param {Hasher} hasher The hasher to create a helper for.
    *
    * @return {Function} The shortcut function.
    *
    * @static
    *
    * @example
    *
    *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
    */
			_createHelper: function _createHelper(hasher) {
				return function (message, cfg) {
					return new hasher.init(cfg).finalize(message);
				};
			},

			/**
    * Creates a shortcut function to the HMAC's object interface.
    *
    * @param {Hasher} hasher The hasher to use in this HMAC helper.
    *
    * @return {Function} The shortcut function.
    *
    * @static
    *
    * @example
    *
    *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
    */
			_createHmacHelper: function _createHmacHelper(hasher) {
				return function (message, key) {
					return new C_algo.HMAC.init(hasher, key).finalize(message);
				};
			}
		});

		/**
   * Algorithm namespace.
   */
		var C_algo = C.algo = {};

		return C;
	}(Math);

	return CryptoJS;
});

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var THREE = __webpack_require__(1);

var GameStore = __webpack_require__(0);
var SoundSystem = __webpack_require__(7);
var Force = __webpack_require__(157);
var Utils = __webpack_require__(2);
var TagManager = __webpack_require__(50);
var BountyManager = __webpack_require__(51);
var EmitFloaterComponent = __webpack_require__(158);
var XpManager = __webpack_require__(52);
var AiManager = __webpack_require__(12);
var WeaponAi = __webpack_require__(159);
var Chunk = __webpack_require__(23);

var normalMass = 100;

var AiBase = function () {
    function AiBase() {
        _classCallCheck(this, AiBase);

        this.team = GameStore.Teams.Threat;
        this.type = undefined;
        this.isActive = true;
        this.speed = 1; // Movement speed setting on AI
        this.currentSpeed = 0; // Current speed setting, not the same as velocity. Velocity stores the sum of knockback & avoidance
        this.acceleration = 1; // Acceleration to go from 0 to speed
        this.deceleration = 1; // Deceleration to go from currentSpeed to 0
        this.maxSpeed = 12; // Used to limit speed of AI after being pushed
        this.maxKnockbackInitialSpeed = 200;
        this.maxKnockbackSpeed = 95;
        this.stopDistance = 5; // Distance from player to stop moving
        this.aggroDistance = 75;
        this.aggroHeightDeltaMaximum = 7;
        this.forceAgroAfterSpotted = false; // Once an enemy has aggro it will remain

        this.size = 1;
        this.mass = 100;
        this.avoidanceMomentum = new THREE.Vector3();
        this.forceMomentum = new THREE.Vector3();
        this.momentumDecay = 0.95;
        this.maxHealth = 100;
        this.offset = { x: 0, y: 0, z: 0 };
        this.customCollisionBounds = undefined;
        this.xp = 1;
        this.enemyTarget = undefined;

        this.weapon = new WeaponAi.WeaponAiSimple();
        this.shootCooldown = 1.25; // Time to wait between firing
        this.remainingShootCooldown = this.shootCooldown * Math.random();
        this.shootingHeightDeltaMaximum = 6;
        this.fireFOV = 1 - Utils.DegToRad(20.0);

        this.deathTime = 250; // Time to wait after death before removing (in ms)
        this.dead = false; // Tracker for time between death & remove

        this.firePos = undefined;
        this.firePositionOffset = { x: 0, y: 0, z: 0 };

        this.turnSpeed = 0.4 * Math.PI; // Yaw rotation speed in radians
        this.rotateSpeed = 0.1 * Math.PI; // Pitch & roll speed
        this.direction = new THREE.Vector3(); // Store for forward direction vector
        this.directionRight = new THREE.Vector3(); // Store for right direction vector
        this.desiredDirection = new THREE.Vector3();
        this.desiredPitchDirection = new THREE.Vector3();
        this.desiredRotation = new THREE.Vector3();
        this.utilObject3D = new THREE.Object3D();
        this.nextPosition = new THREE.Vector3(); // Used when calculating next position
        this.lastPosition = new THREE.Vector3(); // Used for velocity calculation
        this.lastVelocity = new THREE.Vector3(); // Used for acceleration calculation

        this.velocity = new THREE.Vector3(); // Store for current velocity
        this.currentAcceleration = new THREE.Vector3(); // Store for current acceleration

        this.opposingForces = new THREE.Vector3(); // Used to avoid clone in update
        this.internalForces = new THREE.Vector3(); // Used to avoid clone in update
        this.voxelVelocity = new THREE.Vector3(); // Used to avoid clone
        this.crossDir = new THREE.Vector3(); // Used to avoid clone
        this.targetDirection = new THREE.Vector3(); // Used to avoid clone

        this.stepHeight = 1; // Maximum allowed step height, anything higher than this will block movement
        this.heightSpeed = 5; // Speed to lerp character up or down for changes to height
        this.desiredHeight = 0; // Currently desired height

        this.voxelChance = 0.06; // Chance a voxel will spawn when removed
        this.voxelLife = 60; // Lifetime of spawned voxels on explode
        this.voxelEmissiveColor = undefined; // Initial emissive value of voxels on spawn
        this.voxelVelocityScale = 30; // Amount to scale velocity inherited from parent on voxels
        this.voxelVelocityMagnitudeMax = 6; // Maximum vector length for the velocity 
        this.voxelSize = 1.25; // Amount to scale voxel mesh size (takes parent scale & multiplies by this value)

        // For hit flash
        this.flashTime = 0.04;
        this.holdFlashTime = 0.1;
        this.deFlashTime = 0.1;
        this.flashColor = new THREE.Color();
        this.baseColor = new THREE.Color(0, 0, 0);

        this.forces = []; // Array of objects for internal forces such as knockback

        this.debugLines = []; // Store for our debug lines

        this.damagedSound = new SoundSystem.SoundShader();
        this.destroyedSound = new SoundSystem.SoundShader();
        this.idleSound = new SoundSystem.SoundShader();

        this.outOfBoundsTime = 0;
        this.outOfBoundsTimeoutSeconds = 12;
        this.outOfBoundsHeight = 10;
    }

    _createClass(AiBase, [{
        key: "Init",
        value: function Init(x, y, z) {
            this.health = this.maxHealth;

            if (this.mesh === undefined) {
                // Only setup new chunk if requested, stamp AI already have a chunk
                if (this.voxName !== undefined) {
                    this.chunk = GameStore.GameInstance.voxLoader.GetModel(this.voxName);
                }

                if (this.chunk.mesh !== undefined) {
                    this.mesh = this.chunk.mesh;

                    this.mesh.scale.set(this.size, this.size, this.size);
                    this.mesh.position.set(x + this.offset.x, y + this.offset.y, z + this.offset.z);
                    this.mesh.geometry.computeBoundingBox();
                    this.mesh.that = this;
                    GameStore.GameInstance.scene.add(this.mesh);
                    GameStore.GameInstance.targets.push(this.mesh);
                } else {
                    console.error("Attempted to setup mesh that doesn't exist on chunk:", this.chunk);
                }
            }

            if (this.collisionMesh === undefined) {
                this.customCollisionBounds = this.customCollisionBounds === undefined ? this.mesh.geometry.boundingBox.clone() : this.customCollisionBounds;
                var collisionBoundsBox = this.customCollisionBounds;
                var collisionBoundsBoxSize = new THREE.Vector3();
                collisionBoundsBox.getSize(collisionBoundsBoxSize);

                var geometry = new THREE.BoxGeometry(collisionBoundsBoxSize.x, collisionBoundsBoxSize.y, collisionBoundsBoxSize.z);
                this.collisionMesh = new THREE.Mesh(geometry, GameStore.GameInstance.aiManager.collisionBoxMat);
                this.collisionMesh.that = this;
                this.collisionMeshOffset = new THREE.Vector3();
                this.collisionMeshOffsetCopy = new THREE.Vector3();
                this.upVec = new THREE.Vector3(0, 1, 0);
                collisionBoundsBox.getCenter(this.collisionMeshOffset);

                GameStore.GameInstance.raycastMeshes.push(this.collisionMesh);
                if (GameStore.GameInstance.drawBoundingMeshes) {
                    GameStore.GameInstance.scene.add(this.collisionMesh);
                } else {
                    this.collisionMesh.updateMatrixWorld(true);
                }
            }

            if (this.emitFloaterComp === undefined) {
                this.emitFloaterComp = new EmitFloaterComponent(this);
            }

            if (this.bountyComp === undefined) {
                this.bountyComp = new BountyManager.BountyComponent(this);
            }

            if (this.xpComp === undefined) {
                this.xpComp = new XpManager.XpComponent(this, this.xp);
            }

            // Add fire position
            if (this.firePos === undefined && this.mesh !== undefined) {
                this.firePos = new THREE.Object3D();
                this.firePos.position.set(this.firePositionOffset.x, this.firePositionOffset.y, this.firePositionOffset.z);
                this.mesh.add(this.firePos);
            }
        }
    }, {
        key: "createChunkFromArray",
        value: function createChunkFromArray(dataArray, arraySize, offset) {
            var blockSize = GameStore.GameInstance.world.blockSize;
            var newChunk = new Chunk();
            newChunk.blockSize = blockSize;
            newChunk.Create(arraySize, arraySize, arraySize);

            for (var x = 0; x < arraySize; ++x) {
                for (var y = 0; y < arraySize; ++y) {
                    for (var z = 0; z < arraySize; ++z) {
                        var color = dataArray[x + y * arraySize + z * arraySize * arraySize];
                        if (color !== undefined) {
                            newChunk.ActivateBlock(x, y, z, color);
                        }
                    }
                }
            }

            newChunk.Rebuild(offset);

            return newChunk;
        }

        /**
         * @description Finds height of ground at position
         * @param {number} posX X coordinate of position
         * @param {number} posZ Z coordinate of position
         * @returns {boolean} Returns height at position
         */

    }, {
        key: "GetHeight",
        value: function GetHeight(posX, posZ) {
            var height = GameStore.GameInstance.chunkManager.GetHeight(posX + this.chunk.blockSize * this.chunk.chunkSizeX / 2, posZ + this.chunk.blockSize * this.chunk.chunkSizeX / 2);

            height = height !== undefined ? height : 0;

            return height;
        }

        /**
         * @description Use to move AI to new height given next position
         * @param {number} newX X coordinate of the next position
         * @param {number} newZ Z coordinate of the next position
         * @param {number} delta Delta time from tick
         * @returns {boolean} Returns true if the height change was successful
         */

    }, {
        key: "ChangeHeight",
        value: function ChangeHeight(newX, newZ, delta) {
            // Get desired height
            this.desiredHeight = this.GetHeight(newX, newZ) + this.offset.y;
            var heightDelta = this.desiredHeight - this.mesh.position.y;

            // Is this height change allowed?
            if (heightDelta <= this.stepHeight) {
                var heightChange = this.heightSpeed * delta;

                // Set new height
                if (heightChange > Math.abs(heightDelta)) {
                    this.mesh.position.y = this.desiredHeight;
                } else {
                    this.mesh.position.y += Math.sign(heightDelta) * heightChange;
                }

                return true;
            } else {
                return false;
            }
        }
    }, {
        key: "FindEnemyTarget",
        value: function FindEnemyTarget() {
            var _this = this;

            var player = GameStore.GameInstance.player;
            var playerDist = this.mesh.position.distanceTo(player.mesh.position);
            var playerHeightDelta = Math.abs(player.mesh.position.y - this.mesh.position.y);

            var closestStamp = undefined;
            var closestStampDist = Infinity;
            GameStore.GameInstance.stampManager.cachedSpawnedStampsAiList.forEach(function (ai) {
                if (ai.team !== _this.team) {
                    var dist = _this.mesh.position.distanceTo(ai.mesh.position);
                    var heightDelta = Math.abs(ai.mesh.position.y - _this.mesh.position.y);
                    if (dist < closestStampDist && _this.checkTargetInSameRoom(ai) && heightDelta < _this.aggroHeightDeltaMaximum) {
                        closestStampDist = dist;
                        closestStamp = ai;
                    }
                }
            });

            if (closestStamp !== undefined && closestStampDist < this.aggroDistance) {
                this.forceAgroAfterSpotted = true;
                this.enemyTarget = closestStamp;
            } else if (this.forceAgroAfterSpotted || playerDist < this.aggroDistance && this.checkTargetInSameRoom(player) && playerHeightDelta <= this.aggroHeightDeltaMaximum) {
                this.forceAgroAfterSpotted = true;
                this.enemyTarget = player;
            } else {
                this.enemyTarget = undefined;
            }

            return this.enemyTarget;
        }
    }, {
        key: "CopyLastPositionAndVelocity",
        value: function CopyLastPositionAndVelocity() {
            // Vector copy instead of clone for performance
            this.lastPosition.x = this.mesh.position.x;
            this.lastPosition.y = this.mesh.position.y;
            this.lastPosition.z = this.mesh.position.z;

            this.lastVelocity.x = this.velocity.x;
            this.lastVelocity.y = this.velocity.y;
            this.lastVelocity.z = this.velocity.z;
        }
    }, {
        key: "CalcVelocityAndAcceleration",
        value: function CalcVelocityAndAcceleration() {
            // Get new velocity & acceleration
            this.velocity.x = this.mesh.position.x - this.lastPosition.x;
            this.velocity.y = this.mesh.position.y - this.lastPosition.y;
            this.velocity.z = this.mesh.position.z - this.lastPosition.z;

            this.currentAcceleration.x = this.velocity.x - this.lastVelocity.x;
            this.currentAcceleration.y = this.velocity.y - this.lastVelocity.y;
            this.currentAcceleration.z = this.velocity.z - this.lastVelocity.z;
        }
    }, {
        key: "RotateToDesiredDirection",
        value: function RotateToDesiredDirection(delta) {
            // Rotate body yaw
            var deltaAngle = this.direction.angleTo(this.desiredDirection);
            var frameRotAmount = this.turnSpeed * delta;
            if (deltaAngle > 0) {
                if (frameRotAmount >= deltaAngle) {
                    this.mesh.rotation.z = Math.atan2(this.desiredDirection.x, this.desiredDirection.z);
                } else {
                    this.crossDir.copy(this.direction).cross(this.desiredDirection);
                    this.crossDir.y = this.crossDir.y === 0 ? this.crossDir.y = -1 : this.crossDir.y;
                    this.mesh.rotation.z += Math.sign(this.crossDir.y) * frameRotAmount;
                }
            }
        }
    }, {
        key: "SetPositionFromNextPosition",
        value: function SetPositionFromNextPosition(delta) {
            this.nextPosition = GameStore.GameInstance.levelManager.checkRoomCollision(this.mesh.position, this.nextPosition, this.customCollisionBounds);

            var changeHeightAllowed = this.ChangeHeight(this.nextPosition.x, this.nextPosition.z, delta);

            // Only allow AI to move forward if the step height was allowed
            if (changeHeightAllowed) {
                this.mesh.position.x = this.nextPosition.x;
                this.mesh.position.z = this.nextPosition.z;

                return true;
            }

            return false;
        }
    }, {
        key: "HandleAcceleration",
        value: function HandleAcceleration(delta) {
            if (this.currentSpeed < this.speed) {
                var accelBy = this.acceleration * delta;
                if (this.speed - this.currentSpeed < accelBy) {
                    this.currentSpeed = this.speed;
                } else {
                    this.currentSpeed += accelBy;
                }
            }
        }
    }, {
        key: "HandleDeceleration",
        value: function HandleDeceleration(delta) {
            if (this.currentSpeed > 0) {
                var decelBy = this.deceleration * delta;
                if (this.currentSpeed < decelBy) {
                    this.currentSpeed = 0;
                } else {
                    this.currentSpeed -= decelBy;
                }
            }
        }
    }, {
        key: "FindDesiredNextPosition",
        value: function FindDesiredNextPosition(delta) {
            if (this.enemyTarget === undefined) {
                this.HandleDeceleration(delta);
            } else {
                this.HandleAcceleration(delta);
            }

            // Calculate speed to add
            this.nextPosition.x = this.mesh.position.x + this.direction.x * this.currentSpeed * delta;
            this.nextPosition.y = this.mesh.position.y;
            this.nextPosition.z = this.mesh.position.z + this.direction.z * this.currentSpeed * delta;
        }
    }, {
        key: "AddAvoidanceToNextPosition",
        value: function AddAvoidanceToNextPosition(delta) {
            // Get push forces from other AI
            var opposingForces = GameStore.GameInstance.aiManager.getForcesFromOtherAI(this);

            // Vector copy instead of clone for performance
            this.opposingForces.x = opposingForces.x;
            this.opposingForces.y = opposingForces.y;
            this.opposingForces.z = opposingForces.z;
            this.opposingForces.multiplyScalar(delta);

            // Process momentum from push forces
            this.avoidanceMomentum.multiplyScalar(this.momentumDecay);
            this.avoidanceMomentum.add(this.opposingForces);

            // Calculate speed to add
            this.nextPosition.x += this.avoidanceMomentum.x;
            this.nextPosition.z += this.avoidanceMomentum.z;

            // Limit avoidance speed to maxSpeed (if moving on x/z at all)
            if (this.lastPosition.length() > 0 && (Math.abs(this.nextPosition.x - this.lastPosition.x) > 0 || Math.abs(this.nextPosition.y - this.lastPosition.y) > 0 || Math.abs(this.nextPosition.z - this.lastPosition.z) > 0)) {
                this.nextPosition.sub(this.lastPosition);
                this.nextPosition.clampLength(0, this.maxSpeed * delta);
                this.nextPosition.add(this.lastPosition);
            }
        }
    }, {
        key: "AddKnockbackToNextPosition",
        value: function AddKnockbackToNextPosition(delta) {
            // Get push forces from within (such as knockback)
            var internalForces = GameStore.GameInstance.aiManager.getInternalForces(this);

            // Vector copy instead of clone for performance
            this.internalForces.x = internalForces.x;
            this.internalForces.y = internalForces.y;
            this.internalForces.z = internalForces.z;
            this.internalForces.multiplyScalar(delta);

            // Limit initial forces
            if (this.internalForces.length() > 0) {
                this.internalForces.clampLength(0, this.maxKnockbackInitialSpeed * delta);
            }

            this.nextPosition.x += this.internalForces.x;
            this.nextPosition.z += this.internalForces.z;

            // Add knockback momemtum
            this.forceMomentum.multiplyScalar(this.momentumDecay);
            this.forceMomentum.add(this.internalForces);

            // Limit momentum max speed
            if (this.forceMomentum.length() > 0) {
                this.forceMomentum.clampLength(0, this.maxKnockbackSpeed * delta);
            }

            this.nextPosition.x += this.forceMomentum.x;
            this.nextPosition.z += this.forceMomentum.z;
        }
    }, {
        key: "FindDesiredDirection",
        value: function FindDesiredDirection() {
            this.desiredDirection.x = this.direction.x;
            this.desiredDirection.y = this.direction.y;
            this.desiredDirection.z = this.direction.z;
        }

        // Given an AI will return true or false if this AI should attempt to avoid

    }, {
        key: "ShouldAvoid",
        value: function ShouldAvoid(obstacleAI) {
            // Do not avoid the subbot
            if (obstacleAI.type === AiManager.EAiType.SubBot) {
                return false;
            }

            // Do not avoid enemies
            if (obstacleAI.team !== this.team) {
                return false;
            }

            // Do not avoid the package
            if (obstacleAI.type === AiManager.EAiType.Goal) {
                return false;
            }

            return true;
        }
    }, {
        key: "ShouldFire",
        value: function ShouldFire() {
            // Am I dead?
            if (this.dead) {
                return false;
            }

            // Is my cooldown complete?
            if (this.remainingShootCooldown > 0) {
                return false;
            }

            if (this.enemyTarget !== undefined) {
                // Is the target still alive?
                if (this.enemyTarget.dead) {
                    return false;
                }

                // Is the target on my team?
                if (this.enemyTarget.team === this.team) {
                    return false;
                }

                // Is target within height range?
                var enemyHeightDelta = Math.abs(this.enemyTarget.mesh.position.y - this.mesh.position.y);
                if (enemyHeightDelta > this.shootingHeightDeltaMaximum) {
                    return false;
                }

                // Is target close enough?
                var enemyDist = this.mesh.position.distanceTo(this.enemyTarget.mesh.position);
                if (enemyDist > this.aggroDistance) {
                    return false;
                }

                // Is target in FOV?
                this.targetDirection.copy(this.enemyTarget.mesh.position).sub(this.mesh.position);
                this.targetDirection.normalize();
                var dot = this.direction.dot(this.targetDirection);
                if (dot < this.fireFOV) {
                    return false;
                }
            } else {
                return false;
            }

            return true;
        }
    }, {
        key: "FireWeapon",
        value: function FireWeapon() {
            this.remainingShootCooldown = this.shootCooldown;

            this.weapon.ActivateOnce(this);
        }
    }, {
        key: "Update",
        value: function Update(time, delta) {
            this.emitFloaterComp.update(time, delta);

            if (!this.dead) {
                if (this.collisionMesh.parent === null || this.collisionMesh.parent.type === "Scene") {
                    this.collisionMeshOffsetCopy.copy(this.collisionMeshOffset);
                    this.collisionMesh.position.copy(this.mesh.position).add(this.collisionMeshOffsetCopy.applyAxisAngle(this.upVec, this.mesh.rotation.z));
                    this.collisionMesh.rotation.y = this.mesh.rotation.z;

                    this.collisionMesh.updateMatrixWorld(true);
                }

                if (this.mesh.position.y > this.outOfBoundsHeight) {
                    this.outOfBoundsTime += delta;

                    if (this.outOfBoundsTime >= this.outOfBoundsTimeoutSeconds) {

                        this.Die();
                    }
                }

                // Out of world some how
                if (isNaN(this.mesh.position.x) || isNaN(this.mesh.position.y) || isNaN(this.mesh.position.z)) {
                    this.Die();
                }
            } else if (Date.now() - this.timeOfDeath > this.deathTime) {
                this.deathTimeFinishedFunc();
            }
        }
    }, {
        key: "Draw",
        value: function Draw(time, delta) {
            if (this.isActive) {
                this.Update(time, delta);

                this.HandleHitFlash(delta);
            }
        }
    }, {
        key: "StartHitFlash",
        value: function StartHitFlash() {
            this.currentFlashTime = this.flashTime;
            this.currentHoldFlashTime = 0;
            this.currentDeFlashTime = 0;
        }
    }, {
        key: "SetEmissiveOnMesh",
        value: function SetEmissiveOnMesh(color, alpha) {
            this.mesh.material.emissive.lerp(color, alpha);
        }
    }, {
        key: "HandleHitFlash",
        value: function HandleHitFlash(delta) {
            if (this.mesh === undefined) {
                return;
            }

            // Lerp to white
            if (this.currentFlashTime > 0) {
                var alpha = 1 - this.currentFlashTime / this.flashTime; // Starts at 0 and lerps to 1
                this.SetEmissiveOnMesh(this.flashColor, alpha);
                this.currentFlashTime -= delta;

                // If complete setup hold time
                if (this.currentFlashTime <= 0) {
                    this.currentFlashTime = 0;
                    this.SetEmissiveOnMesh(this.flashColor, 1);
                    this.currentHoldFlashTime = this.holdFlashTime;
                }
            }

            // Sustain flash
            if (this.currentHoldFlashTime > 0) {
                this.currentHoldFlashTime -= delta;

                // If complete setup deflash time
                if (this.currentHoldFlashTime <= 0) {
                    this.currentHoldFlashTime = 0;
                    this.currentDeFlashTime = this.deFlashTime;
                }
            }

            // Deflash
            if (this.currentDeFlashTime > 0) {
                var alpha = 1 - this.currentDeFlashTime / this.deFlashTime; // Starts at 0 and lerps to 1
                this.SetEmissiveOnMesh(this.baseColor, alpha);
                this.currentDeFlashTime -= delta;

                // Done!
                if (this.currentDeFlashTime <= 0) {
                    this.currentDeFlashTime = 0;
                    this.SetEmissiveOnMesh(this.baseColor, 1);
                }
            }
        }

        /**
         * @description Process damage on AI
         * @param {number} damage Amount of damage to deal
         * @param {Object} [team] Attackers team
         * @param {Object} [hitPosition] A Vector3 for the damage position
         * @param {number} [forceMass] Amount of force for knockback
         * @param {number} [forceLifetime] Lifetime of knockback
         */

    }, {
        key: "DoDamage",
        value: function DoDamage(damage, team, hitPosition, forceMass, forceLifetime, attacker) {
            if (!hitPosition) {
                hitPosition = new THREE.Vector3(this.mesh.position.x, this.mesh.position.y, this.mesh.position.z);
            }

            if (!forceMass) {
                forceMass = 0;
            }

            if (!forceLifetime) {
                forceLifetime = 0;
            }

            if (team === undefined) {
                team = GameStore.Teams.Threat;
            }

            if (team !== this.team) {
                this.health -= damage;
                this.StartHitFlash();
            }

            this.DoKnockBack(forceMass * (normalMass / this.mass), hitPosition, forceLifetime * (normalMass / this.mass));

            // Play damage sound
            this.damagedSound.Play(this.mesh.position);

            if (this.health <= 0) {
                this.Die(true);
            }
        }

        /**
         * @description Creates a knockback force
         * @param {number} forceMass Amount of force for knockback, must be greater than 0
         * @param {Object} hitPosition A Vector3 for the damage position
         * @param {number} forceLifetime Lifetime of knockback
         */

    }, {
        key: "DoKnockBack",
        value: function DoKnockBack(forceMass, hitPosition, forceLifetime) {
            if (forceMass > 0 && forceLifetime > 0) {
                var newForce = new Force(forceMass, this, forceLifetime, hitPosition);
                this.forces.push(newForce);
            }
        }

        /**
         * @description Removes all debug lines
         */

    }, {
        key: "RemoveDebugLines",
        value: function RemoveDebugLines() {
            while (this.debugLines.length > 0) {
                GameStore.GameInstance.scene.remove(this.debugLines.pop());
            }
        }
    }, {
        key: "DisposeMesh",
        value: function DisposeMesh() {
            if (GameStore.GameInstance.scene !== undefined) {
                GameStore.GameInstance.scene.remove(this.mesh);
                this.mesh.geometry.dispose();
                this.mesh.material.dispose();
            }
        }
    }, {
        key: "RemoveFromWorld",
        value: function RemoveFromWorld(playDeathSound, bountyAmount, useEmissiveForDiffuseIn, fadeEmissiveIn, bitColorsIn) {
            if (playDeathSound) {
                // Play death sound
                this.destroyedSound.Play();
            }

            var fadeEmissive = fadeEmissiveIn !== undefined ? fadeEmissiveIn : true;
            var useEmissiveForDiffuse = useEmissiveForDiffuseIn !== undefined ? useEmissiveForDiffuseIn : false;

            if (bountyAmount > 0) {
                this.voxelEmissiveColor = this.emitFloaterComp.particleColor.getHex();
                this.voxelChance *= 2;
                fadeEmissive = false;
                useEmissiveForDiffuse = true;
            }

            this.voxelVelocity.copy(this.velocity).multiplyScalar(this.voxelVelocityScale);
            this.voxelVelocity.clampLength(0, this.voxelVelocityMagnitudeMax);
            this.chunk.Explode(this.mesh.position, this.size * this.voxelSize, false, this.voxelChance, this.voxelLife, this.voxelEmissiveColor, this.voxelVelocity, fadeEmissive, useEmissiveForDiffuse, bitColorsIn);

            this.DisposeMesh();

            // Remove from targets list & tick
            var index = GameStore.GameInstance.targets.indexOf(this.mesh);
            if (index !== -1) {
                GameStore.GameInstance.targets.splice(index, 1);
            }

            this.mesh = undefined;
        }
    }, {
        key: "Die",
        value: function Die(playDeathSound) {
            var _this2 = this;

            // Don't kill me again
            if (this.dead) {
                return;
            }

            this.dead = true;
            this.timeOfDeath = Date.now();

            // Play death sound?
            if (!playDeathSound) {
                playDeathSound = false;
            }

            // Remove debug lines
            this.RemoveDebugLines();

            // Remove AI from aiManager
            GameStore.GameInstance.aiManager.removeAi(this);

            // Remove collision
            GameStore.GameInstance.scene.remove(this.collisionMesh);
            var collisionIndex = GameStore.GameInstance.raycastMeshes.indexOf(this.collisionMesh);
            if (collisionIndex !== -1) {
                GameStore.GameInstance.raycastMeshes.splice(collisionIndex, 1);
            }
            this.collisionMesh.geometry.dispose();
            this.collisionMesh = undefined;

            setTimeout(function () {
                return _this2.delayedDestroy();
            }, 3000);

            this.idleSound.FadeOut(0.25);

            var bountyAmount = 0;
            if (this.bountyComp !== undefined) {
                bountyAmount = this.bountyComp.awardBounty;
                this.bountyComp.claimBounty();
            }

            if (this.xpComp !== undefined) {
                this.xpComp.awardXp(this.bountyComp);
            }

            this.deathTimeFinishedFunc = function () {
                _this2.onDeathTimeFinished(playDeathSound, bountyAmount);
            };
        }
    }, {
        key: "onDeathTimeFinished",
        value: function onDeathTimeFinished(playDeathSound, bountyAmount) {
            this.RemoveFromWorld(playDeathSound, bountyAmount);

            if (this.tagComp !== undefined) {
                this.tagComp.destroy();
            }

            if (this.bountyComp !== undefined) {
                this.bountyComp.destroy();
            }
        }
    }, {
        key: "delayedDestroy",
        value: function delayedDestroy() {
            this.damagedSound.Destroy();
            this.destroyedSound.Destroy();
            this.idleSound.Destroy();

            this.weapon.destroy();
        }
    }, {
        key: "checkTargetInSameRoom",
        value: function checkTargetInSameRoom(target) {
            if (target !== undefined) {
                var targetWorldPos = target.mesh.position;
                var targetGridPos = GameStore.GameInstance.levelManager.getRoomGridPos(targetWorldPos.x, targetWorldPos.z);
                var myGridPos = GameStore.GameInstance.levelManager.getRoomGridPos(this.mesh.position.x, this.mesh.position.z);

                return myGridPos.x === targetGridPos.x && myGridPos.y === targetGridPos.y;
            }

            return false;
        }
    }, {
        key: "tag",
        value: function tag(message) {
            if (this.tagComp === undefined) {
                this.tagComp = new TagManager.TagComponent(this, message);
            } else {
                this.tagComp.tag(message.userId); // TODO: Send if has bounty
            }
        }
    }, {
        key: "untag",
        value: function untag() {
            if (this.tagComp !== undefined) {
                this.tagComp.untag();
            }
        }
    }, {
        key: "placeBounty",
        value: function placeBounty(message) {
            if (this.bountyComp !== undefined) {
                this.bountyComp.placeBounty(message);
            }
        }
    }, {
        key: "setActive",
        value: function setActive(isActive) {
            if (this.isActive !== isActive) {
                this.isActive = isActive;

                if (this.mesh !== undefined) {
                    this.mesh.visible = isActive;
                }
            }
        }
    }]);

    return AiBase;
}();

module.exports = AiBase;

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Projectiles = __webpack_require__(160);

var EProjectileType = Projectiles.EProjectileType;
module.exports.EProjectileType = EProjectileType;

var ProjectileManager = function () {
    function ProjectileManager() {
        _classCallCheck(this, ProjectileManager);

        this.projectileList = [];
        this.stampProjectileList = [];
    }

    _createClass(ProjectileManager, [{
        key: "GetProjectileInternal",
        value: function GetProjectileInternal(projName, objectClass, x, y, z, dir, owner) {
            this.projectileList[projName] = this.projectileList[projName] || {
                usedList: [],
                freeList: []
            };

            var listObject = this.projectileList[projName];
            if (listObject.freeList.length === 0) {
                var newProj = new objectClass(x, y, z, dir, owner);
                listObject.usedList.push(newProj);

                return newProj;
            } else {
                var proj = listObject.freeList[listObject.freeList.length - 1];
                proj.Init(x, y, z, dir, owner);

                listObject.usedList.push(proj);
                listObject.freeList.pop();

                return proj;
            }
        }
    }, {
        key: "GetProjectile",
        value: function GetProjectile(type, x, y, z, dir, owner) {
            if (type === EProjectileType.Simple) {
                return this.GetProjectileInternal("Simple", Projectiles.ProjectileSimple, x, y, z, dir, owner);
            } else if (type === EProjectileType.SimpleAi) {
                return this.GetProjectileInternal("SimpleAi", Projectiles.ProjectileSimpleAi, x, y, z, dir, owner);
            } else if (type === EProjectileType.Stamp) {
                return this.GetProjectileInternal("Stamp", Projectiles.ProjectileStamp, x, y, z, dir, owner);
            } else if (type === EProjectileType.StampThrow) {
                return this.GetProjectileInternal("StampThrow", Projectiles.ProjectileStampThrow, x, y, z, dir, owner);
            } else if (type === EProjectileType.SimpleBB) {
                return this.GetProjectileInternal("SimpleBB", Projectiles.ProjectileSimpleBB, x, y, z, dir, owner);
            } else if (type === EProjectileType.GordThrow) {
                return this.GetProjectileInternal("GordThrow", Projectiles.ProjectileGordThrow, x, y, z, dir, owner);
            }
        }
    }, {
        key: "ReturnProjectileInternal",
        value: function ReturnProjectileInternal(projName, proj) {
            var listObject = this.projectileList[projName];
            var usedIndex = listObject.usedList.indexOf(proj);
            if (usedIndex !== -1) {
                listObject.usedList.splice(usedIndex, 1);
            }
            listObject.freeList.push(proj);
        }
    }, {
        key: "ReturnProjectile",
        value: function ReturnProjectile(proj) {
            proj.Disable();

            if (proj.type === EProjectileType.Simple) {
                this.ReturnProjectileInternal("Simple", proj);
            } else if (proj.type === EProjectileType.SimpleAi) {
                this.ReturnProjectileInternal("SimpleAi", proj);
            } else if (proj.type === EProjectileType.SimpleBB) {
                this.ReturnProjectileInternal("SimpleBB", proj);
            }
        }
    }, {
        key: "addStampProjectile",
        value: function addStampProjectile(stampData) {
            this.stampProjectileList.push(stampData);
        }
    }, {
        key: "getStampProjectile",
        value: function getStampProjectile() {
            return this.stampProjectileList.shift();
        }
    }, {
        key: "getStampProjectileCount",
        value: function getStampProjectileCount() {
            return this.stampProjectileList.length;
        }
    }]);

    return ProjectileManager;
}();

module.exports.ProjectileManager = ProjectileManager;

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GameStore = __webpack_require__(0);
var SoundSystem = __webpack_require__(7);

var EUpgradeType = {
    IncreaseFireSpeed: 0,
    IncreaseJumpHeight: 1,
    Multishot: 2,
    IncreaseSpawnedStampCount: 3,
    IncreaseSpawnedStampSpeed: 4,
    SpawnedStampThrower: 5,
    IncreaseHealth: 6,
    IncreaseProjectileSpeed: 7
};
module.exports.EUpgradeType = EUpgradeType;

var upgradeList = [{
    type: EUpgradeType.IncreaseFireSpeed,
    weight: 1,
    name: "Increased Firing Rate",
    details: "Increases firing rate",
    voxName: "upgrade_fire_speed",
    playedUIIntro: false,
    upgradeSound: new SoundSystem.SoundShader("sound/upgrade_firerate.mp3"),
    maxUpgrades: 3
}, {
    type: EUpgradeType.IncreaseJumpHeight,
    weight: 1,
    name: "Increased Jump Height",
    details: "Increases how high Ama can jump",
    voxName: "upgrade_jump_height",
    playedUIIntro: false,
    upgradeSound: new SoundSystem.SoundShader("sound/upgrade_jumpheight.mp3"),
    maxUpgrades: 4
}, {
    type: EUpgradeType.Multishot,
    weight: 1,
    name: "Multishot",
    details: "Adds an extra Plasma Ball when firing",
    voxName: "upgrade_fireball_multishot",
    playedUIIntro: false,
    upgradeSound: new SoundSystem.SoundShader("sound/upgrade_multishot.mp3"),
    maxUpgrades: 3
}, {
    type: EUpgradeType.IncreaseSpawnedStampCount,
    weight: 1,
    name: "Increased Living Stamp Count",
    details: "Increases how many Stamps can be brought to life",
    voxName: "upgrade_stamp_count",
    playedUIIntro: false,
    upgradeSound: new SoundSystem.SoundShader("sound/upgrade_stampcount.mp3"),
    maxUpgrades: 10
}, {
    type: EUpgradeType.IncreaseSpawnedStampSpeed,
    weight: 1,
    name: "Increased Living Stamp Speed",
    details: "Increases movement speed of Living Stamps",
    voxName: "upgrade_stamp_speed",
    playedUIIntro: false,
    upgradeSound: new SoundSystem.SoundShader("sound/upgrade_stampspeed.mp3"),
    maxUpgrades: 4
}, {
    type: EUpgradeType.SpawnedStampThrower,
    weight: 1,
    name: "Stamp Thrower",
    details: "Upgrades a Living Stamp to throw large blocks",
    voxName: "upgrade_stamp_thrower",
    playedUIIntro: false,
    upgradeSound: new SoundSystem.SoundShader("sound/upgrade_stampthrower.mp3"),
    maxUpgrades: 3
}, {
    type: EUpgradeType.IncreaseHealth,
    weight: 1,
    name: "Increased Health",
    details: "Increases maximum health on Ama",
    voxName: "upgrade_increase_health",
    playedUIIntro: false,
    upgradeSound: new SoundSystem.SoundShader("sound/player_startup-01.mp3"),
    maxUpgrades: 3
}, {
    type: EUpgradeType.IncreaseProjectileSpeed,
    weight: 1,
    name: "Increased Plasma Ball Speed",
    details: "Increases Plasma Ball speed",
    voxName: "upgrade_fireball_speed",
    playedUIIntro: false,
    upgradeSound: new SoundSystem.SoundShader("sound/upgrade_plasmaspeed.mp3"),
    maxUpgrades: 3
}];
module.exports.upgradeList = upgradeList;

module.exports.UpgradeManager = function () {
    function _class() {
        _classCallCheck(this, _class);

        this.equippedInventory = {};
        this.onChangedCallbacks = {};
        this.spawnedCount = {};
    }

    _createClass(_class, [{
        key: "addOnChangedCallback",
        value: function addOnChangedCallback(upgradeType, func) {
            if (this.onChangedCallbacks[upgradeType] !== undefined) {
                this.onChangedCallbacks[upgradeType].push(func);
            } else {
                this.onChangedCallbacks[upgradeType] = [func];
            }
        }
    }, {
        key: "playUpgradeSound",
        value: function playUpgradeSound(upgradeType) {
            var upgradeSound = upgradeList[upgradeType].upgradeSound;
            if (upgradeSound !== undefined) {
                upgradeSound.Play();
            }
        }
    }, {
        key: "equipUpgrade",
        value: function equipUpgrade(upgradeType) {
            var _this = this;

            this.playUpgradeSound(upgradeType);
            this.equippedInventory[upgradeType] = this.equippedInventory[upgradeType] === undefined ? 1 : this.equippedInventory[upgradeType] + 1;

            var callbackList = this.onChangedCallbacks[upgradeType];
            if (callbackList !== undefined) {
                callbackList.forEach(function (callback) {
                    callback(_this.equippedInventory[upgradeType]);
                });
            }

            GameStore.hubbleManager.sendHubbleEvent("equip_upgrade");
        }
    }, {
        key: "resetSpawnedCount",
        value: function resetSpawnedCount() {
            this.spawnedCount = {};
        }
    }, {
        key: "addToSpawnedCount",
        value: function addToSpawnedCount(upgradeType) {
            this.spawnedCount[upgradeType] = this.spawnedCount[upgradeType] === undefined ? 1 : this.spawnedCount[upgradeType] + 1;
        }
    }, {
        key: "getTotalSpawnedAndEquippedCount",
        value: function getTotalSpawnedAndEquippedCount(upgradeType) {
            var total = this.getEquippedUpgradeCount(upgradeType);
            return this.spawnedCount[upgradeType] === undefined ? total : total + this.spawnedCount[upgradeType];
        }
    }, {
        key: "getEquippedUpgradeCount",
        value: function getEquippedUpgradeCount(upgradeType) {
            return this.equippedInventory[upgradeType] === undefined ? 0 : this.equippedInventory[upgradeType];
        }
    }, {
        key: "getIncreasedFiringSpeedModifier",
        value: function getIncreasedFiringSpeedModifier() {
            var count = this.getEquippedUpgradeCount(EUpgradeType.IncreaseFireSpeed);
            return count > 0 ? Math.pow(1.5, count) : 1;
        }
    }, {
        key: "getIncreasedJumpHeightModifier",
        value: function getIncreasedJumpHeightModifier() {
            var count = this.getEquippedUpgradeCount(EUpgradeType.IncreaseJumpHeight);
            return count > 0 ? Math.pow(1.1, count) : 1;
        }
    }, {
        key: "getIncreasedSpawnStampSpeedModifier",
        value: function getIncreasedSpawnStampSpeedModifier() {
            var count = this.getEquippedUpgradeCount(EUpgradeType.IncreaseSpawnedStampSpeed);
            return count > 0 ? Math.pow(1.2, count) : 1;
        }
    }, {
        key: "getIncreasedProjectileSpeedModifier",
        value: function getIncreasedProjectileSpeedModifier() {
            var count = this.getEquippedUpgradeCount(EUpgradeType.IncreaseProjectileSpeed);
            return count > 0 ? Math.pow(1.2, count) : 1;
        }
    }]);

    return _class;
}();

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.

var THREE = __webpack_require__(1);
var Block = __webpack_require__(34);
var GameStore = __webpack_require__(0);

function Chunk() {
    this.wireframe = false;
    this.blockSize = 0.1;
    this.chunkSize = 4;
    this.chunkSizeX = 0;
    this.chunkSizeY = 0;
    this.chunkSizeZ = 0;
    this.posX = 0;
    this.posY = 0;
    this.posZ = 0;
    this.uvOffsetX = 0;
    this.uvOffsetY = 0;
    this.uvScale = 0.5;
    this.shininess = 400;
    this.normalScaler = new THREE.Vector2(0.25, 0.25);
    this.type = "GenericChunk";
    this.activeTriangles = 0;
    this.mesh = undefined;
    this.blocks = undefined;
    this.cid = undefined;
    this.percentChanceSpawnBlock = 0.85;

    this.isBuilt = false;
    this.avgHeight = 0;

    this.needProcess = {};
    this.processed = [];
    this.maxBlockCount = 0;

    Chunk.prototype.Clone = function () {
        var obj = new Chunk();

        obj.wireframe = this.wireframe;
        obj.blockSize = this.blockSize;
        obj.chunkSize = this.chunkSize;
        obj.chunkSizeX = this.chunkSizeX;
        obj.chunkSizeY = this.chunkSizeY;
        obj.chunkSizeZ = this.chunkSizeZ;
        obj.posX = this.posX;
        obj.posY = this.posY;
        obj.posZ = this.posZ;
        obj.type = this.type;
        obj.activeTriangles = this.activeTriangles;
        obj.mesh = this.mesh.clone();
        obj.mesh.material = this.mesh.material.clone();
        obj.cid = this.cid;
        obj.avgHeight = this.avgHeight;
        var newBlocks = this.blocks.map(function (yArray) {
            return yArray.map(function (zArray) {
                return zArray.map(function (block) {
                    if (block !== undefined) {
                        var b = new Block();
                        b.colorBuffer = block.colorBuffer;
                        b.dataBuffer = block.dataBuffer;

                        return b;
                    }
                });
            });
        });
        obj.blocks = newBlocks;

        return obj;
    };

    Chunk.prototype.SetWireFrame = function (val) {
        this.wireframe = val;
        this.Rebuild();
    };

    Chunk.prototype.GetActiveTriangles = function () {
        return this.activeTriangles;
    };

    Chunk.prototype.GetAvgHeight = function () {
        return this.avgHeight;
    };

    Chunk.prototype.GetBoundingBox = function () {
        var minx = this.posX;
        var maxx = this.posX + this.chunkSizeX * this.blockSize / 2;
        var miny = this.posY;
        var maxy = this.posY + this.chunkSizeY * this.blockSize / 2;

        // y is actually Z when rotated.
        this.box = { "minx": minx, "maxx": maxx,
            "minz": miny, "maxz": maxy };
    };

    Chunk.prototype.CreateWithDiffuse = function (block, pos, x, y, z, scale, lifeTime, emissiveColor, parentVelocity, fadeEmissive) {
        if (this.blocks === undefined || this.blocks[x] === undefined || this.blocks[x][y] === undefined || this.blocks[x][y][z] === undefined) {

            return undefined;
        }

        if (emissiveColor === 0x000000 && this.blocks[x][y][z].getA() > 0) {
            var color = {
                r: this.blocks[x][y][z].getR(),
                g: this.blocks[x][y][z].getG(),
                b: this.blocks[x][y][z].getB()

                // Color to Hex Number
            };emissiveColor = color.r << 16 ^ color.g << 8 ^ color.b << 0;
        }

        if (block !== undefined) {
            block.CreateFromExplode(pos.x + this.blockSize * x / 2, pos.y + this.blockSize * y / 2, pos.z + this.blockSize * z / 2, this.blockSize * scale, this.blocks[x][y][z].getR(), this.blocks[x][y][z].getG(), this.blocks[x][y][z].getB(), lifeTime, Math.random() * 180, 4.5, emissiveColor, parentVelocity, fadeEmissive);
        }
    };

    Chunk.prototype.CreateWithEmissive = function (block, pos, x, y, z, scale, lifeTime, emissiveColor, parentVelocity, fadeEmissive, bitColors) {
        if (block !== undefined) {
            if (bitColors !== undefined) {
                var index = this.bitColorIndex % bitColors.length;
                this.bitColorIndex++;
                emissiveColor = bitColors[index];
            }

            block.CreateFromExplode(pos.x + this.blockSize * x / 2, pos.y + this.blockSize * y / 2, pos.z + this.blockSize * z / 2, this.blockSize * scale, Math.round(emissiveColor.r * 255), Math.round(emissiveColor.g * 255), Math.round(emissiveColor.b * 255), lifeTime, Math.random() * 180, 4.5, emissiveColor.getHex(), parentVelocity, fadeEmissive);
        }
    };

    /**
     * @description Spawn cubes for some percent of the voxels within this chunk
     * @param {Object} pos Vector3 of the explode position.
     * @param {number} [scale] Amount to scale the spawned cubes by.
     * @param {boolean} [removeMesh] Whether to remove the mesh from world when done exploding.
     * @param {number} [percentChance] Percent chance a voxel cube will spawn if one to remove is found.
     * @param {number} [lifeTime] Lifetime of spawned cubes.
     * @param {number} [emissiveColor] Hex color value for spawned cubes.
     * @param {Object} [parentVelocity] Velocity of exploding parent.
     * @param {boolean} [fadeEmissive] Optional value to set whether emissive should fade over time. TRUE by default.
     * @param {boolean} [useEmissiveColorForDiffuse] Optional value ot set if emissive color should be used on diffuse. FALSE by default
     * @param {Object} [bitColors] Option array of THREE colors to use if a bit bot explosion
     */
    Chunk.prototype.Explode = function (pos, scale, removeMesh, percentChance, lifeTime, emissiveColor, parentVelocity, fadeEmissive, useEmissiveColorForDiffuse, bitColors, specificX, specificY, specificZ) {
        if (GameStore.GameInstance.physBlockPool === undefined) {
            return;
        }

        if (removeMesh === undefined) {
            removeMesh = true;
        }

        if (percentChance === undefined) {
            percentChance = this.percentChanceSpawnBlock;
        }

        if (scale === undefined) {
            scale = 1;
        }

        if (lifeTime === undefined) {
            lifeTime = 30;
        }

        if (emissiveColor === undefined) {
            emissiveColor = 0x000000;
        }

        if (parentVelocity === undefined) {
            parentVelocity = new THREE.Vector3();
        }

        if (fadeEmissive === undefined) {
            fadeEmissive = true;
        }

        var CreateFunction = undefined;
        if (useEmissiveColorForDiffuse !== undefined && useEmissiveColorForDiffuse) {
            CreateFunction = this.CreateWithEmissive.bind(this);

            if (bitColors !== undefined) {
                this.bitColorIndex = 0;
            } else {
                emissiveColor = new THREE.Color(emissiveColor);
            }
        } else {
            CreateFunction = this.CreateWithDiffuse.bind(this);
        }

        this.explodeDelta = 0;

        if (specificX !== undefined && specificY !== undefined && specificZ !== undefined) {
            var block = GameStore.GameInstance.physBlockPool.Get();
            if (block !== undefined) {
                CreateFunction(block, pos, specificX, specificY, specificZ, scale, lifeTime, emissiveColor, parentVelocity, fadeEmissive, bitColors);
            }
        } else {
            // For each block create array with color etc and create a particleEngine 
            // with that array. 
            var _block = undefined;
            for (var _x = 0; _x < this.chunkSizeX; _x++) {
                for (var _y = 0; _y < this.chunkSizeY; _y++) {
                    for (var _z = 0; _z < this.chunkSizeZ; _z++) {
                        if (this.blocks[_x][_y][_z].getActive()) {
                            if (Math.random() <= percentChance) {
                                _block = GameStore.GameInstance.physBlockPool.Get();
                                CreateFunction(_block, pos, _x, _y, _z, scale, lifeTime, emissiveColor, parentVelocity, fadeEmissive, bitColors);
                            }
                        }
                    }
                }
            }
        }

        if (removeMesh && this.mesh !== undefined) {
            GameStore.GameInstance.scene.remove(this.mesh);
            this.mesh.geometry.dispose();
            this.mesh.material.dispose();
            this.mesh = undefined;
        }
    };

    this.toKey = function (x, y, z) {
        return x + y * 1000 + z * 10000000;
    };

    this.fromKey = function (key) {
        var z = math.floor(key / 10000000);
        var y = math.floor((key - z) / 1000);
        var x = math.floor(key - (z + y));

        return { x: x, y: y, z: z };
    };

    this.queueNeighbors = function (key, parentList) {
        var vox = this.fromKey(key);

        var sX = Math.max(0, vox.x - 1);
        var sY = Math.max(0, vox.y - 1);
        var sZ = Math.max(0, vox.z - 1);
        var eX = Math.min(this.chunkSizeX - 1, vox.x + 1);
        var eY = Math.min(this.chunkSizeY - 1, vox.y + 1);
        var eZ = Math.min(this.chunkSizeZ - 1, vox.z + 1);

        for (var ix = sX; ix <= eX; ++ix) {
            for (var iy = sY; iy < eY; ++iy) {
                for (var iz = sZ; iz < eZ; ++iz) {
                    var _key = this.toKey(x, y, z);

                    if (this.blocks[ix][iy][iz].getActive() && !this.isProcessed(_key)) {
                        this.needProcess[_key] = parentList !== undefined ? parentList : null;
                    }
                }
            }
        }
    };

    this.isProcessed = function (key) {
        for (var list in this.processed) {
            if (list[key] !== undefined) {
                return true;
            }
        }

        return false;
    };

    Chunk.prototype.Cut = function (x, y, z) {
        this.blocks[x][y][z].setActive(false);

        this.queueNeighbors(this.toKey(x, y, z));

        this.Rebuild();
    };

    this.processVox = function (key) {

        var parentList = this.needProcess[key];

        this.needProcess[key] = undefined;

        // if already processed, join lists
        for (var list in this.processed) {
            if (list[key] !== undefined) {
                if (parentList === undefined) {
                    // do nothing
                } else {
                    list = Object.assign({}, list, parentList);
                }

                parentList = list;
            }
        }

        if (parentList === undefined) {
            parentList = _defineProperty({}, key, null);

            this.processed.push(parentList);
        } else {
            parentList[key] = null;
        }

        // add all neighbors to be processed
        this.queueNeighbors(key, parentList);
    };

    this.destroyVoxList = function (list) {
        for (var key in list) {
            var vox = this.fromKey(key);

            this.blocks[vox.x][vox.y][vox.z].setActive(false);
        }
    };

    Chunk.prototype.ProcessCuts = function () {

        this.processed = [];

        for (var key in this.needProcess) {
            this.processVox(key);
        }

        // Now do death logic
        var largestListSize = 0;
        for (var list in this.processed) {
            var listSize = Object.keys(list).length;
            largestListSize = Math.max(largestListSize, listSize);
            var bodyPercent = listSize / this.maxBlockCount;

            if (bodyPercent < .5) {
                this.destroyVoxList(list);

                var removeIndex = this.processed.indexOf(list);
                this.processed.splice(removeIndex, 1);
            }
        }

        // Destroy all but the largest list
        for (var _list in this.processed) {
            var _listSize = Object.keys(_list).length;

            if (_listSize === largestListSize) {
                largestListSize = 0;
            } else {
                var _removeIndex = this.processed.indexOf(_list);
                this.processed.splice(_removeIndex, 1);
            }
        }

        if (this.processed.length === 0) {
            this.Destroy();
        } else {
            this.Rebuild();
        }
    };

    Chunk.prototype.Rebuild = function (originOffset) {

        var activeBlockCount = this.NoOfActiveBlocks();
        this.maxBlockCount = Math.max(this.maxBlockCount, activeBlockCount);

        // Create mesh for each block and merge them to one geometry
        // Set each color from block + alpha
        if (activeBlockCount <= 0) {
            console.log("No active blocks.");
            return;
        }

        var b = 0;
        var vertices = [];
        var colors = [];
        var uvCoords = [];
        var shade = 0.87;

        // Reset merged blocks
        for (var _x2 = 0; _x2 < this.chunkSizeX; _x2++) {
            for (var _y2 = 0; _y2 < this.chunkSizeY; _y2++) {
                for (var _z2 = 0; _z2 < this.chunkSizeZ; _z2++) {
                    this.blocks[_x2][_y2][_z2].setBack(false);
                    this.blocks[_x2][_y2][_z2].setRight(false);
                    this.blocks[_x2][_y2][_z2].setTop(false);
                    this.blocks[_x2][_y2][_z2].setFront(false);
                    this.blocks[_x2][_y2][_z2].setLeft(false);
                }
            }
        }

        var drawBlock = false;
        for (var _x3 = 0; _x3 < this.chunkSizeX; _x3++) {
            for (var _y3 = 0; _y3 < this.chunkSizeY; _y3++) {
                for (var _z3 = 0; _z3 < this.chunkSizeZ; _z3++) {
                    if (this.blocks[_x3][_y3][_z3].getActive() === true) {
                        var sides = 0;

                        drawBlock = false;

                        if (_y3 > 0 && _y3 < this.chunkSizeY - 1 && _x3 > 0 && _x3 < this.chunkSizeX - 1 && _z3 > 0 && _z3 < this.chunkSizeZ - 1) {
                            if (this.blocks[_x3 - 1][_y3][_z3].getActive() && this.blocks[_x3 + 1][_y3][_z3].getActive() && this.blocks[_x3][_y3][_z3 + 1].getActive() && this.blocks[_x3][_y3][_z3 - 1].getActive() && this.blocks[_x3][_y3 + 1][_z3].getActive() && this.blocks[_x3][_y3 - 1][_z3].getActive()) {
                                continue;
                            }
                        }

                        // Left side (+X)
                        if (_x3 > 0) {
                            if (!this.blocks[_x3 - 1][_y3][_z3].getActive()) {
                                drawBlock = true;
                            }
                        } else {
                            drawBlock = true;
                        }

                        if (drawBlock) {
                            var countX = 0;
                            var countY = 0;
                            if (!this.blocks[_x3][_y3][_z3].getBack()) {
                                for (var cx = 0; cx < this.chunkSizeY; cx++) {
                                    if (_y3 + cx < this.chunkSizeY) {
                                        if (this.blocks[_x3][_y3 + cx][_z3].getActive() && !this.blocks[_x3][_y3 + cx][_z3].getBack() && this.blocks[_x3][_y3 + cx][_z3].getR() === this.blocks[_x3][_y3][_z3].getR() && this.blocks[_x3][_y3 + cx][_z3].getG() === this.blocks[_x3][_y3][_z3].getG() && this.blocks[_x3][_y3 + cx][_z3].getB() === this.blocks[_x3][_y3][_z3].getB()) {
                                            countX++;
                                            var tmpCountY = 0;
                                            for (var cy = 0; cy < this.chunkSizeZ; cy++) {
                                                if (_z3 + cy < this.chunkSizeZ) {
                                                    if (this.blocks[_x3][_y3 + cx][_z3 + cy].getActive() && !this.blocks[_x3][_y3 + cx][_z3 + cy].getBack() && this.blocks[_x3][_y3 + cx][_z3 + cy].getR() === this.blocks[_x3][_y3][_z3].getR() && this.blocks[_x3][_y3 + cx][_z3 + cy].getG() === this.blocks[_x3][_y3][_z3].getG() && this.blocks[_x3][_y3 + cx][_z3 + cy].getB() === this.blocks[_x3][_y3][_z3].getB()) {
                                                        tmpCountY++;
                                                    } else {
                                                        break;
                                                    }
                                                }
                                            }
                                            if (tmpCountY < countY || countY === 0) {
                                                countY = tmpCountY;
                                            }
                                            if (tmpCountY === 0 && countY > countX) {
                                                break;
                                            }
                                        } else {
                                            break;
                                        }
                                    }
                                }
                                countY--;
                                countX--;
                                for (var x1 = 0; x1 < countX; x1++) {
                                    for (var y1 = 0; y1 < countY; y1++) {
                                        if (this.blocks[_x3][_y3 + x1][_z3 + y1].getBack()) {
                                            //countY = y1-1
                                        } else {
                                            this.blocks[_x3][_y3 + x1][_z3 + y1].setBack(true);
                                        }
                                    }
                                }
                                this.blocks[_x3][_y3][_z3].setBack(true);
                                sides++;

                                vertices.push([_x3 * this.blockSize - this.blockSize, _y3 * this.blockSize - this.blockSize, _z3 * this.blockSize - this.blockSize]);
                                uvCoords.push([vertices[vertices.length - 1][2], vertices[vertices.length - 1][1] + this.uvOffsetY]);

                                vertices.push([_x3 * this.blockSize - this.blockSize, _y3 * this.blockSize - this.blockSize, _z3 * this.blockSize + this.blockSize * countY]);
                                uvCoords.push([vertices[vertices.length - 1][2], vertices[vertices.length - 1][1] + this.uvOffsetY]);

                                vertices.push([_x3 * this.blockSize - this.blockSize, _y3 * this.blockSize + this.blockSize * countX, _z3 * this.blockSize + this.blockSize * countY]);
                                uvCoords.push([vertices[vertices.length - 1][2], vertices[vertices.length - 1][1] + this.uvOffsetY]);

                                vertices.push([_x3 * this.blockSize - this.blockSize, _y3 * this.blockSize - this.blockSize, _z3 * this.blockSize - this.blockSize]);
                                uvCoords.push([vertices[vertices.length - 1][2], vertices[vertices.length - 1][1] + this.uvOffsetY]);

                                vertices.push([_x3 * this.blockSize - this.blockSize, _y3 * this.blockSize + this.blockSize * countX, _z3 * this.blockSize + this.blockSize * countY]);
                                uvCoords.push([vertices[vertices.length - 1][2], vertices[vertices.length - 1][1] + this.uvOffsetY]);

                                vertices.push([_x3 * this.blockSize - this.blockSize, _y3 * this.blockSize + this.blockSize * countX, _z3 * this.blockSize - this.blockSize]);
                                uvCoords.push([vertices[vertices.length - 1][2], vertices[vertices.length - 1][1] + this.uvOffsetY]);

                                for (var i = 0; i < 6; i++) {
                                    colors.push([this.blocks[_x3][_y3][_z3].getR(), this.blocks[_x3][_y3][_z3].getG(), this.blocks[_x3][_y3][_z3].getB(), this.blocks[_x3][_y3][_z3].getA()]);
                                }
                            }
                        }

                        // right side (-X)
                        drawBlock = false;
                        if (_x3 < this.chunkSizeX - 1) {
                            if (!this.blocks[_x3 + 1][_y3][_z3].getActive()) {
                                drawBlock = true;
                            }
                        } else {
                            drawBlock = true;
                        }

                        if (drawBlock) {
                            var _countX = 0;
                            var _countY = 0;
                            if (!this.blocks[_x3][_y3][_z3].getFront()) {
                                for (var _cx = 0; _cx < this.chunkSizeY; _cx++) {
                                    if (_y3 + _cx < this.chunkSizeY) {
                                        if (this.blocks[_x3][_y3 + _cx][_z3].getActive() && !this.blocks[_x3][_y3 + _cx][_z3].getFront() && this.blocks[_x3][_y3 + _cx][_z3].getR() === this.blocks[_x3][_y3][_z3].getR() && this.blocks[_x3][_y3 + _cx][_z3].getG() === this.blocks[_x3][_y3][_z3].getG() && this.blocks[_x3][_y3 + _cx][_z3].getB() === this.blocks[_x3][_y3][_z3].getB()) {
                                            // Check how far we can draw other way
                                            _countX++;
                                            var _tmpCountY = 0;
                                            for (var _cy = 0; _cy < this.chunkSizeZ; _cy++) {
                                                if (_z3 + _cy < this.chunkSizeZ) {
                                                    if (this.blocks[_x3][_y3 + _cx][_z3 + _cy].getActive() && !this.blocks[_x3][_y3 + _cx][_z3 + _cy].getFront() && this.blocks[_x3][_y3 + _cx][_z3 + _cy].getR() === this.blocks[_x3][_y3][_z3].getR() && this.blocks[_x3][_y3 + _cx][_z3 + _cy].getG() === this.blocks[_x3][_y3][_z3].getG() && this.blocks[_x3][_y3 + _cx][_z3 + _cy].getB() === this.blocks[_x3][_y3][_z3].getB()) {
                                                        _tmpCountY++;
                                                    } else {
                                                        break;
                                                    }
                                                }
                                            }
                                            if (_tmpCountY < _countY || _countY === 0) {
                                                _countY = _tmpCountY;
                                            }
                                            if (_tmpCountY === 0 && _countY > _countX) {
                                                break;
                                            }
                                        } else {
                                            break;
                                        }
                                    }
                                }
                                _countX--;
                                _countY--;
                                for (var _x4 = 0; _x4 < _countX; _x4++) {
                                    for (var _y4 = 0; _y4 < _countY; _y4++) {
                                        if (this.blocks[_x3][_y3 + _x4][_z3 + _y4].getFront()) {
                                            //   countY = y1-1
                                        } else {
                                            this.blocks[_x3][_y3 + _x4][_z3 + _y4].setFront(true);
                                        }
                                    }
                                }

                                this.blocks[_x3][_y3][_z3].setFront(true);
                                sides++;

                                vertices.push([_x3 * this.blockSize, _y3 * this.blockSize - this.blockSize, _z3 * this.blockSize - this.blockSize]);
                                uvCoords.push([vertices[vertices.length - 1][2], vertices[vertices.length - 1][1] + this.uvOffsetY]);

                                vertices.push([_x3 * this.blockSize, _y3 * this.blockSize + this.blockSize * _countX, _z3 * this.blockSize + this.blockSize * _countY]);
                                uvCoords.push([vertices[vertices.length - 1][2], vertices[vertices.length - 1][1] + this.uvOffsetY]);

                                vertices.push([_x3 * this.blockSize, _y3 * this.blockSize - this.blockSize, _z3 * this.blockSize + this.blockSize * _countY]);
                                uvCoords.push([vertices[vertices.length - 1][2], vertices[vertices.length - 1][1] + this.uvOffsetY]);

                                vertices.push([_x3 * this.blockSize, _y3 * this.blockSize + this.blockSize * _countX, _z3 * this.blockSize + this.blockSize * _countY]);
                                uvCoords.push([vertices[vertices.length - 1][2], vertices[vertices.length - 1][1] + this.uvOffsetY]);

                                vertices.push([_x3 * this.blockSize, _y3 * this.blockSize - this.blockSize, _z3 * this.blockSize - this.blockSize]);
                                uvCoords.push([vertices[vertices.length - 1][2], vertices[vertices.length - 1][1] + this.uvOffsetY]);

                                vertices.push([_x3 * this.blockSize, _y3 * this.blockSize + this.blockSize * _countX, _z3 * this.blockSize - this.blockSize]);
                                uvCoords.push([vertices[vertices.length - 1][2], vertices[vertices.length - 1][1] + this.uvOffsetY]);

                                for (var _i = 0; _i < 6; _i++) {
                                    colors.push([this.blocks[_x3][_y3][_z3].getR(), this.blocks[_x3][_y3][_z3].getG(), this.blocks[_x3][_y3][_z3].getB(), this.blocks[_x3][_y3][_z3].getA()]);
                                }
                            }
                        }

                        // Back side (-Z)   
                        drawBlock = false;
                        if (_z3 > 0) {
                            //this.chunkSize - 1) {
                            if (!this.blocks[_x3][_y3][_z3 - 1].getActive()) {
                                drawBlock = true;
                            }
                        } else {
                            drawBlock = true;
                        }
                        if (drawBlock) {
                            sides++;

                            vertices.push([_x3 * this.blockSize, _y3 * this.blockSize, _z3 * this.blockSize - this.blockSize]);
                            uvCoords.push([vertices[vertices.length - 1][1] + this.posY + this.uvOffsetY, vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX]);

                            vertices.push([_x3 * this.blockSize, _y3 * this.blockSize - this.blockSize, _z3 * this.blockSize - this.blockSize]);
                            uvCoords.push([vertices[vertices.length - 1][1] + this.posY + this.uvOffsetY, vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX]);

                            vertices.push([_x3 * this.blockSize - this.blockSize, _y3 * this.blockSize - this.blockSize, _z3 * this.blockSize - this.blockSize]);
                            uvCoords.push([vertices[vertices.length - 1][1] + this.posY + this.uvOffsetY, vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX]);

                            vertices.push([_x3 * this.blockSize, _y3 * this.blockSize, _z3 * this.blockSize - this.blockSize]);
                            uvCoords.push([vertices[vertices.length - 1][1] + this.posY + this.uvOffsetY, vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX]);

                            vertices.push([_x3 * this.blockSize - this.blockSize, _y3 * this.blockSize - this.blockSize, _z3 * this.blockSize - this.blockSize]);
                            uvCoords.push([vertices[vertices.length - 1][1] + this.posY + this.uvOffsetY, vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX]);

                            vertices.push([_x3 * this.blockSize - this.blockSize, _y3 * this.blockSize, _z3 * this.blockSize - this.blockSize]);
                            uvCoords.push([vertices[vertices.length - 1][1] + this.posY + this.uvOffsetY, vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX]);

                            for (var _i2 = 0; _i2 < 6; _i2++) {
                                colors.push([this.blocks[_x3][_y3][_z3].getR(), this.blocks[_x3][_y3][_z3].getG(), this.blocks[_x3][_y3][_z3].getB(), this.blocks[_x3][_y3][_z3].getA()]);
                            }
                        }

                        // Front side (+Z)
                        drawBlock = false;
                        if (_z3 < this.chunkSizeZ - 1) {
                            if (!this.blocks[_x3][_y3][_z3 + 1].getActive()) {
                                drawBlock = true;
                            }
                        } else {
                            drawBlock = true;
                        }

                        if (drawBlock) {
                            var _countX2 = 0;
                            var _countY2 = 0;
                            if (!this.blocks[_x3][_y3][_z3].getTop()) {
                                for (var _cx2 = 0; _cx2 < this.chunkSizeX; _cx2++) {
                                    if (_x3 + _cx2 < this.chunkSizeX) {
                                        if (this.blocks[_x3 + _cx2][_y3][_z3].getActive() && !this.blocks[_x3 + _cx2][_y3][_z3].getTop() && this.blocks[_x3 + _cx2][_y3][_z3].getR() === this.blocks[_x3][_y3][_z3].getR() && this.blocks[_x3 + _cx2][_y3][_z3].getG() === this.blocks[_x3][_y3][_z3].getG() && this.blocks[_x3 + _cx2][_y3][_z3].getB() === this.blocks[_x3][_y3][_z3].getB()) {
                                            //this.blocks[x+cx][y][z].getTop()
                                            // Check how far we can draw other way
                                            _countX2++;
                                            var _tmpCountY2 = 0;
                                            for (var _cy2 = 0; _cy2 < this.chunkSizeY; _cy2++) {
                                                if (_y3 + _cy2 < this.chunkSizeY) {
                                                    if (this.blocks[_x3 + _cx2][_y3 + _cy2][_z3].getActive() && !this.blocks[_x3 + _cx2][_y3 + _cy2][_z3].getTop() && this.blocks[_x3 + _cx2][_y3 + _cy2][_z3].getR() === this.blocks[_x3][_y3][_z3].getR() && this.blocks[_x3 + _cx2][_y3 + _cy2][_z3].getG() === this.blocks[_x3][_y3][_z3].getG() && this.blocks[_x3 + _cx2][_y3 + _cy2][_z3].getB() === this.blocks[_x3][_y3][_z3].getB()) {
                                                        _tmpCountY2++;
                                                    } else {
                                                        break;
                                                    }
                                                }
                                            }
                                            if (_tmpCountY2 < _countY2 || _countY2 === 0) {
                                                _countY2 = _tmpCountY2;
                                            }
                                            if (_tmpCountY2 === 0 && _countY2 > _countX2) {
                                                break;
                                            }
                                        } else {
                                            break;
                                        }
                                    }
                                }
                                _countX2--;
                                _countY2--;
                                for (var _x5 = 0; _x5 < _countX2; _x5++) {
                                    for (var _y5 = 0; _y5 < _countY2; _y5++) {
                                        if (this.blocks[_x3 + _x5][_y3 + _y5][_z3].getTop()) {
                                            //countY = y1-1
                                        } else {
                                            this.blocks[_x3 + _x5][_y3 + _y5][_z3].getTop();
                                        }
                                    }
                                }
                                this.blocks[_x3][_y3][_z3].getTop();
                                sides++;

                                vertices.push([_x3 * this.blockSize + this.blockSize * _countX2, _y3 * this.blockSize + this.blockSize * _countY2, _z3 * this.blockSize]);
                                uvCoords.push([vertices[vertices.length - 1][1] + this.posY + this.uvOffsetY, vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX]);

                                vertices.push([_x3 * this.blockSize - this.blockSize, _y3 * this.blockSize + this.blockSize * _countY2, _z3 * this.blockSize]);
                                uvCoords.push([vertices[vertices.length - 1][1] + this.posY + this.uvOffsetY, vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX]);

                                vertices.push([_x3 * this.blockSize + this.blockSize * _countX2, _y3 * this.blockSize - this.blockSize, _z3 * this.blockSize]);
                                uvCoords.push([vertices[vertices.length - 1][1] + this.posY + this.uvOffsetY, vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX]);

                                vertices.push([_x3 * this.blockSize - this.blockSize, _y3 * this.blockSize + this.blockSize * _countY2, _z3 * this.blockSize]);
                                uvCoords.push([vertices[vertices.length - 1][1] + this.posY + this.uvOffsetY, vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX]);

                                vertices.push([_x3 * this.blockSize - this.blockSize, _y3 * this.blockSize - this.blockSize, _z3 * this.blockSize]);
                                uvCoords.push([vertices[vertices.length - 1][1] + this.posY + this.uvOffsetY, vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX]);

                                vertices.push([_x3 * this.blockSize + this.blockSize * _countX2, _y3 * this.blockSize - this.blockSize, _z3 * this.blockSize]);
                                uvCoords.push([vertices[vertices.length - 1][1] + this.posY + this.uvOffsetY, vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX]);

                                for (var _i3 = 0; _i3 < 6; _i3++) {
                                    colors.push([this.blocks[_x3][_y3][_z3].getR() * shade, this.blocks[_x3][_y3][_z3].getG() * shade, this.blocks[_x3][_y3][_z3].getB() * shade, this.blocks[_x3][_y3][_z3].getA()]);
                                }
                            }
                        }

                        // top (+Y) 
                        drawBlock = false;
                        if (_y3 < this.chunkSizeY - 1) {
                            if (!this.blocks[_x3][_y3 + 1][_z3].getActive()) {
                                drawBlock = true;
                            }
                        } else {
                            drawBlock = true;
                        }

                        if (drawBlock) {
                            var _countX3 = 0;
                            var _countY3 = 0;
                            if (!this.blocks[_x3][_y3][_z3].getRight()) {
                                for (var _cx3 = 0; _cx3 < this.chunkSizeX; _cx3++) {
                                    if (_x3 + _cx3 < this.chunkSizeX) {
                                        if (this.blocks[_x3 + _cx3][_y3][_z3].getActive() && !this.blocks[_x3 + _cx3][_y3][_z3].getRight() && this.blocks[_x3 + _cx3][_y3][_z3].getR() === this.blocks[_x3][_y3][_z3].getR() && this.blocks[_x3 + _cx3][_y3][_z3].getG() === this.blocks[_x3][_y3][_z3].getG() && this.blocks[_x3 + _cx3][_y3][_z3].getB() === this.blocks[_x3][_y3][_z3].getB()) {
                                            _countX3++;
                                            var _tmpCountY3 = 0;
                                            for (var _cy3 = 0; _cy3 < this.chunkSizeZ; _cy3++) {
                                                if (_z3 + _cy3 < this.chunkSizeZ) {
                                                    if (this.blocks[_x3 + _cx3][_y3][_z3 + _cy3].getActive() && !this.blocks[_x3 + _cx3][_y3][_z3 + _cy3].getRight() && this.blocks[_x3 + _cx3][_y3][_z3 + _cy3].getR() === this.blocks[_x3][_y3][_z3].getR() && this.blocks[_x3 + _cx3][_y3][_z3 + _cy3].getG() === this.blocks[_x3][_y3][_z3].getG() && this.blocks[_x3 + _cx3][_y3][_z3 + _cy3].getB() === this.blocks[_x3][_y3][_z3].getB()) {
                                                        _tmpCountY3++;
                                                    } else {
                                                        break;
                                                    }
                                                }
                                            }
                                            if (_tmpCountY3 < _countY3 || _countY3 === 0) {
                                                _countY3 = _tmpCountY3;
                                            }
                                            if (_tmpCountY3 === 0 && _countY3 > _countX3) {
                                                break;
                                            }
                                        } else {
                                            break;
                                        }
                                    }
                                }
                                _countX3--;
                                _countY3--;
                                for (var _x6 = 0; _x6 < _countX3; _x6++) {
                                    for (var _y6 = 0; _y6 < _countY3; _y6++) {
                                        if (this.blocks[_x3 + _x6][_y3][_z3 + _y6].getRight()) {
                                            //  countY = y1-1
                                        } else {
                                            this.blocks[_x3 + _x6][_y3][_z3 + _y6].setRight(true);
                                        }
                                    }
                                }

                                this.blocks[_x3][_y3][_z3].setRight(true);
                                sides++;

                                vertices.push([_x3 * this.blockSize + this.blockSize * _countX3, _y3 * this.blockSize, _z3 * this.blockSize + this.blockSize * _countY3]);
                                uvCoords.push([vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX, vertices[vertices.length - 1][2]]);

                                vertices.push([_x3 * this.blockSize - this.blockSize, _y3 * this.blockSize, _z3 * this.blockSize - this.blockSize]);
                                uvCoords.push([vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX, vertices[vertices.length - 1][2]]);

                                vertices.push([_x3 * this.blockSize - this.blockSize, _y3 * this.blockSize, _z3 * this.blockSize + this.blockSize * _countY3]);
                                uvCoords.push([vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX, vertices[vertices.length - 1][2]]);

                                vertices.push([_x3 * this.blockSize + this.blockSize * _countX3, _y3 * this.blockSize, _z3 * this.blockSize + this.blockSize * _countY3]);
                                uvCoords.push([vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX, vertices[vertices.length - 1][2]]);

                                vertices.push([_x3 * this.blockSize + this.blockSize * _countX3, _y3 * this.blockSize, _z3 * this.blockSize - this.blockSize]);
                                uvCoords.push([vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX, vertices[vertices.length - 1][2]]);

                                vertices.push([_x3 * this.blockSize - this.blockSize, _y3 * this.blockSize, _z3 * this.blockSize - this.blockSize]);
                                uvCoords.push([vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX, vertices[vertices.length - 1][2]]);

                                for (var _i4 = 0; _i4 < 6; _i4++) {
                                    colors.push([this.blocks[_x3][_y3][_z3].getR() * shade, this.blocks[_x3][_y3][_z3].getG() * shade, this.blocks[_x3][_y3][_z3].getB() * shade, this.blocks[_x3][_y3][_z3].getA()]);
                                }
                            }
                        }

                        // Bottom (-Y)
                        drawBlock = false;
                        if (_y3 > 0) {
                            if (!this.blocks[_x3][_y3 - 1][_z3].getActive()) {
                                drawBlock = true;
                            }
                        } else {
                            drawBlock = true;
                        }

                        if (drawBlock) {
                            var _countX4 = 0;
                            var _countY4 = 0;
                            if (!this.blocks[_x3][_y3][_z3].getLeft()) {
                                for (var _cx4 = 0; _cx4 < this.chunkSizeX; _cx4++) {
                                    if (_x3 + _cx4 < this.chunkSizeX) {
                                        if (this.blocks[_x3 + _cx4][_y3][_z3].getActive() && !this.blocks[_x3 + _cx4][_y3][_z3].getLeft() && this.blocks[_x3 + _cx4][_y3][_z3].getR() === this.blocks[_x3][_y3][_z3].getR() && this.blocks[_x3 + _cx4][_y3][_z3].getG() === this.blocks[_x3][_y3][_z3].getG() && this.blocks[_x3 + _cx4][_y3][_z3].getB() === this.blocks[_x3][_y3][_z3].getB()) {
                                            _countX4++;
                                            var _tmpCountY4 = 0;
                                            for (var _cy4 = 0; _cy4 < this.chunkSizeZ; _cy4++) {
                                                if (_z3 + _cy4 < this.chunkSizeZ) {
                                                    if (this.blocks[_x3 + _cx4][_y3][_z3 + _cy4].getActive() && !this.blocks[_x3 + _cx4][_y3][_z3 + _cy4].getLeft() && this.blocks[_x3 + _cx4][_y3][_z3 + _cy4].getR() === this.blocks[_x3][_y3][_z3].getR() && this.blocks[_x3 + _cx4][_y3][_z3 + _cy4].getG() === this.blocks[_x3][_y3][_z3].getG() && this.blocks[_x3 + _cx4][_y3][_z3 + _cy4].getB() === this.blocks[_x3][_y3][_z3].getB()) {
                                                        _tmpCountY4++;
                                                    } else {
                                                        break;
                                                    }
                                                }
                                            }
                                            if (_tmpCountY4 < _countY4 || _countY4 === 0) {
                                                _countY4 = _tmpCountY4;
                                            }
                                            if (_tmpCountY4 === 0 && _countY4 > _countX4) {
                                                break;
                                            }
                                        } else {
                                            break;
                                        }
                                    }
                                }
                                _countX4--;
                                _countY4--;
                                for (var _x7 = 0; _x7 < _countX4; _x7++) {
                                    for (var _y7 = 0; _y7 < _countY4; _y7++) {
                                        if (this.blocks[_x3 + _x7][_y3][_z3 + _y7].getLeft()) {
                                            //  countY = y1-1
                                        } else {
                                            this.blocks[_x3 + _x7][_y3][_z3 + _y7].setLeft(true);
                                        }
                                    }
                                }

                                this.blocks[_x3][_y3][_z3].setLeft(true);
                                sides++;

                                vertices.push([_x3 * this.blockSize + this.blockSize * _countX4, _y3 * this.blockSize - this.blockSize, _z3 * this.blockSize + this.blockSize * _countY4]);
                                uvCoords.push([vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX, vertices[vertices.length - 1][2]]);

                                vertices.push([_x3 * this.blockSize - this.blockSize, _y3 * this.blockSize - this.blockSize, _z3 * this.blockSize + this.blockSize * _countY4]);
                                uvCoords.push([vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX, vertices[vertices.length - 1][2]]);

                                vertices.push([_x3 * this.blockSize - this.blockSize, _y3 * this.blockSize - this.blockSize, _z3 * this.blockSize - this.blockSize]);
                                uvCoords.push([vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX, vertices[vertices.length - 1][2]]);

                                vertices.push([_x3 * this.blockSize + this.blockSize * _countX4, _y3 * this.blockSize - this.blockSize, _z3 * this.blockSize + this.blockSize * _countY4]);
                                uvCoords.push([vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX, vertices[vertices.length - 1][2]]);

                                vertices.push([_x3 * this.blockSize - this.blockSize, _y3 * this.blockSize - this.blockSize, _z3 * this.blockSize - this.blockSize]);
                                uvCoords.push([vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX, vertices[vertices.length - 1][2]]);

                                vertices.push([_x3 * this.blockSize + this.blockSize * _countX4, _y3 * this.blockSize - this.blockSize, _z3 * this.blockSize - this.blockSize]);
                                uvCoords.push([vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX, vertices[vertices.length - 1][2]]);

                                for (var _i5 = 0; _i5 < 6; _i5++) {
                                    colors.push([this.blocks[_x3][_y3][_z3].getR(), this.blocks[_x3][_y3][_z3].getG(), this.blocks[_x3][_y3][_z3].getB(), this.blocks[_x3][_y3][_z3].getA()]);
                                }
                            }
                        }

                        b += 2 * sides;
                    }
                }
            }
        }
        // Create Object
        //
        var geometry = new THREE.BufferGeometry();
        var v = new THREE.BufferAttribute(new Float32Array(vertices.length * 3), 3);

        if (originOffset !== undefined) {
            for (var _i6 = 0; _i6 < vertices.length; _i6++) {
                v.setXYZ(_i6, vertices[_i6][0] + originOffset.x, vertices[_i6][1] + originOffset.y, vertices[_i6][2] + originOffset.z);
            }
        } else {
            for (var _i7 = 0; _i7 < vertices.length; _i7++) {
                v.setXYZ(_i7, vertices[_i7][0], vertices[_i7][1], vertices[_i7][2]);
            }
        }

        geometry.addAttribute("position", v);

        // Each vertex has one uv coordinate for texture mapping
        var uvs = new THREE.BufferAttribute(new Float32Array(uvCoords.length * 2), 2);
        for (var _i8 = 0; _i8 < uvCoords.length; _i8++) {
            uvs.setXY(_i8, this.uvScale * uvCoords[_i8][0], this.uvScale * uvCoords[_i8][1]);
        }
        geometry.addAttribute("uv", uvs);

        var c = new THREE.BufferAttribute(new Float32Array(colors.length * 4), 4);
        for (var _i9 = 0; _i9 < colors.length; _i9++) {
            c.setXYZW(_i9, colors[_i9][0] / 255, colors[_i9][1] / 255, colors[_i9][2] / 255, colors[_i9][3] / 255);
        }

        geometry.addAttribute("color", c);

        geometry.computeBoundingBox();

        geometry.applyMatrix(new THREE.Matrix4().makeTranslation(-geometry.boundingBox.max.x / 2, -geometry.boundingBox.max.z / 2, 0));
        geometry.computeVertexNormals();
        geometry.computeFaceNormals();

        var textureNormal = GameStore.GameInstance.loader.load("textures/voxel_normal.png");
        var textureSpecular = GameStore.GameInstance.loader.load("textures/voxel_specular.png");
        var textureEnv = GameStore.GameInstance.loader.load("textures/voxel_env.png");

        textureNormal.wrapS = textureNormal.wrapT = THREE.RepeatWrapping;
        textureSpecular.wrapS = textureSpecular.wrapT = THREE.RepeatWrapping;

        textureEnv.mapping = THREE.EquirectangularReflectionMapping;

        var material3 = new THREE.MeshPhongMaterial({
            vertexColors: THREE.VertexColors,
            normalMap: textureNormal,
            normalScale: this.normalScaler,
            specularMap: textureSpecular,
            envMap: textureEnv,
            shininess: this.shininess,
            wireframe: this.wireframe });

        var mesh = new THREE.Mesh(geometry, material3);
        mesh.rotation.set(Math.PI / 2, Math.PI, 0);

        mesh.castShadow = true;
        mesh.receiveShadow = true;

        mesh.position.set(0, 0, 0);
        mesh.that = this;
        this.mesh = mesh;
        this.GetBoundingBox();
        this.isBuilt = true;
    };

    Chunk.prototype.Destroy = function () {
        var x = (this.mesh.pos.getX() - this.posX) / this.blockSize;
        var y = (this.mesh.pos.getY() - this.posY) / this.blockSize;

        if (x >= 0 && x < this.blocks.length && y >= 0 && y < this.blocks.length) {
            if (this.blocks[x][y][z].getActive()) {
                this.blocks[x][y][z].setActive(false);
                this.Rebuild();
                console.log("Destroy block: " + x + ", " + y + ", " + z);
                return true;
            }
        }
        return false;
    };

    Chunk.prototype.ActivateBlock = function (x, y, z, color) {
        var emptyCell = color.r + color.g + color.b + color.a;
        if (emptyCell === 0) {
            this.blocks[x][y][z].setActive(false);
        } else {
            this.blocks[x][y][z].setActive(true);
        }
        this.blocks[x][y][z].setR(color.r);
        this.blocks[x][y][z].setG(color.g);
        this.blocks[x][y][z].setB(color.b);
        this.blocks[x][y][z].setA(color.a);
    };

    Chunk.prototype.Create = function (sizex, sizey, sizez) {
        this.chunkSizeX = sizex;
        this.chunkSizeY = sizey;
        this.chunkSizeZ = sizez;
        this.blocks = new Array();

        for (var _x8 = 0; _x8 < sizex; _x8++) {
            this.blocks[_x8] = new Array();
            for (var _y8 = 0; _y8 < sizey; _y8++) {
                this.blocks[_x8][_y8] = new Array();
                for (var _z4 = 0; _z4 < sizez; _z4++) {
                    this.blocks[_x8][_y8][_z4] = new Block();
                    this.blocks[_x8][_y8][_z4].Create(false, 0, 0, 0, 0);
                }
            }
        }
    };

    Chunk.prototype.ActivateAll = function () {};

    Chunk.prototype.NoOfActiveBlocks = function () {
        var b = 0;
        if (this.blocks !== undefined) {
            var sizeX = this.blocks.length;
            for (var _x9 = 0; _x9 < sizeX; _x9++) {
                var sizeY = this.blocks[_x9].length;
                for (var _y9 = 0; _y9 < sizeY; _y9++) {
                    var sizeZ = this.blocks[_x9][_y9].length;
                    for (var _z5 = 0; _z5 < sizeZ; _z5++) {
                        if (this.blocks[_x9][_y9][_z5].getActive()) {
                            b++;
                        }
                    }
                }
            }
        } else {
            console.log("UNDEFINED BLOCKS");
        }
        return b;
    };
}

module.exports = Chunk;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */

var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var randomFromSeed = __webpack_require__(95);

var ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';
var alphabet;
var previousSeed;

var shuffled;

function reset() {
    shuffled = false;
}

function setCharacters(_alphabet_) {
    if (!_alphabet_) {
        if (alphabet !== ORIGINAL) {
            alphabet = ORIGINAL;
            reset();
        }
        return;
    }

    if (_alphabet_ === alphabet) {
        return;
    }

    if (_alphabet_.length !== ORIGINAL.length) {
        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);
    }

    var unique = _alphabet_.split('').filter(function (item, ind, arr) {
        return ind !== arr.lastIndexOf(item);
    });

    if (unique.length) {
        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));
    }

    alphabet = _alphabet_;
    reset();
}

function characters(_alphabet_) {
    setCharacters(_alphabet_);
    return alphabet;
}

function setSeed(seed) {
    randomFromSeed.seed(seed);
    if (previousSeed !== seed) {
        reset();
        previousSeed = seed;
    }
}

function shuffle() {
    if (!alphabet) {
        setCharacters(ORIGINAL);
    }

    var sourceArray = alphabet.split('');
    var targetArray = [];
    var r = randomFromSeed.nextValue();
    var characterIndex;

    while (sourceArray.length > 0) {
        r = randomFromSeed.nextValue();
        characterIndex = Math.floor(r * sourceArray.length);
        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);
    }
    return targetArray.join('');
}

function getShuffled() {
    if (shuffled) {
        return shuffled;
    }
    shuffled = shuffle();
    return shuffled;
}

/**
 * lookup shuffled letter
 * @param index
 * @returns {string}
 */
function lookup(index) {
    var alphabetShuffled = getShuffled();
    return alphabetShuffled[index];
}

function get() {
    return alphabet || ORIGINAL;
}

module.exports = {
    get: get,
    characters: characters,
    seed: setSeed,
    lookup: lookup,
    shuffled: getShuffled
};

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var THREE = __webpack_require__(1);

var GameStore = __webpack_require__(0);
var Projectile = __webpack_require__(21);
var SoundSystem = __webpack_require__(7);
var Util = __webpack_require__(2);

var EWeaponType = Object.freeze({
    Simple: 1,
    Stamp: 2,
    Upgradeable: 3,
    SimpleAi: 4,
    SimpleBB: 5
});
module.exports.EWeaponType = EWeaponType;

var EActivationType = Object.freeze({
    Semi: 1,
    Auto: 2
});
module.exports.EActivationType = EActivationType;

var WeaponBase = function () {
    function WeaponBase() {
        _classCallCheck(this, WeaponBase);

        this.activationCooldown = 1;
        this.remainingActivationCooldown = 0;
        this.activtionType = EActivationType.Semi;
        this.isActive = false;
        this.spawnOffset = new THREE.Vector3(0, 0, 0);
        this.accuracyOffset = 0; // Offsets direction vector randomly by this amount
        this.activationList = [];
        this.activationEventIndex = 0;
        this.remainingActivationEventCooldown = 0;
        this.processActivationEvents = false;

        // Set of fire sounds to randomly choose from
        this.fireSoundShader = new SoundSystem.SoundShader();
    }

    /**
    * @description Should be called post construct in children classes for any overrides.
    */


    _createClass(WeaponBase, [{
        key: "Init",
        value: function Init() {
            this.activationList = [new ActivationBase({ spawnOffset: this.spawnOffset, accuracyOffset: this.accuracyOffset })];
        }
    }, {
        key: "destroy",
        value: function destroy() {
            this.fireSoundShader.Destroy();
        }
    }, {
        key: "Activate",
        value: function Activate(owner) {
            if (owner === undefined || this.isActive && this.activtionType === EActivationType.Semi) {
                return;
            }

            this.isActive = true;
            this.savedOwner = owner;

            if (this.remainingActivationCooldown <= 0) {
                this.remainingActivationCooldown = this.activationCooldown;

                if (owner.onWeaponFire !== undefined && typeof owner.onWeaponFire === "function") {
                    owner.onWeaponFire();
                }

                this.StartActivationEvents();
            }
        }
    }, {
        key: "Deactivate",
        value: function Deactivate() {
            this.isActive = false;
        }
    }, {
        key: "ActivateOnce",
        value: function ActivateOnce(owner) {
            this.Activate(owner);
            this.Deactivate();
        }
    }, {
        key: "StartActivationEvents",
        value: function StartActivationEvents() {
            this.processActivationEvents = true;
            this.activationEventIndex = 0;

            this.ActivateActivationEvent();
        }
    }, {
        key: "ActivateActivationEvent",
        value: function ActivateActivationEvent() {
            var _this = this;

            var maxIndex = 0;
            this.activationList.forEach(function (event) {
                maxIndex = Math.max(event.activationEventIndex, maxIndex);

                if (event.activationEventIndex === _this.activationEventIndex) {
                    _this.fireSoundShader.Play();
                    event.Activate(_this.savedOwner);

                    _this.remainingActivationEventCooldown = Math.max(_this.remainingActivationEventCooldown, event.activationCooldown);
                }
            });

            ++this.activationEventIndex;
            if (this.activationEventIndex > maxIndex) {
                this.processActivationEvents = false;
            }
        }
    }, {
        key: "UpdateActivationEvents",
        value: function UpdateActivationEvents(time, delta) {
            if (this.processActivationEvents) {
                this.remainingActivationEventCooldown -= delta;
                if (this.remainingActivationEventCooldown <= 0) {
                    this.ActivateActivationEvent();
                }
            }
        }
    }, {
        key: "Update",
        value: function Update(time, delta) {

            var modifiedDelta = delta * GameStore.GameInstance.upgradeManager.getIncreasedFiringSpeedModifier();

            this.remainingActivationCooldown -= modifiedDelta;
            this.remainingActivationCooldown = Math.max(0, this.remainingActivationCooldown);

            if (this.isActive && this.remainingActivationCooldown <= 0) {
                this.Activate(this.savedOwner);
            }

            this.UpdateActivationEvents(time, modifiedDelta);
        }
    }]);

    return WeaponBase;
}();

module.exports.WeaponBase = WeaponBase;

var ActivationBase = function () {
    function ActivationBase(params) {
        _classCallCheck(this, ActivationBase);

        params = params || {};
        this.spawnOffset = params.spawnOffset || new THREE.Vector3(0, 0, 0);
        this.projectileType = params.projectileType || Projectile.EProjectileType.Simple;
        this.activationEventIndex = params.activationEventIndex || 0;
        this.activationCooldown = params.activationCooldown || 1;
        this.accuracyOffset = params.accuracyOffset || 0;
        this.directionOffset = params.directionOffset || 0;
    }

    _createClass(ActivationBase, [{
        key: "Activate",
        value: function Activate(owner) {
            var firePos = new THREE.Vector3();
            firePos.setFromMatrixPosition(owner.firePos.matrixWorld);

            var startPos = firePos.clone().add(this.spawnOffset);
            var direction = owner.direction.clone();
            if (this.accuracyOffset) {
                direction.x += Util.RandomSign() * Math.random() * this.accuracyOffset;
                direction.z += Util.RandomSign() * Math.random() * this.accuracyOffset;
                direction.normalize();
            }

            if (this.directionOffset !== 0) {
                direction.applyAxisAngle(new THREE.Vector3(0, 1, 0), this.directionOffset);
            }

            GameStore.GameInstance.projectileManager.GetProjectile(this.projectileType, startPos.x, startPos.y, startPos.z, direction, owner);
        }
    }]);

    return ActivationBase;
}();

module.exports.ActivationBase = ActivationBase;

var WeaponSimple = function (_WeaponBase) {
    _inherits(WeaponSimple, _WeaponBase);

    function WeaponSimple() {
        _classCallCheck(this, WeaponSimple);

        var _this2 = _possibleConstructorReturn(this, (WeaponSimple.__proto__ || Object.getPrototypeOf(WeaponSimple)).call(this));

        _this2.type = EWeaponType.Simple;
        _this2.activtionType = EActivationType.Auto;
        _this2.activationCooldown = 0.2;
        _this2.accuracyOffset = 0.1;

        // Setup fire soundShader
        _this2.fireSoundShader.LoadSound("sound/lasershot1.mp3", 60, 0.3);
        _this2.fireSoundShader.LoadSound("sound/lasershot2.mp3", 60, 0.3);
        _this2.fireSoundShader.LoadSound("sound/lasershot3.mp3", 60, 0.3);
        _this2.fireSoundShader.LoadSound("sound/lasershot4.mp3", 60, 0.3);

        // Post construct for any overrides
        _this2.Init();
        return _this2;
    }

    return WeaponSimple;
}(WeaponBase);

module.exports.WeaponSimple = WeaponSimple;

var WeaponStamp = function (_WeaponBase2) {
    _inherits(WeaponStamp, _WeaponBase2);

    function WeaponStamp() {
        _classCallCheck(this, WeaponStamp);

        var _this3 = _possibleConstructorReturn(this, (WeaponStamp.__proto__ || Object.getPrototypeOf(WeaponStamp)).call(this));

        _this3.type = EWeaponType.Stamp;
        _this3.activtionType = EActivationType.Semi;
        _this3.activationCooldown = 0.1;
        _this3.accuracyOffset = 0;

        // Setup fire soundShader
        _this3.fireSoundShader.LoadSound("sound/lasershot1.mp3", 60, 0.3);
        _this3.fireSoundShader.LoadSound("sound/lasershot2.mp3", 60, 0.3);
        _this3.fireSoundShader.LoadSound("sound/lasershot3.mp3", 60, 0.3);
        _this3.fireSoundShader.LoadSound("sound/lasershot4.mp3", 60, 0.3);

        // Post construct for any overrides
        _this3.Init();

        _this3.activationList = [new ActivationBase({
            spawnOffset: _this3.spawnOffset,
            accuracyOffset: _this3.accuracyOffset,
            projectileType: Projectile.EProjectileType.Stamp
        })];
        return _this3;
    }

    _createClass(WeaponStamp, [{
        key: "Activate",
        value: function Activate(owner) {

            if (GameStore.GameInstance.projectileManager.getStampProjectileCount() > 0) {
                _get(WeaponStamp.prototype.__proto__ || Object.getPrototypeOf(WeaponStamp.prototype), "Activate", this).call(this, owner);
            }
        }
    }]);

    return WeaponStamp;
}(WeaponBase);

module.exports.WeaponStamp = WeaponStamp;

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var THREE = __webpack_require__(1);

var GameStore = __webpack_require__(0);

module.exports.HistoryManager = function () {
    function _class() {
        _classCallCheck(this, _class);

        this.historyList = [];
        this.gatherList = [];

        this.historyLengthSeconds = 30;

        // Move this to a proper place
        this.autoAimDistance = 15;
    }

    _createClass(_class, [{
        key: "update",
        value: function update(time, delta) {
            this.gatherList.forEach(function (gather) {
                gather.update(time, delta);
            });
        }
    }, {
        key: "registerGather",
        value: function registerGather(gather) {
            this.gatherList.push(gather);
        }
    }, {
        key: "unregisterGather",
        value: function unregisterGather(gather) {
            var foundIndex = this.gatherList.indexOf(gather);
            if (foundIndex !== -1) {
                this.gatherList.splice(foundIndex, 1);
            }
        }
    }, {
        key: "buildHistoryCollision",
        value: function buildHistoryCollision(secondsAgo) {
            if (secondsAgo > this.historyLengthSeconds) {
                return [];
            }

            var historyTime = GameStore.GameInstance.elapsedTime - secondsAgo;

            var historyDataList = this.gatherList.map(function (gather) {
                return gather.getHistoryData(historyTime);
            });

            // Cache the history data maybe

            return historyDataList;
        }
    }, {
        key: "raycastHistory",
        value: function raycastHistory(x, y, secondsAgo) {
            var historyDataList = this.buildHistoryCollision(secondsAgo);
            var hits = [];
            var zeroPlane = new THREE.Plane(new THREE.Vector3(0, 0, 1), 0);

            historyDataList.forEach(function (data) {
                if (data !== undefined) {
                    var pos = data.position;
                    var tranMat = new THREE.Matrix4().makeTranslation(-pos.x, -pos.y, -pos.z);

                    // ignore rotation for now
                    //let rotMat = new THREE.Matrix4().makeRotationZ(-data.rotationZ)
                    var mat = tranMat; // tranMat.multiply(rotMat)

                    var now = GameStore.GameInstance.elapsedTime;
                    var historyRay = GameStore.GameInstance.player.cameraObj.getHistoryRay(x, y, now - secondsAgo);
                    historyRay.applyMatrix4(mat);

                    var intersect = new THREE.Vector3();
                    if (historyRay.intersectBox(data.collisionBox, intersect) !== null) {
                        hits.push({
                            actor: data.actor,
                            distance: intersect.clone().sub(historyRay.origin).length(),
                            point: intersect
                        });
                    } else {
                        // Find how far this was to hitting for auto aim purposes
                        var hit = new THREE.Vector3();
                        if (historyRay.intersectPlane(zeroPlane, hit) !== null) {
                            hits.push({
                                actor: data.actor,
                                missDistance: hit.length()
                            });
                        }
                    }
                }
            });

            // Sort hits so closest first
            hits.sort(function (a, b) {
                if (a.distance !== undefined) {
                    if (b.distance !== undefined) {
                        return a.distance - b.distance;
                    } else {
                        return -1;
                    }
                } else if (b.distance !== undefined) {
                    return 1;
                } else {
                    return a.missDistance - b.missDistance;
                }
            });

            return hits;
        }
    }, {
        key: "raycastHistoryFirstHit",
        value: function raycastHistoryFirstHit(x, y, secondsAgo) {
            var _this = this;

            var hits = this.raycastHistory(x, y, secondsAgo);

            return hits.find(function (hit) {
                if (hit.distance !== undefined && hit.actor !== undefined || hit.missDistance <= _this.autoAimDistance) {

                    return true;
                }
            });
        }

        // This is just to test the pipeline, no gameplay use yet

    }, {
        key: "test",
        value: function test(message) {
            var _this2 = this;

            var hits = this.raycastHistory(message.x, message.y, message.delay);

            hits.some(function (hit) {
                if (hit.distance !== undefined && hit.actor !== undefined && hit.actor.DoDamage !== undefined) {

                    hit.actor.tag(message);

                    return true;
                } else if (hit.missDistance <= _this2.autoAimDistance) {

                    hit.actor.tag(message);

                    return true;
                }
            });
        }
    }]);

    return _class;
}();

module.exports.HistoryGather = function () {
    function _class2(actor, collisionBox) {
        _classCallCheck(this, _class2);

        this.actor = actor;
        this.collisionBox = collisionBox;
        this.manager = GameStore.GameInstance.historyManager;
        this.historyList = [];

        this.manager.registerGather(this);
    }

    _createClass(_class2, [{
        key: "destroy",
        value: function destroy() {
            this.manager.unregisterGather(this);
        }
    }, {
        key: "update",
        value: function update(time, delta) {
            if (this.actor.mesh !== undefined) {
                this.historyList.push({
                    time: time,
                    position: this.actor.mesh.position.clone(),
                    rotationZ: this.actor.mesh.rotation.z
                });
            }

            var expireTime = time - this.manager.historyLengthSeconds;

            while (this.historyList.length > 0 && this.historyList[0].time < expireTime) {
                this.historyList.shift();
            }
        }
    }, {
        key: "getHistoryData",
        value: function getHistoryData(time) {
            for (var i = this.historyList.length - 1; i > 0; --i) {
                var prev = this.historyList[i - 1];
                if (time > prev.time) {
                    var next = this.historyList[i];

                    var t = (time - prev.time) / (next.time - prev.time);
                    return {
                        actor: this.actor,
                        collisionBox: this.collisionBox,
                        position: prev.position.clone().add(next.position.clone().sub(prev.position).multiplyScalar(t)),
                        rotationZ: prev.rotationZ + (next.rotationZ - prev.rotationZ) * t
                    };
                }
            }

            return undefined;
        }
    }]);

    return _class2;
}();

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "d964aec105888c582cb99896a7bfb03e.ttf";

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.

module.exports = function () {
    /**
     * @constructor Creates a generic voxel button
     * @param {Number} buttonNumCellsWide Number of cells wide
     * @param {Number} buttonNumCellsTall Number of cells tall
     * @param {Object} DrawContent A react component that will be drawn inside the window
     * @param {String} [contentText] Text to pass into DrawContent object
     * @param {boolean} [useDarkTheme] Option to use a dark theme
     * @param {String} [title] Option to set tooltip title
     * @param {String} [iconPath] Option to set icon for button window. Define image path.
     * @param {String} [iconStyleID] Option to set css style on icon
     * @param {Object} [onClickCallback] Option to call a function when button is clicked
     * @param {String} [containerStyleID] Option to set css style on button
     * @param {Object} [notifIconArrayObj] Option to set an object with an array whose length will be used to set quantity on a notification icon
     * @param {String} [notifIconArrayName] Option to set name of the array in the object notifIconArrayObj
     * @param {boolean} [disabled] Used to grey out and disable opening of window
     * @param {boolean} [scalingDisabled] Option to disable scaling in css
     */
    function genericButton(buttonNumCellsWide, buttonNumCellsTall, DrawContent, contentText, useDarkTheme, title, iconPath, iconStyleID, onClickCallback, containerStyleID, notifIconArrayObj, notifIconArrayName, disabled, scalingDisabled) {
        _classCallCheck(this, genericButton);

        this.DrawContent = DrawContent;
        this.contentText = contentText !== undefined ? contentText : "";

        this.cellPXSize = 6; // Size in pixels of bg voxel image

        this.containerStyleID = containerStyleID !== undefined ? containerStyleID : "";

        // Use dark theme
        this.useDarkTheme = useDarkTheme !== undefined ? useDarkTheme : false;

        this.defaultNumCells = 8; // Default size in cells of button window
        this.buttonNumCellsWide = buttonNumCellsWide !== undefined ? buttonNumCellsWide : this.defaultNumCells;
        this.buttonNumCellsTall = buttonNumCellsTall !== undefined ? buttonNumCellsTall : this.defaultNumCells;
        this.buttonWidth = this.cellPXSize * this.buttonNumCellsWide + 1 + "px";
        this.buttonHeight = this.cellPXSize * this.buttonNumCellsTall + 1 + "px";
        this.buttonCenterWidth = (this.buttonNumCellsWide - 2) * this.cellPXSize + "px";
        this.buttonCenterHeight = (this.buttonNumCellsTall - 2) * this.cellPXSize + "px";
        this.buttonIconSrc = iconPath;
        this.cellPXSizeStr = this.cellPXSize + "px";
        this.buttonFarCornerInsetWidth = this.cellPXSize * (this.buttonNumCellsWide - 1) + 1 + "px";
        this.buttonFarCornerInsetHeight = this.cellPXSize * (this.buttonNumCellsTall - 1) + 1 + "px";
        this.buttonInnerGlowBaseBGWidth = (this.buttonNumCellsWide - 2) / this.buttonNumCellsWide * 100 + "%";
        this.buttonInnerGlowBaseBGHeight = (this.buttonNumCellsTall - 2) / this.buttonNumCellsTall * 100 + "%";
        this.buttonClipPath = "polygon(" + "0 " + this.cellPXSizeStr + ", " + this.cellPXSizeStr + " " + this.cellPXSizeStr + ", " + this.cellPXSizeStr + " 0, " + this.buttonFarCornerInsetWidth + " 0, " + this.buttonFarCornerInsetWidth + " " + this.cellPXSizeStr + ", " + "100% " + this.cellPXSizeStr + ", " + "100% " + this.buttonFarCornerInsetHeight + ", " + this.buttonFarCornerInsetWidth + " " + this.buttonFarCornerInsetHeight + ", " + this.buttonFarCornerInsetWidth + " 100%, " + this.cellPXSizeStr + " 100%, " + this.cellPXSizeStr + " " + this.buttonFarCornerInsetHeight + ", " + "0 " + this.buttonFarCornerInsetHeight + ")";

        // Option to set css style on icon
        this.iconStyleID = iconStyleID !== undefined ? iconStyleID : "";

        // Tooltip title
        this.title = title;

        // Callback functions
        this.onClickCallback = onClickCallback;

        // Set array to use length for notif icon count
        this.notifIconArrayObj = notifIconArrayObj !== undefined && notifIconArrayName !== undefined ? notifIconArrayObj : undefined;
        this.notifIconArrayName = notifIconArrayName !== undefined ? notifIconArrayName : undefined;
        this.currentAmount = 0; // Tracks notif current amount for css anims

        // Option to disable
        this.disabled = disabled !== undefined ? disabled : false;

        // Option to disable scaling in css
        this.scalingDisabled = scalingDisabled !== undefined ? scalingDisabled : false;
    }

    _createClass(genericButton, [{
        key: "onClick",
        value: function onClick(event) {
            if (event !== undefined) {
                event.stopPropagation();
            }

            if (this.onClickCallback) {
                this.onClickCallback(event);
            }
        }
    }]);

    return genericButton;
}();

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.

module.exports = function () {
    /**
     * @constructor Creates a collapsable window
     * @param {Number} x Left position on screen
     * @param {Number} y Left position on screen
     * @param {Number} expandedNumCellsWide Number of cells wide
     * @param {Number} expandedNumCellsTall Number of cells tall
     * @param {Object} DrawContent A react component that will be drawn inside the window when expanded
     * @param {Number} [xCollapsed] Left position on screen when collapsed
     * @param {Number} [yCollapsed] Left position on screen when collapsed
     * @param {Number} [collapsedNumCellsWide] Number of cells wide
     * @param {Number} [collapsedNumCellsTall] Number of cells tall
     * @param {boolean} [startExpanded] Option to start window expanded
     * @param {boolean} [canClose] Option to disable closing
     * @param {boolean} [useDarkTheme] Option to use a dark theme
     * @param {String} [title] Option to set tooltip title
     * @param {String} [iconPath] Option to set icon for collapsed window. Define image path.
     * @param {String} [iconStyleID] Option to set css style on icon
     * @param {Object} [onExpandCallback] Option to call a function when window is expanded
     * @param {Object} [onCollapseCallBack] Option to call a function when window is collapsed
     * @param {Object} [notifIconArrayObj] Option to set an object with an array whose length will be used to set quantity on a notification icon
     * @param {String} [notifIconArrayName] Option to set name of the array in the object notifIconArrayObj
     * @param {boolean} [canMaximize] Option to allow window to be maxmized to a larger size
     * @param {Number} [maximizedNumCellsWide] Number of cells wide when maximized
     * @param {Number} [maximizedNumCellsTall] Number of cells tall when maximized
     * @param {boolean} [disabled] Used to grey out and disable opening of window
     * @param {Number} [zIndex] Option to set z-index
     */
    function CollapsableWindow(x, y, expandedNumCellsWide, expandedNumCellsTall, DrawContent, xCollapsed, yCollapsed, collapsedNumCellsWide, collapsedNumCellsTall, startExpanded, canClose, useDarkTheme, title, iconPath, iconStyleID, onExpandCallback, onCollapseCallBack, notifIconArrayObj, notifIconArrayName, canMaximize, maximizedNumCellsWide, maximizedNumCellsTall, disabled, zIndex) {
        _classCallCheck(this, CollapsableWindow);

        this.x = x;
        this.y = y;

        this.DrawContent = DrawContent;

        // Option to set different position when closed
        this.xCollapsed = xCollapsed !== undefined ? xCollapsed : this.x;
        this.yCollapsed = yCollapsed !== undefined ? yCollapsed : this.y;

        this.cellPXSize = 6; // Size in pixels of bg voxel image

        // Use dark theme
        this.useDarkTheme = useDarkTheme !== undefined ? useDarkTheme : false;

        this.collapsedNumCells = 8; // Default size in cells of collapsed window
        this.collapsedNumCellsWide = collapsedNumCellsWide !== undefined ? collapsedNumCellsWide : this.collapsedNumCells;
        this.collapsedNumCellsTall = collapsedNumCellsTall !== undefined ? collapsedNumCellsTall : this.collapsedNumCells;
        this.collapsedWidth = this.cellPXSize * this.collapsedNumCellsWide + 1 + "px";
        this.collapsedHeight = this.cellPXSize * this.collapsedNumCellsTall + 1 + "px";
        this.collapsedCenterWidth = (this.collapsedNumCellsWide - 2) * this.cellPXSize + "px";
        this.collapsedCenterHeight = (this.collapsedNumCellsTall - 2) * this.cellPXSize + "px";
        this.collapsedIconSrc = iconPath;
        this.cellPXSizeStr = this.cellPXSize + "px";
        this.collapsedFarCornerInsetWidth = this.cellPXSize * (this.collapsedNumCellsWide - 1) + 1 + "px";
        this.collapsedFarCornerInsetHeight = this.cellPXSize * (this.collapsedNumCellsTall - 1) + 1 + "px";
        this.collapsedInnerGlowBaseBGWidth = (this.collapsedNumCellsWide - 2) / this.collapsedNumCellsWide * 100 + "%";
        this.collapsedInnerGlowBaseBGHeight = (this.collapsedNumCellsTall - 2) / this.collapsedNumCellsTall * 100 + "%";
        this.collapsedClipPath = "polygon(" + "0 " + this.cellPXSizeStr + ", " + this.cellPXSizeStr + " " + this.cellPXSizeStr + ", " + this.cellPXSizeStr + " 0, " + this.collapsedFarCornerInsetWidth + " 0, " + this.collapsedFarCornerInsetWidth + " " + this.cellPXSizeStr + ", " + "100% " + this.cellPXSizeStr + ", " + "100% " + this.collapsedFarCornerInsetHeight + ", " + this.collapsedFarCornerInsetWidth + " " + this.collapsedFarCornerInsetHeight + ", " + this.collapsedFarCornerInsetWidth + " 100%, " + this.cellPXSizeStr + " 100%, " + this.cellPXSizeStr + " " + this.collapsedFarCornerInsetHeight + ", " + "0 " + this.collapsedFarCornerInsetHeight + ")";

        this.expanded = startExpanded !== undefined ? startExpanded : false;
        this.canClose = canClose !== undefined ? canClose : true;
        this.expanding = false;
        this.expandTimeMS = 200;

        // Option to set css style on icon
        this.iconStyleID = iconStyleID !== undefined ? iconStyleID : "";

        this.expandedNumCellsWide = expandedNumCellsWide;
        this.expandedNumCellsTall = expandedNumCellsTall;

        // Tooltip title
        this.title = title !== undefined ? title : "";

        // Callback functions
        this.onExpandCallback = onExpandCallback;
        this.onCollapseCallBack = onCollapseCallBack;

        // Set array to use length for notif icon count
        this.notifIconArrayObj = notifIconArrayObj !== undefined && notifIconArrayName !== undefined ? notifIconArrayObj : undefined;
        this.notifIconArrayName = notifIconArrayName !== undefined ? notifIconArrayName : undefined;
        this.currentAmount = 0; // Tracks notif current amount for css anims

        // Option to maximize
        this.canMaximize = canMaximize;
        this.maximized = true;
        this.maximizedNumCellsWide = maximizedNumCellsWide !== undefined && maximizedNumCellsWide > this.expandedNumCellsWide ? maximizedNumCellsWide : this.expandedNumCellsWide;
        this.maximizedNumCellsTall = maximizedNumCellsTall !== undefined && maximizedNumCellsTall > this.expandedNumCellsTall ? maximizedNumCellsTall : this.expandedNumCellsTall;

        // Option to disable
        this.disabled = disabled !== undefined ? disabled : false;

        this.zIndex = zIndex !== undefined ? zIndex : "auto";

        this.setWindowSize();
    }

    _createClass(CollapsableWindow, [{
        key: "calculateExpandedDimensions",
        value: function calculateExpandedDimensions(cellsWide, cellsTall) {
            this.expandedWidth = this.cellPXSize * cellsWide + 1 + "px";
            this.expandedHeight = this.cellPXSize * cellsTall + 1 + "px";
            this.expandedCenterWidth = (cellsWide - 2) * this.cellPXSize + "px";
            this.expandedCenterHeight = (cellsTall - 2) * this.cellPXSize + "px";
            this.expandedFarCornerInsetWidth = this.cellPXSize * (cellsWide - 1) + 1 + "px";
            this.expandedFarCornerInsetHeight = this.cellPXSize * (cellsTall - 1) + 1 + "px";
            this.expandedInnerGlowBaseBGWidth = (cellsWide - 2) / cellsWide * 100 + "%";
            this.expandedInnerGlowBaseBGHeight = (cellsTall - 2) / cellsTall * 100 + "%";
            this.expandedClipPath = "polygon(" + "0 " + this.cellPXSizeStr + ", " + this.cellPXSizeStr + " " + this.cellPXSizeStr + ", " + this.cellPXSizeStr + " 0, " + this.expandedFarCornerInsetWidth + " 0, " + this.expandedFarCornerInsetWidth + " " + this.cellPXSizeStr + ", " + "100% " + this.cellPXSizeStr + ", " + "100% " + this.expandedFarCornerInsetHeight + ", " + this.expandedFarCornerInsetWidth + " " + this.expandedFarCornerInsetHeight + ", " + this.expandedFarCornerInsetWidth + " 100%, " + this.cellPXSizeStr + " 100%, " + this.cellPXSizeStr + " " + this.expandedFarCornerInsetHeight + ", " + "0 " + this.expandedFarCornerInsetHeight + ")";
        }
    }, {
        key: "setWindowSize",
        value: function setWindowSize() {
            if (this.canMaximize && this.maximized) {
                this.calculateExpandedDimensions(this.maximizedNumCellsWide, this.maximizedNumCellsTall);
            } else {
                this.calculateExpandedDimensions(this.expandedNumCellsWide, this.expandedNumCellsTall);
            }
        }
    }, {
        key: "onClickMaximizeButton",
        value: function onClickMaximizeButton(event) {
            var _this = this;

            if (event !== undefined) {
                event.stopPropagation();
            }

            this.maximized = !this.maximized;

            this.setWindowSize();

            // Used for css animations
            this.maximizing = true;
            setTimeout(function () {
                _this.maximizing = false;
            }, this.expandTimeMS);
        }
    }, {
        key: "onClick",
        value: function onClick(event) {
            var _this2 = this;

            if (event !== undefined) {
                event.stopPropagation();
            }

            this.expanded = !this.expanded;

            if (this.expanded && this.onExpandCallback) {
                this.onExpandCallback(event);
            }

            if (!this.expanded) {
                if (this.onCollapseCallBack) {
                    this.onCollapseCallBack(event);
                }

                this.currentAmount = 0;
            }

            // Used for css animations
            this.expanding = true;
            setTimeout(function () {
                _this2.expanding = false;
            }, this.expandTimeMS);
        }
    }]);

    return CollapsableWindow;
}();

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.
var React = __webpack_require__(5);
var StringStore = __webpack_require__(11);
var GameStore = __webpack_require__(0);

__webpack_require__(245);

module.exports = function (_React$Component) {
    _inherits(DrawCollapsableWindow, _React$Component);

    function DrawCollapsableWindow(props) {
        _classCallCheck(this, DrawCollapsableWindow);

        var _this = _possibleConstructorReturn(this, (DrawCollapsableWindow.__proto__ || Object.getPrototypeOf(DrawCollapsableWindow)).call(this, props));

        _this.cw = props.cw;
        return _this;
    }

    _createClass(DrawCollapsableWindow, [{
        key: "render",
        value: function render() {
            if (!this.cw.expanded) {
                return this.collapsedView;
            }

            return this.expandedView;
        }
    }, {
        key: "onMouseDown",
        value: function onMouseDown() {
            if (GameStore.GameInstance) {
                GameStore.GameInstance.onHUDElement = true;
            }
        }
    }, {
        key: "onMouseLeave",
        value: function onMouseLeave() {
            if (GameStore.GameInstance) {
                GameStore.GameInstance.onHUDElement = false;
            }
        }
    }, {
        key: "onMouseUp",
        value: function onMouseUp() {
            if (GameStore.GameInstance) {
                GameStore.GameInstance.onHUDElement = false;
            }
        }
    }, {
        key: "closeButton",
        get: function get() {
            if (this.cw.canClose) {
                var src = __webpack_require__(58);
                var className = this.cw.expanding ? "closeIcon" : "closeIcon iconFadeOn";
                var title = StringStore.TOOLTIP.COLLAPSABLE_WINDOW_CLOSE;
                return React.createElement("img", { src: src, className: className, title: title,
                    onMouseDown: this.onMouseDown.bind(this),
                    onMouseUp: this.onMouseUp.bind(this),
                    onMouseLeave: this.onMouseLeave.bind(this),
                    onClick: this.cw.onClick.bind(this.cw) });
            } else {
                return React.createElement("div", null);
            }
        }
    }, {
        key: "minimizeButton",
        get: function get() {
            if (this.cw.canMaximize && this.cw.maximized) {
                var src = __webpack_require__(64);
                var className = this.cw.expanding ? "minimizeIcon" : "minimizeIcon iconFadeOn";
                var title = StringStore.TOOLTIP.COLLAPSABLE_WINDOW_MIN;
                return React.createElement("img", { src: src, className: className, title: title,
                    onMouseDown: this.onMouseDown.bind(this),
                    onMouseUp: this.onMouseUp.bind(this),
                    onMouseLeave: this.onMouseLeave.bind(this),
                    onClick: this.cw.onClickMaximizeButton.bind(this.cw) });
            } else {
                return;
            }
        }
    }, {
        key: "maximizeButton",
        get: function get() {
            if (this.cw.canMaximize && !this.cw.maximized) {
                var src = __webpack_require__(63);
                var className = this.cw.expanding ? "maximizeIcon" : "maximizeIcon iconFadeOn";
                var title = StringStore.TOOLTIP.COLLAPSABLE_WINDOW_MAX;
                return React.createElement("img", { src: src, className: className, title: title,
                    onMouseDown: this.onMouseDown.bind(this),
                    onMouseUp: this.onMouseUp.bind(this),
                    onMouseLeave: this.onMouseLeave.bind(this),
                    onClick: this.cw.onClickMaximizeButton.bind(this.cw) });
            } else {
                return;
            }
        }
    }, {
        key: "openButton",
        get: function get() {
            var src = this.cw.collapsedIconSrc;
            var className = this.cw.expanding ? "icon" : "icon iconFadeOnTrans";
            return React.createElement("img", { src: src, className: className, id: this.cw.iconStyleID });
        }
    }, {
        key: "onContextMenu",
        get: function get() {
            return function (event) {
                return event.preventDefault();
            };
        }
    }, {
        key: "notificationIcon",
        get: function get() {
            var _this2 = this;

            if (!this.cw.expanded && this.cw.notifIconArrayObj !== undefined && !this.cw.disabled && (this.cw.currentAmount > 0 || this.cw.notifIconArrayObj[this.cw.notifIconArrayName].length > 0)) {
                var amount = this.cw.notifIconArrayObj[this.cw.notifIconArrayName].length;
                var styleNotif = {};
                if (amount > 9) {
                    styleNotif.fontSize = "9px";
                }

                // If there was a change && its not the first apppearance
                var shouldChange = this.cw.currentAmount !== amount;
                var shouldDisable = shouldChange && amount === 0;

                var notifIconClassDisabled = shouldDisable ? " collapsableWindowNotificationIconOff" : "";
                var notifIconClassChange = !shouldDisable && shouldChange ? " collapsableWindowNotificationIconChange" : "";
                var notifIconClass = "collapsableWindowNotificationIcon" + notifIconClassDisabled + notifIconClassChange;

                if (this.timeoutAmountChange === undefined && shouldChange) {
                    this.timeoutAmountChange = setTimeout(function () {
                        _this2.cw.currentAmount = amount;
                        _this2.timeoutAmountChange = undefined;
                    }, 1000);
                }

                return React.createElement(
                    "div",
                    { className: notifIconClass, style: styleNotif },
                    amount
                );
            }
        }
    }, {
        key: "collapsedView",
        get: function get() {
            if (this.cw.disabled) {
                return React.createElement("div", null);
            }

            // This is created in pixel space dimensions to line
            // up with voxel background image. It is scaled here depending on
            // resolution.
            var containerClass = this.cw.disabled ? "collapsableWindowContainer collapsed disabled" : "collapsableWindowContainer collapsed";
            var scale = window.innerWidth / 1280;
            var style = {
                transform: "scale(" + scale + ")",
                right: this.cw.xCollapsed + "vw",
                top: this.cw.yCollapsed * 9 / 16 + "vw",
                width: this.cw.collapsedWidth,
                height: this.cw.collapsedHeight,
                zIndex: this.cw.zIndex
            };
            var styleCenter = {
                width: this.cw.collapsedCenterWidth,
                height: this.cw.collapsedCenterHeight
            };
            var styleBase = {
                clipPath: this.cw.collapsedClipPath
            };
            var styleBaseGlow = {
                width: this.cw.collapsedInnerGlowBaseBGWidth,
                height: this.cw.collapsedInnerGlowBaseBGHeight
            };
            var title = this.cw.disabled ? this.cw.title : StringStore.TOOLTIP.COLLAPSABLE_WINDOW_OPEN + " " + this.cw.title;
            var onClick = this.cw.disabled ? undefined : this.cw.onClick.bind(this.cw);

            var baseLayer = this.cw.useDarkTheme ? React.createElement("div", null) : React.createElement(
                "div",
                { className: "collapsableWindowBGBaseLayer", style: styleBase },
                React.createElement("div", { className: "collapsableWindowBGBaseLayerInnerGlow", style: styleBaseGlow })
            );

            this.collapsedViewRender = React.createElement(
                "div",
                { className: containerClass,
                    title: title,
                    onContextMenu: this.onContextMenu,
                    onMouseDown: this.onMouseDown.bind(this),
                    onMouseUp: this.onMouseUp.bind(this),
                    onMouseLeave: this.onMouseLeave.bind(this),
                    onClick: onClick,
                    style: style },
                React.createElement(
                    "div",
                    { className: this.cw.useDarkTheme ? "collapsableWindowBG" : "collapsableWindowBG collapsableWindowBGLight" },
                    this.notificationIcon,
                    React.createElement("div", { className: "bgTopLeft" }),
                    React.createElement("div", { className: this.cw.useDarkTheme ? "bgTopCenter bgTopCenterDark" : "bgTopCenter bgTopCenterLight" }),
                    React.createElement("div", { className: "bgTopRight" }),
                    React.createElement("div", { className: this.cw.useDarkTheme ? "bgCenterLeft bgCenterLeftDark" : "bgCenterLeft bgCenterLeftLight" }),
                    React.createElement(
                        "div",
                        { className: "bgCenterCenter", style: styleCenter },
                        this.openButton
                    ),
                    React.createElement("div", { className: this.cw.useDarkTheme ? "bgCenterRight bgCenterRightDark" : "bgCenterRight bgCenterRightLight" }),
                    React.createElement("div", { className: "bgBottomLeft" }),
                    React.createElement("div", { className: this.cw.useDarkTheme ? "bgBottomCenter bgBottomCenterDark" : "bgBottomCenter bgBottomCenterLight" }),
                    React.createElement("div", { className: "bgBottomRight" })
                ),
                baseLayer
            );

            return this.collapsedViewRender;
        }
    }, {
        key: "mainContent",
        get: function get() {
            if (this.cw.expanding) {
                return React.createElement("div", null);
            } else {
                return React.createElement(this.cw.DrawContent, null);
            }
        }
    }, {
        key: "expandedView",
        get: function get() {
            // This is created in pixel space dimensions to line
            // up with voxel background image. It is scaled here depending on
            // resolution.
            var containerClass = this.cw.disabled ? "collapsableWindowContainer expanded disabled" : "collapsableWindowContainer expanded";
            var scale = window.innerWidth / 1280;
            var style = {
                transform: "scale(" + scale + ")",
                right: this.cw.x + "vw",
                top: this.cw.y * 9 / 16 + "vw",
                width: this.cw.expandedWidth,
                height: this.cw.expandedHeight,
                zIndex: this.cw.zIndex
            };
            var styleCenter = {
                width: this.cw.expandedCenterWidth,
                height: this.cw.expandedCenterHeight
            };
            var styleBase = {
                clipPath: this.cw.expandedClipPath
            };
            var styleBaseGlow = {
                width: this.cw.expandedInnerGlowBaseBGWidth,
                height: this.cw.expandedInnerGlowBaseBGHeight
            };

            var baseLayer = this.cw.useDarkTheme ? React.createElement("div", null) : React.createElement(
                "div",
                { className: "collapsableWindowBGBaseLayer", style: styleBase },
                React.createElement("div", { className: "collapsableWindowBGBaseLayerInnerGlow", style: styleBaseGlow })
            );

            return React.createElement(
                "div",
                { className: containerClass,
                    title: this.cw.title,
                    onContextMenu: this.onContextMenu,
                    style: style },
                React.createElement(
                    "div",
                    { className: this.cw.useDarkTheme ? "collapsableWindowBG" : "collapsableWindowBG collapsableWindowBGLight" },
                    this.notificationIcon,
                    React.createElement("div", { className: "bgTopLeft" }),
                    React.createElement("div", { className: this.cw.useDarkTheme ? "bgTopCenter bgTopCenterDark" : "bgTopCenter bgTopCenterLight" }),
                    React.createElement("div", { className: "bgTopRight" }),
                    React.createElement("div", { className: this.cw.useDarkTheme ? "bgCenterLeft bgCenterLeftDark" : "bgCenterLeft bgCenterLeftLight" }),
                    React.createElement(
                        "div",
                        { className: "bgCenterCenter", style: styleCenter },
                        this.closeButton,
                        this.minimizeButton,
                        this.maximizeButton,
                        this.mainContent
                    ),
                    React.createElement("div", { className: this.cw.useDarkTheme ? "bgCenterRight bgCenterRightDark" : "bgCenterRight bgCenterRightLight" }),
                    React.createElement("div", { className: "bgBottomLeft" }),
                    React.createElement("div", { className: this.cw.useDarkTheme ? "bgBottomCenter bgBottomCenterDark" : "bgBottomCenter bgBottomCenterLight" }),
                    React.createElement("div", { className: "bgBottomRight" })
                ),
                baseLayer
            );
        }
    }]);

    return DrawCollapsableWindow;
}(React.Component);

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "cf1be7f12d2a41dcdf57c3acba4addf6.png";

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var g;

// This works in non-strict mode
g = function () {
	return this;
}();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1, eval)("this");
} catch (e) {
	// This works if the window reference is available
	if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var offsetR = 0;
var offsetG = 8;
var offsetB = 16;
var offsetA = 24;

var offsetActive = 0;
var offsetBack = 1;
var offsetRight = 2;
var offsetTop = 3;
var offsetFront = 4;
var offsetLeft = 5;
var offsetBottom = 6;
// free 7
var offsetStampId = 8;
// free 24

var maskR = ~(0xff << offsetR);
var maskG = ~(0xff << offsetG);
var maskB = ~(0xff << offsetB);
var maskA = ~(0xff << offsetA);

var maskActive = ~(1 << offsetActive);
var maskBack = ~(1 << offsetBack);
var maskRight = ~(1 << offsetRight);
var maskTop = ~(1 << offsetTop);
var maskFront = ~(1 << offsetFront);
var maskLeft = ~(1 << offsetLeft);
var maskBottom = ~(1 << offsetBottom);
var maskStampId = ~(0xffff << offsetStampId);

module.exports = function () {
    function _class() {
        _classCallCheck(this, _class);

        this.dataBuffer = 0;
        this.colorBuffer = 0;
    }

    _createClass(_class, [{
        key: "Create",
        value: function Create(isActive, r, g, b, alpha) {
            this.setActive(isActive);
            this.setR(r);
            this.setG(g);
            this.setB(b);
            this.setA(alpha);
        }
    }, {
        key: "getR",
        value: function getR() {
            return this.colorBuffer >> offsetR & 0xff;
        }
    }, {
        key: "getG",
        value: function getG() {
            return this.colorBuffer >> offsetG & 0xff;
        }
    }, {
        key: "getB",
        value: function getB() {
            return this.colorBuffer >> offsetB & 0xff;
        }
    }, {
        key: "getA",
        value: function getA() {
            return this.colorBuffer >> offsetA & 0xff;
        }
    }, {
        key: "getActive",
        value: function getActive() {
            return (this.dataBuffer >> offsetActive & 0x01) > 0;
        }
    }, {
        key: "getBack",
        value: function getBack() {
            return (this.dataBuffer >> offsetBack & 0x01) > 0;
        }
    }, {
        key: "getRight",
        value: function getRight() {
            return (this.dataBuffer >> offsetRight & 0x01) > 0;
        }
    }, {
        key: "getTop",
        value: function getTop() {
            return (this.dataBuffer >> offsetTop & 0x01) > 0;
        }
    }, {
        key: "getFront",
        value: function getFront() {
            return (this.dataBuffer >> offsetFront & 0x01) > 0;
        }
    }, {
        key: "getLeft",
        value: function getLeft() {
            return (this.dataBuffer >> offsetLeft & 0x01) > 0;
        }
    }, {
        key: "getBottom",
        value: function getBottom() {
            return (this.dataBuffer >> offsetBottom & 0x01) > 0;
        }
    }, {
        key: "getStampId",
        value: function getStampId() {
            return this.dataBuffer >> offsetStampId & 0xff;
        }
    }, {
        key: "setR",
        value: function setR(r) {
            this.colorBuffer &= maskR;
            this.colorBuffer ^= r << offsetR;
        }
    }, {
        key: "setG",
        value: function setG(g) {
            this.colorBuffer &= maskG;
            this.colorBuffer ^= g << offsetG;
        }
    }, {
        key: "setB",
        value: function setB(b) {
            this.colorBuffer &= maskB;
            this.colorBuffer ^= b << offsetB;
        }
    }, {
        key: "setA",
        value: function setA(a) {
            this.colorBuffer &= maskA;
            this.colorBuffer ^= a << offsetA;
        }
    }, {
        key: "setActive",
        value: function setActive(enabled) {
            this.dataBuffer &= maskActive;
            this.dataBuffer ^= enabled << offsetActive;
        }
    }, {
        key: "setBack",
        value: function setBack(enabled) {
            this.dataBuffer &= maskBack;
            this.dataBuffer ^= enabled << offsetBack;
        }
    }, {
        key: "setRight",
        value: function setRight(enabled) {
            this.dataBuffer &= maskRight;
            this.dataBuffer ^= enabled << offsetRight;
        }
    }, {
        key: "setTop",
        value: function setTop(enabled) {
            this.dataBuffer &= maskTop;
            this.dataBuffer ^= enabled << offsetTop;
        }
    }, {
        key: "setFront",
        value: function setFront(enabled) {
            this.dataBuffer &= maskFront;
            this.dataBuffer ^= enabled << offsetFront;
        }
    }, {
        key: "setLeft",
        value: function setLeft(enabled) {
            this.dataBuffer &= maskLeft;
            this.dataBuffer ^= enabled << offsetLeft;
        }
    }, {
        key: "setBottom",
        value: function setBottom(enabled) {
            this.dataBuffer &= maskBottom;
            this.dataBuffer ^= enabled << offsetBottom;
        }
    }, {
        key: "setStampId",
        value: function setStampId(id) {
            this.dataBuffer &= maskStampId;
            this.dataBuffer ^= id << offsetStampId;
        }
    }]);

    return _class;
}();

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.

module.exports = {
    maxEntries: 10,
    firstEntry: false,
    sortedLeaderboard: [],
    highlighted: false
};

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "62f26a830c789a312df6b3cfc02c266a.png";

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.
var React = __webpack_require__(5);
var StringStore = __webpack_require__(11);
var GameStore = __webpack_require__(0);

__webpack_require__(250);

module.exports = function (_React$Component) {
    _inherits(DrawGenericButton, _React$Component);

    function DrawGenericButton(props) {
        _classCallCheck(this, DrawGenericButton);

        var _this = _possibleConstructorReturn(this, (DrawGenericButton.__proto__ || Object.getPrototypeOf(DrawGenericButton)).call(this, props));

        _this.gb = props.gb;
        return _this;
    }

    _createClass(DrawGenericButton, [{
        key: "render",
        value: function render() {
            return this.buttonView;
        }
    }, {
        key: "onMouseDown",
        value: function onMouseDown() {
            if (GameStore.GameInstance) {
                GameStore.GameInstance.onHUDElement = true;
            }
        }
    }, {
        key: "onMouseLeave",
        value: function onMouseLeave() {
            if (GameStore.GameInstance) {
                GameStore.GameInstance.onHUDElement = false;
            }
        }
    }, {
        key: "onMouseUp",
        value: function onMouseUp() {
            if (GameStore.GameInstance) {
                GameStore.GameInstance.onHUDElement = false;
            }
        }
    }, {
        key: "openButton",
        get: function get() {
            var src = this.props.gb.buttonIconSrc !== undefined ? this.props.gb.buttonIconSrc : __webpack_require__(66);
            var className = "icon iconFadeOn";
            return React.createElement("img", { src: src, className: className, id: this.props.gb.iconStyleID });
        }
    }, {
        key: "onContextMenu",
        get: function get() {
            return function (event) {
                return event.preventDefault();
            };
        }
    }, {
        key: "notificationIcon",
        get: function get() {
            var _this2 = this;

            if (this.props.gb.notifIconArrayObj !== undefined && !this.props.gb.disabled && (this.props.gb.currentAmount > 0 || this.props.gb.notifIconArrayObj[this.props.gb.notifIconArrayName].length > 0)) {
                var amount = this.props.gb.notifIconArrayObj[this.props.gb.notifIconArrayName].length;
                var styleNotif = {};
                if (amount > 9) {
                    styleNotif.fontSize = "9px";
                }

                // If there was a change && its not the first apppearance
                var shouldChange = this.props.gb.currentAmount !== amount;
                var shouldDisable = shouldChange && amount === 0;

                var notifIconClassDisabled = shouldDisable ? " genericButtonNotificationIconOff" : "";
                var notifIconClassChange = !shouldDisable && shouldChange ? " genericButtonNotificationIconChange" : "";
                var notifIconClass = "genericButtonNotificationIcon" + notifIconClassDisabled + notifIconClassChange;

                if (this.timeoutAmountChange === undefined && shouldChange) {
                    this.timeoutAmountChange = setTimeout(function () {
                        _this2.props.gb.currentAmount = amount;
                        _this2.timeoutAmountChange = undefined;
                    }, 1000);
                }

                return React.createElement(
                    "div",
                    { className: notifIconClass, style: styleNotif },
                    amount
                );
            }
        }
    }, {
        key: "buttonView",
        get: function get() {
            // This is created in pixel space dimensions to line
            // up with voxel background image. It is scaled here depending on
            // resolution.
            var containerClass = this.props.gb.disabled ? "genericButtonContainer disabled" : "genericButtonContainer";
            var id = this.props.gb.containerStyleID;

            var scale = this.props.gb.scalingDisabled ? 1 : window.innerWidth / 1280;
            var style = {
                transform: "scale(" + scale + ")",
                width: this.props.gb.buttonWidth,
                height: this.props.gb.buttonHeight
            };
            var styleCenter = {
                width: this.props.gb.buttonCenterWidth,
                height: this.props.gb.buttonCenterHeight
            };
            var styleBase = {
                clipPath: this.props.gb.buttonClipPath
            };
            var styleBaseGlow = {
                width: this.props.gb.buttonInnerGlowBaseBGWidth,
                height: this.props.gb.buttonInnerGlowBaseBGHeight
            };
            var onClick = this.props.gb.disabled ? undefined : this.props.gb.onClick.bind(this.props.gb);

            var baseLayer = this.props.gb.useDarkTheme ? React.createElement("div", null) : React.createElement(
                "div",
                { className: "genericButtonBGBaseLayer", style: styleBase },
                React.createElement("div", { className: "genericButtonBGBaseLayerInnerGlow", style: styleBaseGlow })
            );

            this.buttonViewRender = React.createElement(
                "div",
                { className: containerClass,
                    onContextMenu: this.onContextMenu,
                    onClick: onClick,
                    onMouseDown: this.onMouseDown.bind(this),
                    onMouseUp: this.onMouseUp.bind(this),
                    onMouseLeave: this.onMouseLeave.bind(this),
                    style: style,
                    id: id },
                React.createElement(
                    "div",
                    { className: this.props.gb.useDarkTheme ? "genericButtonBG" : "genericButtonBG genericButtonBGLight" },
                    this.notificationIcon,
                    React.createElement("div", { className: "bgTopLeft" }),
                    React.createElement("div", { className: this.props.gb.useDarkTheme ? "bgTopCenter bgTopCenterDark" : "bgTopCenter bgTopCenterLight" }),
                    React.createElement("div", { className: "bgTopRight" }),
                    React.createElement("div", { className: this.props.gb.useDarkTheme ? "bgCenterLeft bgCenterLeftDark" : "bgCenterLeft bgCenterLeftLight" }),
                    React.createElement(
                        "div",
                        { className: "bgCenterCenter", style: styleCenter },
                        this.mainContent
                    ),
                    React.createElement("div", { className: this.props.gb.useDarkTheme ? "bgCenterRight bgCenterRightDark" : "bgCenterRight bgCenterRightLight" }),
                    React.createElement("div", { className: "bgBottomLeft" }),
                    React.createElement("div", { className: this.props.gb.useDarkTheme ? "bgBottomCenter bgBottomCenterDark" : "bgBottomCenter bgBottomCenterLight" }),
                    React.createElement("div", { className: "bgBottomRight" })
                ),
                baseLayer
            );

            return this.buttonViewRender;
        }
    }, {
        key: "mainContent",
        get: function get() {
            if (this.props.gb.DrawContent !== undefined) {
                return React.createElement(this.props.gb.DrawContent, { text: this.props.gb.contentText, title: this.props.gb.title });
            } else {
                return this.openButton;
            }
        }
    }]);

    return DrawGenericButton;
}(React.Component);

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(5);

var _react2 = _interopRequireDefault(_react);

var _reactDom = __webpack_require__(76);

var _reactDom2 = _interopRequireDefault(_reactDom);

__webpack_require__(84);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

__webpack_require__(86);

var BuffView = __webpack_require__(87);
var HealthView = __webpack_require__(197);
var XpView = __webpack_require__(200);
var CalloutView = __webpack_require__(203);
var PickupView = __webpack_require__(206);
var ControlsView = __webpack_require__(209);
var UpgradeView = __webpack_require__(212);
var UpgradeDetailView = __webpack_require__(239);
var CoachView = __webpack_require__(242);
var CollapsableWindow = __webpack_require__(30);
var DrawCollapsableWindow = __webpack_require__(31);
var DrawWebcamHint = __webpack_require__(67);
var DrawTutorial = __webpack_require__(249);
var DrawOptionsMenu = __webpack_require__(68);
var StampView = __webpack_require__(258);
var LevelView = __webpack_require__(261);
var PlayerStore = __webpack_require__(17);
var VictoryView = __webpack_require__(264);
var TouchControlsView = __webpack_require__(267);
var GameStore = __webpack_require__(0);
var LeaderboardView = __webpack_require__(270);
var MainMenuView = __webpack_require__(273);
var StringStore = __webpack_require__(11);

var Hud = function (_React$Component) {
    _inherits(Hud, _React$Component);

    function Hud() {
        _classCallCheck(this, Hud);

        var _this = _possibleConstructorReturn(this, (Hud.__proto__ || Object.getPrototypeOf(Hud)).call(this));

        _this.coachCW = new CollapsableWindow(82, 60, 35, 25, CoachView, 95.5, 60, undefined, undefined, true, true, true, undefined, "./gui/twitchIcon.png", "twitchIconCoach", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, -1);

        // Engage forced update loop until game starts
        setTimeout(_this.forceUpdateLoop.bind(_this), 1);

        // document.getElementById("stats").innerHTML = ""
        _this.stats = new Stats();
        GameStore.optionsMenu.fpsElement = document.getElementById("stats");
        GameStore.optionsMenu.fpsElement.append(_this.stats.domElement);
        GameStore.optionsMenu.fpsElement.style.visibility = GameStore.optionsMenu.showFPS && !GameStore.mainMenu.showCalibrateScreen ? "visible" : "hidden";
        return _this;
    }

    _createClass(Hud, [{
        key: "forceUpdateLoop",
        value: function forceUpdateLoop() {
            if (GameStore.GameInstance === undefined && render) {
                render.forceUpdate();
                setTimeout(this.forceUpdateLoop.bind(this), 1);
            }
        }
    }, {
        key: "render",
        value: function render() {
            this.stats.update();

            if (PlayerStore.showHud && !GameStore.GameInstance.loading) {
                var className = undefined;
                var stampManager = GameStore.GameInstance.stampManager;

                if (GameStore.GameInstance.player !== undefined && !GameStore.GameInstance.player.hideMouse) {
                    if (GameStore.GameInstance.player.stampModePressed) {
                        if (stampManager !== undefined && stampManager.mouseOverStamp !== undefined && !stampManager.canSpawnNewStamp()) {
                            className = "hud hudSelectionCursorFail";
                        } else {
                            className = "hud hudSelectionCursorPressed";
                        }
                    } else if (stampManager !== undefined && stampManager.mouseOverStamp !== undefined && stampManager.canSpawnNewStamp()) {
                        className = "hud hudSelectionCursor";
                    } else {
                        className = "hud hudTargetCursor";
                    }
                } else {
                    className = "hud hudHideCursor";
                }

                var coachViewWindow = undefined;
                var webCamHint = undefined;
                if (GameStore.gamestateManager && GameStore.gamestateManager.playingOffline) {
                    coachViewWindow = webCamHint = _react2.default.createElement("div", null);
                } else {
                    coachViewWindow = _react2.default.createElement(DrawCollapsableWindow, { cw: this.coachCW });
                    webCamHint = _react2.default.createElement(DrawWebcamHint, null);
                }

                return _react2.default.createElement(
                    "div",
                    { className: className },
                    _react2.default.createElement(DrawOptionsMenu, null),
                    _react2.default.createElement(DrawTutorial, null),
                    _react2.default.createElement(VictoryView, { loading: GameStore.GameInstance.loading }),
                    _react2.default.createElement(BuffView, null),
                    _react2.default.createElement(HealthView, null),
                    _react2.default.createElement(XpView, null),
                    _react2.default.createElement(UpgradeView, null),
                    _react2.default.createElement(UpgradeDetailView, null),
                    coachViewWindow,
                    _react2.default.createElement(StampView, null),
                    _react2.default.createElement(LevelView, null),
                    _react2.default.createElement(ControlsView, null),
                    _react2.default.createElement(LeaderboardView, null),
                    _react2.default.createElement(CalloutView, null),
                    _react2.default.createElement(PickupView, null),
                    webCamHint,
                    _react2.default.createElement(TouchControlsView, null)
                );
            } else if (GameStore.GameInstance && GameStore.GameInstance.loading) {
                var _className = "hud hudTargetCursor";
                return _react2.default.createElement(
                    "div",
                    { className: _className },
                    _react2.default.createElement(VictoryView, { loading: GameStore.GameInstance.loading })
                );
            } else {
                return _react2.default.createElement(
                    "div",
                    { className: "hudMainMenu" },
                    _react2.default.createElement(MainMenuView, null)
                );
            }
        }
    }]);

    return Hud;
}(_react2.default.Component);

var render = _reactDom2.default.render(_react2.default.createElement(Hud, null), document.getElementById("mount"));
module.exports.render = render;

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var printWarning = function printWarning() {};

if (process.env.NODE_ENV !== 'production') {
  var ReactPropTypesSecret = __webpack_require__(75);
  var loggedTypeFailures = {};

  printWarning = function printWarning(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (process.env.NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + _typeof(typeSpecs[typeSpecName]) + '`.');
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + (typeof error === 'undefined' ? 'undefined' : _typeof(error)) + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
        }
      }
    }
  }
}

module.exports = checkPropTypes;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (process.env.NODE_ENV === 'production') {
  module.exports = __webpack_require__(78);
} else {
  module.exports = __webpack_require__(79);
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "d51c90568958a968633b2a74e03bc20d.png";

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "67966c209f1e3f7b4187f6e6540cacec.png";

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "00cfacbf2d52e0421b156fd6b91e334a.png";

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Nimble = __webpack_require__(6);

module.exports.log = function () {
    if (Nimble.twitch.store.extension.state !== "in_review" || Nimble.twitch.store.extension.state !== "ready_for_review" || Nimble.twitch.store.extension.state !== "released") {
        console.log.apply(console, arguments);
    }
};

module.exports.info = function () {
    if (Nimble.twitch.store.extension.state !== "in_review" || Nimble.twitch.store.extension.state !== "ready_for_review" || Nimble.twitch.store.extension.state !== "released") {
        console.info.apply(console, arguments);
    }
};

module.exports.error = function () {
    if (Nimble.twitch.store.extension.state !== "in_review" || Nimble.twitch.store.extension.state !== "ready_for_review" || Nimble.twitch.store.extension.state !== "released") {
        console.error.apply(console, arguments);
    }

    // Always report an error to hubble
    var eventData = {
        "opq_user_id": Nimble.twitch.store.viewer.opaqueUserId,
        "channel_id": Nimble.twitch.store.streamer.channelId
    };

    var argsArray = Array.prototype.slice.call(arguments);
    Nimble.errors.reportError(eventData, argsArray.join(" "));
};

module.exports.warn = function () {
    if (Nimble.twitch.store.extension.state !== "in_review" || Nimble.twitch.store.extension.state !== "ready_for_review" || Nimble.twitch.store.extension.state !== "released") {
        console.error.apply(console, arguments);
    }
};

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(94);

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * Platform.js <https://mths.be/platform>
 * Copyright 2014-2018 Benjamin Tan <https://bnjmnt4n.now.sh/>
 * Copyright 2011-2013 John-David Dalton <http://allyoucanleet.com/>
 * Available under MIT license <https://mths.be/mit>
 */
;(function () {
  'use strict';

  /** Used to determine if values are of the language type `Object`. */

  var objectTypes = {
    'function': true,
    'object': true
  };

  /** Used as a reference to the global object. */
  var root = objectTypes[typeof window === 'undefined' ? 'undefined' : _typeof(window)] && window || this;

  /** Backup possible global object. */
  var oldRoot = root;

  /** Detect free variable `exports`. */
  var freeExports = objectTypes[ false ? 'undefined' : _typeof(exports)] && exports;

  /** Detect free variable `module`. */
  var freeModule = objectTypes[ false ? 'undefined' : _typeof(module)] && module && !module.nodeType && module;

  /** Detect free variable `global` from Node.js or Browserified code and use it as `root`. */
  var freeGlobal = freeExports && freeModule && (typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global;
  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {
    root = freeGlobal;
  }

  /**
   * Used as the maximum length of an array-like object.
   * See the [ES6 spec](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength)
   * for more details.
   */
  var maxSafeInteger = Math.pow(2, 53) - 1;

  /** Regular expression to detect Opera. */
  var reOpera = /\bOpera/;

  /** Possible global object. */
  var thisBinding = this;

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /** Used to check for own properties of an object. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /** Used to resolve the internal `[[Class]]` of values. */
  var toString = objectProto.toString;

  /*--------------------------------------------------------------------------*/

  /**
   * Capitalizes a string value.
   *
   * @private
   * @param {string} string The string to capitalize.
   * @returns {string} The capitalized string.
   */
  function capitalize(string) {
    string = String(string);
    return string.charAt(0).toUpperCase() + string.slice(1);
  }

  /**
   * A utility function to clean up the OS name.
   *
   * @private
   * @param {string} os The OS name to clean up.
   * @param {string} [pattern] A `RegExp` pattern matching the OS name.
   * @param {string} [label] A label for the OS.
   */
  function cleanupOS(os, pattern, label) {
    // Platform tokens are defined at:
    // http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx
    // http://web.archive.org/web/20081122053950/http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx
    var data = {
      '10.0': '10',
      '6.4': '10 Technical Preview',
      '6.3': '8.1',
      '6.2': '8',
      '6.1': 'Server 2008 R2 / 7',
      '6.0': 'Server 2008 / Vista',
      '5.2': 'Server 2003 / XP 64-bit',
      '5.1': 'XP',
      '5.01': '2000 SP1',
      '5.0': '2000',
      '4.0': 'NT',
      '4.90': 'ME'
    };
    // Detect Windows version from platform tokens.
    if (pattern && label && /^Win/i.test(os) && !/^Windows Phone /i.test(os) && (data = data[/[\d.]+$/.exec(os)])) {
      os = 'Windows ' + data;
    }
    // Correct character case and cleanup string.
    os = String(os);

    if (pattern && label) {
      os = os.replace(RegExp(pattern, 'i'), label);
    }

    os = format(os.replace(/ ce$/i, ' CE').replace(/\bhpw/i, 'web').replace(/\bMacintosh\b/, 'Mac OS').replace(/_PowerPC\b/i, ' OS').replace(/\b(OS X) [^ \d]+/i, '$1').replace(/\bMac (OS X)\b/, '$1').replace(/\/(\d)/, ' $1').replace(/_/g, '.').replace(/(?: BePC|[ .]*fc[ \d.]+)$/i, '').replace(/\bx86\.64\b/gi, 'x86_64').replace(/\b(Windows Phone) OS\b/, '$1').replace(/\b(Chrome OS \w+) [\d.]+\b/, '$1').split(' on ')[0]);

    return os;
  }

  /**
   * An iteration utility for arrays and objects.
   *
   * @private
   * @param {Array|Object} object The object to iterate over.
   * @param {Function} callback The function called per iteration.
   */
  function each(object, callback) {
    var index = -1,
        length = object ? object.length : 0;

    if (typeof length == 'number' && length > -1 && length <= maxSafeInteger) {
      while (++index < length) {
        callback(object[index], index, object);
      }
    } else {
      forOwn(object, callback);
    }
  }

  /**
   * Trim and conditionally capitalize string values.
   *
   * @private
   * @param {string} string The string to format.
   * @returns {string} The formatted string.
   */
  function format(string) {
    string = trim(string);
    return (/^(?:webOS|i(?:OS|P))/.test(string) ? string : capitalize(string)
    );
  }

  /**
   * Iterates over an object's own properties, executing the `callback` for each.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} callback The function executed per own property.
   */
  function forOwn(object, callback) {
    for (var key in object) {
      if (hasOwnProperty.call(object, key)) {
        callback(object[key], key, object);
      }
    }
  }

  /**
   * Gets the internal `[[Class]]` of a value.
   *
   * @private
   * @param {*} value The value.
   * @returns {string} The `[[Class]]`.
   */
  function getClassOf(value) {
    return value == null ? capitalize(value) : toString.call(value).slice(8, -1);
  }

  /**
   * Host objects can return type values that are different from their actual
   * data type. The objects we are concerned with usually return non-primitive
   * types of "object", "function", or "unknown".
   *
   * @private
   * @param {*} object The owner of the property.
   * @param {string} property The property to check.
   * @returns {boolean} Returns `true` if the property value is a non-primitive, else `false`.
   */
  function isHostType(object, property) {
    var type = object != null ? _typeof(object[property]) : 'number';
    return !/^(?:boolean|number|string|undefined)$/.test(type) && (type == 'object' ? !!object[property] : true);
  }

  /**
   * Prepares a string for use in a `RegExp` by making hyphens and spaces optional.
   *
   * @private
   * @param {string} string The string to qualify.
   * @returns {string} The qualified string.
   */
  function qualify(string) {
    return String(string).replace(/([ -])(?!$)/g, '$1?');
  }

  /**
   * A bare-bones `Array#reduce` like utility function.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} callback The function called per iteration.
   * @returns {*} The accumulated result.
   */
  function reduce(array, callback) {
    var accumulator = null;
    each(array, function (value, index) {
      accumulator = callback(accumulator, value, index, array);
    });
    return accumulator;
  }

  /**
   * Removes leading and trailing whitespace from a string.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} The trimmed string.
   */
  function trim(string) {
    return String(string).replace(/^ +| +$/g, '');
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Creates a new platform object.
   *
   * @memberOf platform
   * @param {Object|string} [ua=navigator.userAgent] The user agent string or
   *  context object.
   * @returns {Object} A platform object.
   */
  function parse(ua) {

    /** The environment context object. */
    var context = root;

    /** Used to flag when a custom context is provided. */
    var isCustomContext = ua && (typeof ua === 'undefined' ? 'undefined' : _typeof(ua)) == 'object' && getClassOf(ua) != 'String';

    // Juggle arguments.
    if (isCustomContext) {
      context = ua;
      ua = null;
    }

    /** Browser navigator object. */
    var nav = context.navigator || {};

    /** Browser user agent string. */
    var userAgent = nav.userAgent || '';

    ua || (ua = userAgent);

    /** Used to flag when `thisBinding` is the [ModuleScope]. */
    var isModuleScope = isCustomContext || thisBinding == oldRoot;

    /** Used to detect if browser is like Chrome. */
    var likeChrome = isCustomContext ? !!nav.likeChrome : /\bChrome\b/.test(ua) && !/internal|\n/i.test(toString.toString());

    /** Internal `[[Class]]` value shortcuts. */
    var objectClass = 'Object',
        airRuntimeClass = isCustomContext ? objectClass : 'ScriptBridgingProxyObject',
        enviroClass = isCustomContext ? objectClass : 'Environment',
        javaClass = isCustomContext && context.java ? 'JavaPackage' : getClassOf(context.java),
        phantomClass = isCustomContext ? objectClass : 'RuntimeObject';

    /** Detect Java environments. */
    var java = /\bJava/.test(javaClass) && context.java;

    /** Detect Rhino. */
    var rhino = java && getClassOf(context.environment) == enviroClass;

    /** A character to represent alpha. */
    var alpha = java ? 'a' : '\u03B1';

    /** A character to represent beta. */
    var beta = java ? 'b' : '\u03B2';

    /** Browser document object. */
    var doc = context.document || {};

    /**
     * Detect Opera browser (Presto-based).
     * http://www.howtocreate.co.uk/operaStuff/operaObject.html
     * http://dev.opera.com/articles/view/opera-mini-web-content-authoring-guidelines/#operamini
     */
    var opera = context.operamini || context.opera;

    /** Opera `[[Class]]`. */
    var operaClass = reOpera.test(operaClass = isCustomContext && opera ? opera['[[Class]]'] : getClassOf(opera)) ? operaClass : opera = null;

    /*------------------------------------------------------------------------*/

    /** Temporary variable used over the script's lifetime. */
    var data;

    /** The CPU architecture. */
    var arch = ua;

    /** Platform description array. */
    var description = [];

    /** Platform alpha/beta indicator. */
    var prerelease = null;

    /** A flag to indicate that environment features should be used to resolve the platform. */
    var useFeatures = ua == userAgent;

    /** The browser/environment version. */
    var version = useFeatures && opera && typeof opera.version == 'function' && opera.version();

    /** A flag to indicate if the OS ends with "/ Version" */
    var isSpecialCasedOS;

    /* Detectable layout engines (order is important). */
    var layout = getLayout([{ 'label': 'EdgeHTML', 'pattern': 'Edge' }, 'Trident', { 'label': 'WebKit', 'pattern': 'AppleWebKit' }, 'iCab', 'Presto', 'NetFront', 'Tasman', 'KHTML', 'Gecko']);

    /* Detectable browser names (order is important). */
    var name = getName(['Adobe AIR', 'Arora', 'Avant Browser', 'Breach', 'Camino', 'Electron', 'Epiphany', 'Fennec', 'Flock', 'Galeon', 'GreenBrowser', 'iCab', 'Iceweasel', 'K-Meleon', 'Konqueror', 'Lunascape', 'Maxthon', { 'label': 'Microsoft Edge', 'pattern': 'Edge' }, 'Midori', 'Nook Browser', 'PaleMoon', 'PhantomJS', 'Raven', 'Rekonq', 'RockMelt', { 'label': 'Samsung Internet', 'pattern': 'SamsungBrowser' }, 'SeaMonkey', { 'label': 'Silk', 'pattern': '(?:Cloud9|Silk-Accelerated)' }, 'Sleipnir', 'SlimBrowser', { 'label': 'SRWare Iron', 'pattern': 'Iron' }, 'Sunrise', 'Swiftfox', 'Waterfox', 'WebPositive', 'Opera Mini', { 'label': 'Opera Mini', 'pattern': 'OPiOS' }, 'Opera', { 'label': 'Opera', 'pattern': 'OPR' }, 'Chrome', { 'label': 'Chrome Mobile', 'pattern': '(?:CriOS|CrMo)' }, { 'label': 'Firefox', 'pattern': '(?:Firefox|Minefield)' }, { 'label': 'Firefox for iOS', 'pattern': 'FxiOS' }, { 'label': 'IE', 'pattern': 'IEMobile' }, { 'label': 'IE', 'pattern': 'MSIE' }, 'Safari']);

    /* Detectable products (order is important). */
    var product = getProduct([{ 'label': 'BlackBerry', 'pattern': 'BB10' }, 'BlackBerry', { 'label': 'Galaxy S', 'pattern': 'GT-I9000' }, { 'label': 'Galaxy S2', 'pattern': 'GT-I9100' }, { 'label': 'Galaxy S3', 'pattern': 'GT-I9300' }, { 'label': 'Galaxy S4', 'pattern': 'GT-I9500' }, { 'label': 'Galaxy S5', 'pattern': 'SM-G900' }, { 'label': 'Galaxy S6', 'pattern': 'SM-G920' }, { 'label': 'Galaxy S6 Edge', 'pattern': 'SM-G925' }, { 'label': 'Galaxy S7', 'pattern': 'SM-G930' }, { 'label': 'Galaxy S7 Edge', 'pattern': 'SM-G935' }, 'Google TV', 'Lumia', 'iPad', 'iPod', 'iPhone', 'Kindle', { 'label': 'Kindle Fire', 'pattern': '(?:Cloud9|Silk-Accelerated)' }, 'Nexus', 'Nook', 'PlayBook', 'PlayStation Vita', 'PlayStation', 'TouchPad', 'Transformer', { 'label': 'Wii U', 'pattern': 'WiiU' }, 'Wii', 'Xbox One', { 'label': 'Xbox 360', 'pattern': 'Xbox' }, 'Xoom']);

    /* Detectable manufacturers. */
    var manufacturer = getManufacturer({
      'Apple': { 'iPad': 1, 'iPhone': 1, 'iPod': 1 },
      'Archos': {},
      'Amazon': { 'Kindle': 1, 'Kindle Fire': 1 },
      'Asus': { 'Transformer': 1 },
      'Barnes & Noble': { 'Nook': 1 },
      'BlackBerry': { 'PlayBook': 1 },
      'Google': { 'Google TV': 1, 'Nexus': 1 },
      'HP': { 'TouchPad': 1 },
      'HTC': {},
      'LG': {},
      'Microsoft': { 'Xbox': 1, 'Xbox One': 1 },
      'Motorola': { 'Xoom': 1 },
      'Nintendo': { 'Wii U': 1, 'Wii': 1 },
      'Nokia': { 'Lumia': 1 },
      'Samsung': { 'Galaxy S': 1, 'Galaxy S2': 1, 'Galaxy S3': 1, 'Galaxy S4': 1 },
      'Sony': { 'PlayStation': 1, 'PlayStation Vita': 1 }
    });

    /* Detectable operating systems (order is important). */
    var os = getOS(['Windows Phone', 'Android', 'CentOS', { 'label': 'Chrome OS', 'pattern': 'CrOS' }, 'Debian', 'Fedora', 'FreeBSD', 'Gentoo', 'Haiku', 'Kubuntu', 'Linux Mint', 'OpenBSD', 'Red Hat', 'SuSE', 'Ubuntu', 'Xubuntu', 'Cygwin', 'Symbian OS', 'hpwOS', 'webOS ', 'webOS', 'Tablet OS', 'Tizen', 'Linux', 'Mac OS X', 'Macintosh', 'Mac', 'Windows 98;', 'Windows ']);

    /*------------------------------------------------------------------------*/

    /**
     * Picks the layout engine from an array of guesses.
     *
     * @private
     * @param {Array} guesses An array of guesses.
     * @returns {null|string} The detected layout engine.
     */
    function getLayout(guesses) {
      return reduce(guesses, function (result, guess) {
        return result || RegExp('\\b' + (guess.pattern || qualify(guess)) + '\\b', 'i').exec(ua) && (guess.label || guess);
      });
    }

    /**
     * Picks the manufacturer from an array of guesses.
     *
     * @private
     * @param {Array} guesses An object of guesses.
     * @returns {null|string} The detected manufacturer.
     */
    function getManufacturer(guesses) {
      return reduce(guesses, function (result, value, key) {
        // Lookup the manufacturer by product or scan the UA for the manufacturer.
        return result || (value[product] || value[/^[a-z]+(?: +[a-z]+\b)*/i.exec(product)] || RegExp('\\b' + qualify(key) + '(?:\\b|\\w*\\d)', 'i').exec(ua)) && key;
      });
    }

    /**
     * Picks the browser name from an array of guesses.
     *
     * @private
     * @param {Array} guesses An array of guesses.
     * @returns {null|string} The detected browser name.
     */
    function getName(guesses) {
      return reduce(guesses, function (result, guess) {
        return result || RegExp('\\b' + (guess.pattern || qualify(guess)) + '\\b', 'i').exec(ua) && (guess.label || guess);
      });
    }

    /**
     * Picks the OS name from an array of guesses.
     *
     * @private
     * @param {Array} guesses An array of guesses.
     * @returns {null|string} The detected OS name.
     */
    function getOS(guesses) {
      return reduce(guesses, function (result, guess) {
        var pattern = guess.pattern || qualify(guess);
        if (!result && (result = RegExp('\\b' + pattern + '(?:/[\\d.]+|[ \\w.]*)', 'i').exec(ua))) {
          result = cleanupOS(result, pattern, guess.label || guess);
        }
        return result;
      });
    }

    /**
     * Picks the product name from an array of guesses.
     *
     * @private
     * @param {Array} guesses An array of guesses.
     * @returns {null|string} The detected product name.
     */
    function getProduct(guesses) {
      return reduce(guesses, function (result, guess) {
        var pattern = guess.pattern || qualify(guess);
        if (!result && (result = RegExp('\\b' + pattern + ' *\\d+[.\\w_]*', 'i').exec(ua) || RegExp('\\b' + pattern + ' *\\w+-[\\w]*', 'i').exec(ua) || RegExp('\\b' + pattern + '(?:; *(?:[a-z]+[_-])?[a-z]+\\d+|[^ ();-]*)', 'i').exec(ua))) {
          // Split by forward slash and append product version if needed.
          if ((result = String(guess.label && !RegExp(pattern, 'i').test(guess.label) ? guess.label : result).split('/'))[1] && !/[\d.]+/.test(result[0])) {
            result[0] += ' ' + result[1];
          }
          // Correct character case and cleanup string.
          guess = guess.label || guess;
          result = format(result[0].replace(RegExp(pattern, 'i'), guess).replace(RegExp('; *(?:' + guess + '[_-])?', 'i'), ' ').replace(RegExp('(' + guess + ')[-_.]?(\\w)', 'i'), '$1 $2'));
        }
        return result;
      });
    }

    /**
     * Resolves the version using an array of UA patterns.
     *
     * @private
     * @param {Array} patterns An array of UA patterns.
     * @returns {null|string} The detected version.
     */
    function getVersion(patterns) {
      return reduce(patterns, function (result, pattern) {
        return result || (RegExp(pattern + '(?:-[\\d.]+/|(?: for [\\w-]+)?[ /-])([\\d.]+[^ ();/_-]*)', 'i').exec(ua) || 0)[1] || null;
      });
    }

    /**
     * Returns `platform.description` when the platform object is coerced to a string.
     *
     * @name toString
     * @memberOf platform
     * @returns {string} Returns `platform.description` if available, else an empty string.
     */
    function toStringPlatform() {
      return this.description || '';
    }

    /*------------------------------------------------------------------------*/

    // Convert layout to an array so we can add extra details.
    layout && (layout = [layout]);

    // Detect product names that contain their manufacturer's name.
    if (manufacturer && !product) {
      product = getProduct([manufacturer]);
    }
    // Clean up Google TV.
    if (data = /\bGoogle TV\b/.exec(product)) {
      product = data[0];
    }
    // Detect simulators.
    if (/\bSimulator\b/i.test(ua)) {
      product = (product ? product + ' ' : '') + 'Simulator';
    }
    // Detect Opera Mini 8+ running in Turbo/Uncompressed mode on iOS.
    if (name == 'Opera Mini' && /\bOPiOS\b/.test(ua)) {
      description.push('running in Turbo/Uncompressed mode');
    }
    // Detect IE Mobile 11.
    if (name == 'IE' && /\blike iPhone OS\b/.test(ua)) {
      data = parse(ua.replace(/like iPhone OS/, ''));
      manufacturer = data.manufacturer;
      product = data.product;
    }
    // Detect iOS.
    else if (/^iP/.test(product)) {
        name || (name = 'Safari');
        os = 'iOS' + ((data = / OS ([\d_]+)/i.exec(ua)) ? ' ' + data[1].replace(/_/g, '.') : '');
      }
      // Detect Kubuntu.
      else if (name == 'Konqueror' && !/buntu/i.test(os)) {
          os = 'Kubuntu';
        }
        // Detect Android browsers.
        else if (manufacturer && manufacturer != 'Google' && (/Chrome/.test(name) && !/\bMobile Safari\b/i.test(ua) || /\bVita\b/.test(product)) || /\bAndroid\b/.test(os) && /^Chrome/.test(name) && /\bVersion\//i.test(ua)) {
            name = 'Android Browser';
            os = /\bAndroid\b/.test(os) ? os : 'Android';
          }
          // Detect Silk desktop/accelerated modes.
          else if (name == 'Silk') {
              if (!/\bMobi/i.test(ua)) {
                os = 'Android';
                description.unshift('desktop mode');
              }
              if (/Accelerated *= *true/i.test(ua)) {
                description.unshift('accelerated');
              }
            }
            // Detect PaleMoon identifying as Firefox.
            else if (name == 'PaleMoon' && (data = /\bFirefox\/([\d.]+)\b/.exec(ua))) {
                description.push('identifying as Firefox ' + data[1]);
              }
              // Detect Firefox OS and products running Firefox.
              else if (name == 'Firefox' && (data = /\b(Mobile|Tablet|TV)\b/i.exec(ua))) {
                  os || (os = 'Firefox OS');
                  product || (product = data[1]);
                }
                // Detect false positives for Firefox/Safari.
                else if (!name || (data = !/\bMinefield\b/i.test(ua) && /\b(?:Firefox|Safari)\b/.exec(name))) {
                    // Escape the `/` for Firefox 1.
                    if (name && !product && /[\/,]|^[^(]+?\)/.test(ua.slice(ua.indexOf(data + '/') + 8))) {
                      // Clear name of false positives.
                      name = null;
                    }
                    // Reassign a generic name.
                    if ((data = product || manufacturer || os) && (product || manufacturer || /\b(?:Android|Symbian OS|Tablet OS|webOS)\b/.test(os))) {
                      name = /[a-z]+(?: Hat)?/i.exec(/\bAndroid\b/.test(os) ? os : data) + ' Browser';
                    }
                  }
                  // Add Chrome version to description for Electron.
                  else if (name == 'Electron' && (data = (/\bChrome\/([\d.]+)\b/.exec(ua) || 0)[1])) {
                      description.push('Chromium ' + data);
                    }
    // Detect non-Opera (Presto-based) versions (order is important).
    if (!version) {
      version = getVersion(['(?:Cloud9|CriOS|CrMo|Edge|FxiOS|IEMobile|Iron|Opera ?Mini|OPiOS|OPR|Raven|SamsungBrowser|Silk(?!/[\\d.]+$))', 'Version', qualify(name), '(?:Firefox|Minefield|NetFront)']);
    }
    // Detect stubborn layout engines.
    if (data = layout == 'iCab' && parseFloat(version) > 3 && 'WebKit' || /\bOpera\b/.test(name) && (/\bOPR\b/.test(ua) ? 'Blink' : 'Presto') || /\b(?:Midori|Nook|Safari)\b/i.test(ua) && !/^(?:Trident|EdgeHTML)$/.test(layout) && 'WebKit' || !layout && /\bMSIE\b/i.test(ua) && (os == 'Mac OS' ? 'Tasman' : 'Trident') || layout == 'WebKit' && /\bPlayStation\b(?! Vita\b)/i.test(name) && 'NetFront') {
      layout = [data];
    }
    // Detect Windows Phone 7 desktop mode.
    if (name == 'IE' && (data = (/; *(?:XBLWP|ZuneWP)(\d+)/i.exec(ua) || 0)[1])) {
      name += ' Mobile';
      os = 'Windows Phone ' + (/\+$/.test(data) ? data : data + '.x');
      description.unshift('desktop mode');
    }
    // Detect Windows Phone 8.x desktop mode.
    else if (/\bWPDesktop\b/i.test(ua)) {
        name = 'IE Mobile';
        os = 'Windows Phone 8.x';
        description.unshift('desktop mode');
        version || (version = (/\brv:([\d.]+)/.exec(ua) || 0)[1]);
      }
      // Detect IE 11 identifying as other browsers.
      else if (name != 'IE' && layout == 'Trident' && (data = /\brv:([\d.]+)/.exec(ua))) {
          if (name) {
            description.push('identifying as ' + name + (version ? ' ' + version : ''));
          }
          name = 'IE';
          version = data[1];
        }
    // Leverage environment features.
    if (useFeatures) {
      // Detect server-side environments.
      // Rhino has a global function while others have a global object.
      if (isHostType(context, 'global')) {
        if (java) {
          data = java.lang.System;
          arch = data.getProperty('os.arch');
          os = os || data.getProperty('os.name') + ' ' + data.getProperty('os.version');
        }
        if (rhino) {
          try {
            version = context.require('ringo/engine').version.join('.');
            name = 'RingoJS';
          } catch (e) {
            if ((data = context.system) && data.global.system == context.system) {
              name = 'Narwhal';
              os || (os = data[0].os || null);
            }
          }
          if (!name) {
            name = 'Rhino';
          }
        } else if (_typeof(context.process) == 'object' && !context.process.browser && (data = context.process)) {
          if (_typeof(data.versions) == 'object') {
            if (typeof data.versions.electron == 'string') {
              description.push('Node ' + data.versions.node);
              name = 'Electron';
              version = data.versions.electron;
            } else if (typeof data.versions.nw == 'string') {
              description.push('Chromium ' + version, 'Node ' + data.versions.node);
              name = 'NW.js';
              version = data.versions.nw;
            }
          }
          if (!name) {
            name = 'Node.js';
            arch = data.arch;
            os = data.platform;
            version = /[\d.]+/.exec(data.version);
            version = version ? version[0] : null;
          }
        }
      }
      // Detect Adobe AIR.
      else if (getClassOf(data = context.runtime) == airRuntimeClass) {
          name = 'Adobe AIR';
          os = data.flash.system.Capabilities.os;
        }
        // Detect PhantomJS.
        else if (getClassOf(data = context.phantom) == phantomClass) {
            name = 'PhantomJS';
            version = (data = data.version || null) && data.major + '.' + data.minor + '.' + data.patch;
          }
          // Detect IE compatibility modes.
          else if (typeof doc.documentMode == 'number' && (data = /\bTrident\/(\d+)/i.exec(ua))) {
              // We're in compatibility mode when the Trident version + 4 doesn't
              // equal the document mode.
              version = [version, doc.documentMode];
              if ((data = +data[1] + 4) != version[1]) {
                description.push('IE ' + version[1] + ' mode');
                layout && (layout[1] = '');
                version[1] = data;
              }
              version = name == 'IE' ? String(version[1].toFixed(1)) : version[0];
            }
            // Detect IE 11 masking as other browsers.
            else if (typeof doc.documentMode == 'number' && /^(?:Chrome|Firefox)\b/.test(name)) {
                description.push('masking as ' + name + ' ' + version);
                name = 'IE';
                version = '11.0';
                layout = ['Trident'];
                os = 'Windows';
              }
      os = os && format(os);
    }
    // Detect prerelease phases.
    if (version && (data = /(?:[ab]|dp|pre|[ab]\d+pre)(?:\d+\+?)?$/i.exec(version) || /(?:alpha|beta)(?: ?\d)?/i.exec(ua + ';' + (useFeatures && nav.appMinorVersion)) || /\bMinefield\b/i.test(ua) && 'a')) {
      prerelease = /b/i.test(data) ? 'beta' : 'alpha';
      version = version.replace(RegExp(data + '\\+?$'), '') + (prerelease == 'beta' ? beta : alpha) + (/\d+\+?/.exec(data) || '');
    }
    // Detect Firefox Mobile.
    if (name == 'Fennec' || name == 'Firefox' && /\b(?:Android|Firefox OS)\b/.test(os)) {
      name = 'Firefox Mobile';
    }
    // Obscure Maxthon's unreliable version.
    else if (name == 'Maxthon' && version) {
        version = version.replace(/\.[\d.]+/, '.x');
      }
      // Detect Xbox 360 and Xbox One.
      else if (/\bXbox\b/i.test(product)) {
          if (product == 'Xbox 360') {
            os = null;
          }
          if (product == 'Xbox 360' && /\bIEMobile\b/.test(ua)) {
            description.unshift('mobile mode');
          }
        }
        // Add mobile postfix.
        else if ((/^(?:Chrome|IE|Opera)$/.test(name) || name && !product && !/Browser|Mobi/.test(name)) && (os == 'Windows CE' || /Mobi/i.test(ua))) {
            name += ' Mobile';
          }
          // Detect IE platform preview.
          else if (name == 'IE' && useFeatures) {
              try {
                if (context.external === null) {
                  description.unshift('platform preview');
                }
              } catch (e) {
                description.unshift('embedded');
              }
            }
            // Detect BlackBerry OS version.
            // http://docs.blackberry.com/en/developers/deliverables/18169/HTTP_headers_sent_by_BB_Browser_1234911_11.jsp
            else if ((/\bBlackBerry\b/.test(product) || /\bBB10\b/.test(ua)) && (data = (RegExp(product.replace(/ +/g, ' *') + '/([.\\d]+)', 'i').exec(ua) || 0)[1] || version)) {
                data = [data, /BB10/.test(ua)];
                os = (data[1] ? (product = null, manufacturer = 'BlackBerry') : 'Device Software') + ' ' + data[0];
                version = null;
              }
              // Detect Opera identifying/masking itself as another browser.
              // http://www.opera.com/support/kb/view/843/
              else if (this != forOwn && product != 'Wii' && (useFeatures && opera || /Opera/.test(name) && /\b(?:MSIE|Firefox)\b/i.test(ua) || name == 'Firefox' && /\bOS X (?:\d+\.){2,}/.test(os) || name == 'IE' && (os && !/^Win/.test(os) && version > 5.5 || /\bWindows XP\b/.test(os) && version > 8 || version == 8 && !/\bTrident\b/.test(ua))) && !reOpera.test(data = parse.call(forOwn, ua.replace(reOpera, '') + ';')) && data.name) {
                  // When "identifying", the UA contains both Opera and the other browser's name.
                  data = 'ing as ' + data.name + ((data = data.version) ? ' ' + data : '');
                  if (reOpera.test(name)) {
                    if (/\bIE\b/.test(data) && os == 'Mac OS') {
                      os = null;
                    }
                    data = 'identify' + data;
                  }
                  // When "masking", the UA contains only the other browser's name.
                  else {
                      data = 'mask' + data;
                      if (operaClass) {
                        name = format(operaClass.replace(/([a-z])([A-Z])/g, '$1 $2'));
                      } else {
                        name = 'Opera';
                      }
                      if (/\bIE\b/.test(data)) {
                        os = null;
                      }
                      if (!useFeatures) {
                        version = null;
                      }
                    }
                  layout = ['Presto'];
                  description.push(data);
                }
    // Detect WebKit Nightly and approximate Chrome/Safari versions.
    if (data = (/\bAppleWebKit\/([\d.]+\+?)/i.exec(ua) || 0)[1]) {
      // Correct build number for numeric comparison.
      // (e.g. "532.5" becomes "532.05")
      data = [parseFloat(data.replace(/\.(\d)$/, '.0$1')), data];
      // Nightly builds are postfixed with a "+".
      if (name == 'Safari' && data[1].slice(-1) == '+') {
        name = 'WebKit Nightly';
        prerelease = 'alpha';
        version = data[1].slice(0, -1);
      }
      // Clear incorrect browser versions.
      else if (version == data[1] || version == (data[2] = (/\bSafari\/([\d.]+\+?)/i.exec(ua) || 0)[1])) {
          version = null;
        }
      // Use the full Chrome version when available.
      data[1] = (/\bChrome\/([\d.]+)/i.exec(ua) || 0)[1];
      // Detect Blink layout engine.
      if (data[0] == 537.36 && data[2] == 537.36 && parseFloat(data[1]) >= 28 && layout == 'WebKit') {
        layout = ['Blink'];
      }
      // Detect JavaScriptCore.
      // http://stackoverflow.com/questions/6768474/how-can-i-detect-which-javascript-engine-v8-or-jsc-is-used-at-runtime-in-androi
      if (!useFeatures || !likeChrome && !data[1]) {
        layout && (layout[1] = 'like Safari');
        data = (data = data[0], data < 400 ? 1 : data < 500 ? 2 : data < 526 ? 3 : data < 533 ? 4 : data < 534 ? '4+' : data < 535 ? 5 : data < 537 ? 6 : data < 538 ? 7 : data < 601 ? 8 : '8');
      } else {
        layout && (layout[1] = 'like Chrome');
        data = data[1] || (data = data[0], data < 530 ? 1 : data < 532 ? 2 : data < 532.05 ? 3 : data < 533 ? 4 : data < 534.03 ? 5 : data < 534.07 ? 6 : data < 534.10 ? 7 : data < 534.13 ? 8 : data < 534.16 ? 9 : data < 534.24 ? 10 : data < 534.30 ? 11 : data < 535.01 ? 12 : data < 535.02 ? '13+' : data < 535.07 ? 15 : data < 535.11 ? 16 : data < 535.19 ? 17 : data < 536.05 ? 18 : data < 536.10 ? 19 : data < 537.01 ? 20 : data < 537.11 ? '21+' : data < 537.13 ? 23 : data < 537.18 ? 24 : data < 537.24 ? 25 : data < 537.36 ? 26 : layout != 'Blink' ? '27' : '28');
      }
      // Add the postfix of ".x" or "+" for approximate versions.
      layout && (layout[1] += ' ' + (data += typeof data == 'number' ? '.x' : /[.+]/.test(data) ? '' : '+'));
      // Obscure version for some Safari 1-2 releases.
      if (name == 'Safari' && (!version || parseInt(version) > 45)) {
        version = data;
      }
    }
    // Detect Opera desktop modes.
    if (name == 'Opera' && (data = /\bzbov|zvav$/.exec(os))) {
      name += ' ';
      description.unshift('desktop mode');
      if (data == 'zvav') {
        name += 'Mini';
        version = null;
      } else {
        name += 'Mobile';
      }
      os = os.replace(RegExp(' *' + data + '$'), '');
    }
    // Detect Chrome desktop mode.
    else if (name == 'Safari' && /\bChrome\b/.exec(layout && layout[1])) {
        description.unshift('desktop mode');
        name = 'Chrome Mobile';
        version = null;

        if (/\bOS X\b/.test(os)) {
          manufacturer = 'Apple';
          os = 'iOS 4.3+';
        } else {
          os = null;
        }
      }
    // Strip incorrect OS versions.
    if (version && version.indexOf(data = /[\d.]+$/.exec(os)) == 0 && ua.indexOf('/' + data + '-') > -1) {
      os = trim(os.replace(data, ''));
    }
    // Add layout engine.
    if (layout && !/\b(?:Avant|Nook)\b/.test(name) && (/Browser|Lunascape|Maxthon/.test(name) || name != 'Safari' && /^iOS/.test(os) && /\bSafari\b/.test(layout[1]) || /^(?:Adobe|Arora|Breach|Midori|Opera|Phantom|Rekonq|Rock|Samsung Internet|Sleipnir|Web)/.test(name) && layout[1])) {
      // Don't add layout details to description if they are falsey.
      (data = layout[layout.length - 1]) && description.push(data);
    }
    // Combine contextual information.
    if (description.length) {
      description = ['(' + description.join('; ') + ')'];
    }
    // Append manufacturer to description.
    if (manufacturer && product && product.indexOf(manufacturer) < 0) {
      description.push('on ' + manufacturer);
    }
    // Append product to description.
    if (product) {
      description.push((/^on /.test(description[description.length - 1]) ? '' : 'on ') + product);
    }
    // Parse the OS into an object.
    if (os) {
      data = / ([\d.+]+)$/.exec(os);
      isSpecialCasedOS = data && os.charAt(os.length - data[0].length - 1) == '/';
      os = {
        'architecture': 32,
        'family': data && !isSpecialCasedOS ? os.replace(data[0], '') : os,
        'version': data ? data[1] : null,
        'toString': function toString() {
          var version = this.version;
          return this.family + (version && !isSpecialCasedOS ? ' ' + version : '') + (this.architecture == 64 ? ' 64-bit' : '');
        }
      };
    }
    // Add browser/OS architecture.
    if ((data = /\b(?:AMD|IA|Win|WOW|x86_|x)64\b/i.exec(arch)) && !/\bi686\b/i.test(arch)) {
      if (os) {
        os.architecture = 64;
        os.family = os.family.replace(RegExp(' *' + data), '');
      }
      if (name && (/\bWOW64\b/i.test(ua) || useFeatures && /\w(?:86|32)$/.test(nav.cpuClass || nav.platform) && !/\bWin64; x64\b/i.test(ua))) {
        description.unshift('32-bit');
      }
    }
    // Chrome 39 and above on OS X is always 64-bit.
    else if (os && /^OS X/.test(os.family) && name == 'Chrome' && parseFloat(version) >= 39) {
        os.architecture = 64;
      }

    ua || (ua = null);

    /*------------------------------------------------------------------------*/

    /**
     * The platform object.
     *
     * @name platform
     * @type Object
     */
    var platform = {};

    /**
     * The platform description.
     *
     * @memberOf platform
     * @type string|null
     */
    platform.description = ua;

    /**
     * The name of the browser's layout engine.
     *
     * The list of common layout engines include:
     * "Blink", "EdgeHTML", "Gecko", "Trident" and "WebKit"
     *
     * @memberOf platform
     * @type string|null
     */
    platform.layout = layout && layout[0];

    /**
     * The name of the product's manufacturer.
     *
     * The list of manufacturers include:
     * "Apple", "Archos", "Amazon", "Asus", "Barnes & Noble", "BlackBerry",
     * "Google", "HP", "HTC", "LG", "Microsoft", "Motorola", "Nintendo",
     * "Nokia", "Samsung" and "Sony"
     *
     * @memberOf platform
     * @type string|null
     */
    platform.manufacturer = manufacturer;

    /**
     * The name of the browser/environment.
     *
     * The list of common browser names include:
     * "Chrome", "Electron", "Firefox", "Firefox for iOS", "IE",
     * "Microsoft Edge", "PhantomJS", "Safari", "SeaMonkey", "Silk",
     * "Opera Mini" and "Opera"
     *
     * Mobile versions of some browsers have "Mobile" appended to their name:
     * eg. "Chrome Mobile", "Firefox Mobile", "IE Mobile" and "Opera Mobile"
     *
     * @memberOf platform
     * @type string|null
     */
    platform.name = name;

    /**
     * The alpha/beta release indicator.
     *
     * @memberOf platform
     * @type string|null
     */
    platform.prerelease = prerelease;

    /**
     * The name of the product hosting the browser.
     *
     * The list of common products include:
     *
     * "BlackBerry", "Galaxy S4", "Lumia", "iPad", "iPod", "iPhone", "Kindle",
     * "Kindle Fire", "Nexus", "Nook", "PlayBook", "TouchPad" and "Transformer"
     *
     * @memberOf platform
     * @type string|null
     */
    platform.product = product;

    /**
     * The browser's user agent string.
     *
     * @memberOf platform
     * @type string|null
     */
    platform.ua = ua;

    /**
     * The browser/environment version.
     *
     * @memberOf platform
     * @type string|null
     */
    platform.version = name && version;

    /**
     * The name of the operating system.
     *
     * @memberOf platform
     * @type Object
     */
    platform.os = os || {

      /**
       * The CPU architecture the OS is built for.
       *
       * @memberOf platform.os
       * @type number|null
       */
      'architecture': null,

      /**
       * The family of the OS.
       *
       * Common values include:
       * "Windows", "Windows Server 2008 R2 / 7", "Windows Server 2008 / Vista",
       * "Windows XP", "OS X", "Ubuntu", "Debian", "Fedora", "Red Hat", "SuSE",
       * "Android", "iOS" and "Windows Phone"
       *
       * @memberOf platform.os
       * @type string|null
       */
      'family': null,

      /**
       * The version of the OS.
       *
       * @memberOf platform.os
       * @type string|null
       */
      'version': null,

      /**
       * Returns the OS string.
       *
       * @memberOf platform.os
       * @returns {string} The OS string.
       */
      'toString': function toString() {
        return 'null';
      }
    };

    platform.parse = parse;
    platform.toString = toStringPlatform;

    if (platform.version) {
      description.unshift(version);
    }
    if (platform.name) {
      description.unshift(name);
    }
    if (os && name && !(os == String(os).split(' ')[0] && (os == name.split(' ')[0] || product))) {
      description.push(product ? '(' + os + ')' : 'on ' + os);
    }
    if (description.length) {
      platform.description = description.join(' ');
    }
    return platform;
  }

  /*--------------------------------------------------------------------------*/

  // Export platform.
  var platform = parse();

  // Some AMD build optimizers, like r.js, check for condition patterns like the following:
  if ("function" == 'function' && _typeof(__webpack_require__(47)) == 'object' && __webpack_require__(47)) {
    // Expose platform on the global object to prevent errors when platform is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    root.platform = platform;

    // Define as an anonymous module so platform can be aliased through path mapping.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return platform;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
  else if (freeExports && freeModule) {
      // Export for CommonJS support.
      forOwn(platform, function (value, key) {
        freeExports[key] = value;
      });
    } else {
      // Export to the global object.
      root.platform = platform;
    }
}).call(undefined);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(102)(module), __webpack_require__(33)))

/***/ }),
/* 47 */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

var Nimble = __webpack_require__(6);

var TWITCH_CHANNEL_URI = __webpack_require__(16).TWITCH_CHANNEL_URI;
var TWITCH_AUTH_HELIX_URI = __webpack_require__(16).TWITCH_AUTH_HELIX_URI;
var TWITCH_USER_HELIX_URI = __webpack_require__(16).TWITCH_USER_HELIX_URI;
var TWITCH_CHAT_URI = __webpack_require__(16).TWITCH_CHAT_URI;
var TWITCH_OAUTH_REFRESH_URI = __webpack_require__(16).TWITCH_OAUTH_REFRESH_URI;

var LURKER_USER_ID = 262543169;

var query = __webpack_require__(104).parse(location.search);

// The "mount" is a single enum of the many many locations your
// extension might be rendered. This aggregates a bunch of different
// conditional values, including the anchor, the mode and the platform.
// https://dev.twitch.tv/docs/extensions/reference#client-query-parameters
var mount = "none";
if (query.platform === "mobile") {
    mount = query.platform; // "mobile"
} else if (query.popout === "true") {
    mount = "popout";
} else if (query.mode !== "viewer") {
    mount = query.mode; // "dashboard" or "config"
} else {
    mount = query.anchor; // "panel" or "video_overlay" or "component"
}

// The redesigned components still have the anchor "component".
// To report the correct mount, we need to check for the query param "legacyComponentDesign",
// which will be present and set to "true" if this is a legacy component and not present if it's a V2 component.
if (query.anchor === "component") {
    if (query.legacyComponentDesign === "true") {
        mount = "component";
    } else {
        mount = "componentV2";
    }
}

// Get the version
var version = null;
// In hosted environments, we can get the version from the URI
var versionRegex = /[\/\-]([0-9]+\.[0-9]+\.[0-9]+)\//;
var versions = versionRegex.exec(window.location.pathname);
if (versions != null) {
    version = versions[1];
}

var LANGUAGE_TO_LOCALE = {
    "en": "en-US",
    "en-gb": "en-US",
    "fr": "fr-FR",
    "it": "it-IT",
    "de": "de-DE",
    "es": "es-ES",
    "es-mx": "es-ES",
    "ja": "ja-JP",
    "ru": "ru-RU"
};

var TWITCH_ROLES = {
    broadcaster: "broadcaster",
    moderator: "moderator",
    viewer: "viewer",
    external: "external"
};

var twitch = module.exports = {
    "store": {
        "isAuthorized": false,
        "clientId": undefined,
        "viewer": {
            "userId": undefined,
            "opaqueUserId": undefined,
            "token": undefined,
            "name": undefined,
            "displayName": undefined,
            "isStreamer": undefined,
            "isAnonymous": undefined,
            "subscriptionTier": -1
        },
        "streamer": {
            "channelId": undefined,
            "broadcasterType": undefined,
            "isBitsEnabled": undefined
        },

        "extension": {
            // https://dev.twitch.tv/docs/extensions/reference#client-query-parameters
            "mode": query.mode || "none",
            "anchor": query.anchor || "none",
            "platform": query.platform || "none",
            "language": query.language || "none",
            "locale": LANGUAGE_TO_LOCALE[query.language] || "en-US",
            "state": query.state || "none",
            "mount": mount,
            "version": version
        },

        "config": {},

        // `.anchor` has been deprecated for
        // `.extension.anchor`, but kept here
        // for backward compatability.
        "anchor": query.anchor || "none"
    },
    configuration: {}
};

var cache = {};

// Nimble.twitch.retrieveTwitchChannel
// @param: <String> channelId
// @param: <String> clientId
twitch.retrieveTwitchChannel = function (channelId, clientId) {
    if (cache["retrieveTwitchChannel(" + channelId + ")"] !== undefined) {
        return Promise.resolve(cache["retrieveTwitchChannel(" + channelId + ")"]);
    }
    return window.fetch(TWITCH_CHANNEL_URI({
        "channelId": channelId
    }), {
        method: "GET",
        headers: {
            "Accept": "application/vnd.twitchtv.v5+json",
            "Client-ID": clientId || twitch.store.clientId
        }
    }).then(function (response) {
        return response.json().then(function (channel) {
            cache["retrieveTwitchChannel(" + channelId + ")"] = channel;
            return channel;
        });
    });
};

// Nimble.twitch.retrieveTwitchUser
// @param: <String> userId
// @param: <String> clientId
twitch.retrieveTwitchUser = function (userId, clientId) {
    if (cache["retrieveTwitchUserHelix(" + userId + ")"] !== undefined) {
        return Promise.resolve(cache["retrieveTwitchUserHelix(" + userId + ")"]);
    }
    return window.fetch(TWITCH_USER_HELIX_URI({}, {
        "id": userId
    }), {
        method: "GET",
        headers: {
            "Client-ID": clientId
        }
    }).then(function (resp) {
        return resp.json().then(function (response) {
            return response.data.length >= 1 ? response.data[0] : {};
        });
    });
};

// Nimble.twitch.retrieveTwitchTokenStandalone
// @param: <String> clientId
// @param: <String> secret
// @param: <String> code
// @param: <String> redirectUrl
// @description:
// Auth path for Twitch when not in an extension or the a AWS Lambda
twitch.retrieveTwitchTokenStandalone = function (clientId, secret, code, redirectUrl) {
    return window.fetch(TWITCH_AUTH_HELIX_URI({
        "clientId": clientId,
        "secret": secret,
        "code": code,
        "redirectUrl": redirectUrl
    }), {
        method: "POST"
    }).then(function (resp) {
        return resp.json();
    }).then(function (json) {
        if (json.status === undefined) {
            Nimble.twitch.store.token = json.id_token;
            Nimble.twitch.store.accessToken = json.access_token;
            Nimble.twitch.store.refreshToken = json.refresh_token;
        }
    }).catch(function (error) {
        Nimble.logger.error(error);
    });
};

// Nimble.twitch.refreshToken
// @param: <String> clientId
// @param: <String> secret
// @description:
// Refreshes the JWT
twitch.refreshToken = function (clientId, secret) {
    return window.fetch(TWITCH_OAUTH_REFRESH_URI({
        clientId: clientId,
        secret: secret,
        refreshToken: Nimble.twitch.store.refreshToken
    }), {
        method: "POST"
    }).then(function (resp) {
        return resp.json();
    }).then(function (json) {
        if (json.status === undefined) {
            Nimble.twitch.store.accessToken = json.access_token;
            Nimble.twitch.store.refreshToken = json.refresh_token;
        }
    }).catch(function (error) {
        Nimble.logger.error(error);
    });
};

// Nimble.twitch.retrieveUserData
// @param: <String> accessToken
// @description:
// Retrieves and sets the streamer channelId and name in the Nimble store
twitch.retrieveTwitchChannelStandalone = function (accessToken) {
    return window.fetch(TWITCH_USER_HELIX_URI(), {
        method: "GET",
        headers: {
            "Authorization": "Bearer " + accessToken
        }
    }).then(function (resp) {
        return resp.json();
    }).then(function (json) {
        Nimble.twitch.store.streamer.channelId = json.data[0].id;
        Nimble.twitch.store.streamer.name = json.data[0].display_name;
    }).catch(function (error) {
        Nimble.logger.error(error);
    });
};

// Nimble.twitch.configuration.set
// @param: <String> version   The version of the configuration to replace or create.
// @param: <String> content   The JSON or JSON-stringified content to set into the configuration.
// @description:
// Sets the broadcaster configuration for this given channel.
twitch.configuration.set = function (version, content) {
    version = version || "1";
    var segment = "broadcaster";
    // If content isn't already a string, try to stringify it as JSON
    if (typeof content !== "string") {
        try {
            content = JSON.stringify(content);
        } catch (e) {
            Nimble.logger.error("Failed to serialize non-string content in twitch.configuration.set: ", e);
        }
    }

    if (window.Twitch !== undefined && window.Twitch.ext !== undefined) {
        window.Twitch.ext.configuration.set(segment, version, content);
        Nimble.logger.info("Channel Configuration Updated Successfully!");
    }
};

twitch.sendChatMessage = function (message) {
    Nimble.logger.log("Nimble.twitch.sendChatMessage: Sending message ", message);
    var version = twitch.store.extension.version;
    if (version === null) {
        Nimble.logger.warn("Attempted to send chat message " + message + ", but sending chat messages in a non-hosted environment is not supported.");
        return null;
    }
    var uri = TWITCH_CHAT_URI({
        "clientId": twitch.store.clientId,
        "version": version,
        "channelId": twitch.store.streamer.channelId
    });
    return window.fetch(uri, {
        method: "POST",
        headers: {
            "Authorization": "Bearer " + twitch.store.viewer.token,
            "Client-ID": clientId,
            "Content-Type": "application/json"
        },
        body: JSON.stringify({ "text": message })
    }).then(function (resp) {
        return resp.json();
    });
};

// Because we're using a global resource, the `Twitch.ext` helper,
// the only method to protect it's use is yet another global variable.
// This array is a list of all callbacks, across the multi-verse of
// nimble instances, that will be called when `Twitch.ext` has finished.
window.onTwitchExtAuthorizedCallbacks = window.onTwitchExtAuthorizedCallbacks || [];
window.onTwitchExtContextCallbacks = window.onTwitchExtContextCallbacks || [];
window.onTwitchExtConfigCallbacks = window.onTwitchExtConfigCallbacks || [];

// Nimble.twitch.onAuthorized
// @param: <Function> callback
// @description:
// Adds your callback to the list
// that will be invoked after the
// onAuthorized method has finished.
// If the onAuthorized call has alr-
// eady triggered, your callback is
// immeadiately invoked.
twitch.onAuthorized = function (callback) {
    if (twitch.store.isAuthorized === false) {
        window.onTwitchExtAuthorizedCallbacks.push(callback);
    } else {
        callback(twitch.store);
    }
};

// Nimble.twitch.onContext
// @param: <Function> callback
// @description:
// Adds your callback to the list
// that will be invoked after the
// onContext is called.
twitch.onContext = function (callback) {
    window.onTwitchExtContextCallbacks.push(callback);
};

// Nimble.twitch.configuration.onChanged
// @param: <Function> callback
// @description:
// Adds your callback to the list that will be invoked after the configuration.onChanged method has finished.
twitch.configuration.onChanged = function (callback) {
    window.onTwitchExtConfigCallbacks.push(callback);
};

/**
 * Converts the twitch (Helix) representation of a 'User' into the representation we store.
 * @param twitchUser The object returned from a call to twitch.retrieveTwitchUserHelix
 * @return nimbleUser An object with keys matching the ones we store in Twitch.store
 */
function convertTwitchUserToNimbleUser(twitchUser) {
    var nimbleUser = {};
    nimbleUser.name = twitchUser.login;
    nimbleUser.displayName = twitchUser.display_name;
    nimbleUser.logo = twitchUser.profile_image_url;
    nimbleUser.description = twitchUser.description;
    nimbleUser.id = twitchUser.id;
    nimbleUser.offlineLogo = twitchUser.offline_image_url;
    nimbleUser.type = twitchUser.type || "user"; //"staff", "admin", "global_mod", or ""
    nimbleUser.broadcasterType = twitchUser.broadcaster_type || "vanilla";
    nimbleUser.isPartner = twitchUser.broadcasterType === "partner";
    return nimbleUser;
}

/**
 * Retrieve and convert a user from Helix API into our own representation.
 * @param userId The user ID to retreive
 * @param clientId The Client ID to use in the request.
 * @return An object suited for storage in the viewer or streamer user stores,
 *   or an empty object if an error occurs during the retrieval or parsing of the resource.
 */
function getNimbleUser(userId, clientId) {
    return twitch.retrieveTwitchUser(userId, clientId).then(function (twitchUser) {
        return convertTwitchUserToNimbleUser(twitchUser);
    }).catch(function (error) {
        Nimble.logger.error("Could not retrieve user from Twitch: ", error);
        //throw error // Eventually we might use sane defaults here... but for now, just fail completely.
    });
}

/**
 * Parse and return a Twitch JWT token's payload.
 * @param authorization An authorization object from a twitch onAuthorized callback
 * @return The parsed payload object, or empty object if the payload could not be parsed.
 */
function getAuthorizationPayload(authorization) {
    try {
        return JSON.parse(window.atob(authorization.token.split(".")[1]));
    } catch (error) {
        Nimble.logger.error("Error getting payload from authorization header.");
        throw error; // Eventually we might use sane defaults here... but for now, just fail completely.
    }
}

/**
 * Check if a user should be treated as anonymous or not.
 * @param opaqueUserId a Twitch opaque user ID.
 * @param userId (optional) The 'real' ID, checked against a sentinel 'lurker' value.
 * @returns {boolean} True if user is anonymous, false otherwise.
 */
function getAnonymity(opaqueUserId, userId) {
    userId = userId || opaqueUserId;
    if (opaqueUserId == null || opaqueUserId.length <= 0) {
        Nimble.logger.error("Cannot determine if user is anonymous, no opaque user ID present: ", opaqueUserId);
        return false;
    }
    return opaqueUserId[0] === "A" || userId === LURKER_USER_ID;
}

/**
 * Set the data from a given authorization event and it's payload into the twitch store.
 * @param authorization An authorization object from a twitch onAuthorized callback
 */
function setStoreDataFromAuthorization(authorization) {
    var payload = getAuthorizationPayload(authorization);
    twitch.store.clientId = authorization.clientId;
    twitch.store.streamer.channelId = authorization.channelId;
    twitch.store.token = authorization.token;
    twitch.store.viewer.token = authorization.token;
    twitch.store.viewer.userId = payload.first_party_user_id || payload.user_id; //use exception id, but if for some reason it ever gets revoked default back to normal
    twitch.store.viewer.opaqueUserId = payload.opaque_user_id;
    twitch.store.viewer.isStreamer = payload.role === TWITCH_ROLES.broadcaster;
    twitch.store.viewer.isModerator = payload.role === TWITCH_ROLES.moderator;
    twitch.store.viewer.isAnonymous = getAnonymity(payload.opaque_user_id, payload.user_id);
    twitch.store.viewer.isUnlinked = payload.is_unlinked;
}

/**
    Sets any other store data from twitch.ext.viewer helper on initialization
*/
function setStoreDataFromExtViewerHelper() {
    var twitchViewer = window.Twitch.ext.viewer;
    // intentionally loose equality check to see if undefined, or null which means 'not a subscriber'
    if (twitchViewer.subscriptionStatus != undefined && twitchViewer.subscriptionStatus.tier != undefined) {
        twitch.store.viewer.subscriptionTier = parseInt(twitchViewer.subscriptionStatus.tier);
    } else {
        twitch.store.viewer.subscriptionTier = -1;
    }
}

/**
 * The top-level ext.viewer onChanged handler.
 * stores any potentially changed viewer data
 */
function onExtViewerChangeHandler() {
    //currently only updates subscriber status as is one of the few things that can cause a viewer change
    setStoreDataFromExtViewerHelper();
}

/**
 * Parse and return a given Config Service JSON blob.
 * @param config The configuration string retreived from Twitch.
 * @return A parsed JSON configuration object, or an empty object if there was an error parsing the config.
 */
function parseConfig(config) {
    try {
        return JSON.parse(config);
    } catch (e) {
        Nimble.logger.error("Error parsing config as JSON. Config: " + config + ", Error: " + e);
        return {};
    }
}

/**
 * The top-level onConfigurationChanged handler.
 * Parses and stores the updated configuration, then calls any registered callbacks.
 */
function onConfigurationChangeHandler() {
    var configuration = window.Twitch.ext.configuration;
    Nimble.logger.info("Configuration Change Handler called.", window.Twitch.ext.configuration);
    // Load up any configuration from the Config Service into a store
    var developerConfig = configuration.developer ? configuration.developer.content : "{}";
    var streamerConfig = configuration.broadcaster ? configuration.broadcaster.content : "{}";
    var globalConfig = configuration.global ? configuration.global.content : "{}";
    twitch.store.config.developer = parseConfig(developerConfig);
    twitch.store.config.streamer = parseConfig(streamerConfig);
    twitch.store.config.global = parseConfig(globalConfig);
    Nimble.logger.info("Configuration Updated: ", twitch.store.config);

    // Iterate through any callbacks that have been registered
    window.onTwitchExtConfigCallbacks.forEach(function (callback) {
        callback(twitch.store);
    });
}

/**
 * The top-level onAuthorized handler.
 * Parses and stores the data in the authorization object and its payload, then calls any registered callbacks.
 * @param authorization The authorization object Twitch's onAuthorized callback passes in.
 */
function onAuthorizedHandler(authorization) {

    // Store all the data from the authorization into the common shared store accessible from Nimble.
    setStoreDataFromAuthorization(authorization);
    setStoreDataFromExtViewerHelper();

    // Set the bits enabled flag
    Nimble.logger.log("Is the bits enabled flag from twitch on?", window.Twitch.ext.features.isBitsEnabled);
    twitch.store.streamer.isBitsEnabled = window.Twitch.ext.features.isBitsEnabled || false;

    // Make calls to the Twitch Helix API to retrieve information about the viewer and broadcaster.
    getNimbleUser(authorization.channelId, authorization.clientId).then(function (nimbleStreamer) {
        twitch.store.streamer = Object.assign(twitch.store.streamer, nimbleStreamer);
    }).then(function () {
        getNimbleUser(twitch.store.viewer.userId, authorization.clientId).then(function (nimbleUser) {
            twitch.store.viewer = Object.assign(twitch.store.viewer, nimbleUser);
        }).then(function () {
            // Iterate through any callbacks that have been attached to this module.
            twitch.store.isAuthorized = true;
            window.onTwitchExtAuthorizedCallbacks.forEach(function (callback) {
                callback(twitch.store);
            });
            // This isn't explictly called on the initial page load-- do that so our extensions can setup initial configurations
            onConfigurationChangeHandler();
        });
    }).catch(function (error) {
        Nimble.logger.error("Twitch.ext.onAuthorized: ", error);
        throw error; // Eventually we might use sane defaults here... but for now, just fail completely.
    });
}

/**
 * The top-level onContext handler.
 * Parses and stores the new context data, then calls any registered callbacks.
 * @param context The context object Twitch's onContext callback passes in.
 */
function onContextHandler(context, contextChanged) {
    twitch.store.extension.arePlayerControlsVisible = context.arePlayerControlsVisible;
    twitch.store.extension.hlsLatencyBroadcaster = context.hlsLatencyBroadcaster;
    twitch.store.extension.hostingInfo = context.hostingInfo;
    twitch.store.extension.isFullScreen = context.isFullScreen;
    twitch.store.extension.isMuted = context.isMuted;
    twitch.store.extension.isPaused = context.isPaused;
    twitch.store.extension.isTheatreMode = context.isTheatreMode; // the correct spelling of theatre
    twitch.store.extension.theme = context.theme;
    twitch.store.extension.volume = twitch.store.extension.volume;

    window.onTwitchExtContextCallbacks.forEach(function (callback) {
        callback(context, contextChanged);
    });
}

/**
 * Register Nimble's top-level callback handlers (onConfigurationChanged, onAuthorized, onContext, etc.)
 */
function registerCallbacks() {
    // Register Configuration Handlers
    if (window.Twitch.ext.configuration) {
        window.Twitch.ext.configuration.onChanged(onConfigurationChangeHandler);
    } else {
        Nimble.logger.warn("No Configuration Service available...");
    }

    // Register OnAuthorized Handlers
    window.Twitch.ext.onAuthorized(onAuthorizedHandler);
    // Register OnContext handlers
    window.Twitch.ext.onContext(onContextHandler);
    // Register Helper: Viewer on change handler
    window.Twitch.ext.viewer.onChanged(onExtViewerChangeHandler);
}

/**
 * Check to ensure the extension helper is loaded and the functions Nimble relies on are in place.
 * @returns {boolean} True if the helper is loaded, false otherwise.
 */
twitch.isExtensionHelperLoaded = function () {
    return window.Twitch !== undefined && window.Twitch.ext !== undefined && window.Twitch.ext.onContext !== undefined && window.Twitch.ext.onAuthorized !== undefined;
};

/**
 * When the page loads, this will run.
 * Once the extension helper library is loaded, we can register our callbacks for context, authorization, configuration, etc.
 */
if (twitch.isExtensionHelperLoaded()) {
    registerCallbacks();
}

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


//var XHR_READYSTATE_UNSENT = 0;
//var XHR_READYSTATE_OPENED = 1;
//var XHR_READYSTATE_HEADERS_RECEIVED = 2;
//var XHR_READYSTATE_LOADING = 3;
var XHR_READYSTATE_DONE = 4;

/**
 * Fetch the contents of the given url.
 *
 * @param {String} url The url to fetch
 * @param {Object} options Configuration options:
 *        `injectScript`: instead of using XMLHttpRequest, use an injected
 *                        script tag.
 * @param {function(Error?, String?):*=} callback Callback invoked with the
 *        response value, unless `injectScript` is true; then it will be invoked
 *        with an error or `null`, depending on the result.
 */
exports.fetch = function (url, options, callback) {
	if (options.injectScript) {
		injectScriptTag(url, callback || function () {});
	} else {
		fetchViaXHR(url, callback || function () {});
	}
};

/**
 * Initiates a GET request to a given url by injecting a script tag, effectively
 * bypassing CORS for endpoints that just need to be pinged with a GET request.
 *
 * @param {String} url
 * @param {function(Error?):*} callback
 */
function injectScriptTag(url, callback) {
	var head = document.head || document.getElementsByTagName('head')[0];

	if (!head) {
		callback(new Error("No head element to append script"));
	}

	var scriptTag = document.createElement('script');
	scriptTag.onload = function () {
		callback(null);

		setTimeout(function () {
			head.removeChild(scriptTag);
		}, 0);
	};
	scriptTag.onerror = function () {
		callback(new Error("Unable to load script"));
	};

	head.appendChild(scriptTag);
	scriptTag.src = url;
}

/**
 * Fetches the contents of a given URL by sending out an XMLHttpRequest, calling
 * the provided callback function with the contents when it returns, or an error
 * if the request failed.
 *
 * @param {String} url
 * @param {function(Error?, String?):*} callback
 */
function fetchViaXHR(url, callback) {
	var xhr = new XMLHttpRequest();

	xhr.open('GET', url, true);
	xhr.onreadystatechange = function () {
		switch (xhr.readyState) {
			case XHR_READYSTATE_DONE:
				if (200 <= xhr.status && xhr.status < 300) {
					callback(null, xhr.responseText);
				} else {
					callback(new Error("XHR error: " + xhr.status + " " + url), null);
				}
				return;
		}
	};
	xhr.send();
}

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var THREE = __webpack_require__(1);

var GameStore = __webpack_require__(0);
var TychoCommon = __webpack_require__(10);
var PubSubType = TychoCommon.constants.pubSubType;
var TagColors = TychoCommon.constants.tagColors;

module.exports.TagManager = function () {
    function _class() {
        _classCallCheck(this, _class);

        this.tagComps = [];
    }

    _createClass(_class, [{
        key: "registerTagComponent",
        value: function registerTagComponent(comp) {
            this.tagComps.push(comp);

            return this.tagComps.length - 1;
        }
    }, {
        key: "deregisterTagComponent",
        value: function deregisterTagComponent(comp) {

            var index = this.tagComps.indexOf(comp);
            if (index !== -1) {
                this.tagComps.splice(index, 1);
            }
        }
    }, {
        key: "broadcastTagEvent",
        value: function broadcastTagEvent(action, userIdList, colorIndex) {
            var data = {
                action: action,
                colorIndex: colorIndex
            };
            GameStore.GameInstance.twitchWhisper(PubSubType.tag, data, userIdList);
        }
    }, {
        key: "update",
        value: function update(time, delta) {}
    }]);

    return _class;
}();

module.exports.TagComponent = function () {
    function _class2(owner, message) {
        _classCallCheck(this, _class2);

        this.owner = owner;
        this.manager = GameStore.GameInstance.tagManager;
        this.userIdList = [];

        this.colorIndex = this.manager.registerTagComponent(this);
        this.tagColor = TagColors[this.colorIndex];

        var mat = new THREE.MeshStandardMaterial({ "color": this.tagColor, "emissive": this.tagColor });
        mat.emissive.multiplyScalar(0.75);

        var boxSize = .3;
        var geo = new THREE.BoxGeometry(boxSize, boxSize, boxSize);
        this.mesh = new THREE.Mesh(geo, mat);
        this.mesh.position.set(0, -1, 1);

        if (this.owner.mesh !== undefined) {
            this.owner.mesh.add(this.mesh);
        }

        this.tag(message.userId);
    }

    _createClass(_class2, [{
        key: "destroy",
        value: function destroy() {
            this.untag();
            this.manager.deregisterTagComponent(this);
        }
    }, {
        key: "tag",
        value: function tag(userId) {

            this.mesh.visible = true;

            if (!this.userIdList.includes(userId)) {
                this.userIdList.push(userId);

                // Need to cache this and send out a broadcast with an array of only new tags
                this.manager.broadcastTagEvent("tag", [userId], this.colorIndex);
            }
        }
    }, {
        key: "untag",
        value: function untag() {

            this.mesh.visible = false;

            if (this.userIdList.length > 0) {
                this.manager.broadcastTagEvent("untag", this.userIdList, this.colorIndex);
            }

            this.userIdList = [];
        }
    }]);

    return _class2;
}();

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var THREE = __webpack_require__(1);

var GameStore = __webpack_require__(0);
var PubSubType = __webpack_require__(10).constants.pubSubType;

module.exports.BountyManager = function () {
    function _class() {
        _classCallCheck(this, _class);

        this.bountyList = [];
        this.depreciatePercentPerSecond = 0;
        this.minPointsDepreciatePerSecond = 0;
        this.updateTextInterval = 1;
    }

    _createClass(_class, [{
        key: "registerBounty",
        value: function registerBounty(comp) {
            if (!this.bountyList.includes(comp)) {
                this.bountyList.push(comp);
            }
        }
    }, {
        key: "deregisterBounty",
        value: function deregisterBounty(comp) {
            var foundIndex = this.bountyList.indexOf(comp);
            if (foundIndex !== -1) {
                this.bountyList.splice(foundIndex, 1);
            }
        }
    }, {
        key: "update",
        value: function update(time, delta) {
            this.bountyList.forEach(function (comp) {
                comp.update(time, delta);
            });
        }
    }, {
        key: "placeBounty",
        value: function placeBounty(message) {
            var data = { bountyAmount: message.bountyAmount };
            var ai = GameStore.GameInstance.waveSpawner.tryPlaceBounty(message);
            if (ai !== undefined) {
                data.action = "confirm";
                data.bountyAiIndex = message.bountyAiIndex, data.colorIndex = ai.tagComp !== undefined ? ai.tagComp.colorIndex : undefined;
            } else {
                data.action = "fail";
            }

            GameStore.GameInstance.twitchWhisper(PubSubType.bounty, data, [message.userId]);
        }
    }, {
        key: "resolveBountyBets",
        value: function resolveBountyBets(bountyComp) {
            var totalWinnings = 0;
            var loserUserIds = [];
            var winnerUserIds = [];
            this.bountyList.forEach(function (comp) {
                if (comp.owner.isActive) {
                    totalWinnings += comp.awardBounty;

                    if (bountyComp !== comp) {
                        loserUserIds.push.apply(loserUserIds, _toConsumableArray(comp.bountyData.map(function (data) {
                            return data.userId;
                        })));

                        comp.discardBounty();
                    } else {
                        winnerUserIds.push.apply(winnerUserIds, _toConsumableArray(comp.bountyData.map(function (data) {
                            return data.userId;
                        })));
                    }
                }
            });

            if (winnerUserIds.length > 0) {
                var winnings = totalWinnings / winnerUserIds.length;

                var winnerData = {
                    action: "claim",
                    bountyAmount: winnings
                };

                GameStore.GameInstance.twitchWhisper(PubSubType.bounty, winnerData, winnerUserIds);
            }

            if (loserUserIds.length > 0) {
                var loserData = {
                    action: "lose"
                };

                GameStore.GameInstance.twitchWhisper(PubSubType.bounty, loserData, loserUserIds);
            }
        }
    }]);

    return _class;
}();

module.exports.BountyComponent = function () {
    function _class2(owner) {
        _classCallCheck(this, _class2);

        this.owner = owner;
        this.bountyData = [];
        this.manager = GameStore.GameInstance.bountyManager;
        this.rawTotalBounty = 0;
        this.awardBounty = 0;
        this.ownerMesh = owner.mesh;
        this.textOffset = new THREE.Vector3(0, 2, 2);
        this.updateTextTimeRemaining = 0;

        this.manager.registerBounty(this);
    }

    _createClass(_class2, [{
        key: "hasBounty",
        value: function hasBounty() {
            return this.bountyData.length !== 0;
        }
    }, {
        key: "placeBounty",
        value: function placeBounty(message) {
            this.bountyData.push({
                userId: message.userId,
                amount: message.bountyAmount
            });

            if (this.owner.emitFloaterComp !== undefined) {
                // this.owner.emitFloaterComp.setIntensity(message.bountyAmount)
            } else {
                console.error("Failed to find float comp on owner", this.owner);
            }

            this.owner.tag(message);
        }
    }, {
        key: "claimBounty",
        value: function claimBounty() {
            this.manager.resolveBountyBets(this);

            this.discardBounty();
        }
    }, {
        key: "discardBounty",
        value: function discardBounty() {
            this.bountyData = [];

            if (this.owner.emitFloaterComp !== undefined) {
                // this.owner.emitFloaterComp.setIntensity(0)
            }

            this.owner.untag();
        }
    }, {
        key: "update",
        value: function update(time, delta) {

            if (!this.owner.isActive) {
                return;
            }

            this.rawTotalBounty = 0;

            var startedWithBounty = this.bountyData.length > 0;
            for (var i = 0; i < this.bountyData.length; ++i) {
                var data = this.bountyData[i];
                data.amount -= Math.max(this.manager.minPointsDepreciatePerSecond * delta, data.amount * (this.manager.depreciatePercentPerSecond / 100) * delta);

                if (data.amount >= 1) {
                    this.rawTotalBounty += data.amount;
                } else {
                    this.bountyData.splice(i, 1);
                    --i;
                }
            }

            var visible = this.bountyData.length !== 0;
            if (visible) {
                this.updateTextTimeRemaining -= delta;
                if (this.updateTextTimeRemaining <= 0) {
                    this.updateTextTimeRemaining = this.manager.updateTextInterval;

                    this.awardBounty = Math.floor(this.rawTotalBounty);

                    this.destroyTextMesh();

                    this.textMesh = GameStore.GameInstance.worldTextManager.spawnText(this.ownerMesh.position, this.awardBounty.toString(), GameStore.GameInstance.worldTextManager.textColor);
                }

                this.textMesh.visible = true;
                this.textMesh.position.copy(this.textOffset.clone().applyEuler(this.ownerMesh.rotation).add(this.ownerMesh.position));
            } else {
                if (this.textMesh !== undefined) {
                    this.textMesh.visible = false;
                }

                if (startedWithBounty) {
                    this.owner.untag();
                }
            }
        }
    }, {
        key: "destroyTextMesh",
        value: function destroyTextMesh() {
            if (this.textMesh !== undefined) {
                GameStore.GameInstance.scene.remove(this.textMesh);
                this.textMesh.geometry.dispose();
                this.textMesh.material.dispose();
            }
        }
    }, {
        key: "destroy",
        value: function destroy() {
            this.manager.deregisterBounty(this);

            if (this.owner.emitFloaterComp !== undefined) {
                // this.owner.emitFloaterComp.setIntensity(0)
            }

            this.destroyTextMesh();
        }
    }]);

    return _class2;
}();

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GameStore = __webpack_require__(0);
var SoundSystem = __webpack_require__(7);

module.exports.XpManager = function () {
    function _class() {
        _classCallCheck(this, _class);

        this.debugXp = 0;

        this.compList = [];

        this.level = 0; // Store for current level
        this.maxVoxelXPPerLevel = 50; // Maximum amount of xp earned from stamps per level

        this.unprocessedPlayerXp = 0; // XP earned in the level but has not been processed
        this.unprocessedStampXP = 0; // XP earned from the viewer stamps
        this.processedPlayerXp = 0; // Points processed at the end of a level
        this.remainderXp = 0; // Extra XP points remaining after cashing in for item
        this.announceLevelUp = false; // Used to flash player level when leveling
        this.announceDisplayTime = 4000; // Time in ms to highlight level up

        this.nextLevelXPAmount = 200; // Points required to earn another level
        this.nextLevelIncreaseAmount = 200; // Increase the next level cap by this amount
    }

    _createClass(_class, [{
        key: "registerXpComponent",
        value: function registerXpComponent(comp) {
            if (!this.compList.includes(comp)) {
                this.compList.push(comp);
            }
        }
    }, {
        key: "deregisterXpComponent",
        value: function deregisterXpComponent(comp) {
            var foundIndex = this.compList.indexOf(comp);
            if (foundIndex !== -1) {
                this.compList.splice(foundIndex, 1);
            }
        }
    }, {
        key: "update",
        value: function update(time, delta) {}
    }, {
        key: "awardXpComponent",
        value: function awardXpComponent(comp) {
            this.awardXp(comp.xp);

            this.deregisterXpComponent(comp);
        }
    }, {
        key: "maximumStampXPAtLevel",
        value: function maximumStampXPAtLevel() {
            return (this.level + 1) * this.maxVoxelXPPerLevel;
        }
    }, {
        key: "awardStampXp",
        value: function awardStampXp(xp) {
            var maxStampXpAtLevel = this.maximumStampXPAtLevel();
            var remainingEarnableStampXP = maxStampXpAtLevel - this.unprocessedStampXP;

            // Only give stamp XP if its less than the maximum allowed per level
            if (this.unprocessedStampXP + xp <= maxStampXpAtLevel) {
                this.unprocessedStampXP += xp;
            } else if (remainingEarnableStampXP > 0) {
                this.unprocessedStampXP += remainingEarnableStampXP;
            }
        }
    }, {
        key: "awardXp",
        value: function awardXp(xp) {
            this.unprocessedPlayerXp += xp;
        }
    }, {
        key: "processPlayerXp",
        value: function processPlayerXp() {
            var xpGained = this.unprocessedPlayerXp;
            this.processedPlayerXp += this.unprocessedPlayerXp;
            this.unprocessedPlayerXp = 0;

            return xpGained;
        }
    }, {
        key: "processStampXp",
        value: function processStampXp() {
            var xpGained = this.unprocessedStampXP;
            this.processedPlayerXp += this.unprocessedStampXP;
            this.unprocessedStampXP = 0;

            return xpGained;
        }
    }, {
        key: "consumeStampXPForItems",
        value: function consumeStampXPForItems() {
            var _this = this;

            this.remainderXp += this.processStampXp();

            var numItems = 0;
            while (this.remainderXp > this.nextLevelXPAmount) {
                numItems++;
                this.remainderXp -= this.nextLevelXPAmount;
                this.nextLevelXPAmount += this.nextLevelIncreaseAmount;

                this.announceLevelUp = true;
            }

            if (this.announceLevelUp) {
                if (!this.musicAlreadyPlayed) {
                    SoundSystem.globalMusic.playLevelUp();
                }

                setTimeout(function () {
                    _this.announceLevelUp = false;
                }, this.announceDisplayTime);
            }

            this.level += numItems;

            return numItems;
        }
    }, {
        key: "consumeXpForItems",
        value: function consumeXpForItems() {
            var _this2 = this;

            this.remainderXp += this.processPlayerXp() + this.debugXp;
            this.musicAlreadyPlayed = false;

            var numItems = 0;
            while (this.remainderXp > this.nextLevelXPAmount) {
                numItems++;
                this.remainderXp -= this.nextLevelXPAmount;
                this.nextLevelXPAmount += this.nextLevelIncreaseAmount;

                this.announceLevelUp = true;
            }

            if (this.announceLevelUp) {
                this.musicAlreadyPlayed = true;
                SoundSystem.globalMusic.playLevelUp();

                setTimeout(function () {
                    _this2.announceLevelUp = false;
                }, this.announceDisplayTime);
            }

            this.level += numItems;

            return numItems;
        }
    }, {
        key: "getTotalXp",
        value: function getTotalXp() {
            return this.unprocessedPlayerXp + this.processedPlayerXp + this.unprocessedStampXP;
        }
    }, {
        key: "getEndLevelStats",
        value: function getEndLevelStats() {
            return {
                earnedXp: this.unprocessedPlayerXp,
                totalXp: this.getTotalXp()
            };
        }
    }]);

    return _class;
}();

module.exports.XpComponent = function () {
    function _class2(owner, xp) {
        _classCallCheck(this, _class2);

        this.owner = owner;
        this.xp = xp;
        this.manager = GameStore.GameInstance.xpManager;

        this.manager.registerXpComponent(this);
    }

    _createClass(_class2, [{
        key: "awardXp",
        value: function awardXp(bountyComp) {
            this.manager.awardXpComponent(this);

            if (bountyComp !== undefined) {
                this.manager.awardXp(bountyComp.awardBounty);
            }
        }
    }]);

    return _class2;
}();

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var THREE = __webpack_require__(1);
var GameStore = __webpack_require__(0);
var AiBase = __webpack_require__(20);

var AiBotBase = function (_AiBase) {
    _inherits(AiBotBase, _AiBase);

    function AiBotBase(x, y, z, params) {
        _classCallCheck(this, AiBotBase);

        var _this = _possibleConstructorReturn(this, (AiBotBase.__proto__ || Object.getPrototypeOf(AiBotBase)).call(this));

        if (params !== undefined) {
            _this.totalBits = params.bitsBountyPot;
            _this.displayName = params.username;
            _this.botType = params.type;
        }

        _this.textOffset = new THREE.Vector3(0, 0, 3);
        _this.textCenter = 0;
        _this.createText();
        return _this;
    }

    _createClass(AiBotBase, [{
        key: "setBotTransaction",
        value: function setBotTransaction(transaction) {
            this.displayName = transaction.name;

            this.createText();
        }
    }, {
        key: "createText",
        value: function createText(colorOverride) {
            this.destroyTextMesh();

            if (this.displayName !== undefined) {
                this.textMesh = GameStore.GameInstance.worldTextManager.spawnText(new THREE.Vector3(), this.displayName, colorOverride || GameStore.GameInstance.worldTextManager.textColor);

                this.textCenter = this.textMesh.geometry.boundingSphere.radius;
            }
        }
    }, {
        key: "destroyTextMesh",
        value: function destroyTextMesh() {
            if (this.textMesh !== undefined) {
                GameStore.GameInstance.scene.remove(this.textMesh);
                this.textMesh.geometry.dispose();
                this.textMesh.material.dispose();
            }
        }
    }, {
        key: "Update",
        value: function Update(time, delta) {
            if (!this.dead) {
                if (this.botType !== undefined) {
                    var lifetime = GameStore.GameInstance.bitBotManager.getBotLifetime(this.botType);
                    if (lifetime <= 0) {
                        this.timedOut = true;
                        this.Die(true);
                    }
                }

                if (this.textMesh !== undefined) {
                    this.textMesh.position.copy(this.textOffset.clone().applyEuler(this.mesh.rotation).add(this.mesh.position));
                    this.textMesh.position.x -= this.textCenter;
                }
            }

            _get(AiBotBase.prototype.__proto__ || Object.getPrototypeOf(AiBotBase.prototype), "Update", this).call(this, time, delta);
        }
    }, {
        key: "Die",
        value: function Die(playDeathSound) {
            if (!this.dead) {
                this.destroyTextMesh();

                _get(AiBotBase.prototype.__proto__ || Object.getPrototypeOf(AiBotBase.prototype), "Die", this).call(this, playDeathSound);
            }
        }
    }, {
        key: "setActive",
        value: function setActive(isActive) {
            if (this.textMesh !== undefined) {
                this.textMesh.visible = isActive;
            }

            _get(AiBotBase.prototype.__proto__ || Object.getPrototypeOf(AiBotBase.prototype), "setActive", this).call(this, isActive);
        }
    }]);

    return AiBotBase;
}(AiBase);

module.exports = AiBotBase;

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GameStore = __webpack_require__(0);
var ConditionActions = __webpack_require__(55);
var SoundSystem = __webpack_require__(7);

// 0 - left, 1 - top, 2 - right, 3 - bottom
var roomData = [{ name: "elbow_north_east", openings: { from: 1, to: 2 } }, // 0
{ name: "elbow_south_east", openings: { from: 3, to: 2 } }, // 1
{ name: "elbow_west_north", openings: { from: 0, to: 1 } }, // 2
{ name: "elbow_west_south", openings: { from: 0, to: 3 } }, // 3
{ name: "intro1_north", openings: { to: 1 } }, // 4
{ name: "intro1_south", openings: { to: 3 } }, // 5
{ name: "intro1_west", openings: { to: 2 } }, // 6
{ name: "outro1_east", openings: { from: 2 } }, // 7
{ name: "outro1_north", openings: { from: 1 } }, // 8
{ name: "outro1_south", openings: { from: 3 } }, // 9
{ name: "straight1_north_south", openings: { from: 1, to: 3 } }, // 10
{ name: "straight1_south_north", openings: { from: 3, to: 1 } }, // 11
{ name: "straight1_west_east", openings: { from: 0, to: 2 } // 12
}];
module.exports.roomData = roomData;

var LevelManager = function () {
    function LevelManager() {
        _classCallCheck(this, LevelManager);

        // Tunnables
        this.levelRoomLength = 4;
        this.roomsAheadToSpawn = 2;
        this.numRoomsToBlockLoadAtStart = 2;
        this.blockerVoxName = "force_field";
        this.blockerGroundOffset = 15.4;
        this.blockerOffsetInward = 2; // Distance away from room edge to place blocker
        this.southSideBlockerOffset = 2; // Offset the southside blocker from room edge so it is visible
        this.southSideInvisibleBlockerOffset = 11.25; // Offset for the southside boundary so player cannot go offscreen.
        this.blockerEmissiveColor = 0xFF00FF;
        this.blockerEmissiveScalar = 8; // For brighter than 1 emissive color
        this.blockerScale = 5;
        this.blockerOpacity = 0.3;
        this.blockerCastShadow = false;
        this.doneLoading = true;
        this.blockerMeshAddedToScene = false;

        this.forceFieldStartScaleTime = 0; // Current time since spawn
        this.forceFieldScaleTime = 0.5; // Time in seconds to grow the force field on spawn

        // Game state
        this.levelNumber = 0;

        this.init();
    }

    _createClass(LevelManager, [{
        key: "init",
        value: function init() {
            this.roomMap = new Array();
            this.currentRoomIndex = -1;
            this.farthestVisitedRoomIndex = -1;
            this.restrictUpdating = true;

            if (this.preGeneratedRoomList === undefined) {
                this.roomList = [this.getFirstRoom()];
            } else {
                this.roomList.push(this.preGeneratedRoomList.shift());
            }
        }
    }, {
        key: "getFirstRoom",
        value: function getFirstRoom() {
            return {
                x: 0,
                y: 3,
                spawned: true,
                locked: false
            };
        }
    }, {
        key: "Update",
        value: function Update(player, time) {

            if (this.restrictUpdating) {
                return;
            }

            if (!GameStore.GameInstance.enableSingleLevelDebug) {
                var furthestRoom = this.roomList[Math.max(0, this.farthestVisitedRoomIndex)];
                var toDir = roomData[furthestRoom.roomType].openings.to;
                var offsetPlayerPosForIndex = { x: 0, z: 0

                    // Don't count move into farthest room until near shield
                };switch (toDir) {
                    case 1:
                        offsetPlayerPosForIndex.z += this.blockerOffsetInward + this.southSideInvisibleBlockerOffset + this.southSideBlockerOffset + 1.5;
                        break;
                    case 2:
                        offsetPlayerPosForIndex.x -= this.blockerOffsetInward + 1.5;
                        break;
                    case 3:
                        offsetPlayerPosForIndex.z -= this.blockerOffsetInward + 1.5;
                        break;
                    default:
                        break;
                }

                var playerRoomIndex = player.killedByDie ? 0 : this.getRoomIndex(player.mesh.position.x + offsetPlayerPosForIndex.x, player.mesh.position.z + offsetPlayerPosForIndex.z);

                var newFarthestIndex = Math.max(playerRoomIndex || 0, this.farthestVisitedRoomIndex);

                if (newFarthestIndex !== this.farthestVisitedRoomIndex) {
                    this.farthestVisitedRoomIndex = newFarthestIndex;

                    GameStore.GameInstance.waveSpawner.onFarthestVisitedRoomIndexChanged(newFarthestIndex);

                    GameStore.hubbleManager.sendHubbleEvent("entered_room");
                }

                // Temp, generate rooms roughly to the right
                // Generate room grid positions 2 rooms ahead
                var needSpawnRoom = false;
                if (this.roomList.length < this.levelRoomLength) {
                    if (this.farthestVisitedRoomIndex >= this.roomList.length - 1 - this.roomsAheadToSpawn) {
                        if (this.preGeneratedRoomList === undefined) {
                            this.roomList.push(this.getNextRandomRoom(this.roomList.length - 1));
                        } else {
                            this.roomList.push(this.preGeneratedRoomList.shift());
                        }

                        needSpawnRoom = this.roomList.length > 2;
                    }
                } else if (this.farthestVisitedRoomIndex >= this.levelRoomLength - 1 - this.roomsAheadToSpawn && !this.roomList[this.roomList.length - 1].spawned) {

                    // Spawn the end room
                    var newRoom = this.roomList[this.roomList.length - 1];

                    if (this.preGeneratedRoomList === undefined) {
                        var previousGridPos = this.roomList[this.roomList.length - 2];
                        newRoom.roomType = this.getRoomType(previousGridPos, newRoom, undefined);
                    }

                    newRoom.spawned = true;
                    newRoom.locked = false;
                    this.spawnRoom(newRoom, false, true);
                }

                if (needSpawnRoom) {
                    var roomIndex = this.roomList.length - 2;
                    var _newRoom = this.roomList[roomIndex];

                    if (this.preGeneratedRoomList === undefined) {
                        var _previousGridPos = this.roomList[this.roomList.length - 3];
                        var lastRoomGridPos = this.roomList[this.roomList.length - 1];
                        _newRoom.roomType = this.getRoomType(_previousGridPos, _newRoom, lastRoomGridPos);
                    }

                    _newRoom.spawned = true;
                    this.spawnRoom(_newRoom, roomIndex < this.numRoomsToBlockLoadAtStart);
                }
            }

            this.updateBlocker(time);
        }
    }, {
        key: "initBlocker",
        value: function initBlocker() {
            if (this.blockerMesh === undefined) {
                this.blockerMesh = this.initBlockerMesh();
                this.blockerMeshBack = this.initBlockerMesh();
            }

            if (!this.blockerMeshAddedToScene) {
                this.blockerMeshAddedToScene = true;
                GameStore.GameInstance.scene.add(this.blockerMesh);
                GameStore.GameInstance.scene.add(this.blockerMeshBack);
            }
        }
    }, {
        key: "initBlockerMesh",
        value: function initBlockerMesh() {
            var blockerModel = GameStore.GameInstance.voxLoader.GetModel(this.blockerVoxName);
            var blockerMesh = blockerModel.mesh;
            blockerMesh.castShadow = this.blockerCastShadow;
            blockerMesh.scale.set(this.blockerScale, this.blockerScale, this.blockerScale);
            blockerMesh.material.emissive.setHex(this.blockerEmissiveColor);

            if (this.blockerOpacity < 1) {
                blockerMesh.material.transparent = true;
                blockerMesh.material.opacity = this.blockerOpacity;
            }

            GameStore.GameInstance.scene.add(blockerMesh);

            return blockerMesh;
        }
    }, {
        key: "updateBlocker",
        value: function updateBlocker(time) {
            if (this.roomList.length === 0) {
                return;
            }

            var currentRoom = this.roomList[this.farthestVisitedRoomIndex];
            if (currentRoom.locked) {
                var toDir = roomData[currentRoom.roomType].openings.to;
                var fromDir = roomData[currentRoom.roomType].openings.from;

                var blockerPos = this.getRoomWorldPos(currentRoom.x, currentRoom.y);
                var blockerPosBack = this.getRoomWorldPos(currentRoom.x, currentRoom.y);

                var blockerRot = 0;
                var blockerRotBack = 0;

                var roomSizeX = GameStore.GameInstance.world.roomSizeX;
                var roomSizeY = GameStore.GameInstance.world.roomSizeY;

                // 0 West, 1 North, 2 East, 3 South
                switch (toDir) {
                    case 0:
                        blockerPos.y += roomSizeY / 2;
                        blockerPos.x += this.blockerOffsetInward;
                        break;
                    case 1:
                        blockerPos.x += roomSizeX / 2;
                        blockerPos.y += this.blockerOffsetInward;
                        blockerRot = Math.PI / 2;
                        break;
                    case 2:
                        blockerPos.x += roomSizeX - this.blockerOffsetInward;
                        blockerPos.y += roomSizeY / 2;
                        break;
                    case 3:
                        blockerPos.x += roomSizeX / 2;
                        blockerPos.y += roomSizeY - this.southSideBlockerOffset - this.blockerOffsetInward;
                        blockerRot = Math.PI / 2;
                        break;
                    default:
                        break;
                }

                switch (fromDir) {
                    case 0:
                        blockerPosBack.y += roomSizeY / 2;
                        blockerPosBack.x += this.blockerOffsetInward;
                        break;
                    case 1:
                        blockerPosBack.x += roomSizeX / 2;
                        blockerPosBack.y += this.blockerOffsetInward;
                        blockerRotBack = Math.PI / 2;
                        break;
                    case 2:
                        blockerPosBack.x += roomSizeX - this.blockerOffsetInward;
                        blockerPosBack.y += roomSizeY / 2;
                        break;
                    case 3:
                        blockerPosBack.x += roomSizeX / 2;
                        blockerPosBack.y += roomSizeY - this.southSideBlockerOffset - this.blockerOffsetInward;
                        blockerRotBack = Math.PI / 2;
                        break;
                    default:
                        break;
                }

                this.blockerMesh.position.set(blockerPos.x, this.blockerGroundOffset, blockerPos.y);
                this.blockerMeshBack.position.set(blockerPosBack.x, this.blockerGroundOffset, blockerPosBack.y);

                this.blockerMesh.rotation.z = blockerRot;
                this.blockerMeshBack.rotation.z = blockerRotBack;

                if (!this.blockerMeshAddedToScene) {
                    this.blockerMeshAddedToScene = true;
                    this.blockerMesh.scale.z = 0.01;
                    this.blockerMeshBack.scale.z = 0.01;
                    this.blockerMesh.scale.y = 0.01;
                    this.blockerMeshBack.scale.y = 0.01;
                    this.forceFieldStartScaleTime = time;
                    GameStore.GameInstance.scene.add(this.blockerMesh);
                    GameStore.GameInstance.scene.add(this.blockerMeshBack);
                }

                this.growForceField(time);

                // Disabled for now, iterating on 3864 VERTICES! Should be done in vertex shader
                // this.warbleForceField(time)
            } else {
                if (this.blockerMeshAddedToScene) {
                    this.blockerMeshAddedToScene = false;
                    this.forceFieldStartScaleTime = time;
                }

                this.shrinkForceField(time);
            }
        }
    }, {
        key: "getRoomIndex",
        value: function getRoomIndex(worldX, worldY) {
            var gridPos = this.getRoomGridPos(worldX, worldY);
            for (var i = this.roomList.length - 1; i >= 0; --i) {
                var roomIndex = this.roomList[i];
                if (gridPos.x === roomIndex.x && gridPos.y === roomIndex.y) {
                    return i;
                }
            }

            return undefined;
        }
    }, {
        key: "shrinkForceField",
        value: function shrinkForceField(time) {
            if (this.blockerMesh.scale.z !== 0) {
                var timeSinceSpawn = Math.max(0, Math.min(1, 1 - (time - this.forceFieldStartScaleTime) / this.forceFieldScaleTime));
                var easeInOut = timeSinceSpawn * timeSinceSpawn * (3 - 2 * timeSinceSpawn); // X^2 * (3 - 2x)

                this.blockerMesh.scale.z = this.blockerScale * easeInOut;
                this.blockerMeshBack.scale.z = this.blockerMesh.scale.z;

                if (this.blockerMesh.scale.z === 0) {
                    this.forceFieldStartScaleTime = time;
                }
            } else if (this.blockerMesh.scale.y !== 0) {
                var _timeSinceSpawn = Math.max(0, Math.min(1, 1 - (time - this.forceFieldStartScaleTime) / this.forceFieldScaleTime));
                var _easeInOut = _timeSinceSpawn * _timeSinceSpawn * (3 - 2 * _timeSinceSpawn); // X^2 * (3 - 2x)

                this.blockerMesh.scale.y = this.blockerScale * _easeInOut;
                this.blockerMeshBack.scale.y = this.blockerMesh.scale.y;

                if (this.blockerMesh.scale.y === 0) {
                    GameStore.GameInstance.scene.remove(this.blockerMesh);
                    GameStore.GameInstance.scene.remove(this.blockerMeshBack);
                }
            }
        }
    }, {
        key: "growForceField",
        value: function growForceField(time) {
            if (this.blockerMesh.scale.z !== this.blockerScale) {
                var timeSinceSpawn = Math.max(0, Math.min(1, (time - this.forceFieldStartScaleTime) / this.forceFieldScaleTime));
                var easeInOut = timeSinceSpawn * timeSinceSpawn * (3 - 2 * timeSinceSpawn); // X^2 * (3 - 2x)

                this.blockerMesh.scale.z = this.blockerScale * easeInOut;
                this.blockerMesh.scale.y = this.blockerMesh.scale.z;
                this.blockerMeshBack.scale.z = this.blockerMesh.scale.z;
                this.blockerMeshBack.scale.y = this.blockerMesh.scale.z;
            }
        }
    }, {
        key: "warbleForceField",
        value: function warbleForceField(time) {
            var vertices = this.blockerMesh.geometry.getAttribute("position");
            console.log("WARBLE: " + vertices.count);
            // this.blockerMesh.material.wireframe = true
            for (var i = 0; i < vertices.count; i++) {
                vertices.setX(i, Math.sign(vertices.getX(i)) * 0.05 + 0.15 * Math.sin(vertices.getZ(i) + time * 0.5));
            }

            this.blockerMesh.geometry.attributes.position.needsUpdate = true;
        }
    }, {
        key: "getRoomGridPos",
        value: function getRoomGridPos(worldX, worldY) {
            return {
                x: Math.floor(worldX / GameStore.GameInstance.world.roomSizeX),
                y: Math.floor(worldY / GameStore.GameInstance.world.roomSizeY)
            };
        }
    }, {
        key: "getRoomWorldPos",
        value: function getRoomWorldPos(gridX, gridY) {
            return {
                x: gridX * GameStore.GameInstance.world.roomSizeX,
                y: gridY * GameStore.GameInstance.world.roomSizeY
            };
        }
    }, {
        key: "getRoomExists",
        value: function getRoomExists(gridX, gridY) {
            return this.roomList.find(function (room) {
                return room.x === gridX && room.y === gridY;
            }) !== undefined;
        }
    }, {
        key: "getRoomCenterPos",
        value: function getRoomCenterPos(gridX, gridY) {
            return {
                x: gridX * GameStore.GameInstance.world.roomSizeX + GameStore.GameInstance.world.roomSizeX / 2,
                y: gridY * GameStore.GameInstance.world.roomSizeY + GameStore.GameInstance.world.roomSizeY / 2
            };
        }
    }, {
        key: "getRoomCenterPosFromWorld",
        value: function getRoomCenterPosFromWorld(worldX, worldY) {
            var gridPos = this.getRoomGridPos(worldX, worldY);
            return this.getRoomCenterPos(gridPos.x, gridPos.y);
        }
    }, {
        key: "getNextRandomRoom",
        value: function getNextRandomRoom(currentIndex) {
            var currentRoomGridPos = this.roomList[currentIndex];

            // Put right option in twice
            var options = [{ x: 1, y: 0 }, { x: 1, y: 0 }];
            if (!this.getRoomExists(currentRoomGridPos.x, currentRoomGridPos.y + 1)) {
                options.push({ x: 0, y: 1 });
            }
            if (!this.getRoomExists(currentRoomGridPos.x, currentRoomGridPos.y - 1)) {
                options.push({ x: 0, y: -1 });
            }

            var randomIndex = Math.min(options.length - 1, Math.floor(Math.random() * options.length));
            randomIndex = GameStore.demoManager.getDemoStartRoomIndex(currentIndex, randomIndex);

            return {
                x: currentRoomGridPos.x + options[randomIndex].x,
                y: currentRoomGridPos.y + options[randomIndex].y,
                spawned: false,
                locked: true
            };
        }
    }, {
        key: "getRoomType",
        value: function getRoomType(previousGridPos, roomGridPos, nextRoomGridPos) {

            // Handle the first room
            if (previousGridPos === undefined) {
                var _toY = nextRoomGridPos.y - roomGridPos.y;
                if (_toY < 0) {
                    return 4; // intro1_south
                } else if (_toY === 0) {
                    return 6; // intro1_west
                } else {
                        return 5; // intro1_north
                    }
            }

            // Handle the last room
            if (nextRoomGridPos === undefined) {
                var _fromY = roomGridPos.y - previousGridPos.y;
                if (_fromY < 0) {
                    return 8; // outro1_north
                } else if (_fromY === 0) {
                    return 7; // outro1_east
                } else {
                        return 9; // outro1_south
                    }
            }

            var toY = nextRoomGridPos.y - roomGridPos.y;
            var toX = nextRoomGridPos.x - roomGridPos.x;
            var fromY = roomGridPos.y - previousGridPos.y;
            if (fromY < 0) {
                if (toX === 0) {
                    return 11; // straight1_south_north
                } else {
                        return 1; // elbow_south_east
                    }
            } else if (fromY === 0) {
                if (toY < 0) {
                    return 2; // elbow_west_north
                } else if (toY === 0) {
                    return 12; // straight1_west_east
                } else {
                        return 3; // elbow_west_south
                    }
            } else {
                if (toX === 0) {
                    return 10; // straight1_north_south
                } else {
                        return 0; // elbow_north_east
                    }
            }
        }
    }, {
        key: "spawnRoom",
        value: function spawnRoom(room, blockOnLoad, skipSpawnAi) {
            if (this.roomMap[room.x] === undefined) {
                this.roomMap[room.x] = new Array();
            }

            this.roomMap[room.x][room.y] = room.roomType;

            GameStore.GameInstance.world.spawnRoomByGridIndex(room.x, room.y, room.roomType, blockOnLoad);

            if (!skipSpawnAi) {
                var waveCombatInstance = GameStore.GameInstance.waveSpawner.spawnWaveCombatInstance(room.x, room.y, this.roomList.indexOf(room));

                GameStore.GameInstance.scriptingManager.AddConditionAction(new ConditionActions.CreateUnlockRoomOnAiClear(room, waveCombatInstance));
            }
        }

        // TODO: Need real event for done loading, currently just 3s delay from start loading

    }, {
        key: "onLevelDoneLoading",
        value: function onLevelDoneLoading() {
            this.doneLoading = true;

            GameStore.demoManager.startStampNameSequence();
        }
    }, {
        key: "consumeXP",
        value: function consumeXP() {
            this.numItems = GameStore.GameInstance.xpManager.consumeXpForItems();
        }
    }, {
        key: "consumeStampXP",
        value: function consumeStampXP() {
            this.numItems += GameStore.GameInstance.xpManager.consumeStampXPForItems();

            if (this.numItems > 0) {
                var roomCenterPos = this.getRoomCenterPos(this.firstRoomForXPConsume.x, this.firstRoomForXPConsume.y);
                GameStore.GameInstance.dropManager.dropItems(roomCenterPos.x, roomCenterPos.y, this.numItems);
            }
        }
    }, {
        key: "checkReadyForUnlockMessage",
        value: function checkReadyForUnlockMessage() {
            // Show message that describes how to unlock anti-collaborative mode
            if (this.levelNumber === 3 && !GameStore.stateManager.evilUnlocked) {
                if (!GameStore.GameInstance.Tutorial.enabled) {
                    GameStore.GameInstance.Tutorial.showUnlockPreviewMessage();
                }
            }

            // Show message that anti-collaborative mode is unlocked
            // Using localStorage since evil mode unlocks before the message displays
            var hasShownUnlockMessage = (typeof Storage === "undefined" ? "undefined" : _typeof(Storage)) !== undefined && localStorage.getItem("tycho_hasShownUnlockMessage") === "true";
            if (this.levelNumber === 11 && !hasShownUnlockMessage) {
                if (!GameStore.GameInstance.Tutorial.enabled) {
                    GameStore.GameInstance.Tutorial.showUnlockMessage();
                }
            }
        }
    }, {
        key: "spawnStartingRoom",
        value: function spawnStartingRoom() {
            this.doneLoading = false;

            this.init();
            this.initBlocker();

            var firstRoom = this.roomList[0];
            if (GameStore.GameInstance.enableSingleLevelDebug) {
                var roomType = GameStore.GameInstance.singleLevelIndex;
                firstRoom.roomType = roomType;
                this.spawnRoom(firstRoom, true, true);
            } else {
                if (this.preGeneratedRoomList === undefined) {
                    this.roomList.push(this.getNextRandomRoom(0));

                    // Should have 2 rooms in roomList by now
                    var _roomType = this.getRoomType(undefined, firstRoom, this.roomList[1], true);
                    firstRoom.roomType = _roomType;
                }

                this.spawnRoom(firstRoom, true, true);
            }

            this.firstRoomForXPConsume = firstRoom;

            GameStore.GameInstance.scriptingManager.AddConditionAction(new ConditionActions.CreateGoalOnPlayerReachEnd());
            GameStore.GameInstance.scriptingManager.AddConditionAction(new ConditionActions.CreatePlayerTouchGoal());

            if (this.levelNumber === 0) {
                GameStore.gamestateManager.onStartLevel();

                var tutorialEnabled = (typeof Storage === "undefined" ? "undefined" : _typeof(Storage)) !== undefined && !(localStorage.getItem("tycho_tutorialEnabled") === "false");
                if (!tutorialEnabled) {
                    SoundSystem.globalMusic.endIdleMusic();
                }

                this.consumeXP();
                this.consumeStampXP();
            }

            this.restrictUpdating = false;
            ++this.levelNumber;

            // TODO: Temp event for done loading
            setTimeout(this.onLevelDoneLoading.bind(this), 3000);
        }
    }, {
        key: "getRoomBounds",
        value: function getRoomBounds(x, y) {
            return {
                left: x * GameStore.GameInstance.world.roomSizeX,
                top: y * GameStore.GameInstance.world.roomSizeY,
                right: (x + 1) * GameStore.GameInstance.world.roomSizeX,
                bottom: (y + 1) * GameStore.GameInstance.world.roomSizeY
            };
        }
    }, {
        key: "getHasWallinDirection",
        value: function getHasWallinDirection(direction, locked, roomOpenings) {
            return (locked || roomOpenings.from !== direction) && (locked || roomOpenings.to !== undefined && roomOpenings.to !== direction);
        }
    }, {
        key: "getRoomCollisionBounds",
        value: function getRoomCollisionBounds(room) {
            var roomOpenings = roomData[room.roomType].openings;
            var roomSizeX = GameStore.GameInstance.world.roomSizeX;
            var roomSizeY = GameStore.GameInstance.world.roomSizeY;

            // Adding +1 to right & left wall to push boundary in
            return {
                left: this.getHasWallinDirection(0, room.locked, roomOpenings) ? room.x * roomSizeX + this.blockerOffsetInward + 1 : -Infinity,
                top: this.getHasWallinDirection(1, room.locked, roomOpenings) ? room.y * roomSizeY + this.blockerOffsetInward : -Infinity,
                right: this.getHasWallinDirection(2, room.locked, roomOpenings) ? (room.x + 1) * roomSizeX - (this.blockerOffsetInward + 1) : Infinity,
                bottom: this.getHasWallinDirection(3, room.locked, roomOpenings) ? (room.y + 1) * roomSizeY - (this.blockerOffsetInward + this.southSideBlockerOffset + this.southSideInvisibleBlockerOffset) : Infinity
            };
        }
    }, {
        key: "checkRoomCollision",
        value: function checkRoomCollision(startPos, destPos, collisionBox, allowOOB) {
            // Check if destPos is outside the bounds and return the closest this can move to the collision
            // Otherwise, return destination pos

            // allowOOB allows positions out of bounds if the start position is already OOB & player isn't touching shield
            if (allowOOB === undefined) {
                allowOOB = false;
            }

            var roomIndex = this.getRoomIndex(startPos.x, startPos.z);
            if (roomIndex !== undefined) {
                var room = this.roomList[roomIndex];
                if (room !== undefined) {
                    var roomCollision = this.getRoomCollisionBounds(room);

                    var retPos = destPos.clone();
                    var collided = false;
                    var destMinX = destPos.x + collisionBox.min.x;
                    var destMaxX = destPos.x + collisionBox.max.x;
                    if (destMinX < roomCollision.left) {
                        collided = true;
                        retPos.x = allowOOB && startPos.x + collisionBox.min.x < roomCollision.left ? destPos.x : roomCollision.left - collisionBox.min.x;
                    } else if (destMaxX > roomCollision.right) {
                        collided = true;
                        retPos.x = allowOOB && startPos.x - collisionBox.max.x > roomCollision.right ? destPos.x : roomCollision.right - collisionBox.max.x;
                    }

                    var destMinZ = destPos.z + collisionBox.min.z;
                    var destMaxZ = destPos.z + collisionBox.max.z;
                    if (destMinZ < roomCollision.top) {
                        collided = true;
                        retPos.z = allowOOB && startPos.z + collisionBox.min.z < roomCollision.top ? destPos.z : roomCollision.top - collisionBox.min.z;
                    } else if (destMaxZ > roomCollision.bottom) {
                        collided = true;
                        retPos.z = allowOOB && startPos.z - collisionBox.max.z > roomCollision.bottom ? destPos.z : roomCollision.bottom - collisionBox.max.z;
                    }

                    var newPos = collided ? retPos : destPos;
                    return this.getRoomIndex(newPos.x, newPos.z) !== undefined ? newPos : startPos;
                } else {
                    return startPos;
                }
            }

            return startPos;
        }
    }, {
        key: "preGenerateRooms",
        value: function preGenerateRooms() {
            this.init();
            this.roomList = [this.getFirstRoom()];

            for (var i = 1; i < this.levelRoomLength; ++i) {
                this.roomList.push(this.getNextRandomRoom(this.roomList.length - 1));
            }

            var usedRoomTypes = [];
            for (var _i = 0; _i < this.levelRoomLength; ++_i) {
                var prevRoom = _i > 0 ? this.roomList[_i - 1] : undefined;
                var curRoom = this.roomList[_i];
                var nextRoom = _i < this.levelRoomLength - 1 ? this.roomList[_i + 1] : undefined;

                var roomType = this.getRoomType(prevRoom, curRoom, nextRoom);
                this.roomList[_i].roomType = roomType;

                if (!usedRoomTypes.includes(roomType)) {
                    usedRoomTypes.push(roomType);
                }
            }

            this.preGeneratedRoomList = this.roomList;
            this.roomList = [];

            return usedRoomTypes;
        }
    }, {
        key: "getLocationString",
        value: function getLocationString() {
            return this.levelNumber + "-" + (this.farthestVisitedRoomIndex + 1);
        }
    }, {
        key: "getLocationNumber",
        value: function getLocationNumber() {
            return this.levelNumber + (this.farthestVisitedRoomIndex + 1) / 10;
        }
    }]);

    return LevelManager;
}();

module.exports.LevelManager = LevelManager;

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GameStore = __webpack_require__(0);
var AiManager = __webpack_require__(12);
var SoundSystem = __webpack_require__(7);

var ConditionAction = function () {
    function ConditionAction() {
        _classCallCheck(this, ConditionAction);

        this.active = true;
        this.conditions = [];
        this.actions = [];
    }

    _createClass(ConditionAction, [{
        key: "Update",
        value: function Update(time, delta) {
            if (this.active) {
                if (this.EvaluateConditions(time, delta)) {
                    this.RunActions();

                    this.active = false;

                    return true;
                }
            }

            return false;
        }
    }, {
        key: "EvaluateConditions",
        value: function EvaluateConditions(time, delta) {
            var allPass = true;
            this.conditions.every(function (condition) {
                if (condition !== undefined && condition.check !== undefined && !condition.check(time, delta)) {
                    allPass = false;
                    return false;
                }
            });

            return allPass;
        }
    }, {
        key: "RunActions",
        value: function RunActions() {
            this.actions.forEach(function (action) {
                if (action !== undefined) {
                    action();
                }
            });
        }
    }]);

    return ConditionAction;
}();

module.exports.ConditionAction = ConditionAction;

function CreateRestartOnPlayerDeath() {
    var newCA = new ConditionAction();

    var playerDeathCondition = {
        check: function check() {
            return GameStore.GameInstance.player !== undefined && GameStore.GameInstance.player.dead;
        }
    };

    newCA.conditions.push(playerDeathCondition);
    newCA.actions.push(GameStore.GameInstance.ReSpawnPlayer);

    return newCA;
}
module.exports.CreateRestartOnPlayerDeath = CreateRestartOnPlayerDeath;

function CreateGoalOnPlayerReachEnd() {
    var newCA = new ConditionAction();

    var playerDestinationCondition = {
        check: function check() {
            return GameStore.GameInstance.levelManager.farthestVisitedRoomIndex >= GameStore.GameInstance.levelManager.levelRoomLength - 1;
        }
    };

    newCA.conditions.push(playerDestinationCondition);
    newCA.actions.push(function () {

        var lastRoom = GameStore.GameInstance.levelManager.roomList[GameStore.GameInstance.levelManager.levelRoomLength - 1];
        if (lastRoom) {
            var lastRoomCenterPos = GameStore.GameInstance.levelManager.getRoomCenterPos(lastRoom.x, lastRoom.y);
            var spawnHeight = 30;
            SoundSystem.globalMusic.endCombatMusic();
            GameStore.GameInstance.aiManager.spawnAi(AiManager.EAiType.Beacon, lastRoomCenterPos.x, spawnHeight, lastRoomCenterPos.y);
        }
    });

    return newCA;
}
module.exports.CreateGoalOnPlayerReachEnd = CreateGoalOnPlayerReachEnd;

function CreatePlayerTouchGoal() {
    var newCA = new ConditionAction();

    var playerDestinationCondition = {
        check: function check() {
            if (GameStore.GameInstance.player) {
                var playerPos = GameStore.GameInstance.player.mesh.position;
                var playerBox = GameStore.GameInstance.player.attachedBox;

                return GameStore.GameInstance.aiManager.aiList.findIndex(function (ai) {
                    if (ai.type === AiManager.EAiType.Beacon) {
                        var goalSize = 2;
                        if (playerPos.clone().sub(ai.mesh.position).length() < goalSize && !playerBox.canPickup) {
                            newCA.touchedGoalAi = ai;
                            playerBox.delivered = true;
                            playerBox.Drop(GameStore.GameInstance.player.direction);
                            return true;
                        }
                    }
                }) !== -1;
            }

            return false;
        }
    };

    newCA.conditions.push(playerDestinationCondition);
    newCA.actions.push(function () {
        newCA.touchedGoalAi.Die(true);

        // Turn on victory screen
        GameStore.GameInstance.showLevelFinished = true;

        GameStore.gamestateManager.onFinishLevel();

        setTimeout(function () {
            GameStore.GameInstance.restartLevel();
        }, 2250);
    });

    return newCA;
}
module.exports.CreatePlayerTouchGoal = CreatePlayerTouchGoal;

function CreateUnlockRoomOnAiClear(room, waveCombatInstance) {
    var newCA = new ConditionAction();

    var roomClearCondition = {
        waveCombatInstance: waveCombatInstance,
        check: function check() {
            return this.waveCombatInstance === undefined || this.waveCombatInstance.currentWave >= this.waveCombatInstance.numWaves;
        }
    };

    newCA.conditions.push(roomClearCondition);
    newCA.actions.push(function () {
        room.locked = false;
    });

    return newCA;
}
module.exports.CreateUnlockRoomOnAiClear = CreateUnlockRoomOnAiClear;

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "c1a78c3d8c9b4b152eab0c7e80d4fa80.png";

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "e2fc273d950ddc4c65ec20b696fe5868.png";

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "7bfeaa420a1a37441e2be450720030f7.png";

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "86b0e9e454f520356b0ad40c7e2b97ff.png";

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "73e5672b47029bdda5765a138a62fc0a.png";

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "6da45ab1e79d3b80f6947d72c55109a0.png";

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "c628c69f776260203cf563d460d1228b.png";

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "786ec2da8b4c3aef2ee23717330eb2dc.png";

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "1fadef93966aedc6c49d901970a4f230.png";

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "9b6ca70c960752546c749136c4453247.png";

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "cbe8113f62354449fa241224ba339959.png";

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.
var React = __webpack_require__(5);
var PlayerStore = __webpack_require__(17);
var StringStore = __webpack_require__(11);

__webpack_require__(247);

module.exports = function (_React$Component) {
    _inherits(_class, _React$Component);

    function _class() {
        _classCallCheck(this, _class);

        return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
    }

    _createClass(_class, [{
        key: "render",
        value: function render() {
            var style = {
                animationName: PlayerStore.showHud ? "webcamViewContainerAnim" : ""
            };

            return React.createElement(
                "div",
                { className: "webcamViewContainer", style: style },
                React.createElement(
                    "div",
                    { className: "webCamText" },
                    "Recommended Webcam Position"
                )
            );
        }
    }]);

    return _class;
}(React.Component);

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.

var React = __webpack_require__(5);
var CollapsableWindow = __webpack_require__(30);
var DrawCollapsableWindow = __webpack_require__(31);
var GameStore = __webpack_require__(0);
var GenericButton = __webpack_require__(29);
var DrawGenericButton = __webpack_require__(37);
var StringStore = __webpack_require__(11);

__webpack_require__(254);
__webpack_require__(256);

module.exports = function (_React$Component) {
    _inherits(OptionsMenuView, _React$Component);

    function OptionsMenuView() {
        _classCallCheck(this, OptionsMenuView);

        var _this = _possibleConstructorReturn(this, (OptionsMenuView.__proto__ || Object.getPrototypeOf(OptionsMenuView)).call(this));

        _this.OptionsMenu = GameStore.optionsMenu;
        _this.OptionsMenu.view = _this;

        _this.OptionsMenuCW = new CollapsableWindow(25.5, 35, 100, 55, OptionsMenuContent, undefined, undefined, undefined, undefined, false, true, undefined, undefined, undefined, undefined, undefined, _this.OptionsMenu.closeClick.bind(_this.OptionsMenu), undefined, undefined, undefined, undefined, undefined, undefined, 2);

        // bind the resize event
        _this.resizeFuncOM = function () {
            _this.resizeOptionMainMenu();
        };

        window.addEventListener("resize", _this.resizeFuncOM);
        return _this;
    }

    _createClass(OptionsMenuView, [{
        key: "resizeOptionMainMenu",
        value: function resizeOptionMainMenu() {
            this.OptionsMenu.reRender = true;
        }
    }, {
        key: "render",
        value: function render() {
            if (this.OptionsMenu.enabled) {

                if (this.OptionsMenu.reRender || this.OptionsMenuCW.expanding) {
                    if (!this.OptionsMenuCW.expanding && this.OptionsMenu.reRender) {
                        this.OptionsMenu.reRender = false;
                    }

                    this.optionsMenuRender = React.createElement(DrawCollapsableWindow, { cw: this.OptionsMenuCW });
                }

                return this.optionsMenuRender;
            } else {
                return React.createElement("div", null);
            }
        }
    }]);

    return OptionsMenuView;
}(React.Component);

var OptionsMenuButtonContent = function (_React$Component2) {
    _inherits(OptionsMenuButtonContent, _React$Component2);

    function OptionsMenuButtonContent() {
        _classCallCheck(this, OptionsMenuButtonContent);

        return _possibleConstructorReturn(this, (OptionsMenuButtonContent.__proto__ || Object.getPrototypeOf(OptionsMenuButtonContent)).apply(this, arguments));
    }

    _createClass(OptionsMenuButtonContent, [{
        key: "render",
        value: function render() {
            return React.createElement(
                "div",
                { className: "optionsButtonContent" },
                this.props.text
            );
        }
    }]);

    return OptionsMenuButtonContent;
}(React.Component);

var CheckListButtonContent = function (_React$Component3) {
    _inherits(CheckListButtonContent, _React$Component3);

    function CheckListButtonContent() {
        _classCallCheck(this, CheckListButtonContent);

        return _possibleConstructorReturn(this, (CheckListButtonContent.__proto__ || Object.getPrototypeOf(CheckListButtonContent)).apply(this, arguments));
    }

    _createClass(CheckListButtonContent, [{
        key: "render",
        value: function render() {
            return React.createElement(
                "div",
                { className: "feedbackReturnButtonContent" },
                this.props.text
            );
        }
    }]);

    return CheckListButtonContent;
}(React.Component);

var FeedbackContent = function (_React$Component4) {
    _inherits(FeedbackContent, _React$Component4);

    function FeedbackContent() {
        _classCallCheck(this, FeedbackContent);

        var _this4 = _possibleConstructorReturn(this, (FeedbackContent.__proto__ || Object.getPrototypeOf(FeedbackContent)).call(this));

        _this4.OptionsMenu = GameStore.optionsMenu;

        _this4.returnMMButton = new GenericButton(13, 6, CheckListButtonContent, "RETURN", false, undefined, undefined, undefined, _this4.OptionsMenu.feedbackCloseClick.bind(_this4.OptionsMenu), "checklistButton", undefined, undefined, false, true);
        return _this4;
    }

    _createClass(FeedbackContent, [{
        key: "onMouseDown",
        value: function onMouseDown() {
            if (GameStore.GameInstance) {
                GameStore.GameInstance.onHUDElement = true;
            }
        }
    }, {
        key: "onMouseLeave",
        value: function onMouseLeave() {
            if (GameStore.GameInstance) {
                GameStore.GameInstance.onHUDElement = false;
            }
        }
    }, {
        key: "onMouseUp",
        value: function onMouseUp() {
            if (GameStore.GameInstance) {
                GameStore.GameInstance.onHUDElement = false;
            }
        }
    }, {
        key: "render",
        value: function render() {
            var useDarkTheme = this.OptionsMenu.view.OptionsMenuCW.useDarkTheme;

            return React.createElement(
                "div",
                { className: useDarkTheme ? "optionsMenuContent optionsMenuContentDark" : "optionsMenuContent optionsMenuContentLight",
                    onMouseDown: this.onMouseDown.bind(this),
                    onMouseUp: this.onMouseUp.bind(this),
                    onMouseLeave: this.onMouseLeave.bind(this) },
                React.createElement(
                    "div",
                    { className: useDarkTheme ? "optionsMenuTitle optionsMenuContentDark" : "optionsMenuTitle" },
                    "FEEDBACK"
                ),
                React.createElement(
                    "div",
                    { className: "optionsMenuFill" },
                    React.createElement(
                        "div",
                        { className: "optionsMenuOption", style: { textAlign: "center" } },
                        StringStore.UI.OPTION_RATE
                    ),
                    React.createElement(
                        "div",
                        { className: "stars", onChange: this.OptionsMenu.starClick.bind(this.OptionsMenu) },
                        React.createElement("input", { className: "star star-5", id: "star-5", type: "radio", name: "star", value: "5" }),
                        React.createElement("label", { className: "star star-5", htmlFor: "star-5" }),
                        React.createElement("input", { className: "star star-4", id: "star-4", type: "radio", name: "star", value: "4" }),
                        React.createElement("label", { className: "star star-4", htmlFor: "star-4" }),
                        React.createElement("input", { className: "star star-3", id: "star-3", type: "radio", name: "star", value: "3" }),
                        React.createElement("label", { className: "star star-3", htmlFor: "star-3" }),
                        React.createElement("input", { className: "star star-2", id: "star-2", type: "radio", name: "star", value: "2" }),
                        React.createElement("label", { className: "star star-2", htmlFor: "star-2" }),
                        React.createElement("input", { className: "star star-1", id: "star-1", type: "radio", name: "star", value: "1" }),
                        React.createElement("label", { className: "star star-1", htmlFor: "star-1" })
                    ),
                    React.createElement("br", null),
                    React.createElement(
                        "div",
                        { className: "optionsMenuOption feedbackLink" },
                        React.createElement(
                            "a",
                            { href: "https://amazongamestudios.au1.qualtrics.com/jfe/form/SV_ezhBF34nS5AjlL7", target: "_blank" },
                            "Take Survey"
                        )
                    ),
                    React.createElement(
                        "div",
                        { className: "feedbackReturnButtonContainer" },
                        React.createElement(DrawGenericButton, { gb: this.returnMMButton })
                    )
                )
            );
        }
    }]);

    return FeedbackContent;
}(React.Component);

var OptionsMenuContent = function (_React$Component5) {
    _inherits(OptionsMenuContent, _React$Component5);

    function OptionsMenuContent() {
        _classCallCheck(this, OptionsMenuContent);

        var _this5 = _possibleConstructorReturn(this, (OptionsMenuContent.__proto__ || Object.getPrototypeOf(OptionsMenuContent)).call(this));

        _this5.OptionsMenu = GameStore.optionsMenu;

        // For Resolution
        _this5.state = { value: _this5.OptionsMenu.selectedResolution };
        _this5.handleResolutionChange = _this5.handleResolutionChange.bind(_this5);

        _this5.resolutionOptions = [];
        for (var i = 1; i < _this5.OptionsMenu.resolutions.length; i++) {
            _this5.resolutionOptions.push(React.createElement(
                "option",
                { key: i, value: i },
                _this5.OptionsMenu.resolutions[i].width + " x " + _this5.OptionsMenu.resolutions[i].height
            ));
        }
        return _this5;
    }

    _createClass(OptionsMenuContent, [{
        key: "musicVolumeChange",
        value: function musicVolumeChange(event) {
            this.OptionsMenu.musicVolumeChange(event);
        }
    }, {
        key: "tutorialClick",
        value: function tutorialClick() {
            this.OptionsMenu.tutorialClick();
        }
    }, {
        key: "fpsClick",
        value: function fpsClick() {
            this.OptionsMenu.fpsClick();
        }
    }, {
        key: "handleResolutionChange",
        value: function handleResolutionChange(event) {
            this.state.value = event.target.value;
            this.OptionsMenu.selectedResolution = event.target.value;
            this.OptionsMenu.setResolution();
        }
    }, {
        key: "renderFeedbackButton",
        value: function renderFeedbackButton() {
            var _this6 = this;

            var src = __webpack_require__(59);

            return React.createElement(
                "div",
                { className: "feedbackButtonContainer" },
                React.createElement("img", { className: "feedbackButton", onClick: function onClick() {
                        _this6.OptionsMenu.feedbackClick();
                    }, src: src })
            );
        }
    }, {
        key: "setCoinMineTime",
        value: function setCoinMineTime(seconds) {
            if (seconds !== undefined) {
                seconds = Math.min(100000, Math.max(0.5, seconds)); // Limit between 0.5 and 100,000 seconds
                this.OptionsMenu.coinMineTimeMS = seconds * 1000;
                this.OptionsMenu.displayMineTime = seconds;
            } else {
                this.OptionsMenu.setDisplayMineTime();
            }

            this.OptionsMenu.reRender = true;
        }
    }, {
        key: "onCoinMineLoseFocus",
        value: function onCoinMineLoseFocus(event) {
            this.setCoinMineTime(parseFloat(event.target.value));
        }
    }, {
        key: "onCoinMineEnter",
        value: function onCoinMineEnter(event) {
            if (event.keyCode === 13) {
                this.setCoinMineTime(parseFloat(event.target.value));
            }
        }
    }, {
        key: "onCoinMineTimeChanged",
        value: function onCoinMineTimeChanged(event) {
            this.OptionsMenu.displayMineTime = event.target.value;
            this.OptionsMenu.reRender = true;
        }
    }, {
        key: "onMouseDown",
        value: function onMouseDown() {
            if (GameStore.GameInstance) {
                GameStore.GameInstance.onHUDElement = true;
            }
        }
    }, {
        key: "onMouseLeave",
        value: function onMouseLeave() {
            if (GameStore.GameInstance) {
                GameStore.GameInstance.onHUDElement = false;
            }
        }
    }, {
        key: "onMouseUp",
        value: function onMouseUp() {
            if (GameStore.GameInstance) {
                GameStore.GameInstance.onHUDElement = false;
            }
        }
    }, {
        key: "render",
        value: function render() {
            var _this7 = this;

            var styleStampAccessHeader = {
                textAlign: "center",
                width: "100%",
                marginBottom: "0px",
                letterSpacing: "1px"
            };

            var styleStampAccessSubtitle = {
                fontSize: "13px",
                lineHeight: "16px",
                marginLeft: "67px",
                marginTop: "2px",
                marginBottom: "6px"
            };

            var styleStampAccessCheckbox = {
                marginRight: "72px",
                marginTop: "0px"
            };

            var stylePPHeader = {
                textAlign: "center",
                width: "100%",
                marginBottom: "0px",
                letterSpacing: "0.5px"
            };

            var stylePPSubtitle = {
                fontSize: "13px",
                lineHeight: "16px",
                marginLeft: "67px",
                marginTop: "2px",
                marginBottom: "6px"
            };

            var stylePPSubtitleSmall = {
                fontSize: "13px",
                lineHeight: "16px",
                marginLeft: "67px",
                marginTop: "2px",
                marginBottom: "6px",
                marginRight: "60px"
            };

            var stylePPCheckbox = {
                marginRight: "72px",
                marginTop: "0px"
            };

            var useDarkTheme = this.OptionsMenu.view.OptionsMenuCW.useDarkTheme;

            if (this.OptionsMenu.feedbackEnabled) {
                return React.createElement(FeedbackContent, null);
            } else {
                return React.createElement(
                    "div",
                    { className: useDarkTheme ? "optionsMenuContent optionsMenuContentDark" : "optionsMenuContent optionsMenuContentLight",
                        onMouseDown: this.onMouseDown.bind(this),
                        onMouseUp: this.onMouseUp.bind(this),
                        onMouseLeave: this.onMouseLeave.bind(this) },
                    React.createElement(
                        "div",
                        { className: useDarkTheme ? "optionsMenuTitle optionsMenuContentDark" : "optionsMenuTitle" },
                        StringStore.UI.OPTIONS_MENU_TITLE
                    ),
                    React.createElement(
                        "div",
                        { className: "optionsMenuLeftHalf" },
                        React.createElement(
                            "div",
                            { className: "optionsMenuOption", tooltip: StringStore.TOOLTIP.OPTION_MUSIC, "tooltip-text-size": "pixel", "tooltip-position": "bottom" },
                            React.createElement(
                                "div",
                                { className: "optionsMenuOptionText" },
                                StringStore.UI.OPTION_MUSIC
                            ),
                            React.createElement(
                                "div",
                                { className: "optionsMenuRangeContainer" },
                                React.createElement("input", {
                                    className: "optionsMenuRangeInput",
                                    type: "range",
                                    min: "0",
                                    max: "100",
                                    value: this.OptionsMenu.musicVolume * 100,
                                    onChange: function onChange(event) {
                                        _this7.musicVolumeChange(event);
                                    } })
                            )
                        ),
                        React.createElement(
                            "div",
                            { className: "optionsMenuOption", tooltip: StringStore.TOOLTIP.OPTION_MINE_TIME, "tooltip-text-size": "pixel", "tooltip-position": "bottom" },
                            React.createElement(
                                "div",
                                { className: "optionsMenuOptionText" },
                                StringStore.UI.OPTION_MINE_TIME
                            ),
                            React.createElement(
                                "div",
                                { className: "optionsMenuTextInput" },
                                React.createElement("input", { className: "mineTimeTextInput",
                                    onKeyDown: function onKeyDown(event) {
                                        return _this7.onCoinMineEnter(event);
                                    },
                                    onBlur: function onBlur(event) {
                                        return _this7.onCoinMineLoseFocus(event);
                                    },
                                    onChange: function onChange(event) {
                                        return _this7.onCoinMineTimeChanged(event);
                                    },
                                    value: this.OptionsMenu.displayMineTime })
                            )
                        ),
                        React.createElement(
                            "div",
                            { className: "optionsMenuOption", tooltip: StringStore.TOOLTIP.OPTION_CHOOSE_PLAYER_MODEL, "tooltip-text-size": "pixel", "tooltip-position": "bottom" },
                            React.createElement(
                                "div",
                                { className: "optionsMenuOptionText" },
                                StringStore.UI.OPTION_CHOOSE_PLAYER_MODEL
                            ),
                            React.createElement("input", { type: "file", accept: ".vox", onChange: function onChange(e) {
                                    return GameStore.ugcManager.loadMesh(e.target.files[0]);
                                } })
                        ),
                        React.createElement(
                            "div",
                            { className: "optionsMenuOption", tooltip: StringStore.TOOLTIP.OPTION_ACCESS, "tooltip-text-size": "pixel", "tooltip-position": "bottom" },
                            React.createElement(
                                "div",
                                { className: "optionsMenuOptionText", style: styleStampAccessHeader },
                                StringStore.UI.OPTION_ACCESS
                            ),
                            React.createElement(
                                "div",
                                { className: "optionsMenuOptionText", style: styleStampAccessSubtitle },
                                StringStore.UI.OPTION_ANON
                            ),
                            React.createElement(
                                "label",
                                { className: "optionsMenuCheckboxContainer", style: styleStampAccessCheckbox },
                                React.createElement("input", {
                                    type: "checkbox",
                                    name: "menuOptionCheckbox",
                                    checked: this.OptionsMenu.access.anonymous,
                                    onChange: function onChange() {
                                        _this7.OptionsMenu.accessClick("anonymous");
                                    } }),
                                React.createElement("span", { className: "optionCheckmark" })
                            ),
                            React.createElement(
                                "div",
                                { className: "optionsMenuOptionText", style: styleStampAccessSubtitle },
                                StringStore.UI.OPTION_LOGGED_IN
                            ),
                            React.createElement(
                                "label",
                                { className: "optionsMenuCheckboxContainer", style: styleStampAccessCheckbox },
                                React.createElement("input", {
                                    type: "checkbox",
                                    name: "menuOptionCheckbox",
                                    checked: this.OptionsMenu.access.vanilla,
                                    onChange: function onChange() {
                                        _this7.OptionsMenu.accessClick("vanilla");
                                    } }),
                                React.createElement("span", { className: "optionCheckmark" })
                            ),
                            React.createElement(
                                "div",
                                { className: "optionsMenuOptionText", style: styleStampAccessSubtitle },
                                StringStore.UI.OPTION_FOLLOWER
                            ),
                            React.createElement(
                                "label",
                                { className: "optionsMenuCheckboxContainer", style: styleStampAccessCheckbox },
                                React.createElement("input", {
                                    type: "checkbox",
                                    name: "menuOptionCheckbox",
                                    checked: this.OptionsMenu.access.follower,
                                    onChange: function onChange() {
                                        _this7.OptionsMenu.accessClick("follower");
                                    } }),
                                React.createElement("span", { className: "optionCheckmark" })
                            ),
                            React.createElement(
                                "div",
                                { className: "optionsMenuOptionText", style: styleStampAccessSubtitle },
                                StringStore.UI.OPTION_SUB
                            ),
                            React.createElement(
                                "label",
                                { className: "optionsMenuCheckboxContainer", style: styleStampAccessCheckbox },
                                React.createElement("input", {
                                    type: "checkbox",
                                    name: "menuOptionCheckbox",
                                    checked: this.OptionsMenu.access.subscriber,
                                    onChange: function onChange() {
                                        _this7.OptionsMenu.accessClick("subscriber");
                                    } }),
                                React.createElement("span", { className: "optionCheckmark" })
                            ),
                            React.createElement(
                                "div",
                                { className: "optionsMenuOptionText", style: styleStampAccessSubtitle },
                                StringStore.UI.OPTION_MOD
                            ),
                            React.createElement(
                                "label",
                                { className: "optionsMenuCheckboxContainer", style: styleStampAccessCheckbox },
                                React.createElement("input", {
                                    type: "checkbox",
                                    name: "menuOptionCheckbox",
                                    checked: this.OptionsMenu.access.moderator,
                                    onChange: function onChange() {
                                        _this7.OptionsMenu.accessClick("moderator");
                                    } }),
                                React.createElement("span", { className: "optionCheckmark" })
                            )
                        )
                    ),
                    React.createElement(
                        "div",
                        { className: "optionsMenuRightHalf" },
                        React.createElement(
                            "div",
                            { className: "optionsMenuOption", tooltip: StringStore.TOOLTIP.OPTION_FEEDBACK, "tooltip-text-size": "pixel", "tooltip-position": "bottom" },
                            React.createElement(
                                "div",
                                { className: "optionsMenuOptionText" },
                                StringStore.UI.OPTION_FEEDBACK
                            ),
                            this.renderFeedbackButton()
                        ),
                        React.createElement(
                            "div",
                            { className: "optionsMenuOption", tooltip: StringStore.TOOLTIP.OPTION_TUTORIAL, "tooltip-text-size": "pixel", "tooltip-position": "bottom" },
                            React.createElement(
                                "div",
                                { className: "optionsMenuOptionText" },
                                StringStore.UI.OPTION_TUTORIAL
                            ),
                            React.createElement(
                                "label",
                                { className: "optionsMenuCheckboxContainer" },
                                React.createElement("input", {
                                    type: "checkbox",
                                    name: "menuOptionCheckbox",
                                    checked: this.OptionsMenu.tutorialEnabled,
                                    onChange: function onChange() {
                                        _this7.tutorialClick();
                                    } }),
                                React.createElement("span", { className: "optionCheckmark" })
                            )
                        ),
                        React.createElement(
                            "div",
                            { className: "optionsMenuOption", tooltip: StringStore.TOOLTIP.OPTION_FPS, "tooltip-text-size": "pixel", "tooltip-position": "bottom" },
                            React.createElement(
                                "div",
                                { className: "optionsMenuOptionText" },
                                StringStore.UI.OPTION_FPS
                            ),
                            React.createElement(
                                "label",
                                { className: "optionsMenuCheckboxContainer" },
                                React.createElement("input", {
                                    type: "checkbox",
                                    name: "menuOptionCheckbox",
                                    checked: this.OptionsMenu.showFPS,
                                    onChange: function onChange() {
                                        _this7.fpsClick();
                                    } }),
                                React.createElement("span", { className: "optionCheckmark" })
                            )
                        ),
                        React.createElement(
                            "div",
                            { className: "optionsMenuOption" },
                            React.createElement(
                                "div",
                                { className: "optionsMenuOptionText" },
                                StringStore.UI.OPTION_RESOLUTION
                            ),
                            React.createElement(
                                "div",
                                { className: "optionsMenuSelect" },
                                React.createElement(
                                    "select",
                                    { value: this.state.value, onChange: this.handleResolutionChange },
                                    this.resolutionOptions
                                )
                            )
                        ),
                        React.createElement(
                            "div",
                            { className: "optionsMenuOption" },
                            React.createElement(
                                "div",
                                { className: "optionsMenuOptionText", style: stylePPHeader },
                                StringStore.UI.OPTION_POST
                            ),
                            React.createElement(
                                "div",
                                { className: "optionsMenuOptionText", style: stylePPSubtitle, tooltip: StringStore.TOOLTIP.OPTION_TILT, "tooltip-text-size": "pixel", "tooltip-position": "bottom" },
                                StringStore.UI.OPTION_TILT
                            ),
                            React.createElement(
                                "label",
                                { className: "optionsMenuCheckboxContainer", style: stylePPCheckbox, tooltip: StringStore.TOOLTIP.OPTION_TILT, "tooltip-text-size": "pixel", "tooltip-position": "bottom" },
                                React.createElement("input", {
                                    type: "checkbox",
                                    name: "menuOptionCheckbox",
                                    checked: this.OptionsMenu.tiltShiftEnabled,
                                    onChange: function onChange() {
                                        _this7.OptionsMenu.tiltShiftClick();
                                    } }),
                                React.createElement("span", { className: "optionCheckmark" })
                            ),
                            React.createElement(
                                "div",
                                { className: "optionsMenuOptionText", style: stylePPSubtitleSmall, tooltip: StringStore.TOOLTIP.OPTION_SSAO, "tooltip-text-size": "pixel", "tooltip-position": "bottom" },
                                StringStore.UI.OPTION_SSAO
                            ),
                            React.createElement(
                                "label",
                                { className: "optionsMenuCheckboxContainer", style: stylePPCheckbox, tooltip: StringStore.TOOLTIP.OPTION_SSAO, "tooltip-text-size": "pixel", "tooltip-position": "bottom" },
                                React.createElement("input", {
                                    type: "checkbox",
                                    name: "menuOptionCheckbox",
                                    checked: this.OptionsMenu.ssaoEnabled,
                                    onChange: function onChange() {
                                        _this7.OptionsMenu.ssaoClick();
                                    } }),
                                React.createElement("span", { className: "optionCheckmark" })
                            ),
                            React.createElement(
                                "div",
                                { className: "optionsMenuOptionText", style: stylePPSubtitle, tooltip: StringStore.TOOLTIP.OPTION_VIGNETTE, "tooltip-text-size": "pixel", "tooltip-position": "bottom" },
                                StringStore.UI.OPTION_VIGNETTE
                            ),
                            React.createElement(
                                "label",
                                { className: "optionsMenuCheckboxContainer", style: stylePPCheckbox, tooltip: StringStore.TOOLTIP.OPTION_VIGNETTE, "tooltip-text-size": "pixel", "tooltip-position": "bottom" },
                                React.createElement("input", {
                                    type: "checkbox",
                                    name: "menuOptionCheckbox",
                                    checked: this.OptionsMenu.vignetteEnabled,
                                    onChange: function onChange() {
                                        _this7.OptionsMenu.vignetteClick();
                                    } }),
                                React.createElement("span", { className: "optionCheckmark" })
                            )
                        )
                    )
                );
            }
        }
    }]);

    return OptionsMenuContent;
}(React.Component);

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(70);

// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.

// Set endpoints with proper sub domain
var ENDPOINTS = __webpack_require__(14);
for (var stage in ENDPOINTS) {
    for (var uriKey in ENDPOINTS[stage]) {
        ENDPOINTS[stage][uriKey] = ENDPOINTS[stage][uriKey].replace("<production>", "0awjbnesil");
        ENDPOINTS[stage][uriKey] = ENDPOINTS[stage][uriKey].replace("<gamma>", "a6bd7zre9b");
        ENDPOINTS[stage][uriKey] = ENDPOINTS[stage][uriKey].replace("<development>", "d1kydrg1pf");
        ENDPOINTS[stage][uriKey] = ENDPOINTS[stage][uriKey].replace("<version>", "v2");
    }
}

// Add stub if global Twitch var doesn't exist
window.Twitch = window.Twitch || {
    ext: {
        bits: {
            onTransactionComplete: function onTransactionComplete() {}
        }
    }
};

__webpack_require__(38);

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(71);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(4)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../node_modules/css-loader/index.js!../node_modules/less-loader/dist/cjs.js!./index.less", function() {
			var newContent = require("!!../node_modules/css-loader/index.js!../node_modules/less-loader/dist/cjs.js!./index.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(3)(false);
// imports


// module
exports.push([module.i, "* {\n  -webkit-touch-callout: none;\n  /* prevent callout to copy image, etc when tap to hold */\n  -webkit-text-size-adjust: none;\n  /* prevent webkit from resizing text to fit */\n  /* make transparent link selection, adjust last value opacity 0 to 1.0 */\n  -webkit-user-select: none;\n  /* prevent copy paste, to allow, change 'none' to 'text' */\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  touch-action: none;\n  text-size-adjust: none;\n}\n.touchMobile {\n  -webkit-touch-callout: none;\n  /* prevent callout to copy image, etc when tap to hold */\n  -webkit-text-size-adjust: none;\n  /* prevent webkit from resizing text to fit */\n  /* make transparent link selection, adjust last value opacity 0 to 1.0 */\n  -webkit-user-select: none;\n  /* prevent copy paste, to allow, change 'none' to 'text' */\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  touch-action: none;\n  text-size-adjust: none;\n}\n#mount {\n  pointer-events: none;\n  display: block;\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 110;\n}\n", ""]);

// exports


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
	// get current location
	var location = typeof window !== "undefined" && window.location;

	if (!location) {
		throw new Error("fixUrls requires window.location");
	}

	// blank or null?
	if (!css || typeof css !== "string") {
		return css;
	}

	var baseUrl = location.protocol + "//" + location.host;
	var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
 This regular expression is just a way to recursively match brackets within
 a string.
 	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
    (  = Start a capturing group
      (?:  = Start a non-capturing group
          [^)(]  = Match anything that isn't a parentheses
          |  = OR
          \(  = Match a start parentheses
              (?:  = Start another non-capturing groups
                  [^)(]+  = Match anything that isn't a parentheses
                  |  = OR
                  \(  = Match a start parentheses
                      [^)(]*  = Match anything that isn't a parentheses
                  \)  = Match a end parentheses
              )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
  \)  = Match a close parens
 	 /gi  = Get all matches, not the first.  Be case insensitive.
  */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function (fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl.trim().replace(/^"(.*)"$/, function (o, $1) {
			return $1;
		}).replace(/^'(.*)'$/, function (o, $1) {
			return $1;
		});

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(unquotedOrigUrl)) {
			return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
			//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.6.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var k = __webpack_require__(24),
    n = "function" === typeof Symbol && Symbol.for,
    p = n ? Symbol.for("react.element") : 60103,
    q = n ? Symbol.for("react.portal") : 60106,
    r = n ? Symbol.for("react.fragment") : 60107,
    t = n ? Symbol.for("react.strict_mode") : 60108,
    u = n ? Symbol.for("react.profiler") : 60114,
    v = n ? Symbol.for("react.provider") : 60109,
    w = n ? Symbol.for("react.context") : 60110,
    x = n ? Symbol.for("react.concurrent_mode") : 60111,
    y = n ? Symbol.for("react.forward_ref") : 60112,
    z = n ? Symbol.for("react.suspense") : 60113,
    A = n ? Symbol.for("react.memo") : 60115,
    B = n ? Symbol.for("react.lazy") : 60116,
    C = "function" === typeof Symbol && Symbol.iterator;function aa(a, b, e, c, d, g, h, f) {
  if (!a) {
    a = void 0;if (void 0 === b) a = Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else {
      var l = [e, c, d, g, h, f],
          m = 0;a = Error(b.replace(/%s/g, function () {
        return l[m++];
      }));a.name = "Invariant Violation";
    }a.framesToPop = 1;throw a;
  }
}
function D(a) {
  for (var b = arguments.length - 1, e = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 0; c < b; c++) {
    e += "&args[]=" + encodeURIComponent(arguments[c + 1]);
  }aa(!1, "Minified React error #" + a + "; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ", e);
}var E = { isMounted: function isMounted() {
    return !1;
  }, enqueueForceUpdate: function enqueueForceUpdate() {}, enqueueReplaceState: function enqueueReplaceState() {}, enqueueSetState: function enqueueSetState() {} },
    F = {};
function G(a, b, e) {
  this.props = a;this.context = b;this.refs = F;this.updater = e || E;
}G.prototype.isReactComponent = {};G.prototype.setState = function (a, b) {
  "object" !== (typeof a === "undefined" ? "undefined" : _typeof(a)) && "function" !== typeof a && null != a ? D("85") : void 0;this.updater.enqueueSetState(this, a, b, "setState");
};G.prototype.forceUpdate = function (a) {
  this.updater.enqueueForceUpdate(this, a, "forceUpdate");
};function H() {}H.prototype = G.prototype;function I(a, b, e) {
  this.props = a;this.context = b;this.refs = F;this.updater = e || E;
}var J = I.prototype = new H();
J.constructor = I;k(J, G.prototype);J.isPureReactComponent = !0;var K = { current: null, currentDispatcher: null },
    L = Object.prototype.hasOwnProperty,
    M = { key: !0, ref: !0, __self: !0, __source: !0 };
function N(a, b, e) {
  var c = void 0,
      d = {},
      g = null,
      h = null;if (null != b) for (c in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (g = "" + b.key), b) {
    L.call(b, c) && !M.hasOwnProperty(c) && (d[c] = b[c]);
  }var f = arguments.length - 2;if (1 === f) d.children = e;else if (1 < f) {
    for (var l = Array(f), m = 0; m < f; m++) {
      l[m] = arguments[m + 2];
    }d.children = l;
  }if (a && a.defaultProps) for (c in f = a.defaultProps, f) {
    void 0 === d[c] && (d[c] = f[c]);
  }return { $$typeof: p, type: a, key: g, ref: h, props: d, _owner: K.current };
}
function ba(a, b) {
  return { $$typeof: p, type: a.type, key: b, ref: a.ref, props: a.props, _owner: a._owner };
}function O(a) {
  return "object" === (typeof a === "undefined" ? "undefined" : _typeof(a)) && null !== a && a.$$typeof === p;
}function escape(a) {
  var b = { "=": "=0", ":": "=2" };return "$" + ("" + a).replace(/[=:]/g, function (a) {
    return b[a];
  });
}var P = /\/+/g,
    Q = [];function R(a, b, e, c) {
  if (Q.length) {
    var d = Q.pop();d.result = a;d.keyPrefix = b;d.func = e;d.context = c;d.count = 0;return d;
  }return { result: a, keyPrefix: b, func: e, context: c, count: 0 };
}
function S(a) {
  a.result = null;a.keyPrefix = null;a.func = null;a.context = null;a.count = 0;10 > Q.length && Q.push(a);
}
function T(a, b, e, c) {
  var d = typeof a === "undefined" ? "undefined" : _typeof(a);if ("undefined" === d || "boolean" === d) a = null;var g = !1;if (null === a) g = !0;else switch (d) {case "string":case "number":
      g = !0;break;case "object":
      switch (a.$$typeof) {case p:case q:
          g = !0;}}if (g) return e(c, a, "" === b ? "." + U(a, 0) : b), 1;g = 0;b = "" === b ? "." : b + ":";if (Array.isArray(a)) for (var h = 0; h < a.length; h++) {
    d = a[h];var f = b + U(d, h);g += T(d, f, e, c);
  } else if (null === a || "object" !== (typeof a === "undefined" ? "undefined" : _typeof(a)) ? f = null : (f = C && a[C] || a["@@iterator"], f = "function" === typeof f ? f : null), "function" === typeof f) for (a = f.call(a), h = 0; !(d = a.next()).done;) {
    d = d.value, f = b + U(d, h++), g += T(d, f, e, c);
  } else "object" === d && (e = "" + a, D("31", "[object Object]" === e ? "object with keys {" + Object.keys(a).join(", ") + "}" : e, ""));return g;
}function V(a, b, e) {
  return null == a ? 0 : T(a, "", b, e);
}function U(a, b) {
  return "object" === (typeof a === "undefined" ? "undefined" : _typeof(a)) && null !== a && null != a.key ? escape(a.key) : b.toString(36);
}function ca(a, b) {
  a.func.call(a.context, b, a.count++);
}
function da(a, b, e) {
  var c = a.result,
      d = a.keyPrefix;a = a.func.call(a.context, b, a.count++);Array.isArray(a) ? W(a, c, e, function (a) {
    return a;
  }) : null != a && (O(a) && (a = ba(a, d + (!a.key || b && b.key === a.key ? "" : ("" + a.key).replace(P, "$&/") + "/") + e)), c.push(a));
}function W(a, b, e, c, d) {
  var g = "";null != e && (g = ("" + e).replace(P, "$&/") + "/");b = R(b, g, c, d);V(a, da, b);S(b);
}
var X = { Children: { map: function map(a, b, e) {
      if (null == a) return a;var c = [];W(a, c, null, b, e);return c;
    }, forEach: function forEach(a, b, e) {
      if (null == a) return a;b = R(null, null, b, e);V(a, ca, b);S(b);
    }, count: function count(a) {
      return V(a, function () {
        return null;
      }, null);
    }, toArray: function toArray(a) {
      var b = [];W(a, b, null, function (a) {
        return a;
      });return b;
    }, only: function only(a) {
      O(a) ? void 0 : D("143");return a;
    } }, createRef: function createRef() {
    return { current: null };
  }, Component: G, PureComponent: I, createContext: function createContext(a, b) {
    void 0 === b && (b = null);a = { $$typeof: w, _calculateChangedBits: b,
      _currentValue: a, _currentValue2: a, Provider: null, Consumer: null };a.Provider = { $$typeof: v, _context: a };return a.Consumer = a;
  }, forwardRef: function forwardRef(a) {
    return { $$typeof: y, render: a };
  }, lazy: function lazy(a) {
    return { $$typeof: B, _ctor: a, _status: -1, _result: null };
  }, memo: function memo(a, b) {
    return { $$typeof: A, type: a, compare: void 0 === b ? null : b };
  }, Fragment: r, StrictMode: t, unstable_ConcurrentMode: x, Suspense: z, unstable_Profiler: u, createElement: N, cloneElement: function cloneElement(a, b, e) {
    null === a || void 0 === a ? D("267", a) : void 0;var c = void 0,
        d = k({}, a.props),
        g = a.key,
        h = a.ref,
        f = a._owner;if (null != b) {
      void 0 !== b.ref && (h = b.ref, f = K.current);void 0 !== b.key && (g = "" + b.key);var l = void 0;a.type && a.type.defaultProps && (l = a.type.defaultProps);for (c in b) {
        L.call(b, c) && !M.hasOwnProperty(c) && (d[c] = void 0 === b[c] && void 0 !== l ? l[c] : b[c]);
      }
    }c = arguments.length - 2;if (1 === c) d.children = e;else if (1 < c) {
      l = Array(c);for (var m = 0; m < c; m++) {
        l[m] = arguments[m + 2];
      }d.children = l;
    }return { $$typeof: p, type: a.type, key: g, ref: h, props: d, _owner: f };
  }, createFactory: function createFactory(a) {
    var b = N.bind(null, a);b.type = a;return b;
  },
  isValidElement: O, version: "16.6.0", __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: { ReactCurrentOwner: K, assign: k } },
    Y = { default: X },
    Z = Y && X || Y;module.exports = Z.default || Z;

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/** @license React v16.6.0
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

if (process.env.NODE_ENV !== "production") {
  (function () {
    'use strict';

    var _assign = __webpack_require__(24);
    var checkPropTypes = __webpack_require__(39);

    // TODO: this is special because it gets imported during build.

    var ReactVersion = '16.6.0';

    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;

    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;

    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';

    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || (typeof maybeIterable === 'undefined' ? 'undefined' : _typeof(maybeIterable)) !== 'object') {
        return null;
      }
      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
      if (typeof maybeIterator === 'function') {
        return maybeIterator;
      }
      return null;
    }

    /**
     * Use invariant() to assert state which your program assumes to be true.
     *
     * Provide sprintf-style format (only %s is supported) and arguments
     * to provide information about what broke and what you were
     * expecting.
     *
     * The invariant message will be stripped in production, but the invariant
     * will remain to ensure logic does not differ in production.
     */

    var validateFormat = function validateFormat() {};

    {
      validateFormat = function validateFormat(format) {
        if (format === undefined) {
          throw new Error('invariant requires an error message argument');
        }
      };
    }

    function invariant(condition, format, a, b, c, d, e, f) {
      validateFormat(format);

      if (!condition) {
        var error = void 0;
        if (format === undefined) {
          error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error(format.replace(/%s/g, function () {
            return args[argIndex++];
          }));
          error.name = 'Invariant Violation';
        }

        error.framesToPop = 1; // we don't care about invariant's own frame
        throw error;
      }
    }

    // Relying on the `invariant()` implementation lets us
    // preserve the format and params in the www builds.

    /**
     * Forked from fbjs/warning:
     * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
     *
     * Only change is we use console.warn instead of console.error,
     * and do nothing when 'console' is not supported.
     * This really simplifies the code.
     * ---
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */

    var lowPriorityWarning = function lowPriorityWarning() {};

    {
      var printWarning = function printWarning(format) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function () {
          return args[argIndex++];
        });
        if (typeof console !== 'undefined') {
          console.warn(message);
        }
        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };

      lowPriorityWarning = function lowPriorityWarning(condition, format) {
        if (format === undefined) {
          throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
        }
        if (!condition) {
          for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
          }

          printWarning.apply(undefined, [format].concat(args));
        }
      };
    }

    var lowPriorityWarning$1 = lowPriorityWarning;

    /**
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */

    var warningWithoutStack = function warningWithoutStack() {};

    {
      warningWithoutStack = function warningWithoutStack(condition, format) {
        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }

        if (format === undefined) {
          throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
        }
        if (args.length > 8) {
          // Check before the condition to catch violations early.
          throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
        }
        if (condition) {
          return;
        }
        if (typeof console !== 'undefined') {
          var _args$map = args.map(function (item) {
            return '' + item;
          }),
              a = _args$map[0],
              b = _args$map[1],
              c = _args$map[2],
              d = _args$map[3],
              e = _args$map[4],
              f = _args$map[5],
              g = _args$map[6],
              h = _args$map[7];

          var message = 'Warning: ' + format;

          // We intentionally don't use spread (or .apply) because it breaks IE9:
          // https://github.com/facebook/react/issues/13610
          switch (args.length) {
            case 0:
              console.error(message);
              break;
            case 1:
              console.error(message, a);
              break;
            case 2:
              console.error(message, a, b);
              break;
            case 3:
              console.error(message, a, b, c);
              break;
            case 4:
              console.error(message, a, b, c, d);
              break;
            case 5:
              console.error(message, a, b, c, d, e);
              break;
            case 6:
              console.error(message, a, b, c, d, e, f);
              break;
            case 7:
              console.error(message, a, b, c, d, e, f, g);
              break;
            case 8:
              console.error(message, a, b, c, d, e, f, g, h);
              break;
            default:
              throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
          }
        }
        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          var argIndex = 0;
          var _message = 'Warning: ' + format.replace(/%s/g, function () {
            return args[argIndex++];
          });
          throw new Error(_message);
        } catch (x) {}
      };
    }

    var warningWithoutStack$1 = warningWithoutStack;

    var didWarnStateUpdateForUnmountedComponent = {};

    function warnNoop(publicInstance, callerName) {
      {
        var _constructor = publicInstance.constructor;
        var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
        var warningKey = componentName + '.' + callerName;
        if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
          return;
        }
        warningWithoutStack$1(false, "Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);
        didWarnStateUpdateForUnmountedComponent[warningKey] = true;
      }
    }

    /**
     * This is the abstract API for an update queue.
     */
    var ReactNoopUpdateQueue = {
      /**
       * Checks whether or not this composite component is mounted.
       * @param {ReactClass} publicInstance The instance we want to test.
       * @return {boolean} True if mounted, false otherwise.
       * @protected
       * @final
       */
      isMounted: function isMounted(publicInstance) {
        return false;
      },

      /**
       * Forces an update. This should only be invoked when it is known with
       * certainty that we are **not** in a DOM transaction.
       *
       * You may want to call this when you know that some deeper aspect of the
       * component's state has changed but `setState` was not called.
       *
       * This will not invoke `shouldComponentUpdate`, but it will invoke
       * `componentWillUpdate` and `componentDidUpdate`.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {?function} callback Called after component is updated.
       * @param {?string} callerName name of the calling function in the public API.
       * @internal
       */
      enqueueForceUpdate: function enqueueForceUpdate(publicInstance, callback, callerName) {
        warnNoop(publicInstance, 'forceUpdate');
      },

      /**
       * Replaces all of the state. Always use this or `setState` to mutate state.
       * You should treat `this.state` as immutable.
       *
       * There is no guarantee that `this.state` will be immediately updated, so
       * accessing `this.state` after calling this method may return the old value.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {object} completeState Next state.
       * @param {?function} callback Called after component is updated.
       * @param {?string} callerName name of the calling function in the public API.
       * @internal
       */
      enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState, callback, callerName) {
        warnNoop(publicInstance, 'replaceState');
      },

      /**
       * Sets a subset of the state. This only exists because _pendingState is
       * internal. This provides a merging strategy that is not available to deep
       * properties which is confusing. TODO: Expose pendingState or don't use it
       * during the merge.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {object} partialState Next partial state to be merged with state.
       * @param {?function} callback Called after component is updated.
       * @param {?string} Name of the calling function in the public API.
       * @internal
       */
      enqueueSetState: function enqueueSetState(publicInstance, partialState, callback, callerName) {
        warnNoop(publicInstance, 'setState');
      }
    };

    var emptyObject = {};
    {
      Object.freeze(emptyObject);
    }

    /**
     * Base class helpers for the updating state of a component.
     */
    function Component(props, context, updater) {
      this.props = props;
      this.context = context;
      // If a component has string refs, we will assign a different object later.
      this.refs = emptyObject;
      // We initialize the default updater but the real one gets injected by the
      // renderer.
      this.updater = updater || ReactNoopUpdateQueue;
    }

    Component.prototype.isReactComponent = {};

    /**
     * Sets a subset of the state. Always use this to mutate
     * state. You should treat `this.state` as immutable.
     *
     * There is no guarantee that `this.state` will be immediately updated, so
     * accessing `this.state` after calling this method may return the old value.
     *
     * There is no guarantee that calls to `setState` will run synchronously,
     * as they may eventually be batched together.  You can provide an optional
     * callback that will be executed when the call to setState is actually
     * completed.
     *
     * When a function is provided to setState, it will be called at some point in
     * the future (not synchronously). It will be called with the up to date
     * component arguments (state, props, context). These values can be different
     * from this.* because your function may be called after receiveProps but before
     * shouldComponentUpdate, and this new state, props, and context will not yet be
     * assigned to this.
     *
     * @param {object|function} partialState Next partial state or function to
     *        produce next partial state to be merged with current state.
     * @param {?function} callback Called after state is updated.
     * @final
     * @protected
     */
    Component.prototype.setState = function (partialState, callback) {
      !((typeof partialState === 'undefined' ? 'undefined' : _typeof(partialState)) === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;
      this.updater.enqueueSetState(this, partialState, callback, 'setState');
    };

    /**
     * Forces an update. This should only be invoked when it is known with
     * certainty that we are **not** in a DOM transaction.
     *
     * You may want to call this when you know that some deeper aspect of the
     * component's state has changed but `setState` was not called.
     *
     * This will not invoke `shouldComponentUpdate`, but it will invoke
     * `componentWillUpdate` and `componentDidUpdate`.
     *
     * @param {?function} callback Called after update is complete.
     * @final
     * @protected
     */
    Component.prototype.forceUpdate = function (callback) {
      this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
    };

    /**
     * Deprecated APIs. These APIs used to exist on classic React classes but since
     * we would like to deprecate them, we're not going to move them over to this
     * modern base class. Instead, we define a getter that warns if it's accessed.
     */
    {
      var deprecatedAPIs = {
        isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
        replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
      };
      var defineDeprecationWarning = function defineDeprecationWarning(methodName, info) {
        Object.defineProperty(Component.prototype, methodName, {
          get: function get() {
            lowPriorityWarning$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
            return undefined;
          }
        });
      };
      for (var fnName in deprecatedAPIs) {
        if (deprecatedAPIs.hasOwnProperty(fnName)) {
          defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
        }
      }
    }

    function ComponentDummy() {}
    ComponentDummy.prototype = Component.prototype;

    /**
     * Convenience component with default shallow equality check for sCU.
     */
    function PureComponent(props, context, updater) {
      this.props = props;
      this.context = context;
      // If a component has string refs, we will assign a different object later.
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;
    }

    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = PureComponent;
    // Avoid an extra prototype jump for these methods.
    _assign(pureComponentPrototype, Component.prototype);
    pureComponentPrototype.isPureReactComponent = true;

    // an immutable object with a single mutable value
    function createRef() {
      var refObject = {
        current: null
      };
      {
        Object.seal(refObject);
      }
      return refObject;
    }

    /**
     * Keeps track of the current owner.
     *
     * The current owner is the component who should own any components that are
     * currently being constructed.
     */
    var ReactCurrentOwner = {
      /**
       * @internal
       * @type {ReactComponent}
       */
      current: null,
      currentDispatcher: null
    };

    var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

    var describeComponentFrame = function describeComponentFrame(name, source, ownerName) {
      var sourceInfo = '';
      if (source) {
        var path = source.fileName;
        var fileName = path.replace(BEFORE_SLASH_RE, '');
        {
          // In DEV, include code for a common special case:
          // prefer "folder/index.js" instead of just "index.js".
          if (/^index\./.test(fileName)) {
            var match = path.match(BEFORE_SLASH_RE);
            if (match) {
              var pathBeforeSlash = match[1];
              if (pathBeforeSlash) {
                var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
                fileName = folderName + '/' + fileName;
              }
            }
          }
        }
        sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
      } else if (ownerName) {
        sourceInfo = ' (created by ' + ownerName + ')';
      }
      return '\n    in ' + (name || 'Unknown') + sourceInfo;
    };

    var Resolved = 1;

    function refineResolvedLazyComponent(lazyComponent) {
      return lazyComponent._status === Resolved ? lazyComponent._result : null;
    }

    function getWrappedName(outerType, innerType, wrapperName) {
      var functionName = innerType.displayName || innerType.name || '';
      return outerType.displayName || (functionName !== '' ? wrapperName + '(' + functionName + ')' : wrapperName);
    }

    function getComponentName(type) {
      if (type == null) {
        // Host root, text node or just invalid type.
        return null;
      }
      {
        if (typeof type.tag === 'number') {
          warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
        }
      }
      if (typeof type === 'function') {
        return type.displayName || type.name || null;
      }
      if (typeof type === 'string') {
        return type;
      }
      switch (type) {
        case REACT_CONCURRENT_MODE_TYPE:
          return 'ConcurrentMode';
        case REACT_FRAGMENT_TYPE:
          return 'Fragment';
        case REACT_PORTAL_TYPE:
          return 'Portal';
        case REACT_PROFILER_TYPE:
          return 'Profiler';
        case REACT_STRICT_MODE_TYPE:
          return 'StrictMode';
        case REACT_SUSPENSE_TYPE:
          return 'Suspense';
      }
      if ((typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object') {
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            return 'Context.Consumer';
          case REACT_PROVIDER_TYPE:
            return 'Context.Provider';
          case REACT_FORWARD_REF_TYPE:
            return getWrappedName(type, type.render, 'ForwardRef');
          case REACT_MEMO_TYPE:
            return getComponentName(type.type);
          case REACT_LAZY_TYPE:
            {
              var thenable = type;
              var resolvedThenable = refineResolvedLazyComponent(thenable);
              if (resolvedThenable) {
                return getComponentName(resolvedThenable);
              }
            }
        }
      }
      return null;
    }

    var ReactDebugCurrentFrame = {};

    var currentlyValidatingElement = null;

    function setCurrentlyValidatingElement(element) {
      {
        currentlyValidatingElement = element;
      }
    }

    {
      // Stack implementation injected by the current renderer.
      ReactDebugCurrentFrame.getCurrentStack = null;

      ReactDebugCurrentFrame.getStackAddendum = function () {
        var stack = '';

        // Add an extra top frame while an element is being validated
        if (currentlyValidatingElement) {
          var name = getComponentName(currentlyValidatingElement.type);
          var owner = currentlyValidatingElement._owner;
          stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
        }

        // Delegate to the injected renderer-specific implementation
        var impl = ReactDebugCurrentFrame.getCurrentStack;
        if (impl) {
          stack += impl() || '';
        }

        return stack;
      };
    }

    var ReactSharedInternals = {
      ReactCurrentOwner: ReactCurrentOwner,
      // Used by renderers to avoid bundling object-assign twice in UMD bundles:
      assign: _assign
    };

    {
      _assign(ReactSharedInternals, {
        // These should not be included in production.
        ReactDebugCurrentFrame: ReactDebugCurrentFrame,
        // Shim for React DOM 16.0.0 which still destructured (but not used) this.
        // TODO: remove in React 17.0.
        ReactComponentTreeHook: {}
      });
    }

    /**
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */

    var warning = warningWithoutStack$1;

    {
      warning = function warning(condition, format) {
        if (condition) {
          return;
        }
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        // eslint-disable-next-line react-internal/warning-and-invariant-args

        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }

        warningWithoutStack$1.apply(undefined, [false, format + '%s'].concat(args, [stack]));
      };
    }

    var warning$1 = warning;

    var hasOwnProperty = Object.prototype.hasOwnProperty;

    var RESERVED_PROPS = {
      key: true,
      ref: true,
      __self: true,
      __source: true
    };

    var specialPropKeyWarningShown = void 0;
    var specialPropRefWarningShown = void 0;

    function hasValidRef(config) {
      {
        if (hasOwnProperty.call(config, 'ref')) {
          var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.ref !== undefined;
    }

    function hasValidKey(config) {
      {
        if (hasOwnProperty.call(config, 'key')) {
          var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.key !== undefined;
    }

    function defineKeyPropWarningGetter(props, displayName) {
      var warnAboutAccessingKey = function warnAboutAccessingKey() {
        if (!specialPropKeyWarningShown) {
          specialPropKeyWarningShown = true;
          warningWithoutStack$1(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
        }
      };
      warnAboutAccessingKey.isReactWarning = true;
      Object.defineProperty(props, 'key', {
        get: warnAboutAccessingKey,
        configurable: true
      });
    }

    function defineRefPropWarningGetter(props, displayName) {
      var warnAboutAccessingRef = function warnAboutAccessingRef() {
        if (!specialPropRefWarningShown) {
          specialPropRefWarningShown = true;
          warningWithoutStack$1(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
        }
      };
      warnAboutAccessingRef.isReactWarning = true;
      Object.defineProperty(props, 'ref', {
        get: warnAboutAccessingRef,
        configurable: true
      });
    }

    /**
     * Factory method to create a new React element. This no longer adheres to
     * the class pattern, so do not use new to call it. Also, no instanceof check
     * will work. Instead test $$typeof field against Symbol.for('react.element') to check
     * if something is a React Element.
     *
     * @param {*} type
     * @param {*} key
     * @param {string|object} ref
     * @param {*} self A *temporary* helper to detect places where `this` is
     * different from the `owner` when React.createElement is called, so that we
     * can warn. We want to get rid of owner and replace string `ref`s with arrow
     * functions, and as long as `this` and owner are the same, there will be no
     * change in behavior.
     * @param {*} source An annotation object (added by a transpiler or otherwise)
     * indicating filename, line number, and/or other information.
     * @param {*} owner
     * @param {*} props
     * @internal
     */
    var ReactElement = function ReactElement(type, key, ref, self, source, owner, props) {
      var element = {
        // This tag allows us to uniquely identify this as a React Element
        $$typeof: REACT_ELEMENT_TYPE,

        // Built-in properties that belong on the element
        type: type,
        key: key,
        ref: ref,
        props: props,

        // Record the component responsible for creating this element.
        _owner: owner
      };

      {
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {};

        // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, 'validated', {
          configurable: false,
          enumerable: false,
          writable: true,
          value: false
        });
        // self and source are DEV only properties.
        Object.defineProperty(element, '_self', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: self
        });
        // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, '_source', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: source
        });
        if (Object.freeze) {
          Object.freeze(element.props);
          Object.freeze(element);
        }
      }

      return element;
    };

    /**
     * Create and return a new ReactElement of the given type.
     * See https://reactjs.org/docs/react-api.html#createelement
     */
    function createElement(type, config, children) {
      var propName = void 0;

      // Reserved names are extracted
      var props = {};

      var key = null;
      var ref = null;
      var self = null;
      var source = null;

      if (config != null) {
        if (hasValidRef(config)) {
          ref = config.ref;
        }
        if (hasValidKey(config)) {
          key = '' + config.key;
        }

        self = config.__self === undefined ? null : config.__self;
        source = config.__source === undefined ? null : config.__source;
        // Remaining properties are added to a new props object
        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            props[propName] = config[propName];
          }
        }
      }

      // Children can be more than one argument, and those are transferred onto
      // the newly allocated props object.
      var childrenLength = arguments.length - 2;
      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);
        for (var i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 2];
        }
        {
          if (Object.freeze) {
            Object.freeze(childArray);
          }
        }
        props.children = childArray;
      }

      // Resolve default props
      if (type && type.defaultProps) {
        var defaultProps = type.defaultProps;
        for (propName in defaultProps) {
          if (props[propName] === undefined) {
            props[propName] = defaultProps[propName];
          }
        }
      }
      {
        if (key || ref) {
          var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
          if (key) {
            defineKeyPropWarningGetter(props, displayName);
          }
          if (ref) {
            defineRefPropWarningGetter(props, displayName);
          }
        }
      }
      return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }

    /**
     * Return a function that produces ReactElements of a given type.
     * See https://reactjs.org/docs/react-api.html#createfactory
     */

    function cloneAndReplaceKey(oldElement, newKey) {
      var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

      return newElement;
    }

    /**
     * Clone and return a new ReactElement using element as the starting point.
     * See https://reactjs.org/docs/react-api.html#cloneelement
     */
    function cloneElement(element, config, children) {
      !!(element === null || element === undefined) ? invariant(false, 'React.cloneElement(...): The argument must be a React element, but you passed %s.', element) : void 0;

      var propName = void 0;

      // Original props are copied
      var props = _assign({}, element.props);

      // Reserved names are extracted
      var key = element.key;
      var ref = element.ref;
      // Self is preserved since the owner is preserved.
      var self = element._self;
      // Source is preserved since cloneElement is unlikely to be targeted by a
      // transpiler, and the original source is probably a better indicator of the
      // true owner.
      var source = element._source;

      // Owner will be preserved, unless ref is overridden
      var owner = element._owner;

      if (config != null) {
        if (hasValidRef(config)) {
          // Silently steal the ref from the parent.
          ref = config.ref;
          owner = ReactCurrentOwner.current;
        }
        if (hasValidKey(config)) {
          key = '' + config.key;
        }

        // Remaining properties override existing props
        var defaultProps = void 0;
        if (element.type && element.type.defaultProps) {
          defaultProps = element.type.defaultProps;
        }
        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            if (config[propName] === undefined && defaultProps !== undefined) {
              // Resolve default props
              props[propName] = defaultProps[propName];
            } else {
              props[propName] = config[propName];
            }
          }
        }
      }

      // Children can be more than one argument, and those are transferred onto
      // the newly allocated props object.
      var childrenLength = arguments.length - 2;
      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);
        for (var i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 2];
        }
        props.children = childArray;
      }

      return ReactElement(element.type, key, ref, self, source, owner, props);
    }

    /**
     * Verifies the object is a ReactElement.
     * See https://reactjs.org/docs/react-api.html#isvalidelement
     * @param {?object} object
     * @return {boolean} True if `object` is a ReactElement.
     * @final
     */
    function isValidElement(object) {
      return (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }

    var SEPARATOR = '.';
    var SUBSEPARATOR = ':';

    /**
     * Escape and wrap key so it is safe to use as a reactid
     *
     * @param {string} key to be escaped.
     * @return {string} the escaped key.
     */
    function escape(key) {
      var escapeRegex = /[=:]/g;
      var escaperLookup = {
        '=': '=0',
        ':': '=2'
      };
      var escapedString = ('' + key).replace(escapeRegex, function (match) {
        return escaperLookup[match];
      });

      return '$' + escapedString;
    }

    /**
     * TODO: Test that a single child and an array with one item have the same key
     * pattern.
     */

    var didWarnAboutMaps = false;

    var userProvidedKeyEscapeRegex = /\/+/g;
    function escapeUserProvidedKey(text) {
      return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
    }

    var POOL_SIZE = 10;
    var traverseContextPool = [];
    function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
      if (traverseContextPool.length) {
        var traverseContext = traverseContextPool.pop();
        traverseContext.result = mapResult;
        traverseContext.keyPrefix = keyPrefix;
        traverseContext.func = mapFunction;
        traverseContext.context = mapContext;
        traverseContext.count = 0;
        return traverseContext;
      } else {
        return {
          result: mapResult,
          keyPrefix: keyPrefix,
          func: mapFunction,
          context: mapContext,
          count: 0
        };
      }
    }

    function releaseTraverseContext(traverseContext) {
      traverseContext.result = null;
      traverseContext.keyPrefix = null;
      traverseContext.func = null;
      traverseContext.context = null;
      traverseContext.count = 0;
      if (traverseContextPool.length < POOL_SIZE) {
        traverseContextPool.push(traverseContext);
      }
    }

    /**
     * @param {?*} children Children tree container.
     * @param {!string} nameSoFar Name of the key path so far.
     * @param {!function} callback Callback to invoke with each child found.
     * @param {?*} traverseContext Used to pass information throughout the traversal
     * process.
     * @return {!number} The number of children in this subtree.
     */
    function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
      var type = typeof children === 'undefined' ? 'undefined' : _typeof(children);

      if (type === 'undefined' || type === 'boolean') {
        // All of the above are perceived as null.
        children = null;
      }

      var invokeCallback = false;

      if (children === null) {
        invokeCallback = true;
      } else {
        switch (type) {
          case 'string':
          case 'number':
            invokeCallback = true;
            break;
          case 'object':
            switch (children.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                invokeCallback = true;
            }
        }
      }

      if (invokeCallback) {
        callback(traverseContext, children,
        // If it's the only child, treat the name as if it was wrapped in an array
        // so that it's consistent if the number of children grows.
        nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
        return 1;
      }

      var child = void 0;
      var nextName = void 0;
      var subtreeCount = 0; // Count of children found in the current subtree.
      var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

      if (Array.isArray(children)) {
        for (var i = 0; i < children.length; i++) {
          child = children[i];
          nextName = nextNamePrefix + getComponentKey(child, i);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        var iteratorFn = getIteratorFn(children);
        if (typeof iteratorFn === 'function') {
          {
            // Warn about using Maps as children
            if (iteratorFn === children.entries) {
              !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;
              didWarnAboutMaps = true;
            }
          }

          var iterator = iteratorFn.call(children);
          var step = void 0;
          var ii = 0;
          while (!(step = iterator.next()).done) {
            child = step.value;
            nextName = nextNamePrefix + getComponentKey(child, ii++);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        } else if (type === 'object') {
          var addendum = '';
          {
            addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
          }
          var childrenString = '' + children;
          invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
        }
      }

      return subtreeCount;
    }

    /**
     * Traverses children that are typically specified as `props.children`, but
     * might also be specified through attributes:
     *
     * - `traverseAllChildren(this.props.children, ...)`
     * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
     *
     * The `traverseContext` is an optional argument that is passed through the
     * entire traversal. It can be used to store accumulations or anything else that
     * the callback might find relevant.
     *
     * @param {?*} children Children tree object.
     * @param {!function} callback To invoke upon traversing each child.
     * @param {?*} traverseContext Context for traversal.
     * @return {!number} The number of children in this subtree.
     */
    function traverseAllChildren(children, callback, traverseContext) {
      if (children == null) {
        return 0;
      }

      return traverseAllChildrenImpl(children, '', callback, traverseContext);
    }

    /**
     * Generate a key string that identifies a component within a set.
     *
     * @param {*} component A component that could contain a manual key.
     * @param {number} index Index that is used if a manual key is not provided.
     * @return {string}
     */
    function getComponentKey(component, index) {
      // Do some typechecking here since we call this blindly. We want to ensure
      // that we don't block potential future ES APIs.
      if ((typeof component === 'undefined' ? 'undefined' : _typeof(component)) === 'object' && component !== null && component.key != null) {
        // Explicit key
        return escape(component.key);
      }
      // Implicit key determined by the index in the set
      return index.toString(36);
    }

    function forEachSingleChild(bookKeeping, child, name) {
      var func = bookKeeping.func,
          context = bookKeeping.context;

      func.call(context, child, bookKeeping.count++);
    }

    /**
     * Iterates through children that are typically specified as `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
     *
     * The provided forEachFunc(child, index) will be called for each
     * leaf child.
     *
     * @param {?*} children Children tree container.
     * @param {function(*, int)} forEachFunc
     * @param {*} forEachContext Context for forEachContext.
     */
    function forEachChildren(children, forEachFunc, forEachContext) {
      if (children == null) {
        return children;
      }
      var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
      traverseAllChildren(children, forEachSingleChild, traverseContext);
      releaseTraverseContext(traverseContext);
    }

    function mapSingleChildIntoContext(bookKeeping, child, childKey) {
      var result = bookKeeping.result,
          keyPrefix = bookKeeping.keyPrefix,
          func = bookKeeping.func,
          context = bookKeeping.context;

      var mappedChild = func.call(context, child, bookKeeping.count++);
      if (Array.isArray(mappedChild)) {
        mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {
          return c;
        });
      } else if (mappedChild != null) {
        if (isValidElement(mappedChild)) {
          mappedChild = cloneAndReplaceKey(mappedChild,
          // Keep both the (mapped) and old keys if they differ, just as
          // traverseAllChildren used to do for objects as children
          keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
        }
        result.push(mappedChild);
      }
    }

    function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
      var escapedPrefix = '';
      if (prefix != null) {
        escapedPrefix = escapeUserProvidedKey(prefix) + '/';
      }
      var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
      traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
      releaseTraverseContext(traverseContext);
    }

    /**
     * Maps children that are typically specified as `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenmap
     *
     * The provided mapFunction(child, key, index) will be called for each
     * leaf child.
     *
     * @param {?*} children Children tree container.
     * @param {function(*, int)} func The map function.
     * @param {*} context Context for mapFunction.
     * @return {object} Object containing the ordered map of results.
     */
    function mapChildren(children, func, context) {
      if (children == null) {
        return children;
      }
      var result = [];
      mapIntoWithKeyPrefixInternal(children, result, null, func, context);
      return result;
    }

    /**
     * Count the number of children that are typically specified as
     * `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrencount
     *
     * @param {?*} children Children tree container.
     * @return {number} The number of children.
     */
    function countChildren(children) {
      return traverseAllChildren(children, function () {
        return null;
      }, null);
    }

    /**
     * Flatten a children object (typically specified as `props.children`) and
     * return an array with appropriately re-keyed children.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
     */
    function toArray(children) {
      var result = [];
      mapIntoWithKeyPrefixInternal(children, result, null, function (child) {
        return child;
      });
      return result;
    }

    /**
     * Returns the first child in a collection of children and verifies that there
     * is only one child in the collection.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenonly
     *
     * The current implementation of this function assumes that a single child gets
     * passed without a wrapper, but the purpose of this helper function is to
     * abstract away the particular structure of children.
     *
     * @param {?object} children Child collection structure.
     * @return {ReactElement} The first and only `ReactElement` contained in the
     * structure.
     */
    function onlyChild(children) {
      !isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;
      return children;
    }

    function createContext(defaultValue, calculateChangedBits) {
      if (calculateChangedBits === undefined) {
        calculateChangedBits = null;
      } else {
        {
          !(calculateChangedBits === null || typeof calculateChangedBits === 'function') ? warningWithoutStack$1(false, 'createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits) : void 0;
        }
      }

      var context = {
        $$typeof: REACT_CONTEXT_TYPE,
        _calculateChangedBits: calculateChangedBits,
        // As a workaround to support multiple concurrent renderers, we categorize
        // some renderers as primary and others as secondary. We only expect
        // there to be two concurrent renderers at most: React Native (primary) and
        // Fabric (secondary); React DOM (primary) and React ART (secondary).
        // Secondary renderers store their context values on separate fields.
        _currentValue: defaultValue,
        _currentValue2: defaultValue,
        // These are circular
        Provider: null,
        Consumer: null
      };

      context.Provider = {
        $$typeof: REACT_PROVIDER_TYPE,
        _context: context
      };

      var hasWarnedAboutUsingNestedContextConsumers = false;
      var hasWarnedAboutUsingConsumerProvider = false;

      {
        // A separate object, but proxies back to the original context object for
        // backwards compatibility. It has a different $$typeof, so we can properly
        // warn for the incorrect usage of Context as a Consumer.
        var Consumer = {
          $$typeof: REACT_CONTEXT_TYPE,
          _context: context,
          _calculateChangedBits: context._calculateChangedBits
        };
        // $FlowFixMe: Flow complains about not setting a value, which is intentional here
        Object.defineProperties(Consumer, {
          Provider: {
            get: function get() {
              if (!hasWarnedAboutUsingConsumerProvider) {
                hasWarnedAboutUsingConsumerProvider = true;
                warning$1(false, 'Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
              }
              return context.Provider;
            },
            set: function set(_Provider) {
              context.Provider = _Provider;
            }
          },
          _currentValue: {
            get: function get() {
              return context._currentValue;
            },
            set: function set(_currentValue) {
              context._currentValue = _currentValue;
            }
          },
          _currentValue2: {
            get: function get() {
              return context._currentValue2;
            },
            set: function set(_currentValue2) {
              context._currentValue2 = _currentValue2;
            }
          },
          Consumer: {
            get: function get() {
              if (!hasWarnedAboutUsingNestedContextConsumers) {
                hasWarnedAboutUsingNestedContextConsumers = true;
                warning$1(false, 'Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
              }
              return context.Consumer;
            }
          }
        });
        // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty
        context.Consumer = Consumer;
      }

      {
        context._currentRenderer = null;
        context._currentRenderer2 = null;
      }

      return context;
    }

    function lazy(ctor) {
      return {
        $$typeof: REACT_LAZY_TYPE,
        _ctor: ctor,
        // React uses these fields to store the result.
        _status: -1,
        _result: null
      };
    }

    function forwardRef(render) {
      {
        if (typeof render !== 'function') {
          warningWithoutStack$1(false, 'forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render === 'undefined' ? 'undefined' : _typeof(render));
        } else {
          !(
          // Do not warn for 0 arguments because it could be due to usage of the 'arguments' object
          render.length === 0 || render.length === 2) ? warningWithoutStack$1(false, 'forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.') : void 0;
        }

        if (render != null) {
          !(render.defaultProps == null && render.propTypes == null) ? warningWithoutStack$1(false, 'forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?') : void 0;
        }
      }

      return {
        $$typeof: REACT_FORWARD_REF_TYPE,
        render: render
      };
    }

    function isValidElementType(type) {
      return typeof type === 'string' || typeof type === 'function' ||
      // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || (typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
    }

    function memo(type, compare) {
      {
        if (!isValidElementType(type)) {
          warningWithoutStack$1(false, 'memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type === 'undefined' ? 'undefined' : _typeof(type));
        }
      }
      return {
        $$typeof: REACT_MEMO_TYPE,
        type: type,
        compare: compare === undefined ? null : compare
      };
    }

    /**
     * ReactElementValidator provides a wrapper around a element factory
     * which validates the props passed to the element. This is intended to be
     * used only in DEV and could be replaced by a static type checker for languages
     * that support it.
     */

    var propTypesMisspellWarningShown = void 0;

    {
      propTypesMisspellWarningShown = false;
    }

    function getDeclarationErrorAddendum() {
      if (ReactCurrentOwner.current) {
        var name = getComponentName(ReactCurrentOwner.current.type);
        if (name) {
          return '\n\nCheck the render method of `' + name + '`.';
        }
      }
      return '';
    }

    function getSourceInfoErrorAddendum(elementProps) {
      if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
        var source = elementProps.__source;
        var fileName = source.fileName.replace(/^.*[\\\/]/, '');
        var lineNumber = source.lineNumber;
        return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
      }
      return '';
    }

    /**
     * Warn if there's no key explicitly set on dynamic arrays of children or
     * object keys are not valid. This allows us to keep track of children between
     * updates.
     */
    var ownerHasKeyUseWarning = {};

    function getCurrentComponentErrorInfo(parentType) {
      var info = getDeclarationErrorAddendum();

      if (!info) {
        var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
        if (parentName) {
          info = '\n\nCheck the top-level render call using <' + parentName + '>.';
        }
      }
      return info;
    }

    /**
     * Warn if the element doesn't have an explicit key assigned to it.
     * This element is in an array. The array could grow and shrink or be
     * reordered. All children that haven't already been validated are required to
     * have a "key" property assigned to it. Error statuses are cached so a warning
     * will only be shown once.
     *
     * @internal
     * @param {ReactElement} element Element that requires a key.
     * @param {*} parentType element's parent's type.
     */
    function validateExplicitKey(element, parentType) {
      if (!element._store || element._store.validated || element.key != null) {
        return;
      }
      element._store.validated = true;

      var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
      if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
        return;
      }
      ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

      // Usually the current owner is the offender, but if it accepts children as a
      // property, it may be the creator of the child that's responsible for
      // assigning it a key.
      var childOwner = '';
      if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
        // Give the component that originally created this child.
        childOwner = ' It was passed a child from ' + getComponentName(element._owner.type) + '.';
      }

      setCurrentlyValidatingElement(element);
      {
        warning$1(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
      }
      setCurrentlyValidatingElement(null);
    }

    /**
     * Ensure that every element either is passed in a static location, in an
     * array with an explicit keys property defined, or in an object literal
     * with valid key property.
     *
     * @internal
     * @param {ReactNode} node Statically passed child of any type.
     * @param {*} parentType node's parent's type.
     */
    function validateChildKeys(node, parentType) {
      if ((typeof node === 'undefined' ? 'undefined' : _typeof(node)) !== 'object') {
        return;
      }
      if (Array.isArray(node)) {
        for (var i = 0; i < node.length; i++) {
          var child = node[i];
          if (isValidElement(child)) {
            validateExplicitKey(child, parentType);
          }
        }
      } else if (isValidElement(node)) {
        // This element was passed in a valid location.
        if (node._store) {
          node._store.validated = true;
        }
      } else if (node) {
        var iteratorFn = getIteratorFn(node);
        if (typeof iteratorFn === 'function') {
          // Entry iterators used to provide implicit keys,
          // but now we print a separate warning for them later.
          if (iteratorFn !== node.entries) {
            var iterator = iteratorFn.call(node);
            var step = void 0;
            while (!(step = iterator.next()).done) {
              if (isValidElement(step.value)) {
                validateExplicitKey(step.value, parentType);
              }
            }
          }
        }
      }
    }

    /**
     * Given an element, validate that its props follow the propTypes definition,
     * provided by the type.
     *
     * @param {ReactElement} element
     */
    function validatePropTypes(element) {
      var type = element.type;
      var name = void 0,
          propTypes = void 0;
      if (typeof type === 'function') {
        // Class or function component
        name = type.displayName || type.name;
        propTypes = type.propTypes;
      } else if ((typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object' && type !== null && type.$$typeof === REACT_FORWARD_REF_TYPE) {
        // ForwardRef
        var functionName = type.render.displayName || type.render.name || '';
        name = type.displayName || (functionName !== '' ? 'ForwardRef(' + functionName + ')' : 'ForwardRef');
        propTypes = type.propTypes;
      } else {
        return;
      }
      if (propTypes) {
        setCurrentlyValidatingElement(element);
        checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);
        setCurrentlyValidatingElement(null);
      } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
        propTypesMisspellWarningShown = true;
        warningWithoutStack$1(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
      }
      if (typeof type.getDefaultProps === 'function') {
        !type.getDefaultProps.isReactClassApproved ? warningWithoutStack$1(false, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
      }
    }

    /**
     * Given a fragment, validate that it can only be provided with fragment props
     * @param {ReactElement} fragment
     */
    function validateFragmentProps(fragment) {
      setCurrentlyValidatingElement(fragment);

      var keys = Object.keys(fragment.props);
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        if (key !== 'children' && key !== 'key') {
          warning$1(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
          break;
        }
      }

      if (fragment.ref !== null) {
        warning$1(false, 'Invalid attribute `ref` supplied to `React.Fragment`.');
      }

      setCurrentlyValidatingElement(null);
    }

    function createElementWithValidation(type, props, children) {
      var validType = isValidElementType(type);

      // We warn in this case but don't throw. We expect the element creation to
      // succeed and there will likely be errors in render.
      if (!validType) {
        var info = '';
        if (type === undefined || (typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
        }

        var sourceInfo = getSourceInfoErrorAddendum(props);
        if (sourceInfo) {
          info += sourceInfo;
        } else {
          info += getDeclarationErrorAddendum();
        }

        var typeString = void 0;
        if (type === null) {
          typeString = 'null';
        } else if (Array.isArray(type)) {
          typeString = 'array';
        } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
          typeString = '<' + (getComponentName(type.type) || 'Unknown') + ' />';
          info = ' Did you accidentally export a JSX literal instead of a component?';
        } else {
          typeString = typeof type === 'undefined' ? 'undefined' : _typeof(type);
        }

        warning$1(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
      }

      var element = createElement.apply(this, arguments);

      // The result can be nullish if a mock or a custom function is used.
      // TODO: Drop this when these are no longer allowed as the type argument.
      if (element == null) {
        return element;
      }

      // Skip key warning if the type isn't valid since our key validation logic
      // doesn't expect a non-string/function type and can throw confusing errors.
      // We don't want exception behavior to differ between dev and prod.
      // (Rendering will throw with a helpful message and as soon as the type is
      // fixed, the key warnings will appear.)
      if (validType) {
        for (var i = 2; i < arguments.length; i++) {
          validateChildKeys(arguments[i], type);
        }
      }

      if (type === REACT_FRAGMENT_TYPE) {
        validateFragmentProps(element);
      } else {
        validatePropTypes(element);
      }

      return element;
    }

    function createFactoryWithValidation(type) {
      var validatedFactory = createElementWithValidation.bind(null, type);
      validatedFactory.type = type;
      // Legacy hook: remove it
      {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function get() {
            lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }

      return validatedFactory;
    }

    function cloneElementWithValidation(element, props, children) {
      var newElement = cloneElement.apply(this, arguments);
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], newElement.type);
      }
      validatePropTypes(newElement);
      return newElement;
    }

    var React = {
      Children: {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray: toArray,
        only: onlyChild
      },

      createRef: createRef,
      Component: Component,
      PureComponent: PureComponent,

      createContext: createContext,
      forwardRef: forwardRef,
      lazy: lazy,
      memo: memo,

      Fragment: REACT_FRAGMENT_TYPE,
      StrictMode: REACT_STRICT_MODE_TYPE,
      unstable_ConcurrentMode: REACT_CONCURRENT_MODE_TYPE,
      Suspense: REACT_SUSPENSE_TYPE,
      unstable_Profiler: REACT_PROFILER_TYPE,

      createElement: createElementWithValidation,
      cloneElement: cloneElementWithValidation,
      createFactory: createFactoryWithValidation,
      isValidElement: isValidElement,

      version: ReactVersion,

      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactSharedInternals
    };

    var React$2 = Object.freeze({
      default: React
    });

    var React$3 = React$2 && React || React$2;

    // TODO: decide on the top-level export form.
    // This is hacky but makes it work with both Rollup and Jest.
    var react = React$3.default || React$3;

    module.exports = react;
  })();
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {
    return;
  }
  if (process.env.NODE_ENV !== 'production') {
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
  }
  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}

if (process.env.NODE_ENV === 'production') {
  // DCE check should happen before ReactDOM bundle executes so that
  // DevTools can report bad minification during injection.
  checkDCE();
  module.exports = __webpack_require__(77);
} else {
  module.exports = __webpack_require__(80);
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.6.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var aa = __webpack_require__(5),
    n = __webpack_require__(24),
    da = __webpack_require__(40);function ea(a, b, c, d, e, f, g, h) {
  if (!a) {
    a = void 0;if (void 0 === b) a = Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else {
      var k = [c, d, e, f, g, h],
          l = 0;a = Error(b.replace(/%s/g, function () {
        return k[l++];
      }));a.name = "Invariant Violation";
    }a.framesToPop = 1;throw a;
  }
}
function r(a) {
  for (var b = arguments.length - 1, c = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, d = 0; d < b; d++) {
    c += "&args[]=" + encodeURIComponent(arguments[d + 1]);
  }ea(!1, "Minified React error #" + a + "; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ", c);
}aa ? void 0 : r("227");function fa(a, b, c, d, e, f, g, h, k) {
  var l = Array.prototype.slice.call(arguments, 3);try {
    b.apply(c, l);
  } catch (m) {
    this.onError(m);
  }
}
var ha = !1,
    ia = null,
    ja = !1,
    ka = null,
    la = { onError: function onError(a) {
    ha = !0;ia = a;
  } };function ma(a, b, c, d, e, f, g, h, k) {
  ha = !1;ia = null;fa.apply(la, arguments);
}function na(a, b, c, d, e, f, g, h, k) {
  ma.apply(this, arguments);if (ha) {
    if (ha) {
      var l = ia;ha = !1;ia = null;
    } else r("198"), l = void 0;ja || (ja = !0, ka = l);
  }
}var oa = null,
    pa = {};
function qa() {
  if (oa) for (var a in pa) {
    var b = pa[a],
        c = oa.indexOf(a);-1 < c ? void 0 : r("96", a);if (!ra[c]) {
      b.extractEvents ? void 0 : r("97", a);ra[c] = b;c = b.eventTypes;for (var d in c) {
        var e = void 0;var f = c[d],
            g = b,
            h = d;sa.hasOwnProperty(h) ? r("99", h) : void 0;sa[h] = f;var k = f.phasedRegistrationNames;if (k) {
          for (e in k) {
            k.hasOwnProperty(e) && ta(k[e], g, h);
          }e = !0;
        } else f.registrationName ? (ta(f.registrationName, g, h), e = !0) : e = !1;e ? void 0 : r("98", d, a);
      }
    }
  }
}
function ta(a, b, c) {
  ua[a] ? r("100", a) : void 0;ua[a] = b;va[a] = b.eventTypes[c].dependencies;
}var ra = [],
    sa = {},
    ua = {},
    va = {},
    wa = null,
    xa = null,
    ya = null;function za(a, b, c, d) {
  b = a.type || "unknown-event";a.currentTarget = ya(d);na(b, c, void 0, a);a.currentTarget = null;
}function Aa(a, b) {
  null == b ? r("30") : void 0;if (null == a) return b;if (Array.isArray(a)) {
    if (Array.isArray(b)) return a.push.apply(a, b), a;a.push(b);return a;
  }return Array.isArray(b) ? [a].concat(b) : [a, b];
}
function Ba(a, b, c) {
  Array.isArray(a) ? a.forEach(b, c) : a && b.call(c, a);
}var Ca = null;function Da(a, b) {
  if (a) {
    var c = a._dispatchListeners,
        d = a._dispatchInstances;if (Array.isArray(c)) for (var e = 0; e < c.length && !a.isPropagationStopped(); e++) {
      za(a, b, c[e], d[e]);
    } else c && za(a, b, c, d);a._dispatchListeners = null;a._dispatchInstances = null;a.isPersistent() || a.constructor.release(a);
  }
}function Ea(a) {
  return Da(a, !0);
}function Fa(a) {
  return Da(a, !1);
}
var Ga = { injectEventPluginOrder: function injectEventPluginOrder(a) {
    oa ? r("101") : void 0;oa = Array.prototype.slice.call(a);qa();
  }, injectEventPluginsByName: function injectEventPluginsByName(a) {
    var b = !1,
        c;for (c in a) {
      if (a.hasOwnProperty(c)) {
        var d = a[c];pa.hasOwnProperty(c) && pa[c] === d || (pa[c] ? r("102", c) : void 0, pa[c] = d, b = !0);
      }
    }b && qa();
  } };
function Ha(a, b) {
  var c = a.stateNode;if (!c) return null;var d = wa(c);if (!d) return null;c = d[b];a: switch (b) {case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":
      (d = !d.disabled) || (a = a.type, d = !("button" === a || "input" === a || "select" === a || "textarea" === a));a = !d;break a;default:
      a = !1;}if (a) return null;c && "function" !== typeof c ? r("231", b, typeof c === "undefined" ? "undefined" : _typeof(c)) : void 0;
  return c;
}function Ia(a, b) {
  null !== a && (Ca = Aa(Ca, a));a = Ca;Ca = null;if (a && (b ? Ba(a, Ea) : Ba(a, Fa), Ca ? r("95") : void 0, ja)) throw b = ka, ja = !1, ka = null, b;
}var Ka = Math.random().toString(36).slice(2),
    La = "__reactInternalInstance$" + Ka,
    Ma = "__reactEventHandlers$" + Ka;function Na(a) {
  if (a[La]) return a[La];for (; !a[La];) {
    if (a.parentNode) a = a.parentNode;else return null;
  }a = a[La];return 5 === a.tag || 6 === a.tag ? a : null;
}function Oa(a) {
  a = a[La];return !a || 5 !== a.tag && 6 !== a.tag ? null : a;
}
function Pa(a) {
  if (5 === a.tag || 6 === a.tag) return a.stateNode;r("33");
}function Qa(a) {
  return a[Ma] || null;
}function Ra(a) {
  do {
    a = a.return;
  } while (a && 5 !== a.tag);return a ? a : null;
}function Sa(a, b, c) {
  if (b = Ha(a, c.dispatchConfig.phasedRegistrationNames[b])) c._dispatchListeners = Aa(c._dispatchListeners, b), c._dispatchInstances = Aa(c._dispatchInstances, a);
}
function Ta(a) {
  if (a && a.dispatchConfig.phasedRegistrationNames) {
    for (var b = a._targetInst, c = []; b;) {
      c.push(b), b = Ra(b);
    }for (b = c.length; 0 < b--;) {
      Sa(c[b], "captured", a);
    }for (b = 0; b < c.length; b++) {
      Sa(c[b], "bubbled", a);
    }
  }
}function Ua(a, b, c) {
  a && c && c.dispatchConfig.registrationName && (b = Ha(a, c.dispatchConfig.registrationName)) && (c._dispatchListeners = Aa(c._dispatchListeners, b), c._dispatchInstances = Aa(c._dispatchInstances, a));
}function Va(a) {
  a && a.dispatchConfig.registrationName && Ua(a._targetInst, null, a);
}
function Wa(a) {
  Ba(a, Ta);
}var Xa = !("undefined" === typeof window || !window.document || !window.document.createElement);function Ya(a, b) {
  var c = {};c[a.toLowerCase()] = b.toLowerCase();c["Webkit" + a] = "webkit" + b;c["Moz" + a] = "moz" + b;return c;
}var Za = { animationend: Ya("Animation", "AnimationEnd"), animationiteration: Ya("Animation", "AnimationIteration"), animationstart: Ya("Animation", "AnimationStart"), transitionend: Ya("Transition", "TransitionEnd") },
    $a = {},
    ab = {};
Xa && (ab = document.createElement("div").style, "AnimationEvent" in window || (delete Za.animationend.animation, delete Za.animationiteration.animation, delete Za.animationstart.animation), "TransitionEvent" in window || delete Za.transitionend.transition);function bb(a) {
  if ($a[a]) return $a[a];if (!Za[a]) return a;var b = Za[a],
      c;for (c in b) {
    if (b.hasOwnProperty(c) && c in ab) return $a[a] = b[c];
  }return a;
}
var cb = bb("animationend"),
    ib = bb("animationiteration"),
    jb = bb("animationstart"),
    kb = bb("transitionend"),
    lb = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),
    mb = null,
    nb = null,
    ob = null;
function pb() {
  if (ob) return ob;var a,
      b = nb,
      c = b.length,
      d,
      e = "value" in mb ? mb.value : mb.textContent,
      f = e.length;for (a = 0; a < c && b[a] === e[a]; a++) {}var g = c - a;for (d = 1; d <= g && b[c - d] === e[f - d]; d++) {}return ob = e.slice(a, 1 < d ? 1 - d : void 0);
}function qb() {
  return !0;
}function rb() {
  return !1;
}
function y(a, b, c, d) {
  this.dispatchConfig = a;this._targetInst = b;this.nativeEvent = c;a = this.constructor.Interface;for (var e in a) {
    a.hasOwnProperty(e) && ((b = a[e]) ? this[e] = b(c) : "target" === e ? this.target = d : this[e] = c[e]);
  }this.isDefaultPrevented = (null != c.defaultPrevented ? c.defaultPrevented : !1 === c.returnValue) ? qb : rb;this.isPropagationStopped = rb;return this;
}
n(y.prototype, { preventDefault: function preventDefault() {
    this.defaultPrevented = !0;var a = this.nativeEvent;a && (a.preventDefault ? a.preventDefault() : "unknown" !== typeof a.returnValue && (a.returnValue = !1), this.isDefaultPrevented = qb);
  }, stopPropagation: function stopPropagation() {
    var a = this.nativeEvent;a && (a.stopPropagation ? a.stopPropagation() : "unknown" !== typeof a.cancelBubble && (a.cancelBubble = !0), this.isPropagationStopped = qb);
  }, persist: function persist() {
    this.isPersistent = qb;
  }, isPersistent: rb, destructor: function destructor() {
    var a = this.constructor.Interface,
        b;for (b in a) {
      this[b] = null;
    }this.nativeEvent = this._targetInst = this.dispatchConfig = null;this.isPropagationStopped = this.isDefaultPrevented = rb;this._dispatchInstances = this._dispatchListeners = null;
  } });y.Interface = { type: null, target: null, currentTarget: function currentTarget() {
    return null;
  }, eventPhase: null, bubbles: null, cancelable: null, timeStamp: function timeStamp(a) {
    return a.timeStamp || Date.now();
  }, defaultPrevented: null, isTrusted: null };
y.extend = function (a) {
  function b() {}function c() {
    return d.apply(this, arguments);
  }var d = this;b.prototype = d.prototype;var e = new b();n(e, c.prototype);c.prototype = e;c.prototype.constructor = c;c.Interface = n({}, d.Interface, a);c.extend = d.extend;sb(c);return c;
};sb(y);function tb(a, b, c, d) {
  if (this.eventPool.length) {
    var e = this.eventPool.pop();this.call(e, a, b, c, d);return e;
  }return new this(a, b, c, d);
}function ub(a) {
  a instanceof this ? void 0 : r("279");a.destructor();10 > this.eventPool.length && this.eventPool.push(a);
}
function sb(a) {
  a.eventPool = [];a.getPooled = tb;a.release = ub;
}var vb = y.extend({ data: null }),
    wb = y.extend({ data: null }),
    xb = [9, 13, 27, 32],
    yb = Xa && "CompositionEvent" in window,
    zb = null;Xa && "documentMode" in document && (zb = document.documentMode);
var Ab = Xa && "TextEvent" in window && !zb,
    Bb = Xa && (!yb || zb && 8 < zb && 11 >= zb),
    Cb = String.fromCharCode(32),
    Db = { beforeInput: { phasedRegistrationNames: { bubbled: "onBeforeInput", captured: "onBeforeInputCapture" }, dependencies: ["compositionend", "keypress", "textInput", "paste"] }, compositionEnd: { phasedRegistrationNames: { bubbled: "onCompositionEnd", captured: "onCompositionEndCapture" }, dependencies: "blur compositionend keydown keypress keyup mousedown".split(" ") }, compositionStart: { phasedRegistrationNames: { bubbled: "onCompositionStart",
      captured: "onCompositionStartCapture" }, dependencies: "blur compositionstart keydown keypress keyup mousedown".split(" ") }, compositionUpdate: { phasedRegistrationNames: { bubbled: "onCompositionUpdate", captured: "onCompositionUpdateCapture" }, dependencies: "blur compositionupdate keydown keypress keyup mousedown".split(" ") } },
    Eb = !1;
function Fb(a, b) {
  switch (a) {case "keyup":
      return -1 !== xb.indexOf(b.keyCode);case "keydown":
      return 229 !== b.keyCode;case "keypress":case "mousedown":case "blur":
      return !0;default:
      return !1;}
}function Gb(a) {
  a = a.detail;return "object" === (typeof a === "undefined" ? "undefined" : _typeof(a)) && "data" in a ? a.data : null;
}var Hb = !1;function Kb(a, b) {
  switch (a) {case "compositionend":
      return Gb(b);case "keypress":
      if (32 !== b.which) return null;Eb = !0;return Cb;case "textInput":
      return a = b.data, a === Cb && Eb ? null : a;default:
      return null;}
}
function Lb(a, b) {
  if (Hb) return "compositionend" === a || !yb && Fb(a, b) ? (a = pb(), ob = nb = mb = null, Hb = !1, a) : null;switch (a) {case "paste":
      return null;case "keypress":
      if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {
        if (b.char && 1 < b.char.length) return b.char;if (b.which) return String.fromCharCode(b.which);
      }return null;case "compositionend":
      return Bb && "ko" !== b.locale ? null : b.data;default:
      return null;}
}
var Mb = { eventTypes: Db, extractEvents: function extractEvents(a, b, c, d) {
    var e = void 0;var f = void 0;if (yb) b: {
      switch (a) {case "compositionstart":
          e = Db.compositionStart;break b;case "compositionend":
          e = Db.compositionEnd;break b;case "compositionupdate":
          e = Db.compositionUpdate;break b;}e = void 0;
    } else Hb ? Fb(a, c) && (e = Db.compositionEnd) : "keydown" === a && 229 === c.keyCode && (e = Db.compositionStart);e ? (Bb && "ko" !== c.locale && (Hb || e !== Db.compositionStart ? e === Db.compositionEnd && Hb && (f = pb()) : (mb = d, nb = "value" in mb ? mb.value : mb.textContent, Hb = !0)), e = vb.getPooled(e, b, c, d), f ? e.data = f : (f = Gb(c), null !== f && (e.data = f)), Wa(e), f = e) : f = null;(a = Ab ? Kb(a, c) : Lb(a, c)) ? (b = wb.getPooled(Db.beforeInput, b, c, d), b.data = a, Wa(b)) : b = null;return null === f ? b : null === b ? f : [f, b];
  } },
    Nb = null,
    Ob = null,
    Pb = null;function Vb(a) {
  if (a = xa(a)) {
    "function" !== typeof Nb ? r("280") : void 0;var b = wa(a.stateNode);Nb(a.stateNode, a.type, b);
  }
}function Wb(a) {
  Ob ? Pb ? Pb.push(a) : Pb = [a] : Ob = a;
}function Xb() {
  if (Ob) {
    var a = Ob,
        b = Pb;Pb = Ob = null;Vb(a);if (b) for (a = 0; a < b.length; a++) {
      Vb(b[a]);
    }
  }
}
function Yb(a, b) {
  return a(b);
}function Zb(a, b, c) {
  return a(b, c);
}function $b() {}var ac = !1;function bc(a, b) {
  if (ac) return a(b);ac = !0;try {
    return Yb(a, b);
  } finally {
    if (ac = !1, null !== Ob || null !== Pb) $b(), Xb();
  }
}var cc = { color: !0, date: !0, datetime: !0, "datetime-local": !0, email: !0, month: !0, number: !0, password: !0, range: !0, search: !0, tel: !0, text: !0, time: !0, url: !0, week: !0 };function dc(a) {
  var b = a && a.nodeName && a.nodeName.toLowerCase();return "input" === b ? !!cc[a.type] : "textarea" === b ? !0 : !1;
}
function ec(a) {
  a = a.target || a.srcElement || window;a.correspondingUseElement && (a = a.correspondingUseElement);return 3 === a.nodeType ? a.parentNode : a;
}function fc(a) {
  if (!Xa) return !1;a = "on" + a;var b = a in document;b || (b = document.createElement("div"), b.setAttribute(a, "return;"), b = "function" === typeof b[a]);return b;
}function gc(a) {
  var b = a.type;return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b || "radio" === b);
}
function hc(a) {
  var b = gc(a) ? "checked" : "value",
      c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b),
      d = "" + a[b];if (!a.hasOwnProperty(b) && "undefined" !== typeof c && "function" === typeof c.get && "function" === typeof c.set) {
    var e = c.get,
        f = c.set;Object.defineProperty(a, b, { configurable: !0, get: function get() {
        return e.call(this);
      }, set: function set(a) {
        d = "" + a;f.call(this, a);
      } });Object.defineProperty(a, b, { enumerable: c.enumerable });return { getValue: function getValue() {
        return d;
      }, setValue: function setValue(a) {
        d = "" + a;
      }, stopTracking: function stopTracking() {
        a._valueTracker = null;delete a[b];
      } };
  }
}function ic(a) {
  a._valueTracker || (a._valueTracker = hc(a));
}function jc(a) {
  if (!a) return !1;var b = a._valueTracker;if (!b) return !0;var c = b.getValue();var d = "";a && (d = gc(a) ? a.checked ? "true" : "false" : a.value);a = d;return a !== c ? (b.setValue(a), !0) : !1;
}
var kc = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
    lc = /^(.*)[\\\/]/,
    D = "function" === typeof Symbol && Symbol.for,
    mc = D ? Symbol.for("react.element") : 60103,
    nc = D ? Symbol.for("react.portal") : 60106,
    oc = D ? Symbol.for("react.fragment") : 60107,
    pc = D ? Symbol.for("react.strict_mode") : 60108,
    qc = D ? Symbol.for("react.profiler") : 60114,
    rc = D ? Symbol.for("react.provider") : 60109,
    sc = D ? Symbol.for("react.context") : 60110,
    tc = D ? Symbol.for("react.concurrent_mode") : 60111,
    uc = D ? Symbol.for("react.forward_ref") : 60112,
    vc = D ? Symbol.for("react.suspense") : 60113,
    wc = D ? Symbol.for("react.memo") : 60115,
    xc = D ? Symbol.for("react.lazy") : 60116,
    yc = "function" === typeof Symbol && Symbol.iterator;function zc(a) {
  if (null === a || "object" !== (typeof a === "undefined" ? "undefined" : _typeof(a))) return null;a = yc && a[yc] || a["@@iterator"];return "function" === typeof a ? a : null;
}
function Ac(a) {
  if (null == a) return null;if ("function" === typeof a) return a.displayName || a.name || null;if ("string" === typeof a) return a;switch (a) {case tc:
      return "ConcurrentMode";case oc:
      return "Fragment";case nc:
      return "Portal";case qc:
      return "Profiler";case pc:
      return "StrictMode";case vc:
      return "Suspense";}if ("object" === (typeof a === "undefined" ? "undefined" : _typeof(a))) switch (a.$$typeof) {case sc:
      return "Context.Consumer";case rc:
      return "Context.Provider";case uc:
      var b = a.render;b = b.displayName || b.name || "";return a.displayName || ("" !== b ? "ForwardRef(" + b + ")" : "ForwardRef");case wc:
      return Ac(a.type);case xc:
      if (a = 1 === a._status ? a._result : null) return Ac(a);}return null;
}function Bc(a) {
  var b = "";do {
    a: switch (a.tag) {case 2:case 16:case 0:case 1:case 5:case 8:
        var c = a._debugOwner,
            d = a._debugSource,
            e = Ac(a.type);var f = null;c && (f = Ac(c.type));c = e;e = "";d ? e = " (at " + d.fileName.replace(lc, "") + ":" + d.lineNumber + ")" : f && (e = " (created by " + f + ")");f = "\n    in " + (c || "Unknown") + e;break a;default:
        f = "";}b += f;a = a.return;
  } while (a);return b;
}
var Cc = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,
    Dc = Object.prototype.hasOwnProperty,
    Ec = {},
    Fc = {};
function Gc(a) {
  if (Dc.call(Fc, a)) return !0;if (Dc.call(Ec, a)) return !1;if (Cc.test(a)) return Fc[a] = !0;Ec[a] = !0;return !1;
}function Hc(a, b, c, d) {
  if (null !== c && 0 === c.type) return !1;switch (typeof b === "undefined" ? "undefined" : _typeof(b)) {case "function":case "symbol":
      return !0;case "boolean":
      if (d) return !1;if (null !== c) return !c.acceptsBooleans;a = a.toLowerCase().slice(0, 5);return "data-" !== a && "aria-" !== a;default:
      return !1;}
}
function Ic(a, b, c, d) {
  if (null === b || "undefined" === typeof b || Hc(a, b, c, d)) return !0;if (d) return !1;if (null !== c) switch (c.type) {case 3:
      return !b;case 4:
      return !1 === b;case 5:
      return isNaN(b);case 6:
      return isNaN(b) || 1 > b;}return !1;
}function F(a, b, c, d, e) {
  this.acceptsBooleans = 2 === b || 3 === b || 4 === b;this.attributeName = d;this.attributeNamespace = e;this.mustUseProperty = c;this.propertyName = a;this.type = b;
}var G = {};
"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function (a) {
  G[a] = new F(a, 0, !1, a, null);
});[["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function (a) {
  var b = a[0];G[b] = new F(b, 1, !1, a[1], null);
});["contentEditable", "draggable", "spellCheck", "value"].forEach(function (a) {
  G[a] = new F(a, 2, !1, a.toLowerCase(), null);
});
["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function (a) {
  G[a] = new F(a, 2, !1, a, null);
});"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function (a) {
  G[a] = new F(a, 3, !1, a.toLowerCase(), null);
});["checked", "multiple", "muted", "selected"].forEach(function (a) {
  G[a] = new F(a, 3, !0, a, null);
});
["capture", "download"].forEach(function (a) {
  G[a] = new F(a, 4, !1, a, null);
});["cols", "rows", "size", "span"].forEach(function (a) {
  G[a] = new F(a, 6, !1, a, null);
});["rowSpan", "start"].forEach(function (a) {
  G[a] = new F(a, 5, !1, a.toLowerCase(), null);
});var Mc = /[\-:]([a-z])/g;function Nc(a) {
  return a[1].toUpperCase();
}
"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function (a) {
  var b = a.replace(Mc, Nc);G[b] = new F(b, 1, !1, a, null);
});"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function (a) {
  var b = a.replace(Mc, Nc);G[b] = new F(b, 1, !1, a, "http://www.w3.org/1999/xlink");
});["xml:base", "xml:lang", "xml:space"].forEach(function (a) {
  var b = a.replace(Mc, Nc);G[b] = new F(b, 1, !1, a, "http://www.w3.org/XML/1998/namespace");
});G.tabIndex = new F("tabIndex", 1, !1, "tabindex", null);
function Oc(a, b, c, d) {
  var e = G.hasOwnProperty(b) ? G[b] : null;var f = null !== e ? 0 === e.type : d ? !1 : !(2 < b.length) || "o" !== b[0] && "O" !== b[0] || "n" !== b[1] && "N" !== b[1] ? !1 : !0;f || (Ic(b, c, e, d) && (c = null), d || null === e ? Gc(b) && (null === c ? a.removeAttribute(b) : a.setAttribute(b, "" + c)) : e.mustUseProperty ? a[e.propertyName] = null === c ? 3 === e.type ? !1 : "" : c : (b = e.attributeName, d = e.attributeNamespace, null === c ? a.removeAttribute(b) : (e = e.type, c = 3 === e || 4 === e && !0 === c ? "" : "" + c, d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c))));
}
function Pc(a) {
  switch (typeof a === "undefined" ? "undefined" : _typeof(a)) {case "boolean":case "number":case "object":case "string":case "undefined":
      return a;default:
      return "";}
}function Qc(a, b) {
  var c = b.checked;return n({}, b, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: null != c ? c : a._wrapperState.initialChecked });
}
function Rc(a, b) {
  var c = null == b.defaultValue ? "" : b.defaultValue,
      d = null != b.checked ? b.checked : b.defaultChecked;c = Pc(null != b.value ? b.value : c);a._wrapperState = { initialChecked: d, initialValue: c, controlled: "checkbox" === b.type || "radio" === b.type ? null != b.checked : null != b.value };
}function Sc(a, b) {
  b = b.checked;null != b && Oc(a, "checked", b, !1);
}
function Tc(a, b) {
  Sc(a, b);var c = Pc(b.value),
      d = b.type;if (null != c) {
    if ("number" === d) {
      if (0 === c && "" === a.value || a.value != c) a.value = "" + c;
    } else a.value !== "" + c && (a.value = "" + c);
  } else if ("submit" === d || "reset" === d) {
    a.removeAttribute("value");return;
  }b.hasOwnProperty("value") ? Uc(a, b.type, c) : b.hasOwnProperty("defaultValue") && Uc(a, b.type, Pc(b.defaultValue));null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);
}
function bd(a, b, c) {
  if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {
    var d = b.type;if (!("submit" !== d && "reset" !== d || void 0 !== b.value && null !== b.value)) return;b = "" + a._wrapperState.initialValue;c || b === a.value || (a.value = b);a.defaultValue = b;
  }c = a.name;"" !== c && (a.name = "");a.defaultChecked = !a.defaultChecked;a.defaultChecked = !!a._wrapperState.initialChecked;"" !== c && (a.name = c);
}
function Uc(a, b, c) {
  if ("number" !== b || a.ownerDocument.activeElement !== a) null == c ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c && (a.defaultValue = "" + c);
}var cd = { change: { phasedRegistrationNames: { bubbled: "onChange", captured: "onChangeCapture" }, dependencies: "blur change click focus input keydown keyup selectionchange".split(" ") } };function dd(a, b, c) {
  a = y.getPooled(cd.change, a, b, c);a.type = "change";Wb(c);Wa(a);return a;
}var ed = null,
    fd = null;function gd(a) {
  Ia(a, !1);
}
function hd(a) {
  var b = Pa(a);if (jc(b)) return a;
}function id(a, b) {
  if ("change" === a) return b;
}var jd = !1;Xa && (jd = fc("input") && (!document.documentMode || 9 < document.documentMode));function kd() {
  ed && (ed.detachEvent("onpropertychange", ld), fd = ed = null);
}function ld(a) {
  "value" === a.propertyName && hd(fd) && (a = dd(fd, a, ec(a)), bc(gd, a));
}function md(a, b, c) {
  "focus" === a ? (kd(), ed = b, fd = c, ed.attachEvent("onpropertychange", ld)) : "blur" === a && kd();
}function nd(a) {
  if ("selectionchange" === a || "keyup" === a || "keydown" === a) return hd(fd);
}
function od(a, b) {
  if ("click" === a) return hd(b);
}function pd(a, b) {
  if ("input" === a || "change" === a) return hd(b);
}
var qd = { eventTypes: cd, _isInputEventSupported: jd, extractEvents: function extractEvents(a, b, c, d) {
    var e = b ? Pa(b) : window,
        f = void 0,
        g = void 0,
        h = e.nodeName && e.nodeName.toLowerCase();"select" === h || "input" === h && "file" === e.type ? f = id : dc(e) ? jd ? f = pd : (f = nd, g = md) : (h = e.nodeName) && "input" === h.toLowerCase() && ("checkbox" === e.type || "radio" === e.type) && (f = od);if (f && (f = f(a, b))) return dd(f, c, d);g && g(a, e, b);"blur" === a && (a = e._wrapperState) && a.controlled && "number" === e.type && Uc(e, "number", e.value);
  } },
    rd = y.extend({ view: null, detail: null }),
    sd = { Alt: "altKey",
  Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };function td(a) {
  var b = this.nativeEvent;return b.getModifierState ? b.getModifierState(a) : (a = sd[a]) ? !!b[a] : !1;
}function ud() {
  return td;
}
var vd = 0,
    wd = 0,
    xd = !1,
    yd = !1,
    zd = rd.extend({ screenX: null, screenY: null, clientX: null, clientY: null, pageX: null, pageY: null, ctrlKey: null, shiftKey: null, altKey: null, metaKey: null, getModifierState: ud, button: null, buttons: null, relatedTarget: function relatedTarget(a) {
    return a.relatedTarget || (a.fromElement === a.srcElement ? a.toElement : a.fromElement);
  }, movementX: function movementX(a) {
    if ("movementX" in a) return a.movementX;var b = vd;vd = a.screenX;return xd ? "mousemove" === a.type ? a.screenX - b : 0 : (xd = !0, 0);
  }, movementY: function movementY(a) {
    if ("movementY" in a) return a.movementY;
    var b = wd;wd = a.screenY;return yd ? "mousemove" === a.type ? a.screenY - b : 0 : (yd = !0, 0);
  } }),
    Ad = zd.extend({ pointerId: null, width: null, height: null, pressure: null, tangentialPressure: null, tiltX: null, tiltY: null, twist: null, pointerType: null, isPrimary: null }),
    Bd = { mouseEnter: { registrationName: "onMouseEnter", dependencies: ["mouseout", "mouseover"] }, mouseLeave: { registrationName: "onMouseLeave", dependencies: ["mouseout", "mouseover"] }, pointerEnter: { registrationName: "onPointerEnter", dependencies: ["pointerout", "pointerover"] }, pointerLeave: { registrationName: "onPointerLeave",
    dependencies: ["pointerout", "pointerover"] } },
    Cd = { eventTypes: Bd, extractEvents: function extractEvents(a, b, c, d) {
    var e = "mouseover" === a || "pointerover" === a,
        f = "mouseout" === a || "pointerout" === a;if (e && (c.relatedTarget || c.fromElement) || !f && !e) return null;e = d.window === d ? d : (e = d.ownerDocument) ? e.defaultView || e.parentWindow : window;f ? (f = b, b = (b = c.relatedTarget || c.toElement) ? Na(b) : null) : f = null;if (f === b) return null;var g = void 0,
        h = void 0,
        k = void 0,
        l = void 0;if ("mouseout" === a || "mouseover" === a) g = zd, h = Bd.mouseLeave, k = Bd.mouseEnter, l = "mouse";else if ("pointerout" === a || "pointerover" === a) g = Ad, h = Bd.pointerLeave, k = Bd.pointerEnter, l = "pointer";var m = null == f ? e : Pa(f);e = null == b ? e : Pa(b);a = g.getPooled(h, f, c, d);a.type = l + "leave";a.target = m;a.relatedTarget = e;c = g.getPooled(k, b, c, d);c.type = l + "enter";c.target = e;c.relatedTarget = m;d = b;if (f && d) a: {
      b = f;e = d;l = 0;for (g = b; g; g = Ra(g)) {
        l++;
      }g = 0;for (k = e; k; k = Ra(k)) {
        g++;
      }for (; 0 < l - g;) {
        b = Ra(b), l--;
      }for (; 0 < g - l;) {
        e = Ra(e), g--;
      }for (; l--;) {
        if (b === e || b === e.alternate) break a;b = Ra(b);e = Ra(e);
      }b = null;
    } else b = null;e = b;for (b = []; f && f !== e;) {
      l = f.alternate;if (null !== l && l === e) break;b.push(f);f = Ra(f);
    }for (f = []; d && d !== e;) {
      l = d.alternate;if (null !== l && l === e) break;f.push(d);d = Ra(d);
    }for (d = 0; d < b.length; d++) {
      Ua(b[d], "bubbled", a);
    }for (d = f.length; 0 < d--;) {
      Ua(f[d], "captured", c);
    }return [a, c];
  } },
    Dd = Object.prototype.hasOwnProperty;function Ed(a, b) {
  return a === b ? 0 !== a || 0 !== b || 1 / a === 1 / b : a !== a && b !== b;
}
function Fd(a, b) {
  if (Ed(a, b)) return !0;if ("object" !== (typeof a === "undefined" ? "undefined" : _typeof(a)) || null === a || "object" !== (typeof b === "undefined" ? "undefined" : _typeof(b)) || null === b) return !1;var c = Object.keys(a),
      d = Object.keys(b);if (c.length !== d.length) return !1;for (d = 0; d < c.length; d++) {
    if (!Dd.call(b, c[d]) || !Ed(a[c[d]], b[c[d]])) return !1;
  }return !0;
}function Gd(a) {
  var b = a;if (a.alternate) for (; b.return;) {
    b = b.return;
  } else {
    if (0 !== (b.effectTag & 2)) return 1;for (; b.return;) {
      if (b = b.return, 0 !== (b.effectTag & 2)) return 1;
    }
  }return 3 === b.tag ? 2 : 3;
}function Hd(a) {
  2 !== Gd(a) ? r("188") : void 0;
}
function Id(a) {
  var b = a.alternate;if (!b) return b = Gd(a), 3 === b ? r("188") : void 0, 1 === b ? null : a;for (var c = a, d = b;;) {
    var e = c.return,
        f = e ? e.alternate : null;if (!e || !f) break;if (e.child === f.child) {
      for (var g = e.child; g;) {
        if (g === c) return Hd(e), a;if (g === d) return Hd(e), b;g = g.sibling;
      }r("188");
    }if (c.return !== d.return) c = e, d = f;else {
      g = !1;for (var h = e.child; h;) {
        if (h === c) {
          g = !0;c = e;d = f;break;
        }if (h === d) {
          g = !0;d = e;c = f;break;
        }h = h.sibling;
      }if (!g) {
        for (h = f.child; h;) {
          if (h === c) {
            g = !0;c = f;d = e;break;
          }if (h === d) {
            g = !0;d = f;c = e;break;
          }h = h.sibling;
        }g ? void 0 : r("189");
      }
    }c.alternate !== d ? r("190") : void 0;
  }3 !== c.tag ? r("188") : void 0;return c.stateNode.current === c ? a : b;
}function Jd(a) {
  a = Id(a);if (!a) return null;for (var b = a;;) {
    if (5 === b.tag || 6 === b.tag) return b;if (b.child) b.child.return = b, b = b.child;else {
      if (b === a) break;for (; !b.sibling;) {
        if (!b.return || b.return === a) return null;b = b.return;
      }b.sibling.return = b.return;b = b.sibling;
    }
  }return null;
}
var Kd = y.extend({ animationName: null, elapsedTime: null, pseudoElement: null }),
    Ld = y.extend({ clipboardData: function clipboardData(a) {
    return "clipboardData" in a ? a.clipboardData : window.clipboardData;
  } }),
    Md = rd.extend({ relatedTarget: null });function Nd(a) {
  var b = a.keyCode;"charCode" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;10 === a && (a = 13);return 32 <= a || 13 === a ? a : 0;
}
var Od = { Esc: "Escape", Spacebar: " ", Left: "ArrowLeft", Up: "ArrowUp", Right: "ArrowRight", Down: "ArrowDown", Del: "Delete", Win: "OS", Menu: "ContextMenu", Apps: "ContextMenu", Scroll: "ScrollLock", MozPrintableKey: "Unidentified" },
    Pd = { 8: "Backspace", 9: "Tab", 12: "Clear", 13: "Enter", 16: "Shift", 17: "Control", 18: "Alt", 19: "Pause", 20: "CapsLock", 27: "Escape", 32: " ", 33: "PageUp", 34: "PageDown", 35: "End", 36: "Home", 37: "ArrowLeft", 38: "ArrowUp", 39: "ArrowRight", 40: "ArrowDown", 45: "Insert", 46: "Delete", 112: "F1", 113: "F2", 114: "F3", 115: "F4",
  116: "F5", 117: "F6", 118: "F7", 119: "F8", 120: "F9", 121: "F10", 122: "F11", 123: "F12", 144: "NumLock", 145: "ScrollLock", 224: "Meta" },
    Qd = rd.extend({ key: function key(a) {
    if (a.key) {
      var b = Od[a.key] || a.key;if ("Unidentified" !== b) return b;
    }return "keypress" === a.type ? (a = Nd(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? Pd[a.keyCode] || "Unidentified" : "";
  }, location: null, ctrlKey: null, shiftKey: null, altKey: null, metaKey: null, repeat: null, locale: null, getModifierState: ud, charCode: function charCode(a) {
    return "keypress" === a.type ? Nd(a) : 0;
  }, keyCode: function keyCode(a) {
    return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
  }, which: function which(a) {
    return "keypress" === a.type ? Nd(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
  } }),
    Rd = zd.extend({ dataTransfer: null }),
    Sd = rd.extend({ touches: null, targetTouches: null, changedTouches: null, altKey: null, metaKey: null, ctrlKey: null, shiftKey: null, getModifierState: ud }),
    Td = y.extend({ propertyName: null, elapsedTime: null, pseudoElement: null }),
    Ud = zd.extend({ deltaX: function deltaX(a) {
    return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
  }, deltaY: function deltaY(a) {
    return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
  }, deltaZ: null, deltaMode: null }),
    Vd = [["abort", "abort"], [cb, "animationEnd"], [ib, "animationIteration"], [jb, "animationStart"], ["canplay", "canPlay"], ["canplaythrough", "canPlayThrough"], ["drag", "drag"], ["dragenter", "dragEnter"], ["dragexit", "dragExit"], ["dragleave", "dragLeave"], ["dragover", "dragOver"], ["durationchange", "durationChange"], ["emptied", "emptied"], ["encrypted", "encrypted"], ["ended", "ended"], ["error", "error"], ["gotpointercapture", "gotPointerCapture"], ["load", "load"], ["loadeddata", "loadedData"], ["loadedmetadata", "loadedMetadata"], ["loadstart", "loadStart"], ["lostpointercapture", "lostPointerCapture"], ["mousemove", "mouseMove"], ["mouseout", "mouseOut"], ["mouseover", "mouseOver"], ["playing", "playing"], ["pointermove", "pointerMove"], ["pointerout", "pointerOut"], ["pointerover", "pointerOver"], ["progress", "progress"], ["scroll", "scroll"], ["seeking", "seeking"], ["stalled", "stalled"], ["suspend", "suspend"], ["timeupdate", "timeUpdate"], ["toggle", "toggle"], ["touchmove", "touchMove"], [kb, "transitionEnd"], ["waiting", "waiting"], ["wheel", "wheel"]],
    Wd = {},
    Xd = {};function Yd(a, b) {
  var c = a[0];a = a[1];var d = "on" + (a[0].toUpperCase() + a.slice(1));b = { phasedRegistrationNames: { bubbled: d, captured: d + "Capture" }, dependencies: [c], isInteractive: b };Wd[a] = b;Xd[c] = b;
}
[["blur", "blur"], ["cancel", "cancel"], ["click", "click"], ["close", "close"], ["contextmenu", "contextMenu"], ["copy", "copy"], ["cut", "cut"], ["auxclick", "auxClick"], ["dblclick", "doubleClick"], ["dragend", "dragEnd"], ["dragstart", "dragStart"], ["drop", "drop"], ["focus", "focus"], ["input", "input"], ["invalid", "invalid"], ["keydown", "keyDown"], ["keypress", "keyPress"], ["keyup", "keyUp"], ["mousedown", "mouseDown"], ["mouseup", "mouseUp"], ["paste", "paste"], ["pause", "pause"], ["play", "play"], ["pointercancel", "pointerCancel"], ["pointerdown", "pointerDown"], ["pointerup", "pointerUp"], ["ratechange", "rateChange"], ["reset", "reset"], ["seeked", "seeked"], ["submit", "submit"], ["touchcancel", "touchCancel"], ["touchend", "touchEnd"], ["touchstart", "touchStart"], ["volumechange", "volumeChange"]].forEach(function (a) {
  Yd(a, !0);
});Vd.forEach(function (a) {
  Yd(a, !1);
});
var Zd = { eventTypes: Wd, isInteractiveTopLevelEventType: function isInteractiveTopLevelEventType(a) {
    a = Xd[a];return void 0 !== a && !0 === a.isInteractive;
  }, extractEvents: function extractEvents(a, b, c, d) {
    var e = Xd[a];if (!e) return null;switch (a) {case "keypress":
        if (0 === Nd(c)) return null;case "keydown":case "keyup":
        a = Qd;break;case "blur":case "focus":
        a = Md;break;case "click":
        if (2 === c.button) return null;case "auxclick":case "dblclick":case "mousedown":case "mousemove":case "mouseup":case "mouseout":case "mouseover":case "contextmenu":
        a = zd;break;case "drag":case "dragend":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "dragstart":case "drop":
        a = Rd;break;case "touchcancel":case "touchend":case "touchmove":case "touchstart":
        a = Sd;break;case cb:case ib:case jb:
        a = Kd;break;case kb:
        a = Td;break;case "scroll":
        a = rd;break;case "wheel":
        a = Ud;break;case "copy":case "cut":case "paste":
        a = Ld;break;case "gotpointercapture":case "lostpointercapture":case "pointercancel":case "pointerdown":case "pointermove":case "pointerout":case "pointerover":case "pointerup":
        a = Ad;break;default:
        a = y;}b = a.getPooled(e, b, c, d);Wa(b);return b;
  } },
    $d = Zd.isInteractiveTopLevelEventType,
    ae = [];function be(a) {
  var b = a.targetInst,
      c = b;do {
    if (!c) {
      a.ancestors.push(c);break;
    }var d;for (d = c; d.return;) {
      d = d.return;
    }d = 3 !== d.tag ? null : d.stateNode.containerInfo;if (!d) break;a.ancestors.push(c);c = Na(d);
  } while (c);for (c = 0; c < a.ancestors.length; c++) {
    b = a.ancestors[c];var e = ec(a.nativeEvent);d = a.topLevelType;for (var f = a.nativeEvent, g = null, h = 0; h < ra.length; h++) {
      var k = ra[h];k && (k = k.extractEvents(d, b, f, e)) && (g = Aa(g, k));
    }Ia(g, !1);
  }
}var ce = !0;
function H(a, b) {
  if (!b) return null;var c = ($d(a) ? de : ee).bind(null, a);b.addEventListener(a, c, !1);
}function ge(a, b) {
  if (!b) return null;var c = ($d(a) ? de : ee).bind(null, a);b.addEventListener(a, c, !0);
}function de(a, b) {
  Zb(ee, a, b);
}
function ee(a, b) {
  if (ce) {
    var c = ec(b);c = Na(c);null === c || "number" !== typeof c.tag || 2 === Gd(c) || (c = null);if (ae.length) {
      var d = ae.pop();d.topLevelType = a;d.nativeEvent = b;d.targetInst = c;a = d;
    } else a = { topLevelType: a, nativeEvent: b, targetInst: c, ancestors: [] };try {
      bc(be, a);
    } finally {
      a.topLevelType = null, a.nativeEvent = null, a.targetInst = null, a.ancestors.length = 0, 10 > ae.length && ae.push(a);
    }
  }
}var he = {},
    ie = 0,
    je = "_reactListenersID" + ("" + Math.random()).slice(2);
function ke(a) {
  Object.prototype.hasOwnProperty.call(a, je) || (a[je] = ie++, he[a[je]] = {});return he[a[je]];
}function le(a) {
  a = a || ("undefined" !== typeof document ? document : void 0);if ("undefined" === typeof a) return null;try {
    return a.activeElement || a.body;
  } catch (b) {
    return a.body;
  }
}function me(a) {
  for (; a && a.firstChild;) {
    a = a.firstChild;
  }return a;
}
function ne(a, b) {
  var c = me(a);a = 0;for (var d; c;) {
    if (3 === c.nodeType) {
      d = a + c.textContent.length;if (a <= b && d >= b) return { node: c, offset: b - a };a = d;
    }a: {
      for (; c;) {
        if (c.nextSibling) {
          c = c.nextSibling;break a;
        }c = c.parentNode;
      }c = void 0;
    }c = me(c);
  }
}function oe(a, b) {
  return a && b ? a === b ? !0 : a && 3 === a.nodeType ? !1 : b && 3 === b.nodeType ? oe(a, b.parentNode) : "contains" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : !1 : !1;
}
function pe() {
  for (var a = window, b = le(); b instanceof a.HTMLIFrameElement;) {
    try {
      a = b.contentDocument.defaultView;
    } catch (c) {
      break;
    }b = le(a.document);
  }return b;
}function qe(a) {
  var b = a && a.nodeName && a.nodeName.toLowerCase();return b && ("input" === b && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b || "true" === a.contentEditable);
}
var re = Xa && "documentMode" in document && 11 >= document.documentMode,
    se = { select: { phasedRegistrationNames: { bubbled: "onSelect", captured: "onSelectCapture" }, dependencies: "blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ") } },
    te = null,
    ue = null,
    He = null,
    Ie = !1;
function Je(a, b) {
  var c = b.window === b ? b.document : 9 === b.nodeType ? b : b.ownerDocument;if (Ie || null == te || te !== le(c)) return null;c = te;"selectionStart" in c && qe(c) ? c = { start: c.selectionStart, end: c.selectionEnd } : (c = (c.ownerDocument && c.ownerDocument.defaultView || window).getSelection(), c = { anchorNode: c.anchorNode, anchorOffset: c.anchorOffset, focusNode: c.focusNode, focusOffset: c.focusOffset });return He && Fd(He, c) ? null : (He = c, a = y.getPooled(se.select, ue, a, b), a.type = "select", a.target = te, Wa(a), a);
}
var Ke = { eventTypes: se, extractEvents: function extractEvents(a, b, c, d) {
    var e = d.window === d ? d.document : 9 === d.nodeType ? d : d.ownerDocument,
        f;if (!(f = !e)) {
      a: {
        e = ke(e);f = va.onSelect;for (var g = 0; g < f.length; g++) {
          var h = f[g];if (!e.hasOwnProperty(h) || !e[h]) {
            e = !1;break a;
          }
        }e = !0;
      }f = !e;
    }if (f) return null;e = b ? Pa(b) : window;switch (a) {case "focus":
        if (dc(e) || "true" === e.contentEditable) te = e, ue = b, He = null;break;case "blur":
        He = ue = te = null;break;case "mousedown":
        Ie = !0;break;case "contextmenu":case "mouseup":case "dragend":
        return Ie = !1, Je(c, d);case "selectionchange":
        if (re) break;
      case "keydown":case "keyup":
        return Je(c, d);}return null;
  } };Ga.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" "));wa = Qa;xa = Oa;ya = Pa;Ga.injectEventPluginsByName({ SimpleEventPlugin: Zd, EnterLeaveEventPlugin: Cd, ChangeEventPlugin: qd, SelectEventPlugin: Ke, BeforeInputEventPlugin: Mb });function Le(a) {
  var b = "";aa.Children.forEach(a, function (a) {
    null != a && (b += a);
  });return b;
}
function Me(a, b) {
  a = n({ children: void 0 }, b);if (b = Le(b.children)) a.children = b;return a;
}function Ne(a, b, c, d) {
  a = a.options;if (b) {
    b = {};for (var e = 0; e < c.length; e++) {
      b["$" + c[e]] = !0;
    }for (c = 0; c < a.length; c++) {
      e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = !0);
    }
  } else {
    c = "" + Pc(c);b = null;for (e = 0; e < a.length; e++) {
      if (a[e].value === c) {
        a[e].selected = !0;d && (a[e].defaultSelected = !0);return;
      }null !== b || a[e].disabled || (b = a[e]);
    }null !== b && (b.selected = !0);
  }
}
function Oe(a, b) {
  null != b.dangerouslySetInnerHTML ? r("91") : void 0;return n({}, b, { value: void 0, defaultValue: void 0, children: "" + a._wrapperState.initialValue });
}function Pe(a, b) {
  var c = b.value;null == c && (c = b.defaultValue, b = b.children, null != b && (null != c ? r("92") : void 0, Array.isArray(b) && (1 >= b.length ? void 0 : r("93"), b = b[0]), c = b), null == c && (c = ""));a._wrapperState = { initialValue: Pc(c) };
}
function Qe(a, b) {
  var c = Pc(b.value),
      d = Pc(b.defaultValue);null != c && (c = "" + c, c !== a.value && (a.value = c), null == b.defaultValue && a.defaultValue !== c && (a.defaultValue = c));null != d && (a.defaultValue = "" + d);
}function Re(a) {
  var b = a.textContent;b === a._wrapperState.initialValue && (a.value = b);
}var Se = { html: "http://www.w3.org/1999/xhtml", mathml: "http://www.w3.org/1998/Math/MathML", svg: "http://www.w3.org/2000/svg" };
function Te(a) {
  switch (a) {case "svg":
      return "http://www.w3.org/2000/svg";case "math":
      return "http://www.w3.org/1998/Math/MathML";default:
      return "http://www.w3.org/1999/xhtml";}
}function Ue(a, b) {
  return null == a || "http://www.w3.org/1999/xhtml" === a ? Te(b) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b ? "http://www.w3.org/1999/xhtml" : a;
}
var Ve = void 0,
    We = function (a) {
  return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function (b, c, d, e) {
    MSApp.execUnsafeLocalFunction(function () {
      return a(b, c, d, e);
    });
  } : a;
}(function (a, b) {
  if (a.namespaceURI !== Se.svg || "innerHTML" in a) a.innerHTML = b;else {
    Ve = Ve || document.createElement("div");Ve.innerHTML = "<svg>" + b + "</svg>";for (b = Ve.firstChild; a.firstChild;) {
      a.removeChild(a.firstChild);
    }for (; b.firstChild;) {
      a.appendChild(b.firstChild);
    }
  }
});
function Xe(a, b) {
  if (b) {
    var c = a.firstChild;if (c && c === a.lastChild && 3 === c.nodeType) {
      c.nodeValue = b;return;
    }
  }a.textContent = b;
}
var Ye = { animationIterationCount: !0, borderImageOutset: !0, borderImageSlice: !0, borderImageWidth: !0, boxFlex: !0, boxFlexGroup: !0, boxOrdinalGroup: !0, columnCount: !0, columns: !0, flex: !0, flexGrow: !0, flexPositive: !0, flexShrink: !0, flexNegative: !0, flexOrder: !0, gridArea: !0, gridRow: !0, gridRowEnd: !0, gridRowSpan: !0, gridRowStart: !0, gridColumn: !0, gridColumnEnd: !0, gridColumnSpan: !0, gridColumnStart: !0, fontWeight: !0, lineClamp: !0, lineHeight: !0, opacity: !0, order: !0, orphans: !0, tabSize: !0, widows: !0, zIndex: !0, zoom: !0, fillOpacity: !0,
  floodOpacity: !0, stopOpacity: !0, strokeDasharray: !0, strokeDashoffset: !0, strokeMiterlimit: !0, strokeOpacity: !0, strokeWidth: !0 },
    Ze = ["Webkit", "ms", "Moz", "O"];Object.keys(Ye).forEach(function (a) {
  Ze.forEach(function (b) {
    b = b + a.charAt(0).toUpperCase() + a.substring(1);Ye[b] = Ye[a];
  });
});
function $e(a, b) {
  a = a.style;for (var c in b) {
    if (b.hasOwnProperty(c)) {
      var d = 0 === c.indexOf("--");var e = c;var f = b[c];e = null == f || "boolean" === typeof f || "" === f ? "" : d || "number" !== typeof f || 0 === f || Ye.hasOwnProperty(e) && Ye[e] ? ("" + f).trim() : f + "px";"float" === c && (c = "cssFloat");d ? a.setProperty(c, e) : a[c] = e;
    }
  }
}var af = n({ menuitem: !0 }, { area: !0, base: !0, br: !0, col: !0, embed: !0, hr: !0, img: !0, input: !0, keygen: !0, link: !0, meta: !0, param: !0, source: !0, track: !0, wbr: !0 });
function bf(a, b) {
  b && (af[a] && (null != b.children || null != b.dangerouslySetInnerHTML ? r("137", a, "") : void 0), null != b.dangerouslySetInnerHTML && (null != b.children ? r("60") : void 0, "object" === _typeof(b.dangerouslySetInnerHTML) && "__html" in b.dangerouslySetInnerHTML ? void 0 : r("61")), null != b.style && "object" !== _typeof(b.style) ? r("62", "") : void 0);
}
function cf(a, b) {
  if (-1 === a.indexOf("-")) return "string" === typeof b.is;switch (a) {case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":
      return !1;default:
      return !0;}
}
function df(a, b) {
  a = 9 === a.nodeType || 11 === a.nodeType ? a : a.ownerDocument;var c = ke(a);b = va[b];for (var d = 0; d < b.length; d++) {
    var e = b[d];if (!c.hasOwnProperty(e) || !c[e]) {
      switch (e) {case "scroll":
          ge("scroll", a);break;case "focus":case "blur":
          ge("focus", a);ge("blur", a);c.blur = !0;c.focus = !0;break;case "cancel":case "close":
          fc(e) && ge(e, a);break;case "invalid":case "submit":case "reset":
          break;default:
          -1 === lb.indexOf(e) && H(e, a);}c[e] = !0;
    }
  }
}function ef() {}var ff = null,
    gf = null;
function hf(a, b) {
  switch (a) {case "button":case "input":case "select":case "textarea":
      return !!b.autoFocus;}return !1;
}function jf(a, b) {
  return "textarea" === a || "option" === a || "noscript" === a || "string" === typeof b.children || "number" === typeof b.children || "object" === _typeof(b.dangerouslySetInnerHTML) && null !== b.dangerouslySetInnerHTML && null != b.dangerouslySetInnerHTML.__html;
}var kf = setTimeout,
    lf = clearTimeout;function mf(a) {
  for (a = a.nextSibling; a && 1 !== a.nodeType && 3 !== a.nodeType;) {
    a = a.nextSibling;
  }return a;
}
function nf(a) {
  for (a = a.firstChild; a && 1 !== a.nodeType && 3 !== a.nodeType;) {
    a = a.nextSibling;
  }return a;
}new Set();var of = [],
    pf = -1;function I(a) {
  0 > pf || (a.current = of[pf], of[pf] = null, pf--);
}function J(a, b) {
  pf++;of[pf] = a.current;a.current = b;
}var qf = {},
    K = { current: qf },
    L = { current: !1 },
    rf = qf;
function sf(a, b) {
  var c = a.type.contextTypes;if (!c) return qf;var d = a.stateNode;if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;var e = {},
      f;for (f in c) {
    e[f] = b[f];
  }d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);return e;
}function M(a) {
  a = a.childContextTypes;return null !== a && void 0 !== a;
}function tf(a) {
  I(L, a);I(K, a);
}function uf(a) {
  I(L, a);I(K, a);
}
function vf(a, b, c) {
  K.current !== qf ? r("168") : void 0;J(K, b, a);J(L, c, a);
}function wf(a, b, c) {
  var d = a.stateNode;a = b.childContextTypes;if ("function" !== typeof d.getChildContext) return c;d = d.getChildContext();for (var e in d) {
    e in a ? void 0 : r("108", Ac(b) || "Unknown", e);
  }return n({}, c, d);
}function xf(a) {
  var b = a.stateNode;b = b && b.__reactInternalMemoizedMergedChildContext || qf;rf = K.current;J(K, b, a);J(L, L.current, a);return !0;
}
function yf(a, b, c) {
  var d = a.stateNode;d ? void 0 : r("169");c ? (b = wf(a, b, rf), d.__reactInternalMemoizedMergedChildContext = b, I(L, a), I(K, a), J(K, b, a)) : I(L, a);J(L, c, a);
}var zf = null,
    Af = null;function Bf(a) {
  return function (b) {
    try {
      return a(b);
    } catch (c) {}
  };
}
function Cf(a) {
  if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return !1;var b = __REACT_DEVTOOLS_GLOBAL_HOOK__;if (b.isDisabled || !b.supportsFiber) return !0;try {
    var c = b.inject(a);zf = Bf(function (a) {
      return b.onCommitFiberRoot(c, a);
    });Af = Bf(function (a) {
      return b.onCommitFiberUnmount(c, a);
    });
  } catch (d) {}return !0;
}
function Df(a, b, c, d) {
  this.tag = a;this.key = c;this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;this.index = 0;this.ref = null;this.pendingProps = b;this.firstContextDependency = this.memoizedState = this.updateQueue = this.memoizedProps = null;this.mode = d;this.effectTag = 0;this.lastEffect = this.firstEffect = this.nextEffect = null;this.childExpirationTime = this.expirationTime = 0;this.alternate = null;
}function N(a, b, c, d) {
  return new Df(a, b, c, d);
}
function Ef(a) {
  a = a.prototype;return !(!a || !a.isReactComponent);
}function Ff(a) {
  if ("function" === typeof a) return Ef(a) ? 1 : 0;if (void 0 !== a && null !== a) {
    a = a.$$typeof;if (a === uc) return 11;if (a === wc) return 14;
  }return 2;
}
function Gf(a, b) {
  var c = a.alternate;null === c ? (c = N(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.effectTag = 0, c.nextEffect = null, c.firstEffect = null, c.lastEffect = null);c.childExpirationTime = a.childExpirationTime;c.expirationTime = a.expirationTime;c.child = a.child;c.memoizedProps = a.memoizedProps;c.memoizedState = a.memoizedState;c.updateQueue = a.updateQueue;c.firstContextDependency = a.firstContextDependency;c.sibling = a.sibling;
  c.index = a.index;c.ref = a.ref;return c;
}
function Hf(a, b, c, d, e, f) {
  var g = 2;d = a;if ("function" === typeof a) Ef(a) && (g = 1);else if ("string" === typeof a) g = 5;else a: switch (a) {case oc:
      return If(c.children, e, f, b);case tc:
      return Jf(c, e | 3, f, b);case pc:
      return Jf(c, e | 2, f, b);case qc:
      return a = N(12, c, b, e | 4), a.elementType = qc, a.type = qc, a.expirationTime = f, a;case vc:
      return a = N(13, c, b, e), a.elementType = vc, a.type = vc, a.expirationTime = f, a;default:
      if ("object" === (typeof a === "undefined" ? "undefined" : _typeof(a)) && null !== a) switch (a.$$typeof) {case rc:
          g = 10;break a;case sc:
          g = 9;break a;case uc:
          g = 11;break a;case wc:
          g = 14;break a;case xc:
          g = 16;d = null;break a;}r("130", null == a ? a : typeof a === "undefined" ? "undefined" : _typeof(a), "");}b = N(g, c, b, e);b.elementType = a;b.type = d;b.expirationTime = f;return b;
}function If(a, b, c, d) {
  a = N(7, a, d, b);a.expirationTime = c;return a;
}function Jf(a, b, c, d) {
  a = N(8, a, d, b);b = 0 === (b & 1) ? pc : tc;a.elementType = b;a.type = b;a.expirationTime = c;return a;
}function Kf(a, b, c) {
  a = N(6, a, null, b);a.expirationTime = c;return a;
}
function Lf(a, b, c) {
  b = N(4, null !== a.children ? a.children : [], a.key, b);b.expirationTime = c;b.stateNode = { containerInfo: a.containerInfo, pendingChildren: null, implementation: a.implementation };return b;
}function Mf(a, b) {
  a.didError = !1;var c = a.earliestPendingTime;0 === c ? a.earliestPendingTime = a.latestPendingTime = b : c > b ? a.earliestPendingTime = b : a.latestPendingTime < b && (a.latestPendingTime = b);Nf(b, a);
}
function Of(a, b) {
  a.didError = !1;var c = a.latestPingedTime;0 !== c && c <= b && (a.latestPingedTime = 0);c = a.earliestPendingTime;var d = a.latestPendingTime;c === b ? a.earliestPendingTime = d === b ? a.latestPendingTime = 0 : d : d === b && (a.latestPendingTime = c);c = a.earliestSuspendedTime;d = a.latestSuspendedTime;0 === c ? a.earliestSuspendedTime = a.latestSuspendedTime = b : c > b ? a.earliestSuspendedTime = b : d < b && (a.latestSuspendedTime = b);Nf(b, a);
}
function Pf(a, b) {
  var c = a.earliestPendingTime;a = a.earliestSuspendedTime;if (0 === b || 0 !== c && c < b) b = c;if (0 === b || 0 !== a && a < b) b = a;return b;
}function Nf(a, b) {
  var c = b.earliestSuspendedTime,
      d = b.latestSuspendedTime,
      e = b.earliestPendingTime,
      f = b.latestPingedTime;e = 0 !== e ? e : f;0 === e && (0 === a || d > a) && (e = d);a = e;0 !== a && 0 !== c && c < a && (a = c);b.nextExpirationTimeToWorkOn = e;b.expirationTime = a;
}var Qf = !1;
function Rf(a) {
  return { baseState: a, firstUpdate: null, lastUpdate: null, firstCapturedUpdate: null, lastCapturedUpdate: null, firstEffect: null, lastEffect: null, firstCapturedEffect: null, lastCapturedEffect: null };
}function Sf(a) {
  return { baseState: a.baseState, firstUpdate: a.firstUpdate, lastUpdate: a.lastUpdate, firstCapturedUpdate: null, lastCapturedUpdate: null, firstEffect: null, lastEffect: null, firstCapturedEffect: null, lastCapturedEffect: null };
}
function Tf(a) {
  return { expirationTime: a, tag: 0, payload: null, callback: null, next: null, nextEffect: null };
}function Uf(a, b) {
  null === a.lastUpdate ? a.firstUpdate = a.lastUpdate = b : (a.lastUpdate.next = b, a.lastUpdate = b);
}
function Vf(a, b) {
  var c = a.alternate;if (null === c) {
    var d = a.updateQueue;var e = null;null === d && (d = a.updateQueue = Rf(a.memoizedState));
  } else d = a.updateQueue, e = c.updateQueue, null === d ? null === e ? (d = a.updateQueue = Rf(a.memoizedState), e = c.updateQueue = Rf(c.memoizedState)) : d = a.updateQueue = Sf(e) : null === e && (e = c.updateQueue = Sf(d));null === e || d === e ? Uf(d, b) : null === d.lastUpdate || null === e.lastUpdate ? (Uf(d, b), Uf(e, b)) : (Uf(d, b), e.lastUpdate = b);
}
function Wf(a, b) {
  var c = a.updateQueue;c = null === c ? a.updateQueue = Rf(a.memoizedState) : Xf(a, c);null === c.lastCapturedUpdate ? c.firstCapturedUpdate = c.lastCapturedUpdate = b : (c.lastCapturedUpdate.next = b, c.lastCapturedUpdate = b);
}function Xf(a, b) {
  var c = a.alternate;null !== c && b === c.updateQueue && (b = a.updateQueue = Sf(b));return b;
}
function Yf(a, b, c, d, e, f) {
  switch (c.tag) {case 1:
      return a = c.payload, "function" === typeof a ? a.call(f, d, e) : a;case 3:
      a.effectTag = a.effectTag & -1025 | 64;case 0:
      a = c.payload;e = "function" === typeof a ? a.call(f, d, e) : a;if (null === e || void 0 === e) break;return n({}, d, e);case 2:
      Qf = !0;}return d;
}
function Zf(a, b, c, d, e) {
  Qf = !1;b = Xf(a, b);for (var f = b.baseState, g = null, h = 0, k = b.firstUpdate, l = f; null !== k;) {
    var m = k.expirationTime;if (m > e) {
      if (null === g && (g = k, f = l), 0 === h || h > m) h = m;
    } else l = Yf(a, b, k, l, c, d), null !== k.callback && (a.effectTag |= 32, k.nextEffect = null, null === b.lastEffect ? b.firstEffect = b.lastEffect = k : (b.lastEffect.nextEffect = k, b.lastEffect = k));k = k.next;
  }m = null;for (k = b.firstCapturedUpdate; null !== k;) {
    var p = k.expirationTime;if (p > e) {
      if (null === m && (m = k, null === g && (f = l)), 0 === h || h > p) h = p;
    } else l = Yf(a, b, k, l, c, d), null !== k.callback && (a.effectTag |= 32, k.nextEffect = null, null === b.lastCapturedEffect ? b.firstCapturedEffect = b.lastCapturedEffect = k : (b.lastCapturedEffect.nextEffect = k, b.lastCapturedEffect = k));k = k.next;
  }null === g && (b.lastUpdate = null);null === m ? b.lastCapturedUpdate = null : a.effectTag |= 32;null === g && null === m && (f = l);b.baseState = f;b.firstUpdate = g;b.firstCapturedUpdate = m;a.expirationTime = h;a.memoizedState = l;
}
function $f(a, b, c) {
  null !== b.firstCapturedUpdate && (null !== b.lastUpdate && (b.lastUpdate.next = b.firstCapturedUpdate, b.lastUpdate = b.lastCapturedUpdate), b.firstCapturedUpdate = b.lastCapturedUpdate = null);ag(b.firstEffect, c);b.firstEffect = b.lastEffect = null;ag(b.firstCapturedEffect, c);b.firstCapturedEffect = b.lastCapturedEffect = null;
}function ag(a, b) {
  for (; null !== a;) {
    var c = a.callback;if (null !== c) {
      a.callback = null;var d = b;"function" !== typeof c ? r("191", c) : void 0;c.call(d);
    }a = a.nextEffect;
  }
}
function bg(a, b) {
  return { value: a, source: b, stack: Bc(b) };
}var cg = { current: null },
    dg = null,
    eg = null,
    fg = null;function gg(a, b) {
  var c = a.type._context;J(cg, c._currentValue, a);c._currentValue = b;
}function hg(a) {
  var b = cg.current;I(cg, a);a.type._context._currentValue = b;
}function ig(a) {
  dg = a;fg = eg = null;a.firstContextDependency = null;
}
function jg(a, b) {
  if (fg !== a && !1 !== b && 0 !== b) {
    if ("number" !== typeof b || 1073741823 === b) fg = a, b = 1073741823;b = { context: a, observedBits: b, next: null };null === eg ? (null === dg ? r("293") : void 0, dg.firstContextDependency = eg = b) : eg = eg.next = b;
  }return a._currentValue;
}var kg = {},
    O = { current: kg },
    lg = { current: kg },
    mg = { current: kg };function ng(a) {
  a === kg ? r("174") : void 0;return a;
}
function og(a, b) {
  J(mg, b, a);J(lg, a, a);J(O, kg, a);var c = b.nodeType;switch (c) {case 9:case 11:
      b = (b = b.documentElement) ? b.namespaceURI : Ue(null, "");break;default:
      c = 8 === c ? b.parentNode : b, b = c.namespaceURI || null, c = c.tagName, b = Ue(b, c);}I(O, a);J(O, b, a);
}function pg(a) {
  I(O, a);I(lg, a);I(mg, a);
}function qg(a) {
  ng(mg.current);var b = ng(O.current);var c = Ue(b, a.type);b !== c && (J(lg, a, a), J(O, c, a));
}function rg(a) {
  lg.current === a && (I(O, a), I(lg, a));
}var sg = kc.ReactCurrentOwner,
    tg = new aa.Component().refs;
function ug(a, b, c, d) {
  b = a.memoizedState;c = c(d, b);c = null === c || void 0 === c ? b : n({}, b, c);a.memoizedState = c;d = a.updateQueue;null !== d && 0 === a.expirationTime && (d.baseState = c);
}
var yg = { isMounted: function isMounted(a) {
    return (a = a._reactInternalFiber) ? 2 === Gd(a) : !1;
  }, enqueueSetState: function enqueueSetState(a, b, c) {
    a = a._reactInternalFiber;var d = vg();d = wg(d, a);var e = Tf(d);e.payload = b;void 0 !== c && null !== c && (e.callback = c);Vf(a, e);xg(a, d);
  }, enqueueReplaceState: function enqueueReplaceState(a, b, c) {
    a = a._reactInternalFiber;var d = vg();d = wg(d, a);var e = Tf(d);e.tag = 1;e.payload = b;void 0 !== c && null !== c && (e.callback = c);Vf(a, e);xg(a, d);
  }, enqueueForceUpdate: function enqueueForceUpdate(a, b) {
    a = a._reactInternalFiber;var c = vg();c = wg(c, a);var d = Tf(c);d.tag = 2;void 0 !== b && null !== b && (d.callback = b);Vf(a, d);xg(a, c);
  } };function zg(a, b, c, d, e, f, g) {
  a = a.stateNode;return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !Fd(c, d) || !Fd(e, f) : !0;
}
function Ag(a, b, c) {
  var d = !1,
      e = qf;var f = b.contextType;"object" === (typeof f === "undefined" ? "undefined" : _typeof(f)) && null !== f ? f = sg.currentDispatcher.readContext(f) : (e = M(b) ? rf : K.current, d = b.contextTypes, f = (d = null !== d && void 0 !== d) ? sf(a, e) : qf);b = new b(c, f);a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;b.updater = yg;a.stateNode = b;b._reactInternalFiber = a;d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);return b;
}
function Bg(a, b, c, d) {
  a = b.state;"function" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);"function" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);b.state !== a && yg.enqueueReplaceState(b, b.state, null);
}
function Cg(a, b, c, d) {
  var e = a.stateNode;e.props = c;e.state = a.memoizedState;e.refs = tg;var f = b.contextType;"object" === (typeof f === "undefined" ? "undefined" : _typeof(f)) && null !== f ? e.context = sg.currentDispatcher.readContext(f) : (f = M(b) ? rf : K.current, e.context = sf(a, f));f = a.updateQueue;null !== f && (Zf(a, f, c, e, d), e.state = a.memoizedState);f = b.getDerivedStateFromProps;"function" === typeof f && (ug(a, b, f, c), e.state = a.memoizedState);"function" === typeof b.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && yg.enqueueReplaceState(e, e.state, null), f = a.updateQueue, null !== f && (Zf(a, f, c, e, d), e.state = a.memoizedState));"function" === typeof e.componentDidMount && (a.effectTag |= 4);
}var Dg = Array.isArray;
function Eg(a, b, c) {
  a = c.ref;if (null !== a && "function" !== typeof a && "object" !== (typeof a === "undefined" ? "undefined" : _typeof(a))) {
    if (c._owner) {
      c = c._owner;var d = void 0;c && (1 !== c.tag ? r("289") : void 0, d = c.stateNode);d ? void 0 : r("147", a);var e = "" + a;if (null !== b && null !== b.ref && "function" === typeof b.ref && b.ref._stringRef === e) return b.ref;b = function b(a) {
        var b = d.refs;b === tg && (b = d.refs = {});null === a ? delete b[e] : b[e] = a;
      };b._stringRef = e;return b;
    }"string" !== typeof a ? r("284") : void 0;c._owner ? void 0 : r("290", a);
  }return a;
}
function Fg(a, b) {
  "textarea" !== a.type && r("31", "[object Object]" === Object.prototype.toString.call(b) ? "object with keys {" + Object.keys(b).join(", ") + "}" : b, "");
}
function Gg(a) {
  function b(b, c) {
    if (a) {
      var d = b.lastEffect;null !== d ? (d.nextEffect = c, b.lastEffect = c) : b.firstEffect = b.lastEffect = c;c.nextEffect = null;c.effectTag = 8;
    }
  }function c(c, d) {
    if (!a) return null;for (; null !== d;) {
      b(c, d), d = d.sibling;
    }return null;
  }function d(a, b) {
    for (a = new Map(); null !== b;) {
      null !== b.key ? a.set(b.key, b) : a.set(b.index, b), b = b.sibling;
    }return a;
  }function e(a, b, c) {
    a = Gf(a, b, c);a.index = 0;a.sibling = null;return a;
  }function f(b, c, d) {
    b.index = d;if (!a) return c;d = b.alternate;if (null !== d) return d = d.index, d < c ? (b.effectTag = 2, c) : d;b.effectTag = 2;return c;
  }function g(b) {
    a && null === b.alternate && (b.effectTag = 2);return b;
  }function h(a, b, c, d) {
    if (null === b || 6 !== b.tag) return b = Kf(c, a.mode, d), b.return = a, b;b = e(b, c, d);b.return = a;return b;
  }function k(a, b, c, d) {
    if (null !== b && b.elementType === c.type) return d = e(b, c.props, d), d.ref = Eg(a, b, c), d.return = a, d;d = Hf(c.type, c.key, c.props, null, a.mode, d);d.ref = Eg(a, b, c);d.return = a;return d;
  }function l(a, b, c, d) {
    if (null === b || 4 !== b.tag || b.stateNode.containerInfo !== c.containerInfo || b.stateNode.implementation !== c.implementation) return b = Lf(c, a.mode, d), b.return = a, b;b = e(b, c.children || [], d);b.return = a;return b;
  }function m(a, b, c, d, f) {
    if (null === b || 7 !== b.tag) return b = If(c, a.mode, d, f), b.return = a, b;b = e(b, c, d);b.return = a;return b;
  }function p(a, b, c) {
    if ("string" === typeof b || "number" === typeof b) return b = Kf("" + b, a.mode, c), b.return = a, b;if ("object" === (typeof b === "undefined" ? "undefined" : _typeof(b)) && null !== b) {
      switch (b.$$typeof) {case mc:
          return c = Hf(b.type, b.key, b.props, null, a.mode, c), c.ref = Eg(a, null, b), c.return = a, c;case nc:
          return b = Lf(b, a.mode, c), b.return = a, b;}if (Dg(b) || zc(b)) return b = If(b, a.mode, c, null), b.return = a, b;Fg(a, b);
    }return null;
  }function v(a, b, c, d) {
    var e = null !== b ? b.key : null;if ("string" === typeof c || "number" === typeof c) return null !== e ? null : h(a, b, "" + c, d);if ("object" === (typeof c === "undefined" ? "undefined" : _typeof(c)) && null !== c) {
      switch (c.$$typeof) {case mc:
          return c.key === e ? c.type === oc ? m(a, b, c.props.children, d, e) : k(a, b, c, d) : null;case nc:
          return c.key === e ? l(a, b, c, d) : null;}if (Dg(c) || zc(c)) return null !== e ? null : m(a, b, c, d, null);Fg(a, c);
    }return null;
  }function B(a, b, c, d, e) {
    if ("string" === typeof d || "number" === typeof d) return a = a.get(c) || null, h(b, a, "" + d, e);if ("object" === (typeof d === "undefined" ? "undefined" : _typeof(d)) && null !== d) {
      switch (d.$$typeof) {case mc:
          return a = a.get(null === d.key ? c : d.key) || null, d.type === oc ? m(b, a, d.props.children, e, d.key) : k(b, a, d, e);case nc:
          return a = a.get(null === d.key ? c : d.key) || null, l(b, a, d, e);}if (Dg(d) || zc(d)) return a = a.get(c) || null, m(b, a, d, e, null);Fg(b, d);
    }return null;
  }function w(e, g, h, k) {
    for (var l = null, m = null, q = g, u = g = 0, A = null; null !== q && u < h.length; u++) {
      q.index > u ? (A = q, q = null) : A = q.sibling;var t = v(e, q, h[u], k);if (null === t) {
        null === q && (q = A);break;
      }a && q && null === t.alternate && b(e, q);g = f(t, g, u);null === m ? l = t : m.sibling = t;m = t;q = A;
    }if (u === h.length) return c(e, q), l;if (null === q) {
      for (; u < h.length; u++) {
        if (q = p(e, h[u], k)) g = f(q, g, u), null === m ? l = q : m.sibling = q, m = q;
      }return l;
    }for (q = d(e, q); u < h.length; u++) {
      if (A = B(q, e, u, h[u], k)) a && null !== A.alternate && q.delete(null === A.key ? u : A.key), g = f(A, g, u), null === m ? l = A : m.sibling = A, m = A;
    }a && q.forEach(function (a) {
      return b(e, a);
    });return l;
  }function C(e, g, h, k) {
    var l = zc(h);"function" !== typeof l ? r("150") : void 0;h = l.call(h);null == h ? r("151") : void 0;
    for (var m = l = null, q = g, u = g = 0, A = null, t = h.next(); null !== q && !t.done; u++, t = h.next()) {
      q.index > u ? (A = q, q = null) : A = q.sibling;var w = v(e, q, t.value, k);if (null === w) {
        q || (q = A);break;
      }a && q && null === w.alternate && b(e, q);g = f(w, g, u);null === m ? l = w : m.sibling = w;m = w;q = A;
    }if (t.done) return c(e, q), l;if (null === q) {
      for (; !t.done; u++, t = h.next()) {
        t = p(e, t.value, k), null !== t && (g = f(t, g, u), null === m ? l = t : m.sibling = t, m = t);
      }return l;
    }for (q = d(e, q); !t.done; u++, t = h.next()) {
      t = B(q, e, u, t.value, k), null !== t && (a && null !== t.alternate && q.delete(null === t.key ? u : t.key), g = f(t, g, u), null === m ? l = t : m.sibling = t, m = t);
    }a && q.forEach(function (a) {
      return b(e, a);
    });return l;
  }return function (a, d, f, h) {
    var k = "object" === (typeof f === "undefined" ? "undefined" : _typeof(f)) && null !== f && f.type === oc && null === f.key;k && (f = f.props.children);var l = "object" === (typeof f === "undefined" ? "undefined" : _typeof(f)) && null !== f;if (l) switch (f.$$typeof) {case mc:
        a: {
          l = f.key;for (k = d; null !== k;) {
            if (k.key === l) {
              if (7 === k.tag ? f.type === oc : k.elementType === f.type) {
                c(a, k.sibling);d = e(k, f.type === oc ? f.props.children : f.props, h);d.ref = Eg(a, k, f);d.return = a;a = d;break a;
              } else {
                c(a, k);break;
              }
            } else b(a, k);k = k.sibling;
          }f.type === oc ? (d = If(f.props.children, a.mode, h, f.key), d.return = a, a = d) : (h = Hf(f.type, f.key, f.props, null, a.mode, h), h.ref = Eg(a, d, f), h.return = a, a = h);
        }return g(a);case nc:
        a: {
          for (k = f.key; null !== d;) {
            if (d.key === k) {
              if (4 === d.tag && d.stateNode.containerInfo === f.containerInfo && d.stateNode.implementation === f.implementation) {
                c(a, d.sibling);d = e(d, f.children || [], h);d.return = a;a = d;break a;
              } else {
                c(a, d);break;
              }
            } else b(a, d);d = d.sibling;
          }d = Lf(f, a.mode, h);d.return = a;a = d;
        }return g(a);}if ("string" === typeof f || "number" === typeof f) return f = "" + f, null !== d && 6 === d.tag ? (c(a, d.sibling), d = e(d, f, h), d.return = a, a = d) : (c(a, d), d = Kf(f, a.mode, h), d.return = a, a = d), g(a);if (Dg(f)) return w(a, d, f, h);if (zc(f)) return C(a, d, f, h);l && Fg(a, f);if ("undefined" === typeof f && !k) switch (a.tag) {case 1:case 0:
        h = a.type, r("152", h.displayName || h.name || "Component");}return c(a, d);
  };
}var Hg = Gg(!0),
    Ig = Gg(!1),
    Jg = null,
    Kg = null,
    Lg = !1;
function Mg(a, b) {
  var c = N(5, null, null, 0);c.elementType = "DELETED";c.type = "DELETED";c.stateNode = b;c.return = a;c.effectTag = 8;null !== a.lastEffect ? (a.lastEffect.nextEffect = c, a.lastEffect = c) : a.firstEffect = a.lastEffect = c;
}function Ng(a, b) {
  switch (a.tag) {case 5:
      var c = a.type;b = 1 !== b.nodeType || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b;return null !== b ? (a.stateNode = b, !0) : !1;case 6:
      return b = "" === a.pendingProps || 3 !== b.nodeType ? null : b, null !== b ? (a.stateNode = b, !0) : !1;default:
      return !1;}
}
function Og(a) {
  if (Lg) {
    var b = Kg;if (b) {
      var c = b;if (!Ng(a, b)) {
        b = mf(c);if (!b || !Ng(a, b)) {
          a.effectTag |= 2;Lg = !1;Jg = a;return;
        }Mg(Jg, c);
      }Jg = a;Kg = nf(b);
    } else a.effectTag |= 2, Lg = !1, Jg = a;
  }
}function Pg(a) {
  for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag;) {
    a = a.return;
  }Jg = a;
}function Qg(a) {
  if (a !== Jg) return !1;if (!Lg) return Pg(a), Lg = !0, !1;var b = a.type;if (5 !== a.tag || "head" !== b && "body" !== b && !jf(b, a.memoizedProps)) for (b = Kg; b;) {
    Mg(a, b), b = mf(b);
  }Pg(a);Kg = Jg ? mf(a.stateNode) : null;return !0;
}function Rg() {
  Kg = Jg = null;Lg = !1;
}
function Sg(a) {
  var b = a._result;switch (a._status) {case 1:
      return b;case 2:
      throw b;case 0:
      throw b;default:
      throw a._status = 0, b = a._ctor, b = b(), b.then(function (b) {
        0 === a._status && (b = b.default, a._status = 1, a._result = b);
      }, function (b) {
        0 === a._status && (a._status = 2, a._result = b);
      }), a._result = b, b;}
}var Tg = kc.ReactCurrentOwner;function P(a, b, c, d) {
  b.child = null === a ? Ig(b, null, c, d) : Hg(b, a.child, c, d);
}
function Ug(a, b, c, d, e) {
  c = c.render;var f = b.ref;if (!L.current && b.memoizedProps === d && f === (null !== a ? a.ref : null)) return Vg(a, b, e);d = c(d, f);P(a, b, d, e);return b.child;
}
function Wg(a, b, c, d, e, f) {
  if (null === a) {
    var g = c.type;if ("function" === typeof g && !Ef(g) && void 0 === g.defaultProps && null === c.compare) return b.tag = 15, b.type = g, Xg(a, b, g, d, e, f);a = Hf(c.type, null, d, null, b.mode, f);a.ref = b.ref;a.return = b;return b.child = a;
  }g = a.child;if (0 === e || e > f) if (e = g.memoizedProps, c = c.compare, c = null !== c ? c : Fd, c(e, d) && a.ref === b.ref) return Vg(a, b, f);a = Gf(g, d, f);a.ref = b.ref;a.return = b;return b.child = a;
}
function Xg(a, b, c, d, e, f) {
  return null !== a && (0 === e || e > f) && Fd(a.memoizedProps, d) && a.ref === b.ref ? Vg(a, b, f) : Yg(a, b, c, d, f);
}function Zg(a, b) {
  var c = b.ref;if (null === a && null !== c || null !== a && a.ref !== c) b.effectTag |= 128;
}function Yg(a, b, c, d, e) {
  var f = M(c) ? rf : K.current;f = sf(b, f);ig(b, e);c = c(d, f);b.effectTag |= 1;P(a, b, c, e);return b.child;
}
function $g(a, b, c, d, e) {
  if (M(c)) {
    var f = !0;xf(b);
  } else f = !1;ig(b, e);if (null === b.stateNode) null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2), Ag(b, c, d, e), Cg(b, c, d, e), d = !0;else if (null === a) {
    var g = b.stateNode,
        h = b.memoizedProps;g.props = h;var k = g.context,
        l = c.contextType;"object" === (typeof l === "undefined" ? "undefined" : _typeof(l)) && null !== l ? l = sg.currentDispatcher.readContext(l) : (l = M(c) ? rf : K.current, l = sf(b, l));var m = c.getDerivedStateFromProps,
        p = "function" === typeof m || "function" === typeof g.getSnapshotBeforeUpdate;p || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k !== l) && Bg(b, g, d, l);Qf = !1;var v = b.memoizedState;k = g.state = v;var B = b.updateQueue;null !== B && (Zf(b, B, d, g, e), k = b.memoizedState);h !== d || v !== k || L.current || Qf ? ("function" === typeof m && (ug(b, c, m, d), k = b.memoizedState), (h = Qf || zg(b, c, h, d, v, k, l)) ? (p || "function" !== typeof g.UNSAFE_componentWillMount && "function" !== typeof g.componentWillMount || ("function" === typeof g.componentWillMount && g.componentWillMount(), "function" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), "function" === typeof g.componentDidMount && (b.effectTag |= 4)) : ("function" === typeof g.componentDidMount && (b.effectTag |= 4), b.memoizedProps = d, b.memoizedState = k), g.props = d, g.state = k, g.context = l, d = h) : ("function" === typeof g.componentDidMount && (b.effectTag |= 4), d = !1);
  } else g = b.stateNode, h = b.memoizedProps, g.props = h, k = g.context, l = c.contextType, "object" === (typeof l === "undefined" ? "undefined" : _typeof(l)) && null !== l ? l = sg.currentDispatcher.readContext(l) : (l = M(c) ? rf : K.current, l = sf(b, l)), m = c.getDerivedStateFromProps, (p = "function" === typeof m || "function" === typeof g.getSnapshotBeforeUpdate) || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k !== l) && Bg(b, g, d, l), Qf = !1, k = b.memoizedState, v = g.state = k, B = b.updateQueue, null !== B && (Zf(b, B, d, g, e), v = b.memoizedState), h !== d || k !== v || L.current || Qf ? ("function" === typeof m && (ug(b, c, m, d), v = b.memoizedState), (m = Qf || zg(b, c, h, d, k, v, l)) ? (p || "function" !== typeof g.UNSAFE_componentWillUpdate && "function" !== typeof g.componentWillUpdate || ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(d, v, l), "function" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, v, l)), "function" === typeof g.componentDidUpdate && (b.effectTag |= 4), "function" === typeof g.getSnapshotBeforeUpdate && (b.effectTag |= 256)) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && k === a.memoizedState || (b.effectTag |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && k === a.memoizedState || (b.effectTag |= 256), b.memoizedProps = d, b.memoizedState = v), g.props = d, g.state = v, g.context = l, d = m) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && k === a.memoizedState || (b.effectTag |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && k === a.memoizedState || (b.effectTag |= 256), d = !1);return ah(a, b, c, d, f, e);
}
function ah(a, b, c, d, e, f) {
  Zg(a, b);var g = 0 !== (b.effectTag & 64);if (!d && !g) return e && yf(b, c, !1), Vg(a, b, f);d = b.stateNode;Tg.current = b;var h = g && "function" !== typeof c.getDerivedStateFromError ? null : d.render();b.effectTag |= 1;null !== a && g ? (b.child = Hg(b, a.child, null, f), b.child = Hg(b, null, h, f)) : P(a, b, h, f);b.memoizedState = d.state;e && yf(b, c, !0);return b.child;
}function bh(a) {
  var b = a.stateNode;b.pendingContext ? vf(a, b.pendingContext, b.pendingContext !== b.context) : b.context && vf(a, b.context, !1);og(a, b.containerInfo);
}
function ch(a, b) {
  if (a && a.defaultProps) {
    b = n({}, b);a = a.defaultProps;for (var c in a) {
      void 0 === b[c] && (b[c] = a[c]);
    }
  }return b;
}
function dh(a, b, c) {
  var d = b.mode,
      e = b.pendingProps,
      f = b.memoizedState;null !== f && (f.alreadyCaptured ? null !== a && f === a.memoizedState ? f = { alreadyCaptured: !0, didTimeout: !0, timedOutAt: f.timedOutAt } : (f.alreadyCaptured = !0, f.didTimeout = !0) : f = null);var g = null !== f && f.didTimeout;if (null === a) g ? (g = e.fallback, e = If(null, d, 0, null), d = If(g, d, c, null), e.sibling = d, c = e, c.return = d.return = b) : c = d = Ig(b, null, e.children, c);else {
    var h = a.memoizedState;null !== h && h.didTimeout ? (d = a.child, a = d.sibling, g ? (c = e.fallback, d = Gf(d, d.pendingProps, 0), d.effectTag |= 2, e = d.sibling = Gf(a, c, a.expirationTime), e.effectTag |= 2, c = d, d.childExpirationTime = 0, d = e, c.return = d.return = b) : (g = a.child, d = Hg(b, d.child, e.children, c), Hg(b, g, null, c), c = d)) : (a = a.child, g ? (g = e.fallback, e = If(null, d, 0, null), e.effectTag |= 2, e.child = a, a.return = e, d = e.sibling = If(g, d, c, null), d.effectTag |= 2, c = e, e.childExpirationTime = 0, c.return = d.return = b) : d = c = Hg(b, a, e.children, c));
  }b.memoizedState = f;b.child = c;return d;
}
function Vg(a, b, c) {
  null !== a && (b.firstContextDependency = a.firstContextDependency);var d = b.childExpirationTime;if (0 === d || d > c) return null;null !== a && b.child !== a.child ? r("153") : void 0;if (null !== b.child) {
    a = b.child;c = Gf(a, a.pendingProps, a.expirationTime);b.child = c;for (c.return = b; null !== a.sibling;) {
      a = a.sibling, c = c.sibling = Gf(a, a.pendingProps, a.expirationTime), c.return = b;
    }c.sibling = null;
  }return b.child;
}
function eh(a, b, c) {
  var d = b.expirationTime;if (null !== a && a.memoizedProps === b.pendingProps && !L.current && (0 === d || d > c)) {
    switch (b.tag) {case 3:
        bh(b);Rg();break;case 5:
        qg(b);break;case 1:
        M(b.type) && xf(b);break;case 4:
        og(b, b.stateNode.containerInfo);break;case 10:
        gg(b, b.memoizedProps.value);break;case 13:
        if (d = b.memoizedState, null !== d && d.didTimeout) {
          d = b.child.childExpirationTime;if (0 !== d && d <= c) return dh(a, b, c);b = Vg(a, b, c);return null !== b ? b.sibling : null;
        }}return Vg(a, b, c);
  }b.expirationTime = 0;switch (b.tag) {case 2:
      d = b.elementType;null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2);a = b.pendingProps;var e = sf(b, K.current);ig(b, c);e = d(a, e);b.effectTag |= 1;if ("object" === (typeof e === "undefined" ? "undefined" : _typeof(e)) && null !== e && "function" === typeof e.render && void 0 === e.$$typeof) {
        b.tag = 1;if (M(d)) {
          var f = !0;xf(b);
        } else f = !1;b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null;var g = d.getDerivedStateFromProps;"function" === typeof g && ug(b, d, g, a);e.updater = yg;b.stateNode = e;e._reactInternalFiber = b;Cg(b, d, a, c);b = ah(null, b, d, !0, f, c);
      } else b.tag = 0, P(null, b, e, c), b = b.child;return b;case 16:
      e = b.elementType;null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2);f = b.pendingProps;a = Sg(e);b.type = a;e = b.tag = Ff(a);f = ch(a, f);g = void 0;switch (e) {case 0:
          g = Yg(null, b, a, f, c);break;case 1:
          g = $g(null, b, a, f, c);break;case 11:
          g = Ug(null, b, a, f, c);break;case 14:
          g = Wg(null, b, a, ch(a.type, f), d, c);break;default:
          r("283", a);}return g;case 0:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : ch(d, e), Yg(a, b, d, e, c);case 1:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : ch(d, e), $g(a, b, d, e, c);case 3:
      bh(b);d = b.updateQueue;null === d ? r("282") : void 0;e = b.memoizedState;e = null !== e ? e.element : null;Zf(b, d, b.pendingProps, null, c);d = b.memoizedState.element;if (d === e) Rg(), b = Vg(a, b, c);else {
        e = b.stateNode;if (e = (null === a || null === a.child) && e.hydrate) Kg = nf(b.stateNode.containerInfo), Jg = b, e = Lg = !0;e ? (b.effectTag |= 2, b.child = Ig(b, null, d, c)) : (P(a, b, d, c), Rg());b = b.child;
      }return b;case 5:
      return qg(b), null === a && Og(b), d = b.type, e = b.pendingProps, f = null !== a ? a.memoizedProps : null, g = e.children, jf(d, e) ? g = null : null !== f && jf(d, f) && (b.effectTag |= 16), Zg(a, b), 1073741823 !== c && b.mode & 1 && e.hidden ? (b.expirationTime = 1073741823, b = null) : (P(a, b, g, c), b = b.child), b;case 6:
      return null === a && Og(b), null;case 13:
      return dh(a, b, c);case 4:
      return og(b, b.stateNode.containerInfo), d = b.pendingProps, null === a ? b.child = Hg(b, null, d, c) : P(a, b, d, c), b.child;case 11:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : ch(d, e), Ug(a, b, d, e, c);case 7:
      return P(a, b, b.pendingProps, c), b.child;case 8:
      return P(a, b, b.pendingProps.children, c), b.child;case 12:
      return P(a, b, b.pendingProps.children, c), b.child;case 10:
      a: {
        d = b.type._context;e = b.pendingProps;g = b.memoizedProps;f = e.value;gg(b, f);if (null !== g) {
          var h = g.value;f = h === f && (0 !== h || 1 / h === 1 / f) || h !== h && f !== f ? 0 : ("function" === typeof d._calculateChangedBits ? d._calculateChangedBits(h, f) : 1073741823) | 0;if (0 === f) {
            if (g.children === e.children && !L.current) {
              b = Vg(a, b, c);break a;
            }
          } else for (g = b.child, null !== g && (g.return = b); null !== g;) {
            h = g.firstContextDependency;if (null !== h) {
              do {
                if (h.context === d && 0 !== (h.observedBits & f)) {
                  if (1 === g.tag) {
                    var k = Tf(c);k.tag = 2;Vf(g, k);
                  }if (0 === g.expirationTime || g.expirationTime > c) g.expirationTime = c;k = g.alternate;null !== k && (0 === k.expirationTime || k.expirationTime > c) && (k.expirationTime = c);for (var l = g.return; null !== l;) {
                    k = l.alternate;if (0 === l.childExpirationTime || l.childExpirationTime > c) l.childExpirationTime = c, null !== k && (0 === k.childExpirationTime || k.childExpirationTime > c) && (k.childExpirationTime = c);else if (null !== k && (0 === k.childExpirationTime || k.childExpirationTime > c)) k.childExpirationTime = c;else break;l = l.return;
                  }
                }k = g.child;h = h.next;
              } while (null !== h);
            } else k = 10 === g.tag ? g.type === b.type ? null : g.child : g.child;if (null !== k) k.return = g;else for (k = g; null !== k;) {
              if (k === b) {
                k = null;break;
              }g = k.sibling;if (null !== g) {
                g.return = k.return;k = g;break;
              }k = k.return;
            }g = k;
          }
        }P(a, b, e.children, c);b = b.child;
      }return b;case 9:
      return e = b.type, f = b.pendingProps, d = f.children, ig(b, c), e = jg(e, f.unstable_observedBits), d = d(e), b.effectTag |= 1, P(a, b, d, c), b.child;case 14:
      return e = b.type, f = ch(e.type, b.pendingProps), Wg(a, b, e, f, d, c);case 15:
      return Xg(a, b, b.type, b.pendingProps, d, c);case 17:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : ch(d, e), null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2), b.tag = 1, M(d) ? (a = !0, xf(b)) : a = !1, ig(b, c), Ag(b, d, e, c), Cg(b, d, e, c), ah(null, b, d, !0, a, c);default:
      r("156");}
}function zh(a) {
  a.effectTag |= 4;
}var Ah = void 0,
    Bh = void 0,
    Ch = void 0,
    Dh = void 0;
Ah = function Ah(a, b) {
  for (var c = b.child; null !== c;) {
    if (5 === c.tag || 6 === c.tag) a.appendChild(c.stateNode);else if (4 !== c.tag && null !== c.child) {
      c.child.return = c;c = c.child;continue;
    }if (c === b) break;for (; null === c.sibling;) {
      if (null === c.return || c.return === b) return;c = c.return;
    }c.sibling.return = c.return;c = c.sibling;
  }
};Bh = function Bh() {};
Ch = function Ch(a, b, c, d, e) {
  var f = a.memoizedProps;if (f !== d) {
    var g = b.stateNode;ng(O.current);a = null;switch (c) {case "input":
        f = Qc(g, f);d = Qc(g, d);a = [];break;case "option":
        f = Me(g, f);d = Me(g, d);a = [];break;case "select":
        f = n({}, f, { value: void 0 });d = n({}, d, { value: void 0 });a = [];break;case "textarea":
        f = Oe(g, f);d = Oe(g, d);a = [];break;default:
        "function" !== typeof f.onClick && "function" === typeof d.onClick && (g.onclick = ef);}bf(c, d);g = c = void 0;var h = null;for (c in f) {
      if (!d.hasOwnProperty(c) && f.hasOwnProperty(c) && null != f[c]) if ("style" === c) {
        var k = f[c];for (g in k) {
          k.hasOwnProperty(g) && (h || (h = {}), h[g] = "");
        }
      } else "dangerouslySetInnerHTML" !== c && "children" !== c && "suppressContentEditableWarning" !== c && "suppressHydrationWarning" !== c && "autoFocus" !== c && (ua.hasOwnProperty(c) ? a || (a = []) : (a = a || []).push(c, null));
    }for (c in d) {
      var l = d[c];k = null != f ? f[c] : void 0;if (d.hasOwnProperty(c) && l !== k && (null != l || null != k)) if ("style" === c) {
        if (k) {
          for (g in k) {
            !k.hasOwnProperty(g) || l && l.hasOwnProperty(g) || (h || (h = {}), h[g] = "");
          }for (g in l) {
            l.hasOwnProperty(g) && k[g] !== l[g] && (h || (h = {}), h[g] = l[g]);
          }
        } else h || (a || (a = []), a.push(c, h)), h = l;
      } else "dangerouslySetInnerHTML" === c ? (l = l ? l.__html : void 0, k = k ? k.__html : void 0, null != l && k !== l && (a = a || []).push(c, "" + l)) : "children" === c ? k === l || "string" !== typeof l && "number" !== typeof l || (a = a || []).push(c, "" + l) : "suppressContentEditableWarning" !== c && "suppressHydrationWarning" !== c && (ua.hasOwnProperty(c) ? (null != l && df(e, c), a || k === l || (a = [])) : (a = a || []).push(c, l));
    }h && (a = a || []).push("style", h);e = a;(b.updateQueue = e) && zh(b);
  }
};Dh = function Dh(a, b, c, d) {
  c !== d && zh(b);
};
function Eh(a, b) {
  var c = b.source,
      d = b.stack;null === d && null !== c && (d = Bc(c));null !== c && Ac(c.type);b = b.value;null !== a && 1 === a.tag && Ac(a.type);try {
    console.error(b);
  } catch (e) {
    setTimeout(function () {
      throw e;
    });
  }
}function Fh(a) {
  var b = a.ref;if (null !== b) if ("function" === typeof b) try {
    b(null);
  } catch (c) {
    Gh(a, c);
  } else b.current = null;
}
function Hh(a) {
  "function" === typeof Af && Af(a);switch (a.tag) {case 1:
      Fh(a);var b = a.stateNode;if ("function" === typeof b.componentWillUnmount) try {
        b.props = a.memoizedProps, b.state = a.memoizedState, b.componentWillUnmount();
      } catch (c) {
        Gh(a, c);
      }break;case 5:
      Fh(a);break;case 4:
      Ih(a);}
}function Jh(a) {
  return 5 === a.tag || 3 === a.tag || 4 === a.tag;
}
function Kh(a) {
  a: {
    for (var b = a.return; null !== b;) {
      if (Jh(b)) {
        var c = b;break a;
      }b = b.return;
    }r("160");c = void 0;
  }var d = b = void 0;switch (c.tag) {case 5:
      b = c.stateNode;d = !1;break;case 3:
      b = c.stateNode.containerInfo;d = !0;break;case 4:
      b = c.stateNode.containerInfo;d = !0;break;default:
      r("161");}c.effectTag & 16 && (Xe(b, ""), c.effectTag &= -17);a: b: for (c = a;;) {
    for (; null === c.sibling;) {
      if (null === c.return || Jh(c.return)) {
        c = null;break a;
      }c = c.return;
    }c.sibling.return = c.return;for (c = c.sibling; 5 !== c.tag && 6 !== c.tag;) {
      if (c.effectTag & 2) continue b;
      if (null === c.child || 4 === c.tag) continue b;else c.child.return = c, c = c.child;
    }if (!(c.effectTag & 2)) {
      c = c.stateNode;break a;
    }
  }for (var e = a;;) {
    if (5 === e.tag || 6 === e.tag) {
      if (c) {
        if (d) {
          var f = b,
              g = e.stateNode,
              h = c;8 === f.nodeType ? f.parentNode.insertBefore(g, h) : f.insertBefore(g, h);
        } else b.insertBefore(e.stateNode, c);
      } else d ? (g = b, h = e.stateNode, 8 === g.nodeType ? (f = g.parentNode, f.insertBefore(h, g)) : (f = g, f.appendChild(h)), g = g._reactRootContainer, null !== g && void 0 !== g || null !== f.onclick || (f.onclick = ef)) : b.appendChild(e.stateNode);
    } else if (4 !== e.tag && null !== e.child) {
      e.child.return = e;e = e.child;continue;
    }if (e === a) break;for (; null === e.sibling;) {
      if (null === e.return || e.return === a) return;e = e.return;
    }e.sibling.return = e.return;e = e.sibling;
  }
}
function Ih(a) {
  for (var b = a, c = !1, d = void 0, e = void 0;;) {
    if (!c) {
      c = b.return;a: for (;;) {
        null === c ? r("160") : void 0;switch (c.tag) {case 5:
            d = c.stateNode;e = !1;break a;case 3:
            d = c.stateNode.containerInfo;e = !0;break a;case 4:
            d = c.stateNode.containerInfo;e = !0;break a;}c = c.return;
      }c = !0;
    }if (5 === b.tag || 6 === b.tag) {
      a: for (var f = b, g = f;;) {
        if (Hh(g), null !== g.child && 4 !== g.tag) g.child.return = g, g = g.child;else {
          if (g === f) break;for (; null === g.sibling;) {
            if (null === g.return || g.return === f) break a;g = g.return;
          }g.sibling.return = g.return;g = g.sibling;
        }
      }e ? (f = d, g = b.stateNode, 8 === f.nodeType ? f.parentNode.removeChild(g) : f.removeChild(g)) : d.removeChild(b.stateNode);
    } else if (4 === b.tag ? (d = b.stateNode.containerInfo, e = !0) : Hh(b), null !== b.child) {
      b.child.return = b;b = b.child;continue;
    }if (b === a) break;for (; null === b.sibling;) {
      if (null === b.return || b.return === a) return;b = b.return;4 === b.tag && (c = !1);
    }b.sibling.return = b.return;b = b.sibling;
  }
}
function Lh(a, b) {
  switch (b.tag) {case 1:
      break;case 5:
      var c = b.stateNode;if (null != c) {
        var d = b.memoizedProps,
            e = null !== a ? a.memoizedProps : d;a = b.type;var f = b.updateQueue;b.updateQueue = null;if (null !== f) {
          c[Ma] = d;"input" === a && "radio" === d.type && null != d.name && Sc(c, d);cf(a, e);b = cf(a, d);for (e = 0; e < f.length; e += 2) {
            var g = f[e],
                h = f[e + 1];"style" === g ? $e(c, h) : "dangerouslySetInnerHTML" === g ? We(c, h) : "children" === g ? Xe(c, h) : Oc(c, g, h, b);
          }switch (a) {case "input":
              Tc(c, d);break;case "textarea":
              Qe(c, d);break;case "select":
              a = c._wrapperState.wasMultiple, c._wrapperState.wasMultiple = !!d.multiple, f = d.value, null != f ? Ne(c, !!d.multiple, f, !1) : a !== !!d.multiple && (null != d.defaultValue ? Ne(c, !!d.multiple, d.defaultValue, !0) : Ne(c, !!d.multiple, d.multiple ? [] : "", !1));}
        }
      }break;case 6:
      null === b.stateNode ? r("162") : void 0;b.stateNode.nodeValue = b.memoizedProps;break;case 3:
      break;case 12:
      break;case 13:
      break;case 17:
      break;default:
      r("163");}
}function Mh(a, b, c) {
  c = Tf(c);c.tag = 3;c.payload = { element: null };var d = b.value;c.callback = function () {
    Nh(d);Eh(a, b);
  };return c;
}
function Oh(a, b, c) {
  c = Tf(c);c.tag = 3;var d = a.type.getDerivedStateFromError;if ("function" === typeof d) {
    var e = b.value;c.payload = function () {
      return d(e);
    };
  }var f = a.stateNode;null !== f && "function" === typeof f.componentDidCatch && (c.callback = function () {
    "function" !== typeof d && (null === Ph ? Ph = new Set([this]) : Ph.add(this));var c = b.value,
        e = b.stack;Eh(a, b);this.componentDidCatch(c, { componentStack: null !== e ? e : "" });
  });return c;
}
function Qh(a) {
  switch (a.tag) {case 1:
      M(a.type) && tf(a);var b = a.effectTag;return b & 1024 ? (a.effectTag = b & -1025 | 64, a) : null;case 3:
      return pg(a), uf(a), b = a.effectTag, 0 !== (b & 64) ? r("285") : void 0, a.effectTag = b & -1025 | 64, a;case 5:
      return rg(a), null;case 13:
      b = a.effectTag;if (b & 1024) {
        a.effectTag = b & -1025 | 64;b = a.alternate;b = null !== b ? b.memoizedState : null;var c = a.memoizedState;null === c ? c = { alreadyCaptured: !0, didTimeout: !1, timedOutAt: 0 } : b === c ? c = { alreadyCaptured: !0, didTimeout: c.didTimeout, timedOutAt: c.timedOutAt } : c.alreadyCaptured = !0;a.memoizedState = c;return a;
      }return null;case 4:
      return pg(a), null;case 10:
      return hg(a), null;default:
      return null;}
}var Rh = { readContext: jg },
    Sh = kc.ReactCurrentOwner,
    Th = 0,
    Uh = 0,
    Vh = !1,
    Q = null,
    R = null,
    S = 0,
    Wh = -1,
    Xh = !1,
    T = null,
    Yh = !1,
    Ph = null;function Zh() {
  if (null !== Q) for (var a = Q.return; null !== a;) {
    var b = a;switch (b.tag) {case 1:
        var c = b.type.childContextTypes;null !== c && void 0 !== c && tf(b);break;case 3:
        pg(b);uf(b);break;case 5:
        rg(b);break;case 4:
        pg(b);break;case 10:
        hg(b);}a = a.return;
  }R = null;S = 0;Wh = -1;Xh = !1;Q = null;
}
function $h(a) {
  for (;;) {
    var b = a.alternate,
        c = a.return,
        d = a.sibling;if (0 === (a.effectTag & 512)) {
      var e = b;b = a;var f = b.pendingProps;switch (b.tag) {case 2:
          break;case 16:
          break;case 15:case 0:
          break;case 1:
          M(b.type) && tf(b);break;case 3:
          pg(b);uf(b);f = b.stateNode;f.pendingContext && (f.context = f.pendingContext, f.pendingContext = null);if (null === e || null === e.child) Qg(b), b.effectTag &= -3;Bh(b);break;case 5:
          rg(b);var g = ng(mg.current),
              h = b.type;if (null !== e && null != b.stateNode) Ch(e, b, h, f, g), e.ref !== b.ref && (b.effectTag |= 128);else if (f) {
            var k = ng(O.current);if (Qg(b)) {
              f = b;e = f.stateNode;var l = f.type,
                  m = f.memoizedProps,
                  p = g;e[La] = f;e[Ma] = m;h = void 0;g = l;switch (g) {case "iframe":case "object":
                  H("load", e);break;case "video":case "audio":
                  for (l = 0; l < lb.length; l++) {
                    H(lb[l], e);
                  }break;case "source":
                  H("error", e);break;case "img":case "image":case "link":
                  H("error", e);H("load", e);break;case "form":
                  H("reset", e);H("submit", e);break;case "details":
                  H("toggle", e);break;case "input":
                  Rc(e, m);H("invalid", e);df(p, "onChange");break;case "select":
                  e._wrapperState = { wasMultiple: !!m.multiple };H("invalid", e);df(p, "onChange");break;case "textarea":
                  Pe(e, m), H("invalid", e), df(p, "onChange");}bf(g, m);l = null;for (h in m) {
                m.hasOwnProperty(h) && (k = m[h], "children" === h ? "string" === typeof k ? e.textContent !== k && (l = ["children", k]) : "number" === typeof k && e.textContent !== "" + k && (l = ["children", "" + k]) : ua.hasOwnProperty(h) && null != k && df(p, h));
              }switch (g) {case "input":
                  ic(e);bd(e, m, !0);break;case "textarea":
                  ic(e);Re(e, m);break;case "select":case "option":
                  break;default:
                  "function" === typeof m.onClick && (e.onclick = ef);}h = l;f.updateQueue = h;f = null !== h ? !0 : !1;f && zh(b);
            } else {
              m = b;e = h;p = f;l = 9 === g.nodeType ? g : g.ownerDocument;k === Se.html && (k = Te(e));k === Se.html ? "script" === e ? (e = l.createElement("div"), e.innerHTML = "<script>\x3c/script>", l = e.removeChild(e.firstChild)) : "string" === typeof p.is ? l = l.createElement(e, { is: p.is }) : (l = l.createElement(e), "select" === e && p.multiple && (l.multiple = !0)) : l = l.createElementNS(k, e);e = l;e[La] = m;e[Ma] = f;Ah(e, b, !1, !1);p = e;l = h;m = f;var v = g,
                  B = cf(l, m);switch (l) {case "iframe":case "object":
                  H("load", p);g = m;break;case "video":case "audio":
                  for (g = 0; g < lb.length; g++) {
                    H(lb[g], p);
                  }g = m;break;case "source":
                  H("error", p);g = m;break;case "img":case "image":case "link":
                  H("error", p);H("load", p);g = m;break;case "form":
                  H("reset", p);H("submit", p);g = m;break;case "details":
                  H("toggle", p);g = m;break;case "input":
                  Rc(p, m);g = Qc(p, m);H("invalid", p);df(v, "onChange");break;case "option":
                  g = Me(p, m);break;case "select":
                  p._wrapperState = { wasMultiple: !!m.multiple };g = n({}, m, { value: void 0 });H("invalid", p);df(v, "onChange");break;case "textarea":
                  Pe(p, m);g = Oe(p, m);H("invalid", p);df(v, "onChange");break;default:
                  g = m;}bf(l, g);k = void 0;var w = l,
                  C = p,
                  u = g;for (k in u) {
                if (u.hasOwnProperty(k)) {
                  var q = u[k];"style" === k ? $e(C, q) : "dangerouslySetInnerHTML" === k ? (q = q ? q.__html : void 0, null != q && We(C, q)) : "children" === k ? "string" === typeof q ? ("textarea" !== w || "" !== q) && Xe(C, q) : "number" === typeof q && Xe(C, "" + q) : "suppressContentEditableWarning" !== k && "suppressHydrationWarning" !== k && "autoFocus" !== k && (ua.hasOwnProperty(k) ? null != q && df(v, k) : null != q && Oc(C, k, q, B));
                }
              }switch (l) {case "input":
                  ic(p);
                  bd(p, m, !1);break;case "textarea":
                  ic(p);Re(p, m);break;case "option":
                  null != m.value && p.setAttribute("value", "" + Pc(m.value));break;case "select":
                  g = p;g.multiple = !!m.multiple;p = m.value;null != p ? Ne(g, !!m.multiple, p, !1) : null != m.defaultValue && Ne(g, !!m.multiple, m.defaultValue, !0);break;default:
                  "function" === typeof g.onClick && (p.onclick = ef);}(f = hf(h, f)) && zh(b);b.stateNode = e;
            }null !== b.ref && (b.effectTag |= 128);
          } else null === b.stateNode ? r("166") : void 0;break;case 6:
          e && null != b.stateNode ? Dh(e, b, e.memoizedProps, f) : ("string" !== typeof f && (null === b.stateNode ? r("166") : void 0), e = ng(mg.current), ng(O.current), Qg(b) ? (f = b, h = f.stateNode, e = f.memoizedProps, h[La] = f, (f = h.nodeValue !== e) && zh(b)) : (h = b, f = (9 === e.nodeType ? e : e.ownerDocument).createTextNode(f), f[La] = b, h.stateNode = f));break;case 11:
          break;case 13:
          f = b.memoizedState;h = null !== e ? e.memoizedState : null;(null !== f && f.didTimeout) !== (null !== h && h.didTimeout) && (b.effectTag |= 4);break;case 7:
          break;case 8:
          break;case 12:
          break;case 4:
          pg(b);Bh(b);break;case 10:
          hg(b);break;case 9:
          break;case 14:
          break;
        case 17:
          M(b.type) && tf(b);break;default:
          r("156");}Q = null;b = a;if (1073741823 === S || 1073741823 !== b.childExpirationTime) {
        f = 0;for (h = b.child; null !== h;) {
          e = h.expirationTime;g = h.childExpirationTime;if (0 === f || 0 !== e && e < f) f = e;if (0 === f || 0 !== g && g < f) f = g;h = h.sibling;
        }b.childExpirationTime = f;
      }null !== c && 0 === (c.effectTag & 512) && (null === c.firstEffect && (c.firstEffect = a.firstEffect), null !== a.lastEffect && (null !== c.lastEffect && (c.lastEffect.nextEffect = a.firstEffect), c.lastEffect = a.lastEffect), 1 < a.effectTag && (null !== c.lastEffect ? c.lastEffect.nextEffect = a : c.firstEffect = a, c.lastEffect = a));
    } else {
      a = Qh(a, S);if (null !== a) return a.effectTag &= 511, a;null !== c && (c.firstEffect = c.lastEffect = null, c.effectTag |= 512);
    }if (null !== d) return d;if (null !== c) a = c;else break;
  }return null;
}function ai(a) {
  var b = eh(a.alternate, a, S);a.memoizedProps = a.pendingProps;null === b && (b = $h(a));Sh.current = null;return b;
}
function bi(a, b, c) {
  Vh ? r("243") : void 0;Vh = !0;Sh.currentDispatcher = Rh;var d = a.nextExpirationTimeToWorkOn;if (d !== S || a !== R || null === Q) Zh(), R = a, S = d, Q = Gf(R.current, null, S), a.pendingCommitExpirationTime = 0;var e = !1;do {
    try {
      if (b) for (; null !== Q && !ci();) {
        Q = ai(Q);
      } else for (; null !== Q;) {
        Q = ai(Q);
      }
    } catch (C) {
      if (null === Q) e = !0, Nh(C);else {
        null === Q ? r("271") : void 0;var f = Q,
            g = f.return;if (null === g) e = !0, Nh(C);else {
          a: {
            var h = a,
                k = g,
                l = f,
                m = C;g = S;l.effectTag |= 512;l.firstEffect = l.lastEffect = null;if (null !== m && "object" === (typeof m === "undefined" ? "undefined" : _typeof(m)) && "function" === typeof m.then) {
              var p = m;m = k;var v = -1,
                  B = -1;do {
                if (13 === m.tag) {
                  var w = m.alternate;if (null !== w && (w = w.memoizedState, null !== w && w.didTimeout)) {
                    B = 10 * (w.timedOutAt - 2);break;
                  }w = m.pendingProps.maxDuration;if ("number" === typeof w) if (0 >= w) v = 0;else if (-1 === v || w < v) v = w;
                }m = m.return;
              } while (null !== m);m = k;do {
                if (w = 13 === m.tag) void 0 === m.memoizedProps.fallback ? w = !1 : (w = m.memoizedState, w = null === w || !w.didTimeout);if (w) {
                  k = di.bind(null, h, m, l, 0 === (m.mode & 1) ? 1 : g);p.then(k, k);if (0 === (m.mode & 1)) {
                    m.effectTag |= 32;P(l.alternate, l, null, g);
                    l.effectTag &= -513;1 === l.tag && (l.effectTag &= -421, null === l.alternate && (l.tag = 17));break a;
                  }-1 === v ? h = 1073741823 : (-1 === B && (B = 10 * (Pf(h, g) - 2) - 5E3), h = B + v);0 <= h && Wh < h && (Wh = h);m.effectTag |= 1024;m.expirationTime = g;break a;
                }m = m.return;
              } while (null !== m);m = Error("An update was suspended, but no placeholder UI was provided.");
            }Xh = !0;m = bg(m, l);h = k;do {
              switch (h.tag) {case 3:
                  l = m;h.effectTag |= 1024;h.expirationTime = g;g = Mh(h, l, g);Wf(h, g);break a;case 1:
                  if (l = m, k = h.type, p = h.stateNode, 0 === (h.effectTag & 64) && ("function" === typeof k.getDerivedStateFromError || null !== p && "function" === typeof p.componentDidCatch && (null === Ph || !Ph.has(p)))) {
                    h.effectTag |= 1024;h.expirationTime = g;g = Oh(h, l, g);Wf(h, g);break a;
                  }}h = h.return;
            } while (null !== h);
          }Q = $h(f);continue;
        }
      }
    }break;
  } while (1);Vh = !1;fg = eg = dg = Sh.currentDispatcher = null;if (e) R = null, a.finishedWork = null;else if (null !== Q) a.finishedWork = null;else {
    b = a.current.alternate;null === b ? r("281") : void 0;R = null;if (Xh) {
      e = a.latestPendingTime;f = a.latestSuspendedTime;g = a.latestPingedTime;if (0 !== e && e > d || 0 !== f && f > d || 0 !== g && g > d) {
        Of(a, d);ei(a, b, d, a.expirationTime, -1);return;
      }if (!a.didError && !c) {
        a.didError = !0;d = a.nextExpirationTimeToWorkOn = d;c = a.expirationTime = 1;ei(a, b, d, c, -1);return;
      }
    }c || -1 === Wh ? (a.pendingCommitExpirationTime = d, a.finishedWork = b) : (Of(a, d), c = 10 * (Pf(a, d) - 2), c < Wh && (Wh = c), c = 10 * (vg() - 2), c = Wh - c, ei(a, b, d, a.expirationTime, 0 > c ? 0 : c));
  }
}
function Gh(a, b) {
  var c;a: {
    Vh && !Yh ? r("263") : void 0;for (c = a.return; null !== c;) {
      switch (c.tag) {case 1:
          var d = c.stateNode;if ("function" === typeof c.type.getDerivedStateFromError || "function" === typeof d.componentDidCatch && (null === Ph || !Ph.has(d))) {
            a = bg(b, a);a = Oh(c, a, 1);Vf(c, a);xg(c, 1);c = void 0;break a;
          }break;case 3:
          a = bg(b, a);a = Mh(c, a, 1);Vf(c, a);xg(c, 1);c = void 0;break a;}c = c.return;
    }3 === a.tag && (c = bg(b, a), c = Mh(a, c, 1), Vf(a, c), xg(a, 1));c = void 0;
  }return c;
}
function wg(a, b) {
  0 !== Uh ? a = Uh : Vh ? a = Yh ? 1 : S : b.mode & 1 ? (a = fi ? 2 + 10 * (((a - 2 + 15) / 10 | 0) + 1) : 2 + 25 * (((a - 2 + 500) / 25 | 0) + 1), null !== R && a === S && (a += 1)) : a = 1;fi && a > gi && (gi = a);return a;
}
function di(a, b, c, d) {
  var e = a.earliestSuspendedTime;var f = a.latestSuspendedTime;if (0 !== e && d >= e && d <= f) {
    f = e = d;a.didError = !1;var g = a.latestPingedTime;if (0 === g || g < f) a.latestPingedTime = f;Nf(f, a);
  } else e = vg(), e = wg(e, b), Mf(a, e);0 !== (b.mode & 1) && a === R && S === d && (R = null);hi(b, e);0 === (b.mode & 1) && (hi(c, e), 1 === c.tag && null !== c.stateNode && (b = Tf(e), b.tag = 2, Vf(c, b)));c = a.expirationTime;0 !== c && ii(a, c);
}
function hi(a, b) {
  if (0 === a.expirationTime || a.expirationTime > b) a.expirationTime = b;var c = a.alternate;null !== c && (0 === c.expirationTime || c.expirationTime > b) && (c.expirationTime = b);var d = a.return,
      e = null;if (null === d && 3 === a.tag) e = a.stateNode;else for (; null !== d;) {
    c = d.alternate;if (0 === d.childExpirationTime || d.childExpirationTime > b) d.childExpirationTime = b;null !== c && (0 === c.childExpirationTime || c.childExpirationTime > b) && (c.childExpirationTime = b);if (null === d.return && 3 === d.tag) {
      e = d.stateNode;break;
    }d = d.return;
  }return null === e ? null : e;
}function xg(a, b) {
  a = hi(a, b);null !== a && (!Vh && 0 !== S && b < S && Zh(), Mf(a, b), Vh && !Yh && R === a || ii(a, a.expirationTime), ji > ki && (ji = 0, r("185")));
}function li(a, b, c, d, e) {
  var f = Uh;Uh = 1;try {
    return a(b, c, d, e);
  } finally {
    Uh = f;
  }
}var U = null,
    V = null,
    mi = 0,
    ni = void 0,
    W = !1,
    X = null,
    Y = 0,
    gi = 0,
    oi = !1,
    pi = !1,
    qi = null,
    ri = null,
    Z = !1,
    si = !1,
    fi = !1,
    ti = null,
    ui = da.unstable_now(),
    vi = (ui / 10 | 0) + 2,
    wi = vi,
    ki = 50,
    ji = 0,
    xi = null,
    yi = 1;function zi() {
  vi = ((da.unstable_now() - ui) / 10 | 0) + 2;
}
function Ai(a, b) {
  if (0 !== mi) {
    if (b > mi) return;null !== ni && da.unstable_cancelCallback(ni);
  }mi = b;a = da.unstable_now() - ui;ni = da.unstable_scheduleCallback(Bi, { timeout: 10 * (b - 2) - a });
}function ei(a, b, c, d, e) {
  a.expirationTime = d;0 !== e || ci() ? 0 < e && (a.timeoutHandle = kf(Ci.bind(null, a, b, c), e)) : (a.pendingCommitExpirationTime = c, a.finishedWork = b);
}function Ci(a, b, c) {
  a.pendingCommitExpirationTime = c;a.finishedWork = b;zi();wi = vi;Di(a, c);
}function vg() {
  if (W) return wi;Ei();if (0 === Y || 1073741823 === Y) zi(), wi = vi;return wi;
}
function ii(a, b) {
  if (null === a.nextScheduledRoot) a.expirationTime = b, null === V ? (U = V = a, a.nextScheduledRoot = a) : (V = V.nextScheduledRoot = a, V.nextScheduledRoot = U);else {
    var c = a.expirationTime;if (0 === c || b < c) a.expirationTime = b;
  }W || (Z ? si && (X = a, Y = 1, Fi(a, 1, !0)) : 1 === b ? Gi(1, null) : Ai(a, b));
}
function Ei() {
  var a = 0,
      b = null;if (null !== V) for (var c = V, d = U; null !== d;) {
    var e = d.expirationTime;if (0 === e) {
      null === c || null === V ? r("244") : void 0;if (d === d.nextScheduledRoot) {
        U = V = d.nextScheduledRoot = null;break;
      } else if (d === U) U = e = d.nextScheduledRoot, V.nextScheduledRoot = e, d.nextScheduledRoot = null;else if (d === V) {
        V = c;V.nextScheduledRoot = U;d.nextScheduledRoot = null;break;
      } else c.nextScheduledRoot = d.nextScheduledRoot, d.nextScheduledRoot = null;d = c.nextScheduledRoot;
    } else {
      if (0 === a || e < a) a = e, b = d;if (d === V) break;if (1 === a) break;
      c = d;d = d.nextScheduledRoot;
    }
  }X = b;Y = a;
}function Bi(a) {
  if (a.didTimeout && null !== U) {
    zi();var b = U;do {
      var c = b.expirationTime;0 !== c && vi >= c && (b.nextExpirationTimeToWorkOn = vi);b = b.nextScheduledRoot;
    } while (b !== U);
  }Gi(0, a);
}
function Gi(a, b) {
  ri = b;Ei();if (null !== ri) for (zi(), wi = vi; null !== X && 0 !== Y && (0 === a || a >= Y) && (!oi || vi >= Y);) {
    Fi(X, Y, vi >= Y), Ei(), zi(), wi = vi;
  } else for (; null !== X && 0 !== Y && (0 === a || a >= Y);) {
    Fi(X, Y, !0), Ei();
  }null !== ri && (mi = 0, ni = null);0 !== Y && Ai(X, Y);ri = null;oi = !1;ji = 0;xi = null;if (null !== ti) for (a = ti, ti = null, b = 0; b < a.length; b++) {
    var c = a[b];try {
      c._onComplete();
    } catch (d) {
      pi || (pi = !0, qi = d);
    }
  }if (pi) throw a = qi, qi = null, pi = !1, a;
}function Di(a, b) {
  W ? r("253") : void 0;X = a;Y = b;Fi(a, b, !0);Gi(1, null);
}
function Fi(a, b, c) {
  W ? r("245") : void 0;W = !0;if (null === ri || c) {
    var d = a.finishedWork;null !== d ? Hi(a, d, b) : (a.finishedWork = null, d = a.timeoutHandle, -1 !== d && (a.timeoutHandle = -1, lf(d)), bi(a, !1, c), d = a.finishedWork, null !== d && Hi(a, d, b));
  } else d = a.finishedWork, null !== d ? Hi(a, d, b) : (a.finishedWork = null, d = a.timeoutHandle, -1 !== d && (a.timeoutHandle = -1, lf(d)), bi(a, !0, c), d = a.finishedWork, null !== d && (ci() ? a.finishedWork = d : Hi(a, d, b)));W = !1;
}
function Hi(a, b, c) {
  var d = a.firstBatch;if (null !== d && d._expirationTime <= c && (null === ti ? ti = [d] : ti.push(d), d._defer)) {
    a.finishedWork = b;a.expirationTime = 0;return;
  }a.finishedWork = null;a === xi ? ji++ : (xi = a, ji = 0);Yh = Vh = !0;a.current === b ? r("177") : void 0;var e = a.pendingCommitExpirationTime;0 === e ? r("261") : void 0;a.pendingCommitExpirationTime = 0;var f = b.expirationTime,
      g = b.childExpirationTime,
      h = 0 === f || 0 !== g && g < f ? g : f;a.didError = !1;if (0 === h) a.earliestPendingTime = 0, a.latestPendingTime = 0, a.earliestSuspendedTime = 0, a.latestSuspendedTime = 0, a.latestPingedTime = 0;else {
    var k = a.latestPendingTime;0 !== k && (k < h ? a.earliestPendingTime = a.latestPendingTime = 0 : a.earliestPendingTime < h && (a.earliestPendingTime = a.latestPendingTime));var l = a.earliestSuspendedTime;0 === l ? Mf(a, h) : h > a.latestSuspendedTime ? (a.earliestSuspendedTime = 0, a.latestSuspendedTime = 0, a.latestPingedTime = 0, Mf(a, h)) : h < l && Mf(a, h);
  }Nf(0, a);Sh.current = null;if (1 < b.effectTag) {
    if (null !== b.lastEffect) {
      b.lastEffect.nextEffect = b;var m = b.firstEffect;
    } else m = b;
  } else m = b.firstEffect;ff = ce;var p = pe();if (qe(p)) {
    if ("selectionStart" in p) var v = { start: p.selectionStart, end: p.selectionEnd };else a: {
      var B = p.ownerDocument,
          w = B && B.defaultView || window,
          C = w.getSelection && w.getSelection();if (C && 0 !== C.rangeCount) {
        var u = C.anchorNode,
            q = C.anchorOffset,
            A = C.focusNode,
            fe = C.focusOffset;try {
          u.nodeType, A.nodeType;
        } catch (db) {
          v = null;break a;
        }var Ib = 0,
            Jc = -1,
            Kc = -1,
            Ni = 0,
            Oi = 0,
            t = p,
            Jb = null;b: for (;;) {
          for (var Lc;;) {
            t !== u || 0 !== q && 3 !== t.nodeType || (Jc = Ib + q);t !== A || 0 !== fe && 3 !== t.nodeType || (Kc = Ib + fe);3 === t.nodeType && (Ib += t.nodeValue.length);if (null === (Lc = t.firstChild)) break;
            Jb = t;t = Lc;
          }for (;;) {
            if (t === p) break b;Jb === u && ++Ni === q && (Jc = Ib);Jb === A && ++Oi === fe && (Kc = Ib);if (null !== (Lc = t.nextSibling)) break;t = Jb;Jb = t.parentNode;
          }t = Lc;
        }v = -1 === Jc || -1 === Kc ? null : { start: Jc, end: Kc };
      } else v = null;
    }var fh = v || { start: 0, end: 0 };
  } else fh = null;gf = { focusedElem: p, selectionRange: fh };ce = !1;for (T = m; null !== T;) {
    var gh = !1,
        hh = void 0;try {
      for (; null !== T;) {
        if (T.effectTag & 256) {
          var ve = T.alternate;a: {
            var Qb = T;switch (Qb.tag) {case 1:
                if (Qb.effectTag & 256 && null !== ve) {
                  var Zi = ve.memoizedProps,
                      $i = ve.memoizedState,
                      Vc = Qb.stateNode;
                  Vc.props = Qb.memoizedProps;Vc.state = Qb.memoizedState;var aj = Vc.getSnapshotBeforeUpdate(Zi, $i);Vc.__reactInternalSnapshotBeforeUpdate = aj;
                }break a;case 3:case 5:case 6:case 4:case 17:
                break a;default:
                r("163");}
          }
        }T = T.nextEffect;
      }
    } catch (db) {
      gh = !0, hh = db;
    }gh && (null === T ? r("178") : void 0, Gh(T, hh), null !== T && (T = T.nextEffect));
  }for (T = m; null !== T;) {
    var ih = !1,
        jh = void 0;try {
      for (; null !== T;) {
        var we = T.effectTag;we & 16 && Xe(T.stateNode, "");if (we & 128) {
          var kh = T.alternate;if (null !== kh) {
            var Wc = kh.ref;null !== Wc && ("function" === typeof Wc ? Wc(null) : Wc.current = null);
          }
        }switch (we & 14) {case 2:
            Kh(T);T.effectTag &= -3;break;case 6:
            Kh(T);T.effectTag &= -3;Lh(T.alternate, T);break;case 4:
            Lh(T.alternate, T);break;case 8:
            var lh = T;Ih(lh);var Rb = lh;Rb.return = null;Rb.child = null;Rb.alternate && (Rb.alternate.child = null, Rb.alternate.return = null);}T = T.nextEffect;
      }
    } catch (db) {
      ih = !0, jh = db;
    }ih && (null === T ? r("178") : void 0, Gh(T, jh), null !== T && (T = T.nextEffect));
  }var mh = gf,
      bj = pe(),
      E = mh.focusedElem,
      eb = mh.selectionRange;if (bj !== E && E && E.ownerDocument && oe(E.ownerDocument.documentElement, E)) {
    if (null !== eb && qe(E)) {
      var nh = eb.start,
          xe = eb.end;void 0 === xe && (xe = nh);if ("selectionStart" in E) E.selectionStart = nh, E.selectionEnd = Math.min(xe, E.value.length);else {
        var ye = E.ownerDocument || document,
            ba = (ye && ye.defaultView || window).getSelection(),
            oh = E.textContent.length,
            fb = Math.min(eb.start, oh),
            Sb = void 0 === eb.end ? fb : Math.min(eb.end, oh);if (!ba.extend && fb > Sb) {
          var cj = Sb;Sb = fb;fb = cj;
        }var Tb = ne(E, fb),
            Ja = ne(E, Sb);if (Tb && Ja && (1 !== ba.rangeCount || ba.anchorNode !== Tb.node || ba.anchorOffset !== Tb.offset || ba.focusNode !== Ja.node || ba.focusOffset !== Ja.offset)) {
          var Xc = ye.createRange();Xc.setStart(Tb.node, Tb.offset);ba.removeAllRanges();fb > Sb ? (ba.addRange(Xc), ba.extend(Ja.node, Ja.offset)) : (Xc.setEnd(Ja.node, Ja.offset), ba.addRange(Xc));
        }
      }
    }for (var ze = [], gb = E; gb = gb.parentNode;) {
      1 === gb.nodeType && ze.push({ element: gb, left: gb.scrollLeft, top: gb.scrollTop });
    }"function" === typeof E.focus && E.focus();for (var Ae = 0; Ae < ze.length; Ae++) {
      var Yc = ze[Ae];Yc.element.scrollLeft = Yc.left;Yc.element.scrollTop = Yc.top;
    }
  }gf = null;ce = !!ff;ff = null;a.current = b;for (T = m; null !== T;) {
    var ph = !1,
        qh = void 0;try {
      for (var dj = e; null !== T;) {
        var rh = T.effectTag;if (rh & 36) {
          var Zc = void 0,
              hb = T.alternate,
              x = T,
              sh = dj;switch (x.tag) {case 1:
              var ca = x.stateNode;if (x.effectTag & 4) if (null === hb) ca.props = x.memoizedProps, ca.state = x.memoizedState, ca.componentDidMount();else {
                var ej = hb.memoizedProps,
                    fj = hb.memoizedState;ca.props = x.memoizedProps;ca.state = x.memoizedState;ca.componentDidUpdate(ej, fj, ca.__reactInternalSnapshotBeforeUpdate);
              }var th = x.updateQueue;null !== th && (ca.props = x.memoizedProps, ca.state = x.memoizedState, $f(x, th, ca, sh));break;case 3:
              var uh = x.updateQueue;if (null !== uh) {
                var Be = null;if (null !== x.child) switch (x.child.tag) {case 5:
                    Be = x.child.stateNode;break;case 1:
                    Be = x.child.stateNode;}$f(x, uh, Be, sh);
              }break;case 5:
              var gj = x.stateNode;null === hb && x.effectTag & 4 && hf(x.type, x.memoizedProps) && gj.focus();break;case 6:
              break;case 4:
              break;case 12:
              break;case 13:
              if (x.effectTag & 32) {
                x.memoizedState = { alreadyCaptured: !0, didTimeout: !1, timedOutAt: 0 };xg(x, 1);break;
              }var vh = null !== hb ? hb.memoizedState : null,
                  Ub = x.memoizedState,
                  hj = null !== vh ? vh.didTimeout : !1,
                  Ce = x;if (null === Ub) Zc = !1;else if (Zc = Ub.didTimeout) Ce = x.child, Ub.alreadyCaptured = !1, 0 === Ub.timedOutAt && (Ub.timedOutAt = vg());if (Zc !== hj && null !== Ce) a: for (var De = Ce, wh = Zc, z = De;;) {
                if (5 === z.tag) {
                  var ij = z.stateNode;if (wh) ij.style.display = "none";else {
                    var jj = z.stateNode,
                        $c = z.memoizedProps.style,
                        kj = void 0 !== $c && null !== $c && $c.hasOwnProperty("display") ? $c.display : null;jj.style.display = kj;
                  }
                } else if (6 === z.tag) z.stateNode.nodeValue = wh ? "" : z.memoizedProps;else if (null !== z.child) {
                  z.child.return = z;z = z.child;continue;
                }if (z === De) break a;for (; null === z.sibling;) {
                  if (null === z.return || z.return === De) break a;z = z.return;
                }z.sibling.return = z.return;z = z.sibling;
              }break;case 17:
              break;default:
              r("163");}
        }if (rh & 128) {
          var ad = T.ref;if (null !== ad) {
            var xh = T.stateNode;switch (T.tag) {case 5:
                var Ee = xh;break;default:
                Ee = xh;}"function" === typeof ad ? ad(Ee) : ad.current = Ee;
          }
        }var lj = T.nextEffect;T.nextEffect = null;T = lj;
      }
    } catch (db) {
      ph = !0, qh = db;
    }ph && (null === T ? r("178") : void 0, Gh(T, qh), null !== T && (T = T.nextEffect));
  }Vh = Yh = !1;"function" === typeof zf && zf(b.stateNode);var Fe = b.expirationTime,
      Ge = b.childExpirationTime,
      yh = 0 === Fe || 0 !== Ge && Ge < Fe ? Ge : Fe;0 === yh && (Ph = null);a.expirationTime = yh;a.finishedWork = null;
}function ci() {
  return oi ? !0 : null === ri || ri.timeRemaining() > yi ? !1 : oi = !0;
}function Nh(a) {
  null === X ? r("246") : void 0;X.expirationTime = 0;pi || (pi = !0, qi = a);
}function Ii(a, b) {
  var c = Z;Z = !0;try {
    return a(b);
  } finally {
    (Z = c) || W || Gi(1, null);
  }
}function Ji(a, b) {
  if (Z && !si) {
    si = !0;try {
      return a(b);
    } finally {
      si = !1;
    }
  }return a(b);
}
function Ki(a, b, c) {
  if (fi) return a(b, c);Z || W || 0 === gi || (Gi(gi, null), gi = 0);var d = fi,
      e = Z;Z = fi = !0;try {
    return a(b, c);
  } finally {
    fi = d, (Z = e) || W || Gi(1, null);
  }
}
function Li(a, b, c, d, e) {
  var f = b.current;a: if (c) {
    c = c._reactInternalFiber;b: {
      2 === Gd(c) && 1 === c.tag ? void 0 : r("170");var g = c;do {
        switch (g.tag) {case 3:
            g = g.stateNode.context;break b;case 1:
            if (M(g.type)) {
              g = g.stateNode.__reactInternalMemoizedMergedChildContext;break b;
            }}g = g.return;
      } while (null !== g);r("171");g = void 0;
    }if (1 === c.tag) {
      var h = c.type;if (M(h)) {
        c = wf(c, h, g);break a;
      }
    }c = g;
  } else c = qf;null === b.context ? b.context = c : b.pendingContext = c;b = e;e = Tf(d);e.payload = { element: a };b = void 0 === b ? null : b;null !== b && (e.callback = b);
  Vf(f, e);xg(f, d);return d;
}function Mi(a, b, c, d) {
  var e = b.current,
      f = vg();e = wg(f, e);return Li(a, b, c, e, d);
}function Pi(a) {
  a = a.current;if (!a.child) return null;switch (a.child.tag) {case 5:
      return a.child.stateNode;default:
      return a.child.stateNode;}
}function Qi(a, b, c) {
  var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;return { $$typeof: nc, key: null == d ? null : "" + d, children: a, containerInfo: b, implementation: c };
}
Nb = function Nb(a, b, c) {
  switch (b) {case "input":
      Tc(a, c);b = c.name;if ("radio" === c.type && null != b) {
        for (c = a; c.parentNode;) {
          c = c.parentNode;
        }c = c.querySelectorAll("input[name=" + JSON.stringify("" + b) + '][type="radio"]');for (b = 0; b < c.length; b++) {
          var d = c[b];if (d !== a && d.form === a.form) {
            var e = Qa(d);e ? void 0 : r("90");jc(d);Tc(d, e);
          }
        }
      }break;case "textarea":
      Qe(a, c);break;case "select":
      b = c.value, null != b && Ne(a, !!c.multiple, b, !1);}
};
function Ri(a) {
  var b = 2 + 25 * (((vg() - 2 + 500) / 25 | 0) + 1);b <= Th && (b = Th + 1);this._expirationTime = Th = b;this._root = a;this._callbacks = this._next = null;this._hasChildren = this._didComplete = !1;this._children = null;this._defer = !0;
}Ri.prototype.render = function (a) {
  this._defer ? void 0 : r("250");this._hasChildren = !0;this._children = a;var b = this._root._internalRoot,
      c = this._expirationTime,
      d = new Si();Li(a, b, null, c, d._onCommit);return d;
};
Ri.prototype.then = function (a) {
  if (this._didComplete) a();else {
    var b = this._callbacks;null === b && (b = this._callbacks = []);b.push(a);
  }
};
Ri.prototype.commit = function () {
  var a = this._root._internalRoot,
      b = a.firstBatch;this._defer && null !== b ? void 0 : r("251");if (this._hasChildren) {
    var c = this._expirationTime;if (b !== this) {
      this._hasChildren && (c = this._expirationTime = b._expirationTime, this.render(this._children));for (var d = null, e = b; e !== this;) {
        d = e, e = e._next;
      }null === d ? r("251") : void 0;d._next = e._next;this._next = b;a.firstBatch = this;
    }this._defer = !1;Di(a, c);b = this._next;this._next = null;b = a.firstBatch = b;null !== b && b._hasChildren && b.render(b._children);
  } else this._next = null, this._defer = !1;
};Ri.prototype._onComplete = function () {
  if (!this._didComplete) {
    this._didComplete = !0;var a = this._callbacks;if (null !== a) for (var b = 0; b < a.length; b++) {
      (0, a[b])();
    }
  }
};function Si() {
  this._callbacks = null;this._didCommit = !1;this._onCommit = this._onCommit.bind(this);
}Si.prototype.then = function (a) {
  if (this._didCommit) a();else {
    var b = this._callbacks;null === b && (b = this._callbacks = []);b.push(a);
  }
};
Si.prototype._onCommit = function () {
  if (!this._didCommit) {
    this._didCommit = !0;var a = this._callbacks;if (null !== a) for (var b = 0; b < a.length; b++) {
      var c = a[b];"function" !== typeof c ? r("191", c) : void 0;c();
    }
  }
};
function Ti(a, b, c) {
  b = N(3, null, null, b ? 3 : 0);a = { current: b, containerInfo: a, pendingChildren: null, earliestPendingTime: 0, latestPendingTime: 0, earliestSuspendedTime: 0, latestSuspendedTime: 0, latestPingedTime: 0, didError: !1, pendingCommitExpirationTime: 0, finishedWork: null, timeoutHandle: -1, context: null, pendingContext: null, hydrate: c, nextExpirationTimeToWorkOn: 0, expirationTime: 0, firstBatch: null, nextScheduledRoot: null };this._internalRoot = b.stateNode = a;
}
Ti.prototype.render = function (a, b) {
  var c = this._internalRoot,
      d = new Si();b = void 0 === b ? null : b;null !== b && d.then(b);Mi(a, c, null, d._onCommit);return d;
};Ti.prototype.unmount = function (a) {
  var b = this._internalRoot,
      c = new Si();a = void 0 === a ? null : a;null !== a && c.then(a);Mi(null, b, null, c._onCommit);return c;
};Ti.prototype.legacy_renderSubtreeIntoContainer = function (a, b, c) {
  var d = this._internalRoot,
      e = new Si();c = void 0 === c ? null : c;null !== c && e.then(c);Mi(b, d, a, e._onCommit);return e;
};
Ti.prototype.createBatch = function () {
  var a = new Ri(this),
      b = a._expirationTime,
      c = this._internalRoot,
      d = c.firstBatch;if (null === d) c.firstBatch = a, a._next = null;else {
    for (c = null; null !== d && d._expirationTime <= b;) {
      c = d, d = d._next;
    }a._next = d;null !== c && (c._next = a);
  }return a;
};function Ui(a) {
  return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));
}Yb = Ii;Zb = Ki;$b = function $b() {
  W || 0 === gi || (Gi(gi, null), gi = 0);
};
function Vi(a, b) {
  b || (b = a ? 9 === a.nodeType ? a.documentElement : a.firstChild : null, b = !(!b || 1 !== b.nodeType || !b.hasAttribute("data-reactroot")));if (!b) for (var c; c = a.lastChild;) {
    a.removeChild(c);
  }return new Ti(a, !1, b);
}
function Wi(a, b, c, d, e) {
  Ui(c) ? void 0 : r("200");var f = c._reactRootContainer;if (f) {
    if ("function" === typeof e) {
      var g = e;e = function e() {
        var a = Pi(f._internalRoot);g.call(a);
      };
    }null != a ? f.legacy_renderSubtreeIntoContainer(a, b, e) : f.render(b, e);
  } else {
    f = c._reactRootContainer = Vi(c, d);if ("function" === typeof e) {
      var h = e;e = function e() {
        var a = Pi(f._internalRoot);h.call(a);
      };
    }Ji(function () {
      null != a ? f.legacy_renderSubtreeIntoContainer(a, b, e) : f.render(b, e);
    });
  }return Pi(f._internalRoot);
}
function Xi(a, b) {
  var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;Ui(b) ? void 0 : r("200");return Qi(a, b, null, c);
}
var Yi = { createPortal: Xi, findDOMNode: function findDOMNode(a) {
    if (null == a) return null;if (1 === a.nodeType) return a;var b = a._reactInternalFiber;void 0 === b && ("function" === typeof a.render ? r("188") : r("268", Object.keys(a)));a = Jd(b);a = null === a ? null : a.stateNode;return a;
  }, hydrate: function hydrate(a, b, c) {
    return Wi(null, a, b, !0, c);
  }, render: function render(a, b, c) {
    return Wi(null, a, b, !1, c);
  }, unstable_renderSubtreeIntoContainer: function unstable_renderSubtreeIntoContainer(a, b, c, d) {
    null == a || void 0 === a._reactInternalFiber ? r("38") : void 0;return Wi(a, b, c, !1, d);
  }, unmountComponentAtNode: function unmountComponentAtNode(a) {
    Ui(a) ? void 0 : r("40");return a._reactRootContainer ? (Ji(function () {
      Wi(null, null, a, !1, function () {
        a._reactRootContainer = null;
      });
    }), !0) : !1;
  }, unstable_createPortal: function unstable_createPortal() {
    return Xi.apply(void 0, arguments);
  }, unstable_batchedUpdates: Ii, unstable_interactiveUpdates: Ki, flushSync: function flushSync(a, b) {
    W ? r("187") : void 0;var c = Z;Z = !0;try {
      return li(a, b);
    } finally {
      Z = c, Gi(1, null);
    }
  }, unstable_flushControlled: function unstable_flushControlled(a) {
    var b = Z;Z = !0;try {
      li(a);
    } finally {
      (Z = b) || W || Gi(1, null);
    }
  }, __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: { Events: [Oa, Pa, Qa, Ga.injectEventPluginsByName, sa, Wa, function (a) {
      Ba(a, Va);
    }, Wb, Xb, ee, Ia] }, unstable_createRoot: function unstable_createRoot(a, b) {
    Ui(a) ? void 0 : r("278");return new Ti(a, !0, null != b && !0 === b.hydrate);
  } };(function (a) {
  var b = a.findFiberByHostInstance;return Cf(n({}, a, { findHostInstanceByFiber: function findHostInstanceByFiber(a) {
      a = Jd(a);return null === a ? null : a.stateNode;
    }, findFiberByHostInstance: function findFiberByHostInstance(a) {
      return b ? b(a) : null;
    } }));
})({ findFiberByHostInstance: Na, bundleType: 0, version: "16.6.0", rendererPackageName: "react-dom" });
var mj = { default: Yi },
    nj = mj && Yi || mj;module.exports = nj.default || nj;

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.6.0
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", { value: !0 });var c = null,
    f = 3,
    h = -1,
    k = -1,
    l = !1,
    m = !1,
    n = "object" === (typeof performance === "undefined" ? "undefined" : _typeof(performance)) && "function" === typeof performance.now,
    q = { timeRemaining: n ? function () {
    if (null !== c && c.expirationTime < k) return 0;var a = p() - performance.now();return 0 < a ? a : 0;
  } : function () {
    if (null !== c && c.expirationTime < k) return 0;var a = p() - Date.now();return 0 < a ? a : 0;
  }, didTimeout: !1 };function r() {
  if (!l) {
    var a = c.expirationTime;m ? t() : m = !0;_u(v, a);
  }
}
function w() {
  var a = c,
      b = c.next;if (c === b) c = null;else {
    var d = c.previous;c = d.next = b;b.previous = d;
  }a.next = a.previous = null;d = a.callback;b = a.expirationTime;a = a.priorityLevel;var e = f,
      R = k;f = a;k = b;try {
    var g = d(q);
  } finally {
    f = e, k = R;
  }if ("function" === typeof g) if (g = { callback: g, priorityLevel: a, expirationTime: b, next: null, previous: null }, null === c) c = g.next = g.previous = g;else {
    d = null;a = c;do {
      if (a.expirationTime >= b) {
        d = a;break;
      }a = a.next;
    } while (a !== c);null === d ? d = c : d === c && (c = g, r());b = d.previous;b.next = d.previous = g;g.next = d;g.previous = b;
  }
}function x() {
  if (-1 === h && null !== c && 1 === c.priorityLevel) {
    l = !0;q.didTimeout = !0;try {
      do {
        w();
      } while (null !== c && 1 === c.priorityLevel);
    } finally {
      l = !1, null !== c ? r() : m = !1;
    }
  }
}function v(a) {
  l = !0;q.didTimeout = a;try {
    if (a) for (; null !== c;) {
      var b = exports.unstable_now();if (c.expirationTime <= b) {
        do {
          w();
        } while (null !== c && c.expirationTime <= b);
      } else break;
    } else if (null !== c) {
      do {
        w();
      } while (null !== c && 0 < p() - exports.unstable_now());
    }
  } finally {
    l = !1, null !== c ? r() : m = !1, x();
  }
}
var y = Date,
    z = "function" === typeof setTimeout ? setTimeout : void 0,
    A = "function" === typeof clearTimeout ? clearTimeout : void 0,
    B = "function" === typeof requestAnimationFrame ? requestAnimationFrame : void 0,
    C = "function" === typeof cancelAnimationFrame ? cancelAnimationFrame : void 0,
    D,
    E;function F(a) {
  D = B(function (b) {
    A(E);a(b);
  });E = z(function () {
    C(D);a(exports.unstable_now());
  }, 100);
}if (n) {
  var G = performance;exports.unstable_now = function () {
    return G.now();
  };
} else exports.unstable_now = function () {
  return y.now();
};var _u, t, p;
if ("undefined" !== typeof window && window._schedMock) {
  var H = window._schedMock;_u = H[0];t = H[1];p = H[2];
} else if ("undefined" === typeof window || "function" !== typeof window.addEventListener) {
  var I = null,
      J = -1,
      K = function K(a, b) {
    if (null !== I) {
      var d = I;I = null;try {
        J = b, d(a);
      } finally {
        J = -1;
      }
    }
  };_u = function u(a, b) {
    -1 !== J ? setTimeout(_u, 0, a, b) : (I = a, setTimeout(K, b, !0, b), setTimeout(K, 1073741823, !1, 1073741823));
  };t = function t() {
    I = null;
  };p = function p() {
    return Infinity;
  };exports.unstable_now = function () {
    return -1 === J ? 0 : J;
  };
} else {
  "undefined" !== typeof console && ("function" !== typeof B && console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"), "function" !== typeof C && console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));var L = null,
      M = !1,
      N = -1,
      O = !1,
      P = !1,
      Q = 0,
      S = 33,
      T = 33;p = function p() {
    return Q;
  };var U = "__reactIdleCallback$" + Math.random().toString(36).slice(2);window.addEventListener("message", function (a) {
    if (a.source === window && a.data === U) {
      M = !1;a = L;var b = N;L = null;N = -1;var d = exports.unstable_now(),
          e = !1;if (0 >= Q - d) if (-1 !== b && b <= d) e = !0;else {
        O || (O = !0, F(V));L = a;N = b;return;
      }if (null !== a) {
        P = !0;try {
          a(e);
        } finally {
          P = !1;
        }
      }
    }
  }, !1);var V = function V(a) {
    if (null !== L) {
      F(V);var b = a - Q + T;b < T && S < T ? (8 > b && (b = 8), T = b < S ? S : b) : S = b;Q = a + T;M || (M = !0, window.postMessage(U, "*"));
    } else O = !1;
  };_u = function _u(a, b) {
    L = a;N = b;P || 0 > b ? window.postMessage(U, "*") : O || (O = !0, F(V));
  };t = function t() {
    L = null;M = !1;N = -1;
  };
}exports.unstable_ImmediatePriority = 1;
exports.unstable_UserBlockingPriority = 2;exports.unstable_NormalPriority = 3;exports.unstable_IdlePriority = 4;exports.unstable_runWithPriority = function (a, b) {
  switch (a) {case 1:case 2:case 3:case 4:
      break;default:
      a = 3;}var d = f,
      e = h;f = a;h = exports.unstable_now();try {
    return b();
  } finally {
    f = d, h = e, x();
  }
};
exports.unstable_scheduleCallback = function (a, b) {
  var d = -1 !== h ? h : exports.unstable_now();if ("object" === (typeof b === "undefined" ? "undefined" : _typeof(b)) && null !== b && "number" === typeof b.timeout) b = d + b.timeout;else switch (f) {case 1:
      b = d + -1;break;case 2:
      b = d + 250;break;case 4:
      b = d + 1073741823;break;default:
      b = d + 5E3;}a = { callback: a, priorityLevel: f, expirationTime: b, next: null, previous: null };if (null === c) c = a.next = a.previous = a, r();else {
    d = null;var e = c;do {
      if (e.expirationTime > b) {
        d = e;break;
      }e = e.next;
    } while (e !== c);null === d ? d = c : d === c && (c = a, r());b = d.previous;b.next = d.previous = a;a.next = d;a.previous = b;
  }return a;
};exports.unstable_cancelCallback = function (a) {
  var b = a.next;if (null !== b) {
    if (b === a) c = null;else {
      a === c && (c = b);var d = a.previous;d.next = b;b.previous = d;
    }a.next = a.previous = null;
  }
};exports.unstable_wrapCallback = function (a) {
  var b = f;return function () {
    var d = f,
        e = h;f = b;h = exports.unstable_now();try {
      return a.apply(this, arguments);
    } finally {
      f = d, h = e, x();
    }
  };
};exports.unstable_getCurrentPriorityLevel = function () {
  return f;
};

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/** @license React v16.6.0
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

if (process.env.NODE_ENV !== "production") {
  (function () {
    'use strict';

    Object.defineProperty(exports, '__esModule', { value: true });

    /* eslint-disable no-var */

    // TODO: Use symbols?
    var ImmediatePriority = 1;
    var UserBlockingPriority = 2;
    var NormalPriority = 3;
    var IdlePriority = 4;

    // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var maxSigned31BitInt = 1073741823;

    // Times out immediately
    var IMMEDIATE_PRIORITY_TIMEOUT = -1;
    // Eventually times out
    var USER_BLOCKING_PRIORITY = 250;
    var NORMAL_PRIORITY_TIMEOUT = 5000;
    // Never times out
    var IDLE_PRIORITY = maxSigned31BitInt;

    // Callbacks are stored as a circular, doubly linked list.
    var firstCallbackNode = null;

    var currentPriorityLevel = NormalPriority;
    var currentEventStartTime = -1;
    var currentExpirationTime = -1;

    // This is set when a callback is being executed, to prevent re-entrancy.
    var isExecutingCallback = false;

    var isHostCallbackScheduled = false;

    var hasNativePerformanceNow = (typeof performance === 'undefined' ? 'undefined' : _typeof(performance)) === 'object' && typeof performance.now === 'function';

    var timeRemaining;
    if (hasNativePerformanceNow) {
      timeRemaining = function timeRemaining() {
        if (firstCallbackNode !== null && firstCallbackNode.expirationTime < currentExpirationTime) {
          // A higher priority callback was scheduled. Yield so we can switch to
          // working on that.
          return 0;
        }
        // We assume that if we have a performance timer that the rAF callback
        // gets a performance timer value. Not sure if this is always true.
        var remaining = getFrameDeadline() - performance.now();
        return remaining > 0 ? remaining : 0;
      };
    } else {
      timeRemaining = function timeRemaining() {
        // Fallback to Date.now()
        if (firstCallbackNode !== null && firstCallbackNode.expirationTime < currentExpirationTime) {
          return 0;
        }
        var remaining = getFrameDeadline() - Date.now();
        return remaining > 0 ? remaining : 0;
      };
    }

    var deadlineObject = {
      timeRemaining: timeRemaining,
      didTimeout: false
    };

    function ensureHostCallbackIsScheduled() {
      if (isExecutingCallback) {
        // Don't schedule work yet; wait until the next time we yield.
        return;
      }
      // Schedule the host callback using the earliest expiration in the list.
      var expirationTime = firstCallbackNode.expirationTime;
      if (!isHostCallbackScheduled) {
        isHostCallbackScheduled = true;
      } else {
        // Cancel the existing host callback.
        cancelHostCallback();
      }
      _requestHostCallback(flushWork, expirationTime);
    }

    function flushFirstCallback() {
      var flushedNode = firstCallbackNode;

      // Remove the node from the list before calling the callback. That way the
      // list is in a consistent state even if the callback throws.
      var next = firstCallbackNode.next;
      if (firstCallbackNode === next) {
        // This is the last callback in the list.
        firstCallbackNode = null;
        next = null;
      } else {
        var lastCallbackNode = firstCallbackNode.previous;
        firstCallbackNode = lastCallbackNode.next = next;
        next.previous = lastCallbackNode;
      }

      flushedNode.next = flushedNode.previous = null;

      // Now it's safe to call the callback.
      var callback = flushedNode.callback;
      var expirationTime = flushedNode.expirationTime;
      var priorityLevel = flushedNode.priorityLevel;
      var previousPriorityLevel = currentPriorityLevel;
      var previousExpirationTime = currentExpirationTime;
      currentPriorityLevel = priorityLevel;
      currentExpirationTime = expirationTime;
      var continuationCallback;
      try {
        continuationCallback = callback(deadlineObject);
      } finally {
        currentPriorityLevel = previousPriorityLevel;
        currentExpirationTime = previousExpirationTime;
      }

      // A callback may return a continuation. The continuation should be scheduled
      // with the same priority and expiration as the just-finished callback.
      if (typeof continuationCallback === 'function') {
        var continuationNode = {
          callback: continuationCallback,
          priorityLevel: priorityLevel,
          expirationTime: expirationTime,
          next: null,
          previous: null
        };

        // Insert the new callback into the list, sorted by its expiration. This is
        // almost the same as the code in `scheduleCallback`, except the callback
        // is inserted into the list *before* callbacks of equal expiration instead
        // of after.
        if (firstCallbackNode === null) {
          // This is the first callback in the list.
          firstCallbackNode = continuationNode.next = continuationNode.previous = continuationNode;
        } else {
          var nextAfterContinuation = null;
          var node = firstCallbackNode;
          do {
            if (node.expirationTime >= expirationTime) {
              // This callback expires at or after the continuation. We will insert
              // the continuation *before* this callback.
              nextAfterContinuation = node;
              break;
            }
            node = node.next;
          } while (node !== firstCallbackNode);

          if (nextAfterContinuation === null) {
            // No equal or lower priority callback was found, which means the new
            // callback is the lowest priority callback in the list.
            nextAfterContinuation = firstCallbackNode;
          } else if (nextAfterContinuation === firstCallbackNode) {
            // The new callback is the highest priority callback in the list.
            firstCallbackNode = continuationNode;
            ensureHostCallbackIsScheduled();
          }

          var previous = nextAfterContinuation.previous;
          previous.next = nextAfterContinuation.previous = continuationNode;
          continuationNode.next = nextAfterContinuation;
          continuationNode.previous = previous;
        }
      }
    }

    function flushImmediateWork() {
      if (
      // Confirm we've exited the outer most event handler
      currentEventStartTime === -1 && firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority) {
        isExecutingCallback = true;
        deadlineObject.didTimeout = true;
        try {
          do {
            flushFirstCallback();
          } while (
          // Keep flushing until there are no more immediate callbacks
          firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority);
        } finally {
          isExecutingCallback = false;
          if (firstCallbackNode !== null) {
            // There's still work remaining. Request another callback.
            ensureHostCallbackIsScheduled();
          } else {
            isHostCallbackScheduled = false;
          }
        }
      }
    }

    function flushWork(didTimeout) {
      isExecutingCallback = true;
      deadlineObject.didTimeout = didTimeout;
      try {
        if (didTimeout) {
          // Flush all the expired callbacks without yielding.
          while (firstCallbackNode !== null) {
            // Read the current time. Flush all the callbacks that expire at or
            // earlier than that time. Then read the current time again and repeat.
            // This optimizes for as few performance.now calls as possible.
            var currentTime = exports.unstable_now();
            if (firstCallbackNode.expirationTime <= currentTime) {
              do {
                flushFirstCallback();
              } while (firstCallbackNode !== null && firstCallbackNode.expirationTime <= currentTime);
              continue;
            }
            break;
          }
        } else {
          // Keep flushing callbacks until we run out of time in the frame.
          if (firstCallbackNode !== null) {
            do {
              flushFirstCallback();
            } while (firstCallbackNode !== null && getFrameDeadline() - exports.unstable_now() > 0);
          }
        }
      } finally {
        isExecutingCallback = false;
        if (firstCallbackNode !== null) {
          // There's still work remaining. Request another callback.
          ensureHostCallbackIsScheduled();
        } else {
          isHostCallbackScheduled = false;
        }
        // Before exiting, flush all the immediate work that was scheduled.
        flushImmediateWork();
      }
    }

    function unstable_runWithPriority(priorityLevel, eventHandler) {
      switch (priorityLevel) {
        case ImmediatePriority:
        case UserBlockingPriority:
        case NormalPriority:
        case IdlePriority:
          break;
        default:
          priorityLevel = NormalPriority;
      }

      var previousPriorityLevel = currentPriorityLevel;
      var previousEventStartTime = currentEventStartTime;
      currentPriorityLevel = priorityLevel;
      currentEventStartTime = exports.unstable_now();

      try {
        return eventHandler();
      } finally {
        currentPriorityLevel = previousPriorityLevel;
        currentEventStartTime = previousEventStartTime;

        // Before exiting, flush all the immediate work that was scheduled.
        flushImmediateWork();
      }
    }

    function unstable_wrapCallback(callback) {
      var parentPriorityLevel = currentPriorityLevel;
      return function () {
        // This is a fork of runWithPriority, inlined for performance.
        var previousPriorityLevel = currentPriorityLevel;
        var previousEventStartTime = currentEventStartTime;
        currentPriorityLevel = parentPriorityLevel;
        currentEventStartTime = exports.unstable_now();

        try {
          return callback.apply(this, arguments);
        } finally {
          currentPriorityLevel = previousPriorityLevel;
          currentEventStartTime = previousEventStartTime;
          flushImmediateWork();
        }
      };
    }

    function unstable_scheduleCallback(callback, deprecated_options) {
      var startTime = currentEventStartTime !== -1 ? currentEventStartTime : exports.unstable_now();

      var expirationTime;
      if ((typeof deprecated_options === 'undefined' ? 'undefined' : _typeof(deprecated_options)) === 'object' && deprecated_options !== null && typeof deprecated_options.timeout === 'number') {
        // FIXME: Remove this branch once we lift expiration times out of React.
        expirationTime = startTime + deprecated_options.timeout;
      } else {
        switch (currentPriorityLevel) {
          case ImmediatePriority:
            expirationTime = startTime + IMMEDIATE_PRIORITY_TIMEOUT;
            break;
          case UserBlockingPriority:
            expirationTime = startTime + USER_BLOCKING_PRIORITY;
            break;
          case IdlePriority:
            expirationTime = startTime + IDLE_PRIORITY;
            break;
          case NormalPriority:
          default:
            expirationTime = startTime + NORMAL_PRIORITY_TIMEOUT;
        }
      }

      var newNode = {
        callback: callback,
        priorityLevel: currentPriorityLevel,
        expirationTime: expirationTime,
        next: null,
        previous: null
      };

      // Insert the new callback into the list, ordered first by expiration, then
      // by insertion. So the new callback is inserted any other callback with
      // equal expiration.
      if (firstCallbackNode === null) {
        // This is the first callback in the list.
        firstCallbackNode = newNode.next = newNode.previous = newNode;
        ensureHostCallbackIsScheduled();
      } else {
        var next = null;
        var node = firstCallbackNode;
        do {
          if (node.expirationTime > expirationTime) {
            // The new callback expires before this one.
            next = node;
            break;
          }
          node = node.next;
        } while (node !== firstCallbackNode);

        if (next === null) {
          // No callback with a later expiration was found, which means the new
          // callback has the latest expiration in the list.
          next = firstCallbackNode;
        } else if (next === firstCallbackNode) {
          // The new callback has the earliest expiration in the entire list.
          firstCallbackNode = newNode;
          ensureHostCallbackIsScheduled();
        }

        var previous = next.previous;
        previous.next = next.previous = newNode;
        newNode.next = next;
        newNode.previous = previous;
      }

      return newNode;
    }

    function unstable_cancelCallback(callbackNode) {
      var next = callbackNode.next;
      if (next === null) {
        // Already cancelled.
        return;
      }

      if (next === callbackNode) {
        // This is the only scheduled callback. Clear the list.
        firstCallbackNode = null;
      } else {
        // Remove the callback from its position in the list.
        if (callbackNode === firstCallbackNode) {
          firstCallbackNode = next;
        }
        var previous = callbackNode.previous;
        previous.next = next;
        next.previous = previous;
      }

      callbackNode.next = callbackNode.previous = null;
    }

    function unstable_getCurrentPriorityLevel() {
      return currentPriorityLevel;
    }

    // The remaining code is essentially a polyfill for requestIdleCallback. It
    // works by scheduling a requestAnimationFrame, storing the time for the start
    // of the frame, then scheduling a postMessage which gets scheduled after paint.
    // Within the postMessage handler do as much work as possible until time + frame
    // rate. By separating the idle call into a separate event tick we ensure that
    // layout, paint and other browser work is counted against the available time.
    // The frame rate is dynamically adjusted.

    // We capture a local reference to any global, in case it gets polyfilled after
    // this module is initially evaluated. We want to be using a
    // consistent implementation.
    var localDate = Date;

    // This initialization code may run even on server environments if a component
    // just imports ReactDOM (e.g. for findDOMNode). Some environments might not
    // have setTimeout or clearTimeout. However, we always expect them to be defined
    // on the client. https://github.com/facebook/react/pull/13088
    var localSetTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
    var localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;

    // We don't expect either of these to necessarily be defined, but we will error
    // later if they are missing on the client.
    var localRequestAnimationFrame = typeof requestAnimationFrame === 'function' ? requestAnimationFrame : undefined;
    var localCancelAnimationFrame = typeof cancelAnimationFrame === 'function' ? cancelAnimationFrame : undefined;

    // requestAnimationFrame does not run when the tab is in the background. If
    // we're backgrounded we prefer for that work to happen so that the page
    // continues to load in the background. So we also schedule a 'setTimeout' as
    // a fallback.
    // TODO: Need a better heuristic for backgrounded work.
    var ANIMATION_FRAME_TIMEOUT = 100;
    var rAFID;
    var rAFTimeoutID;
    var requestAnimationFrameWithTimeout = function requestAnimationFrameWithTimeout(callback) {
      // schedule rAF and also a setTimeout
      rAFID = localRequestAnimationFrame(function (timestamp) {
        // cancel the setTimeout
        localClearTimeout(rAFTimeoutID);
        callback(timestamp);
      });
      rAFTimeoutID = localSetTimeout(function () {
        // cancel the requestAnimationFrame
        localCancelAnimationFrame(rAFID);
        callback(exports.unstable_now());
      }, ANIMATION_FRAME_TIMEOUT);
    };

    if (hasNativePerformanceNow) {
      var Performance = performance;
      exports.unstable_now = function () {
        return Performance.now();
      };
    } else {
      exports.unstable_now = function () {
        return localDate.now();
      };
    }

    var _requestHostCallback;
    var cancelHostCallback;
    var getFrameDeadline;

    if (typeof window !== 'undefined' && window._schedMock) {
      // Dynamic injection, only for testing purposes.
      var impl = window._schedMock;
      _requestHostCallback = impl[0];
      cancelHostCallback = impl[1];
      getFrameDeadline = impl[2];
    } else if (
    // If Scheduler runs in a non-DOM environment, it falls back to a naive
    // implementation using setTimeout.
    typeof window === 'undefined' ||
    // "addEventListener" might not be available on the window object
    // if this is a mocked "window" object. So we need to validate that too.
    typeof window.addEventListener !== 'function') {
      var _callback = null;
      var _currentTime = -1;
      var _flushCallback = function _flushCallback(didTimeout, ms) {
        if (_callback !== null) {
          var cb = _callback;
          _callback = null;
          try {
            _currentTime = ms;
            cb(didTimeout);
          } finally {
            _currentTime = -1;
          }
        }
      };
      _requestHostCallback = function requestHostCallback(cb, ms) {
        if (_currentTime !== -1) {
          // Protect against re-entrancy.
          setTimeout(_requestHostCallback, 0, cb, ms);
        } else {
          _callback = cb;
          setTimeout(_flushCallback, ms, true, ms);
          setTimeout(_flushCallback, maxSigned31BitInt, false, maxSigned31BitInt);
        }
      };
      cancelHostCallback = function cancelHostCallback() {
        _callback = null;
      };
      getFrameDeadline = function getFrameDeadline() {
        return Infinity;
      };
      exports.unstable_now = function () {
        return _currentTime === -1 ? 0 : _currentTime;
      };
    } else {
      if (typeof console !== 'undefined') {
        // TODO: Remove fb.me link
        if (typeof localRequestAnimationFrame !== 'function') {
          console.error("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
        }
        if (typeof localCancelAnimationFrame !== 'function') {
          console.error("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
        }
      }

      var scheduledHostCallback = null;
      var isMessageEventScheduled = false;
      var timeoutTime = -1;

      var isAnimationFrameScheduled = false;

      var isFlushingHostCallback = false;

      var frameDeadline = 0;
      // We start out assuming that we run at 30fps but then the heuristic tracking
      // will adjust this value to a faster fps if we get more frequent animation
      // frames.
      var previousFrameTime = 33;
      var activeFrameTime = 33;

      getFrameDeadline = function getFrameDeadline() {
        return frameDeadline;
      };

      // We use the postMessage trick to defer idle work until after the repaint.
      var messageKey = '__reactIdleCallback$' + Math.random().toString(36).slice(2);
      var idleTick = function idleTick(event) {
        if (event.source !== window || event.data !== messageKey) {
          return;
        }

        isMessageEventScheduled = false;

        var prevScheduledCallback = scheduledHostCallback;
        var prevTimeoutTime = timeoutTime;
        scheduledHostCallback = null;
        timeoutTime = -1;

        var currentTime = exports.unstable_now();

        var didTimeout = false;
        if (frameDeadline - currentTime <= 0) {
          // There's no time left in this idle period. Check if the callback has
          // a timeout and whether it's been exceeded.
          if (prevTimeoutTime !== -1 && prevTimeoutTime <= currentTime) {
            // Exceeded the timeout. Invoke the callback even though there's no
            // time left.
            didTimeout = true;
          } else {
            // No timeout.
            if (!isAnimationFrameScheduled) {
              // Schedule another animation callback so we retry later.
              isAnimationFrameScheduled = true;
              requestAnimationFrameWithTimeout(animationTick);
            }
            // Exit without invoking the callback.
            scheduledHostCallback = prevScheduledCallback;
            timeoutTime = prevTimeoutTime;
            return;
          }
        }

        if (prevScheduledCallback !== null) {
          isFlushingHostCallback = true;
          try {
            prevScheduledCallback(didTimeout);
          } finally {
            isFlushingHostCallback = false;
          }
        }
      };
      // Assumes that we have addEventListener in this environment. Might need
      // something better for old IE.
      window.addEventListener('message', idleTick, false);

      var animationTick = function animationTick(rafTime) {
        if (scheduledHostCallback !== null) {
          // Eagerly schedule the next animation callback at the beginning of the
          // frame. If the scheduler queue is not empty at the end of the frame, it
          // will continue flushing inside that callback. If the queue *is* empty,
          // then it will exit immediately. Posting the callback at the start of the
          // frame ensures it's fired within the earliest possible frame. If we
          // waited until the end of the frame to post the callback, we risk the
          // browser skipping a frame and not firing the callback until the frame
          // after that.
          requestAnimationFrameWithTimeout(animationTick);
        } else {
          // No pending work. Exit.
          isAnimationFrameScheduled = false;
          return;
        }

        var nextFrameTime = rafTime - frameDeadline + activeFrameTime;
        if (nextFrameTime < activeFrameTime && previousFrameTime < activeFrameTime) {
          if (nextFrameTime < 8) {
            // Defensive coding. We don't support higher frame rates than 120hz.
            // If the calculated frame time gets lower than 8, it is probably a bug.
            nextFrameTime = 8;
          }
          // If one frame goes long, then the next one can be short to catch up.
          // If two frames are short in a row, then that's an indication that we
          // actually have a higher frame rate than what we're currently optimizing.
          // We adjust our heuristic dynamically accordingly. For example, if we're
          // running on 120hz display or 90hz VR display.
          // Take the max of the two in case one of them was an anomaly due to
          // missed frame deadlines.
          activeFrameTime = nextFrameTime < previousFrameTime ? previousFrameTime : nextFrameTime;
        } else {
          previousFrameTime = nextFrameTime;
        }
        frameDeadline = rafTime + activeFrameTime;
        if (!isMessageEventScheduled) {
          isMessageEventScheduled = true;
          window.postMessage(messageKey, '*');
        }
      };

      _requestHostCallback = function _requestHostCallback(callback, absoluteTimeout) {
        scheduledHostCallback = callback;
        timeoutTime = absoluteTimeout;
        if (isFlushingHostCallback || absoluteTimeout < 0) {
          // Don't wait for the next frame. Continue working ASAP, in a new event.
          window.postMessage(messageKey, '*');
        } else if (!isAnimationFrameScheduled) {
          // If rAF didn't already schedule one, we need to schedule a frame.
          // TODO: If this rAF doesn't materialize because the browser throttles, we
          // might want to still have setTimeout trigger rIC as a backup to ensure
          // that we keep performing work.
          isAnimationFrameScheduled = true;
          requestAnimationFrameWithTimeout(animationTick);
        }
      };

      cancelHostCallback = function cancelHostCallback() {
        scheduledHostCallback = null;
        isMessageEventScheduled = false;
        timeoutTime = -1;
      };
    }

    exports.unstable_ImmediatePriority = ImmediatePriority;
    exports.unstable_UserBlockingPriority = UserBlockingPriority;
    exports.unstable_NormalPriority = NormalPriority;
    exports.unstable_IdlePriority = IdlePriority;
    exports.unstable_runWithPriority = unstable_runWithPriority;
    exports.unstable_scheduleCallback = unstable_scheduleCallback;
    exports.unstable_cancelCallback = unstable_cancelCallback;
    exports.unstable_wrapCallback = unstable_wrapCallback;
    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
  })();
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/** @license React v16.6.0
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};if(process.env.NODE_ENV!=="production"){(function(){'use strict';var React=__webpack_require__(5);var _assign=__webpack_require__(24);var checkPropTypes=__webpack_require__(39);var scheduler=__webpack_require__(40);var tracing=__webpack_require__(81);/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */var validateFormat=function validateFormat(){};{validateFormat=function validateFormat(format){if(format===undefined){throw new Error('invariant requires an error message argument');}};}function invariant(condition,format,a,b,c,d,e,f){validateFormat(format);if(!condition){var error=void 0;if(format===undefined){error=new Error('Minified exception occurred; use the non-minified dev environment '+'for the full error message and additional helpful warnings.');}else{var args=[a,b,c,d,e,f];var argIndex=0;error=new Error(format.replace(/%s/g,function(){return args[argIndex++];}));error.name='Invariant Violation';}error.framesToPop=1;// we don't care about invariant's own frame
throw error;}}// Relying on the `invariant()` implementation lets us
// preserve the format and params in the www builds.
!React?invariant(false,'ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.'):void 0;var invokeGuardedCallbackImpl=function invokeGuardedCallbackImpl(name,func,context,a,b,c,d,e,f){var funcArgs=Array.prototype.slice.call(arguments,3);try{func.apply(context,funcArgs);}catch(error){this.onError(error);}};{// In DEV mode, we swap out invokeGuardedCallback for a special version
// that plays more nicely with the browser's DevTools. The idea is to preserve
// "Pause on exceptions" behavior. Because React wraps all user-provided
// functions in invokeGuardedCallback, and the production version of
// invokeGuardedCallback uses a try-catch, all user exceptions are treated
// like caught exceptions, and the DevTools won't pause unless the developer
// takes the extra step of enabling pause on caught exceptions. This is
// untintuitive, though, because even though React has caught the error, from
// the developer's perspective, the error is uncaught.
//
// To preserve the expected "Pause on exceptions" behavior, we don't use a
// try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
// DOM node, and call the user-provided callback from inside an event handler
// for that fake event. If the callback throws, the error is "captured" using
// a global event handler. But because the error happens in a different
// event loop context, it does not interrupt the normal program flow.
// Effectively, this gives us try-catch behavior without actually using
// try-catch. Neat!
// Check that the browser supports the APIs we need to implement our special
// DEV version of invokeGuardedCallback
if(typeof window!=='undefined'&&typeof window.dispatchEvent==='function'&&typeof document!=='undefined'&&typeof document.createEvent==='function'){var fakeNode=document.createElement('react');var invokeGuardedCallbackDev=function invokeGuardedCallbackDev(name,func,context,a,b,c,d,e,f){// If document doesn't exist we know for sure we will crash in this method
// when we call document.createEvent(). However this can cause confusing
// errors: https://github.com/facebookincubator/create-react-app/issues/3482
// So we preemptively throw with a better message instead.
!(typeof document!=='undefined')?invariant(false,'The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.'):void 0;var evt=document.createEvent('Event');// Keeps track of whether the user-provided callback threw an error. We
// set this to true at the beginning, then set it to false right after
// calling the function. If the function errors, `didError` will never be
// set to false. This strategy works even if the browser is flaky and
// fails to call our global error handler, because it doesn't rely on
// the error event at all.
var didError=true;// Keeps track of the value of window.event so that we can reset it
// during the callback to let user code access window.event in the
// browsers that support it.
var windowEvent=window.event;// Keeps track of the descriptor of window.event to restore it after event
// dispatching: https://github.com/facebook/react/issues/13688
var windowEventDescriptor=Object.getOwnPropertyDescriptor(window,'event');// Create an event handler for our fake event. We will synchronously
// dispatch our fake event using `dispatchEvent`. Inside the handler, we
// call the user-provided callback.
var funcArgs=Array.prototype.slice.call(arguments,3);function callCallback(){// We immediately remove the callback from event listeners so that
// nested `invokeGuardedCallback` calls do not clash. Otherwise, a
// nested call would trigger the fake event handlers of any call higher
// in the stack.
fakeNode.removeEventListener(evtType,callCallback,false);// We check for window.hasOwnProperty('event') to prevent the
// window.event assignment in both IE <= 10 as they throw an error
// "Member not found" in strict mode, and in Firefox which does not
// support window.event.
if(typeof window.event!=='undefined'&&window.hasOwnProperty('event')){window.event=windowEvent;}func.apply(context,funcArgs);didError=false;}// Create a global error event handler. We use this to capture the value
// that was thrown. It's possible that this error handler will fire more
// than once; for example, if non-React code also calls `dispatchEvent`
// and a handler for that event throws. We should be resilient to most of
// those cases. Even if our error event handler fires more than once, the
// last error event is always used. If the callback actually does error,
// we know that the last error event is the correct one, because it's not
// possible for anything else to have happened in between our callback
// erroring and the code that follows the `dispatchEvent` call below. If
// the callback doesn't error, but the error event was fired, we know to
// ignore it because `didError` will be false, as described above.
var error=void 0;// Use this to track whether the error event is ever called.
var didSetError=false;var isCrossOriginError=false;function handleWindowError(event){error=event.error;didSetError=true;if(error===null&&event.colno===0&&event.lineno===0){isCrossOriginError=true;}if(event.defaultPrevented){// Some other error handler has prevented default.
// Browsers silence the error report if this happens.
// We'll remember this to later decide whether to log it or not.
if(error!=null&&(typeof error==='undefined'?'undefined':_typeof(error))==='object'){try{error._suppressLogging=true;}catch(inner){// Ignore.
}}}}// Create a fake event type.
var evtType='react-'+(name?name:'invokeguardedcallback');// Attach our event handlers
window.addEventListener('error',handleWindowError);fakeNode.addEventListener(evtType,callCallback,false);// Synchronously dispatch our fake event. If the user-provided function
// errors, it will trigger our global error handler.
evt.initEvent(evtType,false,false);fakeNode.dispatchEvent(evt);if(windowEventDescriptor){Object.defineProperty(window,'event',windowEventDescriptor);}if(didError){if(!didSetError){// The callback errored, but the error event never fired.
error=new Error('An error was thrown inside one of your components, but React '+"doesn't know what it was. This is likely due to browser "+'flakiness. React does its best to preserve the "Pause on '+'exceptions" behavior of the DevTools, which requires some '+"DEV-mode only tricks. It's possible that these don't work in "+'your browser. Try triggering the error in production mode, '+'or switching to a modern browser. If you suspect that this is '+'actually an issue with React, please file an issue.');}else if(isCrossOriginError){error=new Error("A cross-origin error was thrown. React doesn't have access to "+'the actual error object in development. '+'See https://fb.me/react-crossorigin-error for more information.');}this.onError(error);}// Remove our event listeners
window.removeEventListener('error',handleWindowError);};invokeGuardedCallbackImpl=invokeGuardedCallbackDev;}}var invokeGuardedCallbackImpl$1=invokeGuardedCallbackImpl;// Used by Fiber to simulate a try-catch.
var hasError=false;var caughtError=null;// Used by event system to capture/rethrow the first error.
var hasRethrowError=false;var rethrowError=null;var reporter={onError:function onError(error){hasError=true;caughtError=error;}};/**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */function invokeGuardedCallback(name,func,context,a,b,c,d,e,f){hasError=false;caughtError=null;invokeGuardedCallbackImpl$1.apply(reporter,arguments);}/**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */function invokeGuardedCallbackAndCatchFirstError(name,func,context,a,b,c,d,e,f){invokeGuardedCallback.apply(this,arguments);if(hasError){var error=clearCaughtError();if(!hasRethrowError){hasRethrowError=true;rethrowError=error;}}}/**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */function rethrowCaughtError(){if(hasRethrowError){var error=rethrowError;hasRethrowError=false;rethrowError=null;throw error;}}function hasCaughtError(){return hasError;}function clearCaughtError(){if(hasError){var error=caughtError;hasError=false;caughtError=null;return error;}else{invariant(false,'clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.');}}/**
 * Injectable ordering of event plugins.
 */var eventPluginOrder=null;/**
 * Injectable mapping from names to event plugin modules.
 */var namesToPlugins={};/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */function recomputePluginOrdering(){if(!eventPluginOrder){// Wait until an `eventPluginOrder` is injected.
return;}for(var pluginName in namesToPlugins){var pluginModule=namesToPlugins[pluginName];var pluginIndex=eventPluginOrder.indexOf(pluginName);!(pluginIndex>-1)?invariant(false,'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.',pluginName):void 0;if(plugins[pluginIndex]){continue;}!pluginModule.extractEvents?invariant(false,'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.',pluginName):void 0;plugins[pluginIndex]=pluginModule;var publishedEvents=pluginModule.eventTypes;for(var eventName in publishedEvents){!publishEventForPlugin(publishedEvents[eventName],pluginModule,eventName)?invariant(false,'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',eventName,pluginName):void 0;}}}/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */function publishEventForPlugin(dispatchConfig,pluginModule,eventName){!!eventNameDispatchConfigs.hasOwnProperty(eventName)?invariant(false,'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.',eventName):void 0;eventNameDispatchConfigs[eventName]=dispatchConfig;var phasedRegistrationNames=dispatchConfig.phasedRegistrationNames;if(phasedRegistrationNames){for(var phaseName in phasedRegistrationNames){if(phasedRegistrationNames.hasOwnProperty(phaseName)){var phasedRegistrationName=phasedRegistrationNames[phaseName];publishRegistrationName(phasedRegistrationName,pluginModule,eventName);}}return true;}else if(dispatchConfig.registrationName){publishRegistrationName(dispatchConfig.registrationName,pluginModule,eventName);return true;}return false;}/**
 * Publishes a registration name that is used to identify dispatched events.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */function publishRegistrationName(registrationName,pluginModule,eventName){!!registrationNameModules[registrationName]?invariant(false,'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.',registrationName):void 0;registrationNameModules[registrationName]=pluginModule;registrationNameDependencies[registrationName]=pluginModule.eventTypes[eventName].dependencies;{var lowerCasedName=registrationName.toLowerCase();possibleRegistrationNames[lowerCasedName]=registrationName;if(registrationName==='onDoubleClick'){possibleRegistrationNames.ondblclick=registrationName;}}}/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 *//**
 * Ordered list of injected plugins.
 */var plugins=[];/**
 * Mapping from event name to dispatch config
 */var eventNameDispatchConfigs={};/**
 * Mapping from registration name to plugin module
 */var registrationNameModules={};/**
 * Mapping from registration name to event name
 */var registrationNameDependencies={};/**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */var possibleRegistrationNames={};// Trust the developer to only use possibleRegistrationNames in true
/**
 * Injects an ordering of plugins (by plugin name). This allows the ordering
 * to be decoupled from injection of the actual plugins so that ordering is
 * always deterministic regardless of packaging, on-the-fly injection, etc.
 *
 * @param {array} InjectedEventPluginOrder
 * @internal
 * @see {EventPluginHub.injection.injectEventPluginOrder}
 */function injectEventPluginOrder(injectedEventPluginOrder){!!eventPluginOrder?invariant(false,'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.'):void 0;// Clone the ordering so it cannot be dynamically mutated.
eventPluginOrder=Array.prototype.slice.call(injectedEventPluginOrder);recomputePluginOrdering();}/**
 * Injects plugins to be used by `EventPluginHub`. The plugin names must be
 * in the ordering injected by `injectEventPluginOrder`.
 *
 * Plugins can be injected as part of page initialization or on-the-fly.
 *
 * @param {object} injectedNamesToPlugins Map from names to plugin modules.
 * @internal
 * @see {EventPluginHub.injection.injectEventPluginsByName}
 */function injectEventPluginsByName(injectedNamesToPlugins){var isOrderingDirty=false;for(var pluginName in injectedNamesToPlugins){if(!injectedNamesToPlugins.hasOwnProperty(pluginName)){continue;}var pluginModule=injectedNamesToPlugins[pluginName];if(!namesToPlugins.hasOwnProperty(pluginName)||namesToPlugins[pluginName]!==pluginModule){!!namesToPlugins[pluginName]?invariant(false,'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.',pluginName):void 0;namesToPlugins[pluginName]=pluginModule;isOrderingDirty=true;}}if(isOrderingDirty){recomputePluginOrdering();}}/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */var warningWithoutStack=function warningWithoutStack(){};{warningWithoutStack=function warningWithoutStack(condition,format){for(var _len=arguments.length,args=Array(_len>2?_len-2:0),_key=2;_key<_len;_key++){args[_key-2]=arguments[_key];}if(format===undefined){throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning '+'message argument');}if(args.length>8){// Check before the condition to catch violations early.
throw new Error('warningWithoutStack() currently supports at most 8 arguments.');}if(condition){return;}if(typeof console!=='undefined'){var _args$map=args.map(function(item){return''+item;}),a=_args$map[0],b=_args$map[1],c=_args$map[2],d=_args$map[3],e=_args$map[4],f=_args$map[5],g=_args$map[6],h=_args$map[7];var message='Warning: '+format;// We intentionally don't use spread (or .apply) because it breaks IE9:
// https://github.com/facebook/react/issues/13610
switch(args.length){case 0:console.error(message);break;case 1:console.error(message,a);break;case 2:console.error(message,a,b);break;case 3:console.error(message,a,b,c);break;case 4:console.error(message,a,b,c,d);break;case 5:console.error(message,a,b,c,d,e);break;case 6:console.error(message,a,b,c,d,e,f);break;case 7:console.error(message,a,b,c,d,e,f,g);break;case 8:console.error(message,a,b,c,d,e,f,g,h);break;default:throw new Error('warningWithoutStack() currently supports at most 8 arguments.');}}try{// --- Welcome to debugging React ---
// This error was thrown as a convenience so that you can use this stack
// to find the callsite that caused this warning to fire.
var argIndex=0;var _message='Warning: '+format.replace(/%s/g,function(){return args[argIndex++];});throw new Error(_message);}catch(x){}};}var warningWithoutStack$1=warningWithoutStack;var getFiberCurrentPropsFromNode=null;var getInstanceFromNode=null;var getNodeFromInstance=null;function setComponentTree(getFiberCurrentPropsFromNodeImpl,getInstanceFromNodeImpl,getNodeFromInstanceImpl){getFiberCurrentPropsFromNode=getFiberCurrentPropsFromNodeImpl;getInstanceFromNode=getInstanceFromNodeImpl;getNodeFromInstance=getNodeFromInstanceImpl;{!(getNodeFromInstance&&getInstanceFromNode)?warningWithoutStack$1(false,'EventPluginUtils.setComponentTree(...): Injected '+'module is missing getNodeFromInstance or getInstanceFromNode.'):void 0;}}var validateEventDispatches=void 0;{validateEventDispatches=function validateEventDispatches(event){var dispatchListeners=event._dispatchListeners;var dispatchInstances=event._dispatchInstances;var listenersIsArr=Array.isArray(dispatchListeners);var listenersLen=listenersIsArr?dispatchListeners.length:dispatchListeners?1:0;var instancesIsArr=Array.isArray(dispatchInstances);var instancesLen=instancesIsArr?dispatchInstances.length:dispatchInstances?1:0;!(instancesIsArr===listenersIsArr&&instancesLen===listenersLen)?warningWithoutStack$1(false,'EventPluginUtils: Invalid `event`.'):void 0;};}/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @param {function} listener Application-level callback
 * @param {*} inst Internal component instance
 */function executeDispatch(event,simulated,listener,inst){var type=event.type||'unknown-event';event.currentTarget=getNodeFromInstance(inst);invokeGuardedCallbackAndCatchFirstError(type,listener,undefined,event);event.currentTarget=null;}/**
 * Standard/simple iteration through an event's collected dispatches.
 */function executeDispatchesInOrder(event,simulated){var dispatchListeners=event._dispatchListeners;var dispatchInstances=event._dispatchInstances;{validateEventDispatches(event);}if(Array.isArray(dispatchListeners)){for(var i=0;i<dispatchListeners.length;i++){if(event.isPropagationStopped()){break;}// Listeners and Instances are two parallel arrays that are always in sync.
executeDispatch(event,simulated,dispatchListeners[i],dispatchInstances[i]);}}else if(dispatchListeners){executeDispatch(event,simulated,dispatchListeners,dispatchInstances);}event._dispatchListeners=null;event._dispatchInstances=null;}/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 *//**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 *//**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 *//**
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */function accumulateInto(current,next){!(next!=null)?invariant(false,'accumulateInto(...): Accumulated items must not be null or undefined.'):void 0;if(current==null){return next;}// Both are not empty. Warning: Never call x.concat(y) when you are not
// certain that x is an Array (x could be a string with concat method).
if(Array.isArray(current)){if(Array.isArray(next)){current.push.apply(current,next);return current;}current.push(next);return current;}if(Array.isArray(next)){// A bit too dangerous to mutate `next`.
return[current].concat(next);}return[current,next];}/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 * @param {function} cb Callback invoked with each element or a collection.
 * @param {?} [scope] Scope used as `this` in a callback.
 */function forEachAccumulated(arr,cb,scope){if(Array.isArray(arr)){arr.forEach(cb,scope);}else if(arr){cb.call(scope,arr);}}/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */var eventQueue=null;/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @private
 */var executeDispatchesAndRelease=function executeDispatchesAndRelease(event,simulated){if(event){executeDispatchesInOrder(event,simulated);if(!event.isPersistent()){event.constructor.release(event);}}};var executeDispatchesAndReleaseSimulated=function executeDispatchesAndReleaseSimulated(e){return executeDispatchesAndRelease(e,true);};var executeDispatchesAndReleaseTopLevel=function executeDispatchesAndReleaseTopLevel(e){return executeDispatchesAndRelease(e,false);};function isInteractive(tag){return tag==='button'||tag==='input'||tag==='select'||tag==='textarea';}function shouldPreventMouseEvent(name,type,props){switch(name){case'onClick':case'onClickCapture':case'onDoubleClick':case'onDoubleClickCapture':case'onMouseDown':case'onMouseDownCapture':case'onMouseMove':case'onMouseMoveCapture':case'onMouseUp':case'onMouseUpCapture':return!!(props.disabled&&isInteractive(type));default:return false;}}/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 *//**
 * Methods for injecting dependencies.
 */var injection={/**
   * @param {array} InjectedEventPluginOrder
   * @public
   */injectEventPluginOrder:injectEventPluginOrder,/**
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   */injectEventPluginsByName:injectEventPluginsByName};/**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */function getListener(inst,registrationName){var listener=void 0;// TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
// live here; needs to be moved to a better place soon
var stateNode=inst.stateNode;if(!stateNode){// Work in progress (ex: onload events in incremental mode).
return null;}var props=getFiberCurrentPropsFromNode(stateNode);if(!props){// Work in progress.
return null;}listener=props[registrationName];if(shouldPreventMouseEvent(registrationName,inst.type,props)){return null;}!(!listener||typeof listener==='function')?invariant(false,'Expected `%s` listener to be a function, instead got a value of `%s` type.',registrationName,typeof listener==='undefined'?'undefined':_typeof(listener)):void 0;return listener;}/**
 * Allows registered plugins an opportunity to extract events from top-level
 * native browser events.
 *
 * @return {*} An accumulation of synthetic events.
 * @internal
 */function extractEvents(topLevelType,targetInst,nativeEvent,nativeEventTarget){var events=null;for(var i=0;i<plugins.length;i++){// Not every plugin in the ordering may be loaded at runtime.
var possiblePlugin=plugins[i];if(possiblePlugin){var extractedEvents=possiblePlugin.extractEvents(topLevelType,targetInst,nativeEvent,nativeEventTarget);if(extractedEvents){events=accumulateInto(events,extractedEvents);}}}return events;}function runEventsInBatch(events,simulated){if(events!==null){eventQueue=accumulateInto(eventQueue,events);}// Set `eventQueue` to null before processing it so that we can tell if more
// events get enqueued while processing.
var processingEventQueue=eventQueue;eventQueue=null;if(!processingEventQueue){return;}if(simulated){forEachAccumulated(processingEventQueue,executeDispatchesAndReleaseSimulated);}else{forEachAccumulated(processingEventQueue,executeDispatchesAndReleaseTopLevel);}!!eventQueue?invariant(false,'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.'):void 0;// This would be a good time to rethrow if any of the event handlers threw.
rethrowCaughtError();}function runExtractedEventsInBatch(topLevelType,targetInst,nativeEvent,nativeEventTarget){var events=extractEvents(topLevelType,targetInst,nativeEvent,nativeEventTarget);runEventsInBatch(events,false);}var FunctionComponent=0;var ClassComponent=1;var IndeterminateComponent=2;// Before we know whether it is function or class
var HostRoot=3;// Root of a host tree. Could be nested inside another node.
var HostPortal=4;// A subtree. Could be an entry point to a different renderer.
var HostComponent=5;var HostText=6;var Fragment=7;var Mode=8;var ContextConsumer=9;var ContextProvider=10;var ForwardRef=11;var Profiler=12;var SuspenseComponent=13;var MemoComponent=14;var SimpleMemoComponent=15;var LazyComponent=16;var IncompleteClassComponent=17;var randomKey=Math.random().toString(36).slice(2);var internalInstanceKey='__reactInternalInstance$'+randomKey;var internalEventHandlersKey='__reactEventHandlers$'+randomKey;function precacheFiberNode(hostInst,node){node[internalInstanceKey]=hostInst;}/**
 * Given a DOM node, return the closest ReactDOMComponent or
 * ReactDOMTextComponent instance ancestor.
 */function getClosestInstanceFromNode(node){if(node[internalInstanceKey]){return node[internalInstanceKey];}while(!node[internalInstanceKey]){if(node.parentNode){node=node.parentNode;}else{// Top of the tree. This node must not be part of a React tree (or is
// unmounted, potentially).
return null;}}var inst=node[internalInstanceKey];if(inst.tag===HostComponent||inst.tag===HostText){// In Fiber, this will always be the deepest root.
return inst;}return null;}/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */function getInstanceFromNode$1(node){var inst=node[internalInstanceKey];if(inst){if(inst.tag===HostComponent||inst.tag===HostText){return inst;}else{return null;}}return null;}/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */function getNodeFromInstance$1(inst){if(inst.tag===HostComponent||inst.tag===HostText){// In Fiber this, is just the state node right now. We assume it will be
// a host component or host text.
return inst.stateNode;}// Without this first invariant, passing a non-DOM-component triggers the next
// invariant for a missing parent, which is super confusing.
invariant(false,'getNodeFromInstance: Invalid argument.');}function getFiberCurrentPropsFromNode$1(node){return node[internalEventHandlersKey]||null;}function updateFiberProps(node,props){node[internalEventHandlersKey]=props;}function getParent(inst){do{inst=inst.return;// TODO: If this is a HostRoot we might want to bail out.
// That is depending on if we want nested subtrees (layers) to bubble
// events to their parent. We could also go through parentNode on the
// host node but that wouldn't work for React Native and doesn't let us
// do the portal feature.
}while(inst&&inst.tag!==HostComponent);if(inst){return inst;}return null;}/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */function getLowestCommonAncestor(instA,instB){var depthA=0;for(var tempA=instA;tempA;tempA=getParent(tempA)){depthA++;}var depthB=0;for(var tempB=instB;tempB;tempB=getParent(tempB)){depthB++;}// If A is deeper, crawl up.
while(depthA-depthB>0){instA=getParent(instA);depthA--;}// If B is deeper, crawl up.
while(depthB-depthA>0){instB=getParent(instB);depthB--;}// Walk in lockstep until we find a match.
var depth=depthA;while(depth--){if(instA===instB||instA===instB.alternate){return instA;}instA=getParent(instA);instB=getParent(instB);}return null;}/**
 * Return if A is an ancestor of B.
 *//**
 * Return the parent instance of the passed-in instance.
 *//**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */function traverseTwoPhase(inst,fn,arg){var path=[];while(inst){path.push(inst);inst=getParent(inst);}var i=void 0;for(i=path.length;i-->0;){fn(path[i],'captured',arg);}for(i=0;i<path.length;i++){fn(path[i],'bubbled',arg);}}/**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */function traverseEnterLeave(from,to,fn,argFrom,argTo){var common=from&&to?getLowestCommonAncestor(from,to):null;var pathFrom=[];while(true){if(!from){break;}if(from===common){break;}var alternate=from.alternate;if(alternate!==null&&alternate===common){break;}pathFrom.push(from);from=getParent(from);}var pathTo=[];while(true){if(!to){break;}if(to===common){break;}var _alternate=to.alternate;if(_alternate!==null&&_alternate===common){break;}pathTo.push(to);to=getParent(to);}for(var i=0;i<pathFrom.length;i++){fn(pathFrom[i],'bubbled',argFrom);}for(var _i=pathTo.length;_i-->0;){fn(pathTo[_i],'captured',argTo);}}/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */function listenerAtPhase(inst,event,propagationPhase){var registrationName=event.dispatchConfig.phasedRegistrationNames[propagationPhase];return getListener(inst,registrationName);}/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing even a
 * single one.
 *//**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */function accumulateDirectionalDispatches(inst,phase,event){{!inst?warningWithoutStack$1(false,'Dispatching inst must not be null'):void 0;}var listener=listenerAtPhase(inst,event,phase);if(listener){event._dispatchListeners=accumulateInto(event._dispatchListeners,listener);event._dispatchInstances=accumulateInto(event._dispatchInstances,inst);}}/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */function accumulateTwoPhaseDispatchesSingle(event){if(event&&event.dispatchConfig.phasedRegistrationNames){traverseTwoPhase(event._targetInst,accumulateDirectionalDispatches,event);}}/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */function accumulateDispatches(inst,ignoredDirection,event){if(inst&&event&&event.dispatchConfig.registrationName){var registrationName=event.dispatchConfig.registrationName;var listener=getListener(inst,registrationName);if(listener){event._dispatchListeners=accumulateInto(event._dispatchListeners,listener);event._dispatchInstances=accumulateInto(event._dispatchInstances,inst);}}}/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */function accumulateDirectDispatchesSingle(event){if(event&&event.dispatchConfig.registrationName){accumulateDispatches(event._targetInst,null,event);}}function accumulateTwoPhaseDispatches(events){forEachAccumulated(events,accumulateTwoPhaseDispatchesSingle);}function accumulateEnterLeaveDispatches(leave,enter,from,to){traverseEnterLeave(from,to,accumulateDispatches,leave,enter);}function accumulateDirectDispatches(events){forEachAccumulated(events,accumulateDirectDispatchesSingle);}var canUseDOM=!!(typeof window!=='undefined'&&window.document&&window.document.createElement);// Do not uses the below two methods directly!
// Instead use constants exported from DOMTopLevelEventTypes in ReactDOM.
// (It is the only module that is allowed to access these methods.)
function unsafeCastStringToDOMTopLevelType(topLevelType){return topLevelType;}function unsafeCastDOMTopLevelTypeToString(topLevelType){return topLevelType;}/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */function makePrefixMap(styleProp,eventName){var prefixes={};prefixes[styleProp.toLowerCase()]=eventName.toLowerCase();prefixes['Webkit'+styleProp]='webkit'+eventName;prefixes['Moz'+styleProp]='moz'+eventName;return prefixes;}/**
 * A list of event names to a configurable list of vendor prefixes.
 */var vendorPrefixes={animationend:makePrefixMap('Animation','AnimationEnd'),animationiteration:makePrefixMap('Animation','AnimationIteration'),animationstart:makePrefixMap('Animation','AnimationStart'),transitionend:makePrefixMap('Transition','TransitionEnd')};/**
 * Event names that have already been detected and prefixed (if applicable).
 */var prefixedEventNames={};/**
 * Element to check for prefixes on.
 */var style={};/**
 * Bootstrap if a DOM exists.
 */if(canUseDOM){style=document.createElement('div').style;// On some platforms, in particular some releases of Android 4.x,
// the un-prefixed "animation" and "transition" properties are defined on the
// style object but the events that fire will still be prefixed, so we need
// to check if the un-prefixed events are usable, and if not remove them from the map.
if(!('AnimationEvent'in window)){delete vendorPrefixes.animationend.animation;delete vendorPrefixes.animationiteration.animation;delete vendorPrefixes.animationstart.animation;}// Same as above
if(!('TransitionEvent'in window)){delete vendorPrefixes.transitionend.transition;}}/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */function getVendorPrefixedEventName(eventName){if(prefixedEventNames[eventName]){return prefixedEventNames[eventName];}else if(!vendorPrefixes[eventName]){return eventName;}var prefixMap=vendorPrefixes[eventName];for(var styleProp in prefixMap){if(prefixMap.hasOwnProperty(styleProp)&&styleProp in style){return prefixedEventNames[eventName]=prefixMap[styleProp];}}return eventName;}/**
 * To identify top level events in ReactDOM, we use constants defined by this
 * module. This is the only module that uses the unsafe* methods to express
 * that the constants actually correspond to the browser event names. This lets
 * us save some bundle size by avoiding a top level type -> event name map.
 * The rest of ReactDOM code should import top level types from this file.
 */var TOP_ABORT=unsafeCastStringToDOMTopLevelType('abort');var TOP_ANIMATION_END=unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationend'));var TOP_ANIMATION_ITERATION=unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationiteration'));var TOP_ANIMATION_START=unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationstart'));var TOP_BLUR=unsafeCastStringToDOMTopLevelType('blur');var TOP_CAN_PLAY=unsafeCastStringToDOMTopLevelType('canplay');var TOP_CAN_PLAY_THROUGH=unsafeCastStringToDOMTopLevelType('canplaythrough');var TOP_CANCEL=unsafeCastStringToDOMTopLevelType('cancel');var TOP_CHANGE=unsafeCastStringToDOMTopLevelType('change');var TOP_CLICK=unsafeCastStringToDOMTopLevelType('click');var TOP_CLOSE=unsafeCastStringToDOMTopLevelType('close');var TOP_COMPOSITION_END=unsafeCastStringToDOMTopLevelType('compositionend');var TOP_COMPOSITION_START=unsafeCastStringToDOMTopLevelType('compositionstart');var TOP_COMPOSITION_UPDATE=unsafeCastStringToDOMTopLevelType('compositionupdate');var TOP_CONTEXT_MENU=unsafeCastStringToDOMTopLevelType('contextmenu');var TOP_COPY=unsafeCastStringToDOMTopLevelType('copy');var TOP_CUT=unsafeCastStringToDOMTopLevelType('cut');var TOP_DOUBLE_CLICK=unsafeCastStringToDOMTopLevelType('dblclick');var TOP_AUX_CLICK=unsafeCastStringToDOMTopLevelType('auxclick');var TOP_DRAG=unsafeCastStringToDOMTopLevelType('drag');var TOP_DRAG_END=unsafeCastStringToDOMTopLevelType('dragend');var TOP_DRAG_ENTER=unsafeCastStringToDOMTopLevelType('dragenter');var TOP_DRAG_EXIT=unsafeCastStringToDOMTopLevelType('dragexit');var TOP_DRAG_LEAVE=unsafeCastStringToDOMTopLevelType('dragleave');var TOP_DRAG_OVER=unsafeCastStringToDOMTopLevelType('dragover');var TOP_DRAG_START=unsafeCastStringToDOMTopLevelType('dragstart');var TOP_DROP=unsafeCastStringToDOMTopLevelType('drop');var TOP_DURATION_CHANGE=unsafeCastStringToDOMTopLevelType('durationchange');var TOP_EMPTIED=unsafeCastStringToDOMTopLevelType('emptied');var TOP_ENCRYPTED=unsafeCastStringToDOMTopLevelType('encrypted');var TOP_ENDED=unsafeCastStringToDOMTopLevelType('ended');var TOP_ERROR=unsafeCastStringToDOMTopLevelType('error');var TOP_FOCUS=unsafeCastStringToDOMTopLevelType('focus');var TOP_GOT_POINTER_CAPTURE=unsafeCastStringToDOMTopLevelType('gotpointercapture');var TOP_INPUT=unsafeCastStringToDOMTopLevelType('input');var TOP_INVALID=unsafeCastStringToDOMTopLevelType('invalid');var TOP_KEY_DOWN=unsafeCastStringToDOMTopLevelType('keydown');var TOP_KEY_PRESS=unsafeCastStringToDOMTopLevelType('keypress');var TOP_KEY_UP=unsafeCastStringToDOMTopLevelType('keyup');var TOP_LOAD=unsafeCastStringToDOMTopLevelType('load');var TOP_LOAD_START=unsafeCastStringToDOMTopLevelType('loadstart');var TOP_LOADED_DATA=unsafeCastStringToDOMTopLevelType('loadeddata');var TOP_LOADED_METADATA=unsafeCastStringToDOMTopLevelType('loadedmetadata');var TOP_LOST_POINTER_CAPTURE=unsafeCastStringToDOMTopLevelType('lostpointercapture');var TOP_MOUSE_DOWN=unsafeCastStringToDOMTopLevelType('mousedown');var TOP_MOUSE_MOVE=unsafeCastStringToDOMTopLevelType('mousemove');var TOP_MOUSE_OUT=unsafeCastStringToDOMTopLevelType('mouseout');var TOP_MOUSE_OVER=unsafeCastStringToDOMTopLevelType('mouseover');var TOP_MOUSE_UP=unsafeCastStringToDOMTopLevelType('mouseup');var TOP_PASTE=unsafeCastStringToDOMTopLevelType('paste');var TOP_PAUSE=unsafeCastStringToDOMTopLevelType('pause');var TOP_PLAY=unsafeCastStringToDOMTopLevelType('play');var TOP_PLAYING=unsafeCastStringToDOMTopLevelType('playing');var TOP_POINTER_CANCEL=unsafeCastStringToDOMTopLevelType('pointercancel');var TOP_POINTER_DOWN=unsafeCastStringToDOMTopLevelType('pointerdown');var TOP_POINTER_MOVE=unsafeCastStringToDOMTopLevelType('pointermove');var TOP_POINTER_OUT=unsafeCastStringToDOMTopLevelType('pointerout');var TOP_POINTER_OVER=unsafeCastStringToDOMTopLevelType('pointerover');var TOP_POINTER_UP=unsafeCastStringToDOMTopLevelType('pointerup');var TOP_PROGRESS=unsafeCastStringToDOMTopLevelType('progress');var TOP_RATE_CHANGE=unsafeCastStringToDOMTopLevelType('ratechange');var TOP_RESET=unsafeCastStringToDOMTopLevelType('reset');var TOP_SCROLL=unsafeCastStringToDOMTopLevelType('scroll');var TOP_SEEKED=unsafeCastStringToDOMTopLevelType('seeked');var TOP_SEEKING=unsafeCastStringToDOMTopLevelType('seeking');var TOP_SELECTION_CHANGE=unsafeCastStringToDOMTopLevelType('selectionchange');var TOP_STALLED=unsafeCastStringToDOMTopLevelType('stalled');var TOP_SUBMIT=unsafeCastStringToDOMTopLevelType('submit');var TOP_SUSPEND=unsafeCastStringToDOMTopLevelType('suspend');var TOP_TEXT_INPUT=unsafeCastStringToDOMTopLevelType('textInput');var TOP_TIME_UPDATE=unsafeCastStringToDOMTopLevelType('timeupdate');var TOP_TOGGLE=unsafeCastStringToDOMTopLevelType('toggle');var TOP_TOUCH_CANCEL=unsafeCastStringToDOMTopLevelType('touchcancel');var TOP_TOUCH_END=unsafeCastStringToDOMTopLevelType('touchend');var TOP_TOUCH_MOVE=unsafeCastStringToDOMTopLevelType('touchmove');var TOP_TOUCH_START=unsafeCastStringToDOMTopLevelType('touchstart');var TOP_TRANSITION_END=unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('transitionend'));var TOP_VOLUME_CHANGE=unsafeCastStringToDOMTopLevelType('volumechange');var TOP_WAITING=unsafeCastStringToDOMTopLevelType('waiting');var TOP_WHEEL=unsafeCastStringToDOMTopLevelType('wheel');// List of events that need to be individually attached to media elements.
// Note that events in this list will *not* be listened to at the top level
// unless they're explicitly whitelisted in `ReactBrowserEventEmitter.listenTo`.
var mediaEventTypes=[TOP_ABORT,TOP_CAN_PLAY,TOP_CAN_PLAY_THROUGH,TOP_DURATION_CHANGE,TOP_EMPTIED,TOP_ENCRYPTED,TOP_ENDED,TOP_ERROR,TOP_LOADED_DATA,TOP_LOADED_METADATA,TOP_LOAD_START,TOP_PAUSE,TOP_PLAY,TOP_PLAYING,TOP_PROGRESS,TOP_RATE_CHANGE,TOP_SEEKED,TOP_SEEKING,TOP_STALLED,TOP_SUSPEND,TOP_TIME_UPDATE,TOP_VOLUME_CHANGE,TOP_WAITING];function getRawEventName(topLevelType){return unsafeCastDOMTopLevelTypeToString(topLevelType);}/**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */var root=null;var startText=null;var fallbackText=null;function initialize(nativeEventTarget){root=nativeEventTarget;startText=getText();return true;}function reset(){root=null;startText=null;fallbackText=null;}function getData(){if(fallbackText){return fallbackText;}var start=void 0;var startValue=startText;var startLength=startValue.length;var end=void 0;var endValue=getText();var endLength=endValue.length;for(start=0;start<startLength;start++){if(startValue[start]!==endValue[start]){break;}}var minEnd=startLength-start;for(end=1;end<=minEnd;end++){if(startValue[startLength-end]!==endValue[endLength-end]){break;}}var sliceTail=end>1?1-end:undefined;fallbackText=endValue.slice(start,sliceTail);return fallbackText;}function getText(){if('value'in root){return root.value;}return root.textContent;}/* eslint valid-typeof: 0 */var EVENT_POOL_SIZE=10;/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */var EventInterface={type:null,target:null,// currentTarget is set when dispatching; no use in copying it here
currentTarget:function currentTarget(){return null;},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function timeStamp(event){return event.timeStamp||Date.now();},defaultPrevented:null,isTrusted:null};function functionThatReturnsTrue(){return true;}function functionThatReturnsFalse(){return false;}/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {*} targetInst Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @param {DOMEventTarget} nativeEventTarget Target node.
 */function SyntheticEvent(dispatchConfig,targetInst,nativeEvent,nativeEventTarget){{// these have a getter/setter for warnings
delete this.nativeEvent;delete this.preventDefault;delete this.stopPropagation;delete this.isDefaultPrevented;delete this.isPropagationStopped;}this.dispatchConfig=dispatchConfig;this._targetInst=targetInst;this.nativeEvent=nativeEvent;var Interface=this.constructor.Interface;for(var propName in Interface){if(!Interface.hasOwnProperty(propName)){continue;}{delete this[propName];// this has a getter/setter for warnings
}var normalize=Interface[propName];if(normalize){this[propName]=normalize(nativeEvent);}else{if(propName==='target'){this.target=nativeEventTarget;}else{this[propName]=nativeEvent[propName];}}}var defaultPrevented=nativeEvent.defaultPrevented!=null?nativeEvent.defaultPrevented:nativeEvent.returnValue===false;if(defaultPrevented){this.isDefaultPrevented=functionThatReturnsTrue;}else{this.isDefaultPrevented=functionThatReturnsFalse;}this.isPropagationStopped=functionThatReturnsFalse;return this;}_assign(SyntheticEvent.prototype,{preventDefault:function preventDefault(){this.defaultPrevented=true;var event=this.nativeEvent;if(!event){return;}if(event.preventDefault){event.preventDefault();}else if(typeof event.returnValue!=='unknown'){event.returnValue=false;}this.isDefaultPrevented=functionThatReturnsTrue;},stopPropagation:function stopPropagation(){var event=this.nativeEvent;if(!event){return;}if(event.stopPropagation){event.stopPropagation();}else if(typeof event.cancelBubble!=='unknown'){// The ChangeEventPlugin registers a "propertychange" event for
// IE. This event does not support bubbling or cancelling, and
// any references to cancelBubble throw "Member not found".  A
// typeof check of "unknown" circumvents this issue (and is also
// IE specific).
event.cancelBubble=true;}this.isPropagationStopped=functionThatReturnsTrue;},/**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */persist:function persist(){this.isPersistent=functionThatReturnsTrue;},/**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */isPersistent:functionThatReturnsFalse,/**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */destructor:function destructor(){var Interface=this.constructor.Interface;for(var propName in Interface){{Object.defineProperty(this,propName,getPooledWarningPropertyDefinition(propName,Interface[propName]));}}this.dispatchConfig=null;this._targetInst=null;this.nativeEvent=null;this.isDefaultPrevented=functionThatReturnsFalse;this.isPropagationStopped=functionThatReturnsFalse;this._dispatchListeners=null;this._dispatchInstances=null;{Object.defineProperty(this,'nativeEvent',getPooledWarningPropertyDefinition('nativeEvent',null));Object.defineProperty(this,'isDefaultPrevented',getPooledWarningPropertyDefinition('isDefaultPrevented',functionThatReturnsFalse));Object.defineProperty(this,'isPropagationStopped',getPooledWarningPropertyDefinition('isPropagationStopped',functionThatReturnsFalse));Object.defineProperty(this,'preventDefault',getPooledWarningPropertyDefinition('preventDefault',function(){}));Object.defineProperty(this,'stopPropagation',getPooledWarningPropertyDefinition('stopPropagation',function(){}));}}});SyntheticEvent.Interface=EventInterface;/**
 * Helper to reduce boilerplate when creating subclasses.
 */SyntheticEvent.extend=function(Interface){var Super=this;var E=function E(){};E.prototype=Super.prototype;var prototype=new E();function Class(){return Super.apply(this,arguments);}_assign(prototype,Class.prototype);Class.prototype=prototype;Class.prototype.constructor=Class;Class.Interface=_assign({},Super.Interface,Interface);Class.extend=Super.extend;addEventPoolingTo(Class);return Class;};addEventPoolingTo(SyntheticEvent);/**
 * Helper to nullify syntheticEvent instance properties when destructing
 *
 * @param {String} propName
 * @param {?object} getVal
 * @return {object} defineProperty object
 */function getPooledWarningPropertyDefinition(propName,getVal){var isFunction=typeof getVal==='function';return{configurable:true,set:set,get:get};function set(val){var action=isFunction?'setting the method':'setting the property';warn(action,'This is effectively a no-op');return val;}function get(){var action=isFunction?'accessing the method':'accessing the property';var result=isFunction?'This is a no-op function':'This is set to null';warn(action,result);return getVal;}function warn(action,result){var warningCondition=false;!warningCondition?warningWithoutStack$1(false,"This synthetic event is reused for performance reasons. If you're seeing this, "+"you're %s `%s` on a released/nullified synthetic event. %s. "+'If you must keep the original synthetic event around, use event.persist(). '+'See https://fb.me/react-event-pooling for more information.',action,propName,result):void 0;}}function getPooledEvent(dispatchConfig,targetInst,nativeEvent,nativeInst){var EventConstructor=this;if(EventConstructor.eventPool.length){var instance=EventConstructor.eventPool.pop();EventConstructor.call(instance,dispatchConfig,targetInst,nativeEvent,nativeInst);return instance;}return new EventConstructor(dispatchConfig,targetInst,nativeEvent,nativeInst);}function releasePooledEvent(event){var EventConstructor=this;!(event instanceof EventConstructor)?invariant(false,'Trying to release an event instance into a pool of a different type.'):void 0;event.destructor();if(EventConstructor.eventPool.length<EVENT_POOL_SIZE){EventConstructor.eventPool.push(event);}}function addEventPoolingTo(EventConstructor){EventConstructor.eventPool=[];EventConstructor.getPooled=getPooledEvent;EventConstructor.release=releasePooledEvent;}/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */var SyntheticCompositionEvent=SyntheticEvent.extend({data:null});/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */var SyntheticInputEvent=SyntheticEvent.extend({data:null});var END_KEYCODES=[9,13,27,32];// Tab, Return, Esc, Space
var START_KEYCODE=229;var canUseCompositionEvent=canUseDOM&&'CompositionEvent'in window;var documentMode=null;if(canUseDOM&&'documentMode'in document){documentMode=document.documentMode;}// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent=canUseDOM&&'TextEvent'in window&&!documentMode;// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData=canUseDOM&&(!canUseCompositionEvent||documentMode&&documentMode>8&&documentMode<=11);var SPACEBAR_CODE=32;var SPACEBAR_CHAR=String.fromCharCode(SPACEBAR_CODE);// Events and their corresponding property names.
var eventTypes={beforeInput:{phasedRegistrationNames:{bubbled:'onBeforeInput',captured:'onBeforeInputCapture'},dependencies:[TOP_COMPOSITION_END,TOP_KEY_PRESS,TOP_TEXT_INPUT,TOP_PASTE]},compositionEnd:{phasedRegistrationNames:{bubbled:'onCompositionEnd',captured:'onCompositionEndCapture'},dependencies:[TOP_BLUR,TOP_COMPOSITION_END,TOP_KEY_DOWN,TOP_KEY_PRESS,TOP_KEY_UP,TOP_MOUSE_DOWN]},compositionStart:{phasedRegistrationNames:{bubbled:'onCompositionStart',captured:'onCompositionStartCapture'},dependencies:[TOP_BLUR,TOP_COMPOSITION_START,TOP_KEY_DOWN,TOP_KEY_PRESS,TOP_KEY_UP,TOP_MOUSE_DOWN]},compositionUpdate:{phasedRegistrationNames:{bubbled:'onCompositionUpdate',captured:'onCompositionUpdateCapture'},dependencies:[TOP_BLUR,TOP_COMPOSITION_UPDATE,TOP_KEY_DOWN,TOP_KEY_PRESS,TOP_KEY_UP,TOP_MOUSE_DOWN]}};// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress=false;/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */function isKeypressCommand(nativeEvent){return(nativeEvent.ctrlKey||nativeEvent.altKey||nativeEvent.metaKey)&&// ctrlKey && altKey is equivalent to AltGr, and is not a command.
!(nativeEvent.ctrlKey&&nativeEvent.altKey);}/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */function getCompositionEventType(topLevelType){switch(topLevelType){case TOP_COMPOSITION_START:return eventTypes.compositionStart;case TOP_COMPOSITION_END:return eventTypes.compositionEnd;case TOP_COMPOSITION_UPDATE:return eventTypes.compositionUpdate;}}/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */function isFallbackCompositionStart(topLevelType,nativeEvent){return topLevelType===TOP_KEY_DOWN&&nativeEvent.keyCode===START_KEYCODE;}/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */function isFallbackCompositionEnd(topLevelType,nativeEvent){switch(topLevelType){case TOP_KEY_UP:// Command keys insert or clear IME input.
return END_KEYCODES.indexOf(nativeEvent.keyCode)!==-1;case TOP_KEY_DOWN:// Expect IME keyCode on each keydown. If we get any other
// code we must have exited earlier.
return nativeEvent.keyCode!==START_KEYCODE;case TOP_KEY_PRESS:case TOP_MOUSE_DOWN:case TOP_BLUR:// Events are not possible without cancelling IME.
return true;default:return false;}}/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */function getDataFromCustomEvent(nativeEvent){var detail=nativeEvent.detail;if((typeof detail==='undefined'?'undefined':_typeof(detail))==='object'&&'data'in detail){return detail.data;}return null;}/**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */function isUsingKoreanIME(nativeEvent){return nativeEvent.locale==='ko';}// Track the current IME composition status, if any.
var isComposing=false;/**
 * @return {?object} A SyntheticCompositionEvent.
 */function extractCompositionEvent(topLevelType,targetInst,nativeEvent,nativeEventTarget){var eventType=void 0;var fallbackData=void 0;if(canUseCompositionEvent){eventType=getCompositionEventType(topLevelType);}else if(!isComposing){if(isFallbackCompositionStart(topLevelType,nativeEvent)){eventType=eventTypes.compositionStart;}}else if(isFallbackCompositionEnd(topLevelType,nativeEvent)){eventType=eventTypes.compositionEnd;}if(!eventType){return null;}if(useFallbackCompositionData&&!isUsingKoreanIME(nativeEvent)){// The current composition is stored statically and must not be
// overwritten while composition continues.
if(!isComposing&&eventType===eventTypes.compositionStart){isComposing=initialize(nativeEventTarget);}else if(eventType===eventTypes.compositionEnd){if(isComposing){fallbackData=getData();}}}var event=SyntheticCompositionEvent.getPooled(eventType,targetInst,nativeEvent,nativeEventTarget);if(fallbackData){// Inject data generated from fallback path into the synthetic event.
// This matches the property of native CompositionEventInterface.
event.data=fallbackData;}else{var customData=getDataFromCustomEvent(nativeEvent);if(customData!==null){event.data=customData;}}accumulateTwoPhaseDispatches(event);return event;}/**
 * @param {TopLevelType} topLevelType Number from `TopLevelType`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */function getNativeBeforeInputChars(topLevelType,nativeEvent){switch(topLevelType){case TOP_COMPOSITION_END:return getDataFromCustomEvent(nativeEvent);case TOP_KEY_PRESS:/**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */var which=nativeEvent.which;if(which!==SPACEBAR_CODE){return null;}hasSpaceKeypress=true;return SPACEBAR_CHAR;case TOP_TEXT_INPUT:// Record the characters to be added to the DOM.
var chars=nativeEvent.data;// If it's a spacebar character, assume that we have already handled
// it at the keypress level and bail immediately. Android Chrome
// doesn't give us keycodes, so we need to ignore it.
if(chars===SPACEBAR_CHAR&&hasSpaceKeypress){return null;}return chars;default:// For other native event types, do nothing.
return null;}}/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {number} topLevelType Number from `TopLevelEventTypes`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */function getFallbackBeforeInputChars(topLevelType,nativeEvent){// If we are currently composing (IME) and using a fallback to do so,
// try to extract the composed characters from the fallback object.
// If composition event is available, we extract a string only at
// compositionevent, otherwise extract it at fallback events.
if(isComposing){if(topLevelType===TOP_COMPOSITION_END||!canUseCompositionEvent&&isFallbackCompositionEnd(topLevelType,nativeEvent)){var chars=getData();reset();isComposing=false;return chars;}return null;}switch(topLevelType){case TOP_PASTE:// If a paste event occurs after a keypress, throw out the input
// chars. Paste events should not lead to BeforeInput events.
return null;case TOP_KEY_PRESS:/**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */if(!isKeypressCommand(nativeEvent)){// IE fires the `keypress` event when a user types an emoji via
// Touch keyboard of Windows.  In such a case, the `char` property
// holds an emoji character like `\uD83D\uDE0A`.  Because its length
// is 2, the property `which` does not represent an emoji correctly.
// In such a case, we directly return the `char` property instead of
// using `which`.
if(nativeEvent.char&&nativeEvent.char.length>1){return nativeEvent.char;}else if(nativeEvent.which){return String.fromCharCode(nativeEvent.which);}}return null;case TOP_COMPOSITION_END:return useFallbackCompositionData&&!isUsingKoreanIME(nativeEvent)?null:nativeEvent.data;default:return null;}}/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */function extractBeforeInputEvent(topLevelType,targetInst,nativeEvent,nativeEventTarget){var chars=void 0;if(canUseTextInputEvent){chars=getNativeBeforeInputChars(topLevelType,nativeEvent);}else{chars=getFallbackBeforeInputChars(topLevelType,nativeEvent);}// If no characters are being inserted, no BeforeInput event should
// be fired.
if(!chars){return null;}var event=SyntheticInputEvent.getPooled(eventTypes.beforeInput,targetInst,nativeEvent,nativeEventTarget);event.data=chars;accumulateTwoPhaseDispatches(event);return event;}/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */var BeforeInputEventPlugin={eventTypes:eventTypes,extractEvents:function extractEvents(topLevelType,targetInst,nativeEvent,nativeEventTarget){var composition=extractCompositionEvent(topLevelType,targetInst,nativeEvent,nativeEventTarget);var beforeInput=extractBeforeInputEvent(topLevelType,targetInst,nativeEvent,nativeEventTarget);if(composition===null){return beforeInput;}if(beforeInput===null){return composition;}return[composition,beforeInput];}};// Use to restore controlled state after a change event has fired.
var restoreImpl=null;var restoreTarget=null;var restoreQueue=null;function restoreStateOfTarget(target){// We perform this translation at the end of the event loop so that we
// always receive the correct fiber here
var internalInstance=getInstanceFromNode(target);if(!internalInstance){// Unmounted
return;}!(typeof restoreImpl==='function')?invariant(false,'setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.'):void 0;var props=getFiberCurrentPropsFromNode(internalInstance.stateNode);restoreImpl(internalInstance.stateNode,internalInstance.type,props);}function setRestoreImplementation(impl){restoreImpl=impl;}function enqueueStateRestore(target){if(restoreTarget){if(restoreQueue){restoreQueue.push(target);}else{restoreQueue=[target];}}else{restoreTarget=target;}}function needsStateRestore(){return restoreTarget!==null||restoreQueue!==null;}function restoreStateIfNeeded(){if(!restoreTarget){return;}var target=restoreTarget;var queuedTargets=restoreQueue;restoreTarget=null;restoreQueue=null;restoreStateOfTarget(target);if(queuedTargets){for(var i=0;i<queuedTargets.length;i++){restoreStateOfTarget(queuedTargets[i]);}}}// Used as a way to call batchedUpdates when we don't have a reference to
// the renderer. Such as when we're dispatching events or if third party
// libraries need to call batchedUpdates. Eventually, this API will go away when
// everything is batched by default. We'll then have a similar API to opt-out of
// scheduled work and instead do synchronous work.
// Defaults
var _batchedUpdatesImpl=function _batchedUpdatesImpl(fn,bookkeeping){return fn(bookkeeping);};var _interactiveUpdatesImpl=function _interactiveUpdatesImpl(fn,a,b){return fn(a,b);};var _flushInteractiveUpdatesImpl=function _flushInteractiveUpdatesImpl(){};var isBatching=false;function batchedUpdates(fn,bookkeeping){if(isBatching){// If we are currently inside another batch, we need to wait until it
// fully completes before restoring state.
return fn(bookkeeping);}isBatching=true;try{return _batchedUpdatesImpl(fn,bookkeeping);}finally{// Here we wait until all updates have propagated, which is important
// when using controlled components within layers:
// https://github.com/facebook/react/issues/1698
// Then we restore state of any controlled component.
isBatching=false;var controlledComponentsHavePendingUpdates=needsStateRestore();if(controlledComponentsHavePendingUpdates){// If a controlled event was fired, we may need to restore the state of
// the DOM node back to the controlled value. This is necessary when React
// bails out of the update without touching the DOM.
_flushInteractiveUpdatesImpl();restoreStateIfNeeded();}}}function interactiveUpdates(fn,a,b){return _interactiveUpdatesImpl(fn,a,b);}function setBatchingImplementation(batchedUpdatesImpl,interactiveUpdatesImpl,flushInteractiveUpdatesImpl){_batchedUpdatesImpl=batchedUpdatesImpl;_interactiveUpdatesImpl=interactiveUpdatesImpl;_flushInteractiveUpdatesImpl=flushInteractiveUpdatesImpl;}/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */var supportedInputTypes={color:true,date:true,datetime:true,'datetime-local':true,email:true,month:true,number:true,password:true,range:true,search:true,tel:true,text:true,time:true,url:true,week:true};function isTextInputElement(elem){var nodeName=elem&&elem.nodeName&&elem.nodeName.toLowerCase();if(nodeName==='input'){return!!supportedInputTypes[elem.type];}if(nodeName==='textarea'){return true;}return false;}/**
 * HTML nodeType values that represent the type of the node
 */var ELEMENT_NODE=1;var TEXT_NODE=3;var COMMENT_NODE=8;var DOCUMENT_NODE=9;var DOCUMENT_FRAGMENT_NODE=11;/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */function getEventTarget(nativeEvent){// Fallback to nativeEvent.srcElement for IE9
// https://github.com/facebook/react/issues/12506
var target=nativeEvent.target||nativeEvent.srcElement||window;// Normalize SVG <use> element events #4963
if(target.correspondingUseElement){target=target.correspondingUseElement;}// Safari may fire events on text nodes (Node.TEXT_NODE is 3).
// @see http://www.quirksmode.org/js/events_properties.html
return target.nodeType===TEXT_NODE?target.parentNode:target;}/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */function isEventSupported(eventNameSuffix){if(!canUseDOM){return false;}var eventName='on'+eventNameSuffix;var isSupported=eventName in document;if(!isSupported){var element=document.createElement('div');element.setAttribute(eventName,'return;');isSupported=typeof element[eventName]==='function';}return isSupported;}function isCheckable(elem){var type=elem.type;var nodeName=elem.nodeName;return nodeName&&nodeName.toLowerCase()==='input'&&(type==='checkbox'||type==='radio');}function getTracker(node){return node._valueTracker;}function detachTracker(node){node._valueTracker=null;}function getValueFromNode(node){var value='';if(!node){return value;}if(isCheckable(node)){value=node.checked?'true':'false';}else{value=node.value;}return value;}function trackValueOnNode(node){var valueField=isCheckable(node)?'checked':'value';var descriptor=Object.getOwnPropertyDescriptor(node.constructor.prototype,valueField);var currentValue=''+node[valueField];// if someone has already defined a value or Safari, then bail
// and don't track value will cause over reporting of changes,
// but it's better then a hard failure
// (needed for certain tests that spyOn input values and Safari)
if(node.hasOwnProperty(valueField)||typeof descriptor==='undefined'||typeof descriptor.get!=='function'||typeof descriptor.set!=='function'){return;}var _get=descriptor.get,_set=descriptor.set;Object.defineProperty(node,valueField,{configurable:true,get:function get(){return _get.call(this);},set:function set(value){currentValue=''+value;_set.call(this,value);}});// We could've passed this the first time
// but it triggers a bug in IE11 and Edge 14/15.
// Calling defineProperty() again should be equivalent.
// https://github.com/facebook/react/issues/11768
Object.defineProperty(node,valueField,{enumerable:descriptor.enumerable});var tracker={getValue:function getValue(){return currentValue;},setValue:function setValue(value){currentValue=''+value;},stopTracking:function stopTracking(){detachTracker(node);delete node[valueField];}};return tracker;}function track(node){if(getTracker(node)){return;}// TODO: Once it's just Fiber we can move this to node._wrapperState
node._valueTracker=trackValueOnNode(node);}function updateValueIfChanged(node){if(!node){return false;}var tracker=getTracker(node);// if there is no tracker at this point it's unlikely
// that trying again will succeed
if(!tracker){return true;}var lastValue=tracker.getValue();var nextValue=getValueFromNode(node);if(nextValue!==lastValue){tracker.setValue(nextValue);return true;}return false;}var ReactSharedInternals=React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;var BEFORE_SLASH_RE=/^(.*)[\\\/]/;var describeComponentFrame=function describeComponentFrame(name,source,ownerName){var sourceInfo='';if(source){var path=source.fileName;var fileName=path.replace(BEFORE_SLASH_RE,'');{// In DEV, include code for a common special case:
// prefer "folder/index.js" instead of just "index.js".
if(/^index\./.test(fileName)){var match=path.match(BEFORE_SLASH_RE);if(match){var pathBeforeSlash=match[1];if(pathBeforeSlash){var folderName=pathBeforeSlash.replace(BEFORE_SLASH_RE,'');fileName=folderName+'/'+fileName;}}}}sourceInfo=' (at '+fileName+':'+source.lineNumber+')';}else if(ownerName){sourceInfo=' (created by '+ownerName+')';}return'\n    in '+(name||'Unknown')+sourceInfo;};// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol=typeof Symbol==='function'&&Symbol.for;var REACT_ELEMENT_TYPE=hasSymbol?Symbol.for('react.element'):0xeac7;var REACT_PORTAL_TYPE=hasSymbol?Symbol.for('react.portal'):0xeaca;var REACT_FRAGMENT_TYPE=hasSymbol?Symbol.for('react.fragment'):0xeacb;var REACT_STRICT_MODE_TYPE=hasSymbol?Symbol.for('react.strict_mode'):0xeacc;var REACT_PROFILER_TYPE=hasSymbol?Symbol.for('react.profiler'):0xead2;var REACT_PROVIDER_TYPE=hasSymbol?Symbol.for('react.provider'):0xeacd;var REACT_CONTEXT_TYPE=hasSymbol?Symbol.for('react.context'):0xeace;var REACT_CONCURRENT_MODE_TYPE=hasSymbol?Symbol.for('react.concurrent_mode'):0xeacf;var REACT_FORWARD_REF_TYPE=hasSymbol?Symbol.for('react.forward_ref'):0xead0;var REACT_SUSPENSE_TYPE=hasSymbol?Symbol.for('react.suspense'):0xead1;var REACT_MEMO_TYPE=hasSymbol?Symbol.for('react.memo'):0xead3;var REACT_LAZY_TYPE=hasSymbol?Symbol.for('react.lazy'):0xead4;var MAYBE_ITERATOR_SYMBOL=typeof Symbol==='function'&&Symbol.iterator;var FAUX_ITERATOR_SYMBOL='@@iterator';function getIteratorFn(maybeIterable){if(maybeIterable===null||(typeof maybeIterable==='undefined'?'undefined':_typeof(maybeIterable))!=='object'){return null;}var maybeIterator=MAYBE_ITERATOR_SYMBOL&&maybeIterable[MAYBE_ITERATOR_SYMBOL]||maybeIterable[FAUX_ITERATOR_SYMBOL];if(typeof maybeIterator==='function'){return maybeIterator;}return null;}var Pending=0;var Resolved=1;var Rejected=2;function refineResolvedLazyComponent(lazyComponent){return lazyComponent._status===Resolved?lazyComponent._result:null;}function getWrappedName(outerType,innerType,wrapperName){var functionName=innerType.displayName||innerType.name||'';return outerType.displayName||(functionName!==''?wrapperName+'('+functionName+')':wrapperName);}function getComponentName(type){if(type==null){// Host root, text node or just invalid type.
return null;}{if(typeof type.tag==='number'){warningWithoutStack$1(false,'Received an unexpected object in getComponentName(). '+'This is likely a bug in React. Please file an issue.');}}if(typeof type==='function'){return type.displayName||type.name||null;}if(typeof type==='string'){return type;}switch(type){case REACT_CONCURRENT_MODE_TYPE:return'ConcurrentMode';case REACT_FRAGMENT_TYPE:return'Fragment';case REACT_PORTAL_TYPE:return'Portal';case REACT_PROFILER_TYPE:return'Profiler';case REACT_STRICT_MODE_TYPE:return'StrictMode';case REACT_SUSPENSE_TYPE:return'Suspense';}if((typeof type==='undefined'?'undefined':_typeof(type))==='object'){switch(type.$$typeof){case REACT_CONTEXT_TYPE:return'Context.Consumer';case REACT_PROVIDER_TYPE:return'Context.Provider';case REACT_FORWARD_REF_TYPE:return getWrappedName(type,type.render,'ForwardRef');case REACT_MEMO_TYPE:return getComponentName(type.type);case REACT_LAZY_TYPE:{var thenable=type;var resolvedThenable=refineResolvedLazyComponent(thenable);if(resolvedThenable){return getComponentName(resolvedThenable);}}}}return null;}var ReactDebugCurrentFrame=ReactSharedInternals.ReactDebugCurrentFrame;function describeFiber(fiber){switch(fiber.tag){case IndeterminateComponent:case LazyComponent:case FunctionComponent:case ClassComponent:case HostComponent:case Mode:var owner=fiber._debugOwner;var source=fiber._debugSource;var name=getComponentName(fiber.type);var ownerName=null;if(owner){ownerName=getComponentName(owner.type);}return describeComponentFrame(name,source,ownerName);default:return'';}}function getStackByFiberInDevAndProd(workInProgress){var info='';var node=workInProgress;do{info+=describeFiber(node);node=node.return;}while(node);return info;}var current=null;var phase=null;function getCurrentFiberOwnerNameInDevOrNull(){{if(current===null){return null;}var owner=current._debugOwner;if(owner!==null&&typeof owner!=='undefined'){return getComponentName(owner.type);}}return null;}function getCurrentFiberStackInDev(){{if(current===null){return'';}// Safe because if current fiber exists, we are reconciling,
// and it is guaranteed to be the work-in-progress version.
return getStackByFiberInDevAndProd(current);}return'';}function resetCurrentFiber(){{ReactDebugCurrentFrame.getCurrentStack=null;current=null;phase=null;}}function setCurrentFiber(fiber){{ReactDebugCurrentFrame.getCurrentStack=getCurrentFiberStackInDev;current=fiber;phase=null;}}function setCurrentPhase(lifeCyclePhase){{phase=lifeCyclePhase;}}/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */var warning=warningWithoutStack$1;{warning=function warning(condition,format){if(condition){return;}var ReactDebugCurrentFrame=ReactSharedInternals.ReactDebugCurrentFrame;var stack=ReactDebugCurrentFrame.getStackAddendum();// eslint-disable-next-line react-internal/warning-and-invariant-args
for(var _len=arguments.length,args=Array(_len>2?_len-2:0),_key=2;_key<_len;_key++){args[_key-2]=arguments[_key];}warningWithoutStack$1.apply(undefined,[false,format+'%s'].concat(args,[stack]));};}var warning$1=warning;// A reserved attribute.
// It is handled by React separately and shouldn't be written to the DOM.
var RESERVED=0;// A simple string attribute.
// Attributes that aren't in the whitelist are presumed to have this type.
var STRING=1;// A string attribute that accepts booleans in React. In HTML, these are called
// "enumerated" attributes with "true" and "false" as possible values.
// When true, it should be set to a "true" string.
// When false, it should be set to a "false" string.
var BOOLEANISH_STRING=2;// A real boolean attribute.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.
var BOOLEAN=3;// An attribute that can be used as a flag as well as with a value.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.
// For any other value, should be present with that value.
var OVERLOADED_BOOLEAN=4;// An attribute that must be numeric or parse as a numeric.
// When falsy, it should be removed.
var NUMERIC=5;// An attribute that must be positive numeric or parse as a positive numeric.
// When falsy, it should be removed.
var POSITIVE_NUMERIC=6;/* eslint-disable max-len */var ATTRIBUTE_NAME_START_CHAR=':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';/* eslint-enable max-len */var ATTRIBUTE_NAME_CHAR=ATTRIBUTE_NAME_START_CHAR+'\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040';var ROOT_ATTRIBUTE_NAME='data-reactroot';var VALID_ATTRIBUTE_NAME_REGEX=new RegExp('^['+ATTRIBUTE_NAME_START_CHAR+']['+ATTRIBUTE_NAME_CHAR+']*$');var hasOwnProperty=Object.prototype.hasOwnProperty;var illegalAttributeNameCache={};var validatedAttributeNameCache={};function isAttributeNameSafe(attributeName){if(hasOwnProperty.call(validatedAttributeNameCache,attributeName)){return true;}if(hasOwnProperty.call(illegalAttributeNameCache,attributeName)){return false;}if(VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)){validatedAttributeNameCache[attributeName]=true;return true;}illegalAttributeNameCache[attributeName]=true;{warning$1(false,'Invalid attribute name: `%s`',attributeName);}return false;}function shouldIgnoreAttribute(name,propertyInfo,isCustomComponentTag){if(propertyInfo!==null){return propertyInfo.type===RESERVED;}if(isCustomComponentTag){return false;}if(name.length>2&&(name[0]==='o'||name[0]==='O')&&(name[1]==='n'||name[1]==='N')){return true;}return false;}function shouldRemoveAttributeWithWarning(name,value,propertyInfo,isCustomComponentTag){if(propertyInfo!==null&&propertyInfo.type===RESERVED){return false;}switch(typeof value==='undefined'?'undefined':_typeof(value)){case'function':// $FlowIssue symbol is perfectly valid here
case'symbol':// eslint-disable-line
return true;case'boolean':{if(isCustomComponentTag){return false;}if(propertyInfo!==null){return!propertyInfo.acceptsBooleans;}else{var prefix=name.toLowerCase().slice(0,5);return prefix!=='data-'&&prefix!=='aria-';}}default:return false;}}function shouldRemoveAttribute(name,value,propertyInfo,isCustomComponentTag){if(value===null||typeof value==='undefined'){return true;}if(shouldRemoveAttributeWithWarning(name,value,propertyInfo,isCustomComponentTag)){return true;}if(isCustomComponentTag){return false;}if(propertyInfo!==null){switch(propertyInfo.type){case BOOLEAN:return!value;case OVERLOADED_BOOLEAN:return value===false;case NUMERIC:return isNaN(value);case POSITIVE_NUMERIC:return isNaN(value)||value<1;}}return false;}function getPropertyInfo(name){return properties.hasOwnProperty(name)?properties[name]:null;}function PropertyInfoRecord(name,type,mustUseProperty,attributeName,attributeNamespace){this.acceptsBooleans=type===BOOLEANISH_STRING||type===BOOLEAN||type===OVERLOADED_BOOLEAN;this.attributeName=attributeName;this.attributeNamespace=attributeNamespace;this.mustUseProperty=mustUseProperty;this.propertyName=name;this.type=type;}// When adding attributes to this list, be sure to also add them to
// the `possibleStandardNames` module to ensure casing and incorrect
// name warnings.
var properties={};// These props are reserved by React. They shouldn't be written to the DOM.
['children','dangerouslySetInnerHTML',// TODO: This prevents the assignment of defaultValue to regular
// elements (not just inputs). Now that ReactDOMInput assigns to the
// defaultValue property -- do we need this?
'defaultValue','defaultChecked','innerHTML','suppressContentEditableWarning','suppressHydrationWarning','style'].forEach(function(name){properties[name]=new PropertyInfoRecord(name,RESERVED,false,// mustUseProperty
name,// attributeName
null);}// attributeNamespace
);// A few React string attributes have a different name.
// This is a mapping from React prop names to the attribute names.
[['acceptCharset','accept-charset'],['className','class'],['htmlFor','for'],['httpEquiv','http-equiv']].forEach(function(_ref){var name=_ref[0],attributeName=_ref[1];properties[name]=new PropertyInfoRecord(name,STRING,false,// mustUseProperty
attributeName,// attributeName
null);}// attributeNamespace
);// These are "enumerated" HTML attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).
['contentEditable','draggable','spellCheck','value'].forEach(function(name){properties[name]=new PropertyInfoRecord(name,BOOLEANISH_STRING,false,// mustUseProperty
name.toLowerCase(),// attributeName
null);}// attributeNamespace
);// These are "enumerated" SVG attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).
// Since these are SVG attributes, their attribute names are case-sensitive.
['autoReverse','externalResourcesRequired','focusable','preserveAlpha'].forEach(function(name){properties[name]=new PropertyInfoRecord(name,BOOLEANISH_STRING,false,// mustUseProperty
name,// attributeName
null);}// attributeNamespace
);// These are HTML boolean attributes.
['allowFullScreen','async',// Note: there is a special case that prevents it from being written to the DOM
// on the client side because the browsers are inconsistent. Instead we call focus().
'autoFocus','autoPlay','controls','default','defer','disabled','formNoValidate','hidden','loop','noModule','noValidate','open','playsInline','readOnly','required','reversed','scoped','seamless',// Microdata
'itemScope'].forEach(function(name){properties[name]=new PropertyInfoRecord(name,BOOLEAN,false,// mustUseProperty
name.toLowerCase(),// attributeName
null);}// attributeNamespace
);// These are the few React props that we set as DOM properties
// rather than attributes. These are all booleans.
['checked',// Note: `option.selected` is not updated if `select.multiple` is
// disabled with `removeAttribute`. We have special logic for handling this.
'multiple','muted','selected'].forEach(function(name){properties[name]=new PropertyInfoRecord(name,BOOLEAN,true,// mustUseProperty
name,// attributeName
null);}// attributeNamespace
);// These are HTML attributes that are "overloaded booleans": they behave like
// booleans, but can also accept a string value.
['capture','download'].forEach(function(name){properties[name]=new PropertyInfoRecord(name,OVERLOADED_BOOLEAN,false,// mustUseProperty
name,// attributeName
null);}// attributeNamespace
);// These are HTML attributes that must be positive numbers.
['cols','rows','size','span'].forEach(function(name){properties[name]=new PropertyInfoRecord(name,POSITIVE_NUMERIC,false,// mustUseProperty
name,// attributeName
null);}// attributeNamespace
);// These are HTML attributes that must be numbers.
['rowSpan','start'].forEach(function(name){properties[name]=new PropertyInfoRecord(name,NUMERIC,false,// mustUseProperty
name.toLowerCase(),// attributeName
null);}// attributeNamespace
);var CAMELIZE=/[\-\:]([a-z])/g;var capitalize=function capitalize(token){return token[1].toUpperCase();};// This is a list of all SVG attributes that need special casing, namespacing,
// or boolean value assignment. Regular attributes that just accept strings
// and have the same names are omitted, just like in the HTML whitelist.
// Some of these attributes can be hard to find. This list was created by
// scrapping the MDN documentation.
['accent-height','alignment-baseline','arabic-form','baseline-shift','cap-height','clip-path','clip-rule','color-interpolation','color-interpolation-filters','color-profile','color-rendering','dominant-baseline','enable-background','fill-opacity','fill-rule','flood-color','flood-opacity','font-family','font-size','font-size-adjust','font-stretch','font-style','font-variant','font-weight','glyph-name','glyph-orientation-horizontal','glyph-orientation-vertical','horiz-adv-x','horiz-origin-x','image-rendering','letter-spacing','lighting-color','marker-end','marker-mid','marker-start','overline-position','overline-thickness','paint-order','panose-1','pointer-events','rendering-intent','shape-rendering','stop-color','stop-opacity','strikethrough-position','strikethrough-thickness','stroke-dasharray','stroke-dashoffset','stroke-linecap','stroke-linejoin','stroke-miterlimit','stroke-opacity','stroke-width','text-anchor','text-decoration','text-rendering','underline-position','underline-thickness','unicode-bidi','unicode-range','units-per-em','v-alphabetic','v-hanging','v-ideographic','v-mathematical','vector-effect','vert-adv-y','vert-origin-x','vert-origin-y','word-spacing','writing-mode','xmlns:xlink','x-height'].forEach(function(attributeName){var name=attributeName.replace(CAMELIZE,capitalize);properties[name]=new PropertyInfoRecord(name,STRING,false,// mustUseProperty
attributeName,null);}// attributeNamespace
);// String SVG attributes with the xlink namespace.
['xlink:actuate','xlink:arcrole','xlink:href','xlink:role','xlink:show','xlink:title','xlink:type'].forEach(function(attributeName){var name=attributeName.replace(CAMELIZE,capitalize);properties[name]=new PropertyInfoRecord(name,STRING,false,// mustUseProperty
attributeName,'http://www.w3.org/1999/xlink');});// String SVG attributes with the xml namespace.
['xml:base','xml:lang','xml:space'].forEach(function(attributeName){var name=attributeName.replace(CAMELIZE,capitalize);properties[name]=new PropertyInfoRecord(name,STRING,false,// mustUseProperty
attributeName,'http://www.w3.org/XML/1998/namespace');});// Special case: this attribute exists both in HTML and SVG.
// Its "tabindex" attribute name is case-sensitive in SVG so we can't just use
// its React `tabIndex` name, like we do for attributes that exist only in HTML.
properties.tabIndex=new PropertyInfoRecord('tabIndex',STRING,false,// mustUseProperty
'tabindex',// attributeName
null);/**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */function getValueForProperty(node,name,expected,propertyInfo){{if(propertyInfo.mustUseProperty){var propertyName=propertyInfo.propertyName;return node[propertyName];}else{var attributeName=propertyInfo.attributeName;var stringValue=null;if(propertyInfo.type===OVERLOADED_BOOLEAN){if(node.hasAttribute(attributeName)){var value=node.getAttribute(attributeName);if(value===''){return true;}if(shouldRemoveAttribute(name,expected,propertyInfo,false)){return value;}if(value===''+expected){return expected;}return value;}}else if(node.hasAttribute(attributeName)){if(shouldRemoveAttribute(name,expected,propertyInfo,false)){// We had an attribute but shouldn't have had one, so read it
// for the error message.
return node.getAttribute(attributeName);}if(propertyInfo.type===BOOLEAN){// If this was a boolean, it doesn't matter what the value is
// the fact that we have it is the same as the expected.
return expected;}// Even if this property uses a namespace we use getAttribute
// because we assume its namespaced name is the same as our config.
// To use getAttributeNS we need the local name which we don't have
// in our config atm.
stringValue=node.getAttribute(attributeName);}if(shouldRemoveAttribute(name,expected,propertyInfo,false)){return stringValue===null?expected:stringValue;}else if(stringValue===''+expected){return expected;}else{return stringValue;}}}}/**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */function getValueForAttribute(node,name,expected){{if(!isAttributeNameSafe(name)){return;}if(!node.hasAttribute(name)){return expected===undefined?undefined:null;}var value=node.getAttribute(name);if(value===''+expected){return expected;}return value;}}/**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */function setValueForProperty(node,name,value,isCustomComponentTag){var propertyInfo=getPropertyInfo(name);if(shouldIgnoreAttribute(name,propertyInfo,isCustomComponentTag)){return;}if(shouldRemoveAttribute(name,value,propertyInfo,isCustomComponentTag)){value=null;}// If the prop isn't in the special list, treat it as a simple attribute.
if(isCustomComponentTag||propertyInfo===null){if(isAttributeNameSafe(name)){var _attributeName=name;if(value===null){node.removeAttribute(_attributeName);}else{node.setAttribute(_attributeName,''+value);}}return;}var mustUseProperty=propertyInfo.mustUseProperty;if(mustUseProperty){var propertyName=propertyInfo.propertyName;if(value===null){var type=propertyInfo.type;node[propertyName]=type===BOOLEAN?false:'';}else{// Contrary to `setAttribute`, object properties are properly
// `toString`ed by IE8/9.
node[propertyName]=value;}return;}// The rest are treated as attributes with special cases.
var attributeName=propertyInfo.attributeName,attributeNamespace=propertyInfo.attributeNamespace;if(value===null){node.removeAttribute(attributeName);}else{var _type=propertyInfo.type;var attributeValue=void 0;if(_type===BOOLEAN||_type===OVERLOADED_BOOLEAN&&value===true){attributeValue='';}else{// `setAttribute` with objects becomes only `[object]` in IE8/9,
// ('' + value) makes it output the correct toString()-value.
attributeValue=''+value;}if(attributeNamespace){node.setAttributeNS(attributeNamespace,attributeName,attributeValue);}else{node.setAttribute(attributeName,attributeValue);}}}// Flow does not allow string concatenation of most non-string types. To work
// around this limitation, we use an opaque type that can only be obtained by
// passing the value through getToStringValue first.
function toString(value){return''+value;}function getToStringValue(value){switch(typeof value==='undefined'?'undefined':_typeof(value)){case'boolean':case'number':case'object':case'string':case'undefined':return value;default:// function, symbol are assigned as empty strings
return'';}}var ReactDebugCurrentFrame$1=null;var ReactControlledValuePropTypes={checkPropTypes:null};{ReactDebugCurrentFrame$1=ReactSharedInternals.ReactDebugCurrentFrame;var hasReadOnlyValue={button:true,checkbox:true,image:true,hidden:true,radio:true,reset:true,submit:true};var propTypes={value:function value(props,propName,componentName){if(hasReadOnlyValue[props.type]||props.onChange||props.readOnly||props.disabled||props[propName]==null){return null;}return new Error('You provided a `value` prop to a form field without an '+'`onChange` handler. This will render a read-only field. If '+'the field should be mutable use `defaultValue`. Otherwise, '+'set either `onChange` or `readOnly`.');},checked:function checked(props,propName,componentName){if(props.onChange||props.readOnly||props.disabled||props[propName]==null){return null;}return new Error('You provided a `checked` prop to a form field without an '+'`onChange` handler. This will render a read-only field. If '+'the field should be mutable use `defaultChecked`. Otherwise, '+'set either `onChange` or `readOnly`.');}};/**
   * Provide a linked `value` attribute for controlled forms. You should not use
   * this outside of the ReactDOM controlled form components.
   */ReactControlledValuePropTypes.checkPropTypes=function(tagName,props){checkPropTypes(propTypes,props,'prop',tagName,ReactDebugCurrentFrame$1.getStackAddendum);};}var enableUserTimingAPI=true;// Helps identify side effects in begin-phase lifecycle hooks and setState reducers:
var debugRenderPhaseSideEffects=false;// In some cases, StrictMode should also double-render lifecycles.
// This can be confusing for tests though,
// And it can be bad for performance in production.
// This feature flag can be used to control the behavior:
var debugRenderPhaseSideEffectsForStrictMode=true;// To preserve the "Pause on caught exceptions" behavior of the debugger, we
// replay the begin phase of a failed component inside invokeGuardedCallback.
var replayFailedUnitOfWorkWithInvokeGuardedCallback=true;// Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:
var warnAboutDeprecatedLifecycles=false;// Gather advanced timing metrics for Profiler subtrees.
var enableProfilerTimer=true;// Trace which interactions trigger each commit.
var enableSchedulerTracing=true;// Only used in www builds.
// Only used in www builds.
// React Fire: prevent the value and checked attributes from syncing
// with their related DOM properties
var disableInputAttributeSyncing=false;// TODO: direct imports like some-package/src/* are bad. Fix me.
var didWarnValueDefaultValue=false;var didWarnCheckedDefaultChecked=false;var didWarnControlledToUncontrolled=false;var didWarnUncontrolledToControlled=false;function isControlled(props){var usesChecked=props.type==='checkbox'||props.type==='radio';return usesChecked?props.checked!=null:props.value!=null;}/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */function getHostProps(element,props){var node=element;var checked=props.checked;var hostProps=_assign({},props,{defaultChecked:undefined,defaultValue:undefined,value:undefined,checked:checked!=null?checked:node._wrapperState.initialChecked});return hostProps;}function initWrapperState(element,props){{ReactControlledValuePropTypes.checkPropTypes('input',props);if(props.checked!==undefined&&props.defaultChecked!==undefined&&!didWarnCheckedDefaultChecked){warning$1(false,'%s contains an input of type %s with both checked and defaultChecked props. '+'Input elements must be either controlled or uncontrolled '+'(specify either the checked prop, or the defaultChecked prop, but not '+'both). Decide between using a controlled or uncontrolled input '+'element and remove one of these props. More info: '+'https://fb.me/react-controlled-components',getCurrentFiberOwnerNameInDevOrNull()||'A component',props.type);didWarnCheckedDefaultChecked=true;}if(props.value!==undefined&&props.defaultValue!==undefined&&!didWarnValueDefaultValue){warning$1(false,'%s contains an input of type %s with both value and defaultValue props. '+'Input elements must be either controlled or uncontrolled '+'(specify either the value prop, or the defaultValue prop, but not '+'both). Decide between using a controlled or uncontrolled input '+'element and remove one of these props. More info: '+'https://fb.me/react-controlled-components',getCurrentFiberOwnerNameInDevOrNull()||'A component',props.type);didWarnValueDefaultValue=true;}}var node=element;var defaultValue=props.defaultValue==null?'':props.defaultValue;node._wrapperState={initialChecked:props.checked!=null?props.checked:props.defaultChecked,initialValue:getToStringValue(props.value!=null?props.value:defaultValue),controlled:isControlled(props)};}function updateChecked(element,props){var node=element;var checked=props.checked;if(checked!=null){setValueForProperty(node,'checked',checked,false);}}function updateWrapper(element,props){var node=element;{var _controlled=isControlled(props);if(!node._wrapperState.controlled&&_controlled&&!didWarnUncontrolledToControlled){warning$1(false,'A component is changing an uncontrolled input of type %s to be controlled. '+'Input elements should not switch from uncontrolled to controlled (or vice versa). '+'Decide between using a controlled or uncontrolled input '+'element for the lifetime of the component. More info: https://fb.me/react-controlled-components',props.type);didWarnUncontrolledToControlled=true;}if(node._wrapperState.controlled&&!_controlled&&!didWarnControlledToUncontrolled){warning$1(false,'A component is changing a controlled input of type %s to be uncontrolled. '+'Input elements should not switch from controlled to uncontrolled (or vice versa). '+'Decide between using a controlled or uncontrolled input '+'element for the lifetime of the component. More info: https://fb.me/react-controlled-components',props.type);didWarnControlledToUncontrolled=true;}}updateChecked(element,props);var value=getToStringValue(props.value);var type=props.type;if(value!=null){if(type==='number'){if(value===0&&node.value===''||// We explicitly want to coerce to number here if possible.
// eslint-disable-next-line
node.value!=value){node.value=toString(value);}}else if(node.value!==toString(value)){node.value=toString(value);}}else if(type==='submit'||type==='reset'){// Submit/reset inputs need the attribute removed completely to avoid
// blank-text buttons.
node.removeAttribute('value');return;}if(disableInputAttributeSyncing){// When not syncing the value attribute, React only assigns a new value
// whenever the defaultValue React prop has changed. When not present,
// React does nothing
if(props.hasOwnProperty('defaultValue')){setDefaultValue(node,props.type,getToStringValue(props.defaultValue));}}else{// When syncing the value attribute, the value comes from a cascade of
// properties:
//  1. The value React property
//  2. The defaultValue React property
//  3. Otherwise there should be no change
if(props.hasOwnProperty('value')){setDefaultValue(node,props.type,value);}else if(props.hasOwnProperty('defaultValue')){setDefaultValue(node,props.type,getToStringValue(props.defaultValue));}}if(disableInputAttributeSyncing){// When not syncing the checked attribute, the attribute is directly
// controllable from the defaultValue React property. It needs to be
// updated as new props come in.
if(props.defaultChecked==null){node.removeAttribute('checked');}else{node.defaultChecked=!!props.defaultChecked;}}else{// When syncing the checked attribute, it only changes when it needs
// to be removed, such as transitioning from a checkbox into a text input
if(props.checked==null&&props.defaultChecked!=null){node.defaultChecked=!!props.defaultChecked;}}}function postMountWrapper(element,props,isHydrating){var node=element;// Do not assign value if it is already set. This prevents user text input
// from being lost during SSR hydration.
if(props.hasOwnProperty('value')||props.hasOwnProperty('defaultValue')){var type=props.type;var isButton=type==='submit'||type==='reset';// Avoid setting value attribute on submit/reset inputs as it overrides the
// default value provided by the browser. See: #12872
if(isButton&&(props.value===undefined||props.value===null)){return;}var _initialValue=toString(node._wrapperState.initialValue);// Do not assign value if it is already set. This prevents user text input
// from being lost during SSR hydration.
if(!isHydrating){if(disableInputAttributeSyncing){var value=getToStringValue(props.value);// When not syncing the value attribute, the value property points
// directly to the React prop. Only assign it if it exists.
if(value!=null){// Always assign on buttons so that it is possible to assign an
// empty string to clear button text.
//
// Otherwise, do not re-assign the value property if is empty. This
// potentially avoids a DOM write and prevents Firefox (~60.0.1) from
// prematurely marking required inputs as invalid. Equality is compared
// to the current value in case the browser provided value is not an
// empty string.
if(isButton||value!==node.value){node.value=toString(value);}}}else{// When syncing the value attribute, the value property should use
// the wrapperState._initialValue property. This uses:
//
//   1. The value React property when present
//   2. The defaultValue React property when present
//   3. An empty string
if(_initialValue!==node.value){node.value=_initialValue;}}}if(disableInputAttributeSyncing){// When not syncing the value attribute, assign the value attribute
// directly from the defaultValue React property (when present)
var defaultValue=getToStringValue(props.defaultValue);if(defaultValue!=null){node.defaultValue=toString(defaultValue);}}else{// Otherwise, the value attribute is synchronized to the property,
// so we assign defaultValue to the same thing as the value property
// assignment step above.
node.defaultValue=_initialValue;}}// Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
// this is needed to work around a chrome bug where setting defaultChecked
// will sometimes influence the value of checked (even after detachment).
// Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
// We need to temporarily unset name to avoid disrupting radio button groups.
var name=node.name;if(name!==''){node.name='';}if(disableInputAttributeSyncing){// When not syncing the checked attribute, the checked property
// never gets assigned. It must be manually set. We don't want
// to do this when hydrating so that existing user input isn't
// modified
if(!isHydrating){updateChecked(element,props);}// Only assign the checked attribute if it is defined. This saves
// a DOM write when controlling the checked attribute isn't needed
// (text inputs, submit/reset)
if(props.hasOwnProperty('defaultChecked')){node.defaultChecked=!node.defaultChecked;node.defaultChecked=!!props.defaultChecked;}}else{// When syncing the checked attribute, both the checked property and
// attribute are assigned at the same time using defaultChecked. This uses:
//
//   1. The checked React property when present
//   2. The defaultChecked React property when present
//   3. Otherwise, false
node.defaultChecked=!node.defaultChecked;node.defaultChecked=!!node._wrapperState.initialChecked;}if(name!==''){node.name=name;}}function restoreControlledState(element,props){var node=element;updateWrapper(node,props);updateNamedCousins(node,props);}function updateNamedCousins(rootNode,props){var name=props.name;if(props.type==='radio'&&name!=null){var queryRoot=rootNode;while(queryRoot.parentNode){queryRoot=queryRoot.parentNode;}// If `rootNode.form` was non-null, then we could try `form.elements`,
// but that sometimes behaves strangely in IE8. We could also try using
// `form.getElementsByName`, but that will only return direct children
// and won't include inputs that use the HTML5 `form=` attribute. Since
// the input might not even be in a form. It might not even be in the
// document. Let's just use the local `querySelectorAll` to ensure we don't
// miss anything.
var group=queryRoot.querySelectorAll('input[name='+JSON.stringify(''+name)+'][type="radio"]');for(var i=0;i<group.length;i++){var otherNode=group[i];if(otherNode===rootNode||otherNode.form!==rootNode.form){continue;}// This will throw if radio buttons rendered by different copies of React
// and the same name are rendered into the same form (same as #1939).
// That's probably okay; we don't support it just as we don't support
// mixing React radio buttons with non-React ones.
var otherProps=getFiberCurrentPropsFromNode$1(otherNode);!otherProps?invariant(false,'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.'):void 0;// We need update the tracked value on the named cousin since the value
// was changed but the input saw no event or value set
updateValueIfChanged(otherNode);// If this is a controlled radio button group, forcing the input that
// was previously checked to update will cause it to be come re-checked
// as appropriate.
updateWrapper(otherNode,otherProps);}}}// In Chrome, assigning defaultValue to certain input types triggers input validation.
// For number inputs, the display value loses trailing decimal points. For email inputs,
// Chrome raises "The specified value <x> is not a valid email address".
//
// Here we check to see if the defaultValue has actually changed, avoiding these problems
// when the user is inputting text
//
// https://github.com/facebook/react/issues/7253
function setDefaultValue(node,type,value){if(// Focused number inputs synchronize on blur. See ChangeEventPlugin.js
type!=='number'||node.ownerDocument.activeElement!==node){if(value==null){node.defaultValue=toString(node._wrapperState.initialValue);}else if(node.defaultValue!==toString(value)){node.defaultValue=toString(value);}}}var eventTypes$1={change:{phasedRegistrationNames:{bubbled:'onChange',captured:'onChangeCapture'},dependencies:[TOP_BLUR,TOP_CHANGE,TOP_CLICK,TOP_FOCUS,TOP_INPUT,TOP_KEY_DOWN,TOP_KEY_UP,TOP_SELECTION_CHANGE]}};function createAndAccumulateChangeEvent(inst,nativeEvent,target){var event=SyntheticEvent.getPooled(eventTypes$1.change,inst,nativeEvent,target);event.type='change';// Flag this event loop as needing state restore.
enqueueStateRestore(target);accumulateTwoPhaseDispatches(event);return event;}/**
 * For IE shims
 */var activeElement=null;var activeElementInst=null;/**
 * SECTION: handle `change` event
 */function shouldUseChangeEvent(elem){var nodeName=elem.nodeName&&elem.nodeName.toLowerCase();return nodeName==='select'||nodeName==='input'&&elem.type==='file';}function manualDispatchChangeEvent(nativeEvent){var event=createAndAccumulateChangeEvent(activeElementInst,nativeEvent,getEventTarget(nativeEvent));// If change and propertychange bubbled, we'd just bind to it like all the
// other events and have it go through ReactBrowserEventEmitter. Since it
// doesn't, we manually listen for the events and so we have to enqueue and
// process the abstract event manually.
//
// Batching is necessary here in order to ensure that all event handlers run
// before the next rerender (including event handlers attached to ancestor
// elements instead of directly on the input). Without this, controlled
// components don't work properly in conjunction with event bubbling because
// the component is rerendered and the value reverted before all the event
// handlers can run. See https://github.com/facebook/react/issues/708.
batchedUpdates(runEventInBatch,event);}function runEventInBatch(event){runEventsInBatch(event,false);}function getInstIfValueChanged(targetInst){var targetNode=getNodeFromInstance$1(targetInst);if(updateValueIfChanged(targetNode)){return targetInst;}}function getTargetInstForChangeEvent(topLevelType,targetInst){if(topLevelType===TOP_CHANGE){return targetInst;}}/**
 * SECTION: handle `input` event
 */var isInputEventSupported=false;if(canUseDOM){// IE9 claims to support the input event but fails to trigger it when
// deleting text, so we ignore its input events.
isInputEventSupported=isEventSupported('input')&&(!document.documentMode||document.documentMode>9);}/**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */function startWatchingForValueChange(target,targetInst){activeElement=target;activeElementInst=targetInst;activeElement.attachEvent('onpropertychange',handlePropertyChange);}/**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */function stopWatchingForValueChange(){if(!activeElement){return;}activeElement.detachEvent('onpropertychange',handlePropertyChange);activeElement=null;activeElementInst=null;}/**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */function handlePropertyChange(nativeEvent){if(nativeEvent.propertyName!=='value'){return;}if(getInstIfValueChanged(activeElementInst)){manualDispatchChangeEvent(nativeEvent);}}function handleEventsForInputEventPolyfill(topLevelType,target,targetInst){if(topLevelType===TOP_FOCUS){// In IE9, propertychange fires for most input events but is buggy and
// doesn't fire when text is deleted, but conveniently, selectionchange
// appears to fire in all of the remaining cases so we catch those and
// forward the event if the value has changed
// In either case, we don't want to call the event handler if the value
// is changed from JS so we redefine a setter for `.value` that updates
// our activeElementValue variable, allowing us to ignore those changes
//
// stopWatching() should be a noop here but we call it just in case we
// missed a blur event somehow.
stopWatchingForValueChange();startWatchingForValueChange(target,targetInst);}else if(topLevelType===TOP_BLUR){stopWatchingForValueChange();}}// For IE8 and IE9.
function getTargetInstForInputEventPolyfill(topLevelType,targetInst){if(topLevelType===TOP_SELECTION_CHANGE||topLevelType===TOP_KEY_UP||topLevelType===TOP_KEY_DOWN){// On the selectionchange event, the target is just document which isn't
// helpful for us so just check activeElement instead.
//
// 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
// propertychange on the first input event after setting `value` from a
// script and fires only keydown, keypress, keyup. Catching keyup usually
// gets it and catching keydown lets us fire an event for the first
// keystroke if user does a key repeat (it'll be a little delayed: right
// before the second keystroke). Other input methods (e.g., paste) seem to
// fire selectionchange normally.
return getInstIfValueChanged(activeElementInst);}}/**
 * SECTION: handle `click` event
 */function shouldUseClickEvent(elem){// Use the `click` event to detect changes to checkbox and radio inputs.
// This approach works across all browsers, whereas `change` does not fire
// until `blur` in IE8.
var nodeName=elem.nodeName;return nodeName&&nodeName.toLowerCase()==='input'&&(elem.type==='checkbox'||elem.type==='radio');}function getTargetInstForClickEvent(topLevelType,targetInst){if(topLevelType===TOP_CLICK){return getInstIfValueChanged(targetInst);}}function getTargetInstForInputOrChangeEvent(topLevelType,targetInst){if(topLevelType===TOP_INPUT||topLevelType===TOP_CHANGE){return getInstIfValueChanged(targetInst);}}function handleControlledInputBlur(node){var state=node._wrapperState;if(!state||!state.controlled||node.type!=='number'){return;}if(!disableInputAttributeSyncing){// If controlled, assign the value attribute to the current value on blur
setDefaultValue(node,'number',node.value);}}/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */var ChangeEventPlugin={eventTypes:eventTypes$1,_isInputEventSupported:isInputEventSupported,extractEvents:function extractEvents(topLevelType,targetInst,nativeEvent,nativeEventTarget){var targetNode=targetInst?getNodeFromInstance$1(targetInst):window;var getTargetInstFunc=void 0,handleEventFunc=void 0;if(shouldUseChangeEvent(targetNode)){getTargetInstFunc=getTargetInstForChangeEvent;}else if(isTextInputElement(targetNode)){if(isInputEventSupported){getTargetInstFunc=getTargetInstForInputOrChangeEvent;}else{getTargetInstFunc=getTargetInstForInputEventPolyfill;handleEventFunc=handleEventsForInputEventPolyfill;}}else if(shouldUseClickEvent(targetNode)){getTargetInstFunc=getTargetInstForClickEvent;}if(getTargetInstFunc){var inst=getTargetInstFunc(topLevelType,targetInst);if(inst){var event=createAndAccumulateChangeEvent(inst,nativeEvent,nativeEventTarget);return event;}}if(handleEventFunc){handleEventFunc(topLevelType,targetNode,targetInst);}// When blurring, set the value attribute for number inputs
if(topLevelType===TOP_BLUR){handleControlledInputBlur(targetNode);}}};/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */var DOMEventPluginOrder=['ResponderEventPlugin','SimpleEventPlugin','EnterLeaveEventPlugin','ChangeEventPlugin','SelectEventPlugin','BeforeInputEventPlugin'];var SyntheticUIEvent=SyntheticEvent.extend({view:null,detail:null});var modifierKeyToProp={Alt:'altKey',Control:'ctrlKey',Meta:'metaKey',Shift:'shiftKey'};// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */function modifierStateGetter(keyArg){var syntheticEvent=this;var nativeEvent=syntheticEvent.nativeEvent;if(nativeEvent.getModifierState){return nativeEvent.getModifierState(keyArg);}var keyProp=modifierKeyToProp[keyArg];return keyProp?!!nativeEvent[keyProp]:false;}function getEventModifierState(nativeEvent){return modifierStateGetter;}var previousScreenX=0;var previousScreenY=0;// Use flags to signal movementX/Y has already been set
var isMovementXSet=false;var isMovementYSet=false;/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */var SyntheticMouseEvent=SyntheticUIEvent.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:getEventModifierState,button:null,buttons:null,relatedTarget:function relatedTarget(event){return event.relatedTarget||(event.fromElement===event.srcElement?event.toElement:event.fromElement);},movementX:function movementX(event){if('movementX'in event){return event.movementX;}var screenX=previousScreenX;previousScreenX=event.screenX;if(!isMovementXSet){isMovementXSet=true;return 0;}return event.type==='mousemove'?event.screenX-screenX:0;},movementY:function movementY(event){if('movementY'in event){return event.movementY;}var screenY=previousScreenY;previousScreenY=event.screenY;if(!isMovementYSet){isMovementYSet=true;return 0;}return event.type==='mousemove'?event.screenY-screenY:0;}});/**
 * @interface PointerEvent
 * @see http://www.w3.org/TR/pointerevents/
 */var SyntheticPointerEvent=SyntheticMouseEvent.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null});var eventTypes$2={mouseEnter:{registrationName:'onMouseEnter',dependencies:[TOP_MOUSE_OUT,TOP_MOUSE_OVER]},mouseLeave:{registrationName:'onMouseLeave',dependencies:[TOP_MOUSE_OUT,TOP_MOUSE_OVER]},pointerEnter:{registrationName:'onPointerEnter',dependencies:[TOP_POINTER_OUT,TOP_POINTER_OVER]},pointerLeave:{registrationName:'onPointerLeave',dependencies:[TOP_POINTER_OUT,TOP_POINTER_OVER]}};var EnterLeaveEventPlugin={eventTypes:eventTypes$2,/**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */extractEvents:function extractEvents(topLevelType,targetInst,nativeEvent,nativeEventTarget){var isOverEvent=topLevelType===TOP_MOUSE_OVER||topLevelType===TOP_POINTER_OVER;var isOutEvent=topLevelType===TOP_MOUSE_OUT||topLevelType===TOP_POINTER_OUT;if(isOverEvent&&(nativeEvent.relatedTarget||nativeEvent.fromElement)){return null;}if(!isOutEvent&&!isOverEvent){// Must not be a mouse or pointer in or out - ignoring.
return null;}var win=void 0;if(nativeEventTarget.window===nativeEventTarget){// `nativeEventTarget` is probably a window object.
win=nativeEventTarget;}else{// TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
var doc=nativeEventTarget.ownerDocument;if(doc){win=doc.defaultView||doc.parentWindow;}else{win=window;}}var from=void 0;var to=void 0;if(isOutEvent){from=targetInst;var related=nativeEvent.relatedTarget||nativeEvent.toElement;to=related?getClosestInstanceFromNode(related):null;}else{// Moving to a node from outside the window.
from=null;to=targetInst;}if(from===to){// Nothing pertains to our managed components.
return null;}var eventInterface=void 0,leaveEventType=void 0,enterEventType=void 0,eventTypePrefix=void 0;if(topLevelType===TOP_MOUSE_OUT||topLevelType===TOP_MOUSE_OVER){eventInterface=SyntheticMouseEvent;leaveEventType=eventTypes$2.mouseLeave;enterEventType=eventTypes$2.mouseEnter;eventTypePrefix='mouse';}else if(topLevelType===TOP_POINTER_OUT||topLevelType===TOP_POINTER_OVER){eventInterface=SyntheticPointerEvent;leaveEventType=eventTypes$2.pointerLeave;enterEventType=eventTypes$2.pointerEnter;eventTypePrefix='pointer';}var fromNode=from==null?win:getNodeFromInstance$1(from);var toNode=to==null?win:getNodeFromInstance$1(to);var leave=eventInterface.getPooled(leaveEventType,from,nativeEvent,nativeEventTarget);leave.type=eventTypePrefix+'leave';leave.target=fromNode;leave.relatedTarget=toNode;var enter=eventInterface.getPooled(enterEventType,to,nativeEvent,nativeEventTarget);enter.type=eventTypePrefix+'enter';enter.target=toNode;enter.relatedTarget=fromNode;accumulateEnterLeaveDispatches(leave,enter,from,to);return[leave,enter];}};/*eslint-disable no-self-compare */var hasOwnProperty$1=Object.prototype.hasOwnProperty;/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */function is(x,y){// SameValue algorithm
if(x===y){// Steps 1-5, 7-10
// Steps 6.b-6.e: +0 != -0
// Added the nonzero y check to make Flow happy, but it is redundant
return x!==0||y!==0||1/x===1/y;}else{// Step 6.a: NaN == NaN
return x!==x&&y!==y;}}/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */function shallowEqual(objA,objB){if(is(objA,objB)){return true;}if((typeof objA==='undefined'?'undefined':_typeof(objA))!=='object'||objA===null||(typeof objB==='undefined'?'undefined':_typeof(objB))!=='object'||objB===null){return false;}var keysA=Object.keys(objA);var keysB=Object.keys(objB);if(keysA.length!==keysB.length){return false;}// Test for A's keys different from B.
for(var i=0;i<keysA.length;i++){if(!hasOwnProperty$1.call(objB,keysA[i])||!is(objA[keysA[i]],objB[keysA[i]])){return false;}}return true;}/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 *//**
 * This API should be called `delete` but we'd have to make sure to always
 * transform these to strings for IE support. When this transform is fully
 * supported we can rename it.
 */function get(key){return key._reactInternalFiber;}function has(key){return key._reactInternalFiber!==undefined;}function set(key,value){key._reactInternalFiber=value;}// Don't change these two values. They're used by React Dev Tools.
var NoEffect=/*              */0;var PerformedWork=/*         */1;// You can change the rest (and add more).
var Placement=/*             */2;var Update=/*                */4;var PlacementAndUpdate=/*    */6;var Deletion=/*              */8;var ContentReset=/*          */16;var Callback=/*              */32;var DidCapture=/*            */64;var Ref=/*                   */128;var Snapshot=/*              */256;// Update & Callback & Ref & Snapshot
var LifecycleEffectMask=/*   */420;// Union of all host effects
var HostEffectMask=/*        */511;var Incomplete=/*            */512;var ShouldCapture=/*         */1024;var ReactCurrentOwner$1=ReactSharedInternals.ReactCurrentOwner;var MOUNTING=1;var MOUNTED=2;var UNMOUNTED=3;function isFiberMountedImpl(fiber){var node=fiber;if(!fiber.alternate){// If there is no alternate, this might be a new tree that isn't inserted
// yet. If it is, then it will have a pending insertion effect on it.
if((node.effectTag&Placement)!==NoEffect){return MOUNTING;}while(node.return){node=node.return;if((node.effectTag&Placement)!==NoEffect){return MOUNTING;}}}else{while(node.return){node=node.return;}}if(node.tag===HostRoot){// TODO: Check if this was a nested HostRoot when used with
// renderContainerIntoSubtree.
return MOUNTED;}// If we didn't hit the root, that means that we're in an disconnected tree
// that has been unmounted.
return UNMOUNTED;}function isFiberMounted(fiber){return isFiberMountedImpl(fiber)===MOUNTED;}function isMounted(component){{var owner=ReactCurrentOwner$1.current;if(owner!==null&&owner.tag===ClassComponent){var ownerFiber=owner;var instance=ownerFiber.stateNode;!instance._warnedAboutRefsInRender?warningWithoutStack$1(false,'%s is accessing isMounted inside its render() function. '+'render() should be a pure function of props and state. It should '+'never access something that requires stale data from the previous '+'render, such as refs. Move this logic to componentDidMount and '+'componentDidUpdate instead.',getComponentName(ownerFiber.type)||'A component'):void 0;instance._warnedAboutRefsInRender=true;}}var fiber=get(component);if(!fiber){return false;}return isFiberMountedImpl(fiber)===MOUNTED;}function assertIsMounted(fiber){!(isFiberMountedImpl(fiber)===MOUNTED)?invariant(false,'Unable to find node on an unmounted component.'):void 0;}function findCurrentFiberUsingSlowPath(fiber){var alternate=fiber.alternate;if(!alternate){// If there is no alternate, then we only need to check if it is mounted.
var state=isFiberMountedImpl(fiber);!(state!==UNMOUNTED)?invariant(false,'Unable to find node on an unmounted component.'):void 0;if(state===MOUNTING){return null;}return fiber;}// If we have two possible branches, we'll walk backwards up to the root
// to see what path the root points to. On the way we may hit one of the
// special cases and we'll deal with them.
var a=fiber;var b=alternate;while(true){var parentA=a.return;var parentB=parentA?parentA.alternate:null;if(!parentA||!parentB){// We're at the root.
break;}// If both copies of the parent fiber point to the same child, we can
// assume that the child is current. This happens when we bailout on low
// priority: the bailed out fiber's child reuses the current child.
if(parentA.child===parentB.child){var child=parentA.child;while(child){if(child===a){// We've determined that A is the current branch.
assertIsMounted(parentA);return fiber;}if(child===b){// We've determined that B is the current branch.
assertIsMounted(parentA);return alternate;}child=child.sibling;}// We should never have an alternate for any mounting node. So the only
// way this could possibly happen is if this was unmounted, if at all.
invariant(false,'Unable to find node on an unmounted component.');}if(a.return!==b.return){// The return pointer of A and the return pointer of B point to different
// fibers. We assume that return pointers never criss-cross, so A must
// belong to the child set of A.return, and B must belong to the child
// set of B.return.
a=parentA;b=parentB;}else{// The return pointers point to the same fiber. We'll have to use the
// default, slow path: scan the child sets of each parent alternate to see
// which child belongs to which set.
//
// Search parent A's child set
var didFindChild=false;var _child=parentA.child;while(_child){if(_child===a){didFindChild=true;a=parentA;b=parentB;break;}if(_child===b){didFindChild=true;b=parentA;a=parentB;break;}_child=_child.sibling;}if(!didFindChild){// Search parent B's child set
_child=parentB.child;while(_child){if(_child===a){didFindChild=true;a=parentB;b=parentA;break;}if(_child===b){didFindChild=true;b=parentB;a=parentA;break;}_child=_child.sibling;}!didFindChild?invariant(false,'Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.'):void 0;}}!(a.alternate===b)?invariant(false,'Return fibers should always be each others\' alternates. This error is likely caused by a bug in React. Please file an issue.'):void 0;}// If the root is not a host container, we're in a disconnected tree. I.e.
// unmounted.
!(a.tag===HostRoot)?invariant(false,'Unable to find node on an unmounted component.'):void 0;if(a.stateNode.current===a){// We've determined that A is the current branch.
return fiber;}// Otherwise B has to be current branch.
return alternate;}function findCurrentHostFiber(parent){var currentParent=findCurrentFiberUsingSlowPath(parent);if(!currentParent){return null;}// Next we'll drill down this component to find the first HostComponent/Text.
var node=currentParent;while(true){if(node.tag===HostComponent||node.tag===HostText){return node;}else if(node.child){node.child.return=node;node=node.child;continue;}if(node===currentParent){return null;}while(!node.sibling){if(!node.return||node.return===currentParent){return null;}node=node.return;}node.sibling.return=node.return;node=node.sibling;}// Flow needs the return null here, but ESLint complains about it.
// eslint-disable-next-line no-unreachable
return null;}function findCurrentHostFiberWithNoPortals(parent){var currentParent=findCurrentFiberUsingSlowPath(parent);if(!currentParent){return null;}// Next we'll drill down this component to find the first HostComponent/Text.
var node=currentParent;while(true){if(node.tag===HostComponent||node.tag===HostText){return node;}else if(node.child&&node.tag!==HostPortal){node.child.return=node;node=node.child;continue;}if(node===currentParent){return null;}while(!node.sibling){if(!node.return||node.return===currentParent){return null;}node=node.return;}node.sibling.return=node.return;node=node.sibling;}// Flow needs the return null here, but ESLint complains about it.
// eslint-disable-next-line no-unreachable
return null;}function addEventBubbleListener(element,eventType,listener){element.addEventListener(eventType,listener,false);}function addEventCaptureListener(element,eventType,listener){element.addEventListener(eventType,listener,true);}/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */var SyntheticAnimationEvent=SyntheticEvent.extend({animationName:null,elapsedTime:null,pseudoElement:null});/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */var SyntheticClipboardEvent=SyntheticEvent.extend({clipboardData:function clipboardData(event){return'clipboardData'in event?event.clipboardData:window.clipboardData;}});/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */var SyntheticFocusEvent=SyntheticUIEvent.extend({relatedTarget:null});/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */function getEventCharCode(nativeEvent){var charCode=void 0;var keyCode=nativeEvent.keyCode;if('charCode'in nativeEvent){charCode=nativeEvent.charCode;// FF does not set `charCode` for the Enter-key, check against `keyCode`.
if(charCode===0&&keyCode===13){charCode=13;}}else{// IE8 does not implement `charCode`, but `keyCode` has the correct value.
charCode=keyCode;}// IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
// report Enter as charCode 10 when ctrl is pressed.
if(charCode===10){charCode=13;}// Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
// Must not discard the (non-)printable Enter-key.
if(charCode>=32||charCode===13){return charCode;}return 0;}/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */var normalizeKey={Esc:'Escape',Spacebar:' ',Left:'ArrowLeft',Up:'ArrowUp',Right:'ArrowRight',Down:'ArrowDown',Del:'Delete',Win:'OS',Menu:'ContextMenu',Apps:'ContextMenu',Scroll:'ScrollLock',MozPrintableKey:'Unidentified'};/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */var translateToKey={'8':'Backspace','9':'Tab','12':'Clear','13':'Enter','16':'Shift','17':'Control','18':'Alt','19':'Pause','20':'CapsLock','27':'Escape','32':' ','33':'PageUp','34':'PageDown','35':'End','36':'Home','37':'ArrowLeft','38':'ArrowUp','39':'ArrowRight','40':'ArrowDown','45':'Insert','46':'Delete','112':'F1','113':'F2','114':'F3','115':'F4','116':'F5','117':'F6','118':'F7','119':'F8','120':'F9','121':'F10','122':'F11','123':'F12','144':'NumLock','145':'ScrollLock','224':'Meta'};/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */function getEventKey(nativeEvent){if(nativeEvent.key){// Normalize inconsistent values reported by browsers due to
// implementations of a working draft specification.
// FireFox implements `key` but returns `MozPrintableKey` for all
// printable characters (normalized to `Unidentified`), ignore it.
var key=normalizeKey[nativeEvent.key]||nativeEvent.key;if(key!=='Unidentified'){return key;}}// Browser does not implement `key`, polyfill as much of it as we can.
if(nativeEvent.type==='keypress'){var charCode=getEventCharCode(nativeEvent);// The enter-key is technically both printable and non-printable and can
// thus be captured by `keypress`, no other non-printable key should.
return charCode===13?'Enter':String.fromCharCode(charCode);}if(nativeEvent.type==='keydown'||nativeEvent.type==='keyup'){// While user keyboard layout determines the actual meaning of each
// `keyCode` value, almost all function keys have a universal value.
return translateToKey[nativeEvent.keyCode]||'Unidentified';}return'';}/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */var SyntheticKeyboardEvent=SyntheticUIEvent.extend({key:getEventKey,location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:getEventModifierState,// Legacy Interface
charCode:function charCode(event){// `charCode` is the result of a KeyPress event and represents the value of
// the actual printable character.
// KeyPress is deprecated, but its replacement is not yet final and not
// implemented in any major browser. Only KeyPress has charCode.
if(event.type==='keypress'){return getEventCharCode(event);}return 0;},keyCode:function keyCode(event){// `keyCode` is the result of a KeyDown/Up event and represents the value of
// physical keyboard key.
// The actual meaning of the value depends on the users' keyboard layout
// which cannot be detected. Assuming that it is a US keyboard layout
// provides a surprisingly accurate mapping for US and European users.
// Due to this, it is left to the user to implement at this time.
if(event.type==='keydown'||event.type==='keyup'){return event.keyCode;}return 0;},which:function which(event){// `which` is an alias for either `keyCode` or `charCode` depending on the
// type of the event.
if(event.type==='keypress'){return getEventCharCode(event);}if(event.type==='keydown'||event.type==='keyup'){return event.keyCode;}return 0;}});/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */var SyntheticDragEvent=SyntheticMouseEvent.extend({dataTransfer:null});/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */var SyntheticTouchEvent=SyntheticUIEvent.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:getEventModifierState});/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */var SyntheticTransitionEvent=SyntheticEvent.extend({propertyName:null,elapsedTime:null,pseudoElement:null});/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */var SyntheticWheelEvent=SyntheticMouseEvent.extend({deltaX:function deltaX(event){return'deltaX'in event?event.deltaX:// Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
'wheelDeltaX'in event?-event.wheelDeltaX:0;},deltaY:function deltaY(event){return'deltaY'in event?event.deltaY:// Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
'wheelDeltaY'in event?-event.wheelDeltaY:// Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
'wheelDelta'in event?-event.wheelDelta:0;},deltaZ:null,// Browsers without "deltaMode" is reporting in raw wheel delta where one
// notch on the scroll is always +/- 120, roughly equivalent to pixels.
// A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
// ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
deltaMode:null});/**
 * Turns
 * ['abort', ...]
 * into
 * eventTypes = {
 *   'abort': {
 *     phasedRegistrationNames: {
 *       bubbled: 'onAbort',
 *       captured: 'onAbortCapture',
 *     },
 *     dependencies: [TOP_ABORT],
 *   },
 *   ...
 * };
 * topLevelEventsToDispatchConfig = new Map([
 *   [TOP_ABORT, { sameConfig }],
 * ]);
 */var interactiveEventTypeNames=[[TOP_BLUR,'blur'],[TOP_CANCEL,'cancel'],[TOP_CLICK,'click'],[TOP_CLOSE,'close'],[TOP_CONTEXT_MENU,'contextMenu'],[TOP_COPY,'copy'],[TOP_CUT,'cut'],[TOP_AUX_CLICK,'auxClick'],[TOP_DOUBLE_CLICK,'doubleClick'],[TOP_DRAG_END,'dragEnd'],[TOP_DRAG_START,'dragStart'],[TOP_DROP,'drop'],[TOP_FOCUS,'focus'],[TOP_INPUT,'input'],[TOP_INVALID,'invalid'],[TOP_KEY_DOWN,'keyDown'],[TOP_KEY_PRESS,'keyPress'],[TOP_KEY_UP,'keyUp'],[TOP_MOUSE_DOWN,'mouseDown'],[TOP_MOUSE_UP,'mouseUp'],[TOP_PASTE,'paste'],[TOP_PAUSE,'pause'],[TOP_PLAY,'play'],[TOP_POINTER_CANCEL,'pointerCancel'],[TOP_POINTER_DOWN,'pointerDown'],[TOP_POINTER_UP,'pointerUp'],[TOP_RATE_CHANGE,'rateChange'],[TOP_RESET,'reset'],[TOP_SEEKED,'seeked'],[TOP_SUBMIT,'submit'],[TOP_TOUCH_CANCEL,'touchCancel'],[TOP_TOUCH_END,'touchEnd'],[TOP_TOUCH_START,'touchStart'],[TOP_VOLUME_CHANGE,'volumeChange']];var nonInteractiveEventTypeNames=[[TOP_ABORT,'abort'],[TOP_ANIMATION_END,'animationEnd'],[TOP_ANIMATION_ITERATION,'animationIteration'],[TOP_ANIMATION_START,'animationStart'],[TOP_CAN_PLAY,'canPlay'],[TOP_CAN_PLAY_THROUGH,'canPlayThrough'],[TOP_DRAG,'drag'],[TOP_DRAG_ENTER,'dragEnter'],[TOP_DRAG_EXIT,'dragExit'],[TOP_DRAG_LEAVE,'dragLeave'],[TOP_DRAG_OVER,'dragOver'],[TOP_DURATION_CHANGE,'durationChange'],[TOP_EMPTIED,'emptied'],[TOP_ENCRYPTED,'encrypted'],[TOP_ENDED,'ended'],[TOP_ERROR,'error'],[TOP_GOT_POINTER_CAPTURE,'gotPointerCapture'],[TOP_LOAD,'load'],[TOP_LOADED_DATA,'loadedData'],[TOP_LOADED_METADATA,'loadedMetadata'],[TOP_LOAD_START,'loadStart'],[TOP_LOST_POINTER_CAPTURE,'lostPointerCapture'],[TOP_MOUSE_MOVE,'mouseMove'],[TOP_MOUSE_OUT,'mouseOut'],[TOP_MOUSE_OVER,'mouseOver'],[TOP_PLAYING,'playing'],[TOP_POINTER_MOVE,'pointerMove'],[TOP_POINTER_OUT,'pointerOut'],[TOP_POINTER_OVER,'pointerOver'],[TOP_PROGRESS,'progress'],[TOP_SCROLL,'scroll'],[TOP_SEEKING,'seeking'],[TOP_STALLED,'stalled'],[TOP_SUSPEND,'suspend'],[TOP_TIME_UPDATE,'timeUpdate'],[TOP_TOGGLE,'toggle'],[TOP_TOUCH_MOVE,'touchMove'],[TOP_TRANSITION_END,'transitionEnd'],[TOP_WAITING,'waiting'],[TOP_WHEEL,'wheel']];var eventTypes$4={};var topLevelEventsToDispatchConfig={};function addEventTypeNameToConfig(_ref,isInteractive){var topEvent=_ref[0],event=_ref[1];var capitalizedEvent=event[0].toUpperCase()+event.slice(1);var onEvent='on'+capitalizedEvent;var type={phasedRegistrationNames:{bubbled:onEvent,captured:onEvent+'Capture'},dependencies:[topEvent],isInteractive:isInteractive};eventTypes$4[event]=type;topLevelEventsToDispatchConfig[topEvent]=type;}interactiveEventTypeNames.forEach(function(eventTuple){addEventTypeNameToConfig(eventTuple,true);});nonInteractiveEventTypeNames.forEach(function(eventTuple){addEventTypeNameToConfig(eventTuple,false);});// Only used in DEV for exhaustiveness validation.
var knownHTMLTopLevelTypes=[TOP_ABORT,TOP_CANCEL,TOP_CAN_PLAY,TOP_CAN_PLAY_THROUGH,TOP_CLOSE,TOP_DURATION_CHANGE,TOP_EMPTIED,TOP_ENCRYPTED,TOP_ENDED,TOP_ERROR,TOP_INPUT,TOP_INVALID,TOP_LOAD,TOP_LOADED_DATA,TOP_LOADED_METADATA,TOP_LOAD_START,TOP_PAUSE,TOP_PLAY,TOP_PLAYING,TOP_PROGRESS,TOP_RATE_CHANGE,TOP_RESET,TOP_SEEKED,TOP_SEEKING,TOP_STALLED,TOP_SUBMIT,TOP_SUSPEND,TOP_TIME_UPDATE,TOP_TOGGLE,TOP_VOLUME_CHANGE,TOP_WAITING];var SimpleEventPlugin={eventTypes:eventTypes$4,isInteractiveTopLevelEventType:function isInteractiveTopLevelEventType(topLevelType){var config=topLevelEventsToDispatchConfig[topLevelType];return config!==undefined&&config.isInteractive===true;},extractEvents:function extractEvents(topLevelType,targetInst,nativeEvent,nativeEventTarget){var dispatchConfig=topLevelEventsToDispatchConfig[topLevelType];if(!dispatchConfig){return null;}var EventConstructor=void 0;switch(topLevelType){case TOP_KEY_PRESS:// Firefox creates a keypress event for function keys too. This removes
// the unwanted keypress events. Enter is however both printable and
// non-printable. One would expect Tab to be as well (but it isn't).
if(getEventCharCode(nativeEvent)===0){return null;}/* falls through */case TOP_KEY_DOWN:case TOP_KEY_UP:EventConstructor=SyntheticKeyboardEvent;break;case TOP_BLUR:case TOP_FOCUS:EventConstructor=SyntheticFocusEvent;break;case TOP_CLICK:// Firefox creates a click event on right mouse clicks. This removes the
// unwanted click events.
if(nativeEvent.button===2){return null;}/* falls through */case TOP_AUX_CLICK:case TOP_DOUBLE_CLICK:case TOP_MOUSE_DOWN:case TOP_MOUSE_MOVE:case TOP_MOUSE_UP:// TODO: Disabled elements should not respond to mouse events
/* falls through */case TOP_MOUSE_OUT:case TOP_MOUSE_OVER:case TOP_CONTEXT_MENU:EventConstructor=SyntheticMouseEvent;break;case TOP_DRAG:case TOP_DRAG_END:case TOP_DRAG_ENTER:case TOP_DRAG_EXIT:case TOP_DRAG_LEAVE:case TOP_DRAG_OVER:case TOP_DRAG_START:case TOP_DROP:EventConstructor=SyntheticDragEvent;break;case TOP_TOUCH_CANCEL:case TOP_TOUCH_END:case TOP_TOUCH_MOVE:case TOP_TOUCH_START:EventConstructor=SyntheticTouchEvent;break;case TOP_ANIMATION_END:case TOP_ANIMATION_ITERATION:case TOP_ANIMATION_START:EventConstructor=SyntheticAnimationEvent;break;case TOP_TRANSITION_END:EventConstructor=SyntheticTransitionEvent;break;case TOP_SCROLL:EventConstructor=SyntheticUIEvent;break;case TOP_WHEEL:EventConstructor=SyntheticWheelEvent;break;case TOP_COPY:case TOP_CUT:case TOP_PASTE:EventConstructor=SyntheticClipboardEvent;break;case TOP_GOT_POINTER_CAPTURE:case TOP_LOST_POINTER_CAPTURE:case TOP_POINTER_CANCEL:case TOP_POINTER_DOWN:case TOP_POINTER_MOVE:case TOP_POINTER_OUT:case TOP_POINTER_OVER:case TOP_POINTER_UP:EventConstructor=SyntheticPointerEvent;break;default:{if(knownHTMLTopLevelTypes.indexOf(topLevelType)===-1){warningWithoutStack$1(false,'SimpleEventPlugin: Unhandled event type, `%s`. This warning '+'is likely caused by a bug in React. Please file an issue.',topLevelType);}}// HTML Events
// @see http://www.w3.org/TR/html5/index.html#events-0
EventConstructor=SyntheticEvent;break;}var event=EventConstructor.getPooled(dispatchConfig,targetInst,nativeEvent,nativeEventTarget);accumulateTwoPhaseDispatches(event);return event;}};var isInteractiveTopLevelEventType=SimpleEventPlugin.isInteractiveTopLevelEventType;var CALLBACK_BOOKKEEPING_POOL_SIZE=10;var callbackBookkeepingPool=[];/**
 * Find the deepest React component completely containing the root of the
 * passed-in instance (for use when entire React trees are nested within each
 * other). If React trees are not nested, returns null.
 */function findRootContainerNode(inst){// TODO: It may be a good idea to cache this to prevent unnecessary DOM
// traversal, but caching is difficult to do correctly without using a
// mutation observer to listen for all DOM changes.
while(inst.return){inst=inst.return;}if(inst.tag!==HostRoot){// This can happen if we're in a detached tree.
return null;}return inst.stateNode.containerInfo;}// Used to store ancestor hierarchy in top level callback
function getTopLevelCallbackBookKeeping(topLevelType,nativeEvent,targetInst){if(callbackBookkeepingPool.length){var instance=callbackBookkeepingPool.pop();instance.topLevelType=topLevelType;instance.nativeEvent=nativeEvent;instance.targetInst=targetInst;return instance;}return{topLevelType:topLevelType,nativeEvent:nativeEvent,targetInst:targetInst,ancestors:[]};}function releaseTopLevelCallbackBookKeeping(instance){instance.topLevelType=null;instance.nativeEvent=null;instance.targetInst=null;instance.ancestors.length=0;if(callbackBookkeepingPool.length<CALLBACK_BOOKKEEPING_POOL_SIZE){callbackBookkeepingPool.push(instance);}}function handleTopLevel(bookKeeping){var targetInst=bookKeeping.targetInst;// Loop through the hierarchy, in case there's any nested components.
// It's important that we build the array of ancestors before calling any
// event handlers, because event handlers can modify the DOM, leading to
// inconsistencies with ReactMount's node cache. See #1105.
var ancestor=targetInst;do{if(!ancestor){bookKeeping.ancestors.push(ancestor);break;}var root=findRootContainerNode(ancestor);if(!root){break;}bookKeeping.ancestors.push(ancestor);ancestor=getClosestInstanceFromNode(root);}while(ancestor);for(var i=0;i<bookKeeping.ancestors.length;i++){targetInst=bookKeeping.ancestors[i];runExtractedEventsInBatch(bookKeeping.topLevelType,targetInst,bookKeeping.nativeEvent,getEventTarget(bookKeeping.nativeEvent));}}// TODO: can we stop exporting these?
var _enabled=true;function setEnabled(enabled){_enabled=!!enabled;}function isEnabled(){return _enabled;}/**
 * Traps top-level events by using event bubbling.
 *
 * @param {number} topLevelType Number from `TopLevelEventTypes`.
 * @param {object} element Element on which to attach listener.
 * @return {?object} An object with a remove function which will forcefully
 *                  remove the listener.
 * @internal
 */function trapBubbledEvent(topLevelType,element){if(!element){return null;}var dispatch=isInteractiveTopLevelEventType(topLevelType)?dispatchInteractiveEvent:dispatchEvent;addEventBubbleListener(element,getRawEventName(topLevelType),// Check if interactive and wrap in interactiveUpdates
dispatch.bind(null,topLevelType));}/**
 * Traps a top-level event by using event capturing.
 *
 * @param {number} topLevelType Number from `TopLevelEventTypes`.
 * @param {object} element Element on which to attach listener.
 * @return {?object} An object with a remove function which will forcefully
 *                  remove the listener.
 * @internal
 */function trapCapturedEvent(topLevelType,element){if(!element){return null;}var dispatch=isInteractiveTopLevelEventType(topLevelType)?dispatchInteractiveEvent:dispatchEvent;addEventCaptureListener(element,getRawEventName(topLevelType),// Check if interactive and wrap in interactiveUpdates
dispatch.bind(null,topLevelType));}function dispatchInteractiveEvent(topLevelType,nativeEvent){interactiveUpdates(dispatchEvent,topLevelType,nativeEvent);}function dispatchEvent(topLevelType,nativeEvent){if(!_enabled){return;}var nativeEventTarget=getEventTarget(nativeEvent);var targetInst=getClosestInstanceFromNode(nativeEventTarget);if(targetInst!==null&&typeof targetInst.tag==='number'&&!isFiberMounted(targetInst)){// If we get an event (ex: img onload) before committing that
// component's mount, ignore it for now (that is, treat it as if it was an
// event on a non-React tree). We might also consider queueing events and
// dispatching them after the mount.
targetInst=null;}var bookKeeping=getTopLevelCallbackBookKeeping(topLevelType,nativeEvent,targetInst);try{// Event queue being processed in the same cycle allows
// `preventDefault`.
batchedUpdates(handleTopLevel,bookKeeping);}finally{releaseTopLevelCallbackBookKeeping(bookKeeping);}}/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactDOMEventListener, which is injected and can therefore support
 *    pluggable event sources. This is the only work that occurs in the main
 *    thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */var alreadyListeningTo={};var reactTopListenersCounter=0;/**
 * To ensure no conflicts with other potential React instances on the page
 */var topListenersIDKey='_reactListenersID'+(''+Math.random()).slice(2);function getListeningForDocument(mountAt){// In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
// directly.
if(!Object.prototype.hasOwnProperty.call(mountAt,topListenersIDKey)){mountAt[topListenersIDKey]=reactTopListenersCounter++;alreadyListeningTo[mountAt[topListenersIDKey]]={};}return alreadyListeningTo[mountAt[topListenersIDKey]];}/**
 * We listen for bubbled touch events on the document object.
 *
 * Firefox v8.01 (and possibly others) exhibited strange behavior when
 * mounting `onmousemove` events at some node that was not the document
 * element. The symptoms were that if your mouse is not moving over something
 * contained within that mount point (for example on the background) the
 * top-level listeners for `onmousemove` won't be called. However, if you
 * register the `mousemove` on the document object, then it will of course
 * catch all `mousemove`s. This along with iOS quirks, justifies restricting
 * top-level listeners to the document object only, at least for these
 * movement types of events and possibly all events.
 *
 * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
 *
 * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
 * they bubble to document.
 *
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @param {object} mountAt Container where to mount the listener
 */function listenTo(registrationName,mountAt){var isListening=getListeningForDocument(mountAt);var dependencies=registrationNameDependencies[registrationName];for(var i=0;i<dependencies.length;i++){var dependency=dependencies[i];if(!(isListening.hasOwnProperty(dependency)&&isListening[dependency])){switch(dependency){case TOP_SCROLL:trapCapturedEvent(TOP_SCROLL,mountAt);break;case TOP_FOCUS:case TOP_BLUR:trapCapturedEvent(TOP_FOCUS,mountAt);trapCapturedEvent(TOP_BLUR,mountAt);// We set the flag for a single dependency later in this function,
// but this ensures we mark both as attached rather than just one.
isListening[TOP_BLUR]=true;isListening[TOP_FOCUS]=true;break;case TOP_CANCEL:case TOP_CLOSE:if(isEventSupported(getRawEventName(dependency))){trapCapturedEvent(dependency,mountAt);}break;case TOP_INVALID:case TOP_SUBMIT:case TOP_RESET:// We listen to them on the target DOM elements.
// Some of them bubble so we don't want them to fire twice.
break;default:// By default, listen on the top level to all non-media events.
// Media events don't bubble so adding the listener wouldn't do anything.
var isMediaEvent=mediaEventTypes.indexOf(dependency)!==-1;if(!isMediaEvent){trapBubbledEvent(dependency,mountAt);}break;}isListening[dependency]=true;}}}function isListeningToAllDependencies(registrationName,mountAt){var isListening=getListeningForDocument(mountAt);var dependencies=registrationNameDependencies[registrationName];for(var i=0;i<dependencies.length;i++){var dependency=dependencies[i];if(!(isListening.hasOwnProperty(dependency)&&isListening[dependency])){return false;}}return true;}function getActiveElement(doc){doc=doc||(typeof document!=='undefined'?document:undefined);if(typeof doc==='undefined'){return null;}try{return doc.activeElement||doc.body;}catch(e){return doc.body;}}/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */function getLeafNode(node){while(node&&node.firstChild){node=node.firstChild;}return node;}/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */function getSiblingNode(node){while(node){if(node.nextSibling){return node.nextSibling;}node=node.parentNode;}}/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */function getNodeForCharacterOffset(root,offset){var node=getLeafNode(root);var nodeStart=0;var nodeEnd=0;while(node){if(node.nodeType===TEXT_NODE){nodeEnd=nodeStart+node.textContent.length;if(nodeStart<=offset&&nodeEnd>=offset){return{node:node,offset:offset-nodeStart};}nodeStart=nodeEnd;}node=getLeafNode(getSiblingNode(node));}}/**
 * @param {DOMElement} outerNode
 * @return {?object}
 */function getOffsets(outerNode){var ownerDocument=outerNode.ownerDocument;var win=ownerDocument&&ownerDocument.defaultView||window;var selection=win.getSelection&&win.getSelection();if(!selection||selection.rangeCount===0){return null;}var anchorNode=selection.anchorNode,anchorOffset=selection.anchorOffset,focusNode=selection.focusNode,focusOffset=selection.focusOffset;// In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
// up/down buttons on an <input type="number">. Anonymous divs do not seem to
// expose properties, triggering a "Permission denied error" if any of its
// properties are accessed. The only seemingly possible way to avoid erroring
// is to access a property that typically works for non-anonymous divs and
// catch any error that may otherwise arise. See
// https://bugzilla.mozilla.org/show_bug.cgi?id=208427
try{/* eslint-disable no-unused-expressions */anchorNode.nodeType;focusNode.nodeType;/* eslint-enable no-unused-expressions */}catch(e){return null;}return getModernOffsetsFromPoints(outerNode,anchorNode,anchorOffset,focusNode,focusOffset);}/**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */function getModernOffsetsFromPoints(outerNode,anchorNode,anchorOffset,focusNode,focusOffset){var length=0;var start=-1;var end=-1;var indexWithinAnchor=0;var indexWithinFocus=0;var node=outerNode;var parentNode=null;outer:while(true){var next=null;while(true){if(node===anchorNode&&(anchorOffset===0||node.nodeType===TEXT_NODE)){start=length+anchorOffset;}if(node===focusNode&&(focusOffset===0||node.nodeType===TEXT_NODE)){end=length+focusOffset;}if(node.nodeType===TEXT_NODE){length+=node.nodeValue.length;}if((next=node.firstChild)===null){break;}// Moving from `node` to its first child `next`.
parentNode=node;node=next;}while(true){if(node===outerNode){// If `outerNode` has children, this is always the second time visiting
// it. If it has no children, this is still the first loop, and the only
// valid selection is anchorNode and focusNode both equal to this node
// and both offsets 0, in which case we will have handled above.
break outer;}if(parentNode===anchorNode&&++indexWithinAnchor===anchorOffset){start=length;}if(parentNode===focusNode&&++indexWithinFocus===focusOffset){end=length;}if((next=node.nextSibling)!==null){break;}node=parentNode;parentNode=node.parentNode;}// Moving from `node` to its next sibling `next`.
node=next;}if(start===-1||end===-1){// This should never happen. (Would happen if the anchor/focus nodes aren't
// actually inside the passed-in node.)
return null;}return{start:start,end:end};}/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */function setOffsets(node,offsets){var doc=node.ownerDocument||document;var win=doc&&doc.defaultView||window;var selection=win.getSelection();var length=node.textContent.length;var start=Math.min(offsets.start,length);var end=offsets.end===undefined?start:Math.min(offsets.end,length);// IE 11 uses modern selection, but doesn't support the extend method.
// Flip backward selections, so we can set with a single range.
if(!selection.extend&&start>end){var temp=end;end=start;start=temp;}var startMarker=getNodeForCharacterOffset(node,start);var endMarker=getNodeForCharacterOffset(node,end);if(startMarker&&endMarker){if(selection.rangeCount===1&&selection.anchorNode===startMarker.node&&selection.anchorOffset===startMarker.offset&&selection.focusNode===endMarker.node&&selection.focusOffset===endMarker.offset){return;}var range=doc.createRange();range.setStart(startMarker.node,startMarker.offset);selection.removeAllRanges();if(start>end){selection.addRange(range);selection.extend(endMarker.node,endMarker.offset);}else{range.setEnd(endMarker.node,endMarker.offset);selection.addRange(range);}}}function isTextNode(node){return node&&node.nodeType===TEXT_NODE;}function containsNode(outerNode,innerNode){if(!outerNode||!innerNode){return false;}else if(outerNode===innerNode){return true;}else if(isTextNode(outerNode)){return false;}else if(isTextNode(innerNode)){return containsNode(outerNode,innerNode.parentNode);}else if('contains'in outerNode){return outerNode.contains(innerNode);}else if(outerNode.compareDocumentPosition){return!!(outerNode.compareDocumentPosition(innerNode)&16);}else{return false;}}function isInDocument(node){return node&&node.ownerDocument&&containsNode(node.ownerDocument.documentElement,node);}function getActiveElementDeep(){var win=window;var element=getActiveElement();while(element instanceof win.HTMLIFrameElement){// Accessing the contentDocument of a HTMLIframeElement can cause the browser
// to throw, e.g. if it has a cross-origin src attribute
try{win=element.contentDocument.defaultView;}catch(e){return element;}element=getActiveElement(win.document);}return element;}/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 *//**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */function hasSelectionCapabilities(elem){var nodeName=elem&&elem.nodeName&&elem.nodeName.toLowerCase();return nodeName&&(nodeName==='input'&&(elem.type==='text'||elem.type==='search'||elem.type==='tel'||elem.type==='url'||elem.type==='password')||nodeName==='textarea'||elem.contentEditable==='true');}function getSelectionInformation(){var focusedElem=getActiveElementDeep();return{focusedElem:focusedElem,selectionRange:hasSelectionCapabilities(focusedElem)?getSelection$1(focusedElem):null};}/**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */function restoreSelection(priorSelectionInformation){var curFocusedElem=getActiveElementDeep();var priorFocusedElem=priorSelectionInformation.focusedElem;var priorSelectionRange=priorSelectionInformation.selectionRange;if(curFocusedElem!==priorFocusedElem&&isInDocument(priorFocusedElem)){if(priorSelectionRange!==null&&hasSelectionCapabilities(priorFocusedElem)){setSelection(priorFocusedElem,priorSelectionRange);}// Focusing a node can change the scroll position, which is undesirable
var ancestors=[];var ancestor=priorFocusedElem;while(ancestor=ancestor.parentNode){if(ancestor.nodeType===ELEMENT_NODE){ancestors.push({element:ancestor,left:ancestor.scrollLeft,top:ancestor.scrollTop});}}if(typeof priorFocusedElem.focus==='function'){priorFocusedElem.focus();}for(var i=0;i<ancestors.length;i++){var info=ancestors[i];info.element.scrollLeft=info.left;info.element.scrollTop=info.top;}}}/**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */function getSelection$1(input){var selection=void 0;if('selectionStart'in input){// Modern browser with input or textarea.
selection={start:input.selectionStart,end:input.selectionEnd};}else{// Content editable or old IE textarea.
selection=getOffsets(input);}return selection||{start:0,end:0};}/**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */function setSelection(input,offsets){var start=offsets.start,end=offsets.end;if(end===undefined){end=start;}if('selectionStart'in input){input.selectionStart=start;input.selectionEnd=Math.min(end,input.value.length);}else{setOffsets(input,offsets);}}var skipSelectionChangeEvent=canUseDOM&&'documentMode'in document&&document.documentMode<=11;var eventTypes$3={select:{phasedRegistrationNames:{bubbled:'onSelect',captured:'onSelectCapture'},dependencies:[TOP_BLUR,TOP_CONTEXT_MENU,TOP_DRAG_END,TOP_FOCUS,TOP_KEY_DOWN,TOP_KEY_UP,TOP_MOUSE_DOWN,TOP_MOUSE_UP,TOP_SELECTION_CHANGE]}};var activeElement$1=null;var activeElementInst$1=null;var lastSelection=null;var mouseDown=false;/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */function getSelection(node){if('selectionStart'in node&&hasSelectionCapabilities(node)){return{start:node.selectionStart,end:node.selectionEnd};}else{var win=node.ownerDocument&&node.ownerDocument.defaultView||window;var selection=win.getSelection();return{anchorNode:selection.anchorNode,anchorOffset:selection.anchorOffset,focusNode:selection.focusNode,focusOffset:selection.focusOffset};}}/**
 * Get document associated with the event target.
 *
 * @param {object} nativeEventTarget
 * @return {Document}
 */function getEventTargetDocument(eventTarget){return eventTarget.window===eventTarget?eventTarget.document:eventTarget.nodeType===DOCUMENT_NODE?eventTarget:eventTarget.ownerDocument;}/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */function constructSelectEvent(nativeEvent,nativeEventTarget){// Ensure we have the right element, and that the user is not dragging a
// selection (this matches native `select` event behavior). In HTML5, select
// fires only on input and textarea thus if there's no focused element we
// won't dispatch.
var doc=getEventTargetDocument(nativeEventTarget);if(mouseDown||activeElement$1==null||activeElement$1!==getActiveElement(doc)){return null;}// Only fire when selection has actually changed.
var currentSelection=getSelection(activeElement$1);if(!lastSelection||!shallowEqual(lastSelection,currentSelection)){lastSelection=currentSelection;var syntheticEvent=SyntheticEvent.getPooled(eventTypes$3.select,activeElementInst$1,nativeEvent,nativeEventTarget);syntheticEvent.type='select';syntheticEvent.target=activeElement$1;accumulateTwoPhaseDispatches(syntheticEvent);return syntheticEvent;}return null;}/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */var SelectEventPlugin={eventTypes:eventTypes$3,extractEvents:function extractEvents(topLevelType,targetInst,nativeEvent,nativeEventTarget){var doc=getEventTargetDocument(nativeEventTarget);// Track whether all listeners exists for this plugin. If none exist, we do
// not extract events. See #3639.
if(!doc||!isListeningToAllDependencies('onSelect',doc)){return null;}var targetNode=targetInst?getNodeFromInstance$1(targetInst):window;switch(topLevelType){// Track the input node that has focus.
case TOP_FOCUS:if(isTextInputElement(targetNode)||targetNode.contentEditable==='true'){activeElement$1=targetNode;activeElementInst$1=targetInst;lastSelection=null;}break;case TOP_BLUR:activeElement$1=null;activeElementInst$1=null;lastSelection=null;break;// Don't fire the event while the user is dragging. This matches the
// semantics of the native select event.
case TOP_MOUSE_DOWN:mouseDown=true;break;case TOP_CONTEXT_MENU:case TOP_MOUSE_UP:case TOP_DRAG_END:mouseDown=false;return constructSelectEvent(nativeEvent,nativeEventTarget);// Chrome and IE fire non-standard event when selection is changed (and
// sometimes when it hasn't). IE's event fires out of order with respect
// to key and input events on deletion, so we discard it.
//
// Firefox doesn't support selectionchange, so check selection status
// after each key entry. The selection changes after keydown and before
// keyup, but we check on keydown as well in the case of holding down a
// key, when multiple keydown events are fired but only one keyup is.
// This is also our approach for IE handling, for the reason above.
case TOP_SELECTION_CHANGE:if(skipSelectionChangeEvent){break;}// falls through
case TOP_KEY_DOWN:case TOP_KEY_UP:return constructSelectEvent(nativeEvent,nativeEventTarget);}return null;}};/**
 * Inject modules for resolving DOM hierarchy and plugin ordering.
 */injection.injectEventPluginOrder(DOMEventPluginOrder);setComponentTree(getFiberCurrentPropsFromNode$1,getInstanceFromNode$1,getNodeFromInstance$1);/**
 * Some important event plugins included by default (without having to require
 * them).
 */injection.injectEventPluginsByName({SimpleEventPlugin:SimpleEventPlugin,EnterLeaveEventPlugin:EnterLeaveEventPlugin,ChangeEventPlugin:ChangeEventPlugin,SelectEventPlugin:SelectEventPlugin,BeforeInputEventPlugin:BeforeInputEventPlugin});var didWarnSelectedSetOnOption=false;var didWarnInvalidChild=false;function flattenChildren(children){var content='';// Flatten children. We'll warn if they are invalid
// during validateProps() which runs for hydration too.
// Note that this would throw on non-element objects.
// Elements are stringified (which is normally irrelevant
// but matters for <fbt>).
React.Children.forEach(children,function(child){if(child==null){return;}content+=child;// Note: we don't warn about invalid children here.
// Instead, this is done separately below so that
// it happens during the hydration codepath too.
});return content;}/**
 * Implements an <option> host component that warns when `selected` is set.
 */function validateProps(element,props){{// This mirrors the codepath above, but runs for hydration too.
// Warn about invalid children here so that client and hydration are consistent.
// TODO: this seems like it could cause a DEV-only throw for hydration
// if children contains a non-element object. We should try to avoid that.
if(_typeof(props.children)==='object'&&props.children!==null){React.Children.forEach(props.children,function(child){if(child==null){return;}if(typeof child==='string'||typeof child==='number'){return;}if(typeof child.type!=='string'){return;}if(!didWarnInvalidChild){didWarnInvalidChild=true;warning$1(false,'Only strings and numbers are supported as <option> children.');}});}// TODO: Remove support for `selected` in <option>.
if(props.selected!=null&&!didWarnSelectedSetOnOption){warning$1(false,'Use the `defaultValue` or `value` props on <select> instead of '+'setting `selected` on <option>.');didWarnSelectedSetOnOption=true;}}}function postMountWrapper$1(element,props){// value="" should make a value attribute (#6219)
if(props.value!=null){element.setAttribute('value',toString(getToStringValue(props.value)));}}function getHostProps$1(element,props){var hostProps=_assign({children:undefined},props);var content=flattenChildren(props.children);if(content){hostProps.children=content;}return hostProps;}// TODO: direct imports like some-package/src/* are bad. Fix me.
var didWarnValueDefaultValue$1=void 0;{didWarnValueDefaultValue$1=false;}function getDeclarationErrorAddendum(){var ownerName=getCurrentFiberOwnerNameInDevOrNull();if(ownerName){return'\n\nCheck the render method of `'+ownerName+'`.';}return'';}var valuePropNames=['value','defaultValue'];/**
 * Validation function for `value` and `defaultValue`.
 */function checkSelectPropTypes(props){ReactControlledValuePropTypes.checkPropTypes('select',props);for(var i=0;i<valuePropNames.length;i++){var propName=valuePropNames[i];if(props[propName]==null){continue;}var isArray=Array.isArray(props[propName]);if(props.multiple&&!isArray){warning$1(false,'The `%s` prop supplied to <select> must be an array if '+'`multiple` is true.%s',propName,getDeclarationErrorAddendum());}else if(!props.multiple&&isArray){warning$1(false,'The `%s` prop supplied to <select> must be a scalar '+'value if `multiple` is false.%s',propName,getDeclarationErrorAddendum());}}}function updateOptions(node,multiple,propValue,setDefaultSelected){var options=node.options;if(multiple){var selectedValues=propValue;var selectedValue={};for(var i=0;i<selectedValues.length;i++){// Prefix to avoid chaos with special keys.
selectedValue['$'+selectedValues[i]]=true;}for(var _i=0;_i<options.length;_i++){var selected=selectedValue.hasOwnProperty('$'+options[_i].value);if(options[_i].selected!==selected){options[_i].selected=selected;}if(selected&&setDefaultSelected){options[_i].defaultSelected=true;}}}else{// Do not set `select.value` as exact behavior isn't consistent across all
// browsers for all cases.
var _selectedValue=toString(getToStringValue(propValue));var defaultSelected=null;for(var _i2=0;_i2<options.length;_i2++){if(options[_i2].value===_selectedValue){options[_i2].selected=true;if(setDefaultSelected){options[_i2].defaultSelected=true;}return;}if(defaultSelected===null&&!options[_i2].disabled){defaultSelected=options[_i2];}}if(defaultSelected!==null){defaultSelected.selected=true;}}}/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */function getHostProps$2(element,props){return _assign({},props,{value:undefined});}function initWrapperState$1(element,props){var node=element;{checkSelectPropTypes(props);}node._wrapperState={wasMultiple:!!props.multiple};{if(props.value!==undefined&&props.defaultValue!==undefined&&!didWarnValueDefaultValue$1){warning$1(false,'Select elements must be either controlled or uncontrolled '+'(specify either the value prop, or the defaultValue prop, but not '+'both). Decide between using a controlled or uncontrolled select '+'element and remove one of these props. More info: '+'https://fb.me/react-controlled-components');didWarnValueDefaultValue$1=true;}}}function postMountWrapper$2(element,props){var node=element;node.multiple=!!props.multiple;var value=props.value;if(value!=null){updateOptions(node,!!props.multiple,value,false);}else if(props.defaultValue!=null){updateOptions(node,!!props.multiple,props.defaultValue,true);}}function postUpdateWrapper(element,props){var node=element;var wasMultiple=node._wrapperState.wasMultiple;node._wrapperState.wasMultiple=!!props.multiple;var value=props.value;if(value!=null){updateOptions(node,!!props.multiple,value,false);}else if(wasMultiple!==!!props.multiple){// For simplicity, reapply `defaultValue` if `multiple` is toggled.
if(props.defaultValue!=null){updateOptions(node,!!props.multiple,props.defaultValue,true);}else{// Revert the select back to its default unselected state.
updateOptions(node,!!props.multiple,props.multiple?[]:'',false);}}}function restoreControlledState$2(element,props){var node=element;var value=props.value;if(value!=null){updateOptions(node,!!props.multiple,value,false);}}var didWarnValDefaultVal=false;/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */function getHostProps$3(element,props){var node=element;!(props.dangerouslySetInnerHTML==null)?invariant(false,'`dangerouslySetInnerHTML` does not make sense on <textarea>.'):void 0;// Always set children to the same thing. In IE9, the selection range will
// get reset if `textContent` is mutated.  We could add a check in setTextContent
// to only set the value if/when the value differs from the node value (which would
// completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
// solution. The value can be a boolean or object so that's why it's forced
// to be a string.
var hostProps=_assign({},props,{value:undefined,defaultValue:undefined,children:toString(node._wrapperState.initialValue)});return hostProps;}function initWrapperState$2(element,props){var node=element;{ReactControlledValuePropTypes.checkPropTypes('textarea',props);if(props.value!==undefined&&props.defaultValue!==undefined&&!didWarnValDefaultVal){warning$1(false,'%s contains a textarea with both value and defaultValue props. '+'Textarea elements must be either controlled or uncontrolled '+'(specify either the value prop, or the defaultValue prop, but not '+'both). Decide between using a controlled or uncontrolled textarea '+'and remove one of these props. More info: '+'https://fb.me/react-controlled-components',getCurrentFiberOwnerNameInDevOrNull()||'A component');didWarnValDefaultVal=true;}}var initialValue=props.value;// Only bother fetching default value if we're going to use it
if(initialValue==null){var defaultValue=props.defaultValue;// TODO (yungsters): Remove support for children content in <textarea>.
var children=props.children;if(children!=null){{warning$1(false,'Use the `defaultValue` or `value` props instead of setting '+'children on <textarea>.');}!(defaultValue==null)?invariant(false,'If you supply `defaultValue` on a <textarea>, do not pass children.'):void 0;if(Array.isArray(children)){!(children.length<=1)?invariant(false,'<textarea> can only have at most one child.'):void 0;children=children[0];}defaultValue=children;}if(defaultValue==null){defaultValue='';}initialValue=defaultValue;}node._wrapperState={initialValue:getToStringValue(initialValue)};}function updateWrapper$1(element,props){var node=element;var value=getToStringValue(props.value);var defaultValue=getToStringValue(props.defaultValue);if(value!=null){// Cast `value` to a string to ensure the value is set correctly. While
// browsers typically do this as necessary, jsdom doesn't.
var newValue=toString(value);// To avoid side effects (such as losing text selection), only set value if changed
if(newValue!==node.value){node.value=newValue;}if(props.defaultValue==null&&node.defaultValue!==newValue){node.defaultValue=newValue;}}if(defaultValue!=null){node.defaultValue=toString(defaultValue);}}function postMountWrapper$3(element,props){var node=element;// This is in postMount because we need access to the DOM node, which is not
// available until after the component has mounted.
var textContent=node.textContent;// Only set node.value if textContent is equal to the expected
// initial value. In IE10/IE11 there is a bug where the placeholder attribute
// will populate textContent as well.
// https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
if(textContent===node._wrapperState.initialValue){node.value=textContent;}}function restoreControlledState$3(element,props){// DOM component is still mounted; update
updateWrapper$1(element,props);}var HTML_NAMESPACE$1='http://www.w3.org/1999/xhtml';var MATH_NAMESPACE='http://www.w3.org/1998/Math/MathML';var SVG_NAMESPACE='http://www.w3.org/2000/svg';var Namespaces={html:HTML_NAMESPACE$1,mathml:MATH_NAMESPACE,svg:SVG_NAMESPACE};// Assumes there is no parent namespace.
function getIntrinsicNamespace(type){switch(type){case'svg':return SVG_NAMESPACE;case'math':return MATH_NAMESPACE;default:return HTML_NAMESPACE$1;}}function getChildNamespace(parentNamespace,type){if(parentNamespace==null||parentNamespace===HTML_NAMESPACE$1){// No (or default) parent namespace: potential entry point.
return getIntrinsicNamespace(type);}if(parentNamespace===SVG_NAMESPACE&&type==='foreignObject'){// We're leaving SVG.
return HTML_NAMESPACE$1;}// By default, pass namespace below.
return parentNamespace;}/* globals MSApp *//**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */var createMicrosoftUnsafeLocalFunction=function createMicrosoftUnsafeLocalFunction(func){if(typeof MSApp!=='undefined'&&MSApp.execUnsafeLocalFunction){return function(arg0,arg1,arg2,arg3){MSApp.execUnsafeLocalFunction(function(){return func(arg0,arg1,arg2,arg3);});};}else{return func;}};// SVG temp container for IE lacking innerHTML
var reusableSVGContainer=void 0;/**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */var setInnerHTML=createMicrosoftUnsafeLocalFunction(function(node,html){// IE does not have innerHTML for SVG nodes, so instead we inject the
// new markup in a temp node and then move the child nodes across into
// the target node
if(node.namespaceURI===Namespaces.svg&&!('innerHTML'in node)){reusableSVGContainer=reusableSVGContainer||document.createElement('div');reusableSVGContainer.innerHTML='<svg>'+html+'</svg>';var svgNode=reusableSVGContainer.firstChild;while(node.firstChild){node.removeChild(node.firstChild);}while(svgNode.firstChild){node.appendChild(svgNode.firstChild);}}else{node.innerHTML=html;}});/**
 * Set the textContent property of a node. For text updates, it's faster
 * to set the `nodeValue` of the Text node directly instead of using
 * `.textContent` which will remove the existing node and create a new one.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */var setTextContent=function setTextContent(node,text){if(text){var firstChild=node.firstChild;if(firstChild&&firstChild===node.lastChild&&firstChild.nodeType===TEXT_NODE){firstChild.nodeValue=text;return;}}node.textContent=text;};/**
 * CSS properties which accept numbers but are not in units of "px".
 */var isUnitlessNumber={animationIterationCount:true,borderImageOutset:true,borderImageSlice:true,borderImageWidth:true,boxFlex:true,boxFlexGroup:true,boxOrdinalGroup:true,columnCount:true,columns:true,flex:true,flexGrow:true,flexPositive:true,flexShrink:true,flexNegative:true,flexOrder:true,gridArea:true,gridRow:true,gridRowEnd:true,gridRowSpan:true,gridRowStart:true,gridColumn:true,gridColumnEnd:true,gridColumnSpan:true,gridColumnStart:true,fontWeight:true,lineClamp:true,lineHeight:true,opacity:true,order:true,orphans:true,tabSize:true,widows:true,zIndex:true,zoom:true,// SVG-related properties
fillOpacity:true,floodOpacity:true,stopOpacity:true,strokeDasharray:true,strokeDashoffset:true,strokeMiterlimit:true,strokeOpacity:true,strokeWidth:true};/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */function prefixKey(prefix,key){return prefix+key.charAt(0).toUpperCase()+key.substring(1);}/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */var prefixes=['Webkit','ms','Moz','O'];// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function(prop){prefixes.forEach(function(prefix){isUnitlessNumber[prefixKey(prefix,prop)]=isUnitlessNumber[prop];});});/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */function dangerousStyleValue(name,value,isCustomProperty){// Note that we've removed escapeTextForBrowser() calls here since the
// whole string will be escaped when the attribute is injected into
// the markup. If you provide unsafe user data here they can inject
// arbitrary CSS which may be problematic (I couldn't repro this):
// https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
// http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
// This is not an XSS hole but instead a potential CSS injection issue
// which has lead to a greater discussion about how we're going to
// trust URLs moving forward. See #2115901
var isEmpty=value==null||typeof value==='boolean'||value==='';if(isEmpty){return'';}if(!isCustomProperty&&typeof value==='number'&&value!==0&&!(isUnitlessNumber.hasOwnProperty(name)&&isUnitlessNumber[name])){return value+'px';// Presumes implicit 'px' suffix for unitless numbers
}return(''+value).trim();}var uppercasePattern=/([A-Z])/g;var msPattern=/^ms-/;/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 */function hyphenateStyleName(name){return name.replace(uppercasePattern,'-$1').toLowerCase().replace(msPattern,'-ms-');}var warnValidStyle=function warnValidStyle(){};{// 'msTransform' is correct, but the other prefixes should be capitalized
var badVendoredStyleNamePattern=/^(?:webkit|moz|o)[A-Z]/;var msPattern$1=/^-ms-/;var hyphenPattern=/-(.)/g;// style values shouldn't contain a semicolon
var badStyleValueWithSemicolonPattern=/;\s*$/;var warnedStyleNames={};var warnedStyleValues={};var warnedForNaNValue=false;var warnedForInfinityValue=false;var camelize=function camelize(string){return string.replace(hyphenPattern,function(_,character){return character.toUpperCase();});};var warnHyphenatedStyleName=function warnHyphenatedStyleName(name){if(warnedStyleNames.hasOwnProperty(name)&&warnedStyleNames[name]){return;}warnedStyleNames[name]=true;warning$1(false,'Unsupported style property %s. Did you mean %s?',name,// As Andi Smith suggests
// (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
// is converted to lowercase `ms`.
camelize(name.replace(msPattern$1,'ms-')));};var warnBadVendoredStyleName=function warnBadVendoredStyleName(name){if(warnedStyleNames.hasOwnProperty(name)&&warnedStyleNames[name]){return;}warnedStyleNames[name]=true;warning$1(false,'Unsupported vendor-prefixed style property %s. Did you mean %s?',name,name.charAt(0).toUpperCase()+name.slice(1));};var warnStyleValueWithSemicolon=function warnStyleValueWithSemicolon(name,value){if(warnedStyleValues.hasOwnProperty(value)&&warnedStyleValues[value]){return;}warnedStyleValues[value]=true;warning$1(false,"Style property values shouldn't contain a semicolon. "+'Try "%s: %s" instead.',name,value.replace(badStyleValueWithSemicolonPattern,''));};var warnStyleValueIsNaN=function warnStyleValueIsNaN(name,value){if(warnedForNaNValue){return;}warnedForNaNValue=true;warning$1(false,'`NaN` is an invalid value for the `%s` css style property.',name);};var warnStyleValueIsInfinity=function warnStyleValueIsInfinity(name,value){if(warnedForInfinityValue){return;}warnedForInfinityValue=true;warning$1(false,'`Infinity` is an invalid value for the `%s` css style property.',name);};warnValidStyle=function warnValidStyle(name,value){if(name.indexOf('-')>-1){warnHyphenatedStyleName(name);}else if(badVendoredStyleNamePattern.test(name)){warnBadVendoredStyleName(name);}else if(badStyleValueWithSemicolonPattern.test(value)){warnStyleValueWithSemicolon(name,value);}if(typeof value==='number'){if(isNaN(value)){warnStyleValueIsNaN(name,value);}else if(!isFinite(value)){warnStyleValueIsInfinity(name,value);}}};}var warnValidStyle$1=warnValidStyle;/**
 * Operations for dealing with CSS properties.
 *//**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */function createDangerousStringForStyles(styles){{var serialized='';var delimiter='';for(var styleName in styles){if(!styles.hasOwnProperty(styleName)){continue;}var styleValue=styles[styleName];if(styleValue!=null){var isCustomProperty=styleName.indexOf('--')===0;serialized+=delimiter+hyphenateStyleName(styleName)+':';serialized+=dangerousStyleValue(styleName,styleValue,isCustomProperty);delimiter=';';}}return serialized||null;}}/**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */function setValueForStyles(node,styles){var style=node.style;for(var styleName in styles){if(!styles.hasOwnProperty(styleName)){continue;}var isCustomProperty=styleName.indexOf('--')===0;{if(!isCustomProperty){warnValidStyle$1(styleName,styles[styleName]);}}var styleValue=dangerousStyleValue(styleName,styles[styleName],isCustomProperty);if(styleName==='float'){styleName='cssFloat';}if(isCustomProperty){style.setProperty(styleName,styleValue);}else{style[styleName]=styleValue;}}}// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special-case tags.
var omittedCloseTags={area:true,base:true,br:true,col:true,embed:true,hr:true,img:true,input:true,keygen:true,link:true,meta:true,param:true,source:true,track:true,wbr:true// NOTE: menuitem's close tag should be omitted, but that causes problems.
};// For HTML, certain tags cannot have children. This has the same purpose as
// `omittedCloseTags` except that `menuitem` should still have its closing tag.
var voidElementTags=_assign({menuitem:true},omittedCloseTags);// TODO: We can remove this if we add invariantWithStack()
// or add stack by default to invariants where possible.
var HTML$1='__html';var ReactDebugCurrentFrame$2=null;{ReactDebugCurrentFrame$2=ReactSharedInternals.ReactDebugCurrentFrame;}function assertValidProps(tag,props){if(!props){return;}// Note the use of `==` which checks for null or undefined.
if(voidElementTags[tag]){!(props.children==null&&props.dangerouslySetInnerHTML==null)?invariant(false,'%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s',tag,ReactDebugCurrentFrame$2.getStackAddendum()):void 0;}if(props.dangerouslySetInnerHTML!=null){!(props.children==null)?invariant(false,'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'):void 0;!(_typeof(props.dangerouslySetInnerHTML)==='object'&&HTML$1 in props.dangerouslySetInnerHTML)?invariant(false,'`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.'):void 0;}{!(props.suppressContentEditableWarning||!props.contentEditable||props.children==null)?warning$1(false,'A component is `contentEditable` and contains `children` managed by '+'React. It is now your responsibility to guarantee that none of '+'those nodes are unexpectedly modified or duplicated. This is '+'probably not intentional.'):void 0;}!(props.style==null||_typeof(props.style)==='object')?invariant(false,'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s',ReactDebugCurrentFrame$2.getStackAddendum()):void 0;}function isCustomComponent(tagName,props){if(tagName.indexOf('-')===-1){return typeof props.is==='string';}switch(tagName){// These are reserved SVG and MathML elements.
// We don't mind this whitelist too much because we expect it to never grow.
// The alternative is to track the namespace in a few places which is convoluted.
// https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
case'annotation-xml':case'color-profile':case'font-face':case'font-face-src':case'font-face-uri':case'font-face-format':case'font-face-name':case'missing-glyph':return false;default:return true;}}// When adding attributes to the HTML or SVG whitelist, be sure to
// also add them to this module to ensure casing and incorrect name
// warnings.
var possibleStandardNames={// HTML
accept:'accept',acceptcharset:'acceptCharset','accept-charset':'acceptCharset',accesskey:'accessKey',action:'action',allowfullscreen:'allowFullScreen',alt:'alt',as:'as',async:'async',autocapitalize:'autoCapitalize',autocomplete:'autoComplete',autocorrect:'autoCorrect',autofocus:'autoFocus',autoplay:'autoPlay',autosave:'autoSave',capture:'capture',cellpadding:'cellPadding',cellspacing:'cellSpacing',challenge:'challenge',charset:'charSet',checked:'checked',children:'children',cite:'cite',class:'className',classid:'classID',classname:'className',cols:'cols',colspan:'colSpan',content:'content',contenteditable:'contentEditable',contextmenu:'contextMenu',controls:'controls',controlslist:'controlsList',coords:'coords',crossorigin:'crossOrigin',dangerouslysetinnerhtml:'dangerouslySetInnerHTML',data:'data',datetime:'dateTime',default:'default',defaultchecked:'defaultChecked',defaultvalue:'defaultValue',defer:'defer',dir:'dir',disabled:'disabled',download:'download',draggable:'draggable',enctype:'encType',for:'htmlFor',form:'form',formmethod:'formMethod',formaction:'formAction',formenctype:'formEncType',formnovalidate:'formNoValidate',formtarget:'formTarget',frameborder:'frameBorder',headers:'headers',height:'height',hidden:'hidden',high:'high',href:'href',hreflang:'hrefLang',htmlfor:'htmlFor',httpequiv:'httpEquiv','http-equiv':'httpEquiv',icon:'icon',id:'id',innerhtml:'innerHTML',inputmode:'inputMode',integrity:'integrity',is:'is',itemid:'itemID',itemprop:'itemProp',itemref:'itemRef',itemscope:'itemScope',itemtype:'itemType',keyparams:'keyParams',keytype:'keyType',kind:'kind',label:'label',lang:'lang',list:'list',loop:'loop',low:'low',manifest:'manifest',marginwidth:'marginWidth',marginheight:'marginHeight',max:'max',maxlength:'maxLength',media:'media',mediagroup:'mediaGroup',method:'method',min:'min',minlength:'minLength',multiple:'multiple',muted:'muted',name:'name',nomodule:'noModule',nonce:'nonce',novalidate:'noValidate',open:'open',optimum:'optimum',pattern:'pattern',placeholder:'placeholder',playsinline:'playsInline',poster:'poster',preload:'preload',profile:'profile',radiogroup:'radioGroup',readonly:'readOnly',referrerpolicy:'referrerPolicy',rel:'rel',required:'required',reversed:'reversed',role:'role',rows:'rows',rowspan:'rowSpan',sandbox:'sandbox',scope:'scope',scoped:'scoped',scrolling:'scrolling',seamless:'seamless',selected:'selected',shape:'shape',size:'size',sizes:'sizes',span:'span',spellcheck:'spellCheck',src:'src',srcdoc:'srcDoc',srclang:'srcLang',srcset:'srcSet',start:'start',step:'step',style:'style',summary:'summary',tabindex:'tabIndex',target:'target',title:'title',type:'type',usemap:'useMap',value:'value',width:'width',wmode:'wmode',wrap:'wrap',// SVG
about:'about',accentheight:'accentHeight','accent-height':'accentHeight',accumulate:'accumulate',additive:'additive',alignmentbaseline:'alignmentBaseline','alignment-baseline':'alignmentBaseline',allowreorder:'allowReorder',alphabetic:'alphabetic',amplitude:'amplitude',arabicform:'arabicForm','arabic-form':'arabicForm',ascent:'ascent',attributename:'attributeName',attributetype:'attributeType',autoreverse:'autoReverse',azimuth:'azimuth',basefrequency:'baseFrequency',baselineshift:'baselineShift','baseline-shift':'baselineShift',baseprofile:'baseProfile',bbox:'bbox',begin:'begin',bias:'bias',by:'by',calcmode:'calcMode',capheight:'capHeight','cap-height':'capHeight',clip:'clip',clippath:'clipPath','clip-path':'clipPath',clippathunits:'clipPathUnits',cliprule:'clipRule','clip-rule':'clipRule',color:'color',colorinterpolation:'colorInterpolation','color-interpolation':'colorInterpolation',colorinterpolationfilters:'colorInterpolationFilters','color-interpolation-filters':'colorInterpolationFilters',colorprofile:'colorProfile','color-profile':'colorProfile',colorrendering:'colorRendering','color-rendering':'colorRendering',contentscripttype:'contentScriptType',contentstyletype:'contentStyleType',cursor:'cursor',cx:'cx',cy:'cy',d:'d',datatype:'datatype',decelerate:'decelerate',descent:'descent',diffuseconstant:'diffuseConstant',direction:'direction',display:'display',divisor:'divisor',dominantbaseline:'dominantBaseline','dominant-baseline':'dominantBaseline',dur:'dur',dx:'dx',dy:'dy',edgemode:'edgeMode',elevation:'elevation',enablebackground:'enableBackground','enable-background':'enableBackground',end:'end',exponent:'exponent',externalresourcesrequired:'externalResourcesRequired',fill:'fill',fillopacity:'fillOpacity','fill-opacity':'fillOpacity',fillrule:'fillRule','fill-rule':'fillRule',filter:'filter',filterres:'filterRes',filterunits:'filterUnits',floodopacity:'floodOpacity','flood-opacity':'floodOpacity',floodcolor:'floodColor','flood-color':'floodColor',focusable:'focusable',fontfamily:'fontFamily','font-family':'fontFamily',fontsize:'fontSize','font-size':'fontSize',fontsizeadjust:'fontSizeAdjust','font-size-adjust':'fontSizeAdjust',fontstretch:'fontStretch','font-stretch':'fontStretch',fontstyle:'fontStyle','font-style':'fontStyle',fontvariant:'fontVariant','font-variant':'fontVariant',fontweight:'fontWeight','font-weight':'fontWeight',format:'format',from:'from',fx:'fx',fy:'fy',g1:'g1',g2:'g2',glyphname:'glyphName','glyph-name':'glyphName',glyphorientationhorizontal:'glyphOrientationHorizontal','glyph-orientation-horizontal':'glyphOrientationHorizontal',glyphorientationvertical:'glyphOrientationVertical','glyph-orientation-vertical':'glyphOrientationVertical',glyphref:'glyphRef',gradienttransform:'gradientTransform',gradientunits:'gradientUnits',hanging:'hanging',horizadvx:'horizAdvX','horiz-adv-x':'horizAdvX',horizoriginx:'horizOriginX','horiz-origin-x':'horizOriginX',ideographic:'ideographic',imagerendering:'imageRendering','image-rendering':'imageRendering',in2:'in2',in:'in',inlist:'inlist',intercept:'intercept',k1:'k1',k2:'k2',k3:'k3',k4:'k4',k:'k',kernelmatrix:'kernelMatrix',kernelunitlength:'kernelUnitLength',kerning:'kerning',keypoints:'keyPoints',keysplines:'keySplines',keytimes:'keyTimes',lengthadjust:'lengthAdjust',letterspacing:'letterSpacing','letter-spacing':'letterSpacing',lightingcolor:'lightingColor','lighting-color':'lightingColor',limitingconeangle:'limitingConeAngle',local:'local',markerend:'markerEnd','marker-end':'markerEnd',markerheight:'markerHeight',markermid:'markerMid','marker-mid':'markerMid',markerstart:'markerStart','marker-start':'markerStart',markerunits:'markerUnits',markerwidth:'markerWidth',mask:'mask',maskcontentunits:'maskContentUnits',maskunits:'maskUnits',mathematical:'mathematical',mode:'mode',numoctaves:'numOctaves',offset:'offset',opacity:'opacity',operator:'operator',order:'order',orient:'orient',orientation:'orientation',origin:'origin',overflow:'overflow',overlineposition:'overlinePosition','overline-position':'overlinePosition',overlinethickness:'overlineThickness','overline-thickness':'overlineThickness',paintorder:'paintOrder','paint-order':'paintOrder',panose1:'panose1','panose-1':'panose1',pathlength:'pathLength',patterncontentunits:'patternContentUnits',patterntransform:'patternTransform',patternunits:'patternUnits',pointerevents:'pointerEvents','pointer-events':'pointerEvents',points:'points',pointsatx:'pointsAtX',pointsaty:'pointsAtY',pointsatz:'pointsAtZ',prefix:'prefix',preservealpha:'preserveAlpha',preserveaspectratio:'preserveAspectRatio',primitiveunits:'primitiveUnits',property:'property',r:'r',radius:'radius',refx:'refX',refy:'refY',renderingintent:'renderingIntent','rendering-intent':'renderingIntent',repeatcount:'repeatCount',repeatdur:'repeatDur',requiredextensions:'requiredExtensions',requiredfeatures:'requiredFeatures',resource:'resource',restart:'restart',result:'result',results:'results',rotate:'rotate',rx:'rx',ry:'ry',scale:'scale',security:'security',seed:'seed',shaperendering:'shapeRendering','shape-rendering':'shapeRendering',slope:'slope',spacing:'spacing',specularconstant:'specularConstant',specularexponent:'specularExponent',speed:'speed',spreadmethod:'spreadMethod',startoffset:'startOffset',stddeviation:'stdDeviation',stemh:'stemh',stemv:'stemv',stitchtiles:'stitchTiles',stopcolor:'stopColor','stop-color':'stopColor',stopopacity:'stopOpacity','stop-opacity':'stopOpacity',strikethroughposition:'strikethroughPosition','strikethrough-position':'strikethroughPosition',strikethroughthickness:'strikethroughThickness','strikethrough-thickness':'strikethroughThickness',string:'string',stroke:'stroke',strokedasharray:'strokeDasharray','stroke-dasharray':'strokeDasharray',strokedashoffset:'strokeDashoffset','stroke-dashoffset':'strokeDashoffset',strokelinecap:'strokeLinecap','stroke-linecap':'strokeLinecap',strokelinejoin:'strokeLinejoin','stroke-linejoin':'strokeLinejoin',strokemiterlimit:'strokeMiterlimit','stroke-miterlimit':'strokeMiterlimit',strokewidth:'strokeWidth','stroke-width':'strokeWidth',strokeopacity:'strokeOpacity','stroke-opacity':'strokeOpacity',suppresscontenteditablewarning:'suppressContentEditableWarning',suppresshydrationwarning:'suppressHydrationWarning',surfacescale:'surfaceScale',systemlanguage:'systemLanguage',tablevalues:'tableValues',targetx:'targetX',targety:'targetY',textanchor:'textAnchor','text-anchor':'textAnchor',textdecoration:'textDecoration','text-decoration':'textDecoration',textlength:'textLength',textrendering:'textRendering','text-rendering':'textRendering',to:'to',transform:'transform',typeof:'typeof',u1:'u1',u2:'u2',underlineposition:'underlinePosition','underline-position':'underlinePosition',underlinethickness:'underlineThickness','underline-thickness':'underlineThickness',unicode:'unicode',unicodebidi:'unicodeBidi','unicode-bidi':'unicodeBidi',unicoderange:'unicodeRange','unicode-range':'unicodeRange',unitsperem:'unitsPerEm','units-per-em':'unitsPerEm',unselectable:'unselectable',valphabetic:'vAlphabetic','v-alphabetic':'vAlphabetic',values:'values',vectoreffect:'vectorEffect','vector-effect':'vectorEffect',version:'version',vertadvy:'vertAdvY','vert-adv-y':'vertAdvY',vertoriginx:'vertOriginX','vert-origin-x':'vertOriginX',vertoriginy:'vertOriginY','vert-origin-y':'vertOriginY',vhanging:'vHanging','v-hanging':'vHanging',videographic:'vIdeographic','v-ideographic':'vIdeographic',viewbox:'viewBox',viewtarget:'viewTarget',visibility:'visibility',vmathematical:'vMathematical','v-mathematical':'vMathematical',vocab:'vocab',widths:'widths',wordspacing:'wordSpacing','word-spacing':'wordSpacing',writingmode:'writingMode','writing-mode':'writingMode',x1:'x1',x2:'x2',x:'x',xchannelselector:'xChannelSelector',xheight:'xHeight','x-height':'xHeight',xlinkactuate:'xlinkActuate','xlink:actuate':'xlinkActuate',xlinkarcrole:'xlinkArcrole','xlink:arcrole':'xlinkArcrole',xlinkhref:'xlinkHref','xlink:href':'xlinkHref',xlinkrole:'xlinkRole','xlink:role':'xlinkRole',xlinkshow:'xlinkShow','xlink:show':'xlinkShow',xlinktitle:'xlinkTitle','xlink:title':'xlinkTitle',xlinktype:'xlinkType','xlink:type':'xlinkType',xmlbase:'xmlBase','xml:base':'xmlBase',xmllang:'xmlLang','xml:lang':'xmlLang',xmlns:'xmlns','xml:space':'xmlSpace',xmlnsxlink:'xmlnsXlink','xmlns:xlink':'xmlnsXlink',xmlspace:'xmlSpace',y1:'y1',y2:'y2',y:'y',ychannelselector:'yChannelSelector',z:'z',zoomandpan:'zoomAndPan'};var ariaProperties={'aria-current':0,// state
'aria-details':0,'aria-disabled':0,// state
'aria-hidden':0,// state
'aria-invalid':0,// state
'aria-keyshortcuts':0,'aria-label':0,'aria-roledescription':0,// Widget Attributes
'aria-autocomplete':0,'aria-checked':0,'aria-expanded':0,'aria-haspopup':0,'aria-level':0,'aria-modal':0,'aria-multiline':0,'aria-multiselectable':0,'aria-orientation':0,'aria-placeholder':0,'aria-pressed':0,'aria-readonly':0,'aria-required':0,'aria-selected':0,'aria-sort':0,'aria-valuemax':0,'aria-valuemin':0,'aria-valuenow':0,'aria-valuetext':0,// Live Region Attributes
'aria-atomic':0,'aria-busy':0,'aria-live':0,'aria-relevant':0,// Drag-and-Drop Attributes
'aria-dropeffect':0,'aria-grabbed':0,// Relationship Attributes
'aria-activedescendant':0,'aria-colcount':0,'aria-colindex':0,'aria-colspan':0,'aria-controls':0,'aria-describedby':0,'aria-errormessage':0,'aria-flowto':0,'aria-labelledby':0,'aria-owns':0,'aria-posinset':0,'aria-rowcount':0,'aria-rowindex':0,'aria-rowspan':0,'aria-setsize':0};var warnedProperties={};var rARIA=new RegExp('^(aria)-['+ATTRIBUTE_NAME_CHAR+']*$');var rARIACamel=new RegExp('^(aria)[A-Z]['+ATTRIBUTE_NAME_CHAR+']*$');var hasOwnProperty$2=Object.prototype.hasOwnProperty;function validateProperty(tagName,name){if(hasOwnProperty$2.call(warnedProperties,name)&&warnedProperties[name]){return true;}if(rARIACamel.test(name)){var ariaName='aria-'+name.slice(4).toLowerCase();var correctName=ariaProperties.hasOwnProperty(ariaName)?ariaName:null;// If this is an aria-* attribute, but is not listed in the known DOM
// DOM properties, then it is an invalid aria-* attribute.
if(correctName==null){warning$1(false,'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.',name);warnedProperties[name]=true;return true;}// aria-* attributes should be lowercase; suggest the lowercase version.
if(name!==correctName){warning$1(false,'Invalid ARIA attribute `%s`. Did you mean `%s`?',name,correctName);warnedProperties[name]=true;return true;}}if(rARIA.test(name)){var lowerCasedName=name.toLowerCase();var standardName=ariaProperties.hasOwnProperty(lowerCasedName)?lowerCasedName:null;// If this is an aria-* attribute, but is not listed in the known DOM
// DOM properties, then it is an invalid aria-* attribute.
if(standardName==null){warnedProperties[name]=true;return false;}// aria-* attributes should be lowercase; suggest the lowercase version.
if(name!==standardName){warning$1(false,'Unknown ARIA attribute `%s`. Did you mean `%s`?',name,standardName);warnedProperties[name]=true;return true;}}return true;}function warnInvalidARIAProps(type,props){var invalidProps=[];for(var key in props){var isValid=validateProperty(type,key);if(!isValid){invalidProps.push(key);}}var unknownPropString=invalidProps.map(function(prop){return'`'+prop+'`';}).join(', ');if(invalidProps.length===1){warning$1(false,'Invalid aria prop %s on <%s> tag. '+'For details, see https://fb.me/invalid-aria-prop',unknownPropString,type);}else if(invalidProps.length>1){warning$1(false,'Invalid aria props %s on <%s> tag. '+'For details, see https://fb.me/invalid-aria-prop',unknownPropString,type);}}function validateProperties(type,props){if(isCustomComponent(type,props)){return;}warnInvalidARIAProps(type,props);}var didWarnValueNull=false;function validateProperties$1(type,props){if(type!=='input'&&type!=='textarea'&&type!=='select'){return;}if(props!=null&&props.value===null&&!didWarnValueNull){didWarnValueNull=true;if(type==='select'&&props.multiple){warning$1(false,'`value` prop on `%s` should not be null. '+'Consider using an empty array when `multiple` is set to `true` '+'to clear the component or `undefined` for uncontrolled components.',type);}else{warning$1(false,'`value` prop on `%s` should not be null. '+'Consider using an empty string to clear the component or `undefined` '+'for uncontrolled components.',type);}}}var validateProperty$1=function validateProperty$1(){};{var warnedProperties$1={};var _hasOwnProperty=Object.prototype.hasOwnProperty;var EVENT_NAME_REGEX=/^on./;var INVALID_EVENT_NAME_REGEX=/^on[^A-Z]/;var rARIA$1=new RegExp('^(aria)-['+ATTRIBUTE_NAME_CHAR+']*$');var rARIACamel$1=new RegExp('^(aria)[A-Z]['+ATTRIBUTE_NAME_CHAR+']*$');validateProperty$1=function validateProperty$1(tagName,name,value,canUseEventSystem){if(_hasOwnProperty.call(warnedProperties$1,name)&&warnedProperties$1[name]){return true;}var lowerCasedName=name.toLowerCase();if(lowerCasedName==='onfocusin'||lowerCasedName==='onfocusout'){warning$1(false,'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. '+'All React events are normalized to bubble, so onFocusIn and onFocusOut '+'are not needed/supported by React.');warnedProperties$1[name]=true;return true;}// We can't rely on the event system being injected on the server.
if(canUseEventSystem){if(registrationNameModules.hasOwnProperty(name)){return true;}var registrationName=possibleRegistrationNames.hasOwnProperty(lowerCasedName)?possibleRegistrationNames[lowerCasedName]:null;if(registrationName!=null){warning$1(false,'Invalid event handler property `%s`. Did you mean `%s`?',name,registrationName);warnedProperties$1[name]=true;return true;}if(EVENT_NAME_REGEX.test(name)){warning$1(false,'Unknown event handler property `%s`. It will be ignored.',name);warnedProperties$1[name]=true;return true;}}else if(EVENT_NAME_REGEX.test(name)){// If no event plugins have been injected, we are in a server environment.
// So we can't tell if the event name is correct for sure, but we can filter
// out known bad ones like `onclick`. We can't suggest a specific replacement though.
if(INVALID_EVENT_NAME_REGEX.test(name)){warning$1(false,'Invalid event handler property `%s`. '+'React events use the camelCase naming convention, for example `onClick`.',name);}warnedProperties$1[name]=true;return true;}// Let the ARIA attribute hook validate ARIA attributes
if(rARIA$1.test(name)||rARIACamel$1.test(name)){return true;}if(lowerCasedName==='innerhtml'){warning$1(false,'Directly setting property `innerHTML` is not permitted. '+'For more information, lookup documentation on `dangerouslySetInnerHTML`.');warnedProperties$1[name]=true;return true;}if(lowerCasedName==='aria'){warning$1(false,'The `aria` attribute is reserved for future use in React. '+'Pass individual `aria-` attributes instead.');warnedProperties$1[name]=true;return true;}if(lowerCasedName==='is'&&value!==null&&value!==undefined&&typeof value!=='string'){warning$1(false,'Received a `%s` for a string attribute `is`. If this is expected, cast '+'the value to a string.',typeof value==='undefined'?'undefined':_typeof(value));warnedProperties$1[name]=true;return true;}if(typeof value==='number'&&isNaN(value)){warning$1(false,'Received NaN for the `%s` attribute. If this is expected, cast '+'the value to a string.',name);warnedProperties$1[name]=true;return true;}var propertyInfo=getPropertyInfo(name);var isReserved=propertyInfo!==null&&propertyInfo.type===RESERVED;// Known attributes should match the casing specified in the property config.
if(possibleStandardNames.hasOwnProperty(lowerCasedName)){var standardName=possibleStandardNames[lowerCasedName];if(standardName!==name){warning$1(false,'Invalid DOM property `%s`. Did you mean `%s`?',name,standardName);warnedProperties$1[name]=true;return true;}}else if(!isReserved&&name!==lowerCasedName){// Unknown attributes should have lowercase casing since that's how they
// will be cased anyway with server rendering.
warning$1(false,'React does not recognize the `%s` prop on a DOM element. If you '+'intentionally want it to appear in the DOM as a custom '+'attribute, spell it as lowercase `%s` instead. '+'If you accidentally passed it from a parent component, remove '+'it from the DOM element.',name,lowerCasedName);warnedProperties$1[name]=true;return true;}if(typeof value==='boolean'&&shouldRemoveAttributeWithWarning(name,value,propertyInfo,false)){if(value){warning$1(false,'Received `%s` for a non-boolean attribute `%s`.\n\n'+'If you want to write it to the DOM, pass a string instead: '+'%s="%s" or %s={value.toString()}.',value,name,name,value,name);}else{warning$1(false,'Received `%s` for a non-boolean attribute `%s`.\n\n'+'If you want to write it to the DOM, pass a string instead: '+'%s="%s" or %s={value.toString()}.\n\n'+'If you used to conditionally omit it with %s={condition && value}, '+'pass %s={condition ? value : undefined} instead.',value,name,name,value,name,name,name);}warnedProperties$1[name]=true;return true;}// Now that we've validated casing, do not validate
// data types for reserved props
if(isReserved){return true;}// Warn when a known attribute is a bad type
if(shouldRemoveAttributeWithWarning(name,value,propertyInfo,false)){warnedProperties$1[name]=true;return false;}// Warn when passing the strings 'false' or 'true' into a boolean prop
if((value==='false'||value==='true')&&propertyInfo!==null&&propertyInfo.type===BOOLEAN){warning$1(false,'Received the string `%s` for the boolean attribute `%s`. '+'%s '+'Did you mean %s={%s}?',value,name,value==='false'?'The browser will interpret it as a truthy value.':'Although this works, it will not work as expected if you pass the string "false".',name,value);warnedProperties$1[name]=true;return true;}return true;};}var warnUnknownProperties=function warnUnknownProperties(type,props,canUseEventSystem){var unknownProps=[];for(var key in props){var isValid=validateProperty$1(type,key,props[key],canUseEventSystem);if(!isValid){unknownProps.push(key);}}var unknownPropString=unknownProps.map(function(prop){return'`'+prop+'`';}).join(', ');if(unknownProps.length===1){warning$1(false,'Invalid value for prop %s on <%s> tag. Either remove it from the element, '+'or pass a string or number value to keep it in the DOM. '+'For details, see https://fb.me/react-attribute-behavior',unknownPropString,type);}else if(unknownProps.length>1){warning$1(false,'Invalid values for props %s on <%s> tag. Either remove them from the element, '+'or pass a string or number value to keep them in the DOM. '+'For details, see https://fb.me/react-attribute-behavior',unknownPropString,type);}};function validateProperties$2(type,props,canUseEventSystem){if(isCustomComponent(type,props)){return;}warnUnknownProperties(type,props,canUseEventSystem);}// TODO: direct imports like some-package/src/* are bad. Fix me.
var didWarnInvalidHydration=false;var didWarnShadyDOM=false;var DANGEROUSLY_SET_INNER_HTML='dangerouslySetInnerHTML';var SUPPRESS_CONTENT_EDITABLE_WARNING='suppressContentEditableWarning';var SUPPRESS_HYDRATION_WARNING$1='suppressHydrationWarning';var AUTOFOCUS='autoFocus';var CHILDREN='children';var STYLE$1='style';var HTML='__html';var HTML_NAMESPACE=Namespaces.html;var warnedUnknownTags=void 0;var suppressHydrationWarning=void 0;var validatePropertiesInDevelopment=void 0;var warnForTextDifference=void 0;var warnForPropDifference=void 0;var warnForExtraAttributes=void 0;var warnForInvalidEventListener=void 0;var canDiffStyleForHydrationWarning=void 0;var normalizeMarkupForTextOrAttribute=void 0;var normalizeHTML=void 0;{warnedUnknownTags={// Chrome is the only major browser not shipping <time>. But as of July
// 2017 it intends to ship it due to widespread usage. We intentionally
// *don't* warn for <time> even if it's unrecognized by Chrome because
// it soon will be, and many apps have been using it anyway.
time:true,// There are working polyfills for <dialog>. Let people use it.
dialog:true,// Electron ships a custom <webview> tag to display external web content in
// an isolated frame and process.
// This tag is not present in non Electron environments such as JSDom which
// is often used for testing purposes.
// @see https://electronjs.org/docs/api/webview-tag
webview:true};validatePropertiesInDevelopment=function validatePropertiesInDevelopment(type,props){validateProperties(type,props);validateProperties$1(type,props);validateProperties$2(type,props,/* canUseEventSystem */true);};// IE 11 parses & normalizes the style attribute as opposed to other
// browsers. It adds spaces and sorts the properties in some
// non-alphabetical order. Handling that would require sorting CSS
// properties in the client & server versions or applying
// `expectedStyle` to a temporary DOM node to read its `style` attribute
// normalized. Since it only affects IE, we're skipping style warnings
// in that browser completely in favor of doing all that work.
// See https://github.com/facebook/react/issues/11807
canDiffStyleForHydrationWarning=canUseDOM&&!document.documentMode;// HTML parsing normalizes CR and CRLF to LF.
// It also can turn \u0000 into \uFFFD inside attributes.
// https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
// If we have a mismatch, it might be caused by that.
// We will still patch up in this case but not fire the warning.
var NORMALIZE_NEWLINES_REGEX=/\r\n?/g;var NORMALIZE_NULL_AND_REPLACEMENT_REGEX=/\u0000|\uFFFD/g;normalizeMarkupForTextOrAttribute=function normalizeMarkupForTextOrAttribute(markup){var markupString=typeof markup==='string'?markup:''+markup;return markupString.replace(NORMALIZE_NEWLINES_REGEX,'\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX,'');};warnForTextDifference=function warnForTextDifference(serverText,clientText){if(didWarnInvalidHydration){return;}var normalizedClientText=normalizeMarkupForTextOrAttribute(clientText);var normalizedServerText=normalizeMarkupForTextOrAttribute(serverText);if(normalizedServerText===normalizedClientText){return;}didWarnInvalidHydration=true;warningWithoutStack$1(false,'Text content did not match. Server: "%s" Client: "%s"',normalizedServerText,normalizedClientText);};warnForPropDifference=function warnForPropDifference(propName,serverValue,clientValue){if(didWarnInvalidHydration){return;}var normalizedClientValue=normalizeMarkupForTextOrAttribute(clientValue);var normalizedServerValue=normalizeMarkupForTextOrAttribute(serverValue);if(normalizedServerValue===normalizedClientValue){return;}didWarnInvalidHydration=true;warningWithoutStack$1(false,'Prop `%s` did not match. Server: %s Client: %s',propName,JSON.stringify(normalizedServerValue),JSON.stringify(normalizedClientValue));};warnForExtraAttributes=function warnForExtraAttributes(attributeNames){if(didWarnInvalidHydration){return;}didWarnInvalidHydration=true;var names=[];attributeNames.forEach(function(name){names.push(name);});warningWithoutStack$1(false,'Extra attributes from the server: %s',names);};warnForInvalidEventListener=function warnForInvalidEventListener(registrationName,listener){if(listener===false){warning$1(false,'Expected `%s` listener to be a function, instead got `false`.\n\n'+'If you used to conditionally omit it with %s={condition && value}, '+'pass %s={condition ? value : undefined} instead.',registrationName,registrationName,registrationName);}else{warning$1(false,'Expected `%s` listener to be a function, instead got a value of `%s` type.',registrationName,typeof listener==='undefined'?'undefined':_typeof(listener));}};// Parse the HTML and read it back to normalize the HTML string so that it
// can be used for comparison.
normalizeHTML=function normalizeHTML(parent,html){// We could have created a separate document here to avoid
// re-initializing custom elements if they exist. But this breaks
// how <noscript> is being handled. So we use the same document.
// See the discussion in https://github.com/facebook/react/pull/11157.
var testElement=parent.namespaceURI===HTML_NAMESPACE?parent.ownerDocument.createElement(parent.tagName):parent.ownerDocument.createElementNS(parent.namespaceURI,parent.tagName);testElement.innerHTML=html;return testElement.innerHTML;};}function ensureListeningTo(rootContainerElement,registrationName){var isDocumentOrFragment=rootContainerElement.nodeType===DOCUMENT_NODE||rootContainerElement.nodeType===DOCUMENT_FRAGMENT_NODE;var doc=isDocumentOrFragment?rootContainerElement:rootContainerElement.ownerDocument;listenTo(registrationName,doc);}function getOwnerDocumentFromRootContainer(rootContainerElement){return rootContainerElement.nodeType===DOCUMENT_NODE?rootContainerElement:rootContainerElement.ownerDocument;}function noop(){}function trapClickOnNonInteractiveElement(node){// Mobile Safari does not fire properly bubble click events on
// non-interactive elements, which means delegated click listeners do not
// fire. The workaround for this bug involves attaching an empty click
// listener on the target node.
// http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
// Just set it using the onclick property so that we don't have to manage any
// bookkeeping for it. Not sure if we need to clear it when the listener is
// removed.
// TODO: Only do this for the relevant Safaris maybe?
node.onclick=noop;}function setInitialDOMProperties(tag,domElement,rootContainerElement,nextProps,isCustomComponentTag){for(var propKey in nextProps){if(!nextProps.hasOwnProperty(propKey)){continue;}var nextProp=nextProps[propKey];if(propKey===STYLE$1){{if(nextProp){// Freeze the next style object so that we can assume it won't be
// mutated. We have already warned for this in the past.
Object.freeze(nextProp);}}// Relies on `updateStylesByID` not mutating `styleUpdates`.
setValueForStyles(domElement,nextProp);}else if(propKey===DANGEROUSLY_SET_INNER_HTML){var nextHtml=nextProp?nextProp[HTML]:undefined;if(nextHtml!=null){setInnerHTML(domElement,nextHtml);}}else if(propKey===CHILDREN){if(typeof nextProp==='string'){// Avoid setting initial textContent when the text is empty. In IE11 setting
// textContent on a <textarea> will cause the placeholder to not
// show within the <textarea> until it has been focused and blurred again.
// https://github.com/facebook/react/issues/6731#issuecomment-254874553
var canSetTextContent=tag!=='textarea'||nextProp!=='';if(canSetTextContent){setTextContent(domElement,nextProp);}}else if(typeof nextProp==='number'){setTextContent(domElement,''+nextProp);}}else if(propKey===SUPPRESS_CONTENT_EDITABLE_WARNING||propKey===SUPPRESS_HYDRATION_WARNING$1){// Noop
}else if(propKey===AUTOFOCUS){// We polyfill it separately on the client during commit.
// We could have excluded it in the property list instead of
// adding a special case here, but then it wouldn't be emitted
// on server rendering (but we *do* want to emit it in SSR).
}else if(registrationNameModules.hasOwnProperty(propKey)){if(nextProp!=null){if(true&&typeof nextProp!=='function'){warnForInvalidEventListener(propKey,nextProp);}ensureListeningTo(rootContainerElement,propKey);}}else if(nextProp!=null){setValueForProperty(domElement,propKey,nextProp,isCustomComponentTag);}}}function updateDOMProperties(domElement,updatePayload,wasCustomComponentTag,isCustomComponentTag){// TODO: Handle wasCustomComponentTag
for(var i=0;i<updatePayload.length;i+=2){var propKey=updatePayload[i];var propValue=updatePayload[i+1];if(propKey===STYLE$1){setValueForStyles(domElement,propValue);}else if(propKey===DANGEROUSLY_SET_INNER_HTML){setInnerHTML(domElement,propValue);}else if(propKey===CHILDREN){setTextContent(domElement,propValue);}else{setValueForProperty(domElement,propKey,propValue,isCustomComponentTag);}}}function createElement(type,props,rootContainerElement,parentNamespace){var isCustomComponentTag=void 0;// We create tags in the namespace of their parent container, except HTML
// tags get no namespace.
var ownerDocument=getOwnerDocumentFromRootContainer(rootContainerElement);var domElement=void 0;var namespaceURI=parentNamespace;if(namespaceURI===HTML_NAMESPACE){namespaceURI=getIntrinsicNamespace(type);}if(namespaceURI===HTML_NAMESPACE){{isCustomComponentTag=isCustomComponent(type,props);// Should this check be gated by parent namespace? Not sure we want to
// allow <SVG> or <mATH>.
!(isCustomComponentTag||type===type.toLowerCase())?warning$1(false,'<%s /> is using incorrect casing. '+'Use PascalCase for React components, '+'or lowercase for HTML elements.',type):void 0;}if(type==='script'){// Create the script via .innerHTML so its "parser-inserted" flag is
// set to true and it does not execute
var div=ownerDocument.createElement('div');div.innerHTML='<script><'+'/script>';// eslint-disable-line
// This is guaranteed to yield a script element.
var firstChild=div.firstChild;domElement=div.removeChild(firstChild);}else if(typeof props.is==='string'){// $FlowIssue `createElement` should be updated for Web Components
domElement=ownerDocument.createElement(type,{is:props.is});}else{// Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
// See discussion in https://github.com/facebook/react/pull/6896
// and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
domElement=ownerDocument.createElement(type);// Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple`
// attribute on `select`s needs to be added before `option`s are inserted. This prevents
// a bug where the `select` does not scroll to the correct option because singular
// `select` elements automatically pick the first item.
// See https://github.com/facebook/react/issues/13222
if(type==='select'&&props.multiple){var node=domElement;node.multiple=true;}}}else{domElement=ownerDocument.createElementNS(namespaceURI,type);}{if(namespaceURI===HTML_NAMESPACE){if(!isCustomComponentTag&&Object.prototype.toString.call(domElement)==='[object HTMLUnknownElement]'&&!Object.prototype.hasOwnProperty.call(warnedUnknownTags,type)){warnedUnknownTags[type]=true;warning$1(false,'The tag <%s> is unrecognized in this browser. '+'If you meant to render a React component, start its name with '+'an uppercase letter.',type);}}}return domElement;}function createTextNode(text,rootContainerElement){return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);}function setInitialProperties(domElement,tag,rawProps,rootContainerElement){var isCustomComponentTag=isCustomComponent(tag,rawProps);{validatePropertiesInDevelopment(tag,rawProps);if(isCustomComponentTag&&!didWarnShadyDOM&&domElement.shadyRoot){warning$1(false,'%s is using shady DOM. Using shady DOM with React can '+'cause things to break subtly.',getCurrentFiberOwnerNameInDevOrNull()||'A component');didWarnShadyDOM=true;}}// TODO: Make sure that we check isMounted before firing any of these events.
var props=void 0;switch(tag){case'iframe':case'object':trapBubbledEvent(TOP_LOAD,domElement);props=rawProps;break;case'video':case'audio':// Create listener for each media event
for(var i=0;i<mediaEventTypes.length;i++){trapBubbledEvent(mediaEventTypes[i],domElement);}props=rawProps;break;case'source':trapBubbledEvent(TOP_ERROR,domElement);props=rawProps;break;case'img':case'image':case'link':trapBubbledEvent(TOP_ERROR,domElement);trapBubbledEvent(TOP_LOAD,domElement);props=rawProps;break;case'form':trapBubbledEvent(TOP_RESET,domElement);trapBubbledEvent(TOP_SUBMIT,domElement);props=rawProps;break;case'details':trapBubbledEvent(TOP_TOGGLE,domElement);props=rawProps;break;case'input':initWrapperState(domElement,rawProps);props=getHostProps(domElement,rawProps);trapBubbledEvent(TOP_INVALID,domElement);// For controlled components we always need to ensure we're listening
// to onChange. Even if there is no listener.
ensureListeningTo(rootContainerElement,'onChange');break;case'option':validateProps(domElement,rawProps);props=getHostProps$1(domElement,rawProps);break;case'select':initWrapperState$1(domElement,rawProps);props=getHostProps$2(domElement,rawProps);trapBubbledEvent(TOP_INVALID,domElement);// For controlled components we always need to ensure we're listening
// to onChange. Even if there is no listener.
ensureListeningTo(rootContainerElement,'onChange');break;case'textarea':initWrapperState$2(domElement,rawProps);props=getHostProps$3(domElement,rawProps);trapBubbledEvent(TOP_INVALID,domElement);// For controlled components we always need to ensure we're listening
// to onChange. Even if there is no listener.
ensureListeningTo(rootContainerElement,'onChange');break;default:props=rawProps;}assertValidProps(tag,props);setInitialDOMProperties(tag,domElement,rootContainerElement,props,isCustomComponentTag);switch(tag){case'input':// TODO: Make sure we check if this is still unmounted or do any clean
// up necessary since we never stop tracking anymore.
track(domElement);postMountWrapper(domElement,rawProps,false);break;case'textarea':// TODO: Make sure we check if this is still unmounted or do any clean
// up necessary since we never stop tracking anymore.
track(domElement);postMountWrapper$3(domElement,rawProps);break;case'option':postMountWrapper$1(domElement,rawProps);break;case'select':postMountWrapper$2(domElement,rawProps);break;default:if(typeof props.onClick==='function'){// TODO: This cast may not be sound for SVG, MathML or custom elements.
trapClickOnNonInteractiveElement(domElement);}break;}}// Calculate the diff between the two objects.
function diffProperties(domElement,tag,lastRawProps,nextRawProps,rootContainerElement){{validatePropertiesInDevelopment(tag,nextRawProps);}var updatePayload=null;var lastProps=void 0;var nextProps=void 0;switch(tag){case'input':lastProps=getHostProps(domElement,lastRawProps);nextProps=getHostProps(domElement,nextRawProps);updatePayload=[];break;case'option':lastProps=getHostProps$1(domElement,lastRawProps);nextProps=getHostProps$1(domElement,nextRawProps);updatePayload=[];break;case'select':lastProps=getHostProps$2(domElement,lastRawProps);nextProps=getHostProps$2(domElement,nextRawProps);updatePayload=[];break;case'textarea':lastProps=getHostProps$3(domElement,lastRawProps);nextProps=getHostProps$3(domElement,nextRawProps);updatePayload=[];break;default:lastProps=lastRawProps;nextProps=nextRawProps;if(typeof lastProps.onClick!=='function'&&typeof nextProps.onClick==='function'){// TODO: This cast may not be sound for SVG, MathML or custom elements.
trapClickOnNonInteractiveElement(domElement);}break;}assertValidProps(tag,nextProps);var propKey=void 0;var styleName=void 0;var styleUpdates=null;for(propKey in lastProps){if(nextProps.hasOwnProperty(propKey)||!lastProps.hasOwnProperty(propKey)||lastProps[propKey]==null){continue;}if(propKey===STYLE$1){var lastStyle=lastProps[propKey];for(styleName in lastStyle){if(lastStyle.hasOwnProperty(styleName)){if(!styleUpdates){styleUpdates={};}styleUpdates[styleName]='';}}}else if(propKey===DANGEROUSLY_SET_INNER_HTML||propKey===CHILDREN){// Noop. This is handled by the clear text mechanism.
}else if(propKey===SUPPRESS_CONTENT_EDITABLE_WARNING||propKey===SUPPRESS_HYDRATION_WARNING$1){// Noop
}else if(propKey===AUTOFOCUS){// Noop. It doesn't work on updates anyway.
}else if(registrationNameModules.hasOwnProperty(propKey)){// This is a special case. If any listener updates we need to ensure
// that the "current" fiber pointer gets updated so we need a commit
// to update this element.
if(!updatePayload){updatePayload=[];}}else{// For all other deleted properties we add it to the queue. We use
// the whitelist in the commit phase instead.
(updatePayload=updatePayload||[]).push(propKey,null);}}for(propKey in nextProps){var nextProp=nextProps[propKey];var lastProp=lastProps!=null?lastProps[propKey]:undefined;if(!nextProps.hasOwnProperty(propKey)||nextProp===lastProp||nextProp==null&&lastProp==null){continue;}if(propKey===STYLE$1){{if(nextProp){// Freeze the next style object so that we can assume it won't be
// mutated. We have already warned for this in the past.
Object.freeze(nextProp);}}if(lastProp){// Unset styles on `lastProp` but not on `nextProp`.
for(styleName in lastProp){if(lastProp.hasOwnProperty(styleName)&&(!nextProp||!nextProp.hasOwnProperty(styleName))){if(!styleUpdates){styleUpdates={};}styleUpdates[styleName]='';}}// Update styles that changed since `lastProp`.
for(styleName in nextProp){if(nextProp.hasOwnProperty(styleName)&&lastProp[styleName]!==nextProp[styleName]){if(!styleUpdates){styleUpdates={};}styleUpdates[styleName]=nextProp[styleName];}}}else{// Relies on `updateStylesByID` not mutating `styleUpdates`.
if(!styleUpdates){if(!updatePayload){updatePayload=[];}updatePayload.push(propKey,styleUpdates);}styleUpdates=nextProp;}}else if(propKey===DANGEROUSLY_SET_INNER_HTML){var nextHtml=nextProp?nextProp[HTML]:undefined;var lastHtml=lastProp?lastProp[HTML]:undefined;if(nextHtml!=null){if(lastHtml!==nextHtml){(updatePayload=updatePayload||[]).push(propKey,''+nextHtml);}}else{// TODO: It might be too late to clear this if we have children
// inserted already.
}}else if(propKey===CHILDREN){if(lastProp!==nextProp&&(typeof nextProp==='string'||typeof nextProp==='number')){(updatePayload=updatePayload||[]).push(propKey,''+nextProp);}}else if(propKey===SUPPRESS_CONTENT_EDITABLE_WARNING||propKey===SUPPRESS_HYDRATION_WARNING$1){// Noop
}else if(registrationNameModules.hasOwnProperty(propKey)){if(nextProp!=null){// We eagerly listen to this even though we haven't committed yet.
if(true&&typeof nextProp!=='function'){warnForInvalidEventListener(propKey,nextProp);}ensureListeningTo(rootContainerElement,propKey);}if(!updatePayload&&lastProp!==nextProp){// This is a special case. If any listener updates we need to ensure
// that the "current" props pointer gets updated so we need a commit
// to update this element.
updatePayload=[];}}else{// For any other property we always add it to the queue and then we
// filter it out using the whitelist during the commit.
(updatePayload=updatePayload||[]).push(propKey,nextProp);}}if(styleUpdates){(updatePayload=updatePayload||[]).push(STYLE$1,styleUpdates);}return updatePayload;}// Apply the diff.
function updateProperties(domElement,updatePayload,tag,lastRawProps,nextRawProps){// Update checked *before* name.
// In the middle of an update, it is possible to have multiple checked.
// When a checked radio tries to change name, browser makes another radio's checked false.
if(tag==='input'&&nextRawProps.type==='radio'&&nextRawProps.name!=null){updateChecked(domElement,nextRawProps);}var wasCustomComponentTag=isCustomComponent(tag,lastRawProps);var isCustomComponentTag=isCustomComponent(tag,nextRawProps);// Apply the diff.
updateDOMProperties(domElement,updatePayload,wasCustomComponentTag,isCustomComponentTag);// TODO: Ensure that an update gets scheduled if any of the special props
// changed.
switch(tag){case'input':// Update the wrapper around inputs *after* updating props. This has to
// happen after `updateDOMProperties`. Otherwise HTML5 input validations
// raise warnings and prevent the new value from being assigned.
updateWrapper(domElement,nextRawProps);break;case'textarea':updateWrapper$1(domElement,nextRawProps);break;case'select':// <select> value update needs to occur after <option> children
// reconciliation
postUpdateWrapper(domElement,nextRawProps);break;}}function getPossibleStandardName(propName){{var lowerCasedName=propName.toLowerCase();if(!possibleStandardNames.hasOwnProperty(lowerCasedName)){return null;}return possibleStandardNames[lowerCasedName]||null;}return null;}function diffHydratedProperties(domElement,tag,rawProps,parentNamespace,rootContainerElement){var isCustomComponentTag=void 0;var extraAttributeNames=void 0;{suppressHydrationWarning=rawProps[SUPPRESS_HYDRATION_WARNING$1]===true;isCustomComponentTag=isCustomComponent(tag,rawProps);validatePropertiesInDevelopment(tag,rawProps);if(isCustomComponentTag&&!didWarnShadyDOM&&domElement.shadyRoot){warning$1(false,'%s is using shady DOM. Using shady DOM with React can '+'cause things to break subtly.',getCurrentFiberOwnerNameInDevOrNull()||'A component');didWarnShadyDOM=true;}}// TODO: Make sure that we check isMounted before firing any of these events.
switch(tag){case'iframe':case'object':trapBubbledEvent(TOP_LOAD,domElement);break;case'video':case'audio':// Create listener for each media event
for(var i=0;i<mediaEventTypes.length;i++){trapBubbledEvent(mediaEventTypes[i],domElement);}break;case'source':trapBubbledEvent(TOP_ERROR,domElement);break;case'img':case'image':case'link':trapBubbledEvent(TOP_ERROR,domElement);trapBubbledEvent(TOP_LOAD,domElement);break;case'form':trapBubbledEvent(TOP_RESET,domElement);trapBubbledEvent(TOP_SUBMIT,domElement);break;case'details':trapBubbledEvent(TOP_TOGGLE,domElement);break;case'input':initWrapperState(domElement,rawProps);trapBubbledEvent(TOP_INVALID,domElement);// For controlled components we always need to ensure we're listening
// to onChange. Even if there is no listener.
ensureListeningTo(rootContainerElement,'onChange');break;case'option':validateProps(domElement,rawProps);break;case'select':initWrapperState$1(domElement,rawProps);trapBubbledEvent(TOP_INVALID,domElement);// For controlled components we always need to ensure we're listening
// to onChange. Even if there is no listener.
ensureListeningTo(rootContainerElement,'onChange');break;case'textarea':initWrapperState$2(domElement,rawProps);trapBubbledEvent(TOP_INVALID,domElement);// For controlled components we always need to ensure we're listening
// to onChange. Even if there is no listener.
ensureListeningTo(rootContainerElement,'onChange');break;}assertValidProps(tag,rawProps);{extraAttributeNames=new Set();var attributes=domElement.attributes;for(var _i=0;_i<attributes.length;_i++){var name=attributes[_i].name.toLowerCase();switch(name){// Built-in SSR attribute is whitelisted
case'data-reactroot':break;// Controlled attributes are not validated
// TODO: Only ignore them on controlled tags.
case'value':break;case'checked':break;case'selected':break;default:// Intentionally use the original name.
// See discussion in https://github.com/facebook/react/pull/10676.
extraAttributeNames.add(attributes[_i].name);}}}var updatePayload=null;for(var propKey in rawProps){if(!rawProps.hasOwnProperty(propKey)){continue;}var nextProp=rawProps[propKey];if(propKey===CHILDREN){// For text content children we compare against textContent. This
// might match additional HTML that is hidden when we read it using
// textContent. E.g. "foo" will match "f<span>oo</span>" but that still
// satisfies our requirement. Our requirement is not to produce perfect
// HTML and attributes. Ideally we should preserve structure but it's
// ok not to if the visible content is still enough to indicate what
// even listeners these nodes might be wired up to.
// TODO: Warn if there is more than a single textNode as a child.
// TODO: Should we use domElement.firstChild.nodeValue to compare?
if(typeof nextProp==='string'){if(domElement.textContent!==nextProp){if(true&&!suppressHydrationWarning){warnForTextDifference(domElement.textContent,nextProp);}updatePayload=[CHILDREN,nextProp];}}else if(typeof nextProp==='number'){if(domElement.textContent!==''+nextProp){if(true&&!suppressHydrationWarning){warnForTextDifference(domElement.textContent,nextProp);}updatePayload=[CHILDREN,''+nextProp];}}}else if(registrationNameModules.hasOwnProperty(propKey)){if(nextProp!=null){if(true&&typeof nextProp!=='function'){warnForInvalidEventListener(propKey,nextProp);}ensureListeningTo(rootContainerElement,propKey);}}else if(true&&// Convince Flow we've calculated it (it's DEV-only in this method.)
typeof isCustomComponentTag==='boolean'){// Validate that the properties correspond to their expected values.
var serverValue=void 0;var propertyInfo=getPropertyInfo(propKey);if(suppressHydrationWarning){// Don't bother comparing. We're ignoring all these warnings.
}else if(propKey===SUPPRESS_CONTENT_EDITABLE_WARNING||propKey===SUPPRESS_HYDRATION_WARNING$1||// Controlled attributes are not validated
// TODO: Only ignore them on controlled tags.
propKey==='value'||propKey==='checked'||propKey==='selected'){// Noop
}else if(propKey===DANGEROUSLY_SET_INNER_HTML){var serverHTML=domElement.innerHTML;var nextHtml=nextProp?nextProp[HTML]:undefined;var expectedHTML=normalizeHTML(domElement,nextHtml!=null?nextHtml:'');if(expectedHTML!==serverHTML){warnForPropDifference(propKey,serverHTML,expectedHTML);}}else if(propKey===STYLE$1){// $FlowFixMe - Should be inferred as not undefined.
extraAttributeNames.delete(propKey);if(canDiffStyleForHydrationWarning){var expectedStyle=createDangerousStringForStyles(nextProp);serverValue=domElement.getAttribute('style');if(expectedStyle!==serverValue){warnForPropDifference(propKey,serverValue,expectedStyle);}}}else if(isCustomComponentTag){// $FlowFixMe - Should be inferred as not undefined.
extraAttributeNames.delete(propKey.toLowerCase());serverValue=getValueForAttribute(domElement,propKey,nextProp);if(nextProp!==serverValue){warnForPropDifference(propKey,serverValue,nextProp);}}else if(!shouldIgnoreAttribute(propKey,propertyInfo,isCustomComponentTag)&&!shouldRemoveAttribute(propKey,nextProp,propertyInfo,isCustomComponentTag)){var isMismatchDueToBadCasing=false;if(propertyInfo!==null){// $FlowFixMe - Should be inferred as not undefined.
extraAttributeNames.delete(propertyInfo.attributeName);serverValue=getValueForProperty(domElement,propKey,nextProp,propertyInfo);}else{var ownNamespace=parentNamespace;if(ownNamespace===HTML_NAMESPACE){ownNamespace=getIntrinsicNamespace(tag);}if(ownNamespace===HTML_NAMESPACE){// $FlowFixMe - Should be inferred as not undefined.
extraAttributeNames.delete(propKey.toLowerCase());}else{var standardName=getPossibleStandardName(propKey);if(standardName!==null&&standardName!==propKey){// If an SVG prop is supplied with bad casing, it will
// be successfully parsed from HTML, but will produce a mismatch
// (and would be incorrectly rendered on the client).
// However, we already warn about bad casing elsewhere.
// So we'll skip the misleading extra mismatch warning in this case.
isMismatchDueToBadCasing=true;// $FlowFixMe - Should be inferred as not undefined.
extraAttributeNames.delete(standardName);}// $FlowFixMe - Should be inferred as not undefined.
extraAttributeNames.delete(propKey);}serverValue=getValueForAttribute(domElement,propKey,nextProp);}if(nextProp!==serverValue&&!isMismatchDueToBadCasing){warnForPropDifference(propKey,serverValue,nextProp);}}}}{// $FlowFixMe - Should be inferred as not undefined.
if(extraAttributeNames.size>0&&!suppressHydrationWarning){// $FlowFixMe - Should be inferred as not undefined.
warnForExtraAttributes(extraAttributeNames);}}switch(tag){case'input':// TODO: Make sure we check if this is still unmounted or do any clean
// up necessary since we never stop tracking anymore.
track(domElement);postMountWrapper(domElement,rawProps,true);break;case'textarea':// TODO: Make sure we check if this is still unmounted or do any clean
// up necessary since we never stop tracking anymore.
track(domElement);postMountWrapper$3(domElement,rawProps);break;case'select':case'option':// For input and textarea we current always set the value property at
// post mount to force it to diverge from attributes. However, for
// option and select we don't quite do the same thing and select
// is not resilient to the DOM state changing so we don't do that here.
// TODO: Consider not doing this for input and textarea.
break;default:if(typeof rawProps.onClick==='function'){// TODO: This cast may not be sound for SVG, MathML or custom elements.
trapClickOnNonInteractiveElement(domElement);}break;}return updatePayload;}function diffHydratedText(textNode,text){var isDifferent=textNode.nodeValue!==text;return isDifferent;}function warnForUnmatchedText(textNode,text){{warnForTextDifference(textNode.nodeValue,text);}}function warnForDeletedHydratableElement(parentNode,child){{if(didWarnInvalidHydration){return;}didWarnInvalidHydration=true;warningWithoutStack$1(false,'Did not expect server HTML to contain a <%s> in <%s>.',child.nodeName.toLowerCase(),parentNode.nodeName.toLowerCase());}}function warnForDeletedHydratableText(parentNode,child){{if(didWarnInvalidHydration){return;}didWarnInvalidHydration=true;warningWithoutStack$1(false,'Did not expect server HTML to contain the text node "%s" in <%s>.',child.nodeValue,parentNode.nodeName.toLowerCase());}}function warnForInsertedHydratedElement(parentNode,tag,props){{if(didWarnInvalidHydration){return;}didWarnInvalidHydration=true;warningWithoutStack$1(false,'Expected server HTML to contain a matching <%s> in <%s>.',tag,parentNode.nodeName.toLowerCase());}}function warnForInsertedHydratedText(parentNode,text){{if(text===''){// We expect to insert empty text nodes since they're not represented in
// the HTML.
// TODO: Remove this special case if we can just avoid inserting empty
// text nodes.
return;}if(didWarnInvalidHydration){return;}didWarnInvalidHydration=true;warningWithoutStack$1(false,'Expected server HTML to contain a matching text node for "%s" in <%s>.',text,parentNode.nodeName.toLowerCase());}}function restoreControlledState$1(domElement,tag,props){switch(tag){case'input':restoreControlledState(domElement,props);return;case'textarea':restoreControlledState$3(domElement,props);return;case'select':restoreControlledState$2(domElement,props);return;}}// TODO: direct imports like some-package/src/* are bad. Fix me.
var validateDOMNesting=function validateDOMNesting(){};var updatedAncestorInfo=function updatedAncestorInfo(){};{// This validation code was written based on the HTML5 parsing spec:
// https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
//
// Note: this does not catch all invalid nesting, nor does it try to (as it's
// not clear what practical benefit doing so provides); instead, we warn only
// for cases where the parser will give a parse tree differing from what React
// intended. For example, <b><div></div></b> is invalid but we don't warn
// because it still parses correctly; we do warn for other cases like nested
// <p> tags where the beginning of the second element implicitly closes the
// first, causing a confusing mess.
// https://html.spec.whatwg.org/multipage/syntax.html#special
var specialTags=['address','applet','area','article','aside','base','basefont','bgsound','blockquote','body','br','button','caption','center','col','colgroup','dd','details','dir','div','dl','dt','embed','fieldset','figcaption','figure','footer','form','frame','frameset','h1','h2','h3','h4','h5','h6','head','header','hgroup','hr','html','iframe','img','input','isindex','li','link','listing','main','marquee','menu','menuitem','meta','nav','noembed','noframes','noscript','object','ol','p','param','plaintext','pre','script','section','select','source','style','summary','table','tbody','td','template','textarea','tfoot','th','thead','title','tr','track','ul','wbr','xmp'];// https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
var inScopeTags=['applet','caption','html','table','td','th','marquee','object','template',// https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
// TODO: Distinguish by namespace here -- for <title>, including it here
// errs on the side of fewer warnings
'foreignObject','desc','title'];// https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
var buttonScopeTags=inScopeTags.concat(['button']);// https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
var impliedEndTags=['dd','dt','li','option','optgroup','p','rp','rt'];var emptyAncestorInfo={current:null,formTag:null,aTagInScope:null,buttonTagInScope:null,nobrTagInScope:null,pTagInButtonScope:null,listItemTagAutoclosing:null,dlItemTagAutoclosing:null};updatedAncestorInfo=function updatedAncestorInfo(oldInfo,tag){var ancestorInfo=_assign({},oldInfo||emptyAncestorInfo);var info={tag:tag};if(inScopeTags.indexOf(tag)!==-1){ancestorInfo.aTagInScope=null;ancestorInfo.buttonTagInScope=null;ancestorInfo.nobrTagInScope=null;}if(buttonScopeTags.indexOf(tag)!==-1){ancestorInfo.pTagInButtonScope=null;}// See rules for 'li', 'dd', 'dt' start tags in
// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
if(specialTags.indexOf(tag)!==-1&&tag!=='address'&&tag!=='div'&&tag!=='p'){ancestorInfo.listItemTagAutoclosing=null;ancestorInfo.dlItemTagAutoclosing=null;}ancestorInfo.current=info;if(tag==='form'){ancestorInfo.formTag=info;}if(tag==='a'){ancestorInfo.aTagInScope=info;}if(tag==='button'){ancestorInfo.buttonTagInScope=info;}if(tag==='nobr'){ancestorInfo.nobrTagInScope=info;}if(tag==='p'){ancestorInfo.pTagInButtonScope=info;}if(tag==='li'){ancestorInfo.listItemTagAutoclosing=info;}if(tag==='dd'||tag==='dt'){ancestorInfo.dlItemTagAutoclosing=info;}return ancestorInfo;};/**
   * Returns whether
   */var isTagValidWithParent=function isTagValidWithParent(tag,parentTag){// First, let's check if we're in an unusual parsing mode...
switch(parentTag){// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
case'select':return tag==='option'||tag==='optgroup'||tag==='#text';case'optgroup':return tag==='option'||tag==='#text';// Strictly speaking, seeing an <option> doesn't mean we're in a <select>
// but
case'option':return tag==='#text';// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
// No special behavior since these rules fall back to "in body" mode for
// all except special table nodes which cause bad parsing behavior anyway.
// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
case'tr':return tag==='th'||tag==='td'||tag==='style'||tag==='script'||tag==='template';// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
case'tbody':case'thead':case'tfoot':return tag==='tr'||tag==='style'||tag==='script'||tag==='template';// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
case'colgroup':return tag==='col'||tag==='template';// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
case'table':return tag==='caption'||tag==='colgroup'||tag==='tbody'||tag==='tfoot'||tag==='thead'||tag==='style'||tag==='script'||tag==='template';// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
case'head':return tag==='base'||tag==='basefont'||tag==='bgsound'||tag==='link'||tag==='meta'||tag==='title'||tag==='noscript'||tag==='noframes'||tag==='style'||tag==='script'||tag==='template';// https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
case'html':return tag==='head'||tag==='body';case'#document':return tag==='html';}// Probably in the "in body" parsing mode, so we outlaw only tag combos
// where the parsing rules cause implicit opens or closes to be added.
// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
switch(tag){case'h1':case'h2':case'h3':case'h4':case'h5':case'h6':return parentTag!=='h1'&&parentTag!=='h2'&&parentTag!=='h3'&&parentTag!=='h4'&&parentTag!=='h5'&&parentTag!=='h6';case'rp':case'rt':return impliedEndTags.indexOf(parentTag)===-1;case'body':case'caption':case'col':case'colgroup':case'frame':case'head':case'html':case'tbody':case'td':case'tfoot':case'th':case'thead':case'tr':// These tags are only valid with a few parents that have special child
// parsing rules -- if we're down here, then none of those matched and
// so we allow it only if we don't know what the parent is, as all other
// cases are invalid.
return parentTag==null;}return true;};/**
   * Returns whether
   */var findInvalidAncestorForTag=function findInvalidAncestorForTag(tag,ancestorInfo){switch(tag){case'address':case'article':case'aside':case'blockquote':case'center':case'details':case'dialog':case'dir':case'div':case'dl':case'fieldset':case'figcaption':case'figure':case'footer':case'header':case'hgroup':case'main':case'menu':case'nav':case'ol':case'p':case'section':case'summary':case'ul':case'pre':case'listing':case'table':case'hr':case'xmp':case'h1':case'h2':case'h3':case'h4':case'h5':case'h6':return ancestorInfo.pTagInButtonScope;case'form':return ancestorInfo.formTag||ancestorInfo.pTagInButtonScope;case'li':return ancestorInfo.listItemTagAutoclosing;case'dd':case'dt':return ancestorInfo.dlItemTagAutoclosing;case'button':return ancestorInfo.buttonTagInScope;case'a':// Spec says something about storing a list of markers, but it sounds
// equivalent to this check.
return ancestorInfo.aTagInScope;case'nobr':return ancestorInfo.nobrTagInScope;}return null;};var didWarn={};validateDOMNesting=function validateDOMNesting(childTag,childText,ancestorInfo){ancestorInfo=ancestorInfo||emptyAncestorInfo;var parentInfo=ancestorInfo.current;var parentTag=parentInfo&&parentInfo.tag;if(childText!=null){!(childTag==null)?warningWithoutStack$1(false,'validateDOMNesting: when childText is passed, childTag should be null'):void 0;childTag='#text';}var invalidParent=isTagValidWithParent(childTag,parentTag)?null:parentInfo;var invalidAncestor=invalidParent?null:findInvalidAncestorForTag(childTag,ancestorInfo);var invalidParentOrAncestor=invalidParent||invalidAncestor;if(!invalidParentOrAncestor){return;}var ancestorTag=invalidParentOrAncestor.tag;var addendum=getCurrentFiberStackInDev();var warnKey=!!invalidParent+'|'+childTag+'|'+ancestorTag+'|'+addendum;if(didWarn[warnKey]){return;}didWarn[warnKey]=true;var tagDisplayName=childTag;var whitespaceInfo='';if(childTag==='#text'){if(/\S/.test(childText)){tagDisplayName='Text nodes';}else{tagDisplayName='Whitespace text nodes';whitespaceInfo=" Make sure you don't have any extra whitespace between tags on "+'each line of your source code.';}}else{tagDisplayName='<'+childTag+'>';}if(invalidParent){var info='';if(ancestorTag==='table'&&childTag==='tr'){info+=' Add a <tbody> to your code to match the DOM tree generated by '+'the browser.';}warningWithoutStack$1(false,'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s',tagDisplayName,ancestorTag,whitespaceInfo,info,addendum);}else{warningWithoutStack$1(false,'validateDOMNesting(...): %s cannot appear as a descendant of '+'<%s>.%s',tagDisplayName,ancestorTag,addendum);}};}// Renderers that don't support persistence
// can re-export everything from this module.
function shim(){invariant(false,'The current renderer does not support persistence. This error is likely caused by a bug in React. Please file an issue.');}// Persistence (when unsupported)
var supportsPersistence=false;var cloneInstance=shim;var createContainerChildSet=shim;var appendChildToContainerChildSet=shim;var finalizeContainerChildren=shim;var replaceContainerChildren=shim;var cloneHiddenInstance=shim;var cloneUnhiddenInstance=shim;var createHiddenTextInstance=shim;var SUPPRESS_HYDRATION_WARNING=void 0;{SUPPRESS_HYDRATION_WARNING='suppressHydrationWarning';}var STYLE='style';var eventsEnabled=null;var selectionInformation=null;function shouldAutoFocusHostComponent(type,props){switch(type){case'button':case'input':case'select':case'textarea':return!!props.autoFocus;}return false;}function getRootHostContext(rootContainerInstance){var type=void 0;var namespace=void 0;var nodeType=rootContainerInstance.nodeType;switch(nodeType){case DOCUMENT_NODE:case DOCUMENT_FRAGMENT_NODE:{type=nodeType===DOCUMENT_NODE?'#document':'#fragment';var root=rootContainerInstance.documentElement;namespace=root?root.namespaceURI:getChildNamespace(null,'');break;}default:{var container=nodeType===COMMENT_NODE?rootContainerInstance.parentNode:rootContainerInstance;var ownNamespace=container.namespaceURI||null;type=container.tagName;namespace=getChildNamespace(ownNamespace,type);break;}}{var validatedTag=type.toLowerCase();var _ancestorInfo=updatedAncestorInfo(null,validatedTag);return{namespace:namespace,ancestorInfo:_ancestorInfo};}return namespace;}function getChildHostContext(parentHostContext,type,rootContainerInstance){{var parentHostContextDev=parentHostContext;var _namespace=getChildNamespace(parentHostContextDev.namespace,type);var _ancestorInfo2=updatedAncestorInfo(parentHostContextDev.ancestorInfo,type);return{namespace:_namespace,ancestorInfo:_ancestorInfo2};}var parentNamespace=parentHostContext;return getChildNamespace(parentNamespace,type);}function getPublicInstance(instance){return instance;}function prepareForCommit(containerInfo){eventsEnabled=isEnabled();selectionInformation=getSelectionInformation();setEnabled(false);}function resetAfterCommit(containerInfo){restoreSelection(selectionInformation);selectionInformation=null;setEnabled(eventsEnabled);eventsEnabled=null;}function createInstance(type,props,rootContainerInstance,hostContext,internalInstanceHandle){var parentNamespace=void 0;{// TODO: take namespace into account when validating.
var hostContextDev=hostContext;validateDOMNesting(type,null,hostContextDev.ancestorInfo);if(typeof props.children==='string'||typeof props.children==='number'){var string=''+props.children;var ownAncestorInfo=updatedAncestorInfo(hostContextDev.ancestorInfo,type);validateDOMNesting(null,string,ownAncestorInfo);}parentNamespace=hostContextDev.namespace;}var domElement=createElement(type,props,rootContainerInstance,parentNamespace);precacheFiberNode(internalInstanceHandle,domElement);updateFiberProps(domElement,props);return domElement;}function appendInitialChild(parentInstance,child){parentInstance.appendChild(child);}function finalizeInitialChildren(domElement,type,props,rootContainerInstance,hostContext){setInitialProperties(domElement,type,props,rootContainerInstance);return shouldAutoFocusHostComponent(type,props);}function prepareUpdate(domElement,type,oldProps,newProps,rootContainerInstance,hostContext){{var hostContextDev=hostContext;if(_typeof(newProps.children)!==_typeof(oldProps.children)&&(typeof newProps.children==='string'||typeof newProps.children==='number')){var string=''+newProps.children;var ownAncestorInfo=updatedAncestorInfo(hostContextDev.ancestorInfo,type);validateDOMNesting(null,string,ownAncestorInfo);}}return diffProperties(domElement,type,oldProps,newProps,rootContainerInstance);}function shouldSetTextContent(type,props){return type==='textarea'||type==='option'||type==='noscript'||typeof props.children==='string'||typeof props.children==='number'||_typeof(props.dangerouslySetInnerHTML)==='object'&&props.dangerouslySetInnerHTML!==null&&props.dangerouslySetInnerHTML.__html!=null;}function shouldDeprioritizeSubtree(type,props){return!!props.hidden;}function createTextInstance(text,rootContainerInstance,hostContext,internalInstanceHandle){{var hostContextDev=hostContext;validateDOMNesting(null,text,hostContextDev.ancestorInfo);}var textNode=createTextNode(text,rootContainerInstance);precacheFiberNode(internalInstanceHandle,textNode);return textNode;}var isPrimaryRenderer=true;var scheduleTimeout=setTimeout;var cancelTimeout=clearTimeout;var noTimeout=-1;// -------------------
//     Mutation
// -------------------
var supportsMutation=true;function commitMount(domElement,type,newProps,internalInstanceHandle){// Despite the naming that might imply otherwise, this method only
// fires if there is an `Update` effect scheduled during mounting.
// This happens if `finalizeInitialChildren` returns `true` (which it
// does to implement the `autoFocus` attribute on the client). But
// there are also other cases when this might happen (such as patching
// up text content during hydration mismatch). So we'll check this again.
if(shouldAutoFocusHostComponent(type,newProps)){domElement.focus();}}function commitUpdate(domElement,updatePayload,type,oldProps,newProps,internalInstanceHandle){// Update the props handle so that we know which props are the ones with
// with current event handlers.
updateFiberProps(domElement,newProps);// Apply the diff to the DOM node.
updateProperties(domElement,updatePayload,type,oldProps,newProps);}function resetTextContent(domElement){setTextContent(domElement,'');}function commitTextUpdate(textInstance,oldText,newText){textInstance.nodeValue=newText;}function appendChild(parentInstance,child){parentInstance.appendChild(child);}function appendChildToContainer(container,child){var parentNode=void 0;if(container.nodeType===COMMENT_NODE){parentNode=container.parentNode;parentNode.insertBefore(child,container);}else{parentNode=container;parentNode.appendChild(child);}// This container might be used for a portal.
// If something inside a portal is clicked, that click should bubble
// through the React tree. However, on Mobile Safari the click would
// never bubble through the *DOM* tree unless an ancestor with onclick
// event exists. So we wouldn't see it and dispatch it.
// This is why we ensure that non React root containers have inline onclick
// defined.
// https://github.com/facebook/react/issues/11918
var reactRootContainer=container._reactRootContainer;if((reactRootContainer===null||reactRootContainer===undefined)&&parentNode.onclick===null){// TODO: This cast may not be sound for SVG, MathML or custom elements.
trapClickOnNonInteractiveElement(parentNode);}}function insertBefore(parentInstance,child,beforeChild){parentInstance.insertBefore(child,beforeChild);}function insertInContainerBefore(container,child,beforeChild){if(container.nodeType===COMMENT_NODE){container.parentNode.insertBefore(child,beforeChild);}else{container.insertBefore(child,beforeChild);}}function removeChild(parentInstance,child){parentInstance.removeChild(child);}function removeChildFromContainer(container,child){if(container.nodeType===COMMENT_NODE){container.parentNode.removeChild(child);}else{container.removeChild(child);}}function hideInstance(instance){// TODO: Does this work for all element types? What about MathML? Should we
// pass host context to this method?
instance=instance;instance.style.display='none';}function hideTextInstance(textInstance){textInstance.nodeValue='';}function unhideInstance(instance,props){instance=instance;var styleProp=props[STYLE];var display=styleProp!==undefined&&styleProp!==null&&styleProp.hasOwnProperty('display')?styleProp.display:null;// $FlowFixMe Setting a style property to null is the valid way to reset it.
instance.style.display=display;}function unhideTextInstance(textInstance,text){textInstance.nodeValue=text;}// -------------------
//     Hydration
// -------------------
var supportsHydration=true;function canHydrateInstance(instance,type,props){if(instance.nodeType!==ELEMENT_NODE||type.toLowerCase()!==instance.nodeName.toLowerCase()){return null;}// This has now been refined to an element node.
return instance;}function canHydrateTextInstance(instance,text){if(text===''||instance.nodeType!==TEXT_NODE){// Empty strings are not parsed by HTML so there won't be a correct match here.
return null;}// This has now been refined to a text node.
return instance;}function getNextHydratableSibling(instance){var node=instance.nextSibling;// Skip non-hydratable nodes.
while(node&&node.nodeType!==ELEMENT_NODE&&node.nodeType!==TEXT_NODE){node=node.nextSibling;}return node;}function getFirstHydratableChild(parentInstance){var next=parentInstance.firstChild;// Skip non-hydratable nodes.
while(next&&next.nodeType!==ELEMENT_NODE&&next.nodeType!==TEXT_NODE){next=next.nextSibling;}return next;}function hydrateInstance(instance,type,props,rootContainerInstance,hostContext,internalInstanceHandle){precacheFiberNode(internalInstanceHandle,instance);// TODO: Possibly defer this until the commit phase where all the events
// get attached.
updateFiberProps(instance,props);var parentNamespace=void 0;{var hostContextDev=hostContext;parentNamespace=hostContextDev.namespace;}return diffHydratedProperties(instance,type,props,parentNamespace,rootContainerInstance);}function hydrateTextInstance(textInstance,text,internalInstanceHandle){precacheFiberNode(internalInstanceHandle,textInstance);return diffHydratedText(textInstance,text);}function didNotMatchHydratedContainerTextInstance(parentContainer,textInstance,text){{warnForUnmatchedText(textInstance,text);}}function didNotMatchHydratedTextInstance(parentType,parentProps,parentInstance,textInstance,text){if(true&&parentProps[SUPPRESS_HYDRATION_WARNING]!==true){warnForUnmatchedText(textInstance,text);}}function didNotHydrateContainerInstance(parentContainer,instance){{if(instance.nodeType===ELEMENT_NODE){warnForDeletedHydratableElement(parentContainer,instance);}else{warnForDeletedHydratableText(parentContainer,instance);}}}function didNotHydrateInstance(parentType,parentProps,parentInstance,instance){if(true&&parentProps[SUPPRESS_HYDRATION_WARNING]!==true){if(instance.nodeType===ELEMENT_NODE){warnForDeletedHydratableElement(parentInstance,instance);}else{warnForDeletedHydratableText(parentInstance,instance);}}}function didNotFindHydratableContainerInstance(parentContainer,type,props){{warnForInsertedHydratedElement(parentContainer,type,props);}}function didNotFindHydratableContainerTextInstance(parentContainer,text){{warnForInsertedHydratedText(parentContainer,text);}}function didNotFindHydratableInstance(parentType,parentProps,parentInstance,type,props){if(true&&parentProps[SUPPRESS_HYDRATION_WARNING]!==true){warnForInsertedHydratedElement(parentInstance,type,props);}}function didNotFindHydratableTextInstance(parentType,parentProps,parentInstance,text){if(true&&parentProps[SUPPRESS_HYDRATION_WARNING]!==true){warnForInsertedHydratedText(parentInstance,text);}}// Prefix measurements so that it's possible to filter them.
// Longer prefixes are hard to read in DevTools.
var reactEmoji='\u269B';var warningEmoji='\u26D4';var supportsUserTiming=typeof performance!=='undefined'&&typeof performance.mark==='function'&&typeof performance.clearMarks==='function'&&typeof performance.measure==='function'&&typeof performance.clearMeasures==='function';// Keep track of current fiber so that we know the path to unwind on pause.
// TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?
var currentFiber=null;// If we're in the middle of user code, which fiber and method is it?
// Reusing `currentFiber` would be confusing for this because user code fiber
// can change during commit phase too, but we don't need to unwind it (since
// lifecycles in the commit phase don't resemble a tree).
var currentPhase=null;var currentPhaseFiber=null;// Did lifecycle hook schedule an update? This is often a performance problem,
// so we will keep track of it, and include it in the report.
// Track commits caused by cascading updates.
var isCommitting=false;var hasScheduledUpdateInCurrentCommit=false;var hasScheduledUpdateInCurrentPhase=false;var commitCountInCurrentWorkLoop=0;var effectCountInCurrentCommit=0;var isWaitingForCallback=false;// During commits, we only show a measurement once per method name
// to avoid stretch the commit phase with measurement overhead.
var labelsInCurrentCommit=new Set();var formatMarkName=function formatMarkName(markName){return reactEmoji+' '+markName;};var formatLabel=function formatLabel(label,warning){var prefix=warning?warningEmoji+' ':reactEmoji+' ';var suffix=warning?' Warning: '+warning:'';return''+prefix+label+suffix;};var beginMark=function beginMark(markName){performance.mark(formatMarkName(markName));};var clearMark=function clearMark(markName){performance.clearMarks(formatMarkName(markName));};var endMark=function endMark(label,markName,warning){var formattedMarkName=formatMarkName(markName);var formattedLabel=formatLabel(label,warning);try{performance.measure(formattedLabel,formattedMarkName);}catch(err){}// If previous mark was missing for some reason, this will throw.
// This could only happen if React crashed in an unexpected place earlier.
// Don't pile on with more errors.
// Clear marks immediately to avoid growing buffer.
performance.clearMarks(formattedMarkName);performance.clearMeasures(formattedLabel);};var getFiberMarkName=function getFiberMarkName(label,debugID){return label+' (#'+debugID+')';};var getFiberLabel=function getFiberLabel(componentName,isMounted,phase){if(phase===null){// These are composite component total time measurements.
return componentName+' ['+(isMounted?'update':'mount')+']';}else{// Composite component methods.
return componentName+'.'+phase;}};var beginFiberMark=function beginFiberMark(fiber,phase){var componentName=getComponentName(fiber.type)||'Unknown';var debugID=fiber._debugID;var isMounted=fiber.alternate!==null;var label=getFiberLabel(componentName,isMounted,phase);if(isCommitting&&labelsInCurrentCommit.has(label)){// During the commit phase, we don't show duplicate labels because
// there is a fixed overhead for every measurement, and we don't
// want to stretch the commit phase beyond necessary.
return false;}labelsInCurrentCommit.add(label);var markName=getFiberMarkName(label,debugID);beginMark(markName);return true;};var clearFiberMark=function clearFiberMark(fiber,phase){var componentName=getComponentName(fiber.type)||'Unknown';var debugID=fiber._debugID;var isMounted=fiber.alternate!==null;var label=getFiberLabel(componentName,isMounted,phase);var markName=getFiberMarkName(label,debugID);clearMark(markName);};var endFiberMark=function endFiberMark(fiber,phase,warning){var componentName=getComponentName(fiber.type)||'Unknown';var debugID=fiber._debugID;var isMounted=fiber.alternate!==null;var label=getFiberLabel(componentName,isMounted,phase);var markName=getFiberMarkName(label,debugID);endMark(label,markName,warning);};var shouldIgnoreFiber=function shouldIgnoreFiber(fiber){// Host components should be skipped in the timeline.
// We could check typeof fiber.type, but does this work with RN?
switch(fiber.tag){case HostRoot:case HostComponent:case HostText:case HostPortal:case Fragment:case ContextProvider:case ContextConsumer:case Mode:return true;default:return false;}};var clearPendingPhaseMeasurement=function clearPendingPhaseMeasurement(){if(currentPhase!==null&&currentPhaseFiber!==null){clearFiberMark(currentPhaseFiber,currentPhase);}currentPhaseFiber=null;currentPhase=null;hasScheduledUpdateInCurrentPhase=false;};var pauseTimers=function pauseTimers(){// Stops all currently active measurements so that they can be resumed
// if we continue in a later deferred loop from the same unit of work.
var fiber=currentFiber;while(fiber){if(fiber._debugIsCurrentlyTiming){endFiberMark(fiber,null,null);}fiber=fiber.return;}};var resumeTimersRecursively=function resumeTimersRecursively(fiber){if(fiber.return!==null){resumeTimersRecursively(fiber.return);}if(fiber._debugIsCurrentlyTiming){beginFiberMark(fiber,null);}};var resumeTimers=function resumeTimers(){// Resumes all measurements that were active during the last deferred loop.
if(currentFiber!==null){resumeTimersRecursively(currentFiber);}};function recordEffect(){if(enableUserTimingAPI){effectCountInCurrentCommit++;}}function recordScheduleUpdate(){if(enableUserTimingAPI){if(isCommitting){hasScheduledUpdateInCurrentCommit=true;}if(currentPhase!==null&&currentPhase!=='componentWillMount'&&currentPhase!=='componentWillReceiveProps'){hasScheduledUpdateInCurrentPhase=true;}}}function startRequestCallbackTimer(){if(enableUserTimingAPI){if(supportsUserTiming&&!isWaitingForCallback){isWaitingForCallback=true;beginMark('(Waiting for async callback...)');}}}function stopRequestCallbackTimer(didExpire,expirationTime){if(enableUserTimingAPI){if(supportsUserTiming){isWaitingForCallback=false;var warning=didExpire?'React was blocked by main thread':null;endMark('(Waiting for async callback... will force flush in '+expirationTime+' ms)','(Waiting for async callback...)',warning);}}}function startWorkTimer(fiber){if(enableUserTimingAPI){if(!supportsUserTiming||shouldIgnoreFiber(fiber)){return;}// If we pause, this is the fiber to unwind from.
currentFiber=fiber;if(!beginFiberMark(fiber,null)){return;}fiber._debugIsCurrentlyTiming=true;}}function cancelWorkTimer(fiber){if(enableUserTimingAPI){if(!supportsUserTiming||shouldIgnoreFiber(fiber)){return;}// Remember we shouldn't complete measurement for this fiber.
// Otherwise flamechart will be deep even for small updates.
fiber._debugIsCurrentlyTiming=false;clearFiberMark(fiber,null);}}function stopWorkTimer(fiber){if(enableUserTimingAPI){if(!supportsUserTiming||shouldIgnoreFiber(fiber)){return;}// If we pause, its parent is the fiber to unwind from.
currentFiber=fiber.return;if(!fiber._debugIsCurrentlyTiming){return;}fiber._debugIsCurrentlyTiming=false;endFiberMark(fiber,null,null);}}function stopFailedWorkTimer(fiber){if(enableUserTimingAPI){if(!supportsUserTiming||shouldIgnoreFiber(fiber)){return;}// If we pause, its parent is the fiber to unwind from.
currentFiber=fiber.return;if(!fiber._debugIsCurrentlyTiming){return;}fiber._debugIsCurrentlyTiming=false;var warning=fiber.tag===SuspenseComponent?'Rendering was suspended':'An error was thrown inside this error boundary';endFiberMark(fiber,null,warning);}}function startPhaseTimer(fiber,phase){if(enableUserTimingAPI){if(!supportsUserTiming){return;}clearPendingPhaseMeasurement();if(!beginFiberMark(fiber,phase)){return;}currentPhaseFiber=fiber;currentPhase=phase;}}function stopPhaseTimer(){if(enableUserTimingAPI){if(!supportsUserTiming){return;}if(currentPhase!==null&&currentPhaseFiber!==null){var warning=hasScheduledUpdateInCurrentPhase?'Scheduled a cascading update':null;endFiberMark(currentPhaseFiber,currentPhase,warning);}currentPhase=null;currentPhaseFiber=null;}}function startWorkLoopTimer(nextUnitOfWork){if(enableUserTimingAPI){currentFiber=nextUnitOfWork;if(!supportsUserTiming){return;}commitCountInCurrentWorkLoop=0;// This is top level call.
// Any other measurements are performed within.
beginMark('(React Tree Reconciliation)');// Resume any measurements that were in progress during the last loop.
resumeTimers();}}function stopWorkLoopTimer(interruptedBy,didCompleteRoot){if(enableUserTimingAPI){if(!supportsUserTiming){return;}var warning=null;if(interruptedBy!==null){if(interruptedBy.tag===HostRoot){warning='A top-level update interrupted the previous render';}else{var componentName=getComponentName(interruptedBy.type)||'Unknown';warning='An update to '+componentName+' interrupted the previous render';}}else if(commitCountInCurrentWorkLoop>1){warning='There were cascading updates';}commitCountInCurrentWorkLoop=0;var label=didCompleteRoot?'(React Tree Reconciliation: Completed Root)':'(React Tree Reconciliation: Yielded)';// Pause any measurements until the next loop.
pauseTimers();endMark(label,'(React Tree Reconciliation)',warning);}}function startCommitTimer(){if(enableUserTimingAPI){if(!supportsUserTiming){return;}isCommitting=true;hasScheduledUpdateInCurrentCommit=false;labelsInCurrentCommit.clear();beginMark('(Committing Changes)');}}function stopCommitTimer(){if(enableUserTimingAPI){if(!supportsUserTiming){return;}var warning=null;if(hasScheduledUpdateInCurrentCommit){warning='Lifecycle hook scheduled a cascading update';}else if(commitCountInCurrentWorkLoop>0){warning='Caused by a cascading update in earlier commit';}hasScheduledUpdateInCurrentCommit=false;commitCountInCurrentWorkLoop++;isCommitting=false;labelsInCurrentCommit.clear();endMark('(Committing Changes)','(Committing Changes)',warning);}}function startCommitSnapshotEffectsTimer(){if(enableUserTimingAPI){if(!supportsUserTiming){return;}effectCountInCurrentCommit=0;beginMark('(Committing Snapshot Effects)');}}function stopCommitSnapshotEffectsTimer(){if(enableUserTimingAPI){if(!supportsUserTiming){return;}var count=effectCountInCurrentCommit;effectCountInCurrentCommit=0;endMark('(Committing Snapshot Effects: '+count+' Total)','(Committing Snapshot Effects)',null);}}function startCommitHostEffectsTimer(){if(enableUserTimingAPI){if(!supportsUserTiming){return;}effectCountInCurrentCommit=0;beginMark('(Committing Host Effects)');}}function stopCommitHostEffectsTimer(){if(enableUserTimingAPI){if(!supportsUserTiming){return;}var count=effectCountInCurrentCommit;effectCountInCurrentCommit=0;endMark('(Committing Host Effects: '+count+' Total)','(Committing Host Effects)',null);}}function startCommitLifeCyclesTimer(){if(enableUserTimingAPI){if(!supportsUserTiming){return;}effectCountInCurrentCommit=0;beginMark('(Calling Lifecycle Methods)');}}function stopCommitLifeCyclesTimer(){if(enableUserTimingAPI){if(!supportsUserTiming){return;}var count=effectCountInCurrentCommit;effectCountInCurrentCommit=0;endMark('(Calling Lifecycle Methods: '+count+' Total)','(Calling Lifecycle Methods)',null);}}var valueStack=[];var fiberStack=void 0;{fiberStack=[];}var index=-1;function createCursor(defaultValue){return{current:defaultValue};}function pop(cursor,fiber){if(index<0){{warningWithoutStack$1(false,'Unexpected pop.');}return;}{if(fiber!==fiberStack[index]){warningWithoutStack$1(false,'Unexpected Fiber popped.');}}cursor.current=valueStack[index];valueStack[index]=null;{fiberStack[index]=null;}index--;}function push(cursor,value,fiber){index++;valueStack[index]=cursor.current;{fiberStack[index]=fiber;}cursor.current=value;}function checkThatStackIsEmpty(){{if(index!==-1){warningWithoutStack$1(false,'Expected an empty stack. Something was not reset properly.');}}}function resetStackAfterFatalErrorInDev(){{index=-1;valueStack.length=0;fiberStack.length=0;}}var warnedAboutMissingGetChildContext=void 0;{warnedAboutMissingGetChildContext={};}var emptyContextObject={};{Object.freeze(emptyContextObject);}// A cursor to the current merged context object on the stack.
var contextStackCursor=createCursor(emptyContextObject);// A cursor to a boolean indicating whether the context has changed.
var didPerformWorkStackCursor=createCursor(false);// Keep track of the previous context object that was on the stack.
// We use this to get access to the parent context after we have already
// pushed the next context provider, and now need to merge their contexts.
var previousContext=emptyContextObject;function getUnmaskedContext(workInProgress,Component,didPushOwnContextIfProvider){if(didPushOwnContextIfProvider&&isContextProvider(Component)){// If the fiber is a context provider itself, when we read its context
// we may have already pushed its own child context on the stack. A context
// provider should not "see" its own child context. Therefore we read the
// previous (parent) context instead for a context provider.
return previousContext;}return contextStackCursor.current;}function cacheContext(workInProgress,unmaskedContext,maskedContext){var instance=workInProgress.stateNode;instance.__reactInternalMemoizedUnmaskedChildContext=unmaskedContext;instance.__reactInternalMemoizedMaskedChildContext=maskedContext;}function getMaskedContext(workInProgress,unmaskedContext){var type=workInProgress.type;var contextTypes=type.contextTypes;if(!contextTypes){return emptyContextObject;}// Avoid recreating masked context unless unmasked context has changed.
// Failing to do this will result in unnecessary calls to componentWillReceiveProps.
// This may trigger infinite loops if componentWillReceiveProps calls setState.
var instance=workInProgress.stateNode;if(instance&&instance.__reactInternalMemoizedUnmaskedChildContext===unmaskedContext){return instance.__reactInternalMemoizedMaskedChildContext;}var context={};for(var key in contextTypes){context[key]=unmaskedContext[key];}{var name=getComponentName(type)||'Unknown';checkPropTypes(contextTypes,context,'context',name,getCurrentFiberStackInDev);}// Cache unmasked context so we can avoid recreating masked context unless necessary.
// Context is created before the class component is instantiated so check for instance.
if(instance){cacheContext(workInProgress,unmaskedContext,context);}return context;}function hasContextChanged(){return didPerformWorkStackCursor.current;}function isContextProvider(type){var childContextTypes=type.childContextTypes;return childContextTypes!==null&&childContextTypes!==undefined;}function popContext(fiber){pop(didPerformWorkStackCursor,fiber);pop(contextStackCursor,fiber);}function popTopLevelContextObject(fiber){pop(didPerformWorkStackCursor,fiber);pop(contextStackCursor,fiber);}function pushTopLevelContextObject(fiber,context,didChange){!(contextStackCursor.current===emptyContextObject)?invariant(false,'Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.'):void 0;push(contextStackCursor,context,fiber);push(didPerformWorkStackCursor,didChange,fiber);}function processChildContext(fiber,type,parentContext){var instance=fiber.stateNode;var childContextTypes=type.childContextTypes;// TODO (bvaughn) Replace this behavior with an invariant() in the future.
// It has only been added in Fiber to match the (unintentional) behavior in Stack.
if(typeof instance.getChildContext!=='function'){{var componentName=getComponentName(type)||'Unknown';if(!warnedAboutMissingGetChildContext[componentName]){warnedAboutMissingGetChildContext[componentName]=true;warningWithoutStack$1(false,'%s.childContextTypes is specified but there is no getChildContext() method '+'on the instance. You can either define getChildContext() on %s or remove '+'childContextTypes from it.',componentName,componentName);}}return parentContext;}var childContext=void 0;{setCurrentPhase('getChildContext');}startPhaseTimer(fiber,'getChildContext');childContext=instance.getChildContext();stopPhaseTimer();{setCurrentPhase(null);}for(var contextKey in childContext){!(contextKey in childContextTypes)?invariant(false,'%s.getChildContext(): key "%s" is not defined in childContextTypes.',getComponentName(type)||'Unknown',contextKey):void 0;}{var name=getComponentName(type)||'Unknown';checkPropTypes(childContextTypes,childContext,'child context',name,// In practice, there is one case in which we won't get a stack. It's when
// somebody calls unstable_renderSubtreeIntoContainer() and we process
// context from the parent component instance. The stack will be missing
// because it's outside of the reconciliation, and so the pointer has not
// been set. This is rare and doesn't matter. We'll also remove that API.
getCurrentFiberStackInDev);}return _assign({},parentContext,childContext);}function pushContextProvider(workInProgress){var instance=workInProgress.stateNode;// We push the context as early as possible to ensure stack integrity.
// If the instance does not exist yet, we will push null at first,
// and replace it on the stack later when invalidating the context.
var memoizedMergedChildContext=instance&&instance.__reactInternalMemoizedMergedChildContext||emptyContextObject;// Remember the parent context so we can merge with it later.
// Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
previousContext=contextStackCursor.current;push(contextStackCursor,memoizedMergedChildContext,workInProgress);push(didPerformWorkStackCursor,didPerformWorkStackCursor.current,workInProgress);return true;}function invalidateContextProvider(workInProgress,type,didChange){var instance=workInProgress.stateNode;!instance?invariant(false,'Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.'):void 0;if(didChange){// Merge parent and own context.
// Skip this if we're not updating due to sCU.
// This avoids unnecessarily recomputing memoized values.
var mergedContext=processChildContext(workInProgress,type,previousContext);instance.__reactInternalMemoizedMergedChildContext=mergedContext;// Replace the old (or empty) context with the new one.
// It is important to unwind the context in the reverse order.
pop(didPerformWorkStackCursor,workInProgress);pop(contextStackCursor,workInProgress);// Now push the new context and mark that it has changed.
push(contextStackCursor,mergedContext,workInProgress);push(didPerformWorkStackCursor,didChange,workInProgress);}else{pop(didPerformWorkStackCursor,workInProgress);push(didPerformWorkStackCursor,didChange,workInProgress);}}function findCurrentUnmaskedContext(fiber){// Currently this is only used with renderSubtreeIntoContainer; not sure if it
// makes sense elsewhere
!(isFiberMounted(fiber)&&fiber.tag===ClassComponent)?invariant(false,'Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.'):void 0;var node=fiber;do{switch(node.tag){case HostRoot:return node.stateNode.context;case ClassComponent:{var Component=node.type;if(isContextProvider(Component)){return node.stateNode.__reactInternalMemoizedMergedChildContext;}break;}}node=node.return;}while(node!==null);invariant(false,'Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.');}var onCommitFiberRoot=null;var onCommitFiberUnmount=null;var hasLoggedError=false;function catchErrors(fn){return function(arg){try{return fn(arg);}catch(err){if(true&&!hasLoggedError){hasLoggedError=true;warningWithoutStack$1(false,'React DevTools encountered an error: %s',err);}}};}var isDevToolsPresent=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__!=='undefined';function injectInternals(internals){if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__==='undefined'){// No DevTools
return false;}var hook=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(hook.isDisabled){// This isn't a real property on the hook, but it can be set to opt out
// of DevTools integration and associated warnings and logs.
// https://github.com/facebook/react/issues/3877
return true;}if(!hook.supportsFiber){{warningWithoutStack$1(false,'The installed version of React DevTools is too old and will not work '+'with the current version of React. Please update React DevTools. '+'https://fb.me/react-devtools');}// DevTools exists, even though it doesn't support Fiber.
return true;}try{var rendererID=hook.inject(internals);// We have successfully injected, so now it is safe to set up hooks.
onCommitFiberRoot=catchErrors(function(root){return hook.onCommitFiberRoot(rendererID,root);});onCommitFiberUnmount=catchErrors(function(fiber){return hook.onCommitFiberUnmount(rendererID,fiber);});}catch(err){// Catch all errors because it is unsafe to throw during initialization.
{warningWithoutStack$1(false,'React DevTools encountered an error: %s.',err);}}// DevTools exists
return true;}function onCommitRoot(root){if(typeof onCommitFiberRoot==='function'){onCommitFiberRoot(root);}}function onCommitUnmount(fiber){if(typeof onCommitFiberUnmount==='function'){onCommitFiberUnmount(fiber);}}// Max 31 bit integer. The max integer size in V8 for 32-bit systems.
// Math.pow(2, 30) - 1
// 0b111111111111111111111111111111
var maxSigned31BitInt=1073741823;var NoWork=0;var Sync=1;var Never=maxSigned31BitInt;var UNIT_SIZE=10;var MAGIC_NUMBER_OFFSET=2;// 1 unit of expiration time represents 10ms.
function msToExpirationTime(ms){// Always add an offset so that we don't clash with the magic number for NoWork.
return(ms/UNIT_SIZE|0)+MAGIC_NUMBER_OFFSET;}function expirationTimeToMs(expirationTime){return(expirationTime-MAGIC_NUMBER_OFFSET)*UNIT_SIZE;}function ceiling(num,precision){return((num/precision|0)+1)*precision;}function computeExpirationBucket(currentTime,expirationInMs,bucketSizeMs){return MAGIC_NUMBER_OFFSET+ceiling(currentTime-MAGIC_NUMBER_OFFSET+expirationInMs/UNIT_SIZE,bucketSizeMs/UNIT_SIZE);}var LOW_PRIORITY_EXPIRATION=5000;var LOW_PRIORITY_BATCH_SIZE=250;function computeAsyncExpiration(currentTime){return computeExpirationBucket(currentTime,LOW_PRIORITY_EXPIRATION,LOW_PRIORITY_BATCH_SIZE);}// We intentionally set a higher expiration time for interactive updates in
// dev than in production.
//
// If the main thread is being blocked so long that you hit the expiration,
// it's a problem that could be solved with better scheduling.
//
// People will be more likely to notice this and fix it with the long
// expiration time in development.
//
// In production we opt for better UX at the risk of masking scheduling
// problems, by expiring fast.
var HIGH_PRIORITY_EXPIRATION=500;var HIGH_PRIORITY_BATCH_SIZE=100;function computeInteractiveExpiration(currentTime){return computeExpirationBucket(currentTime,HIGH_PRIORITY_EXPIRATION,HIGH_PRIORITY_BATCH_SIZE);}var NoContext=0;var ConcurrentMode=1;var StrictMode=2;var ProfileMode=4;var hasBadMapPolyfill=void 0;{hasBadMapPolyfill=false;try{var nonExtensibleObject=Object.preventExtensions({});var testMap=new Map([[nonExtensibleObject,null]]);var testSet=new Set([nonExtensibleObject]);// This is necessary for Rollup to not consider these unused.
// https://github.com/rollup/rollup/issues/1771
// TODO: we can remove these if Rollup fixes the bug.
testMap.set(0,0);testSet.add(0);}catch(e){// TODO: Consider warning about bad polyfills
hasBadMapPolyfill=true;}}// A Fiber is work on a Component that needs to be done or was done. There can
// be more than one per component.
var debugCounter=void 0;{debugCounter=1;}function FiberNode(tag,pendingProps,key,mode){// Instance
this.tag=tag;this.key=key;this.elementType=null;this.type=null;this.stateNode=null;// Fiber
this.return=null;this.child=null;this.sibling=null;this.index=0;this.ref=null;this.pendingProps=pendingProps;this.memoizedProps=null;this.updateQueue=null;this.memoizedState=null;this.firstContextDependency=null;this.mode=mode;// Effects
this.effectTag=NoEffect;this.nextEffect=null;this.firstEffect=null;this.lastEffect=null;this.expirationTime=NoWork;this.childExpirationTime=NoWork;this.alternate=null;if(enableProfilerTimer){this.actualDuration=0;this.actualStartTime=-1;this.selfBaseDuration=0;this.treeBaseDuration=0;}{this._debugID=debugCounter++;this._debugSource=null;this._debugOwner=null;this._debugIsCurrentlyTiming=false;if(!hasBadMapPolyfill&&typeof Object.preventExtensions==='function'){Object.preventExtensions(this);}}}// This is a constructor function, rather than a POJO constructor, still
// please ensure we do the following:
// 1) Nobody should add any instance methods on this. Instance methods can be
//    more difficult to predict when they get optimized and they are almost
//    never inlined properly in static compilers.
// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
//    always know when it is a fiber.
// 3) We might want to experiment with using numeric keys since they are easier
//    to optimize in a non-JIT environment.
// 4) We can easily go from a constructor to a createFiber object literal if that
//    is faster.
// 5) It should be easy to port this to a C struct and keep a C implementation
//    compatible.
var createFiber=function createFiber(tag,pendingProps,key,mode){// $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
return new FiberNode(tag,pendingProps,key,mode);};function shouldConstruct(Component){var prototype=Component.prototype;return!!(prototype&&prototype.isReactComponent);}function isSimpleFunctionComponent(type){return typeof type==='function'&&!shouldConstruct(type)&&type.defaultProps===undefined;}function resolveLazyComponentTag(Component){if(typeof Component==='function'){return shouldConstruct(Component)?ClassComponent:FunctionComponent;}else if(Component!==undefined&&Component!==null){var $$typeof=Component.$$typeof;if($$typeof===REACT_FORWARD_REF_TYPE){return ForwardRef;}if($$typeof===REACT_MEMO_TYPE){return MemoComponent;}}return IndeterminateComponent;}// This is used to create an alternate fiber to do work on.
function createWorkInProgress(current,pendingProps,expirationTime){var workInProgress=current.alternate;if(workInProgress===null){// We use a double buffering pooling technique because we know that we'll
// only ever need at most two versions of a tree. We pool the "other" unused
// node that we're free to reuse. This is lazily created to avoid allocating
// extra objects for things that are never updated. It also allow us to
// reclaim the extra memory if needed.
workInProgress=createFiber(current.tag,pendingProps,current.key,current.mode);workInProgress.elementType=current.elementType;workInProgress.type=current.type;workInProgress.stateNode=current.stateNode;{// DEV-only fields
workInProgress._debugID=current._debugID;workInProgress._debugSource=current._debugSource;workInProgress._debugOwner=current._debugOwner;}workInProgress.alternate=current;current.alternate=workInProgress;}else{workInProgress.pendingProps=pendingProps;// We already have an alternate.
// Reset the effect tag.
workInProgress.effectTag=NoEffect;// The effect list is no longer valid.
workInProgress.nextEffect=null;workInProgress.firstEffect=null;workInProgress.lastEffect=null;if(enableProfilerTimer){// We intentionally reset, rather than copy, actualDuration & actualStartTime.
// This prevents time from endlessly accumulating in new commits.
// This has the downside of resetting values for different priority renders,
// But works for yielding (the common case) and should support resuming.
workInProgress.actualDuration=0;workInProgress.actualStartTime=-1;}}workInProgress.childExpirationTime=current.childExpirationTime;workInProgress.expirationTime=current.expirationTime;workInProgress.child=current.child;workInProgress.memoizedProps=current.memoizedProps;workInProgress.memoizedState=current.memoizedState;workInProgress.updateQueue=current.updateQueue;workInProgress.firstContextDependency=current.firstContextDependency;// These will be overridden during the parent's reconciliation
workInProgress.sibling=current.sibling;workInProgress.index=current.index;workInProgress.ref=current.ref;if(enableProfilerTimer){workInProgress.selfBaseDuration=current.selfBaseDuration;workInProgress.treeBaseDuration=current.treeBaseDuration;}return workInProgress;}function createHostRootFiber(isConcurrent){var mode=isConcurrent?ConcurrentMode|StrictMode:NoContext;if(enableProfilerTimer&&isDevToolsPresent){// Always collect profile timings when DevTools are present.
// This enables DevTools to start capturing timing at any pointâ
// Without some nodes in the tree having empty base times.
mode|=ProfileMode;}return createFiber(HostRoot,null,null,mode);}function createFiberFromTypeAndProps(type,// React$ElementType
key,pendingProps,owner,mode,expirationTime){var fiber=void 0;var fiberTag=IndeterminateComponent;// The resolved type is set if we know what the final type will be. I.e. it's not lazy.
var resolvedType=type;if(typeof type==='function'){if(shouldConstruct(type)){fiberTag=ClassComponent;}}else if(typeof type==='string'){fiberTag=HostComponent;}else{getTag:switch(type){case REACT_FRAGMENT_TYPE:return createFiberFromFragment(pendingProps.children,mode,expirationTime,key);case REACT_CONCURRENT_MODE_TYPE:return createFiberFromMode(pendingProps,mode|ConcurrentMode|StrictMode,expirationTime,key);case REACT_STRICT_MODE_TYPE:return createFiberFromMode(pendingProps,mode|StrictMode,expirationTime,key);case REACT_PROFILER_TYPE:return createFiberFromProfiler(pendingProps,mode,expirationTime,key);case REACT_SUSPENSE_TYPE:return createFiberFromSuspense(pendingProps,mode,expirationTime,key);default:{if((typeof type==='undefined'?'undefined':_typeof(type))==='object'&&type!==null){switch(type.$$typeof){case REACT_PROVIDER_TYPE:fiberTag=ContextProvider;break getTag;case REACT_CONTEXT_TYPE:// This is a consumer
fiberTag=ContextConsumer;break getTag;case REACT_FORWARD_REF_TYPE:fiberTag=ForwardRef;break getTag;case REACT_MEMO_TYPE:fiberTag=MemoComponent;break getTag;case REACT_LAZY_TYPE:fiberTag=LazyComponent;resolvedType=null;break getTag;}}var info='';{if(type===undefined||(typeof type==='undefined'?'undefined':_typeof(type))==='object'&&type!==null&&Object.keys(type).length===0){info+=' You likely forgot to export your component from the file '+"it's defined in, or you might have mixed up default and "+'named imports.';}var ownerName=owner?getComponentName(owner.type):null;if(ownerName){info+='\n\nCheck the render method of `'+ownerName+'`.';}}invariant(false,'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s',type==null?type:typeof type==='undefined'?'undefined':_typeof(type),info);}}}fiber=createFiber(fiberTag,pendingProps,key,mode);fiber.elementType=type;fiber.type=resolvedType;fiber.expirationTime=expirationTime;return fiber;}function createFiberFromElement(element,mode,expirationTime){var owner=null;{owner=element._owner;}var type=element.type;var key=element.key;var pendingProps=element.props;var fiber=createFiberFromTypeAndProps(type,key,pendingProps,owner,mode,expirationTime);{fiber._debugSource=element._source;fiber._debugOwner=element._owner;}return fiber;}function createFiberFromFragment(elements,mode,expirationTime,key){var fiber=createFiber(Fragment,elements,key,mode);fiber.expirationTime=expirationTime;return fiber;}function createFiberFromProfiler(pendingProps,mode,expirationTime,key){{if(typeof pendingProps.id!=='string'||typeof pendingProps.onRender!=='function'){warningWithoutStack$1(false,'Profiler must specify an "id" string and "onRender" function as props');}}var fiber=createFiber(Profiler,pendingProps,key,mode|ProfileMode);// TODO: The Profiler fiber shouldn't have a type. It has a tag.
fiber.elementType=REACT_PROFILER_TYPE;fiber.type=REACT_PROFILER_TYPE;fiber.expirationTime=expirationTime;return fiber;}function createFiberFromMode(pendingProps,mode,expirationTime,key){var fiber=createFiber(Mode,pendingProps,key,mode);// TODO: The Mode fiber shouldn't have a type. It has a tag.
var type=(mode&ConcurrentMode)===NoContext?REACT_STRICT_MODE_TYPE:REACT_CONCURRENT_MODE_TYPE;fiber.elementType=type;fiber.type=type;fiber.expirationTime=expirationTime;return fiber;}function createFiberFromSuspense(pendingProps,mode,expirationTime,key){var fiber=createFiber(SuspenseComponent,pendingProps,key,mode);// TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
var type=REACT_SUSPENSE_TYPE;fiber.elementType=type;fiber.type=type;fiber.expirationTime=expirationTime;return fiber;}function createFiberFromText(content,mode,expirationTime){var fiber=createFiber(HostText,content,null,mode);fiber.expirationTime=expirationTime;return fiber;}function createFiberFromHostInstanceForDeletion(){var fiber=createFiber(HostComponent,null,null,NoContext);// TODO: These should not need a type.
fiber.elementType='DELETED';fiber.type='DELETED';return fiber;}function createFiberFromPortal(portal,mode,expirationTime){var pendingProps=portal.children!==null?portal.children:[];var fiber=createFiber(HostPortal,pendingProps,portal.key,mode);fiber.expirationTime=expirationTime;fiber.stateNode={containerInfo:portal.containerInfo,pendingChildren:null,// Used by persistent updates
implementation:portal.implementation};return fiber;}// Used for stashing WIP properties to replay failed work in DEV.
function assignFiberPropertiesInDEV(target,source){if(target===null){// This Fiber's initial properties will always be overwritten.
// We only use a Fiber to ensure the same hidden class so DEV isn't slow.
target=createFiber(IndeterminateComponent,null,null,NoContext);}// This is intentionally written as a list of all properties.
// We tried to use Object.assign() instead but this is called in
// the hottest path, and Object.assign() was too slow:
// https://github.com/facebook/react/issues/12502
// This code is DEV-only so size is not a concern.
target.tag=source.tag;target.key=source.key;target.elementType=source.elementType;target.type=source.type;target.stateNode=source.stateNode;target.return=source.return;target.child=source.child;target.sibling=source.sibling;target.index=source.index;target.ref=source.ref;target.pendingProps=source.pendingProps;target.memoizedProps=source.memoizedProps;target.updateQueue=source.updateQueue;target.memoizedState=source.memoizedState;target.firstContextDependency=source.firstContextDependency;target.mode=source.mode;target.effectTag=source.effectTag;target.nextEffect=source.nextEffect;target.firstEffect=source.firstEffect;target.lastEffect=source.lastEffect;target.expirationTime=source.expirationTime;target.childExpirationTime=source.childExpirationTime;target.alternate=source.alternate;if(enableProfilerTimer){target.actualDuration=source.actualDuration;target.actualStartTime=source.actualStartTime;target.selfBaseDuration=source.selfBaseDuration;target.treeBaseDuration=source.treeBaseDuration;}target._debugID=source._debugID;target._debugSource=source._debugSource;target._debugOwner=source._debugOwner;target._debugIsCurrentlyTiming=source._debugIsCurrentlyTiming;return target;}// TODO: This should be lifted into the renderer.
// The following attributes are only used by interaction tracing builds.
// They enable interactions to be associated with their async work,
// And expose interaction metadata to the React DevTools Profiler plugin.
// Note that these attributes are only defined when the enableSchedulerTracing flag is enabled.
// Exported FiberRoot type includes all properties,
// To avoid requiring potentially error-prone :any casts throughout the project.
// Profiling properties are only safe to access in profiling builds (when enableSchedulerTracing is true).
// The types are defined separately within this file to ensure they stay in sync.
// (We don't have to use an inline :any cast when enableSchedulerTracing is disabled.)
function createFiberRoot(containerInfo,isConcurrent,hydrate){// Cyclic construction. This cheats the type system right now because
// stateNode is any.
var uninitializedFiber=createHostRootFiber(isConcurrent);var root=void 0;if(enableSchedulerTracing){root={current:uninitializedFiber,containerInfo:containerInfo,pendingChildren:null,earliestPendingTime:NoWork,latestPendingTime:NoWork,earliestSuspendedTime:NoWork,latestSuspendedTime:NoWork,latestPingedTime:NoWork,didError:false,pendingCommitExpirationTime:NoWork,finishedWork:null,timeoutHandle:noTimeout,context:null,pendingContext:null,hydrate:hydrate,nextExpirationTimeToWorkOn:NoWork,expirationTime:NoWork,firstBatch:null,nextScheduledRoot:null,interactionThreadID:tracing.unstable_getThreadID(),memoizedInteractions:new Set(),pendingInteractionMap:new Map()};}else{root={current:uninitializedFiber,containerInfo:containerInfo,pendingChildren:null,earliestPendingTime:NoWork,latestPendingTime:NoWork,earliestSuspendedTime:NoWork,latestSuspendedTime:NoWork,latestPingedTime:NoWork,didError:false,pendingCommitExpirationTime:NoWork,finishedWork:null,timeoutHandle:noTimeout,context:null,pendingContext:null,hydrate:hydrate,nextExpirationTimeToWorkOn:NoWork,expirationTime:NoWork,firstBatch:null,nextScheduledRoot:null};}uninitializedFiber.stateNode=root;// The reason for the way the Flow types are structured in this file,
// Is to avoid needing :any casts everywhere interaction tracing fields are used.
// Unfortunately that requires an :any cast for non-interaction tracing capable builds.
// $FlowFixMe Remove this :any cast and replace it with something better.
return root;}/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */var lowPriorityWarning=function lowPriorityWarning(){};{var printWarning=function printWarning(format){for(var _len=arguments.length,args=Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}var argIndex=0;var message='Warning: '+format.replace(/%s/g,function(){return args[argIndex++];});if(typeof console!=='undefined'){console.warn(message);}try{// --- Welcome to debugging React ---
// This error was thrown as a convenience so that you can use this stack
// to find the callsite that caused this warning to fire.
throw new Error(message);}catch(x){}};lowPriorityWarning=function lowPriorityWarning(condition,format){if(format===undefined){throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning '+'message argument');}if(!condition){for(var _len2=arguments.length,args=Array(_len2>2?_len2-2:0),_key2=2;_key2<_len2;_key2++){args[_key2-2]=arguments[_key2];}printWarning.apply(undefined,[format].concat(args));}};}var lowPriorityWarning$1=lowPriorityWarning;var ReactStrictModeWarnings={discardPendingWarnings:function discardPendingWarnings(){},flushPendingDeprecationWarnings:function flushPendingDeprecationWarnings(){},flushPendingUnsafeLifecycleWarnings:function flushPendingUnsafeLifecycleWarnings(){},recordDeprecationWarnings:function recordDeprecationWarnings(fiber,instance){},recordUnsafeLifecycleWarnings:function recordUnsafeLifecycleWarnings(fiber,instance){},recordLegacyContextWarning:function recordLegacyContextWarning(fiber,instance){},flushLegacyContextWarning:function flushLegacyContextWarning(){}};{var LIFECYCLE_SUGGESTIONS={UNSAFE_componentWillMount:'componentDidMount',UNSAFE_componentWillReceiveProps:'static getDerivedStateFromProps',UNSAFE_componentWillUpdate:'componentDidUpdate'};var pendingComponentWillMountWarnings=[];var pendingComponentWillReceivePropsWarnings=[];var pendingComponentWillUpdateWarnings=[];var pendingUnsafeLifecycleWarnings=new Map();var pendingLegacyContextWarning=new Map();// Tracks components we have already warned about.
var didWarnAboutDeprecatedLifecycles=new Set();var didWarnAboutUnsafeLifecycles=new Set();var didWarnAboutLegacyContext=new Set();var setToSortedString=function setToSortedString(set){var array=[];set.forEach(function(value){array.push(value);});return array.sort().join(', ');};ReactStrictModeWarnings.discardPendingWarnings=function(){pendingComponentWillMountWarnings=[];pendingComponentWillReceivePropsWarnings=[];pendingComponentWillUpdateWarnings=[];pendingUnsafeLifecycleWarnings=new Map();pendingLegacyContextWarning=new Map();};ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings=function(){pendingUnsafeLifecycleWarnings.forEach(function(lifecycleWarningsMap,strictRoot){var lifecyclesWarningMesages=[];Object.keys(lifecycleWarningsMap).forEach(function(lifecycle){var lifecycleWarnings=lifecycleWarningsMap[lifecycle];if(lifecycleWarnings.length>0){var componentNames=new Set();lifecycleWarnings.forEach(function(fiber){componentNames.add(getComponentName(fiber.type)||'Component');didWarnAboutUnsafeLifecycles.add(fiber.type);});var formatted=lifecycle.replace('UNSAFE_','');var suggestion=LIFECYCLE_SUGGESTIONS[lifecycle];var sortedComponentNames=setToSortedString(componentNames);lifecyclesWarningMesages.push(formatted+': Please update the following components to use '+(suggestion+' instead: '+sortedComponentNames));}});if(lifecyclesWarningMesages.length>0){var strictRootComponentStack=getStackByFiberInDevAndProd(strictRoot);warningWithoutStack$1(false,'Unsafe lifecycle methods were found within a strict-mode tree:%s'+'\n\n%s'+'\n\nLearn more about this warning here:'+'\nhttps://fb.me/react-strict-mode-warnings',strictRootComponentStack,lifecyclesWarningMesages.join('\n\n'));}});pendingUnsafeLifecycleWarnings=new Map();};var findStrictRoot=function findStrictRoot(fiber){var maybeStrictRoot=null;var node=fiber;while(node!==null){if(node.mode&StrictMode){maybeStrictRoot=node;}node=node.return;}return maybeStrictRoot;};ReactStrictModeWarnings.flushPendingDeprecationWarnings=function(){if(pendingComponentWillMountWarnings.length>0){var uniqueNames=new Set();pendingComponentWillMountWarnings.forEach(function(fiber){uniqueNames.add(getComponentName(fiber.type)||'Component');didWarnAboutDeprecatedLifecycles.add(fiber.type);});var sortedNames=setToSortedString(uniqueNames);lowPriorityWarning$1(false,'componentWillMount is deprecated and will be removed in the next major version. '+'Use componentDidMount instead. As a temporary workaround, '+'you can rename to UNSAFE_componentWillMount.'+'\n\nPlease update the following components: %s'+'\n\nLearn more about this warning here:'+'\nhttps://fb.me/react-async-component-lifecycle-hooks',sortedNames);pendingComponentWillMountWarnings=[];}if(pendingComponentWillReceivePropsWarnings.length>0){var _uniqueNames=new Set();pendingComponentWillReceivePropsWarnings.forEach(function(fiber){_uniqueNames.add(getComponentName(fiber.type)||'Component');didWarnAboutDeprecatedLifecycles.add(fiber.type);});var _sortedNames=setToSortedString(_uniqueNames);lowPriorityWarning$1(false,'componentWillReceiveProps is deprecated and will be removed in the next major version. '+'Use static getDerivedStateFromProps instead.'+'\n\nPlease update the following components: %s'+'\n\nLearn more about this warning here:'+'\nhttps://fb.me/react-async-component-lifecycle-hooks',_sortedNames);pendingComponentWillReceivePropsWarnings=[];}if(pendingComponentWillUpdateWarnings.length>0){var _uniqueNames2=new Set();pendingComponentWillUpdateWarnings.forEach(function(fiber){_uniqueNames2.add(getComponentName(fiber.type)||'Component');didWarnAboutDeprecatedLifecycles.add(fiber.type);});var _sortedNames2=setToSortedString(_uniqueNames2);lowPriorityWarning$1(false,'componentWillUpdate is deprecated and will be removed in the next major version. '+'Use componentDidUpdate instead. As a temporary workaround, '+'you can rename to UNSAFE_componentWillUpdate.'+'\n\nPlease update the following components: %s'+'\n\nLearn more about this warning here:'+'\nhttps://fb.me/react-async-component-lifecycle-hooks',_sortedNames2);pendingComponentWillUpdateWarnings=[];}};ReactStrictModeWarnings.recordDeprecationWarnings=function(fiber,instance){// Dedup strategy: Warn once per component.
if(didWarnAboutDeprecatedLifecycles.has(fiber.type)){return;}// Don't warn about react-lifecycles-compat polyfilled components.
if(typeof instance.componentWillMount==='function'&&instance.componentWillMount.__suppressDeprecationWarning!==true){pendingComponentWillMountWarnings.push(fiber);}if(typeof instance.componentWillReceiveProps==='function'&&instance.componentWillReceiveProps.__suppressDeprecationWarning!==true){pendingComponentWillReceivePropsWarnings.push(fiber);}if(typeof instance.componentWillUpdate==='function'&&instance.componentWillUpdate.__suppressDeprecationWarning!==true){pendingComponentWillUpdateWarnings.push(fiber);}};ReactStrictModeWarnings.recordUnsafeLifecycleWarnings=function(fiber,instance){var strictRoot=findStrictRoot(fiber);if(strictRoot===null){warningWithoutStack$1(false,'Expected to find a StrictMode component in a strict mode tree. '+'This error is likely caused by a bug in React. Please file an issue.');return;}// Dedup strategy: Warn once per component.
// This is difficult to track any other way since component names
// are often vague and are likely to collide between 3rd party libraries.
// An expand property is probably okay to use here since it's DEV-only,
// and will only be set in the event of serious warnings.
if(didWarnAboutUnsafeLifecycles.has(fiber.type)){return;}var warningsForRoot=void 0;if(!pendingUnsafeLifecycleWarnings.has(strictRoot)){warningsForRoot={UNSAFE_componentWillMount:[],UNSAFE_componentWillReceiveProps:[],UNSAFE_componentWillUpdate:[]};pendingUnsafeLifecycleWarnings.set(strictRoot,warningsForRoot);}else{warningsForRoot=pendingUnsafeLifecycleWarnings.get(strictRoot);}var unsafeLifecycles=[];if(typeof instance.componentWillMount==='function'&&instance.componentWillMount.__suppressDeprecationWarning!==true||typeof instance.UNSAFE_componentWillMount==='function'){unsafeLifecycles.push('UNSAFE_componentWillMount');}if(typeof instance.componentWillReceiveProps==='function'&&instance.componentWillReceiveProps.__suppressDeprecationWarning!==true||typeof instance.UNSAFE_componentWillReceiveProps==='function'){unsafeLifecycles.push('UNSAFE_componentWillReceiveProps');}if(typeof instance.componentWillUpdate==='function'&&instance.componentWillUpdate.__suppressDeprecationWarning!==true||typeof instance.UNSAFE_componentWillUpdate==='function'){unsafeLifecycles.push('UNSAFE_componentWillUpdate');}if(unsafeLifecycles.length>0){unsafeLifecycles.forEach(function(lifecycle){warningsForRoot[lifecycle].push(fiber);});}};ReactStrictModeWarnings.recordLegacyContextWarning=function(fiber,instance){var strictRoot=findStrictRoot(fiber);if(strictRoot===null){warningWithoutStack$1(false,'Expected to find a StrictMode component in a strict mode tree. '+'This error is likely caused by a bug in React. Please file an issue.');return;}// Dedup strategy: Warn once per component.
if(didWarnAboutLegacyContext.has(fiber.type)){return;}var warningsForRoot=pendingLegacyContextWarning.get(strictRoot);if(fiber.type.contextTypes!=null||fiber.type.childContextTypes!=null||instance!==null&&typeof instance.getChildContext==='function'){if(warningsForRoot===undefined){warningsForRoot=[];pendingLegacyContextWarning.set(strictRoot,warningsForRoot);}warningsForRoot.push(fiber);}};ReactStrictModeWarnings.flushLegacyContextWarning=function(){pendingLegacyContextWarning.forEach(function(fiberArray,strictRoot){var uniqueNames=new Set();fiberArray.forEach(function(fiber){uniqueNames.add(getComponentName(fiber.type)||'Component');didWarnAboutLegacyContext.add(fiber.type);});var sortedNames=setToSortedString(uniqueNames);var strictRootComponentStack=getStackByFiberInDevAndProd(strictRoot);warningWithoutStack$1(false,'Legacy context API has been detected within a strict-mode tree: %s'+'\n\nPlease update the following components: %s'+'\n\nLearn more about this warning here:'+'\nhttps://fb.me/react-strict-mode-warnings',strictRootComponentStack,sortedNames);});};}// This lets us hook into Fiber to debug what it's doing.
// See https://github.com/facebook/react/pull/8033.
// This is not part of the public API, not even for React DevTools.
// You may only inject a debugTool if you work on React Fiber itself.
var ReactFiberInstrumentation={debugTool:null};var ReactFiberInstrumentation_1=ReactFiberInstrumentation;// TODO: Offscreen updates should never suspend. However, a promise that
// suspended inside an offscreen subtree should be able to ping at the priority
// of the outer render.
function markPendingPriorityLevel(root,expirationTime){// If there's a gap between completing a failed root and retrying it,
// additional updates may be scheduled. Clear `didError`, in case the update
// is sufficient to fix the error.
root.didError=false;// Update the latest and earliest pending times
var earliestPendingTime=root.earliestPendingTime;if(earliestPendingTime===NoWork){// No other pending updates.
root.earliestPendingTime=root.latestPendingTime=expirationTime;}else{if(earliestPendingTime>expirationTime){// This is the earliest pending update.
root.earliestPendingTime=expirationTime;}else{var latestPendingTime=root.latestPendingTime;if(latestPendingTime<expirationTime){// This is the latest pending update
root.latestPendingTime=expirationTime;}}}findNextExpirationTimeToWorkOn(expirationTime,root);}function markCommittedPriorityLevels(root,earliestRemainingTime){root.didError=false;if(earliestRemainingTime===NoWork){// Fast path. There's no remaining work. Clear everything.
root.earliestPendingTime=NoWork;root.latestPendingTime=NoWork;root.earliestSuspendedTime=NoWork;root.latestSuspendedTime=NoWork;root.latestPingedTime=NoWork;findNextExpirationTimeToWorkOn(NoWork,root);return;}// Let's see if the previous latest known pending level was just flushed.
var latestPendingTime=root.latestPendingTime;if(latestPendingTime!==NoWork){if(latestPendingTime<earliestRemainingTime){// We've flushed all the known pending levels.
root.earliestPendingTime=root.latestPendingTime=NoWork;}else{var earliestPendingTime=root.earliestPendingTime;if(earliestPendingTime<earliestRemainingTime){// We've flushed the earliest known pending level. Set this to the
// latest pending time.
root.earliestPendingTime=root.latestPendingTime;}}}// Now let's handle the earliest remaining level in the whole tree. We need to
// decide whether to treat it as a pending level or as suspended. Check
// it falls within the range of known suspended levels.
var earliestSuspendedTime=root.earliestSuspendedTime;if(earliestSuspendedTime===NoWork){// There's no suspended work. Treat the earliest remaining level as a
// pending level.
markPendingPriorityLevel(root,earliestRemainingTime);findNextExpirationTimeToWorkOn(NoWork,root);return;}var latestSuspendedTime=root.latestSuspendedTime;if(earliestRemainingTime>latestSuspendedTime){// The earliest remaining level is later than all the suspended work. That
// means we've flushed all the suspended work.
root.earliestSuspendedTime=NoWork;root.latestSuspendedTime=NoWork;root.latestPingedTime=NoWork;// There's no suspended work. Treat the earliest remaining level as a
// pending level.
markPendingPriorityLevel(root,earliestRemainingTime);findNextExpirationTimeToWorkOn(NoWork,root);return;}if(earliestRemainingTime<earliestSuspendedTime){// The earliest remaining time is earlier than all the suspended work.
// Treat it as a pending update.
markPendingPriorityLevel(root,earliestRemainingTime);findNextExpirationTimeToWorkOn(NoWork,root);return;}// The earliest remaining time falls within the range of known suspended
// levels. We should treat this as suspended work.
findNextExpirationTimeToWorkOn(NoWork,root);}function hasLowerPriorityWork(root,erroredExpirationTime){var latestPendingTime=root.latestPendingTime;var latestSuspendedTime=root.latestSuspendedTime;var latestPingedTime=root.latestPingedTime;return latestPendingTime!==NoWork&&latestPendingTime>erroredExpirationTime||latestSuspendedTime!==NoWork&&latestSuspendedTime>erroredExpirationTime||latestPingedTime!==NoWork&&latestPingedTime>erroredExpirationTime;}function isPriorityLevelSuspended(root,expirationTime){var earliestSuspendedTime=root.earliestSuspendedTime;var latestSuspendedTime=root.latestSuspendedTime;return earliestSuspendedTime!==NoWork&&expirationTime>=earliestSuspendedTime&&expirationTime<=latestSuspendedTime;}function markSuspendedPriorityLevel(root,suspendedTime){root.didError=false;clearPing(root,suspendedTime);// First, check the known pending levels and update them if needed.
var earliestPendingTime=root.earliestPendingTime;var latestPendingTime=root.latestPendingTime;if(earliestPendingTime===suspendedTime){if(latestPendingTime===suspendedTime){// Both known pending levels were suspended. Clear them.
root.earliestPendingTime=root.latestPendingTime=NoWork;}else{// The earliest pending level was suspended. Clear by setting it to the
// latest pending level.
root.earliestPendingTime=latestPendingTime;}}else if(latestPendingTime===suspendedTime){// The latest pending level was suspended. Clear by setting it to the
// latest pending level.
root.latestPendingTime=earliestPendingTime;}// Finally, update the known suspended levels.
var earliestSuspendedTime=root.earliestSuspendedTime;var latestSuspendedTime=root.latestSuspendedTime;if(earliestSuspendedTime===NoWork){// No other suspended levels.
root.earliestSuspendedTime=root.latestSuspendedTime=suspendedTime;}else{if(earliestSuspendedTime>suspendedTime){// This is the earliest suspended level.
root.earliestSuspendedTime=suspendedTime;}else if(latestSuspendedTime<suspendedTime){// This is the latest suspended level
root.latestSuspendedTime=suspendedTime;}}findNextExpirationTimeToWorkOn(suspendedTime,root);}function markPingedPriorityLevel(root,pingedTime){root.didError=false;// TODO: When we add back resuming, we need to ensure the progressed work
// is thrown out and not reused during the restarted render. One way to
// invalidate the progressed work is to restart at expirationTime + 1.
var latestPingedTime=root.latestPingedTime;if(latestPingedTime===NoWork||latestPingedTime<pingedTime){root.latestPingedTime=pingedTime;}findNextExpirationTimeToWorkOn(pingedTime,root);}function clearPing(root,completedTime){// TODO: Track whether the root was pinged during the render phase. If so,
// we need to make sure we don't lose track of it.
var latestPingedTime=root.latestPingedTime;if(latestPingedTime!==NoWork&&latestPingedTime<=completedTime){root.latestPingedTime=NoWork;}}function findEarliestOutstandingPriorityLevel(root,renderExpirationTime){var earliestExpirationTime=renderExpirationTime;var earliestPendingTime=root.earliestPendingTime;var earliestSuspendedTime=root.earliestSuspendedTime;if(earliestExpirationTime===NoWork||earliestPendingTime!==NoWork&&earliestPendingTime<earliestExpirationTime){earliestExpirationTime=earliestPendingTime;}if(earliestExpirationTime===NoWork||earliestSuspendedTime!==NoWork&&earliestSuspendedTime<earliestExpirationTime){earliestExpirationTime=earliestSuspendedTime;}return earliestExpirationTime;}function didExpireAtExpirationTime(root,currentTime){var expirationTime=root.expirationTime;if(expirationTime!==NoWork&&currentTime>=expirationTime){// The root has expired. Flush all work up to the current time.
root.nextExpirationTimeToWorkOn=currentTime;}}function findNextExpirationTimeToWorkOn(completedExpirationTime,root){var earliestSuspendedTime=root.earliestSuspendedTime;var latestSuspendedTime=root.latestSuspendedTime;var earliestPendingTime=root.earliestPendingTime;var latestPingedTime=root.latestPingedTime;// Work on the earliest pending time. Failing that, work on the latest
// pinged time.
var nextExpirationTimeToWorkOn=earliestPendingTime!==NoWork?earliestPendingTime:latestPingedTime;// If there is no pending or pinged work, check if there's suspended work
// that's lower priority than what we just completed.
if(nextExpirationTimeToWorkOn===NoWork&&(completedExpirationTime===NoWork||latestSuspendedTime>completedExpirationTime)){// The lowest priority suspended work is the work most likely to be
// committed next. Let's start rendering it again, so that if it times out,
// it's ready to commit.
nextExpirationTimeToWorkOn=latestSuspendedTime;}var expirationTime=nextExpirationTimeToWorkOn;if(expirationTime!==NoWork&&earliestSuspendedTime!==NoWork&&earliestSuspendedTime<expirationTime){// Expire using the earliest known expiration time.
expirationTime=earliestSuspendedTime;}root.nextExpirationTimeToWorkOn=nextExpirationTimeToWorkOn;root.expirationTime=expirationTime;}// UpdateQueue is a linked list of prioritized updates.
//
// Like fibers, update queues come in pairs: a current queue, which represents
// the visible state of the screen, and a work-in-progress queue, which is
// can be mutated and processed asynchronously before it is committed â a form
// of double buffering. If a work-in-progress render is discarded before
// finishing, we create a new work-in-progress by cloning the current queue.
//
// Both queues share a persistent, singly-linked list structure. To schedule an
// update, we append it to the end of both queues. Each queue maintains a
// pointer to first update in the persistent list that hasn't been processed.
// The work-in-progress pointer always has a position equal to or greater than
// the current queue, since we always work on that one. The current queue's
// pointer is only updated during the commit phase, when we swap in the
// work-in-progress.
//
// For example:
//
//   Current pointer:           A - B - C - D - E - F
//   Work-in-progress pointer:              D - E - F
//                                          ^
//                                          The work-in-progress queue has
//                                          processed more updates than current.
//
// The reason we append to both queues is because otherwise we might drop
// updates without ever processing them. For example, if we only add updates to
// the work-in-progress queue, some updates could be lost whenever a work-in
// -progress render restarts by cloning from current. Similarly, if we only add
// updates to the current queue, the updates will be lost whenever an already
// in-progress queue commits and swaps with the current queue. However, by
// adding to both queues, we guarantee that the update will be part of the next
// work-in-progress. (And because the work-in-progress queue becomes the
// current queue once it commits, there's no danger of applying the same
// update twice.)
//
// Prioritization
// --------------
//
// Updates are not sorted by priority, but by insertion; new updates are always
// appended to the end of the list.
//
// The priority is still important, though. When processing the update queue
// during the render phase, only the updates with sufficient priority are
// included in the result. If we skip an update because it has insufficient
// priority, it remains in the queue to be processed later, during a lower
// priority render. Crucially, all updates subsequent to a skipped update also
// remain in the queue *regardless of their priority*. That means high priority
// updates are sometimes processed twice, at two separate priorities. We also
// keep track of a base state, that represents the state before the first
// update in the queue is applied.
//
// For example:
//
//   Given a base state of '', and the following queue of updates
//
//     A1 - B2 - C1 - D2
//
//   where the number indicates the priority, and the update is applied to the
//   previous state by appending a letter, React will process these updates as
//   two separate renders, one per distinct priority level:
//
//   First render, at priority 1:
//     Base state: ''
//     Updates: [A1, C1]
//     Result state: 'AC'
//
//   Second render, at priority 2:
//     Base state: 'A'            <-  The base state does not include C1,
//                                    because B2 was skipped.
//     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2
//     Result state: 'ABCD'
//
// Because we process updates in insertion order, and rebase high priority
// updates when preceding updates are skipped, the final result is deterministic
// regardless of priority. Intermediate state may vary according to system
// resources, but the final state is always the same.
var UpdateState=0;var ReplaceState=1;var ForceUpdate=2;var CaptureUpdate=3;// Global state that is reset at the beginning of calling `processUpdateQueue`.
// It should only be read right after calling `processUpdateQueue`, via
// `checkHasForceUpdateAfterProcessing`.
var hasForceUpdate=false;var didWarnUpdateInsideUpdate=void 0;var currentlyProcessingQueue=void 0;var resetCurrentlyProcessingQueue=void 0;{didWarnUpdateInsideUpdate=false;currentlyProcessingQueue=null;resetCurrentlyProcessingQueue=function resetCurrentlyProcessingQueue(){currentlyProcessingQueue=null;};}function createUpdateQueue(baseState){var queue={baseState:baseState,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null};return queue;}function cloneUpdateQueue(currentQueue){var queue={baseState:currentQueue.baseState,firstUpdate:currentQueue.firstUpdate,lastUpdate:currentQueue.lastUpdate,// TODO: With resuming, if we bail out and resuse the child tree, we should
// keep these effects.
firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null};return queue;}function createUpdate(expirationTime){return{expirationTime:expirationTime,tag:UpdateState,payload:null,callback:null,next:null,nextEffect:null};}function appendUpdateToQueue(queue,update){// Append the update to the end of the list.
if(queue.lastUpdate===null){// Queue is empty
queue.firstUpdate=queue.lastUpdate=update;}else{queue.lastUpdate.next=update;queue.lastUpdate=update;}}function enqueueUpdate(fiber,update){// Update queues are created lazily.
var alternate=fiber.alternate;var queue1=void 0;var queue2=void 0;if(alternate===null){// There's only one fiber.
queue1=fiber.updateQueue;queue2=null;if(queue1===null){queue1=fiber.updateQueue=createUpdateQueue(fiber.memoizedState);}}else{// There are two owners.
queue1=fiber.updateQueue;queue2=alternate.updateQueue;if(queue1===null){if(queue2===null){// Neither fiber has an update queue. Create new ones.
queue1=fiber.updateQueue=createUpdateQueue(fiber.memoizedState);queue2=alternate.updateQueue=createUpdateQueue(alternate.memoizedState);}else{// Only one fiber has an update queue. Clone to create a new one.
queue1=fiber.updateQueue=cloneUpdateQueue(queue2);}}else{if(queue2===null){// Only one fiber has an update queue. Clone to create a new one.
queue2=alternate.updateQueue=cloneUpdateQueue(queue1);}else{// Both owners have an update queue.
}}}if(queue2===null||queue1===queue2){// There's only a single queue.
appendUpdateToQueue(queue1,update);}else{// There are two queues. We need to append the update to both queues,
// while accounting for the persistent structure of the list â we don't
// want the same update to be added multiple times.
if(queue1.lastUpdate===null||queue2.lastUpdate===null){// One of the queues is not empty. We must add the update to both queues.
appendUpdateToQueue(queue1,update);appendUpdateToQueue(queue2,update);}else{// Both queues are non-empty. The last update is the same in both lists,
// because of structural sharing. So, only append to one of the lists.
appendUpdateToQueue(queue1,update);// But we still need to update the `lastUpdate` pointer of queue2.
queue2.lastUpdate=update;}}{if(fiber.tag===ClassComponent&&(currentlyProcessingQueue===queue1||queue2!==null&&currentlyProcessingQueue===queue2)&&!didWarnUpdateInsideUpdate){warningWithoutStack$1(false,'An update (setState, replaceState, or forceUpdate) was scheduled '+'from inside an update function. Update functions should be pure, '+'with zero side-effects. Consider using componentDidUpdate or a '+'callback.');didWarnUpdateInsideUpdate=true;}}}function enqueueCapturedUpdate(workInProgress,update){// Captured updates go into a separate list, and only on the work-in-
// progress queue.
var workInProgressQueue=workInProgress.updateQueue;if(workInProgressQueue===null){workInProgressQueue=workInProgress.updateQueue=createUpdateQueue(workInProgress.memoizedState);}else{// TODO: I put this here rather than createWorkInProgress so that we don't
// clone the queue unnecessarily. There's probably a better way to
// structure this.
workInProgressQueue=ensureWorkInProgressQueueIsAClone(workInProgress,workInProgressQueue);}// Append the update to the end of the list.
if(workInProgressQueue.lastCapturedUpdate===null){// This is the first render phase update
workInProgressQueue.firstCapturedUpdate=workInProgressQueue.lastCapturedUpdate=update;}else{workInProgressQueue.lastCapturedUpdate.next=update;workInProgressQueue.lastCapturedUpdate=update;}}function ensureWorkInProgressQueueIsAClone(workInProgress,queue){var current=workInProgress.alternate;if(current!==null){// If the work-in-progress queue is equal to the current queue,
// we need to clone it first.
if(queue===current.updateQueue){queue=workInProgress.updateQueue=cloneUpdateQueue(queue);}}return queue;}function getStateFromUpdate(workInProgress,queue,update,prevState,nextProps,instance){switch(update.tag){case ReplaceState:{var _payload=update.payload;if(typeof _payload==='function'){// Updater function
{if(debugRenderPhaseSideEffects||debugRenderPhaseSideEffectsForStrictMode&&workInProgress.mode&StrictMode){_payload.call(instance,prevState,nextProps);}}return _payload.call(instance,prevState,nextProps);}// State object
return _payload;}case CaptureUpdate:{workInProgress.effectTag=workInProgress.effectTag&~ShouldCapture|DidCapture;}// Intentional fallthrough
case UpdateState:{var _payload2=update.payload;var partialState=void 0;if(typeof _payload2==='function'){// Updater function
{if(debugRenderPhaseSideEffects||debugRenderPhaseSideEffectsForStrictMode&&workInProgress.mode&StrictMode){_payload2.call(instance,prevState,nextProps);}}partialState=_payload2.call(instance,prevState,nextProps);}else{// Partial state object
partialState=_payload2;}if(partialState===null||partialState===undefined){// Null and undefined are treated as no-ops.
return prevState;}// Merge the partial state and the previous state.
return _assign({},prevState,partialState);}case ForceUpdate:{hasForceUpdate=true;return prevState;}}return prevState;}function processUpdateQueue(workInProgress,queue,props,instance,renderExpirationTime){hasForceUpdate=false;queue=ensureWorkInProgressQueueIsAClone(workInProgress,queue);{currentlyProcessingQueue=queue;}// These values may change as we process the queue.
var newBaseState=queue.baseState;var newFirstUpdate=null;var newExpirationTime=NoWork;// Iterate through the list of updates to compute the result.
var update=queue.firstUpdate;var resultState=newBaseState;while(update!==null){var updateExpirationTime=update.expirationTime;if(updateExpirationTime>renderExpirationTime){// This update does not have sufficient priority. Skip it.
if(newFirstUpdate===null){// This is the first skipped update. It will be the first update in
// the new list.
newFirstUpdate=update;// Since this is the first update that was skipped, the current result
// is the new base state.
newBaseState=resultState;}// Since this update will remain in the list, update the remaining
// expiration time.
if(newExpirationTime===NoWork||newExpirationTime>updateExpirationTime){newExpirationTime=updateExpirationTime;}}else{// This update does have sufficient priority. Process it and compute
// a new result.
resultState=getStateFromUpdate(workInProgress,queue,update,resultState,props,instance);var _callback=update.callback;if(_callback!==null){workInProgress.effectTag|=Callback;// Set this to null, in case it was mutated during an aborted render.
update.nextEffect=null;if(queue.lastEffect===null){queue.firstEffect=queue.lastEffect=update;}else{queue.lastEffect.nextEffect=update;queue.lastEffect=update;}}}// Continue to the next update.
update=update.next;}// Separately, iterate though the list of captured updates.
var newFirstCapturedUpdate=null;update=queue.firstCapturedUpdate;while(update!==null){var _updateExpirationTime=update.expirationTime;if(_updateExpirationTime>renderExpirationTime){// This update does not have sufficient priority. Skip it.
if(newFirstCapturedUpdate===null){// This is the first skipped captured update. It will be the first
// update in the new list.
newFirstCapturedUpdate=update;// If this is the first update that was skipped, the current result is
// the new base state.
if(newFirstUpdate===null){newBaseState=resultState;}}// Since this update will remain in the list, update the remaining
// expiration time.
if(newExpirationTime===NoWork||newExpirationTime>_updateExpirationTime){newExpirationTime=_updateExpirationTime;}}else{// This update does have sufficient priority. Process it and compute
// a new result.
resultState=getStateFromUpdate(workInProgress,queue,update,resultState,props,instance);var _callback2=update.callback;if(_callback2!==null){workInProgress.effectTag|=Callback;// Set this to null, in case it was mutated during an aborted render.
update.nextEffect=null;if(queue.lastCapturedEffect===null){queue.firstCapturedEffect=queue.lastCapturedEffect=update;}else{queue.lastCapturedEffect.nextEffect=update;queue.lastCapturedEffect=update;}}}update=update.next;}if(newFirstUpdate===null){queue.lastUpdate=null;}if(newFirstCapturedUpdate===null){queue.lastCapturedUpdate=null;}else{workInProgress.effectTag|=Callback;}if(newFirstUpdate===null&&newFirstCapturedUpdate===null){// We processed every update, without skipping. That means the new base
// state is the same as the result state.
newBaseState=resultState;}queue.baseState=newBaseState;queue.firstUpdate=newFirstUpdate;queue.firstCapturedUpdate=newFirstCapturedUpdate;// Set the remaining expiration time to be whatever is remaining in the queue.
// This should be fine because the only two other things that contribute to
// expiration time are props and context. We're already in the middle of the
// begin phase by the time we start processing the queue, so we've already
// dealt with the props. Context in components that specify
// shouldComponentUpdate is tricky; but we'll have to account for
// that regardless.
workInProgress.expirationTime=newExpirationTime;workInProgress.memoizedState=resultState;{currentlyProcessingQueue=null;}}function callCallback(callback,context){!(typeof callback==='function')?invariant(false,'Invalid argument passed as callback. Expected a function. Instead received: %s',callback):void 0;callback.call(context);}function resetHasForceUpdateBeforeProcessing(){hasForceUpdate=false;}function checkHasForceUpdateAfterProcessing(){return hasForceUpdate;}function commitUpdateQueue(finishedWork,finishedQueue,instance,renderExpirationTime){// If the finished render included captured updates, and there are still
// lower priority updates left over, we need to keep the captured updates
// in the queue so that they are rebased and not dropped once we process the
// queue again at the lower priority.
if(finishedQueue.firstCapturedUpdate!==null){// Join the captured update list to the end of the normal list.
if(finishedQueue.lastUpdate!==null){finishedQueue.lastUpdate.next=finishedQueue.firstCapturedUpdate;finishedQueue.lastUpdate=finishedQueue.lastCapturedUpdate;}// Clear the list of captured updates.
finishedQueue.firstCapturedUpdate=finishedQueue.lastCapturedUpdate=null;}// Commit the effects
commitUpdateEffects(finishedQueue.firstEffect,instance);finishedQueue.firstEffect=finishedQueue.lastEffect=null;commitUpdateEffects(finishedQueue.firstCapturedEffect,instance);finishedQueue.firstCapturedEffect=finishedQueue.lastCapturedEffect=null;}function commitUpdateEffects(effect,instance){while(effect!==null){var _callback3=effect.callback;if(_callback3!==null){effect.callback=null;callCallback(_callback3,instance);}effect=effect.nextEffect;}}function createCapturedValue(value,source){// If the value is an error, call this function immediately after it is thrown
// so the stack is accurate.
return{value:value,source:source,stack:getStackByFiberInDevAndProd(source)};}var valueCursor=createCursor(null);var rendererSigil=void 0;{// Use this to detect multiple renderers using the same context
rendererSigil={};}var currentlyRenderingFiber=null;var lastContextDependency=null;var lastContextWithAllBitsObserved=null;function resetContextDependences(){// This is called right before React yields execution, to ensure `readContext`
// cannot be called outside the render phase.
currentlyRenderingFiber=null;lastContextDependency=null;lastContextWithAllBitsObserved=null;}function pushProvider(providerFiber,nextValue){var context=providerFiber.type._context;if(isPrimaryRenderer){push(valueCursor,context._currentValue,providerFiber);context._currentValue=nextValue;{!(context._currentRenderer===undefined||context._currentRenderer===null||context._currentRenderer===rendererSigil)?warningWithoutStack$1(false,'Detected multiple renderers concurrently rendering the '+'same context provider. This is currently unsupported.'):void 0;context._currentRenderer=rendererSigil;}}else{push(valueCursor,context._currentValue2,providerFiber);context._currentValue2=nextValue;{!(context._currentRenderer2===undefined||context._currentRenderer2===null||context._currentRenderer2===rendererSigil)?warningWithoutStack$1(false,'Detected multiple renderers concurrently rendering the '+'same context provider. This is currently unsupported.'):void 0;context._currentRenderer2=rendererSigil;}}}function popProvider(providerFiber){var currentValue=valueCursor.current;pop(valueCursor,providerFiber);var context=providerFiber.type._context;if(isPrimaryRenderer){context._currentValue=currentValue;}else{context._currentValue2=currentValue;}}function calculateChangedBits(context,newValue,oldValue){// Use Object.is to compare the new context value to the old value. Inlined
// Object.is polyfill.
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
if(oldValue===newValue&&(oldValue!==0||1/oldValue===1/newValue)||oldValue!==oldValue&&newValue!==newValue// eslint-disable-line no-self-compare
){// No change
return 0;}else{var changedBits=typeof context._calculateChangedBits==='function'?context._calculateChangedBits(oldValue,newValue):maxSigned31BitInt;{!((changedBits&maxSigned31BitInt)===changedBits)?warning$1(false,'calculateChangedBits: Expected the return value to be a '+'31-bit integer. Instead received: %s',changedBits):void 0;}return changedBits|0;}}function propagateContextChange(workInProgress,context,changedBits,renderExpirationTime){var fiber=workInProgress.child;if(fiber!==null){// Set the return pointer of the child to the work-in-progress fiber.
fiber.return=workInProgress;}while(fiber!==null){var nextFiber=void 0;// Visit this fiber.
var dependency=fiber.firstContextDependency;if(dependency!==null){do{// Check if the context matches.
if(dependency.context===context&&(dependency.observedBits&changedBits)!==0){// Match! Schedule an update on this fiber.
if(fiber.tag===ClassComponent){// Schedule a force update on the work-in-progress.
var update=createUpdate(renderExpirationTime);update.tag=ForceUpdate;// TODO: Because we don't have a work-in-progress, this will add the
// update to the current fiber, too, which means it will persist even if
// this render is thrown away. Since it's a race condition, not sure it's
// worth fixing.
enqueueUpdate(fiber,update);}if(fiber.expirationTime===NoWork||fiber.expirationTime>renderExpirationTime){fiber.expirationTime=renderExpirationTime;}var alternate=fiber.alternate;if(alternate!==null&&(alternate.expirationTime===NoWork||alternate.expirationTime>renderExpirationTime)){alternate.expirationTime=renderExpirationTime;}// Update the child expiration time of all the ancestors, including
// the alternates.
var node=fiber.return;while(node!==null){alternate=node.alternate;if(node.childExpirationTime===NoWork||node.childExpirationTime>renderExpirationTime){node.childExpirationTime=renderExpirationTime;if(alternate!==null&&(alternate.childExpirationTime===NoWork||alternate.childExpirationTime>renderExpirationTime)){alternate.childExpirationTime=renderExpirationTime;}}else if(alternate!==null&&(alternate.childExpirationTime===NoWork||alternate.childExpirationTime>renderExpirationTime)){alternate.childExpirationTime=renderExpirationTime;}else{// Neither alternate was updated, which means the rest of the
// ancestor path already has sufficient priority.
break;}node=node.return;}}nextFiber=fiber.child;dependency=dependency.next;}while(dependency!==null);}else if(fiber.tag===ContextProvider){// Don't scan deeper if this is a matching provider
nextFiber=fiber.type===workInProgress.type?null:fiber.child;}else{// Traverse down.
nextFiber=fiber.child;}if(nextFiber!==null){// Set the return pointer of the child to the work-in-progress fiber.
nextFiber.return=fiber;}else{// No child. Traverse to next sibling.
nextFiber=fiber;while(nextFiber!==null){if(nextFiber===workInProgress){// We're back to the root of this subtree. Exit.
nextFiber=null;break;}var sibling=nextFiber.sibling;if(sibling!==null){// Set the return pointer of the sibling to the work-in-progress fiber.
sibling.return=nextFiber.return;nextFiber=sibling;break;}// No more siblings. Traverse up.
nextFiber=nextFiber.return;}}fiber=nextFiber;}}function prepareToReadContext(workInProgress,renderExpirationTime){currentlyRenderingFiber=workInProgress;lastContextDependency=null;lastContextWithAllBitsObserved=null;// Reset the work-in-progress list
workInProgress.firstContextDependency=null;}function readContext(context,observedBits){if(lastContextWithAllBitsObserved===context){// Nothing to do. We already observe everything in this context.
}else if(observedBits===false||observedBits===0){// Do not observe any updates.
}else{var resolvedObservedBits=void 0;// Avoid deopting on observable arguments or heterogeneous types.
if(typeof observedBits!=='number'||observedBits===maxSigned31BitInt){// Observe all updates.
lastContextWithAllBitsObserved=context;resolvedObservedBits=maxSigned31BitInt;}else{resolvedObservedBits=observedBits;}var contextItem={context:context,observedBits:resolvedObservedBits,next:null};if(lastContextDependency===null){!(currentlyRenderingFiber!==null)?invariant(false,'Context can only be read while React is rendering, e.g. inside the render method or getDerivedStateFromProps.'):void 0;// This is the first dependency in the list
currentlyRenderingFiber.firstContextDependency=lastContextDependency=contextItem;}else{// Append a new context item.
lastContextDependency=lastContextDependency.next=contextItem;}}return isPrimaryRenderer?context._currentValue:context._currentValue2;}var NO_CONTEXT={};var contextStackCursor$1=createCursor(NO_CONTEXT);var contextFiberStackCursor=createCursor(NO_CONTEXT);var rootInstanceStackCursor=createCursor(NO_CONTEXT);function requiredContext(c){!(c!==NO_CONTEXT)?invariant(false,'Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.'):void 0;return c;}function getRootHostContainer(){var rootInstance=requiredContext(rootInstanceStackCursor.current);return rootInstance;}function pushHostContainer(fiber,nextRootInstance){// Push current root instance onto the stack;
// This allows us to reset root when portals are popped.
push(rootInstanceStackCursor,nextRootInstance,fiber);// Track the context and the Fiber that provided it.
// This enables us to pop only Fibers that provide unique contexts.
push(contextFiberStackCursor,fiber,fiber);// Finally, we need to push the host context to the stack.
// However, we can't just call getRootHostContext() and push it because
// we'd have a different number of entries on the stack depending on
// whether getRootHostContext() throws somewhere in renderer code or not.
// So we push an empty value first. This lets us safely unwind on errors.
push(contextStackCursor$1,NO_CONTEXT,fiber);var nextRootContext=getRootHostContext(nextRootInstance);// Now that we know this function doesn't throw, replace it.
pop(contextStackCursor$1,fiber);push(contextStackCursor$1,nextRootContext,fiber);}function popHostContainer(fiber){pop(contextStackCursor$1,fiber);pop(contextFiberStackCursor,fiber);pop(rootInstanceStackCursor,fiber);}function getHostContext(){var context=requiredContext(contextStackCursor$1.current);return context;}function pushHostContext(fiber){var rootInstance=requiredContext(rootInstanceStackCursor.current);var context=requiredContext(contextStackCursor$1.current);var nextContext=getChildHostContext(context,fiber.type,rootInstance);// Don't push this Fiber's context unless it's unique.
if(context===nextContext){return;}// Track the context and the Fiber that provided it.
// This enables us to pop only Fibers that provide unique contexts.
push(contextFiberStackCursor,fiber,fiber);push(contextStackCursor$1,nextContext,fiber);}function popHostContext(fiber){// Do not pop unless this Fiber provided the current context.
// pushHostContext() only pushes Fibers that provide unique contexts.
if(contextFiberStackCursor.current!==fiber){return;}pop(contextStackCursor$1,fiber);pop(contextFiberStackCursor,fiber);}var commitTime=0;var profilerStartTime=-1;function getCommitTime(){return commitTime;}function recordCommitTime(){if(!enableProfilerTimer){return;}commitTime=scheduler.unstable_now();}function startProfilerTimer(fiber){if(!enableProfilerTimer){return;}profilerStartTime=scheduler.unstable_now();if(fiber.actualStartTime<0){fiber.actualStartTime=scheduler.unstable_now();}}function stopProfilerTimerIfRunning(fiber){if(!enableProfilerTimer){return;}profilerStartTime=-1;}function stopProfilerTimerIfRunningAndRecordDelta(fiber,overrideBaseTime){if(!enableProfilerTimer){return;}if(profilerStartTime>=0){var elapsedTime=scheduler.unstable_now()-profilerStartTime;fiber.actualDuration+=elapsedTime;if(overrideBaseTime){fiber.selfBaseDuration=elapsedTime;}profilerStartTime=-1;}}var ReactCurrentOwner$4=ReactSharedInternals.ReactCurrentOwner;function readContext$1(contextType){var dispatcher=ReactCurrentOwner$4.currentDispatcher;return dispatcher.readContext(contextType);}var fakeInternalInstance={};var isArray$1=Array.isArray;// React.Component uses a shared frozen object by default.
// We'll use it to determine whether we need to initialize legacy refs.
var emptyRefsObject=new React.Component().refs;var didWarnAboutStateAssignmentForComponent=void 0;var didWarnAboutUninitializedState=void 0;var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate=void 0;var didWarnAboutLegacyLifecyclesAndDerivedState=void 0;var didWarnAboutUndefinedDerivedState=void 0;var warnOnUndefinedDerivedState=void 0;var warnOnInvalidCallback$1=void 0;var didWarnAboutDirectlyAssigningPropsToState=void 0;var didWarnAboutContextTypeAndContextTypes=void 0;var didWarnAboutInvalidateContextType=void 0;{didWarnAboutStateAssignmentForComponent=new Set();didWarnAboutUninitializedState=new Set();didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate=new Set();didWarnAboutLegacyLifecyclesAndDerivedState=new Set();didWarnAboutDirectlyAssigningPropsToState=new Set();didWarnAboutUndefinedDerivedState=new Set();didWarnAboutContextTypeAndContextTypes=new Set();didWarnAboutInvalidateContextType=new Set();var didWarnOnInvalidCallback=new Set();warnOnInvalidCallback$1=function warnOnInvalidCallback$1(callback,callerName){if(callback===null||typeof callback==='function'){return;}var key=callerName+'_'+callback;if(!didWarnOnInvalidCallback.has(key)){didWarnOnInvalidCallback.add(key);warningWithoutStack$1(false,'%s(...): Expected the last optional `callback` argument to be a '+'function. Instead received: %s.',callerName,callback);}};warnOnUndefinedDerivedState=function warnOnUndefinedDerivedState(type,partialState){if(partialState===undefined){var componentName=getComponentName(type)||'Component';if(!didWarnAboutUndefinedDerivedState.has(componentName)){didWarnAboutUndefinedDerivedState.add(componentName);warningWithoutStack$1(false,'%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. '+'You have returned undefined.',componentName);}}};// This is so gross but it's at least non-critical and can be removed if
// it causes problems. This is meant to give a nicer error message for
// ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
// ...)) which otherwise throws a "_processChildContext is not a function"
// exception.
Object.defineProperty(fakeInternalInstance,'_processChildContext',{enumerable:false,value:function value(){invariant(false,'_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn\'t supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).');}});Object.freeze(fakeInternalInstance);}function applyDerivedStateFromProps(workInProgress,ctor,getDerivedStateFromProps,nextProps){var prevState=workInProgress.memoizedState;{if(debugRenderPhaseSideEffects||debugRenderPhaseSideEffectsForStrictMode&&workInProgress.mode&StrictMode){// Invoke the function an extra time to help detect side-effects.
getDerivedStateFromProps(nextProps,prevState);}}var partialState=getDerivedStateFromProps(nextProps,prevState);{warnOnUndefinedDerivedState(ctor,partialState);}// Merge the partial state and the previous state.
var memoizedState=partialState===null||partialState===undefined?prevState:_assign({},prevState,partialState);workInProgress.memoizedState=memoizedState;// Once the update queue is empty, persist the derived state onto the
// base state.
var updateQueue=workInProgress.updateQueue;if(updateQueue!==null&&workInProgress.expirationTime===NoWork){updateQueue.baseState=memoizedState;}}var classComponentUpdater={isMounted:isMounted,enqueueSetState:function enqueueSetState(inst,payload,callback){var fiber=get(inst);var currentTime=requestCurrentTime();var expirationTime=computeExpirationForFiber(currentTime,fiber);var update=createUpdate(expirationTime);update.payload=payload;if(callback!==undefined&&callback!==null){{warnOnInvalidCallback$1(callback,'setState');}update.callback=callback;}enqueueUpdate(fiber,update);scheduleWork(fiber,expirationTime);},enqueueReplaceState:function enqueueReplaceState(inst,payload,callback){var fiber=get(inst);var currentTime=requestCurrentTime();var expirationTime=computeExpirationForFiber(currentTime,fiber);var update=createUpdate(expirationTime);update.tag=ReplaceState;update.payload=payload;if(callback!==undefined&&callback!==null){{warnOnInvalidCallback$1(callback,'replaceState');}update.callback=callback;}enqueueUpdate(fiber,update);scheduleWork(fiber,expirationTime);},enqueueForceUpdate:function enqueueForceUpdate(inst,callback){var fiber=get(inst);var currentTime=requestCurrentTime();var expirationTime=computeExpirationForFiber(currentTime,fiber);var update=createUpdate(expirationTime);update.tag=ForceUpdate;if(callback!==undefined&&callback!==null){{warnOnInvalidCallback$1(callback,'forceUpdate');}update.callback=callback;}enqueueUpdate(fiber,update);scheduleWork(fiber,expirationTime);}};function checkShouldComponentUpdate(workInProgress,ctor,oldProps,newProps,oldState,newState,nextContext){var instance=workInProgress.stateNode;if(typeof instance.shouldComponentUpdate==='function'){startPhaseTimer(workInProgress,'shouldComponentUpdate');var shouldUpdate=instance.shouldComponentUpdate(newProps,newState,nextContext);stopPhaseTimer();{!(shouldUpdate!==undefined)?warningWithoutStack$1(false,'%s.shouldComponentUpdate(): Returned undefined instead of a '+'boolean value. Make sure to return true or false.',getComponentName(ctor)||'Component'):void 0;}return shouldUpdate;}if(ctor.prototype&&ctor.prototype.isPureReactComponent){return!shallowEqual(oldProps,newProps)||!shallowEqual(oldState,newState);}return true;}function checkClassInstance(workInProgress,ctor,newProps){var instance=workInProgress.stateNode;{var name=getComponentName(ctor)||'Component';var renderPresent=instance.render;if(!renderPresent){if(ctor.prototype&&typeof ctor.prototype.render==='function'){warningWithoutStack$1(false,'%s(...): No `render` method found on the returned component '+'instance: did you accidentally return an object from the constructor?',name);}else{warningWithoutStack$1(false,'%s(...): No `render` method found on the returned component '+'instance: you may have forgotten to define `render`.',name);}}var noGetInitialStateOnES6=!instance.getInitialState||instance.getInitialState.isReactClassApproved||instance.state;!noGetInitialStateOnES6?warningWithoutStack$1(false,'getInitialState was defined on %s, a plain JavaScript class. '+'This is only supported for classes created using React.createClass. '+'Did you mean to define a state property instead?',name):void 0;var noGetDefaultPropsOnES6=!instance.getDefaultProps||instance.getDefaultProps.isReactClassApproved;!noGetDefaultPropsOnES6?warningWithoutStack$1(false,'getDefaultProps was defined on %s, a plain JavaScript class. '+'This is only supported for classes created using React.createClass. '+'Use a static property to define defaultProps instead.',name):void 0;var noInstancePropTypes=!instance.propTypes;!noInstancePropTypes?warningWithoutStack$1(false,'propTypes was defined as an instance property on %s. Use a static '+'property to define propTypes instead.',name):void 0;var noInstanceContextType=!instance.contextType;!noInstanceContextType?warningWithoutStack$1(false,'contextType was defined as an instance property on %s. Use a static '+'property to define contextType instead.',name):void 0;var noInstanceContextTypes=!instance.contextTypes;!noInstanceContextTypes?warningWithoutStack$1(false,'contextTypes was defined as an instance property on %s. Use a static '+'property to define contextTypes instead.',name):void 0;if(ctor.contextType&&ctor.contextTypes&&!didWarnAboutContextTypeAndContextTypes.has(ctor)){didWarnAboutContextTypeAndContextTypes.add(ctor);warningWithoutStack$1(false,'%s declares both contextTypes and contextType static properties. '+'The legacy contextTypes property will be ignored.',name);}var noComponentShouldUpdate=typeof instance.componentShouldUpdate!=='function';!noComponentShouldUpdate?warningWithoutStack$1(false,'%s has a method called '+'componentShouldUpdate(). Did you mean shouldComponentUpdate()? '+'The name is phrased as a question because the function is '+'expected to return a value.',name):void 0;if(ctor.prototype&&ctor.prototype.isPureReactComponent&&typeof instance.shouldComponentUpdate!=='undefined'){warningWithoutStack$1(false,'%s has a method called shouldComponentUpdate(). '+'shouldComponentUpdate should not be used when extending React.PureComponent. '+'Please extend React.Component if shouldComponentUpdate is used.',getComponentName(ctor)||'A pure component');}var noComponentDidUnmount=typeof instance.componentDidUnmount!=='function';!noComponentDidUnmount?warningWithoutStack$1(false,'%s has a method called '+'componentDidUnmount(). But there is no such lifecycle method. '+'Did you mean componentWillUnmount()?',name):void 0;var noComponentDidReceiveProps=typeof instance.componentDidReceiveProps!=='function';!noComponentDidReceiveProps?warningWithoutStack$1(false,'%s has a method called '+'componentDidReceiveProps(). But there is no such lifecycle method. '+'If you meant to update the state in response to changing props, '+'use componentWillReceiveProps(). If you meant to fetch data or '+'run side-effects or mutations after React has updated the UI, use componentDidUpdate().',name):void 0;var noComponentWillRecieveProps=typeof instance.componentWillRecieveProps!=='function';!noComponentWillRecieveProps?warningWithoutStack$1(false,'%s has a method called '+'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',name):void 0;var noUnsafeComponentWillRecieveProps=typeof instance.UNSAFE_componentWillRecieveProps!=='function';!noUnsafeComponentWillRecieveProps?warningWithoutStack$1(false,'%s has a method called '+'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?',name):void 0;var hasMutatedProps=instance.props!==newProps;!(instance.props===undefined||!hasMutatedProps)?warningWithoutStack$1(false,'%s(...): When calling super() in `%s`, make sure to pass '+"up the same props that your component's constructor was passed.",name,name):void 0;var noInstanceDefaultProps=!instance.defaultProps;!noInstanceDefaultProps?warningWithoutStack$1(false,'Setting defaultProps as an instance property on %s is not supported and will be ignored.'+' Instead, define defaultProps as a static property on %s.',name,name):void 0;if(typeof instance.getSnapshotBeforeUpdate==='function'&&typeof instance.componentDidUpdate!=='function'&&!didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)){didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);warningWithoutStack$1(false,'%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). '+'This component defines getSnapshotBeforeUpdate() only.',getComponentName(ctor));}var noInstanceGetDerivedStateFromProps=typeof instance.getDerivedStateFromProps!=='function';!noInstanceGetDerivedStateFromProps?warningWithoutStack$1(false,'%s: getDerivedStateFromProps() is defined as an instance method '+'and will be ignored. Instead, declare it as a static method.',name):void 0;var noInstanceGetDerivedStateFromCatch=typeof instance.getDerivedStateFromError!=='function';!noInstanceGetDerivedStateFromCatch?warningWithoutStack$1(false,'%s: getDerivedStateFromError() is defined as an instance method '+'and will be ignored. Instead, declare it as a static method.',name):void 0;var noStaticGetSnapshotBeforeUpdate=typeof ctor.getSnapshotBeforeUpdate!=='function';!noStaticGetSnapshotBeforeUpdate?warningWithoutStack$1(false,'%s: getSnapshotBeforeUpdate() is defined as a static method '+'and will be ignored. Instead, declare it as an instance method.',name):void 0;var _state=instance.state;if(_state&&((typeof _state==='undefined'?'undefined':_typeof(_state))!=='object'||isArray$1(_state))){warningWithoutStack$1(false,'%s.state: must be set to an object or null',name);}if(typeof instance.getChildContext==='function'){!(_typeof(ctor.childContextTypes)==='object')?warningWithoutStack$1(false,'%s.getChildContext(): childContextTypes must be defined in order to '+'use getChildContext().',name):void 0;}}}function adoptClassInstance(workInProgress,instance){instance.updater=classComponentUpdater;workInProgress.stateNode=instance;// The instance needs access to the fiber so that it can schedule updates
set(instance,workInProgress);{instance._reactInternalInstance=fakeInternalInstance;}}function constructClassInstance(workInProgress,ctor,props,renderExpirationTime){var isLegacyContextConsumer=false;var unmaskedContext=emptyContextObject;var context=null;var contextType=ctor.contextType;if((typeof contextType==='undefined'?'undefined':_typeof(contextType))==='object'&&contextType!==null){{if(contextType.$$typeof!==REACT_CONTEXT_TYPE&&!didWarnAboutInvalidateContextType.has(ctor)){didWarnAboutInvalidateContextType.add(ctor);warningWithoutStack$1(false,'%s defines an invalid contextType. '+'contextType should point to the Context object returned by React.createContext(). '+'Did you accidentally pass the Context.Provider instead?',getComponentName(ctor)||'Component');}}context=readContext$1(contextType);}else{unmaskedContext=getUnmaskedContext(workInProgress,ctor,true);var contextTypes=ctor.contextTypes;isLegacyContextConsumer=contextTypes!==null&&contextTypes!==undefined;context=isLegacyContextConsumer?getMaskedContext(workInProgress,unmaskedContext):emptyContextObject;}// Instantiate twice to help detect side-effects.
{if(debugRenderPhaseSideEffects||debugRenderPhaseSideEffectsForStrictMode&&workInProgress.mode&StrictMode){new ctor(props,context);// eslint-disable-line no-new
}}var instance=new ctor(props,context);var state=workInProgress.memoizedState=instance.state!==null&&instance.state!==undefined?instance.state:null;adoptClassInstance(workInProgress,instance);{if(typeof ctor.getDerivedStateFromProps==='function'&&state===null){var componentName=getComponentName(ctor)||'Component';if(!didWarnAboutUninitializedState.has(componentName)){didWarnAboutUninitializedState.add(componentName);warningWithoutStack$1(false,'`%s` uses `getDerivedStateFromProps` but its initial state is '+'%s. This is not recommended. Instead, define the initial state by '+'assigning an object to `this.state` in the constructor of `%s`. '+'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.',componentName,instance.state===null?'null':'undefined',componentName);}}// If new component APIs are defined, "unsafe" lifecycles won't be called.
// Warn about these lifecycles if they are present.
// Don't warn about react-lifecycles-compat polyfilled methods though.
if(typeof ctor.getDerivedStateFromProps==='function'||typeof instance.getSnapshotBeforeUpdate==='function'){var foundWillMountName=null;var foundWillReceivePropsName=null;var foundWillUpdateName=null;if(typeof instance.componentWillMount==='function'&&instance.componentWillMount.__suppressDeprecationWarning!==true){foundWillMountName='componentWillMount';}else if(typeof instance.UNSAFE_componentWillMount==='function'){foundWillMountName='UNSAFE_componentWillMount';}if(typeof instance.componentWillReceiveProps==='function'&&instance.componentWillReceiveProps.__suppressDeprecationWarning!==true){foundWillReceivePropsName='componentWillReceiveProps';}else if(typeof instance.UNSAFE_componentWillReceiveProps==='function'){foundWillReceivePropsName='UNSAFE_componentWillReceiveProps';}if(typeof instance.componentWillUpdate==='function'&&instance.componentWillUpdate.__suppressDeprecationWarning!==true){foundWillUpdateName='componentWillUpdate';}else if(typeof instance.UNSAFE_componentWillUpdate==='function'){foundWillUpdateName='UNSAFE_componentWillUpdate';}if(foundWillMountName!==null||foundWillReceivePropsName!==null||foundWillUpdateName!==null){var _componentName=getComponentName(ctor)||'Component';var newApiName=typeof ctor.getDerivedStateFromProps==='function'?'getDerivedStateFromProps()':'getSnapshotBeforeUpdate()';if(!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)){didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);warningWithoutStack$1(false,'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n'+'%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n'+'The above lifecycles should be removed. Learn more about this warning here:\n'+'https://fb.me/react-async-component-lifecycle-hooks',_componentName,newApiName,foundWillMountName!==null?'\n  '+foundWillMountName:'',foundWillReceivePropsName!==null?'\n  '+foundWillReceivePropsName:'',foundWillUpdateName!==null?'\n  '+foundWillUpdateName:'');}}}}// Cache unmasked context so we can avoid recreating masked context unless necessary.
// ReactFiberContext usually updates this cache but can't for newly-created instances.
if(isLegacyContextConsumer){cacheContext(workInProgress,unmaskedContext,context);}return instance;}function callComponentWillMount(workInProgress,instance){startPhaseTimer(workInProgress,'componentWillMount');var oldState=instance.state;if(typeof instance.componentWillMount==='function'){instance.componentWillMount();}if(typeof instance.UNSAFE_componentWillMount==='function'){instance.UNSAFE_componentWillMount();}stopPhaseTimer();if(oldState!==instance.state){{warningWithoutStack$1(false,'%s.componentWillMount(): Assigning directly to this.state is '+"deprecated (except inside a component's "+'constructor). Use setState instead.',getComponentName(workInProgress.type)||'Component');}classComponentUpdater.enqueueReplaceState(instance,instance.state,null);}}function callComponentWillReceiveProps(workInProgress,instance,newProps,nextContext){var oldState=instance.state;startPhaseTimer(workInProgress,'componentWillReceiveProps');if(typeof instance.componentWillReceiveProps==='function'){instance.componentWillReceiveProps(newProps,nextContext);}if(typeof instance.UNSAFE_componentWillReceiveProps==='function'){instance.UNSAFE_componentWillReceiveProps(newProps,nextContext);}stopPhaseTimer();if(instance.state!==oldState){{var componentName=getComponentName(workInProgress.type)||'Component';if(!didWarnAboutStateAssignmentForComponent.has(componentName)){didWarnAboutStateAssignmentForComponent.add(componentName);warningWithoutStack$1(false,'%s.componentWillReceiveProps(): Assigning directly to '+"this.state is deprecated (except inside a component's "+'constructor). Use setState instead.',componentName);}}classComponentUpdater.enqueueReplaceState(instance,instance.state,null);}}// Invokes the mount life-cycles on a previously never rendered instance.
function mountClassInstance(workInProgress,ctor,newProps,renderExpirationTime){{checkClassInstance(workInProgress,ctor,newProps);}var instance=workInProgress.stateNode;instance.props=newProps;instance.state=workInProgress.memoizedState;instance.refs=emptyRefsObject;var contextType=ctor.contextType;if((typeof contextType==='undefined'?'undefined':_typeof(contextType))==='object'&&contextType!==null){instance.context=readContext$1(contextType);}else{var unmaskedContext=getUnmaskedContext(workInProgress,ctor,true);instance.context=getMaskedContext(workInProgress,unmaskedContext);}{if(instance.state===newProps){var componentName=getComponentName(ctor)||'Component';if(!didWarnAboutDirectlyAssigningPropsToState.has(componentName)){didWarnAboutDirectlyAssigningPropsToState.add(componentName);warningWithoutStack$1(false,'%s: It is not recommended to assign props directly to state '+"because updates to props won't be reflected in state. "+'In most cases, it is better to use props directly.',componentName);}}if(workInProgress.mode&StrictMode){ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress,instance);ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress,instance);}if(warnAboutDeprecatedLifecycles){ReactStrictModeWarnings.recordDeprecationWarnings(workInProgress,instance);}}var updateQueue=workInProgress.updateQueue;if(updateQueue!==null){processUpdateQueue(workInProgress,updateQueue,newProps,instance,renderExpirationTime);instance.state=workInProgress.memoizedState;}var getDerivedStateFromProps=ctor.getDerivedStateFromProps;if(typeof getDerivedStateFromProps==='function'){applyDerivedStateFromProps(workInProgress,ctor,getDerivedStateFromProps,newProps);instance.state=workInProgress.memoizedState;}// In order to support react-lifecycles-compat polyfilled components,
// Unsafe lifecycles should not be invoked for components using the new APIs.
if(typeof ctor.getDerivedStateFromProps!=='function'&&typeof instance.getSnapshotBeforeUpdate!=='function'&&(typeof instance.UNSAFE_componentWillMount==='function'||typeof instance.componentWillMount==='function')){callComponentWillMount(workInProgress,instance);// If we had additional state updates during this life-cycle, let's
// process them now.
updateQueue=workInProgress.updateQueue;if(updateQueue!==null){processUpdateQueue(workInProgress,updateQueue,newProps,instance,renderExpirationTime);instance.state=workInProgress.memoizedState;}}if(typeof instance.componentDidMount==='function'){workInProgress.effectTag|=Update;}}function resumeMountClassInstance(workInProgress,ctor,newProps,renderExpirationTime){var instance=workInProgress.stateNode;var oldProps=workInProgress.memoizedProps;instance.props=oldProps;var oldContext=instance.context;var contextType=ctor.contextType;var nextContext=void 0;if((typeof contextType==='undefined'?'undefined':_typeof(contextType))==='object'&&contextType!==null){nextContext=readContext$1(contextType);}else{var nextLegacyUnmaskedContext=getUnmaskedContext(workInProgress,ctor,true);nextContext=getMaskedContext(workInProgress,nextLegacyUnmaskedContext);}var getDerivedStateFromProps=ctor.getDerivedStateFromProps;var hasNewLifecycles=typeof getDerivedStateFromProps==='function'||typeof instance.getSnapshotBeforeUpdate==='function';// Note: During these life-cycles, instance.props/instance.state are what
// ever the previously attempted to render - not the "current". However,
// during componentDidUpdate we pass the "current" props.
// In order to support react-lifecycles-compat polyfilled components,
// Unsafe lifecycles should not be invoked for components using the new APIs.
if(!hasNewLifecycles&&(typeof instance.UNSAFE_componentWillReceiveProps==='function'||typeof instance.componentWillReceiveProps==='function')){if(oldProps!==newProps||oldContext!==nextContext){callComponentWillReceiveProps(workInProgress,instance,newProps,nextContext);}}resetHasForceUpdateBeforeProcessing();var oldState=workInProgress.memoizedState;var newState=instance.state=oldState;var updateQueue=workInProgress.updateQueue;if(updateQueue!==null){processUpdateQueue(workInProgress,updateQueue,newProps,instance,renderExpirationTime);newState=workInProgress.memoizedState;}if(oldProps===newProps&&oldState===newState&&!hasContextChanged()&&!checkHasForceUpdateAfterProcessing()){// If an update was already in progress, we should schedule an Update
// effect even though we're bailing out, so that cWU/cDU are called.
if(typeof instance.componentDidMount==='function'){workInProgress.effectTag|=Update;}return false;}if(typeof getDerivedStateFromProps==='function'){applyDerivedStateFromProps(workInProgress,ctor,getDerivedStateFromProps,newProps);newState=workInProgress.memoizedState;}var shouldUpdate=checkHasForceUpdateAfterProcessing()||checkShouldComponentUpdate(workInProgress,ctor,oldProps,newProps,oldState,newState,nextContext);if(shouldUpdate){// In order to support react-lifecycles-compat polyfilled components,
// Unsafe lifecycles should not be invoked for components using the new APIs.
if(!hasNewLifecycles&&(typeof instance.UNSAFE_componentWillMount==='function'||typeof instance.componentWillMount==='function')){startPhaseTimer(workInProgress,'componentWillMount');if(typeof instance.componentWillMount==='function'){instance.componentWillMount();}if(typeof instance.UNSAFE_componentWillMount==='function'){instance.UNSAFE_componentWillMount();}stopPhaseTimer();}if(typeof instance.componentDidMount==='function'){workInProgress.effectTag|=Update;}}else{// If an update was already in progress, we should schedule an Update
// effect even though we're bailing out, so that cWU/cDU are called.
if(typeof instance.componentDidMount==='function'){workInProgress.effectTag|=Update;}// If shouldComponentUpdate returned false, we should still update the
// memoized state to indicate that this work can be reused.
workInProgress.memoizedProps=newProps;workInProgress.memoizedState=newState;}// Update the existing instance's state, props, and context pointers even
// if shouldComponentUpdate returns false.
instance.props=newProps;instance.state=newState;instance.context=nextContext;return shouldUpdate;}// Invokes the update life-cycles and returns false if it shouldn't rerender.
function updateClassInstance(current,workInProgress,ctor,newProps,renderExpirationTime){var instance=workInProgress.stateNode;var oldProps=workInProgress.memoizedProps;instance.props=oldProps;var oldContext=instance.context;var contextType=ctor.contextType;var nextContext=void 0;if((typeof contextType==='undefined'?'undefined':_typeof(contextType))==='object'&&contextType!==null){nextContext=readContext$1(contextType);}else{var nextUnmaskedContext=getUnmaskedContext(workInProgress,ctor,true);nextContext=getMaskedContext(workInProgress,nextUnmaskedContext);}var getDerivedStateFromProps=ctor.getDerivedStateFromProps;var hasNewLifecycles=typeof getDerivedStateFromProps==='function'||typeof instance.getSnapshotBeforeUpdate==='function';// Note: During these life-cycles, instance.props/instance.state are what
// ever the previously attempted to render - not the "current". However,
// during componentDidUpdate we pass the "current" props.
// In order to support react-lifecycles-compat polyfilled components,
// Unsafe lifecycles should not be invoked for components using the new APIs.
if(!hasNewLifecycles&&(typeof instance.UNSAFE_componentWillReceiveProps==='function'||typeof instance.componentWillReceiveProps==='function')){if(oldProps!==newProps||oldContext!==nextContext){callComponentWillReceiveProps(workInProgress,instance,newProps,nextContext);}}resetHasForceUpdateBeforeProcessing();var oldState=workInProgress.memoizedState;var newState=instance.state=oldState;var updateQueue=workInProgress.updateQueue;if(updateQueue!==null){processUpdateQueue(workInProgress,updateQueue,newProps,instance,renderExpirationTime);newState=workInProgress.memoizedState;}if(oldProps===newProps&&oldState===newState&&!hasContextChanged()&&!checkHasForceUpdateAfterProcessing()){// If an update was already in progress, we should schedule an Update
// effect even though we're bailing out, so that cWU/cDU are called.
if(typeof instance.componentDidUpdate==='function'){if(oldProps!==current.memoizedProps||oldState!==current.memoizedState){workInProgress.effectTag|=Update;}}if(typeof instance.getSnapshotBeforeUpdate==='function'){if(oldProps!==current.memoizedProps||oldState!==current.memoizedState){workInProgress.effectTag|=Snapshot;}}return false;}if(typeof getDerivedStateFromProps==='function'){applyDerivedStateFromProps(workInProgress,ctor,getDerivedStateFromProps,newProps);newState=workInProgress.memoizedState;}var shouldUpdate=checkHasForceUpdateAfterProcessing()||checkShouldComponentUpdate(workInProgress,ctor,oldProps,newProps,oldState,newState,nextContext);if(shouldUpdate){// In order to support react-lifecycles-compat polyfilled components,
// Unsafe lifecycles should not be invoked for components using the new APIs.
if(!hasNewLifecycles&&(typeof instance.UNSAFE_componentWillUpdate==='function'||typeof instance.componentWillUpdate==='function')){startPhaseTimer(workInProgress,'componentWillUpdate');if(typeof instance.componentWillUpdate==='function'){instance.componentWillUpdate(newProps,newState,nextContext);}if(typeof instance.UNSAFE_componentWillUpdate==='function'){instance.UNSAFE_componentWillUpdate(newProps,newState,nextContext);}stopPhaseTimer();}if(typeof instance.componentDidUpdate==='function'){workInProgress.effectTag|=Update;}if(typeof instance.getSnapshotBeforeUpdate==='function'){workInProgress.effectTag|=Snapshot;}}else{// If an update was already in progress, we should schedule an Update
// effect even though we're bailing out, so that cWU/cDU are called.
if(typeof instance.componentDidUpdate==='function'){if(oldProps!==current.memoizedProps||oldState!==current.memoizedState){workInProgress.effectTag|=Update;}}if(typeof instance.getSnapshotBeforeUpdate==='function'){if(oldProps!==current.memoizedProps||oldState!==current.memoizedState){workInProgress.effectTag|=Snapshot;}}// If shouldComponentUpdate returned false, we should still update the
// memoized props/state to indicate that this work can be reused.
workInProgress.memoizedProps=newProps;workInProgress.memoizedState=newState;}// Update the existing instance's state, props, and context pointers even
// if shouldComponentUpdate returns false.
instance.props=newProps;instance.state=newState;instance.context=nextContext;return shouldUpdate;}var didWarnAboutMaps=void 0;var didWarnAboutGenerators=void 0;var didWarnAboutStringRefInStrictMode=void 0;var ownerHasKeyUseWarning=void 0;var ownerHasFunctionTypeWarning=void 0;var warnForMissingKey=function warnForMissingKey(child){};{didWarnAboutMaps=false;didWarnAboutGenerators=false;didWarnAboutStringRefInStrictMode={};/**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */ownerHasKeyUseWarning={};ownerHasFunctionTypeWarning={};warnForMissingKey=function warnForMissingKey(child){if(child===null||(typeof child==='undefined'?'undefined':_typeof(child))!=='object'){return;}if(!child._store||child._store.validated||child.key!=null){return;}!(_typeof(child._store)==='object')?invariant(false,'React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.'):void 0;child._store.validated=true;var currentComponentErrorInfo='Each child in an array or iterator should have a unique '+'"key" prop. See https://fb.me/react-warning-keys for '+'more information.'+getCurrentFiberStackInDev();if(ownerHasKeyUseWarning[currentComponentErrorInfo]){return;}ownerHasKeyUseWarning[currentComponentErrorInfo]=true;warning$1(false,'Each child in an array or iterator should have a unique '+'"key" prop. See https://fb.me/react-warning-keys for '+'more information.');};}var isArray=Array.isArray;function coerceRef(returnFiber,current$$1,element){var mixedRef=element.ref;if(mixedRef!==null&&typeof mixedRef!=='function'&&(typeof mixedRef==='undefined'?'undefined':_typeof(mixedRef))!=='object'){{if(returnFiber.mode&StrictMode){var componentName=getComponentName(returnFiber.type)||'Component';if(!didWarnAboutStringRefInStrictMode[componentName]){warningWithoutStack$1(false,'A string ref, "%s", has been found within a strict mode tree. '+'String refs are a source of potential bugs and should be avoided. '+'We recommend using createRef() instead.'+'\n%s'+'\n\nLearn more about using refs safely here:'+'\nhttps://fb.me/react-strict-mode-string-ref',mixedRef,getStackByFiberInDevAndProd(returnFiber));didWarnAboutStringRefInStrictMode[componentName]=true;}}}if(element._owner){var owner=element._owner;var inst=void 0;if(owner){var ownerFiber=owner;!(ownerFiber.tag===ClassComponent)?invariant(false,'Function components cannot have refs.'):void 0;inst=ownerFiber.stateNode;}!inst?invariant(false,'Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.',mixedRef):void 0;var stringRef=''+mixedRef;// Check if previous string ref matches new string ref
if(current$$1!==null&&current$$1.ref!==null&&typeof current$$1.ref==='function'&&current$$1.ref._stringRef===stringRef){return current$$1.ref;}var ref=function ref(value){var refs=inst.refs;if(refs===emptyRefsObject){// This is a lazy pooled frozen object, so we need to initialize.
refs=inst.refs={};}if(value===null){delete refs[stringRef];}else{refs[stringRef]=value;}};ref._stringRef=stringRef;return ref;}else{!(typeof mixedRef==='string')?invariant(false,'Expected ref to be a function, a string, an object returned by React.createRef(), or null.'):void 0;!element._owner?invariant(false,'Element ref was specified as a string (%s) but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component\'s render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.',mixedRef):void 0;}}return mixedRef;}function throwOnInvalidObjectType(returnFiber,newChild){if(returnFiber.type!=='textarea'){var addendum='';{addendum=' If you meant to render a collection of children, use an array '+'instead.'+getCurrentFiberStackInDev();}invariant(false,'Objects are not valid as a React child (found: %s).%s',Object.prototype.toString.call(newChild)==='[object Object]'?'object with keys {'+Object.keys(newChild).join(', ')+'}':newChild,addendum);}}function warnOnFunctionType(){var currentComponentErrorInfo='Functions are not valid as a React child. This may happen if '+'you return a Component instead of <Component /> from render. '+'Or maybe you meant to call this function rather than return it.'+getCurrentFiberStackInDev();if(ownerHasFunctionTypeWarning[currentComponentErrorInfo]){return;}ownerHasFunctionTypeWarning[currentComponentErrorInfo]=true;warning$1(false,'Functions are not valid as a React child. This may happen if '+'you return a Component instead of <Component /> from render. '+'Or maybe you meant to call this function rather than return it.');}// This wrapper function exists because I expect to clone the code in each path
// to be able to optimize each path individually by branching early. This needs
// a compiler or we can do it manually. Helpers that don't need this branching
// live outside of this function.
function ChildReconciler(shouldTrackSideEffects){function deleteChild(returnFiber,childToDelete){if(!shouldTrackSideEffects){// Noop.
return;}// Deletions are added in reversed order so we add it to the front.
// At this point, the return fiber's effect list is empty except for
// deletions, so we can just append the deletion to the list. The remaining
// effects aren't added until the complete phase. Once we implement
// resuming, this may not be true.
var last=returnFiber.lastEffect;if(last!==null){last.nextEffect=childToDelete;returnFiber.lastEffect=childToDelete;}else{returnFiber.firstEffect=returnFiber.lastEffect=childToDelete;}childToDelete.nextEffect=null;childToDelete.effectTag=Deletion;}function deleteRemainingChildren(returnFiber,currentFirstChild){if(!shouldTrackSideEffects){// Noop.
return null;}// TODO: For the shouldClone case, this could be micro-optimized a bit by
// assuming that after the first child we've already added everything.
var childToDelete=currentFirstChild;while(childToDelete!==null){deleteChild(returnFiber,childToDelete);childToDelete=childToDelete.sibling;}return null;}function mapRemainingChildren(returnFiber,currentFirstChild){// Add the remaining children to a temporary map so that we can find them by
// keys quickly. Implicit (null) keys get added to this set with their index
var existingChildren=new Map();var existingChild=currentFirstChild;while(existingChild!==null){if(existingChild.key!==null){existingChildren.set(existingChild.key,existingChild);}else{existingChildren.set(existingChild.index,existingChild);}existingChild=existingChild.sibling;}return existingChildren;}function useFiber(fiber,pendingProps,expirationTime){// We currently set sibling to null and index to 0 here because it is easy
// to forget to do before returning it. E.g. for the single child case.
var clone=createWorkInProgress(fiber,pendingProps,expirationTime);clone.index=0;clone.sibling=null;return clone;}function placeChild(newFiber,lastPlacedIndex,newIndex){newFiber.index=newIndex;if(!shouldTrackSideEffects){// Noop.
return lastPlacedIndex;}var current$$1=newFiber.alternate;if(current$$1!==null){var oldIndex=current$$1.index;if(oldIndex<lastPlacedIndex){// This is a move.
newFiber.effectTag=Placement;return lastPlacedIndex;}else{// This item can stay in place.
return oldIndex;}}else{// This is an insertion.
newFiber.effectTag=Placement;return lastPlacedIndex;}}function placeSingleChild(newFiber){// This is simpler for the single child case. We only need to do a
// placement for inserting new children.
if(shouldTrackSideEffects&&newFiber.alternate===null){newFiber.effectTag=Placement;}return newFiber;}function updateTextNode(returnFiber,current$$1,textContent,expirationTime){if(current$$1===null||current$$1.tag!==HostText){// Insert
var created=createFiberFromText(textContent,returnFiber.mode,expirationTime);created.return=returnFiber;return created;}else{// Update
var existing=useFiber(current$$1,textContent,expirationTime);existing.return=returnFiber;return existing;}}function updateElement(returnFiber,current$$1,element,expirationTime){if(current$$1!==null&&current$$1.elementType===element.type){// Move based on index
var existing=useFiber(current$$1,element.props,expirationTime);existing.ref=coerceRef(returnFiber,current$$1,element);existing.return=returnFiber;{existing._debugSource=element._source;existing._debugOwner=element._owner;}return existing;}else{// Insert
var created=createFiberFromElement(element,returnFiber.mode,expirationTime);created.ref=coerceRef(returnFiber,current$$1,element);created.return=returnFiber;return created;}}function updatePortal(returnFiber,current$$1,portal,expirationTime){if(current$$1===null||current$$1.tag!==HostPortal||current$$1.stateNode.containerInfo!==portal.containerInfo||current$$1.stateNode.implementation!==portal.implementation){// Insert
var created=createFiberFromPortal(portal,returnFiber.mode,expirationTime);created.return=returnFiber;return created;}else{// Update
var existing=useFiber(current$$1,portal.children||[],expirationTime);existing.return=returnFiber;return existing;}}function updateFragment(returnFiber,current$$1,fragment,expirationTime,key){if(current$$1===null||current$$1.tag!==Fragment){// Insert
var created=createFiberFromFragment(fragment,returnFiber.mode,expirationTime,key);created.return=returnFiber;return created;}else{// Update
var existing=useFiber(current$$1,fragment,expirationTime);existing.return=returnFiber;return existing;}}function createChild(returnFiber,newChild,expirationTime){if(typeof newChild==='string'||typeof newChild==='number'){// Text nodes don't have keys. If the previous node is implicitly keyed
// we can continue to replace it without aborting even if it is not a text
// node.
var created=createFiberFromText(''+newChild,returnFiber.mode,expirationTime);created.return=returnFiber;return created;}if((typeof newChild==='undefined'?'undefined':_typeof(newChild))==='object'&&newChild!==null){switch(newChild.$$typeof){case REACT_ELEMENT_TYPE:{var _created=createFiberFromElement(newChild,returnFiber.mode,expirationTime);_created.ref=coerceRef(returnFiber,null,newChild);_created.return=returnFiber;return _created;}case REACT_PORTAL_TYPE:{var _created2=createFiberFromPortal(newChild,returnFiber.mode,expirationTime);_created2.return=returnFiber;return _created2;}}if(isArray(newChild)||getIteratorFn(newChild)){var _created3=createFiberFromFragment(newChild,returnFiber.mode,expirationTime,null);_created3.return=returnFiber;return _created3;}throwOnInvalidObjectType(returnFiber,newChild);}{if(typeof newChild==='function'){warnOnFunctionType();}}return null;}function updateSlot(returnFiber,oldFiber,newChild,expirationTime){// Update the fiber if the keys match, otherwise return null.
var key=oldFiber!==null?oldFiber.key:null;if(typeof newChild==='string'||typeof newChild==='number'){// Text nodes don't have keys. If the previous node is implicitly keyed
// we can continue to replace it without aborting even if it is not a text
// node.
if(key!==null){return null;}return updateTextNode(returnFiber,oldFiber,''+newChild,expirationTime);}if((typeof newChild==='undefined'?'undefined':_typeof(newChild))==='object'&&newChild!==null){switch(newChild.$$typeof){case REACT_ELEMENT_TYPE:{if(newChild.key===key){if(newChild.type===REACT_FRAGMENT_TYPE){return updateFragment(returnFiber,oldFiber,newChild.props.children,expirationTime,key);}return updateElement(returnFiber,oldFiber,newChild,expirationTime);}else{return null;}}case REACT_PORTAL_TYPE:{if(newChild.key===key){return updatePortal(returnFiber,oldFiber,newChild,expirationTime);}else{return null;}}}if(isArray(newChild)||getIteratorFn(newChild)){if(key!==null){return null;}return updateFragment(returnFiber,oldFiber,newChild,expirationTime,null);}throwOnInvalidObjectType(returnFiber,newChild);}{if(typeof newChild==='function'){warnOnFunctionType();}}return null;}function updateFromMap(existingChildren,returnFiber,newIdx,newChild,expirationTime){if(typeof newChild==='string'||typeof newChild==='number'){// Text nodes don't have keys, so we neither have to check the old nor
// new node for the key. If both are text nodes, they match.
var matchedFiber=existingChildren.get(newIdx)||null;return updateTextNode(returnFiber,matchedFiber,''+newChild,expirationTime);}if((typeof newChild==='undefined'?'undefined':_typeof(newChild))==='object'&&newChild!==null){switch(newChild.$$typeof){case REACT_ELEMENT_TYPE:{var _matchedFiber=existingChildren.get(newChild.key===null?newIdx:newChild.key)||null;if(newChild.type===REACT_FRAGMENT_TYPE){return updateFragment(returnFiber,_matchedFiber,newChild.props.children,expirationTime,newChild.key);}return updateElement(returnFiber,_matchedFiber,newChild,expirationTime);}case REACT_PORTAL_TYPE:{var _matchedFiber2=existingChildren.get(newChild.key===null?newIdx:newChild.key)||null;return updatePortal(returnFiber,_matchedFiber2,newChild,expirationTime);}}if(isArray(newChild)||getIteratorFn(newChild)){var _matchedFiber3=existingChildren.get(newIdx)||null;return updateFragment(returnFiber,_matchedFiber3,newChild,expirationTime,null);}throwOnInvalidObjectType(returnFiber,newChild);}{if(typeof newChild==='function'){warnOnFunctionType();}}return null;}/**
   * Warns if there is a duplicate or missing key
   */function warnOnInvalidKey(child,knownKeys){{if((typeof child==='undefined'?'undefined':_typeof(child))!=='object'||child===null){return knownKeys;}switch(child.$$typeof){case REACT_ELEMENT_TYPE:case REACT_PORTAL_TYPE:warnForMissingKey(child);var key=child.key;if(typeof key!=='string'){break;}if(knownKeys===null){knownKeys=new Set();knownKeys.add(key);break;}if(!knownKeys.has(key)){knownKeys.add(key);break;}warning$1(false,'Encountered two children with the same key, `%s`. '+'Keys should be unique so that components maintain their identity '+'across updates. Non-unique keys may cause children to be '+'duplicated and/or omitted â the behavior is unsupported and '+'could change in a future version.',key);break;default:break;}}return knownKeys;}function reconcileChildrenArray(returnFiber,currentFirstChild,newChildren,expirationTime){// This algorithm can't optimize by searching from boths ends since we
// don't have backpointers on fibers. I'm trying to see how far we can get
// with that model. If it ends up not being worth the tradeoffs, we can
// add it later.
// Even with a two ended optimization, we'd want to optimize for the case
// where there are few changes and brute force the comparison instead of
// going for the Map. It'd like to explore hitting that path first in
// forward-only mode and only go for the Map once we notice that we need
// lots of look ahead. This doesn't handle reversal as well as two ended
// search but that's unusual. Besides, for the two ended optimization to
// work on Iterables, we'd need to copy the whole set.
// In this first iteration, we'll just live with hitting the bad case
// (adding everything to a Map) in for every insert/move.
// If you change this code, also update reconcileChildrenIterator() which
// uses the same algorithm.
{// First, validate keys.
var knownKeys=null;for(var i=0;i<newChildren.length;i++){var child=newChildren[i];knownKeys=warnOnInvalidKey(child,knownKeys);}}var resultingFirstChild=null;var previousNewFiber=null;var oldFiber=currentFirstChild;var lastPlacedIndex=0;var newIdx=0;var nextOldFiber=null;for(;oldFiber!==null&&newIdx<newChildren.length;newIdx++){if(oldFiber.index>newIdx){nextOldFiber=oldFiber;oldFiber=null;}else{nextOldFiber=oldFiber.sibling;}var newFiber=updateSlot(returnFiber,oldFiber,newChildren[newIdx],expirationTime);if(newFiber===null){// TODO: This breaks on empty slots like null children. That's
// unfortunate because it triggers the slow path all the time. We need
// a better way to communicate whether this was a miss or null,
// boolean, undefined, etc.
if(oldFiber===null){oldFiber=nextOldFiber;}break;}if(shouldTrackSideEffects){if(oldFiber&&newFiber.alternate===null){// We matched the slot, but we didn't reuse the existing fiber, so we
// need to delete the existing child.
deleteChild(returnFiber,oldFiber);}}lastPlacedIndex=placeChild(newFiber,lastPlacedIndex,newIdx);if(previousNewFiber===null){// TODO: Move out of the loop. This only happens for the first run.
resultingFirstChild=newFiber;}else{// TODO: Defer siblings if we're not at the right index for this slot.
// I.e. if we had null values before, then we want to defer this
// for each null value. However, we also don't want to call updateSlot
// with the previous one.
previousNewFiber.sibling=newFiber;}previousNewFiber=newFiber;oldFiber=nextOldFiber;}if(newIdx===newChildren.length){// We've reached the end of the new children. We can delete the rest.
deleteRemainingChildren(returnFiber,oldFiber);return resultingFirstChild;}if(oldFiber===null){// If we don't have any more existing children we can choose a fast path
// since the rest will all be insertions.
for(;newIdx<newChildren.length;newIdx++){var _newFiber=createChild(returnFiber,newChildren[newIdx],expirationTime);if(!_newFiber){continue;}lastPlacedIndex=placeChild(_newFiber,lastPlacedIndex,newIdx);if(previousNewFiber===null){// TODO: Move out of the loop. This only happens for the first run.
resultingFirstChild=_newFiber;}else{previousNewFiber.sibling=_newFiber;}previousNewFiber=_newFiber;}return resultingFirstChild;}// Add all children to a key map for quick lookups.
var existingChildren=mapRemainingChildren(returnFiber,oldFiber);// Keep scanning and use the map to restore deleted items as moves.
for(;newIdx<newChildren.length;newIdx++){var _newFiber2=updateFromMap(existingChildren,returnFiber,newIdx,newChildren[newIdx],expirationTime);if(_newFiber2){if(shouldTrackSideEffects){if(_newFiber2.alternate!==null){// The new fiber is a work in progress, but if there exists a
// current, that means that we reused the fiber. We need to delete
// it from the child list so that we don't add it to the deletion
// list.
existingChildren.delete(_newFiber2.key===null?newIdx:_newFiber2.key);}}lastPlacedIndex=placeChild(_newFiber2,lastPlacedIndex,newIdx);if(previousNewFiber===null){resultingFirstChild=_newFiber2;}else{previousNewFiber.sibling=_newFiber2;}previousNewFiber=_newFiber2;}}if(shouldTrackSideEffects){// Any existing children that weren't consumed above were deleted. We need
// to add them to the deletion list.
existingChildren.forEach(function(child){return deleteChild(returnFiber,child);});}return resultingFirstChild;}function reconcileChildrenIterator(returnFiber,currentFirstChild,newChildrenIterable,expirationTime){// This is the same implementation as reconcileChildrenArray(),
// but using the iterator instead.
var iteratorFn=getIteratorFn(newChildrenIterable);!(typeof iteratorFn==='function')?invariant(false,'An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.'):void 0;{// We don't support rendering Generators because it's a mutation.
// See https://github.com/facebook/react/issues/12995
if(typeof Symbol==='function'&&// $FlowFixMe Flow doesn't know about toStringTag
newChildrenIterable[Symbol.toStringTag]==='Generator'){!didWarnAboutGenerators?warning$1(false,'Using Generators as children is unsupported and will likely yield '+'unexpected results because enumerating a generator mutates it. '+'You may convert it to an array with `Array.from()` or the '+'`[...spread]` operator before rendering. Keep in mind '+'you might need to polyfill these features for older browsers.'):void 0;didWarnAboutGenerators=true;}// Warn about using Maps as children
if(newChildrenIterable.entries===iteratorFn){!didWarnAboutMaps?warning$1(false,'Using Maps as children is unsupported and will likely yield '+'unexpected results. Convert it to a sequence/iterable of keyed '+'ReactElements instead.'):void 0;didWarnAboutMaps=true;}// First, validate keys.
// We'll get a different iterator later for the main pass.
var _newChildren=iteratorFn.call(newChildrenIterable);if(_newChildren){var knownKeys=null;var _step=_newChildren.next();for(;!_step.done;_step=_newChildren.next()){var child=_step.value;knownKeys=warnOnInvalidKey(child,knownKeys);}}}var newChildren=iteratorFn.call(newChildrenIterable);!(newChildren!=null)?invariant(false,'An iterable object provided no iterator.'):void 0;var resultingFirstChild=null;var previousNewFiber=null;var oldFiber=currentFirstChild;var lastPlacedIndex=0;var newIdx=0;var nextOldFiber=null;var step=newChildren.next();for(;oldFiber!==null&&!step.done;newIdx++,step=newChildren.next()){if(oldFiber.index>newIdx){nextOldFiber=oldFiber;oldFiber=null;}else{nextOldFiber=oldFiber.sibling;}var newFiber=updateSlot(returnFiber,oldFiber,step.value,expirationTime);if(newFiber===null){// TODO: This breaks on empty slots like null children. That's
// unfortunate because it triggers the slow path all the time. We need
// a better way to communicate whether this was a miss or null,
// boolean, undefined, etc.
if(!oldFiber){oldFiber=nextOldFiber;}break;}if(shouldTrackSideEffects){if(oldFiber&&newFiber.alternate===null){// We matched the slot, but we didn't reuse the existing fiber, so we
// need to delete the existing child.
deleteChild(returnFiber,oldFiber);}}lastPlacedIndex=placeChild(newFiber,lastPlacedIndex,newIdx);if(previousNewFiber===null){// TODO: Move out of the loop. This only happens for the first run.
resultingFirstChild=newFiber;}else{// TODO: Defer siblings if we're not at the right index for this slot.
// I.e. if we had null values before, then we want to defer this
// for each null value. However, we also don't want to call updateSlot
// with the previous one.
previousNewFiber.sibling=newFiber;}previousNewFiber=newFiber;oldFiber=nextOldFiber;}if(step.done){// We've reached the end of the new children. We can delete the rest.
deleteRemainingChildren(returnFiber,oldFiber);return resultingFirstChild;}if(oldFiber===null){// If we don't have any more existing children we can choose a fast path
// since the rest will all be insertions.
for(;!step.done;newIdx++,step=newChildren.next()){var _newFiber3=createChild(returnFiber,step.value,expirationTime);if(_newFiber3===null){continue;}lastPlacedIndex=placeChild(_newFiber3,lastPlacedIndex,newIdx);if(previousNewFiber===null){// TODO: Move out of the loop. This only happens for the first run.
resultingFirstChild=_newFiber3;}else{previousNewFiber.sibling=_newFiber3;}previousNewFiber=_newFiber3;}return resultingFirstChild;}// Add all children to a key map for quick lookups.
var existingChildren=mapRemainingChildren(returnFiber,oldFiber);// Keep scanning and use the map to restore deleted items as moves.
for(;!step.done;newIdx++,step=newChildren.next()){var _newFiber4=updateFromMap(existingChildren,returnFiber,newIdx,step.value,expirationTime);if(_newFiber4!==null){if(shouldTrackSideEffects){if(_newFiber4.alternate!==null){// The new fiber is a work in progress, but if there exists a
// current, that means that we reused the fiber. We need to delete
// it from the child list so that we don't add it to the deletion
// list.
existingChildren.delete(_newFiber4.key===null?newIdx:_newFiber4.key);}}lastPlacedIndex=placeChild(_newFiber4,lastPlacedIndex,newIdx);if(previousNewFiber===null){resultingFirstChild=_newFiber4;}else{previousNewFiber.sibling=_newFiber4;}previousNewFiber=_newFiber4;}}if(shouldTrackSideEffects){// Any existing children that weren't consumed above were deleted. We need
// to add them to the deletion list.
existingChildren.forEach(function(child){return deleteChild(returnFiber,child);});}return resultingFirstChild;}function reconcileSingleTextNode(returnFiber,currentFirstChild,textContent,expirationTime){// There's no need to check for keys on text nodes since we don't have a
// way to define them.
if(currentFirstChild!==null&&currentFirstChild.tag===HostText){// We already have an existing node so let's just update it and delete
// the rest.
deleteRemainingChildren(returnFiber,currentFirstChild.sibling);var existing=useFiber(currentFirstChild,textContent,expirationTime);existing.return=returnFiber;return existing;}// The existing first child is not a text node so we need to create one
// and delete the existing ones.
deleteRemainingChildren(returnFiber,currentFirstChild);var created=createFiberFromText(textContent,returnFiber.mode,expirationTime);created.return=returnFiber;return created;}function reconcileSingleElement(returnFiber,currentFirstChild,element,expirationTime){var key=element.key;var child=currentFirstChild;while(child!==null){// TODO: If key === null and child.key === null, then this only applies to
// the first item in the list.
if(child.key===key){if(child.tag===Fragment?element.type===REACT_FRAGMENT_TYPE:child.elementType===element.type){deleteRemainingChildren(returnFiber,child.sibling);var existing=useFiber(child,element.type===REACT_FRAGMENT_TYPE?element.props.children:element.props,expirationTime);existing.ref=coerceRef(returnFiber,child,element);existing.return=returnFiber;{existing._debugSource=element._source;existing._debugOwner=element._owner;}return existing;}else{deleteRemainingChildren(returnFiber,child);break;}}else{deleteChild(returnFiber,child);}child=child.sibling;}if(element.type===REACT_FRAGMENT_TYPE){var created=createFiberFromFragment(element.props.children,returnFiber.mode,expirationTime,element.key);created.return=returnFiber;return created;}else{var _created4=createFiberFromElement(element,returnFiber.mode,expirationTime);_created4.ref=coerceRef(returnFiber,currentFirstChild,element);_created4.return=returnFiber;return _created4;}}function reconcileSinglePortal(returnFiber,currentFirstChild,portal,expirationTime){var key=portal.key;var child=currentFirstChild;while(child!==null){// TODO: If key === null and child.key === null, then this only applies to
// the first item in the list.
if(child.key===key){if(child.tag===HostPortal&&child.stateNode.containerInfo===portal.containerInfo&&child.stateNode.implementation===portal.implementation){deleteRemainingChildren(returnFiber,child.sibling);var existing=useFiber(child,portal.children||[],expirationTime);existing.return=returnFiber;return existing;}else{deleteRemainingChildren(returnFiber,child);break;}}else{deleteChild(returnFiber,child);}child=child.sibling;}var created=createFiberFromPortal(portal,returnFiber.mode,expirationTime);created.return=returnFiber;return created;}// This API will tag the children with the side-effect of the reconciliation
// itself. They will be added to the side-effect list as we pass through the
// children and the parent.
function reconcileChildFibers(returnFiber,currentFirstChild,newChild,expirationTime){// This function is not recursive.
// If the top level item is an array, we treat it as a set of children,
// not as a fragment. Nested arrays on the other hand will be treated as
// fragment nodes. Recursion happens at the normal flow.
// Handle top level unkeyed fragments as if they were arrays.
// This leads to an ambiguity between <>{[...]}</> and <>...</>.
// We treat the ambiguous cases above the same.
var isUnkeyedTopLevelFragment=(typeof newChild==='undefined'?'undefined':_typeof(newChild))==='object'&&newChild!==null&&newChild.type===REACT_FRAGMENT_TYPE&&newChild.key===null;if(isUnkeyedTopLevelFragment){newChild=newChild.props.children;}// Handle object types
var isObject=(typeof newChild==='undefined'?'undefined':_typeof(newChild))==='object'&&newChild!==null;if(isObject){switch(newChild.$$typeof){case REACT_ELEMENT_TYPE:return placeSingleChild(reconcileSingleElement(returnFiber,currentFirstChild,newChild,expirationTime));case REACT_PORTAL_TYPE:return placeSingleChild(reconcileSinglePortal(returnFiber,currentFirstChild,newChild,expirationTime));}}if(typeof newChild==='string'||typeof newChild==='number'){return placeSingleChild(reconcileSingleTextNode(returnFiber,currentFirstChild,''+newChild,expirationTime));}if(isArray(newChild)){return reconcileChildrenArray(returnFiber,currentFirstChild,newChild,expirationTime);}if(getIteratorFn(newChild)){return reconcileChildrenIterator(returnFiber,currentFirstChild,newChild,expirationTime);}if(isObject){throwOnInvalidObjectType(returnFiber,newChild);}{if(typeof newChild==='function'){warnOnFunctionType();}}if(typeof newChild==='undefined'&&!isUnkeyedTopLevelFragment){// If the new child is undefined, and the return fiber is a composite
// component, throw an error. If Fiber return types are disabled,
// we already threw above.
switch(returnFiber.tag){case ClassComponent:{{var instance=returnFiber.stateNode;if(instance.render._isMockFunction){// We allow auto-mocks to proceed as if they're returning null.
break;}}}// Intentionally fall through to the next case, which handles both
// functions and classes
// eslint-disable-next-lined no-fallthrough
case FunctionComponent:{var Component=returnFiber.type;invariant(false,'%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.',Component.displayName||Component.name||'Component');}}}// Remaining cases are all treated as empty.
return deleteRemainingChildren(returnFiber,currentFirstChild);}return reconcileChildFibers;}var reconcileChildFibers=ChildReconciler(true);var mountChildFibers=ChildReconciler(false);function cloneChildFibers(current$$1,workInProgress){!(current$$1===null||workInProgress.child===current$$1.child)?invariant(false,'Resuming work not yet implemented.'):void 0;if(workInProgress.child===null){return;}var currentChild=workInProgress.child;var newChild=createWorkInProgress(currentChild,currentChild.pendingProps,currentChild.expirationTime);workInProgress.child=newChild;newChild.return=workInProgress;while(currentChild.sibling!==null){currentChild=currentChild.sibling;newChild=newChild.sibling=createWorkInProgress(currentChild,currentChild.pendingProps,currentChild.expirationTime);newChild.return=workInProgress;}newChild.sibling=null;}// The deepest Fiber on the stack involved in a hydration context.
// This may have been an insertion or a hydration.
var hydrationParentFiber=null;var nextHydratableInstance=null;var isHydrating=false;function enterHydrationState(fiber){if(!supportsHydration){return false;}var parentInstance=fiber.stateNode.containerInfo;nextHydratableInstance=getFirstHydratableChild(parentInstance);hydrationParentFiber=fiber;isHydrating=true;return true;}function deleteHydratableInstance(returnFiber,instance){{switch(returnFiber.tag){case HostRoot:didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo,instance);break;case HostComponent:didNotHydrateInstance(returnFiber.type,returnFiber.memoizedProps,returnFiber.stateNode,instance);break;}}var childToDelete=createFiberFromHostInstanceForDeletion();childToDelete.stateNode=instance;childToDelete.return=returnFiber;childToDelete.effectTag=Deletion;// This might seem like it belongs on progressedFirstDeletion. However,
// these children are not part of the reconciliation list of children.
// Even if we abort and rereconcile the children, that will try to hydrate
// again and the nodes are still in the host tree so these will be
// recreated.
if(returnFiber.lastEffect!==null){returnFiber.lastEffect.nextEffect=childToDelete;returnFiber.lastEffect=childToDelete;}else{returnFiber.firstEffect=returnFiber.lastEffect=childToDelete;}}function insertNonHydratedInstance(returnFiber,fiber){fiber.effectTag|=Placement;{switch(returnFiber.tag){case HostRoot:{var parentContainer=returnFiber.stateNode.containerInfo;switch(fiber.tag){case HostComponent:var type=fiber.type;var props=fiber.pendingProps;didNotFindHydratableContainerInstance(parentContainer,type,props);break;case HostText:var text=fiber.pendingProps;didNotFindHydratableContainerTextInstance(parentContainer,text);break;}break;}case HostComponent:{var parentType=returnFiber.type;var parentProps=returnFiber.memoizedProps;var parentInstance=returnFiber.stateNode;switch(fiber.tag){case HostComponent:var _type=fiber.type;var _props=fiber.pendingProps;didNotFindHydratableInstance(parentType,parentProps,parentInstance,_type,_props);break;case HostText:var _text=fiber.pendingProps;didNotFindHydratableTextInstance(parentType,parentProps,parentInstance,_text);break;}break;}default:return;}}}function tryHydrate(fiber,nextInstance){switch(fiber.tag){case HostComponent:{var type=fiber.type;var props=fiber.pendingProps;var instance=canHydrateInstance(nextInstance,type,props);if(instance!==null){fiber.stateNode=instance;return true;}return false;}case HostText:{var text=fiber.pendingProps;var textInstance=canHydrateTextInstance(nextInstance,text);if(textInstance!==null){fiber.stateNode=textInstance;return true;}return false;}default:return false;}}function tryToClaimNextHydratableInstance(fiber){if(!isHydrating){return;}var nextInstance=nextHydratableInstance;if(!nextInstance){// Nothing to hydrate. Make it an insertion.
insertNonHydratedInstance(hydrationParentFiber,fiber);isHydrating=false;hydrationParentFiber=fiber;return;}var firstAttemptedInstance=nextInstance;if(!tryHydrate(fiber,nextInstance)){// If we can't hydrate this instance let's try the next one.
// We use this as a heuristic. It's based on intuition and not data so it
// might be flawed or unnecessary.
nextInstance=getNextHydratableSibling(firstAttemptedInstance);if(!nextInstance||!tryHydrate(fiber,nextInstance)){// Nothing to hydrate. Make it an insertion.
insertNonHydratedInstance(hydrationParentFiber,fiber);isHydrating=false;hydrationParentFiber=fiber;return;}// We matched the next one, we'll now assume that the first one was
// superfluous and we'll delete it. Since we can't eagerly delete it
// we'll have to schedule a deletion. To do that, this node needs a dummy
// fiber associated with it.
deleteHydratableInstance(hydrationParentFiber,firstAttemptedInstance);}hydrationParentFiber=fiber;nextHydratableInstance=getFirstHydratableChild(nextInstance);}function prepareToHydrateHostInstance(fiber,rootContainerInstance,hostContext){if(!supportsHydration){invariant(false,'Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');}var instance=fiber.stateNode;var updatePayload=hydrateInstance(instance,fiber.type,fiber.memoizedProps,rootContainerInstance,hostContext,fiber);// TODO: Type this specific to this type of component.
fiber.updateQueue=updatePayload;// If the update payload indicates that there is a change or if there
// is a new ref we mark this as an update.
if(updatePayload!==null){return true;}return false;}function prepareToHydrateHostTextInstance(fiber){if(!supportsHydration){invariant(false,'Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');}var textInstance=fiber.stateNode;var textContent=fiber.memoizedProps;var shouldUpdate=hydrateTextInstance(textInstance,textContent,fiber);{if(shouldUpdate){// We assume that prepareToHydrateHostTextInstance is called in a context where the
// hydration parent is the parent host component of this host text.
var returnFiber=hydrationParentFiber;if(returnFiber!==null){switch(returnFiber.tag){case HostRoot:{var parentContainer=returnFiber.stateNode.containerInfo;didNotMatchHydratedContainerTextInstance(parentContainer,textInstance,textContent);break;}case HostComponent:{var parentType=returnFiber.type;var parentProps=returnFiber.memoizedProps;var parentInstance=returnFiber.stateNode;didNotMatchHydratedTextInstance(parentType,parentProps,parentInstance,textInstance,textContent);break;}}}}}return shouldUpdate;}function popToNextHostParent(fiber){var parent=fiber.return;while(parent!==null&&parent.tag!==HostComponent&&parent.tag!==HostRoot){parent=parent.return;}hydrationParentFiber=parent;}function popHydrationState(fiber){if(!supportsHydration){return false;}if(fiber!==hydrationParentFiber){// We're deeper than the current hydration context, inside an inserted
// tree.
return false;}if(!isHydrating){// If we're not currently hydrating but we're in a hydration context, then
// we were an insertion and now need to pop up reenter hydration of our
// siblings.
popToNextHostParent(fiber);isHydrating=true;return false;}var type=fiber.type;// If we have any remaining hydratable nodes, we need to delete them now.
// We only do this deeper than head and body since they tend to have random
// other nodes in them. We also ignore components with pure text content in
// side of them.
// TODO: Better heuristic.
if(fiber.tag!==HostComponent||type!=='head'&&type!=='body'&&!shouldSetTextContent(type,fiber.memoizedProps)){var nextInstance=nextHydratableInstance;while(nextInstance){deleteHydratableInstance(fiber,nextInstance);nextInstance=getNextHydratableSibling(nextInstance);}}popToNextHostParent(fiber);nextHydratableInstance=hydrationParentFiber?getNextHydratableSibling(fiber.stateNode):null;return true;}function resetHydrationState(){if(!supportsHydration){return;}hydrationParentFiber=null;nextHydratableInstance=null;isHydrating=false;}function readLazyComponentType(lazyComponent){var status=lazyComponent._status;var result=lazyComponent._result;switch(status){case Resolved:{var Component=result;return Component;}case Rejected:{var error=result;throw error;}case Pending:{var thenable=result;throw thenable;}default:{lazyComponent._status=Pending;var ctor=lazyComponent._ctor;var _thenable=ctor();_thenable.then(function(moduleObject){if(lazyComponent._status===Pending){var defaultExport=moduleObject.default;{if(defaultExport===undefined){warning$1(false,'lazy: Expected the result of a dynamic import() call. '+'Instead received: %s\n\nYour code should look like: \n  '+"const MyComponent = lazy(() => import('./MyComponent'))",moduleObject);}}lazyComponent._status=Resolved;lazyComponent._result=defaultExport;}},function(error){if(lazyComponent._status===Pending){lazyComponent._status=Rejected;lazyComponent._result=error;}});lazyComponent._result=_thenable;throw _thenable;}}}var ReactCurrentOwner$3=ReactSharedInternals.ReactCurrentOwner;var didWarnAboutBadClass=void 0;var didWarnAboutContextTypeOnFunctionComponent=void 0;var didWarnAboutGetDerivedStateOnFunctionComponent=void 0;var didWarnAboutFunctionRefs=void 0;{didWarnAboutBadClass={};didWarnAboutContextTypeOnFunctionComponent={};didWarnAboutGetDerivedStateOnFunctionComponent={};didWarnAboutFunctionRefs={};}function reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime){if(current$$1===null){// If this is a fresh new component that hasn't been rendered yet, we
// won't update its child set by applying minimal side-effects. Instead,
// we will add them all to the child before it gets rendered. That means
// we can optimize this reconciliation pass by not tracking side-effects.
workInProgress.child=mountChildFibers(workInProgress,null,nextChildren,renderExpirationTime);}else{// If the current child is the same as the work in progress, it means that
// we haven't yet started any work on these children. Therefore, we use
// the clone algorithm to create a copy of all the current children.
// If we had any progressed work already, that is invalid at this point so
// let's throw it out.
workInProgress.child=reconcileChildFibers(workInProgress,current$$1.child,nextChildren,renderExpirationTime);}}function forceUnmountCurrentAndReconcile(current$$1,workInProgress,nextChildren,renderExpirationTime){// This function is fork of reconcileChildren. It's used in cases where we
// want to reconcile without matching against the existing set. This has the
// effect of all current children being unmounted; even if the type and key
// are the same, the old child is unmounted and a new child is created.
//
// To do this, we're going to go through the reconcile algorithm twice. In
// the first pass, we schedule a deletion for all the current children by
// passing null.
workInProgress.child=reconcileChildFibers(workInProgress,current$$1.child,null,renderExpirationTime);// In the second pass, we mount the new children. The trick here is that we
// pass null in place of where we usually pass the current child set. This has
// the effect of remounting all children regardless of whether their their
// identity matches.
workInProgress.child=reconcileChildFibers(workInProgress,null,nextChildren,renderExpirationTime);}function updateForwardRef(current$$1,workInProgress,type,nextProps,renderExpirationTime){var render=type.render;var ref=workInProgress.ref;if(hasContextChanged()){// Normally we can bail out on props equality but if context has changed
// we don't do the bailout and we have to reuse existing props instead.
}else if(workInProgress.memoizedProps===nextProps){var currentRef=current$$1!==null?current$$1.ref:null;if(ref===currentRef){return bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime);}}var nextChildren=void 0;{ReactCurrentOwner$3.current=workInProgress;setCurrentPhase('render');nextChildren=render(nextProps,ref);setCurrentPhase(null);}reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);return workInProgress.child;}function updateMemoComponent(current$$1,workInProgress,Component,nextProps,updateExpirationTime,renderExpirationTime){if(current$$1===null){var type=Component.type;if(isSimpleFunctionComponent(type)&&Component.compare===null){// If this is a plain function component without default props,
// and with only the default shallow comparison, we upgrade it
// to a SimpleMemoComponent to allow fast path updates.
workInProgress.tag=SimpleMemoComponent;workInProgress.type=type;return updateSimpleMemoComponent(current$$1,workInProgress,type,nextProps,updateExpirationTime,renderExpirationTime);}var child=createFiberFromTypeAndProps(Component.type,null,nextProps,null,workInProgress.mode,renderExpirationTime);child.ref=workInProgress.ref;child.return=workInProgress;workInProgress.child=child;return child;}var currentChild=current$$1.child;// This is always exactly one child
if(updateExpirationTime===NoWork||updateExpirationTime>renderExpirationTime){// This will be the props with resolved defaultProps,
// unlike current.memoizedProps which will be the unresolved ones.
var prevProps=currentChild.memoizedProps;// Default to shallow comparison
var compare=Component.compare;compare=compare!==null?compare:shallowEqual;if(compare(prevProps,nextProps)&&current$$1.ref===workInProgress.ref){return bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime);}}var newChild=createWorkInProgress(currentChild,nextProps,renderExpirationTime);newChild.ref=workInProgress.ref;newChild.return=workInProgress;workInProgress.child=newChild;return newChild;}function updateSimpleMemoComponent(current$$1,workInProgress,Component,nextProps,updateExpirationTime,renderExpirationTime){if(current$$1!==null&&(updateExpirationTime===NoWork||updateExpirationTime>renderExpirationTime)){var prevProps=current$$1.memoizedProps;if(shallowEqual(prevProps,nextProps)&&current$$1.ref===workInProgress.ref){return bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime);}}return updateFunctionComponent(current$$1,workInProgress,Component,nextProps,renderExpirationTime);}function updateFragment(current$$1,workInProgress,renderExpirationTime){var nextChildren=workInProgress.pendingProps;reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);return workInProgress.child;}function updateMode(current$$1,workInProgress,renderExpirationTime){var nextChildren=workInProgress.pendingProps.children;reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);return workInProgress.child;}function updateProfiler(current$$1,workInProgress,renderExpirationTime){if(enableProfilerTimer){workInProgress.effectTag|=Update;}var nextProps=workInProgress.pendingProps;var nextChildren=nextProps.children;reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);return workInProgress.child;}function markRef(current$$1,workInProgress){var ref=workInProgress.ref;if(current$$1===null&&ref!==null||current$$1!==null&&current$$1.ref!==ref){// Schedule a Ref effect
workInProgress.effectTag|=Ref;}}function updateFunctionComponent(current$$1,workInProgress,Component,nextProps,renderExpirationTime){var unmaskedContext=getUnmaskedContext(workInProgress,Component,true);var context=getMaskedContext(workInProgress,unmaskedContext);var nextChildren=void 0;prepareToReadContext(workInProgress,renderExpirationTime);{ReactCurrentOwner$3.current=workInProgress;setCurrentPhase('render');nextChildren=Component(nextProps,context);setCurrentPhase(null);}// React DevTools reads this flag.
workInProgress.effectTag|=PerformedWork;reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);return workInProgress.child;}function updateClassComponent(current$$1,workInProgress,Component,nextProps,renderExpirationTime){// Push context providers early to prevent context stack mismatches.
// During mounting we don't know the child context yet as the instance doesn't exist.
// We will invalidate the child context in finishClassComponent() right after rendering.
var hasContext=void 0;if(isContextProvider(Component)){hasContext=true;pushContextProvider(workInProgress);}else{hasContext=false;}prepareToReadContext(workInProgress,renderExpirationTime);var instance=workInProgress.stateNode;var shouldUpdate=void 0;if(instance===null){if(current$$1!==null){// An class component without an instance only mounts if it suspended
// inside a non- concurrent tree, in an inconsistent state. We want to
// tree it like a new mount, even though an empty version of it already
// committed. Disconnect the alternate pointers.
current$$1.alternate=null;workInProgress.alternate=null;// Since this is conceptually a new fiber, schedule a Placement effect
workInProgress.effectTag|=Placement;}// In the initial pass we might need to construct the instance.
constructClassInstance(workInProgress,Component,nextProps,renderExpirationTime);mountClassInstance(workInProgress,Component,nextProps,renderExpirationTime);shouldUpdate=true;}else if(current$$1===null){// In a resume, we'll already have an instance we can reuse.
shouldUpdate=resumeMountClassInstance(workInProgress,Component,nextProps,renderExpirationTime);}else{shouldUpdate=updateClassInstance(current$$1,workInProgress,Component,nextProps,renderExpirationTime);}return finishClassComponent(current$$1,workInProgress,Component,shouldUpdate,hasContext,renderExpirationTime);}function finishClassComponent(current$$1,workInProgress,Component,shouldUpdate,hasContext,renderExpirationTime){// Refs should update even if shouldComponentUpdate returns false
markRef(current$$1,workInProgress);var didCaptureError=(workInProgress.effectTag&DidCapture)!==NoEffect;if(!shouldUpdate&&!didCaptureError){// Context providers should defer to sCU for rendering
if(hasContext){invalidateContextProvider(workInProgress,Component,false);}return bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime);}var instance=workInProgress.stateNode;// Rerender
ReactCurrentOwner$3.current=workInProgress;var nextChildren=void 0;if(didCaptureError&&typeof Component.getDerivedStateFromError!=='function'){// If we captured an error, but getDerivedStateFrom catch is not defined,
// unmount all the children. componentDidCatch will schedule an update to
// re-render a fallback. This is temporary until we migrate everyone to
// the new API.
// TODO: Warn in a future release.
nextChildren=null;if(enableProfilerTimer){stopProfilerTimerIfRunning(workInProgress);}}else{{setCurrentPhase('render');nextChildren=instance.render();if(debugRenderPhaseSideEffects||debugRenderPhaseSideEffectsForStrictMode&&workInProgress.mode&StrictMode){instance.render();}setCurrentPhase(null);}}// React DevTools reads this flag.
workInProgress.effectTag|=PerformedWork;if(current$$1!==null&&didCaptureError){// If we're recovering from an error, reconcile without reusing any of
// the existing children. Conceptually, the normal children and the children
// that are shown on error are two different sets, so we shouldn't reuse
// normal children even if their identities match.
forceUnmountCurrentAndReconcile(current$$1,workInProgress,nextChildren,renderExpirationTime);}else{reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);}// Memoize state using the values we just used to render.
// TODO: Restructure so we never read values from the instance.
workInProgress.memoizedState=instance.state;// The context might have changed so we need to recalculate it.
if(hasContext){invalidateContextProvider(workInProgress,Component,true);}return workInProgress.child;}function pushHostRootContext(workInProgress){var root=workInProgress.stateNode;if(root.pendingContext){pushTopLevelContextObject(workInProgress,root.pendingContext,root.pendingContext!==root.context);}else if(root.context){// Should always be set
pushTopLevelContextObject(workInProgress,root.context,false);}pushHostContainer(workInProgress,root.containerInfo);}function updateHostRoot(current$$1,workInProgress,renderExpirationTime){pushHostRootContext(workInProgress);var updateQueue=workInProgress.updateQueue;!(updateQueue!==null)?invariant(false,'If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.'):void 0;var nextProps=workInProgress.pendingProps;var prevState=workInProgress.memoizedState;var prevChildren=prevState!==null?prevState.element:null;processUpdateQueue(workInProgress,updateQueue,nextProps,null,renderExpirationTime);var nextState=workInProgress.memoizedState;// Caution: React DevTools currently depends on this property
// being called "element".
var nextChildren=nextState.element;if(nextChildren===prevChildren){// If the state is the same as before, that's a bailout because we had
// no work that expires at this time.
resetHydrationState();return bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime);}var root=workInProgress.stateNode;if((current$$1===null||current$$1.child===null)&&root.hydrate&&enterHydrationState(workInProgress)){// If we don't have any current children this might be the first pass.
// We always try to hydrate. If this isn't a hydration pass there won't
// be any children to hydrate which is effectively the same thing as
// not hydrating.
// This is a bit of a hack. We track the host root as a placement to
// know that we're currently in a mounting state. That way isMounted
// works as expected. We must reset this before committing.
// TODO: Delete this when we delete isMounted and findDOMNode.
workInProgress.effectTag|=Placement;// Ensure that children mount into this root without tracking
// side-effects. This ensures that we don't store Placement effects on
// nodes that will be hydrated.
workInProgress.child=mountChildFibers(workInProgress,null,nextChildren,renderExpirationTime);}else{// Otherwise reset hydration state in case we aborted and resumed another
// root.
reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);resetHydrationState();}return workInProgress.child;}function updateHostComponent(current$$1,workInProgress,renderExpirationTime){pushHostContext(workInProgress);if(current$$1===null){tryToClaimNextHydratableInstance(workInProgress);}var type=workInProgress.type;var nextProps=workInProgress.pendingProps;var prevProps=current$$1!==null?current$$1.memoizedProps:null;var nextChildren=nextProps.children;var isDirectTextChild=shouldSetTextContent(type,nextProps);if(isDirectTextChild){// We special case a direct text child of a host node. This is a common
// case. We won't handle it as a reified child. We will instead handle
// this in the host environment that also have access to this prop. That
// avoids allocating another HostText fiber and traversing it.
nextChildren=null;}else if(prevProps!==null&&shouldSetTextContent(type,prevProps)){// If we're switching from a direct text child to a normal child, or to
// empty, we need to schedule the text content to be reset.
workInProgress.effectTag|=ContentReset;}markRef(current$$1,workInProgress);// Check the host config to see if the children are offscreen/hidden.
if(renderExpirationTime!==Never&&workInProgress.mode&ConcurrentMode&&shouldDeprioritizeSubtree(type,nextProps)){// Schedule this fiber to re-render at offscreen priority. Then bailout.
workInProgress.expirationTime=Never;return null;}reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);return workInProgress.child;}function updateHostText(current$$1,workInProgress){if(current$$1===null){tryToClaimNextHydratableInstance(workInProgress);}// Nothing to do here. This is terminal. We'll do the completion step
// immediately after.
return null;}function resolveDefaultProps(Component,baseProps){if(Component&&Component.defaultProps){// Resolve default props. Taken from ReactElement
var props=_assign({},baseProps);var defaultProps=Component.defaultProps;for(var propName in defaultProps){if(props[propName]===undefined){props[propName]=defaultProps[propName];}}return props;}return baseProps;}function mountLazyComponent(_current,workInProgress,elementType,updateExpirationTime,renderExpirationTime){if(_current!==null){// An lazy component only mounts if it suspended inside a non-
// concurrent tree, in an inconsistent state. We want to tree it like
// a new mount, even though an empty version of it already committed.
// Disconnect the alternate pointers.
_current.alternate=null;workInProgress.alternate=null;// Since this is conceptually a new fiber, schedule a Placement effect
workInProgress.effectTag|=Placement;}var props=workInProgress.pendingProps;// We can't start a User Timing measurement with correct label yet.
// Cancel and resume right after we know the tag.
cancelWorkTimer(workInProgress);var Component=readLazyComponentType(elementType);// Store the unwrapped component in the type.
workInProgress.type=Component;var resolvedTag=workInProgress.tag=resolveLazyComponentTag(Component);startWorkTimer(workInProgress);var resolvedProps=resolveDefaultProps(Component,props);var child=void 0;switch(resolvedTag){case FunctionComponent:{child=updateFunctionComponent(null,workInProgress,Component,resolvedProps,renderExpirationTime);break;}case ClassComponent:{child=updateClassComponent(null,workInProgress,Component,resolvedProps,renderExpirationTime);break;}case ForwardRef:{child=updateForwardRef(null,workInProgress,Component,resolvedProps,renderExpirationTime);break;}case MemoComponent:{child=updateMemoComponent(null,workInProgress,Component,resolveDefaultProps(Component.type,resolvedProps),// The inner type can have defaults too
updateExpirationTime,renderExpirationTime);break;}default:{// This message intentionally doesn't metion ForwardRef or MemoComponent
// because the fact that it's a separate type of work is an
// implementation detail.
invariant(false,'Element type is invalid. Received a promise that resolves to: %s. Promise elements must resolve to a class or function.',Component);}}return child;}function mountIncompleteClassComponent(_current,workInProgress,Component,nextProps,renderExpirationTime){if(_current!==null){// An incomplete component only mounts if it suspended inside a non-
// concurrent tree, in an inconsistent state. We want to tree it like
// a new mount, even though an empty version of it already committed.
// Disconnect the alternate pointers.
_current.alternate=null;workInProgress.alternate=null;// Since this is conceptually a new fiber, schedule a Placement effect
workInProgress.effectTag|=Placement;}// Promote the fiber to a class and try rendering again.
workInProgress.tag=ClassComponent;// The rest of this function is a fork of `updateClassComponent`
// Push context providers early to prevent context stack mismatches.
// During mounting we don't know the child context yet as the instance doesn't exist.
// We will invalidate the child context in finishClassComponent() right after rendering.
var hasContext=void 0;if(isContextProvider(Component)){hasContext=true;pushContextProvider(workInProgress);}else{hasContext=false;}prepareToReadContext(workInProgress,renderExpirationTime);constructClassInstance(workInProgress,Component,nextProps,renderExpirationTime);mountClassInstance(workInProgress,Component,nextProps,renderExpirationTime);return finishClassComponent(null,workInProgress,Component,true,hasContext,renderExpirationTime);}function mountIndeterminateComponent(_current,workInProgress,Component,renderExpirationTime){if(_current!==null){// An indeterminate component only mounts if it suspended inside a non-
// concurrent tree, in an inconsistent state. We want to tree it like
// a new mount, even though an empty version of it already committed.
// Disconnect the alternate pointers.
_current.alternate=null;workInProgress.alternate=null;// Since this is conceptually a new fiber, schedule a Placement effect
workInProgress.effectTag|=Placement;}var props=workInProgress.pendingProps;var unmaskedContext=getUnmaskedContext(workInProgress,Component,false);var context=getMaskedContext(workInProgress,unmaskedContext);prepareToReadContext(workInProgress,renderExpirationTime);var value=void 0;{if(Component.prototype&&typeof Component.prototype.render==='function'){var componentName=getComponentName(Component)||'Unknown';if(!didWarnAboutBadClass[componentName]){warningWithoutStack$1(false,"The <%s /> component appears to have a render method, but doesn't extend React.Component. "+'This is likely to cause errors. Change %s to extend React.Component instead.',componentName,componentName);didWarnAboutBadClass[componentName]=true;}}if(workInProgress.mode&StrictMode){ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress,null);}ReactCurrentOwner$3.current=workInProgress;value=Component(props,context);}// React DevTools reads this flag.
workInProgress.effectTag|=PerformedWork;if((typeof value==='undefined'?'undefined':_typeof(value))==='object'&&value!==null&&typeof value.render==='function'&&value.$$typeof===undefined){// Proceed under the assumption that this is a class instance
workInProgress.tag=ClassComponent;// Push context providers early to prevent context stack mismatches.
// During mounting we don't know the child context yet as the instance doesn't exist.
// We will invalidate the child context in finishClassComponent() right after rendering.
var hasContext=false;if(isContextProvider(Component)){hasContext=true;pushContextProvider(workInProgress);}else{hasContext=false;}workInProgress.memoizedState=value.state!==null&&value.state!==undefined?value.state:null;var getDerivedStateFromProps=Component.getDerivedStateFromProps;if(typeof getDerivedStateFromProps==='function'){applyDerivedStateFromProps(workInProgress,Component,getDerivedStateFromProps,props);}adoptClassInstance(workInProgress,value);mountClassInstance(workInProgress,Component,props,renderExpirationTime);return finishClassComponent(null,workInProgress,Component,true,hasContext,renderExpirationTime);}else{// Proceed under the assumption that this is a function component
workInProgress.tag=FunctionComponent;{if(Component){!!Component.childContextTypes?warningWithoutStack$1(false,'%s(...): childContextTypes cannot be defined on a function component.',Component.displayName||Component.name||'Component'):void 0;}if(workInProgress.ref!==null){var info='';var ownerName=getCurrentFiberOwnerNameInDevOrNull();if(ownerName){info+='\n\nCheck the render method of `'+ownerName+'`.';}var warningKey=ownerName||workInProgress._debugID||'';var debugSource=workInProgress._debugSource;if(debugSource){warningKey=debugSource.fileName+':'+debugSource.lineNumber;}if(!didWarnAboutFunctionRefs[warningKey]){didWarnAboutFunctionRefs[warningKey]=true;warning$1(false,'Function components cannot be given refs. '+'Attempts to access this ref will fail.%s',info);}}if(typeof Component.getDerivedStateFromProps==='function'){var _componentName=getComponentName(Component)||'Unknown';if(!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName]){warningWithoutStack$1(false,'%s: Function components do not support getDerivedStateFromProps.',_componentName);didWarnAboutGetDerivedStateOnFunctionComponent[_componentName]=true;}}if(_typeof(Component.contextType)==='object'&&Component.contextType!==null){var _componentName2=getComponentName(Component)||'Unknown';if(!didWarnAboutContextTypeOnFunctionComponent[_componentName2]){warningWithoutStack$1(false,'%s: Function components do not support contextType.',_componentName2);didWarnAboutContextTypeOnFunctionComponent[_componentName2]=true;}}}reconcileChildren(null,workInProgress,value,renderExpirationTime);return workInProgress.child;}}function updateSuspenseComponent(current$$1,workInProgress,renderExpirationTime){var mode=workInProgress.mode;var nextProps=workInProgress.pendingProps;// We should attempt to render the primary children unless this boundary
// already suspended during this render (`alreadyCaptured` is true).
var nextState=workInProgress.memoizedState;if(nextState===null){// An empty suspense state means this boundary has not yet timed out.
}else{if(!nextState.alreadyCaptured){// Since we haven't already suspended during this commit, clear the
// existing suspense state. We'll try rendering again.
nextState=null;}else{// Something in this boundary's subtree already suspended. Switch to
// rendering the fallback children. Set `alreadyCaptured` to true.
if(current$$1!==null&&nextState===current$$1.memoizedState){// Create a new suspense state to avoid mutating the current tree's.
nextState={alreadyCaptured:true,didTimeout:true,timedOutAt:nextState.timedOutAt};}else{// Already have a clone, so it's safe to mutate.
nextState.alreadyCaptured=true;nextState.didTimeout=true;}}}var nextDidTimeout=nextState!==null&&nextState.didTimeout;// This next part is a bit confusing. If the children timeout, we switch to
// showing the fallback children in place of the "primary" children.
// However, we don't want to delete the primary children because then their
// state will be lost (both the React state and the host state, e.g.
// uncontrolled form inputs). Instead we keep them mounted and hide them.
// Both the fallback children AND the primary children are rendered at the
// same time. Once the primary children are un-suspended, we can delete
// the fallback children â don't need to preserve their state.
//
// The two sets of children are siblings in the host environment, but
// semantically, for purposes of reconciliation, they are two separate sets.
// So we store them using two fragment fibers.
//
// However, we want to avoid allocating extra fibers for every placeholder.
// They're only necessary when the children time out, because that's the
// only time when both sets are mounted.
//
// So, the extra fragment fibers are only used if the children time out.
// Otherwise, we render the primary children directly. This requires some
// custom reconciliation logic to preserve the state of the primary
// children. It's essentially a very basic form of re-parenting.
// `child` points to the child fiber. In the normal case, this is the first
// fiber of the primary children set. In the timed-out case, it's a
// a fragment fiber containing the primary children.
var child=void 0;// `next` points to the next fiber React should render. In the normal case,
// it's the same as `child`: the first fiber of the primary children set.
// In the timed-out case, it's a fragment fiber containing the *fallback*
// children -- we skip over the primary children entirely.
var next=void 0;if(current$$1===null){// This is the initial mount. This branch is pretty simple because there's
// no previous state that needs to be preserved.
if(nextDidTimeout){// Mount separate fragments for primary and fallback children.
var nextFallbackChildren=nextProps.fallback;var primaryChildFragment=createFiberFromFragment(null,mode,NoWork,null);var fallbackChildFragment=createFiberFromFragment(nextFallbackChildren,mode,renderExpirationTime,null);primaryChildFragment.sibling=fallbackChildFragment;child=primaryChildFragment;// Skip the primary children, and continue working on the
// fallback children.
next=fallbackChildFragment;child.return=next.return=workInProgress;}else{// Mount the primary children without an intermediate fragment fiber.
var nextPrimaryChildren=nextProps.children;child=next=mountChildFibers(workInProgress,null,nextPrimaryChildren,renderExpirationTime);}}else{// This is an update. This branch is more complicated because we need to
// ensure the state of the primary children is preserved.
var prevState=current$$1.memoizedState;var prevDidTimeout=prevState!==null&&prevState.didTimeout;if(prevDidTimeout){// The current tree already timed out. That means each child set is
var currentPrimaryChildFragment=current$$1.child;var currentFallbackChildFragment=currentPrimaryChildFragment.sibling;if(nextDidTimeout){// Still timed out. Reuse the current primary children by cloning
// its fragment. We're going to skip over these entirely.
var _nextFallbackChildren=nextProps.fallback;var _primaryChildFragment=createWorkInProgress(currentPrimaryChildFragment,currentPrimaryChildFragment.pendingProps,NoWork);_primaryChildFragment.effectTag|=Placement;// Clone the fallback child fragment, too. These we'll continue
// working on.
var _fallbackChildFragment=_primaryChildFragment.sibling=createWorkInProgress(currentFallbackChildFragment,_nextFallbackChildren,currentFallbackChildFragment.expirationTime);_fallbackChildFragment.effectTag|=Placement;child=_primaryChildFragment;_primaryChildFragment.childExpirationTime=NoWork;// Skip the primary children, and continue working on the
// fallback children.
next=_fallbackChildFragment;child.return=next.return=workInProgress;}else{// No longer suspended. Switch back to showing the primary children,
// and remove the intermediate fragment fiber.
var _nextPrimaryChildren=nextProps.children;var currentPrimaryChild=currentPrimaryChildFragment.child;var currentFallbackChild=currentFallbackChildFragment.child;var primaryChild=reconcileChildFibers(workInProgress,currentPrimaryChild,_nextPrimaryChildren,renderExpirationTime);// Delete the fallback children.
reconcileChildFibers(workInProgress,currentFallbackChild,null,renderExpirationTime);// Continue rendering the children, like we normally do.
child=next=primaryChild;}}else{// The current tree has not already timed out. That means the primary
var _currentPrimaryChild=current$$1.child;if(nextDidTimeout){// Timed out. Wrap the children in a fragment fiber to keep them
// separate from the fallback children.
var _nextFallbackChildren2=nextProps.fallback;var _primaryChildFragment2=createFiberFromFragment(// It shouldn't matter what the pending props are because we aren't
// going to render this fragment.
null,mode,NoWork,null);_primaryChildFragment2.effectTag|=Placement;_primaryChildFragment2.child=_currentPrimaryChild;_currentPrimaryChild.return=_primaryChildFragment2;// Create a fragment from the fallback children, too.
var _fallbackChildFragment2=_primaryChildFragment2.sibling=createFiberFromFragment(_nextFallbackChildren2,mode,renderExpirationTime,null);_fallbackChildFragment2.effectTag|=Placement;child=_primaryChildFragment2;_primaryChildFragment2.childExpirationTime=NoWork;// Skip the primary children, and continue working on the
// fallback children.
next=_fallbackChildFragment2;child.return=next.return=workInProgress;}else{// Still haven't timed out.  Continue rendering the children, like we
// normally do.
var _nextPrimaryChildren2=nextProps.children;next=child=reconcileChildFibers(workInProgress,_currentPrimaryChild,_nextPrimaryChildren2,renderExpirationTime);}}}workInProgress.memoizedState=nextState;workInProgress.child=child;return next;}function updatePortalComponent(current$$1,workInProgress,renderExpirationTime){pushHostContainer(workInProgress,workInProgress.stateNode.containerInfo);var nextChildren=workInProgress.pendingProps;if(current$$1===null){// Portals are special because we don't append the children during mount
// but at commit. Therefore we need to track insertions which the normal
// flow doesn't do during mount. This doesn't happen at the root because
// the root always starts with a "current" with a null child.
// TODO: Consider unifying this with how the root works.
workInProgress.child=reconcileChildFibers(workInProgress,null,nextChildren,renderExpirationTime);}else{reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);}return workInProgress.child;}function updateContextProvider(current$$1,workInProgress,renderExpirationTime){var providerType=workInProgress.type;var context=providerType._context;var newProps=workInProgress.pendingProps;var oldProps=workInProgress.memoizedProps;var newValue=newProps.value;{var providerPropTypes=workInProgress.type.propTypes;if(providerPropTypes){checkPropTypes(providerPropTypes,newProps,'prop','Context.Provider',getCurrentFiberStackInDev);}}pushProvider(workInProgress,newValue);if(oldProps!==null){var oldValue=oldProps.value;var changedBits=calculateChangedBits(context,newValue,oldValue);if(changedBits===0){// No change. Bailout early if children are the same.
if(oldProps.children===newProps.children&&!hasContextChanged()){return bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime);}}else{// The context value changed. Search for matching consumers and schedule
// them to update.
propagateContextChange(workInProgress,context,changedBits,renderExpirationTime);}}var newChildren=newProps.children;reconcileChildren(current$$1,workInProgress,newChildren,renderExpirationTime);return workInProgress.child;}var hasWarnedAboutUsingContextAsConsumer=false;function updateContextConsumer(current$$1,workInProgress,renderExpirationTime){var context=workInProgress.type;// The logic below for Context differs depending on PROD or DEV mode. In
// DEV mode, we create a separate object for Context.Consumer that acts
// like a proxy to Context. This proxy object adds unnecessary code in PROD
// so we use the old behaviour (Context.Consumer references Context) to
// reduce size and overhead. The separate object references context via
// a property called "_context", which also gives us the ability to check
// in DEV mode if this property exists or not and warn if it does not.
{if(context._context===undefined){// This may be because it's a Context (rather than a Consumer).
// Or it may be because it's older React where they're the same thing.
// We only want to warn if we're sure it's a new React.
if(context!==context.Consumer){if(!hasWarnedAboutUsingContextAsConsumer){hasWarnedAboutUsingContextAsConsumer=true;warning$1(false,'Rendering <Context> directly is not supported and will be removed in '+'a future major release. Did you mean to render <Context.Consumer> instead?');}}}else{context=context._context;}}var newProps=workInProgress.pendingProps;var render=newProps.children;{!(typeof render==='function')?warningWithoutStack$1(false,'A context consumer was rendered with multiple children, or a child '+"that isn't a function. A context consumer expects a single child "+'that is a function. If you did pass a function, make sure there '+'is no trailing or leading whitespace around it.'):void 0;}prepareToReadContext(workInProgress,renderExpirationTime);var newValue=readContext(context,newProps.unstable_observedBits);var newChildren=void 0;{ReactCurrentOwner$3.current=workInProgress;setCurrentPhase('render');newChildren=render(newValue);setCurrentPhase(null);}// React DevTools reads this flag.
workInProgress.effectTag|=PerformedWork;reconcileChildren(current$$1,workInProgress,newChildren,renderExpirationTime);return workInProgress.child;}/*
  function reuseChildrenEffects(returnFiber : Fiber, firstChild : Fiber) {
    let child = firstChild;
    do {
      // Ensure that the first and last effect of the parent corresponds
      // to the children's first and last effect.
      if (!returnFiber.firstEffect) {
        returnFiber.firstEffect = child.firstEffect;
      }
      if (child.lastEffect) {
        if (returnFiber.lastEffect) {
          returnFiber.lastEffect.nextEffect = child.firstEffect;
        }
        returnFiber.lastEffect = child.lastEffect;
      }
    } while (child = child.sibling);
  }
  */function bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime){cancelWorkTimer(workInProgress);if(current$$1!==null){// Reuse previous context list
workInProgress.firstContextDependency=current$$1.firstContextDependency;}if(enableProfilerTimer){// Don't update "base" render times for bailouts.
stopProfilerTimerIfRunning(workInProgress);}// Check if the children have any pending work.
var childExpirationTime=workInProgress.childExpirationTime;if(childExpirationTime===NoWork||childExpirationTime>renderExpirationTime){// The children don't have any work either. We can skip them.
// TODO: Once we add back resuming, we should check if the children are
// a work-in-progress set. If so, we need to transfer their effects.
return null;}else{// This fiber doesn't have work, but its subtree does. Clone the child
// fibers and continue.
cloneChildFibers(current$$1,workInProgress);return workInProgress.child;}}function beginWork(current$$1,workInProgress,renderExpirationTime){var updateExpirationTime=workInProgress.expirationTime;if(current$$1!==null){var oldProps=current$$1.memoizedProps;var newProps=workInProgress.pendingProps;if(oldProps===newProps&&!hasContextChanged()&&(updateExpirationTime===NoWork||updateExpirationTime>renderExpirationTime)){// This fiber does not have any pending work. Bailout without entering
// the begin phase. There's still some bookkeeping we that needs to be done
// in this optimized path, mostly pushing stuff onto the stack.
switch(workInProgress.tag){case HostRoot:pushHostRootContext(workInProgress);resetHydrationState();break;case HostComponent:pushHostContext(workInProgress);break;case ClassComponent:{var Component=workInProgress.type;if(isContextProvider(Component)){pushContextProvider(workInProgress);}break;}case HostPortal:pushHostContainer(workInProgress,workInProgress.stateNode.containerInfo);break;case ContextProvider:{var newValue=workInProgress.memoizedProps.value;pushProvider(workInProgress,newValue);break;}case Profiler:if(enableProfilerTimer){workInProgress.effectTag|=Update;}break;case SuspenseComponent:{var state=workInProgress.memoizedState;var didTimeout=state!==null&&state.didTimeout;if(didTimeout){// If this boundary is currently timed out, we need to decide
// whether to retry the primary children, or to skip over it and
// go straight to the fallback. Check the priority of the primary
var primaryChildFragment=workInProgress.child;var primaryChildExpirationTime=primaryChildFragment.childExpirationTime;if(primaryChildExpirationTime!==NoWork&&primaryChildExpirationTime<=renderExpirationTime){// The primary children have pending work. Use the normal path
// to attempt to render the primary children again.
return updateSuspenseComponent(current$$1,workInProgress,renderExpirationTime);}else{// The primary children do not have pending work with sufficient
// priority. Bailout.
var child=bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime);if(child!==null){// The fallback children have pending work. Skip over the
// primary children and work on the fallback.
return child.sibling;}else{return null;}}}break;}}return bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime);}}// Before entering the begin phase, clear the expiration time.
workInProgress.expirationTime=NoWork;switch(workInProgress.tag){case IndeterminateComponent:{var elementType=workInProgress.elementType;return mountIndeterminateComponent(current$$1,workInProgress,elementType,renderExpirationTime);}case LazyComponent:{var _elementType=workInProgress.elementType;return mountLazyComponent(current$$1,workInProgress,_elementType,updateExpirationTime,renderExpirationTime);}case FunctionComponent:{var _Component=workInProgress.type;var unresolvedProps=workInProgress.pendingProps;var resolvedProps=workInProgress.elementType===_Component?unresolvedProps:resolveDefaultProps(_Component,unresolvedProps);return updateFunctionComponent(current$$1,workInProgress,_Component,resolvedProps,renderExpirationTime);}case ClassComponent:{var _Component2=workInProgress.type;var _unresolvedProps=workInProgress.pendingProps;var _resolvedProps=workInProgress.elementType===_Component2?_unresolvedProps:resolveDefaultProps(_Component2,_unresolvedProps);return updateClassComponent(current$$1,workInProgress,_Component2,_resolvedProps,renderExpirationTime);}case HostRoot:return updateHostRoot(current$$1,workInProgress,renderExpirationTime);case HostComponent:return updateHostComponent(current$$1,workInProgress,renderExpirationTime);case HostText:return updateHostText(current$$1,workInProgress);case SuspenseComponent:return updateSuspenseComponent(current$$1,workInProgress,renderExpirationTime);case HostPortal:return updatePortalComponent(current$$1,workInProgress,renderExpirationTime);case ForwardRef:{var type=workInProgress.type;var _unresolvedProps2=workInProgress.pendingProps;var _resolvedProps2=workInProgress.elementType===type?_unresolvedProps2:resolveDefaultProps(type,_unresolvedProps2);return updateForwardRef(current$$1,workInProgress,type,_resolvedProps2,renderExpirationTime);}case Fragment:return updateFragment(current$$1,workInProgress,renderExpirationTime);case Mode:return updateMode(current$$1,workInProgress,renderExpirationTime);case Profiler:return updateProfiler(current$$1,workInProgress,renderExpirationTime);case ContextProvider:return updateContextProvider(current$$1,workInProgress,renderExpirationTime);case ContextConsumer:return updateContextConsumer(current$$1,workInProgress,renderExpirationTime);case MemoComponent:{var _type=workInProgress.type;var _unresolvedProps3=workInProgress.pendingProps;var _resolvedProps3=resolveDefaultProps(_type.type,_unresolvedProps3);return updateMemoComponent(current$$1,workInProgress,_type,_resolvedProps3,updateExpirationTime,renderExpirationTime);}case SimpleMemoComponent:{return updateSimpleMemoComponent(current$$1,workInProgress,workInProgress.type,workInProgress.pendingProps,updateExpirationTime,renderExpirationTime);}case IncompleteClassComponent:{var _Component3=workInProgress.type;var _unresolvedProps4=workInProgress.pendingProps;var _resolvedProps4=workInProgress.elementType===_Component3?_unresolvedProps4:resolveDefaultProps(_Component3,_unresolvedProps4);return mountIncompleteClassComponent(current$$1,workInProgress,_Component3,_resolvedProps4,renderExpirationTime);}default:invariant(false,'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');}}function markUpdate(workInProgress){// Tag the fiber with an update effect. This turns a Placement into
// a PlacementAndUpdate.
workInProgress.effectTag|=Update;}function markRef$1(workInProgress){workInProgress.effectTag|=Ref;}var _appendAllChildren=void 0;var updateHostContainer=void 0;var updateHostComponent$1=void 0;var updateHostText$1=void 0;if(supportsMutation){// Mutation mode
_appendAllChildren=function appendAllChildren(parent,workInProgress,needsVisibilityToggle,isHidden){// We only have the top Fiber that was created but we need recurse down its
// children to find all the terminal nodes.
var node=workInProgress.child;while(node!==null){if(node.tag===HostComponent||node.tag===HostText){appendInitialChild(parent,node.stateNode);}else if(node.tag===HostPortal){// If we have a portal child, then we don't want to traverse
// down its children. Instead, we'll get insertions from each child in
// the portal directly.
}else if(node.child!==null){node.child.return=node;node=node.child;continue;}if(node===workInProgress){return;}while(node.sibling===null){if(node.return===null||node.return===workInProgress){return;}node=node.return;}node.sibling.return=node.return;node=node.sibling;}};updateHostContainer=function updateHostContainer(workInProgress){// Noop
};updateHostComponent$1=function updateHostComponent$1(current,workInProgress,type,newProps,rootContainerInstance){// If we have an alternate, that means this is an update and we need to
// schedule a side-effect to do the updates.
var oldProps=current.memoizedProps;if(oldProps===newProps){// In mutation mode, this is sufficient for a bailout because
// we won't touch this node even if children changed.
return;}// If we get updated because one of our children updated, we don't
// have newProps so we'll have to reuse them.
// TODO: Split the update API as separate for the props vs. children.
// Even better would be if children weren't special cased at all tho.
var instance=workInProgress.stateNode;var currentHostContext=getHostContext();// TODO: Experiencing an error where oldProps is null. Suggests a host
// component is hitting the resume path. Figure out why. Possibly
// related to `hidden`.
var updatePayload=prepareUpdate(instance,type,oldProps,newProps,rootContainerInstance,currentHostContext);// TODO: Type this specific to this type of component.
workInProgress.updateQueue=updatePayload;// If the update payload indicates that there is a change or if there
// is a new ref we mark this as an update. All the work is done in commitWork.
if(updatePayload){markUpdate(workInProgress);}};updateHostText$1=function updateHostText$1(current,workInProgress,oldText,newText){// If the text differs, mark it as an update. All the work in done in commitWork.
if(oldText!==newText){markUpdate(workInProgress);}};}else if(supportsPersistence){// Persistent host tree mode
_appendAllChildren=function appendAllChildren(parent,workInProgress,needsVisibilityToggle,isHidden){// We only have the top Fiber that was created but we need recurse down its
// children to find all the terminal nodes.
var node=workInProgress.child;while(node!==null){// eslint-disable-next-line no-labels
branches:if(node.tag===HostComponent){var instance=node.stateNode;if(needsVisibilityToggle){var props=node.memoizedProps;var type=node.type;if(isHidden){// This child is inside a timed out tree. Hide it.
instance=cloneHiddenInstance(instance,type,props,node);}else{// This child was previously inside a timed out tree. If it was not
// updated during this render, it may need to be unhidden. Clone
// again to be sure.
instance=cloneUnhiddenInstance(instance,type,props,node);}node.stateNode=instance;}appendInitialChild(parent,instance);}else if(node.tag===HostText){var _instance=node.stateNode;if(needsVisibilityToggle){var text=node.memoizedProps;var rootContainerInstance=getRootHostContainer();var currentHostContext=getHostContext();if(isHidden){_instance=createHiddenTextInstance(text,rootContainerInstance,currentHostContext,workInProgress);}else{_instance=createTextInstance(text,rootContainerInstance,currentHostContext,workInProgress);}node.stateNode=_instance;}appendInitialChild(parent,_instance);}else if(node.tag===HostPortal){// If we have a portal child, then we don't want to traverse
// down its children. Instead, we'll get insertions from each child in
// the portal directly.
}else if(node.tag===SuspenseComponent){var current=node.alternate;if(current!==null){var oldState=current.memoizedState;var newState=node.memoizedState;var oldIsHidden=oldState!==null&&oldState.didTimeout;var newIsHidden=newState!==null&&newState.didTimeout;if(oldIsHidden!==newIsHidden){// The placeholder either just timed out or switched back to the normal
// children after having previously timed out. Toggle the visibility of
// the direct host children.
var primaryChildParent=newIsHidden?node.child:node;if(primaryChildParent!==null){_appendAllChildren(parent,primaryChildParent,true,newIsHidden);}// eslint-disable-next-line no-labels
break branches;}}if(node.child!==null){// Continue traversing like normal
node.child.return=node;node=node.child;continue;}}else if(node.child!==null){node.child.return=node;node=node.child;continue;}// $FlowFixMe This is correct but Flow is confused by the labeled break.
node=node;if(node===workInProgress){return;}while(node.sibling===null){if(node.return===null||node.return===workInProgress){return;}node=node.return;}node.sibling.return=node.return;node=node.sibling;}};// An unfortunate fork of appendAllChildren because we have two different parent types.
var appendAllChildrenToContainer=function appendAllChildrenToContainer(containerChildSet,workInProgress,needsVisibilityToggle,isHidden){// We only have the top Fiber that was created but we need recurse down its
// children to find all the terminal nodes.
var node=workInProgress.child;while(node!==null){// eslint-disable-next-line no-labels
branches:if(node.tag===HostComponent){var instance=node.stateNode;if(needsVisibilityToggle){var props=node.memoizedProps;var type=node.type;if(isHidden){// This child is inside a timed out tree. Hide it.
instance=cloneHiddenInstance(instance,type,props,node);}else{// This child was previously inside a timed out tree. If it was not
// updated during this render, it may need to be unhidden. Clone
// again to be sure.
instance=cloneUnhiddenInstance(instance,type,props,node);}node.stateNode=instance;}appendChildToContainerChildSet(containerChildSet,instance);}else if(node.tag===HostText){var _instance2=node.stateNode;if(needsVisibilityToggle){var text=node.memoizedProps;var rootContainerInstance=getRootHostContainer();var currentHostContext=getHostContext();if(isHidden){_instance2=createHiddenTextInstance(text,rootContainerInstance,currentHostContext,workInProgress);}else{_instance2=createTextInstance(text,rootContainerInstance,currentHostContext,workInProgress);}node.stateNode=_instance2;}appendChildToContainerChildSet(containerChildSet,_instance2);}else if(node.tag===HostPortal){// If we have a portal child, then we don't want to traverse
// down its children. Instead, we'll get insertions from each child in
// the portal directly.
}else if(node.tag===SuspenseComponent){var current=node.alternate;if(current!==null){var oldState=current.memoizedState;var newState=node.memoizedState;var oldIsHidden=oldState!==null&&oldState.didTimeout;var newIsHidden=newState!==null&&newState.didTimeout;if(oldIsHidden!==newIsHidden){// The placeholder either just timed out or switched back to the normal
// children after having previously timed out. Toggle the visibility of
// the direct host children.
var primaryChildParent=newIsHidden?node.child:node;if(primaryChildParent!==null){appendAllChildrenToContainer(containerChildSet,primaryChildParent,true,newIsHidden);}// eslint-disable-next-line no-labels
break branches;}}if(node.child!==null){// Continue traversing like normal
node.child.return=node;node=node.child;continue;}}else if(node.child!==null){node.child.return=node;node=node.child;continue;}// $FlowFixMe This is correct but Flow is confused by the labeled break.
node=node;if(node===workInProgress){return;}while(node.sibling===null){if(node.return===null||node.return===workInProgress){return;}node=node.return;}node.sibling.return=node.return;node=node.sibling;}};updateHostContainer=function updateHostContainer(workInProgress){var portalOrRoot=workInProgress.stateNode;var childrenUnchanged=workInProgress.firstEffect===null;if(childrenUnchanged){// No changes, just reuse the existing instance.
}else{var container=portalOrRoot.containerInfo;var newChildSet=createContainerChildSet(container);// If children might have changed, we have to add them all to the set.
appendAllChildrenToContainer(newChildSet,workInProgress,false,false);portalOrRoot.pendingChildren=newChildSet;// Schedule an update on the container to swap out the container.
markUpdate(workInProgress);finalizeContainerChildren(container,newChildSet);}};updateHostComponent$1=function updateHostComponent$1(current,workInProgress,type,newProps,rootContainerInstance){var currentInstance=current.stateNode;var oldProps=current.memoizedProps;// If there are no effects associated with this node, then none of our children had any updates.
// This guarantees that we can reuse all of them.
var childrenUnchanged=workInProgress.firstEffect===null;if(childrenUnchanged&&oldProps===newProps){// No changes, just reuse the existing instance.
// Note that this might release a previous clone.
workInProgress.stateNode=currentInstance;return;}var recyclableInstance=workInProgress.stateNode;var currentHostContext=getHostContext();var updatePayload=null;if(oldProps!==newProps){updatePayload=prepareUpdate(recyclableInstance,type,oldProps,newProps,rootContainerInstance,currentHostContext);}if(childrenUnchanged&&updatePayload===null){// No changes, just reuse the existing instance.
// Note that this might release a previous clone.
workInProgress.stateNode=currentInstance;return;}var newInstance=cloneInstance(currentInstance,updatePayload,type,oldProps,newProps,workInProgress,childrenUnchanged,recyclableInstance);if(finalizeInitialChildren(newInstance,type,newProps,rootContainerInstance,currentHostContext)){markUpdate(workInProgress);}workInProgress.stateNode=newInstance;if(childrenUnchanged){// If there are no other effects in this tree, we need to flag this node as having one.
// Even though we're not going to use it for anything.
// Otherwise parents won't know that there are new children to propagate upwards.
markUpdate(workInProgress);}else{// If children might have changed, we have to add them all to the set.
_appendAllChildren(newInstance,workInProgress,false,false);}};updateHostText$1=function updateHostText$1(current,workInProgress,oldText,newText){if(oldText!==newText){// If the text content differs, we'll create a new text instance for it.
var rootContainerInstance=getRootHostContainer();var currentHostContext=getHostContext();workInProgress.stateNode=createTextInstance(newText,rootContainerInstance,currentHostContext,workInProgress);// We'll have to mark it as having an effect, even though we won't use the effect for anything.
// This lets the parents know that at least one of their children has changed.
markUpdate(workInProgress);}};}else{// No host operations
updateHostContainer=function updateHostContainer(workInProgress){// Noop
};updateHostComponent$1=function updateHostComponent$1(current,workInProgress,type,newProps,rootContainerInstance){// Noop
};updateHostText$1=function updateHostText$1(current,workInProgress,oldText,newText){// Noop
};}function completeWork(current,workInProgress,renderExpirationTime){var newProps=workInProgress.pendingProps;switch(workInProgress.tag){case IndeterminateComponent:break;case LazyComponent:break;case SimpleMemoComponent:case FunctionComponent:break;case ClassComponent:{var Component=workInProgress.type;if(isContextProvider(Component)){popContext(workInProgress);}break;}case HostRoot:{popHostContainer(workInProgress);popTopLevelContextObject(workInProgress);var fiberRoot=workInProgress.stateNode;if(fiberRoot.pendingContext){fiberRoot.context=fiberRoot.pendingContext;fiberRoot.pendingContext=null;}if(current===null||current.child===null){// If we hydrated, pop so that we can delete any remaining children
// that weren't hydrated.
popHydrationState(workInProgress);// This resets the hacky state to fix isMounted before committing.
// TODO: Delete this when we delete isMounted and findDOMNode.
workInProgress.effectTag&=~Placement;}updateHostContainer(workInProgress);break;}case HostComponent:{popHostContext(workInProgress);var rootContainerInstance=getRootHostContainer();var type=workInProgress.type;if(current!==null&&workInProgress.stateNode!=null){updateHostComponent$1(current,workInProgress,type,newProps,rootContainerInstance);if(current.ref!==workInProgress.ref){markRef$1(workInProgress);}}else{if(!newProps){!(workInProgress.stateNode!==null)?invariant(false,'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.'):void 0;// This can happen when we abort work.
break;}var currentHostContext=getHostContext();// TODO: Move createInstance to beginWork and keep it on a context
// "stack" as the parent. Then append children as we go in beginWork
// or completeWork depending on we want to add then top->down or
// bottom->up. Top->down is faster in IE11.
var wasHydrated=popHydrationState(workInProgress);if(wasHydrated){// TODO: Move this and createInstance step into the beginPhase
// to consolidate.
if(prepareToHydrateHostInstance(workInProgress,rootContainerInstance,currentHostContext)){// If changes to the hydrated node needs to be applied at the
// commit-phase we mark this as such.
markUpdate(workInProgress);}}else{var instance=createInstance(type,newProps,rootContainerInstance,currentHostContext,workInProgress);_appendAllChildren(instance,workInProgress,false,false);// Certain renderers require commit-time effects for initial mount.
// (eg DOM renderer supports auto-focus for certain elements).
// Make sure such renderers get scheduled for later work.
if(finalizeInitialChildren(instance,type,newProps,rootContainerInstance,currentHostContext)){markUpdate(workInProgress);}workInProgress.stateNode=instance;}if(workInProgress.ref!==null){// If there is a ref on a host node we need to schedule a callback
markRef$1(workInProgress);}}break;}case HostText:{var newText=newProps;if(current&&workInProgress.stateNode!=null){var oldText=current.memoizedProps;// If we have an alternate, that means this is an update and we need
// to schedule a side-effect to do the updates.
updateHostText$1(current,workInProgress,oldText,newText);}else{if(typeof newText!=='string'){!(workInProgress.stateNode!==null)?invariant(false,'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.'):void 0;// This can happen when we abort work.
}var _rootContainerInstance=getRootHostContainer();var _currentHostContext=getHostContext();var _wasHydrated=popHydrationState(workInProgress);if(_wasHydrated){if(prepareToHydrateHostTextInstance(workInProgress)){markUpdate(workInProgress);}}else{workInProgress.stateNode=createTextInstance(newText,_rootContainerInstance,_currentHostContext,workInProgress);}}break;}case ForwardRef:break;case SuspenseComponent:{var nextState=workInProgress.memoizedState;var prevState=current!==null?current.memoizedState:null;var nextDidTimeout=nextState!==null&&nextState.didTimeout;var prevDidTimeout=prevState!==null&&prevState.didTimeout;if(nextDidTimeout!==prevDidTimeout){// If this render commits, and it switches between the normal state
// and the timed-out state, schedule an effect.
workInProgress.effectTag|=Update;}break;}case Fragment:break;case Mode:break;case Profiler:break;case HostPortal:popHostContainer(workInProgress);updateHostContainer(workInProgress);break;case ContextProvider:// Pop provider fiber
popProvider(workInProgress);break;case ContextConsumer:break;case MemoComponent:break;case IncompleteClassComponent:{// Same as class component case. I put it down here so that the tags are
// sequential to ensure this switch is compiled to a jump table.
var _Component=workInProgress.type;if(isContextProvider(_Component)){popContext(workInProgress);}break;}default:invariant(false,'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');}return null;}function shouldCaptureSuspense(current,workInProgress){// In order to capture, the Suspense component must have a fallback prop.
if(workInProgress.memoizedProps.fallback===undefined){return false;}// If it was the primary children that just suspended, capture and render the
// fallback. Otherwise, don't capture and bubble to the next boundary.
var nextState=workInProgress.memoizedState;return nextState===null||!nextState.didTimeout;}// This module is forked in different environments.
// By default, return `true` to log errors to the console.
// Forks can return `false` if this isn't desirable.
function showErrorDialog(capturedError){return true;}function logCapturedError(capturedError){var logError=showErrorDialog(capturedError);// Allow injected showErrorDialog() to prevent default console.error logging.
// This enables renderers like ReactNative to better manage redbox behavior.
if(logError===false){return;}var error=capturedError.error;{var componentName=capturedError.componentName,componentStack=capturedError.componentStack,errorBoundaryName=capturedError.errorBoundaryName,errorBoundaryFound=capturedError.errorBoundaryFound,willRetry=capturedError.willRetry;// Browsers support silencing uncaught errors by calling
// `preventDefault()` in window `error` handler.
// We record this information as an expando on the error.
if(error!=null&&error._suppressLogging){if(errorBoundaryFound&&willRetry){// The error is recoverable and was silenced.
// Ignore it and don't print the stack addendum.
// This is handy for testing error boundaries without noise.
return;}// The error is fatal. Since the silencing might have
// been accidental, we'll surface it anyway.
// However, the browser would have silenced the original error
// so we'll print it first, and then print the stack addendum.
console.error(error);// For a more detailed description of this block, see:
// https://github.com/facebook/react/pull/13384
}var componentNameMessage=componentName?'The above error occurred in the <'+componentName+'> component:':'The above error occurred in one of your React components:';var errorBoundaryMessage=void 0;// errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.
if(errorBoundaryFound&&errorBoundaryName){if(willRetry){errorBoundaryMessage='React will try to recreate this component tree from scratch '+('using the error boundary you provided, '+errorBoundaryName+'.');}else{errorBoundaryMessage='This error was initially handled by the error boundary '+errorBoundaryName+'.\n'+'Recreating the tree from scratch failed so React will unmount the tree.';}}else{errorBoundaryMessage='Consider adding an error boundary to your tree to customize error handling behavior.\n'+'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';}var combinedMessage=''+componentNameMessage+componentStack+'\n\n'+(''+errorBoundaryMessage);// In development, we provide our own message with just the component stack.
// We don't include the original error message and JS stack because the browser
// has already printed it. Even if the application swallows the error, it is still
// displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
console.error(combinedMessage);}}var didWarnAboutUndefinedSnapshotBeforeUpdate=null;{didWarnAboutUndefinedSnapshotBeforeUpdate=new Set();}function logError(boundary,errorInfo){var source=errorInfo.source;var stack=errorInfo.stack;if(stack===null&&source!==null){stack=getStackByFiberInDevAndProd(source);}var capturedError={componentName:source!==null?getComponentName(source.type):null,componentStack:stack!==null?stack:'',error:errorInfo.value,errorBoundary:null,errorBoundaryName:null,errorBoundaryFound:false,willRetry:false};if(boundary!==null&&boundary.tag===ClassComponent){capturedError.errorBoundary=boundary.stateNode;capturedError.errorBoundaryName=getComponentName(boundary.type);capturedError.errorBoundaryFound=true;capturedError.willRetry=true;}try{logCapturedError(capturedError);}catch(e){// This method must not throw, or React internal state will get messed up.
// If console.error is overridden, or logCapturedError() shows a dialog that throws,
// we want to report this error outside of the normal stack as a last resort.
// https://github.com/facebook/react/issues/13188
setTimeout(function(){throw e;});}}var callComponentWillUnmountWithTimer=function callComponentWillUnmountWithTimer(current$$1,instance){startPhaseTimer(current$$1,'componentWillUnmount');instance.props=current$$1.memoizedProps;instance.state=current$$1.memoizedState;instance.componentWillUnmount();stopPhaseTimer();};// Capture errors so they don't interrupt unmounting.
function safelyCallComponentWillUnmount(current$$1,instance){{invokeGuardedCallback(null,callComponentWillUnmountWithTimer,null,current$$1,instance);if(hasCaughtError()){var unmountError=clearCaughtError();captureCommitPhaseError(current$$1,unmountError);}}}function safelyDetachRef(current$$1){var ref=current$$1.ref;if(ref!==null){if(typeof ref==='function'){{invokeGuardedCallback(null,ref,null,null);if(hasCaughtError()){var refError=clearCaughtError();captureCommitPhaseError(current$$1,refError);}}}else{ref.current=null;}}}function commitBeforeMutationLifeCycles(current$$1,finishedWork){switch(finishedWork.tag){case ClassComponent:{if(finishedWork.effectTag&Snapshot){if(current$$1!==null){var prevProps=current$$1.memoizedProps;var prevState=current$$1.memoizedState;startPhaseTimer(finishedWork,'getSnapshotBeforeUpdate');var instance=finishedWork.stateNode;instance.props=finishedWork.memoizedProps;instance.state=finishedWork.memoizedState;var snapshot=instance.getSnapshotBeforeUpdate(prevProps,prevState);{var didWarnSet=didWarnAboutUndefinedSnapshotBeforeUpdate;if(snapshot===undefined&&!didWarnSet.has(finishedWork.type)){didWarnSet.add(finishedWork.type);warningWithoutStack$1(false,'%s.getSnapshotBeforeUpdate(): A snapshot value (or null) '+'must be returned. You have returned undefined.',getComponentName(finishedWork.type));}}instance.__reactInternalSnapshotBeforeUpdate=snapshot;stopPhaseTimer();}}return;}case HostRoot:case HostComponent:case HostText:case HostPortal:case IncompleteClassComponent:// Nothing to do for these component types
return;default:{invariant(false,'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');}}}function commitLifeCycles(finishedRoot,current$$1,finishedWork,committedExpirationTime){switch(finishedWork.tag){case ClassComponent:{var instance=finishedWork.stateNode;if(finishedWork.effectTag&Update){if(current$$1===null){startPhaseTimer(finishedWork,'componentDidMount');instance.props=finishedWork.memoizedProps;instance.state=finishedWork.memoizedState;instance.componentDidMount();stopPhaseTimer();}else{var prevProps=current$$1.memoizedProps;var prevState=current$$1.memoizedState;startPhaseTimer(finishedWork,'componentDidUpdate');instance.props=finishedWork.memoizedProps;instance.state=finishedWork.memoizedState;instance.componentDidUpdate(prevProps,prevState,instance.__reactInternalSnapshotBeforeUpdate);stopPhaseTimer();}}var updateQueue=finishedWork.updateQueue;if(updateQueue!==null){instance.props=finishedWork.memoizedProps;instance.state=finishedWork.memoizedState;commitUpdateQueue(finishedWork,updateQueue,instance,committedExpirationTime);}return;}case HostRoot:{var _updateQueue=finishedWork.updateQueue;if(_updateQueue!==null){var _instance=null;if(finishedWork.child!==null){switch(finishedWork.child.tag){case HostComponent:_instance=getPublicInstance(finishedWork.child.stateNode);break;case ClassComponent:_instance=finishedWork.child.stateNode;break;}}commitUpdateQueue(finishedWork,_updateQueue,_instance,committedExpirationTime);}return;}case HostComponent:{var _instance2=finishedWork.stateNode;// Renderers may schedule work to be done after host components are mounted
// (eg DOM renderer may schedule auto-focus for inputs and form controls).
// These effects should only be committed when components are first mounted,
// aka when there is no current/alternate.
if(current$$1===null&&finishedWork.effectTag&Update){var type=finishedWork.type;var props=finishedWork.memoizedProps;commitMount(_instance2,type,props,finishedWork);}return;}case HostText:{// We have no life-cycles associated with text.
return;}case HostPortal:{// We have no life-cycles associated with portals.
return;}case Profiler:{if(enableProfilerTimer){var onRender=finishedWork.memoizedProps.onRender;if(enableSchedulerTracing){onRender(finishedWork.memoizedProps.id,current$$1===null?'mount':'update',finishedWork.actualDuration,finishedWork.treeBaseDuration,finishedWork.actualStartTime,getCommitTime(),finishedRoot.memoizedInteractions);}else{onRender(finishedWork.memoizedProps.id,current$$1===null?'mount':'update',finishedWork.actualDuration,finishedWork.treeBaseDuration,finishedWork.actualStartTime,getCommitTime());}}return;}case SuspenseComponent:{if(finishedWork.effectTag&Callback){// In non-strict mode, a suspense boundary times out by commiting
// twice: first, by committing the children in an inconsistent state,
// then hiding them and showing the fallback children in a subsequent
var _newState={alreadyCaptured:true,didTimeout:false,timedOutAt:NoWork};finishedWork.memoizedState=_newState;scheduleWork(finishedWork,Sync);return;}var oldState=current$$1!==null?current$$1.memoizedState:null;var newState=finishedWork.memoizedState;var oldDidTimeout=oldState!==null?oldState.didTimeout:false;var newDidTimeout=void 0;var primaryChildParent=finishedWork;if(newState===null){newDidTimeout=false;}else{newDidTimeout=newState.didTimeout;if(newDidTimeout){primaryChildParent=finishedWork.child;newState.alreadyCaptured=false;if(newState.timedOutAt===NoWork){// If the children had not already timed out, record the time.
// This is used to compute the elapsed time during subsequent
// attempts to render the children.
newState.timedOutAt=requestCurrentTime();}}}if(newDidTimeout!==oldDidTimeout&&primaryChildParent!==null){hideOrUnhideAllChildren(primaryChildParent,newDidTimeout);}return;}case IncompleteClassComponent:break;default:{invariant(false,'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');}}}function hideOrUnhideAllChildren(finishedWork,isHidden){if(supportsMutation){// We only have the top Fiber that was inserted but we need recurse down its
var node=finishedWork;while(true){if(node.tag===HostComponent){var instance=node.stateNode;if(isHidden){hideInstance(instance);}else{unhideInstance(node.stateNode,node.memoizedProps);}}else if(node.tag===HostText){var _instance3=node.stateNode;if(isHidden){hideTextInstance(_instance3);}else{unhideTextInstance(_instance3,node.memoizedProps);}}else if(node.child!==null){node.child.return=node;node=node.child;continue;}if(node===finishedWork){return;}while(node.sibling===null){if(node.return===null||node.return===finishedWork){return;}node=node.return;}node.sibling.return=node.return;node=node.sibling;}}}function commitAttachRef(finishedWork){var ref=finishedWork.ref;if(ref!==null){var instance=finishedWork.stateNode;var instanceToUse=void 0;switch(finishedWork.tag){case HostComponent:instanceToUse=getPublicInstance(instance);break;default:instanceToUse=instance;}if(typeof ref==='function'){ref(instanceToUse);}else{{if(!ref.hasOwnProperty('current')){warningWithoutStack$1(false,'Unexpected ref object provided for %s. '+'Use either a ref-setter function or React.createRef().%s',getComponentName(finishedWork.type),getStackByFiberInDevAndProd(finishedWork));}}ref.current=instanceToUse;}}}function commitDetachRef(current$$1){var currentRef=current$$1.ref;if(currentRef!==null){if(typeof currentRef==='function'){currentRef(null);}else{currentRef.current=null;}}}// User-originating errors (lifecycles and refs) should not interrupt
// deletion, so don't let them throw. Host-originating errors should
// interrupt deletion, so it's okay
function commitUnmount(current$$1){onCommitUnmount(current$$1);switch(current$$1.tag){case ClassComponent:{safelyDetachRef(current$$1);var instance=current$$1.stateNode;if(typeof instance.componentWillUnmount==='function'){safelyCallComponentWillUnmount(current$$1,instance);}return;}case HostComponent:{safelyDetachRef(current$$1);return;}case HostPortal:{// TODO: this is recursive.
// We are also not using this parent because
// the portal will get pushed immediately.
if(supportsMutation){unmountHostComponents(current$$1);}else if(supportsPersistence){emptyPortalContainer(current$$1);}return;}}}function commitNestedUnmounts(root){// While we're inside a removed host node we don't want to call
// removeChild on the inner nodes because they're removed by the top
// call anyway. We also want to call componentWillUnmount on all
// composites before this host node is removed from the tree. Therefore
var node=root;while(true){commitUnmount(node);// Visit children because they may contain more composite or host nodes.
// Skip portals because commitUnmount() currently visits them recursively.
if(node.child!==null&&(// If we use mutation we drill down into portals using commitUnmount above.
// If we don't use mutation we drill down into portals here instead.
!supportsMutation||node.tag!==HostPortal)){node.child.return=node;node=node.child;continue;}if(node===root){return;}while(node.sibling===null){if(node.return===null||node.return===root){return;}node=node.return;}node.sibling.return=node.return;node=node.sibling;}}function detachFiber(current$$1){// Cut off the return pointers to disconnect it from the tree. Ideally, we
// should clear the child pointer of the parent alternate to let this
// get GC:ed but we don't know which for sure which parent is the current
// one so we'll settle for GC:ing the subtree of this child. This child
// itself will be GC:ed when the parent updates the next time.
current$$1.return=null;current$$1.child=null;if(current$$1.alternate){current$$1.alternate.child=null;current$$1.alternate.return=null;}}function emptyPortalContainer(current$$1){if(!supportsPersistence){return;}var portal=current$$1.stateNode;var containerInfo=portal.containerInfo;var emptyChildSet=createContainerChildSet(containerInfo);replaceContainerChildren(containerInfo,emptyChildSet);}function commitContainer(finishedWork){if(!supportsPersistence){return;}switch(finishedWork.tag){case ClassComponent:{return;}case HostComponent:{return;}case HostText:{return;}case HostRoot:case HostPortal:{var portalOrRoot=finishedWork.stateNode;var containerInfo=portalOrRoot.containerInfo,_pendingChildren=portalOrRoot.pendingChildren;replaceContainerChildren(containerInfo,_pendingChildren);return;}default:{invariant(false,'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');}}}function getHostParentFiber(fiber){var parent=fiber.return;while(parent!==null){if(isHostParent(parent)){return parent;}parent=parent.return;}invariant(false,'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.');}function isHostParent(fiber){return fiber.tag===HostComponent||fiber.tag===HostRoot||fiber.tag===HostPortal;}function getHostSibling(fiber){// We're going to search forward into the tree until we find a sibling host
// node. Unfortunately, if multiple insertions are done in a row we have to
// search past them. This leads to exponential search for the next sibling.
var node=fiber;siblings:while(true){// If we didn't find anything, let's try the next sibling.
while(node.sibling===null){if(node.return===null||isHostParent(node.return)){// If we pop out of the root or hit the parent the fiber we are the
// last sibling.
return null;}node=node.return;}node.sibling.return=node.return;node=node.sibling;while(node.tag!==HostComponent&&node.tag!==HostText){// If it is not host node and, we might have a host node inside it.
// Try to search down until we find one.
if(node.effectTag&Placement){// If we don't have a child, try the siblings instead.
continue siblings;}// If we don't have a child, try the siblings instead.
// We also skip portals because they are not part of this host tree.
if(node.child===null||node.tag===HostPortal){continue siblings;}else{node.child.return=node;node=node.child;}}// Check if this host node is stable or about to be placed.
if(!(node.effectTag&Placement)){// Found it!
return node.stateNode;}}}function commitPlacement(finishedWork){if(!supportsMutation){return;}// Recursively insert all host nodes into the parent.
var parentFiber=getHostParentFiber(finishedWork);// Note: these two variables *must* always be updated together.
var parent=void 0;var isContainer=void 0;switch(parentFiber.tag){case HostComponent:parent=parentFiber.stateNode;isContainer=false;break;case HostRoot:parent=parentFiber.stateNode.containerInfo;isContainer=true;break;case HostPortal:parent=parentFiber.stateNode.containerInfo;isContainer=true;break;default:invariant(false,'Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.');}if(parentFiber.effectTag&ContentReset){// Reset the text content of the parent before doing any insertions
resetTextContent(parent);// Clear ContentReset from the effect tag
parentFiber.effectTag&=~ContentReset;}var before=getHostSibling(finishedWork);// We only have the top Fiber that was inserted but we need recurse down its
// children to find all the terminal nodes.
var node=finishedWork;while(true){if(node.tag===HostComponent||node.tag===HostText){if(before){if(isContainer){insertInContainerBefore(parent,node.stateNode,before);}else{insertBefore(parent,node.stateNode,before);}}else{if(isContainer){appendChildToContainer(parent,node.stateNode);}else{appendChild(parent,node.stateNode);}}}else if(node.tag===HostPortal){// If the insertion itself is a portal, then we don't want to traverse
// down its children. Instead, we'll get insertions from each child in
// the portal directly.
}else if(node.child!==null){node.child.return=node;node=node.child;continue;}if(node===finishedWork){return;}while(node.sibling===null){if(node.return===null||node.return===finishedWork){return;}node=node.return;}node.sibling.return=node.return;node=node.sibling;}}function unmountHostComponents(current$$1){// We only have the top Fiber that was deleted but we need recurse down its
var node=current$$1;// Each iteration, currentParent is populated with node's host parent if not
// currentParentIsValid.
var currentParentIsValid=false;// Note: these two variables *must* always be updated together.
var currentParent=void 0;var currentParentIsContainer=void 0;while(true){if(!currentParentIsValid){var parent=node.return;findParent:while(true){!(parent!==null)?invariant(false,'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.'):void 0;switch(parent.tag){case HostComponent:currentParent=parent.stateNode;currentParentIsContainer=false;break findParent;case HostRoot:currentParent=parent.stateNode.containerInfo;currentParentIsContainer=true;break findParent;case HostPortal:currentParent=parent.stateNode.containerInfo;currentParentIsContainer=true;break findParent;}parent=parent.return;}currentParentIsValid=true;}if(node.tag===HostComponent||node.tag===HostText){commitNestedUnmounts(node);// After all the children have unmounted, it is now safe to remove the
// node from the tree.
if(currentParentIsContainer){removeChildFromContainer(currentParent,node.stateNode);}else{removeChild(currentParent,node.stateNode);}// Don't visit children because we already visited them.
}else if(node.tag===HostPortal){// When we go into a portal, it becomes the parent to remove from.
// We will reassign it back when we pop the portal on the way up.
currentParent=node.stateNode.containerInfo;currentParentIsContainer=true;// Visit children because portals might contain host components.
if(node.child!==null){node.child.return=node;node=node.child;continue;}}else{commitUnmount(node);// Visit children because we may find more host components below.
if(node.child!==null){node.child.return=node;node=node.child;continue;}}if(node===current$$1){return;}while(node.sibling===null){if(node.return===null||node.return===current$$1){return;}node=node.return;if(node.tag===HostPortal){// When we go out of the portal, we need to restore the parent.
// Since we don't keep a stack of them, we will search for it.
currentParentIsValid=false;}}node.sibling.return=node.return;node=node.sibling;}}function commitDeletion(current$$1){if(supportsMutation){// Recursively delete all host nodes from the parent.
// Detach refs and call componentWillUnmount() on the whole subtree.
unmountHostComponents(current$$1);}else{// Detach refs and call componentWillUnmount() on the whole subtree.
commitNestedUnmounts(current$$1);}detachFiber(current$$1);}function commitWork(current$$1,finishedWork){if(!supportsMutation){commitContainer(finishedWork);return;}switch(finishedWork.tag){case ClassComponent:{return;}case HostComponent:{var instance=finishedWork.stateNode;if(instance!=null){// Commit the work prepared earlier.
var newProps=finishedWork.memoizedProps;// For hydration we reuse the update path but we treat the oldProps
// as the newProps. The updatePayload will contain the real change in
// this case.
var oldProps=current$$1!==null?current$$1.memoizedProps:newProps;var type=finishedWork.type;// TODO: Type the updateQueue to be specific to host components.
var updatePayload=finishedWork.updateQueue;finishedWork.updateQueue=null;if(updatePayload!==null){commitUpdate(instance,updatePayload,type,oldProps,newProps,finishedWork);}}return;}case HostText:{!(finishedWork.stateNode!==null)?invariant(false,'This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.'):void 0;var textInstance=finishedWork.stateNode;var newText=finishedWork.memoizedProps;// For hydration we reuse the update path but we treat the oldProps
// as the newProps. The updatePayload will contain the real change in
// this case.
var oldText=current$$1!==null?current$$1.memoizedProps:newText;commitTextUpdate(textInstance,oldText,newText);return;}case HostRoot:{return;}case Profiler:{return;}case SuspenseComponent:{return;}case IncompleteClassComponent:{return;}default:{invariant(false,'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');}}}function commitResetTextContent(current$$1){if(!supportsMutation){return;}resetTextContent(current$$1.stateNode);}function createRootErrorUpdate(fiber,errorInfo,expirationTime){var update=createUpdate(expirationTime);// Unmount the root by rendering null.
update.tag=CaptureUpdate;// Caution: React DevTools currently depends on this property
// being called "element".
update.payload={element:null};var error=errorInfo.value;update.callback=function(){onUncaughtError(error);logError(fiber,errorInfo);};return update;}function createClassErrorUpdate(fiber,errorInfo,expirationTime){var update=createUpdate(expirationTime);update.tag=CaptureUpdate;var getDerivedStateFromError=fiber.type.getDerivedStateFromError;if(typeof getDerivedStateFromError==='function'){var error=errorInfo.value;update.payload=function(){return getDerivedStateFromError(error);};}var inst=fiber.stateNode;if(inst!==null&&typeof inst.componentDidCatch==='function'){update.callback=function callback(){if(typeof getDerivedStateFromError!=='function'){// To preserve the preexisting retry behavior of error boundaries,
// we keep track of which ones already failed during this batch.
// This gets reset before we yield back to the browser.
// TODO: Warn in strict mode if getDerivedStateFromError is
// not defined.
markLegacyErrorBoundaryAsFailed(this);}var error=errorInfo.value;var stack=errorInfo.stack;logError(fiber,errorInfo);this.componentDidCatch(error,{componentStack:stack!==null?stack:''});{if(typeof getDerivedStateFromError!=='function'){// If componentDidCatch is the only error boundary method defined,
// then it needs to call setState to recover from errors.
// If no state update is scheduled then the boundary will swallow the error.
!(fiber.expirationTime===Sync)?warningWithoutStack$1(false,'%s: Error boundaries should implement getDerivedStateFromError(). '+'In that method, return a state update to display an error message or fallback UI.',getComponentName(fiber.type)||'Unknown'):void 0;}}};}return update;}function throwException(root,returnFiber,sourceFiber,value,renderExpirationTime){// The source fiber did not complete.
sourceFiber.effectTag|=Incomplete;// Its effect list is no longer valid.
sourceFiber.firstEffect=sourceFiber.lastEffect=null;if(value!==null&&(typeof value==='undefined'?'undefined':_typeof(value))==='object'&&typeof value.then==='function'){// This is a thenable.
var thenable=value;// Find the earliest timeout threshold of all the placeholders in the
// ancestor path. We could avoid this traversal by storing the thresholds on
// the stack, but we choose not to because we only hit this path if we're
// IO-bound (i.e. if something suspends). Whereas the stack is used even in
// the non-IO- bound case.
var _workInProgress=returnFiber;var earliestTimeoutMs=-1;var startTimeMs=-1;do{if(_workInProgress.tag===SuspenseComponent){var current=_workInProgress.alternate;if(current!==null){var currentState=current.memoizedState;if(currentState!==null&&currentState.didTimeout){// Reached a boundary that already timed out. Do not search
// any further.
var timedOutAt=currentState.timedOutAt;startTimeMs=expirationTimeToMs(timedOutAt);// Do not search any further.
break;}}var timeoutPropMs=_workInProgress.pendingProps.maxDuration;if(typeof timeoutPropMs==='number'){if(timeoutPropMs<=0){earliestTimeoutMs=0;}else if(earliestTimeoutMs===-1||timeoutPropMs<earliestTimeoutMs){earliestTimeoutMs=timeoutPropMs;}}}_workInProgress=_workInProgress.return;}while(_workInProgress!==null);// Schedule the nearest Suspense to re-render the timed out view.
_workInProgress=returnFiber;do{if(_workInProgress.tag===SuspenseComponent&&shouldCaptureSuspense(_workInProgress.alternate,_workInProgress)){// Found the nearest boundary.
// If the boundary is not in concurrent mode, we should not suspend, and
// likewise, when the promise resolves, we should ping synchronously.
var pingTime=(_workInProgress.mode&ConcurrentMode)===NoEffect?Sync:renderExpirationTime;// Attach a listener to the promise to "ping" the root and retry.
var onResolveOrReject=retrySuspendedRoot.bind(null,root,_workInProgress,sourceFiber,pingTime);if(enableSchedulerTracing){onResolveOrReject=tracing.unstable_wrap(onResolveOrReject);}thenable.then(onResolveOrReject,onResolveOrReject);// If the boundary is outside of concurrent mode, we should *not*
// suspend the commit. Pretend as if the suspended component rendered
// null and keep rendering. In the commit phase, we'll schedule a
// subsequent synchronous update to re-render the Suspense.
//
// Note: It doesn't matter whether the component that suspended was
// inside a concurrent mode tree. If the Suspense is outside of it, we
// should *not* suspend the commit.
if((_workInProgress.mode&ConcurrentMode)===NoEffect){_workInProgress.effectTag|=Callback;// Unmount the source fiber's children
var nextChildren=null;reconcileChildren(sourceFiber.alternate,sourceFiber,nextChildren,renderExpirationTime);sourceFiber.effectTag&=~Incomplete;if(sourceFiber.tag===ClassComponent){// We're going to commit this fiber even though it didn't complete.
// But we shouldn't call any lifecycle methods or callbacks. Remove
// all lifecycle effect tags.
sourceFiber.effectTag&=~LifecycleEffectMask;var _current=sourceFiber.alternate;if(_current===null){// This is a new mount. Change the tag so it's not mistaken for a
// completed component. For example, we should not call
// componentWillUnmount if it is deleted.
sourceFiber.tag=IncompleteClassComponent;}}// Exit without suspending.
return;}// Confirmed that the boundary is in a concurrent mode tree. Continue
// with the normal suspend path.
var absoluteTimeoutMs=void 0;if(earliestTimeoutMs===-1){// If no explicit threshold is given, default to an abitrarily large
// value. The actual size doesn't matter because the threshold for the
// whole tree will be clamped to the expiration time.
absoluteTimeoutMs=maxSigned31BitInt;}else{if(startTimeMs===-1){// This suspend happened outside of any already timed-out
// placeholders. We don't know exactly when the update was
// scheduled, but we can infer an approximate start time from the
// expiration time. First, find the earliest uncommitted expiration
// time in the tree, including work that is suspended. Then subtract
// the offset used to compute an async update's expiration time.
// This will cause high priority (interactive) work to expire
// earlier than necessary, but we can account for this by adjusting
// for the Just Noticeable Difference.
var earliestExpirationTime=findEarliestOutstandingPriorityLevel(root,renderExpirationTime);var earliestExpirationTimeMs=expirationTimeToMs(earliestExpirationTime);startTimeMs=earliestExpirationTimeMs-LOW_PRIORITY_EXPIRATION;}absoluteTimeoutMs=startTimeMs+earliestTimeoutMs;}// Mark the earliest timeout in the suspended fiber's ancestor path.
// After completing the root, we'll take the largest of all the
// suspended fiber's timeouts and use it to compute a timeout for the
// whole tree.
renderDidSuspend(root,absoluteTimeoutMs,renderExpirationTime);_workInProgress.effectTag|=ShouldCapture;_workInProgress.expirationTime=renderExpirationTime;return;}// This boundary already captured during this render. Continue to the next
// boundary.
_workInProgress=_workInProgress.return;}while(_workInProgress!==null);// No boundary was found. Fallthrough to error mode.
value=new Error('An update was suspended, but no placeholder UI was provided.');}// We didn't find a boundary that could handle this type of exception. Start
// over and traverse parent path again, this time treating the exception
// as an error.
renderDidError();value=createCapturedValue(value,sourceFiber);var workInProgress=returnFiber;do{switch(workInProgress.tag){case HostRoot:{var _errorInfo=value;workInProgress.effectTag|=ShouldCapture;workInProgress.expirationTime=renderExpirationTime;var update=createRootErrorUpdate(workInProgress,_errorInfo,renderExpirationTime);enqueueCapturedUpdate(workInProgress,update);return;}case ClassComponent:// Capture and retry
var errorInfo=value;var ctor=workInProgress.type;var instance=workInProgress.stateNode;if((workInProgress.effectTag&DidCapture)===NoEffect&&(typeof ctor.getDerivedStateFromError==='function'||instance!==null&&typeof instance.componentDidCatch==='function'&&!isAlreadyFailedLegacyErrorBoundary(instance))){workInProgress.effectTag|=ShouldCapture;workInProgress.expirationTime=renderExpirationTime;// Schedule the error boundary to re-render using updated state
var _update=createClassErrorUpdate(workInProgress,errorInfo,renderExpirationTime);enqueueCapturedUpdate(workInProgress,_update);return;}break;default:break;}workInProgress=workInProgress.return;}while(workInProgress!==null);}function unwindWork(workInProgress,renderExpirationTime){switch(workInProgress.tag){case ClassComponent:{var Component=workInProgress.type;if(isContextProvider(Component)){popContext(workInProgress);}var effectTag=workInProgress.effectTag;if(effectTag&ShouldCapture){workInProgress.effectTag=effectTag&~ShouldCapture|DidCapture;return workInProgress;}return null;}case HostRoot:{popHostContainer(workInProgress);popTopLevelContextObject(workInProgress);var _effectTag=workInProgress.effectTag;!((_effectTag&DidCapture)===NoEffect)?invariant(false,'The root failed to unmount after an error. This is likely a bug in React. Please file an issue.'):void 0;workInProgress.effectTag=_effectTag&~ShouldCapture|DidCapture;return workInProgress;}case HostComponent:{popHostContext(workInProgress);return null;}case SuspenseComponent:{var _effectTag2=workInProgress.effectTag;if(_effectTag2&ShouldCapture){workInProgress.effectTag=_effectTag2&~ShouldCapture|DidCapture;// Captured a suspense effect. Set the boundary's `alreadyCaptured`
// state to true so we know to render the fallback.
var current=workInProgress.alternate;var currentState=current!==null?current.memoizedState:null;var nextState=workInProgress.memoizedState;if(nextState===null){// No existing state. Create a new object.
nextState={alreadyCaptured:true,didTimeout:false,timedOutAt:NoWork};}else if(currentState===nextState){// There is an existing state but it's the same as the current tree's.
// Clone the object.
nextState={alreadyCaptured:true,didTimeout:nextState.didTimeout,timedOutAt:nextState.timedOutAt};}else{// Already have a clone, so it's safe to mutate.
nextState.alreadyCaptured=true;}workInProgress.memoizedState=nextState;// Re-render the boundary.
return workInProgress;}return null;}case HostPortal:popHostContainer(workInProgress);return null;case ContextProvider:popProvider(workInProgress);return null;default:return null;}}function unwindInterruptedWork(interruptedWork){switch(interruptedWork.tag){case ClassComponent:{var childContextTypes=interruptedWork.type.childContextTypes;if(childContextTypes!==null&&childContextTypes!==undefined){popContext(interruptedWork);}break;}case HostRoot:{popHostContainer(interruptedWork);popTopLevelContextObject(interruptedWork);break;}case HostComponent:{popHostContext(interruptedWork);break;}case HostPortal:popHostContainer(interruptedWork);break;case ContextProvider:popProvider(interruptedWork);break;default:break;}}var Dispatcher={readContext:readContext};var ReactCurrentOwner$2=ReactSharedInternals.ReactCurrentOwner;var didWarnAboutStateTransition=void 0;var didWarnSetStateChildContext=void 0;var warnAboutUpdateOnUnmounted=void 0;var warnAboutInvalidUpdates=void 0;if(enableSchedulerTracing){// Provide explicit error message when production+profiling bundle of e.g. react-dom
// is used with production (non-profiling) bundle of schedule/tracing
!(tracing.__interactionsRef!=null&&tracing.__interactionsRef.current!=null)?invariant(false,'It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `schedule/tracing` module with `schedule/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling'):void 0;}{didWarnAboutStateTransition=false;didWarnSetStateChildContext=false;var didWarnStateUpdateForUnmountedComponent={};warnAboutUpdateOnUnmounted=function warnAboutUpdateOnUnmounted(fiber){// We show the whole stack but dedupe on the top component's name because
// the problematic code almost always lies inside that component.
var componentName=getComponentName(fiber.type)||'ReactClass';if(didWarnStateUpdateForUnmountedComponent[componentName]){return;}warningWithoutStack$1(false,"Can't call setState (or forceUpdate) on an unmounted component. This "+'is a no-op, but it indicates a memory leak in your application. To '+'fix, cancel all subscriptions and asynchronous tasks in the '+'componentWillUnmount method.%s',getStackByFiberInDevAndProd(fiber));didWarnStateUpdateForUnmountedComponent[componentName]=true;};warnAboutInvalidUpdates=function warnAboutInvalidUpdates(instance){switch(phase){case'getChildContext':if(didWarnSetStateChildContext){return;}warningWithoutStack$1(false,'setState(...): Cannot call setState() inside getChildContext()');didWarnSetStateChildContext=true;break;case'render':if(didWarnAboutStateTransition){return;}warningWithoutStack$1(false,'Cannot update during an existing state transition (such as within '+'`render`). Render methods should be a pure function of props and state.');didWarnAboutStateTransition=true;break;}};}// Used to ensure computeUniqueAsyncExpiration is monotonically increasing.
var lastUniqueAsyncExpiration=0;// Represents the expiration time that incoming updates should use. (If this
// is NoWork, use the default strategy: async updates in async mode, sync
// updates in sync mode.)
var expirationContext=NoWork;var isWorking=false;// The next work in progress fiber that we're currently working on.
var nextUnitOfWork=null;var nextRoot=null;// The time at which we're currently rendering work.
var nextRenderExpirationTime=NoWork;var nextLatestAbsoluteTimeoutMs=-1;var nextRenderDidError=false;// The next fiber with an effect that we're currently committing.
var nextEffect=null;var isCommitting$1=false;var legacyErrorBoundariesThatAlreadyFailed=null;// Used for performance tracking.
var interruptedBy=null;var stashedWorkInProgressProperties=void 0;var replayUnitOfWork=void 0;var isReplayingFailedUnitOfWork=void 0;var originalReplayError=void 0;var rethrowOriginalError=void 0;if(true&&replayFailedUnitOfWorkWithInvokeGuardedCallback){stashedWorkInProgressProperties=null;isReplayingFailedUnitOfWork=false;originalReplayError=null;replayUnitOfWork=function replayUnitOfWork(failedUnitOfWork,thrownValue,isYieldy){if(thrownValue!==null&&(typeof thrownValue==='undefined'?'undefined':_typeof(thrownValue))==='object'&&typeof thrownValue.then==='function'){// Don't replay promises. Treat everything else like an error.
// TODO: Need to figure out a different strategy if/when we add
// support for catching other types.
return;}// Restore the original state of the work-in-progress
if(stashedWorkInProgressProperties===null){// This should never happen. Don't throw because this code is DEV-only.
warningWithoutStack$1(false,'Could not replay rendering after an error. This is likely a bug in React. '+'Please file an issue.');return;}assignFiberPropertiesInDEV(failedUnitOfWork,stashedWorkInProgressProperties);switch(failedUnitOfWork.tag){case HostRoot:popHostContainer(failedUnitOfWork);popTopLevelContextObject(failedUnitOfWork);break;case HostComponent:popHostContext(failedUnitOfWork);break;case ClassComponent:{var Component=failedUnitOfWork.type;if(isContextProvider(Component)){popContext(failedUnitOfWork);}break;}case HostPortal:popHostContainer(failedUnitOfWork);break;case ContextProvider:popProvider(failedUnitOfWork);break;}// Replay the begin phase.
isReplayingFailedUnitOfWork=true;originalReplayError=thrownValue;invokeGuardedCallback(null,workLoop,null,isYieldy);isReplayingFailedUnitOfWork=false;originalReplayError=null;if(hasCaughtError()){var replayError=clearCaughtError();if(replayError!=null&&thrownValue!=null){try{// Reading the expando property is intentionally
// inside `try` because it might be a getter or Proxy.
if(replayError._suppressLogging){// Also suppress logging for the original error.
thrownValue._suppressLogging=true;}}catch(inner){// Ignore.
}}}else{// If the begin phase did not fail the second time, set this pointer
// back to the original value.
nextUnitOfWork=failedUnitOfWork;}};rethrowOriginalError=function rethrowOriginalError(){throw originalReplayError;};}function resetStack(){if(nextUnitOfWork!==null){var interruptedWork=nextUnitOfWork.return;while(interruptedWork!==null){unwindInterruptedWork(interruptedWork);interruptedWork=interruptedWork.return;}}{ReactStrictModeWarnings.discardPendingWarnings();checkThatStackIsEmpty();}nextRoot=null;nextRenderExpirationTime=NoWork;nextLatestAbsoluteTimeoutMs=-1;nextRenderDidError=false;nextUnitOfWork=null;}function commitAllHostEffects(){while(nextEffect!==null){{setCurrentFiber(nextEffect);}recordEffect();var effectTag=nextEffect.effectTag;if(effectTag&ContentReset){commitResetTextContent(nextEffect);}if(effectTag&Ref){var current$$1=nextEffect.alternate;if(current$$1!==null){commitDetachRef(current$$1);}}// The following switch statement is only concerned about placement,
// updates, and deletions. To avoid needing to add a case for every
// possible bitmap value, we remove the secondary effects from the
// effect tag and switch on that value.
var primaryEffectTag=effectTag&(Placement|Update|Deletion);switch(primaryEffectTag){case Placement:{commitPlacement(nextEffect);// Clear the "placement" from effect tag so that we know that this is inserted, before
// any life-cycles like componentDidMount gets called.
// TODO: findDOMNode doesn't rely on this any more but isMounted
// does and isMounted is deprecated anyway so we should be able
// to kill this.
nextEffect.effectTag&=~Placement;break;}case PlacementAndUpdate:{// Placement
commitPlacement(nextEffect);// Clear the "placement" from effect tag so that we know that this is inserted, before
// any life-cycles like componentDidMount gets called.
nextEffect.effectTag&=~Placement;// Update
var _current=nextEffect.alternate;commitWork(_current,nextEffect);break;}case Update:{var _current2=nextEffect.alternate;commitWork(_current2,nextEffect);break;}case Deletion:{commitDeletion(nextEffect);break;}}nextEffect=nextEffect.nextEffect;}{resetCurrentFiber();}}function commitBeforeMutationLifecycles(){while(nextEffect!==null){{setCurrentFiber(nextEffect);}var effectTag=nextEffect.effectTag;if(effectTag&Snapshot){recordEffect();var current$$1=nextEffect.alternate;commitBeforeMutationLifeCycles(current$$1,nextEffect);}// Don't cleanup effects yet;
// This will be done by commitAllLifeCycles()
nextEffect=nextEffect.nextEffect;}{resetCurrentFiber();}}function commitAllLifeCycles(finishedRoot,committedExpirationTime){{ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();ReactStrictModeWarnings.flushLegacyContextWarning();if(warnAboutDeprecatedLifecycles){ReactStrictModeWarnings.flushPendingDeprecationWarnings();}}while(nextEffect!==null){var effectTag=nextEffect.effectTag;if(effectTag&(Update|Callback)){recordEffect();var current$$1=nextEffect.alternate;commitLifeCycles(finishedRoot,current$$1,nextEffect,committedExpirationTime);}if(effectTag&Ref){recordEffect();commitAttachRef(nextEffect);}var next=nextEffect.nextEffect;// Ensure that we clean these up so that we don't accidentally keep them.
// I'm not actually sure this matters because we can't reset firstEffect
// and lastEffect since they're on every node, not just the effectful
// ones. So we have to clean everything as we reuse nodes anyway.
nextEffect.nextEffect=null;// Ensure that we reset the effectTag here so that we can rely on effect
// tags to reason about the current life-cycle.
nextEffect=next;}}function isAlreadyFailedLegacyErrorBoundary(instance){return legacyErrorBoundariesThatAlreadyFailed!==null&&legacyErrorBoundariesThatAlreadyFailed.has(instance);}function markLegacyErrorBoundaryAsFailed(instance){if(legacyErrorBoundariesThatAlreadyFailed===null){legacyErrorBoundariesThatAlreadyFailed=new Set([instance]);}else{legacyErrorBoundariesThatAlreadyFailed.add(instance);}}function commitRoot(root,finishedWork){isWorking=true;isCommitting$1=true;startCommitTimer();!(root.current!==finishedWork)?invariant(false,'Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.'):void 0;var committedExpirationTime=root.pendingCommitExpirationTime;!(committedExpirationTime!==NoWork)?invariant(false,'Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.'):void 0;root.pendingCommitExpirationTime=NoWork;// Update the pending priority levels to account for the work that we are
// about to commit. This needs to happen before calling the lifecycles, since
// they may schedule additional updates.
var updateExpirationTimeBeforeCommit=finishedWork.expirationTime;var childExpirationTimeBeforeCommit=finishedWork.childExpirationTime;var earliestRemainingTimeBeforeCommit=updateExpirationTimeBeforeCommit===NoWork||childExpirationTimeBeforeCommit!==NoWork&&childExpirationTimeBeforeCommit<updateExpirationTimeBeforeCommit?childExpirationTimeBeforeCommit:updateExpirationTimeBeforeCommit;markCommittedPriorityLevels(root,earliestRemainingTimeBeforeCommit);var prevInteractions=null;if(enableSchedulerTracing){// Restore any pending interactions at this point,
// So that cascading work triggered during the render phase will be accounted for.
prevInteractions=tracing.__interactionsRef.current;tracing.__interactionsRef.current=root.memoizedInteractions;}// Reset this to null before calling lifecycles
ReactCurrentOwner$2.current=null;var firstEffect=void 0;if(finishedWork.effectTag>PerformedWork){// A fiber's effect list consists only of its children, not itself. So if
// the root has an effect, we need to add it to the end of the list. The
// resulting list is the set that would belong to the root's parent, if
// it had one; that is, all the effects in the tree including the root.
if(finishedWork.lastEffect!==null){finishedWork.lastEffect.nextEffect=finishedWork;firstEffect=finishedWork.firstEffect;}else{firstEffect=finishedWork;}}else{// There is no effect on the root.
firstEffect=finishedWork.firstEffect;}prepareForCommit(root.containerInfo);// Invoke instances of getSnapshotBeforeUpdate before mutation.
nextEffect=firstEffect;startCommitSnapshotEffectsTimer();while(nextEffect!==null){var didError=false;var error=void 0;{invokeGuardedCallback(null,commitBeforeMutationLifecycles,null);if(hasCaughtError()){didError=true;error=clearCaughtError();}}if(didError){!(nextEffect!==null)?invariant(false,'Should have next effect. This error is likely caused by a bug in React. Please file an issue.'):void 0;captureCommitPhaseError(nextEffect,error);// Clean-up
if(nextEffect!==null){nextEffect=nextEffect.nextEffect;}}}stopCommitSnapshotEffectsTimer();if(enableProfilerTimer){// Mark the current commit time to be shared by all Profilers in this batch.
// This enables them to be grouped later.
recordCommitTime();}// Commit all the side-effects within a tree. We'll do this in two passes.
// The first pass performs all the host insertions, updates, deletions and
// ref unmounts.
nextEffect=firstEffect;startCommitHostEffectsTimer();while(nextEffect!==null){var _didError=false;var _error=void 0;{invokeGuardedCallback(null,commitAllHostEffects,null);if(hasCaughtError()){_didError=true;_error=clearCaughtError();}}if(_didError){!(nextEffect!==null)?invariant(false,'Should have next effect. This error is likely caused by a bug in React. Please file an issue.'):void 0;captureCommitPhaseError(nextEffect,_error);// Clean-up
if(nextEffect!==null){nextEffect=nextEffect.nextEffect;}}}stopCommitHostEffectsTimer();resetAfterCommit(root.containerInfo);// The work-in-progress tree is now the current tree. This must come after
// the first pass of the commit phase, so that the previous tree is still
// current during componentWillUnmount, but before the second pass, so that
// the finished work is current during componentDidMount/Update.
root.current=finishedWork;// In the second pass we'll perform all life-cycles and ref callbacks.
// Life-cycles happen as a separate pass so that all placements, updates,
// and deletions in the entire tree have already been invoked.
// This pass also triggers any renderer-specific initial effects.
nextEffect=firstEffect;startCommitLifeCyclesTimer();while(nextEffect!==null){var _didError2=false;var _error2=void 0;{invokeGuardedCallback(null,commitAllLifeCycles,null,root,committedExpirationTime);if(hasCaughtError()){_didError2=true;_error2=clearCaughtError();}}if(_didError2){!(nextEffect!==null)?invariant(false,'Should have next effect. This error is likely caused by a bug in React. Please file an issue.'):void 0;captureCommitPhaseError(nextEffect,_error2);if(nextEffect!==null){nextEffect=nextEffect.nextEffect;}}}isCommitting$1=false;isWorking=false;stopCommitLifeCyclesTimer();stopCommitTimer();onCommitRoot(finishedWork.stateNode);if(true&&ReactFiberInstrumentation_1.debugTool){ReactFiberInstrumentation_1.debugTool.onCommitWork(finishedWork);}var updateExpirationTimeAfterCommit=finishedWork.expirationTime;var childExpirationTimeAfterCommit=finishedWork.childExpirationTime;var earliestRemainingTimeAfterCommit=updateExpirationTimeAfterCommit===NoWork||childExpirationTimeAfterCommit!==NoWork&&childExpirationTimeAfterCommit<updateExpirationTimeAfterCommit?childExpirationTimeAfterCommit:updateExpirationTimeAfterCommit;if(earliestRemainingTimeAfterCommit===NoWork){// If there's no remaining work, we can clear the set of already failed
// error boundaries.
legacyErrorBoundariesThatAlreadyFailed=null;}onCommit(root,earliestRemainingTimeAfterCommit);if(enableSchedulerTracing){tracing.__interactionsRef.current=prevInteractions;var subscriber=void 0;try{subscriber=tracing.__subscriberRef.current;if(subscriber!==null&&root.memoizedInteractions.size>0){var threadID=computeThreadID(committedExpirationTime,root.interactionThreadID);subscriber.onWorkStopped(root.memoizedInteractions,threadID);}}catch(error){// It's not safe for commitRoot() to throw.
// Store the error for now and we'll re-throw in finishRendering().
if(!hasUnhandledError){hasUnhandledError=true;unhandledError=error;}}finally{// Clear completed interactions from the pending Map.
// Unless the render was suspended or cascading work was scheduled,
// In which caseâ leave pending interactions until the subsequent render.
var pendingInteractionMap=root.pendingInteractionMap;pendingInteractionMap.forEach(function(scheduledInteractions,scheduledExpirationTime){// Only decrement the pending interaction count if we're done.
// If there's still work at the current priority,
// That indicates that we are waiting for suspense data.
if(earliestRemainingTimeAfterCommit===NoWork||scheduledExpirationTime<earliestRemainingTimeAfterCommit){pendingInteractionMap.delete(scheduledExpirationTime);scheduledInteractions.forEach(function(interaction){interaction.__count--;if(subscriber!==null&&interaction.__count===0){try{subscriber.onInteractionScheduledWorkCompleted(interaction);}catch(error){// It's not safe for commitRoot() to throw.
// Store the error for now and we'll re-throw in finishRendering().
if(!hasUnhandledError){hasUnhandledError=true;unhandledError=error;}}}});}});}}}function resetChildExpirationTime(workInProgress,renderTime){if(renderTime!==Never&&workInProgress.childExpirationTime===Never){// The children of this component are hidden. Don't bubble their
// expiration times.
return;}var newChildExpirationTime=NoWork;// Bubble up the earliest expiration time.
if(enableProfilerTimer&&workInProgress.mode&ProfileMode){// We're in profiling mode.
// Let's use this same traversal to update the render durations.
var actualDuration=workInProgress.actualDuration;var treeBaseDuration=workInProgress.selfBaseDuration;// When a fiber is cloned, its actualDuration is reset to 0.
// This value will only be updated if work is done on the fiber (i.e. it doesn't bailout).
// When work is done, it should bubble to the parent's actualDuration.
// If the fiber has not been cloned though, (meaning no work was done),
// Then this value will reflect the amount of time spent working on a previous render.
// In that case it should not bubble.
// We determine whether it was cloned by comparing the child pointer.
var shouldBubbleActualDurations=workInProgress.alternate===null||workInProgress.child!==workInProgress.alternate.child;var child=workInProgress.child;while(child!==null){var childUpdateExpirationTime=child.expirationTime;var childChildExpirationTime=child.childExpirationTime;if(newChildExpirationTime===NoWork||childUpdateExpirationTime!==NoWork&&childUpdateExpirationTime<newChildExpirationTime){newChildExpirationTime=childUpdateExpirationTime;}if(newChildExpirationTime===NoWork||childChildExpirationTime!==NoWork&&childChildExpirationTime<newChildExpirationTime){newChildExpirationTime=childChildExpirationTime;}if(shouldBubbleActualDurations){actualDuration+=child.actualDuration;}treeBaseDuration+=child.treeBaseDuration;child=child.sibling;}workInProgress.actualDuration=actualDuration;workInProgress.treeBaseDuration=treeBaseDuration;}else{var _child=workInProgress.child;while(_child!==null){var _childUpdateExpirationTime=_child.expirationTime;var _childChildExpirationTime=_child.childExpirationTime;if(newChildExpirationTime===NoWork||_childUpdateExpirationTime!==NoWork&&_childUpdateExpirationTime<newChildExpirationTime){newChildExpirationTime=_childUpdateExpirationTime;}if(newChildExpirationTime===NoWork||_childChildExpirationTime!==NoWork&&_childChildExpirationTime<newChildExpirationTime){newChildExpirationTime=_childChildExpirationTime;}_child=_child.sibling;}}workInProgress.childExpirationTime=newChildExpirationTime;}function completeUnitOfWork(workInProgress){// Attempt to complete the current unit of work, then move to the
// next sibling. If there are no more siblings, return to the
// parent fiber.
while(true){// The current, flushed, state of this fiber is the alternate.
// Ideally nothing should rely on this, but relying on it here
// means that we don't need an additional field on the work in
// progress.
var current$$1=workInProgress.alternate;{setCurrentFiber(workInProgress);}var returnFiber=workInProgress.return;var siblingFiber=workInProgress.sibling;if((workInProgress.effectTag&Incomplete)===NoEffect){// This fiber completed.
if(enableProfilerTimer){if(workInProgress.mode&ProfileMode){startProfilerTimer(workInProgress);}nextUnitOfWork=completeWork(current$$1,workInProgress,nextRenderExpirationTime);if(workInProgress.mode&ProfileMode){// Update render duration assuming we didn't error.
stopProfilerTimerIfRunningAndRecordDelta(workInProgress,false);}}else{nextUnitOfWork=completeWork(current$$1,workInProgress,nextRenderExpirationTime);}stopWorkTimer(workInProgress);resetChildExpirationTime(workInProgress,nextRenderExpirationTime);{resetCurrentFiber();}if(returnFiber!==null&&// Do not append effects to parents if a sibling failed to complete
(returnFiber.effectTag&Incomplete)===NoEffect){// Append all the effects of the subtree and this fiber onto the effect
// list of the parent. The completion order of the children affects the
// side-effect order.
if(returnFiber.firstEffect===null){returnFiber.firstEffect=workInProgress.firstEffect;}if(workInProgress.lastEffect!==null){if(returnFiber.lastEffect!==null){returnFiber.lastEffect.nextEffect=workInProgress.firstEffect;}returnFiber.lastEffect=workInProgress.lastEffect;}// If this fiber had side-effects, we append it AFTER the children's
// side-effects. We can perform certain side-effects earlier if
// needed, by doing multiple passes over the effect list. We don't want
// to schedule our own side-effect on our own list because if end up
// reusing children we'll schedule this effect onto itself since we're
// at the end.
var effectTag=workInProgress.effectTag;// Skip both NoWork and PerformedWork tags when creating the effect list.
// PerformedWork effect is read by React DevTools but shouldn't be committed.
if(effectTag>PerformedWork){if(returnFiber.lastEffect!==null){returnFiber.lastEffect.nextEffect=workInProgress;}else{returnFiber.firstEffect=workInProgress;}returnFiber.lastEffect=workInProgress;}}if(true&&ReactFiberInstrumentation_1.debugTool){ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);}if(siblingFiber!==null){// If there is more work to do in this returnFiber, do that next.
return siblingFiber;}else if(returnFiber!==null){// If there's no more work in this returnFiber. Complete the returnFiber.
workInProgress=returnFiber;continue;}else{// We've reached the root.
return null;}}else{if(workInProgress.mode&ProfileMode){// Record the render duration for the fiber that errored.
stopProfilerTimerIfRunningAndRecordDelta(workInProgress,false);}// This fiber did not complete because something threw. Pop values off
// the stack without entering the complete phase. If this is a boundary,
// capture values if possible.
var next=unwindWork(workInProgress,nextRenderExpirationTime);// Because this fiber did not complete, don't reset its expiration time.
if(workInProgress.effectTag&DidCapture){// Restarting an error boundary
stopFailedWorkTimer(workInProgress);}else{stopWorkTimer(workInProgress);}{resetCurrentFiber();}if(next!==null){stopWorkTimer(workInProgress);if(true&&ReactFiberInstrumentation_1.debugTool){ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);}if(enableProfilerTimer){// Include the time spent working on failed children before continuing.
if(next.mode&ProfileMode){var actualDuration=next.actualDuration;var child=next.child;while(child!==null){actualDuration+=child.actualDuration;child=child.sibling;}next.actualDuration=actualDuration;}}// If completing this work spawned new work, do that next. We'll come
// back here again.
// Since we're restarting, remove anything that is not a host effect
// from the effect tag.
next.effectTag&=HostEffectMask;return next;}if(returnFiber!==null){// Mark the parent fiber as incomplete and clear its effect list.
returnFiber.firstEffect=returnFiber.lastEffect=null;returnFiber.effectTag|=Incomplete;}if(true&&ReactFiberInstrumentation_1.debugTool){ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);}if(siblingFiber!==null){// If there is more work to do in this returnFiber, do that next.
return siblingFiber;}else if(returnFiber!==null){// If there's no more work in this returnFiber. Complete the returnFiber.
workInProgress=returnFiber;continue;}else{return null;}}}// Without this explicit null return Flow complains of invalid return type
// TODO Remove the above while(true) loop
// eslint-disable-next-line no-unreachable
return null;}function performUnitOfWork(workInProgress){// The current, flushed, state of this fiber is the alternate.
// Ideally nothing should rely on this, but relying on it here
// means that we don't need an additional field on the work in
// progress.
var current$$1=workInProgress.alternate;// See if beginning this work spawns more work.
startWorkTimer(workInProgress);{setCurrentFiber(workInProgress);}if(true&&replayFailedUnitOfWorkWithInvokeGuardedCallback){stashedWorkInProgressProperties=assignFiberPropertiesInDEV(stashedWorkInProgressProperties,workInProgress);}var next=void 0;if(enableProfilerTimer){if(workInProgress.mode&ProfileMode){startProfilerTimer(workInProgress);}next=beginWork(current$$1,workInProgress,nextRenderExpirationTime);workInProgress.memoizedProps=workInProgress.pendingProps;if(workInProgress.mode&ProfileMode){// Record the render duration assuming we didn't bailout (or error).
stopProfilerTimerIfRunningAndRecordDelta(workInProgress,true);}}else{next=beginWork(current$$1,workInProgress,nextRenderExpirationTime);workInProgress.memoizedProps=workInProgress.pendingProps;}{resetCurrentFiber();if(isReplayingFailedUnitOfWork){// Currently replaying a failed unit of work. This should be unreachable,
// because the render phase is meant to be idempotent, and it should
// have thrown again. Since it didn't, rethrow the original error, so
// React's internal stack is not misaligned.
rethrowOriginalError();}}if(true&&ReactFiberInstrumentation_1.debugTool){ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);}if(next===null){// If this doesn't spawn new work, complete the current work.
next=completeUnitOfWork(workInProgress);}ReactCurrentOwner$2.current=null;return next;}function workLoop(isYieldy){if(!isYieldy){// Flush work without yielding
while(nextUnitOfWork!==null){nextUnitOfWork=performUnitOfWork(nextUnitOfWork);}}else{// Flush asynchronous work until the deadline runs out of time.
while(nextUnitOfWork!==null&&!shouldYield()){nextUnitOfWork=performUnitOfWork(nextUnitOfWork);}}}function renderRoot(root,isYieldy,isExpired){!!isWorking?invariant(false,'renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.'):void 0;isWorking=true;ReactCurrentOwner$2.currentDispatcher=Dispatcher;var expirationTime=root.nextExpirationTimeToWorkOn;// Check if we're starting from a fresh stack, or if we're resuming from
// previously yielded work.
if(expirationTime!==nextRenderExpirationTime||root!==nextRoot||nextUnitOfWork===null){// Reset the stack and start working from the root.
resetStack();nextRoot=root;nextRenderExpirationTime=expirationTime;nextUnitOfWork=createWorkInProgress(nextRoot.current,null,nextRenderExpirationTime);root.pendingCommitExpirationTime=NoWork;if(enableSchedulerTracing){// Determine which interactions this batch of work currently includes,
// So that we can accurately attribute time spent working on it,
var interactions=new Set();root.pendingInteractionMap.forEach(function(scheduledInteractions,scheduledExpirationTime){if(scheduledExpirationTime<=expirationTime){scheduledInteractions.forEach(function(interaction){return interactions.add(interaction);});}});// Store the current set of interactions on the FiberRoot for a few reasons:
// We can re-use it in hot functions like renderRoot() without having to recalculate it.
// We will also use it in commitWork() to pass to any Profiler onRender() hooks.
// This also provides DevTools with a way to access it when the onCommitRoot() hook is called.
root.memoizedInteractions=interactions;if(interactions.size>0){var subscriber=tracing.__subscriberRef.current;if(subscriber!==null){var threadID=computeThreadID(expirationTime,root.interactionThreadID);try{subscriber.onWorkStarted(interactions,threadID);}catch(error){// Work thrown by an interaction tracing subscriber should be rethrown,
// But only once it's safe (to avoid leaveing the scheduler in an invalid state).
// Store the error for now and we'll re-throw in finishRendering().
if(!hasUnhandledError){hasUnhandledError=true;unhandledError=error;}}}}}}var prevInteractions=null;if(enableSchedulerTracing){// We're about to start new traced work.
// Restore pending interactions so cascading work triggered during the render phase will be accounted for.
prevInteractions=tracing.__interactionsRef.current;tracing.__interactionsRef.current=root.memoizedInteractions;}var didFatal=false;startWorkLoopTimer(nextUnitOfWork);do{try{workLoop(isYieldy);}catch(thrownValue){if(nextUnitOfWork===null){// This is a fatal error.
didFatal=true;onUncaughtError(thrownValue);}else{{// Reset global debug state
// We assume this is defined in DEV
resetCurrentlyProcessingQueue();}var failedUnitOfWork=nextUnitOfWork;if(true&&replayFailedUnitOfWorkWithInvokeGuardedCallback){replayUnitOfWork(failedUnitOfWork,thrownValue,isYieldy);}// TODO: we already know this isn't true in some cases.
// At least this shows a nicer error message until we figure out the cause.
// https://github.com/facebook/react/issues/12449#issuecomment-386727431
!(nextUnitOfWork!==null)?invariant(false,'Failed to replay rendering after an error. This is likely caused by a bug in React. Please file an issue with a reproducing case to help us find it.'):void 0;var sourceFiber=nextUnitOfWork;var returnFiber=sourceFiber.return;if(returnFiber===null){// This is the root. The root could capture its own errors. However,
// we don't know if it errors before or after we pushed the host
// context. This information is needed to avoid a stack mismatch.
// Because we're not sure, treat this as a fatal error. We could track
// which phase it fails in, but doesn't seem worth it. At least
// for now.
didFatal=true;onUncaughtError(thrownValue);}else{throwException(root,returnFiber,sourceFiber,thrownValue,nextRenderExpirationTime);nextUnitOfWork=completeUnitOfWork(sourceFiber);continue;}}}break;}while(true);if(enableSchedulerTracing){// Traced work is done for now; restore the previous interactions.
tracing.__interactionsRef.current=prevInteractions;}// We're done performing work. Time to clean up.
isWorking=false;ReactCurrentOwner$2.currentDispatcher=null;resetContextDependences();// Yield back to main thread.
if(didFatal){var _didCompleteRoot=false;stopWorkLoopTimer(interruptedBy,_didCompleteRoot);interruptedBy=null;// There was a fatal error.
{resetStackAfterFatalErrorInDev();}// `nextRoot` points to the in-progress root. A non-null value indicates
// that we're in the middle of an async render. Set it to null to indicate
// there's no more work to be done in the current batch.
nextRoot=null;onFatal(root);return;}if(nextUnitOfWork!==null){// There's still remaining async work in this tree, but we ran out of time
// in the current frame. Yield back to the renderer. Unless we're
// interrupted by a higher priority update, we'll continue later from where
// we left off.
var _didCompleteRoot2=false;stopWorkLoopTimer(interruptedBy,_didCompleteRoot2);interruptedBy=null;onYield(root);return;}// We completed the whole tree.
var didCompleteRoot=true;stopWorkLoopTimer(interruptedBy,didCompleteRoot);var rootWorkInProgress=root.current.alternate;!(rootWorkInProgress!==null)?invariant(false,'Finished root should have a work-in-progress. This error is likely caused by a bug in React. Please file an issue.'):void 0;// `nextRoot` points to the in-progress root. A non-null value indicates
// that we're in the middle of an async render. Set it to null to indicate
// there's no more work to be done in the current batch.
nextRoot=null;interruptedBy=null;if(nextRenderDidError){// There was an error
if(hasLowerPriorityWork(root,expirationTime)){// There's lower priority work. If so, it may have the effect of fixing
// the exception that was just thrown. Exit without committing. This is
// similar to a suspend, but without a timeout because we're not waiting
// for a promise to resolve. React will restart at the lower
// priority level.
markSuspendedPriorityLevel(root,expirationTime);var suspendedExpirationTime=expirationTime;var rootExpirationTime=root.expirationTime;onSuspend(root,rootWorkInProgress,suspendedExpirationTime,rootExpirationTime,-1// Indicates no timeout
);return;}else if(// There's no lower priority work, but we're rendering asynchronously.
// Synchronsouly attempt to render the same level one more time. This is
// similar to a suspend, but without a timeout because we're not waiting
// for a promise to resolve.
!root.didError&&!isExpired){root.didError=true;var _suspendedExpirationTime=root.nextExpirationTimeToWorkOn=expirationTime;var _rootExpirationTime=root.expirationTime=Sync;onSuspend(root,rootWorkInProgress,_suspendedExpirationTime,_rootExpirationTime,-1// Indicates no timeout
);return;}}if(!isExpired&&nextLatestAbsoluteTimeoutMs!==-1){// The tree was suspended.
var _suspendedExpirationTime2=expirationTime;markSuspendedPriorityLevel(root,_suspendedExpirationTime2);// Find the earliest uncommitted expiration time in the tree, including
// work that is suspended. The timeout threshold cannot be longer than
// the overall expiration.
var earliestExpirationTime=findEarliestOutstandingPriorityLevel(root,expirationTime);var earliestExpirationTimeMs=expirationTimeToMs(earliestExpirationTime);if(earliestExpirationTimeMs<nextLatestAbsoluteTimeoutMs){nextLatestAbsoluteTimeoutMs=earliestExpirationTimeMs;}// Subtract the current time from the absolute timeout to get the number
// of milliseconds until the timeout. In other words, convert an absolute
// timestamp to a relative time. This is the value that is passed
// to `setTimeout`.
var currentTimeMs=expirationTimeToMs(requestCurrentTime());var msUntilTimeout=nextLatestAbsoluteTimeoutMs-currentTimeMs;msUntilTimeout=msUntilTimeout<0?0:msUntilTimeout;// TODO: Account for the Just Noticeable Difference
var _rootExpirationTime2=root.expirationTime;onSuspend(root,rootWorkInProgress,_suspendedExpirationTime2,_rootExpirationTime2,msUntilTimeout);return;}// Ready to commit.
onComplete(root,rootWorkInProgress,expirationTime);}function dispatch(sourceFiber,value,expirationTime){!(!isWorking||isCommitting$1)?invariant(false,'dispatch: Cannot dispatch during the render phase.'):void 0;var fiber=sourceFiber.return;while(fiber!==null){switch(fiber.tag){case ClassComponent:var ctor=fiber.type;var instance=fiber.stateNode;if(typeof ctor.getDerivedStateFromError==='function'||typeof instance.componentDidCatch==='function'&&!isAlreadyFailedLegacyErrorBoundary(instance)){var errorInfo=createCapturedValue(value,sourceFiber);var update=createClassErrorUpdate(fiber,errorInfo,expirationTime);enqueueUpdate(fiber,update);scheduleWork(fiber,expirationTime);return;}break;case HostRoot:{var _errorInfo=createCapturedValue(value,sourceFiber);var _update=createRootErrorUpdate(fiber,_errorInfo,expirationTime);enqueueUpdate(fiber,_update);scheduleWork(fiber,expirationTime);return;}}fiber=fiber.return;}if(sourceFiber.tag===HostRoot){// Error was thrown at the root. There is no parent, so the root
// itself should capture it.
var rootFiber=sourceFiber;var _errorInfo2=createCapturedValue(value,rootFiber);var _update2=createRootErrorUpdate(rootFiber,_errorInfo2,expirationTime);enqueueUpdate(rootFiber,_update2);scheduleWork(rootFiber,expirationTime);}}function captureCommitPhaseError(fiber,error){return dispatch(fiber,error,Sync);}function computeThreadID(expirationTime,interactionThreadID){// Interaction threads are unique per root and expiration time.
return expirationTime*1000+interactionThreadID;}// Creates a unique async expiration time.
function computeUniqueAsyncExpiration(){var currentTime=requestCurrentTime();var result=computeAsyncExpiration(currentTime);if(result<=lastUniqueAsyncExpiration){// Since we assume the current time monotonically increases, we only hit
// this branch when computeUniqueAsyncExpiration is fired multiple times
// within a 200ms window (or whatever the async bucket size is).
result=lastUniqueAsyncExpiration+1;}lastUniqueAsyncExpiration=result;return lastUniqueAsyncExpiration;}function computeExpirationForFiber(currentTime,fiber){var expirationTime=void 0;if(expirationContext!==NoWork){// An explicit expiration context was set;
expirationTime=expirationContext;}else if(isWorking){if(isCommitting$1){// Updates that occur during the commit phase should have sync priority
// by default.
expirationTime=Sync;}else{// Updates during the render phase should expire at the same time as
// the work that is being rendered.
expirationTime=nextRenderExpirationTime;}}else{// No explicit expiration context was set, and we're not currently
// performing work. Calculate a new expiration time.
if(fiber.mode&ConcurrentMode){if(isBatchingInteractiveUpdates){// This is an interactive update
expirationTime=computeInteractiveExpiration(currentTime);}else{// This is an async update
expirationTime=computeAsyncExpiration(currentTime);}// If we're in the middle of rendering a tree, do not update at the same
// expiration time that is already rendering.
if(nextRoot!==null&&expirationTime===nextRenderExpirationTime){expirationTime+=1;}}else{// This is a sync update
expirationTime=Sync;}}if(isBatchingInteractiveUpdates){// This is an interactive update. Keep track of the lowest pending
// interactive expiration time. This allows us to synchronously flush
// all interactive updates when needed.
if(expirationTime>lowestPriorityPendingInteractiveExpirationTime){lowestPriorityPendingInteractiveExpirationTime=expirationTime;}}return expirationTime;}function renderDidSuspend(root,absoluteTimeoutMs,suspendedTime){// Schedule the timeout.
if(absoluteTimeoutMs>=0&&nextLatestAbsoluteTimeoutMs<absoluteTimeoutMs){nextLatestAbsoluteTimeoutMs=absoluteTimeoutMs;}}function renderDidError(){nextRenderDidError=true;}function retrySuspendedRoot(root,boundaryFiber,sourceFiber,suspendedTime){var retryTime=void 0;if(isPriorityLevelSuspended(root,suspendedTime)){// Ping at the original level
retryTime=suspendedTime;markPingedPriorityLevel(root,retryTime);}else{// Suspense already timed out. Compute a new expiration time
var currentTime=requestCurrentTime();retryTime=computeExpirationForFiber(currentTime,boundaryFiber);markPendingPriorityLevel(root,retryTime);}// TODO: If the suspense fiber has already rendered the primary children
// without suspending (that is, all of the promises have already resolved),
// we should not trigger another update here. One case this happens is when
// we are in sync mode and a single promise is thrown both on initial render
// and on update; we attach two .then(retrySuspendedRoot) callbacks and each
// one performs Sync work, rerendering the Suspense.
if((boundaryFiber.mode&ConcurrentMode)!==NoContext){if(root===nextRoot&&nextRenderExpirationTime===suspendedTime){// Received a ping at the same priority level at which we're currently
// rendering. Restart from the root.
nextRoot=null;}}scheduleWorkToRoot(boundaryFiber,retryTime);if((boundaryFiber.mode&ConcurrentMode)===NoContext){// Outside of concurrent mode, we must schedule an update on the source
// fiber, too, since it already committed in an inconsistent state and
// therefore does not have any pending work.
scheduleWorkToRoot(sourceFiber,retryTime);var sourceTag=sourceFiber.tag;if(sourceTag===ClassComponent&&sourceFiber.stateNode!==null){// When we try rendering again, we should not reuse the current fiber,
// since it's known to be in an inconsistent state. Use a force updte to
// prevent a bail out.
var update=createUpdate(retryTime);update.tag=ForceUpdate;enqueueUpdate(sourceFiber,update);}}var rootExpirationTime=root.expirationTime;if(rootExpirationTime!==NoWork){requestWork(root,rootExpirationTime);}}function scheduleWorkToRoot(fiber,expirationTime){recordScheduleUpdate();{if(fiber.tag===ClassComponent){var instance=fiber.stateNode;warnAboutInvalidUpdates(instance);}}// Update the source fiber's expiration time
if(fiber.expirationTime===NoWork||fiber.expirationTime>expirationTime){fiber.expirationTime=expirationTime;}var alternate=fiber.alternate;if(alternate!==null&&(alternate.expirationTime===NoWork||alternate.expirationTime>expirationTime)){alternate.expirationTime=expirationTime;}// Walk the parent path to the root and update the child expiration time.
var node=fiber.return;var root=null;if(node===null&&fiber.tag===HostRoot){root=fiber.stateNode;}else{while(node!==null){alternate=node.alternate;if(node.childExpirationTime===NoWork||node.childExpirationTime>expirationTime){node.childExpirationTime=expirationTime;if(alternate!==null&&(alternate.childExpirationTime===NoWork||alternate.childExpirationTime>expirationTime)){alternate.childExpirationTime=expirationTime;}}else if(alternate!==null&&(alternate.childExpirationTime===NoWork||alternate.childExpirationTime>expirationTime)){alternate.childExpirationTime=expirationTime;}if(node.return===null&&node.tag===HostRoot){root=node.stateNode;break;}node=node.return;}}if(root===null){if(true&&fiber.tag===ClassComponent){warnAboutUpdateOnUnmounted(fiber);}return null;}if(enableSchedulerTracing){var interactions=tracing.__interactionsRef.current;if(interactions.size>0){var pendingInteractionMap=root.pendingInteractionMap;var pendingInteractions=pendingInteractionMap.get(expirationTime);if(pendingInteractions!=null){interactions.forEach(function(interaction){if(!pendingInteractions.has(interaction)){// Update the pending async work count for previously unscheduled interaction.
interaction.__count++;}pendingInteractions.add(interaction);});}else{pendingInteractionMap.set(expirationTime,new Set(interactions));// Update the pending async work count for the current interactions.
interactions.forEach(function(interaction){interaction.__count++;});}var subscriber=tracing.__subscriberRef.current;if(subscriber!==null){var threadID=computeThreadID(expirationTime,root.interactionThreadID);subscriber.onWorkScheduled(interactions,threadID);}}}return root;}function scheduleWork(fiber,expirationTime){var root=scheduleWorkToRoot(fiber,expirationTime);if(root===null){return;}if(!isWorking&&nextRenderExpirationTime!==NoWork&&expirationTime<nextRenderExpirationTime){// This is an interruption. (Used for performance tracking.)
interruptedBy=fiber;resetStack();}markPendingPriorityLevel(root,expirationTime);if(// If we're in the render phase, we don't need to schedule this root
// for an update, because we'll do it before we exit...
!isWorking||isCommitting$1||// ...unless this is a different root than the one we're rendering.
nextRoot!==root){var rootExpirationTime=root.expirationTime;requestWork(root,rootExpirationTime);}if(nestedUpdateCount>NESTED_UPDATE_LIMIT){// Reset this back to zero so subsequent updates don't throw.
nestedUpdateCount=0;invariant(false,'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.');}}function syncUpdates(fn,a,b,c,d){var previousExpirationContext=expirationContext;expirationContext=Sync;try{return fn(a,b,c,d);}finally{expirationContext=previousExpirationContext;}}// TODO: Everything below this is written as if it has been lifted to the
// renderers. I'll do this in a follow-up.
// Linked-list of roots
var firstScheduledRoot=null;var lastScheduledRoot=null;var callbackExpirationTime=NoWork;var callbackID=void 0;var isRendering=false;var nextFlushedRoot=null;var nextFlushedExpirationTime=NoWork;var lowestPriorityPendingInteractiveExpirationTime=NoWork;var deadlineDidExpire=false;var hasUnhandledError=false;var unhandledError=null;var deadline=null;var isBatchingUpdates=false;var isUnbatchingUpdates=false;var isBatchingInteractiveUpdates=false;var completedBatches=null;var originalStartTimeMs=scheduler.unstable_now();var currentRendererTime=msToExpirationTime(originalStartTimeMs);var currentSchedulerTime=currentRendererTime;// Use these to prevent an infinite loop of nested updates
var NESTED_UPDATE_LIMIT=50;var nestedUpdateCount=0;var lastCommittedRootDuringThisBatch=null;var timeHeuristicForUnitOfWork=1;function recomputeCurrentRendererTime(){var currentTimeMs=scheduler.unstable_now()-originalStartTimeMs;currentRendererTime=msToExpirationTime(currentTimeMs);}function scheduleCallbackWithExpirationTime(root,expirationTime){if(callbackExpirationTime!==NoWork){// A callback is already scheduled. Check its expiration time (timeout).
if(expirationTime>callbackExpirationTime){// Existing callback has sufficient timeout. Exit.
return;}else{if(callbackID!==null){// Existing callback has insufficient timeout. Cancel and schedule a
// new one.
scheduler.unstable_cancelCallback(callbackID);}}// The request callback timer is already running. Don't start a new one.
}else{startRequestCallbackTimer();}callbackExpirationTime=expirationTime;var currentMs=scheduler.unstable_now()-originalStartTimeMs;var expirationTimeMs=expirationTimeToMs(expirationTime);var timeout=expirationTimeMs-currentMs;callbackID=scheduler.unstable_scheduleCallback(performAsyncWork,{timeout:timeout});}// For every call to renderRoot, one of onFatal, onComplete, onSuspend, and
// onYield is called upon exiting. We use these in lieu of returning a tuple.
// I've also chosen not to inline them into renderRoot because these will
// eventually be lifted into the renderer.
function onFatal(root){root.finishedWork=null;}function onComplete(root,finishedWork,expirationTime){root.pendingCommitExpirationTime=expirationTime;root.finishedWork=finishedWork;}function onSuspend(root,finishedWork,suspendedExpirationTime,rootExpirationTime,msUntilTimeout){root.expirationTime=rootExpirationTime;if(msUntilTimeout===0&&!shouldYield()){// Don't wait an additional tick. Commit the tree immediately.
root.pendingCommitExpirationTime=suspendedExpirationTime;root.finishedWork=finishedWork;}else if(msUntilTimeout>0){// Wait `msUntilTimeout` milliseconds before committing.
root.timeoutHandle=scheduleTimeout(onTimeout.bind(null,root,finishedWork,suspendedExpirationTime),msUntilTimeout);}}function onYield(root){root.finishedWork=null;}function onTimeout(root,finishedWork,suspendedExpirationTime){// The root timed out. Commit it.
root.pendingCommitExpirationTime=suspendedExpirationTime;root.finishedWork=finishedWork;// Read the current time before entering the commit phase. We can be
// certain this won't cause tearing related to batching of event updates
// because we're at the top of a timer event.
recomputeCurrentRendererTime();currentSchedulerTime=currentRendererTime;flushRoot(root,suspendedExpirationTime);}function onCommit(root,expirationTime){root.expirationTime=expirationTime;root.finishedWork=null;}function requestCurrentTime(){// requestCurrentTime is called by the scheduler to compute an expiration
// time.
//
// Expiration times are computed by adding to the current time (the start
// time). However, if two updates are scheduled within the same event, we
// should treat their start times as simultaneous, even if the actual clock
// time has advanced between the first and second call.
// In other words, because expiration times determine how updates are batched,
// we want all updates of like priority that occur within the same event to
// receive the same expiration time. Otherwise we get tearing.
//
// We keep track of two separate times: the current "renderer" time and the
// current "scheduler" time. The renderer time can be updated whenever; it
// only exists to minimize the calls performance.now.
//
// But the scheduler time can only be updated if there's no pending work, or
// if we know for certain that we're not in the middle of an event.
if(isRendering){// We're already rendering. Return the most recently read time.
return currentSchedulerTime;}// Check if there's pending work.
findHighestPriorityRoot();if(nextFlushedExpirationTime===NoWork||nextFlushedExpirationTime===Never){// If there's no pending work, or if the pending work is offscreen, we can
// read the current time without risk of tearing.
recomputeCurrentRendererTime();currentSchedulerTime=currentRendererTime;return currentSchedulerTime;}// There's already pending work. We might be in the middle of a browser
// event. If we were to read the current time, it could cause multiple updates
// within the same event to receive different expiration times, leading to
// tearing. Return the last read time. During the next idle callback, the
// time will be updated.
return currentSchedulerTime;}// requestWork is called by the scheduler whenever a root receives an update.
// It's up to the renderer to call renderRoot at some point in the future.
function requestWork(root,expirationTime){addRootToSchedule(root,expirationTime);if(isRendering){// Prevent reentrancy. Remaining work will be scheduled at the end of
// the currently rendering batch.
return;}if(isBatchingUpdates){// Flush work at the end of the batch.
if(isUnbatchingUpdates){// ...unless we're inside unbatchedUpdates, in which case we should
// flush it now.
nextFlushedRoot=root;nextFlushedExpirationTime=Sync;performWorkOnRoot(root,Sync,true);}return;}// TODO: Get rid of Sync and use current time?
if(expirationTime===Sync){performSyncWork();}else{scheduleCallbackWithExpirationTime(root,expirationTime);}}function addRootToSchedule(root,expirationTime){// Add the root to the schedule.
// Check if this root is already part of the schedule.
if(root.nextScheduledRoot===null){// This root is not already scheduled. Add it.
root.expirationTime=expirationTime;if(lastScheduledRoot===null){firstScheduledRoot=lastScheduledRoot=root;root.nextScheduledRoot=root;}else{lastScheduledRoot.nextScheduledRoot=root;lastScheduledRoot=root;lastScheduledRoot.nextScheduledRoot=firstScheduledRoot;}}else{// This root is already scheduled, but its priority may have increased.
var remainingExpirationTime=root.expirationTime;if(remainingExpirationTime===NoWork||expirationTime<remainingExpirationTime){// Update the priority.
root.expirationTime=expirationTime;}}}function findHighestPriorityRoot(){var highestPriorityWork=NoWork;var highestPriorityRoot=null;if(lastScheduledRoot!==null){var previousScheduledRoot=lastScheduledRoot;var root=firstScheduledRoot;while(root!==null){var remainingExpirationTime=root.expirationTime;if(remainingExpirationTime===NoWork){// This root no longer has work. Remove it from the scheduler.
// TODO: This check is redudant, but Flow is confused by the branch
// below where we set lastScheduledRoot to null, even though we break
// from the loop right after.
!(previousScheduledRoot!==null&&lastScheduledRoot!==null)?invariant(false,'Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.'):void 0;if(root===root.nextScheduledRoot){// This is the only root in the list.
root.nextScheduledRoot=null;firstScheduledRoot=lastScheduledRoot=null;break;}else if(root===firstScheduledRoot){// This is the first root in the list.
var next=root.nextScheduledRoot;firstScheduledRoot=next;lastScheduledRoot.nextScheduledRoot=next;root.nextScheduledRoot=null;}else if(root===lastScheduledRoot){// This is the last root in the list.
lastScheduledRoot=previousScheduledRoot;lastScheduledRoot.nextScheduledRoot=firstScheduledRoot;root.nextScheduledRoot=null;break;}else{previousScheduledRoot.nextScheduledRoot=root.nextScheduledRoot;root.nextScheduledRoot=null;}root=previousScheduledRoot.nextScheduledRoot;}else{if(highestPriorityWork===NoWork||remainingExpirationTime<highestPriorityWork){// Update the priority, if it's higher
highestPriorityWork=remainingExpirationTime;highestPriorityRoot=root;}if(root===lastScheduledRoot){break;}if(highestPriorityWork===Sync){// Sync is highest priority by definition so
// we can stop searching.
break;}previousScheduledRoot=root;root=root.nextScheduledRoot;}}}nextFlushedRoot=highestPriorityRoot;nextFlushedExpirationTime=highestPriorityWork;}function performAsyncWork(dl){if(dl.didTimeout){// The callback timed out. That means at least one update has expired.
// Iterate through the root schedule. If they contain expired work, set
// the next render expiration time to the current time. This has the effect
// of flushing all expired work in a single batch, instead of flushing each
// level one at a time.
if(firstScheduledRoot!==null){recomputeCurrentRendererTime();var root=firstScheduledRoot;do{didExpireAtExpirationTime(root,currentRendererTime);// The root schedule is circular, so this is never null.
root=root.nextScheduledRoot;}while(root!==firstScheduledRoot);}}performWork(NoWork,dl);}function performSyncWork(){performWork(Sync,null);}function performWork(minExpirationTime,dl){deadline=dl;// Keep working on roots until there's no more work, or until we reach
// the deadline.
findHighestPriorityRoot();if(deadline!==null){recomputeCurrentRendererTime();currentSchedulerTime=currentRendererTime;if(enableUserTimingAPI){var didExpire=nextFlushedExpirationTime<currentRendererTime;var timeout=expirationTimeToMs(nextFlushedExpirationTime);stopRequestCallbackTimer(didExpire,timeout);}while(nextFlushedRoot!==null&&nextFlushedExpirationTime!==NoWork&&(minExpirationTime===NoWork||minExpirationTime>=nextFlushedExpirationTime)&&(!deadlineDidExpire||currentRendererTime>=nextFlushedExpirationTime)){performWorkOnRoot(nextFlushedRoot,nextFlushedExpirationTime,currentRendererTime>=nextFlushedExpirationTime);findHighestPriorityRoot();recomputeCurrentRendererTime();currentSchedulerTime=currentRendererTime;}}else{while(nextFlushedRoot!==null&&nextFlushedExpirationTime!==NoWork&&(minExpirationTime===NoWork||minExpirationTime>=nextFlushedExpirationTime)){performWorkOnRoot(nextFlushedRoot,nextFlushedExpirationTime,true);findHighestPriorityRoot();}}// We're done flushing work. Either we ran out of time in this callback,
// or there's no more work left with sufficient priority.
// If we're inside a callback, set this to false since we just completed it.
if(deadline!==null){callbackExpirationTime=NoWork;callbackID=null;}// If there's work left over, schedule a new callback.
if(nextFlushedExpirationTime!==NoWork){scheduleCallbackWithExpirationTime(nextFlushedRoot,nextFlushedExpirationTime);}// Clean-up.
deadline=null;deadlineDidExpire=false;finishRendering();}function flushRoot(root,expirationTime){!!isRendering?invariant(false,'work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.'):void 0;// Perform work on root as if the given expiration time is the current time.
// This has the effect of synchronously flushing all work up to and
// including the given time.
nextFlushedRoot=root;nextFlushedExpirationTime=expirationTime;performWorkOnRoot(root,expirationTime,true);// Flush any sync work that was scheduled by lifecycles
performSyncWork();}function finishRendering(){nestedUpdateCount=0;lastCommittedRootDuringThisBatch=null;if(completedBatches!==null){var batches=completedBatches;completedBatches=null;for(var i=0;i<batches.length;i++){var batch=batches[i];try{batch._onComplete();}catch(error){if(!hasUnhandledError){hasUnhandledError=true;unhandledError=error;}}}}if(hasUnhandledError){var error=unhandledError;unhandledError=null;hasUnhandledError=false;throw error;}}function performWorkOnRoot(root,expirationTime,isExpired){!!isRendering?invariant(false,'performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.'):void 0;isRendering=true;// Check if this is async work or sync/expired work.
if(deadline===null||isExpired){// Flush work without yielding.
// TODO: Non-yieldy work does not necessarily imply expired work. A renderer
// may want to perform some work without yielding, but also without
// requiring the root to complete (by triggering placeholders).
var finishedWork=root.finishedWork;if(finishedWork!==null){// This root is already complete. We can commit it.
completeRoot(root,finishedWork,expirationTime);}else{root.finishedWork=null;// If this root previously suspended, clear its existing timeout, since
// we're about to try rendering again.
var timeoutHandle=root.timeoutHandle;if(timeoutHandle!==noTimeout){root.timeoutHandle=noTimeout;// $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
cancelTimeout(timeoutHandle);}var isYieldy=false;renderRoot(root,isYieldy,isExpired);finishedWork=root.finishedWork;if(finishedWork!==null){// We've completed the root. Commit it.
completeRoot(root,finishedWork,expirationTime);}}}else{// Flush async work.
var _finishedWork=root.finishedWork;if(_finishedWork!==null){// This root is already complete. We can commit it.
completeRoot(root,_finishedWork,expirationTime);}else{root.finishedWork=null;// If this root previously suspended, clear its existing timeout, since
// we're about to try rendering again.
var _timeoutHandle=root.timeoutHandle;if(_timeoutHandle!==noTimeout){root.timeoutHandle=noTimeout;// $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
cancelTimeout(_timeoutHandle);}var _isYieldy=true;renderRoot(root,_isYieldy,isExpired);_finishedWork=root.finishedWork;if(_finishedWork!==null){// We've completed the root. Check the deadline one more time
// before committing.
if(!shouldYield()){// Still time left. Commit the root.
completeRoot(root,_finishedWork,expirationTime);}else{// There's no time left. Mark this root as complete. We'll come
// back and commit it later.
root.finishedWork=_finishedWork;}}}}isRendering=false;}function completeRoot(root,finishedWork,expirationTime){// Check if there's a batch that matches this expiration time.
var firstBatch=root.firstBatch;if(firstBatch!==null&&firstBatch._expirationTime<=expirationTime){if(completedBatches===null){completedBatches=[firstBatch];}else{completedBatches.push(firstBatch);}if(firstBatch._defer){// This root is blocked from committing by a batch. Unschedule it until
// we receive another update.
root.finishedWork=finishedWork;root.expirationTime=NoWork;return;}}// Commit the root.
root.finishedWork=null;// Check if this is a nested update (a sync update scheduled during the
// commit phase).
if(root===lastCommittedRootDuringThisBatch){// If the next root is the same as the previous root, this is a nested
// update. To prevent an infinite loop, increment the nested update count.
nestedUpdateCount++;}else{// Reset whenever we switch roots.
lastCommittedRootDuringThisBatch=root;nestedUpdateCount=0;}commitRoot(root,finishedWork);}// When working on async work, the reconciler asks the renderer if it should
// yield execution. For DOM, we implement this with requestIdleCallback.
function shouldYield(){if(deadlineDidExpire){return true;}if(deadline===null||deadline.timeRemaining()>timeHeuristicForUnitOfWork){// Disregard deadline.didTimeout. Only expired work should be flushed
// during a timeout. This path is only hit for non-expired work.
return false;}deadlineDidExpire=true;return true;}function onUncaughtError(error){!(nextFlushedRoot!==null)?invariant(false,'Should be working on a root. This error is likely caused by a bug in React. Please file an issue.'):void 0;// Unschedule this root so we don't work on it again until there's
// another update.
nextFlushedRoot.expirationTime=NoWork;if(!hasUnhandledError){hasUnhandledError=true;unhandledError=error;}}// TODO: Batching should be implemented at the renderer level, not inside
// the reconciler.
function batchedUpdates$1(fn,a){var previousIsBatchingUpdates=isBatchingUpdates;isBatchingUpdates=true;try{return fn(a);}finally{isBatchingUpdates=previousIsBatchingUpdates;if(!isBatchingUpdates&&!isRendering){performSyncWork();}}}// TODO: Batching should be implemented at the renderer level, not inside
// the reconciler.
function unbatchedUpdates(fn,a){if(isBatchingUpdates&&!isUnbatchingUpdates){isUnbatchingUpdates=true;try{return fn(a);}finally{isUnbatchingUpdates=false;}}return fn(a);}// TODO: Batching should be implemented at the renderer level, not within
// the reconciler.
function flushSync(fn,a){!!isRendering?invariant(false,'flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.'):void 0;var previousIsBatchingUpdates=isBatchingUpdates;isBatchingUpdates=true;try{return syncUpdates(fn,a);}finally{isBatchingUpdates=previousIsBatchingUpdates;performSyncWork();}}function interactiveUpdates$1(fn,a,b){if(isBatchingInteractiveUpdates){return fn(a,b);}// If there are any pending interactive updates, synchronously flush them.
// This needs to happen before we read any handlers, because the effect of
// the previous event may influence which handlers are called during
// this event.
if(!isBatchingUpdates&&!isRendering&&lowestPriorityPendingInteractiveExpirationTime!==NoWork){// Synchronously flush pending interactive updates.
performWork(lowestPriorityPendingInteractiveExpirationTime,null);lowestPriorityPendingInteractiveExpirationTime=NoWork;}var previousIsBatchingInteractiveUpdates=isBatchingInteractiveUpdates;var previousIsBatchingUpdates=isBatchingUpdates;isBatchingInteractiveUpdates=true;isBatchingUpdates=true;try{return fn(a,b);}finally{isBatchingInteractiveUpdates=previousIsBatchingInteractiveUpdates;isBatchingUpdates=previousIsBatchingUpdates;if(!isBatchingUpdates&&!isRendering){performSyncWork();}}}function flushInteractiveUpdates$1(){if(!isRendering&&lowestPriorityPendingInteractiveExpirationTime!==NoWork){// Synchronously flush pending interactive updates.
performWork(lowestPriorityPendingInteractiveExpirationTime,null);lowestPriorityPendingInteractiveExpirationTime=NoWork;}}function flushControlled(fn){var previousIsBatchingUpdates=isBatchingUpdates;isBatchingUpdates=true;try{syncUpdates(fn);}finally{isBatchingUpdates=previousIsBatchingUpdates;if(!isBatchingUpdates&&!isRendering){performSyncWork();}}}// 0 is PROD, 1 is DEV.
// Might add PROFILE later.
var didWarnAboutNestedUpdates=void 0;var didWarnAboutFindNodeInStrictMode=void 0;{didWarnAboutNestedUpdates=false;didWarnAboutFindNodeInStrictMode={};}function getContextForSubtree(parentComponent){if(!parentComponent){return emptyContextObject;}var fiber=get(parentComponent);var parentContext=findCurrentUnmaskedContext(fiber);if(fiber.tag===ClassComponent){var Component=fiber.type;if(isContextProvider(Component)){return processChildContext(fiber,Component,parentContext);}}return parentContext;}function scheduleRootUpdate(current$$1,element,expirationTime,callback){{if(phase==='render'&&current!==null&&!didWarnAboutNestedUpdates){didWarnAboutNestedUpdates=true;warningWithoutStack$1(false,'Render methods should be a pure function of props and state; '+'triggering nested component updates from render is not allowed. '+'If necessary, trigger nested updates in componentDidUpdate.\n\n'+'Check the render method of %s.',getComponentName(current.type)||'Unknown');}}var update=createUpdate(expirationTime);// Caution: React DevTools currently depends on this property
// being called "element".
update.payload={element:element};callback=callback===undefined?null:callback;if(callback!==null){!(typeof callback==='function')?warningWithoutStack$1(false,'render(...): Expected the last optional `callback` argument to be a '+'function. Instead received: %s.',callback):void 0;update.callback=callback;}enqueueUpdate(current$$1,update);scheduleWork(current$$1,expirationTime);return expirationTime;}function updateContainerAtExpirationTime(element,container,parentComponent,expirationTime,callback){// TODO: If this is a nested container, this won't be the root.
var current$$1=container.current;{if(ReactFiberInstrumentation_1.debugTool){if(current$$1.alternate===null){ReactFiberInstrumentation_1.debugTool.onMountContainer(container);}else if(element===null){ReactFiberInstrumentation_1.debugTool.onUnmountContainer(container);}else{ReactFiberInstrumentation_1.debugTool.onUpdateContainer(container);}}}var context=getContextForSubtree(parentComponent);if(container.context===null){container.context=context;}else{container.pendingContext=context;}return scheduleRootUpdate(current$$1,element,expirationTime,callback);}function findHostInstance(component){var fiber=get(component);if(fiber===undefined){if(typeof component.render==='function'){invariant(false,'Unable to find node on an unmounted component.');}else{invariant(false,'Argument appears to not be a ReactComponent. Keys: %s',Object.keys(component));}}var hostFiber=findCurrentHostFiber(fiber);if(hostFiber===null){return null;}return hostFiber.stateNode;}function findHostInstanceWithWarning(component,methodName){{var fiber=get(component);if(fiber===undefined){if(typeof component.render==='function'){invariant(false,'Unable to find node on an unmounted component.');}else{invariant(false,'Argument appears to not be a ReactComponent. Keys: %s',Object.keys(component));}}var hostFiber=findCurrentHostFiber(fiber);if(hostFiber===null){return null;}if(hostFiber.mode&StrictMode){var componentName=getComponentName(fiber.type)||'Component';if(!didWarnAboutFindNodeInStrictMode[componentName]){didWarnAboutFindNodeInStrictMode[componentName]=true;if(fiber.mode&StrictMode){warningWithoutStack$1(false,'%s is deprecated in StrictMode. '+'%s was passed an instance of %s which is inside StrictMode. '+'Instead, add a ref directly to the element you want to reference.'+'\n%s'+'\n\nLearn more about using refs safely here:'+'\nhttps://fb.me/react-strict-mode-find-node',methodName,methodName,componentName,getStackByFiberInDevAndProd(hostFiber));}else{warningWithoutStack$1(false,'%s is deprecated in StrictMode. '+'%s was passed an instance of %s which renders StrictMode children. '+'Instead, add a ref directly to the element you want to reference.'+'\n%s'+'\n\nLearn more about using refs safely here:'+'\nhttps://fb.me/react-strict-mode-find-node',methodName,methodName,componentName,getStackByFiberInDevAndProd(hostFiber));}}}return hostFiber.stateNode;}return findHostInstance(component);}function createContainer(containerInfo,isConcurrent,hydrate){return createFiberRoot(containerInfo,isConcurrent,hydrate);}function updateContainer(element,container,parentComponent,callback){var current$$1=container.current;var currentTime=requestCurrentTime();var expirationTime=computeExpirationForFiber(currentTime,current$$1);return updateContainerAtExpirationTime(element,container,parentComponent,expirationTime,callback);}function getPublicRootInstance(container){var containerFiber=container.current;if(!containerFiber.child){return null;}switch(containerFiber.child.tag){case HostComponent:return getPublicInstance(containerFiber.child.stateNode);default:return containerFiber.child.stateNode;}}function findHostInstanceWithNoPortals(fiber){var hostFiber=findCurrentHostFiberWithNoPortals(fiber);if(hostFiber===null){return null;}return hostFiber.stateNode;}function injectIntoDevTools(devToolsConfig){var _findFiberByHostInstance=devToolsConfig.findFiberByHostInstance;return injectInternals(_assign({},devToolsConfig,{findHostInstanceByFiber:function findHostInstanceByFiber(fiber){var hostFiber=findCurrentHostFiber(fiber);if(hostFiber===null){return null;}return hostFiber.stateNode;},findFiberByHostInstance:function findFiberByHostInstance(instance){if(!_findFiberByHostInstance){// Might not be implemented by the renderer.
return null;}return _findFiberByHostInstance(instance);}}));}// This file intentionally does *not* have the Flow annotation.
// Don't add it. See `./inline-typed.js` for an explanation.
function createPortal$1(children,containerInfo,// TODO: figure out the API for cross-renderer implementation.
implementation){var key=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;return{// This tag allow us to uniquely identify this as a React Portal
$$typeof:REACT_PORTAL_TYPE,key:key==null?null:''+key,children:children,containerInfo:containerInfo,implementation:implementation};}// TODO: this is special because it gets imported during build.
var ReactVersion='16.6.0';// TODO: This type is shared between the reconciler and ReactDOM, but will
// eventually be lifted out to the renderer.
var ReactCurrentOwner=ReactSharedInternals.ReactCurrentOwner;var topLevelUpdateWarnings=void 0;var warnOnInvalidCallback=void 0;var didWarnAboutUnstableCreatePortal=false;{if(typeof Map!=='function'||// $FlowIssue Flow incorrectly thinks Map has no prototype
Map.prototype==null||typeof Map.prototype.forEach!=='function'||typeof Set!=='function'||// $FlowIssue Flow incorrectly thinks Set has no prototype
Set.prototype==null||typeof Set.prototype.clear!=='function'||typeof Set.prototype.forEach!=='function'){warningWithoutStack$1(false,'React depends on Map and Set built-in types. Make sure that you load a '+'polyfill in older browsers. https://fb.me/react-polyfills');}topLevelUpdateWarnings=function topLevelUpdateWarnings(container){if(container._reactRootContainer&&container.nodeType!==COMMENT_NODE){var hostInstance=findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);if(hostInstance){!(hostInstance.parentNode===container)?warningWithoutStack$1(false,'render(...): It looks like the React-rendered content of this '+'container was removed without using React. This is not '+'supported and will cause errors. Instead, call '+'ReactDOM.unmountComponentAtNode to empty a container.'):void 0;}}var isRootRenderedBySomeReact=!!container._reactRootContainer;var rootEl=getReactRootElementInContainer(container);var hasNonRootReactChild=!!(rootEl&&getInstanceFromNode$1(rootEl));!(!hasNonRootReactChild||isRootRenderedBySomeReact)?warningWithoutStack$1(false,'render(...): Replacing React-rendered children with a new root '+'component. If you intended to update the children of this node, '+'you should instead have the existing children update their state '+'and render the new components instead of calling ReactDOM.render.'):void 0;!(container.nodeType!==ELEMENT_NODE||!container.tagName||container.tagName.toUpperCase()!=='BODY')?warningWithoutStack$1(false,'render(): Rendering components directly into document.body is '+'discouraged, since its children are often manipulated by third-party '+'scripts and browser extensions. This may lead to subtle '+'reconciliation issues. Try rendering into a container element created '+'for your app.'):void 0;};warnOnInvalidCallback=function warnOnInvalidCallback(callback,callerName){!(callback===null||typeof callback==='function')?warningWithoutStack$1(false,'%s(...): Expected the last optional `callback` argument to be a '+'function. Instead received: %s.',callerName,callback):void 0;};}setRestoreImplementation(restoreControlledState$1);function ReactBatch(root){var expirationTime=computeUniqueAsyncExpiration();this._expirationTime=expirationTime;this._root=root;this._next=null;this._callbacks=null;this._didComplete=false;this._hasChildren=false;this._children=null;this._defer=true;}ReactBatch.prototype.render=function(children){!this._defer?invariant(false,'batch.render: Cannot render a batch that already committed.'):void 0;this._hasChildren=true;this._children=children;var internalRoot=this._root._internalRoot;var expirationTime=this._expirationTime;var work=new ReactWork();updateContainerAtExpirationTime(children,internalRoot,null,expirationTime,work._onCommit);return work;};ReactBatch.prototype.then=function(onComplete){if(this._didComplete){onComplete();return;}var callbacks=this._callbacks;if(callbacks===null){callbacks=this._callbacks=[];}callbacks.push(onComplete);};ReactBatch.prototype.commit=function(){var internalRoot=this._root._internalRoot;var firstBatch=internalRoot.firstBatch;!(this._defer&&firstBatch!==null)?invariant(false,'batch.commit: Cannot commit a batch multiple times.'):void 0;if(!this._hasChildren){// This batch is empty. Return.
this._next=null;this._defer=false;return;}var expirationTime=this._expirationTime;// Ensure this is the first batch in the list.
if(firstBatch!==this){// This batch is not the earliest batch. We need to move it to the front.
// Update its expiration time to be the expiration time of the earliest
// batch, so that we can flush it without flushing the other batches.
if(this._hasChildren){expirationTime=this._expirationTime=firstBatch._expirationTime;// Rendering this batch again ensures its children will be the final state
// when we flush (updates are processed in insertion order: last
// update wins).
// TODO: This forces a restart. Should we print a warning?
this.render(this._children);}// Remove the batch from the list.
var previous=null;var batch=firstBatch;while(batch!==this){previous=batch;batch=batch._next;}!(previous!==null)?invariant(false,'batch.commit: Cannot commit a batch multiple times.'):void 0;previous._next=batch._next;// Add it to the front.
this._next=firstBatch;firstBatch=internalRoot.firstBatch=this;}// Synchronously flush all the work up to this batch's expiration time.
this._defer=false;flushRoot(internalRoot,expirationTime);// Pop the batch from the list.
var next=this._next;this._next=null;firstBatch=internalRoot.firstBatch=next;// Append the next earliest batch's children to the update queue.
if(firstBatch!==null&&firstBatch._hasChildren){firstBatch.render(firstBatch._children);}};ReactBatch.prototype._onComplete=function(){if(this._didComplete){return;}this._didComplete=true;var callbacks=this._callbacks;if(callbacks===null){return;}// TODO: Error handling.
for(var i=0;i<callbacks.length;i++){var _callback=callbacks[i];_callback();}};function ReactWork(){this._callbacks=null;this._didCommit=false;// TODO: Avoid need to bind by replacing callbacks in the update queue with
// list of Work objects.
this._onCommit=this._onCommit.bind(this);}ReactWork.prototype.then=function(onCommit){if(this._didCommit){onCommit();return;}var callbacks=this._callbacks;if(callbacks===null){callbacks=this._callbacks=[];}callbacks.push(onCommit);};ReactWork.prototype._onCommit=function(){if(this._didCommit){return;}this._didCommit=true;var callbacks=this._callbacks;if(callbacks===null){return;}// TODO: Error handling.
for(var i=0;i<callbacks.length;i++){var _callback2=callbacks[i];!(typeof _callback2==='function')?invariant(false,'Invalid argument passed as callback. Expected a function. Instead received: %s',_callback2):void 0;_callback2();}};function ReactRoot(container,isConcurrent,hydrate){var root=createContainer(container,isConcurrent,hydrate);this._internalRoot=root;}ReactRoot.prototype.render=function(children,callback){var root=this._internalRoot;var work=new ReactWork();callback=callback===undefined?null:callback;{warnOnInvalidCallback(callback,'render');}if(callback!==null){work.then(callback);}updateContainer(children,root,null,work._onCommit);return work;};ReactRoot.prototype.unmount=function(callback){var root=this._internalRoot;var work=new ReactWork();callback=callback===undefined?null:callback;{warnOnInvalidCallback(callback,'render');}if(callback!==null){work.then(callback);}updateContainer(null,root,null,work._onCommit);return work;};ReactRoot.prototype.legacy_renderSubtreeIntoContainer=function(parentComponent,children,callback){var root=this._internalRoot;var work=new ReactWork();callback=callback===undefined?null:callback;{warnOnInvalidCallback(callback,'render');}if(callback!==null){work.then(callback);}updateContainer(children,root,parentComponent,work._onCommit);return work;};ReactRoot.prototype.createBatch=function(){var batch=new ReactBatch(this);var expirationTime=batch._expirationTime;var internalRoot=this._internalRoot;var firstBatch=internalRoot.firstBatch;if(firstBatch===null){internalRoot.firstBatch=batch;batch._next=null;}else{// Insert sorted by expiration time then insertion order
var insertAfter=null;var insertBefore=firstBatch;while(insertBefore!==null&&insertBefore._expirationTime<=expirationTime){insertAfter=insertBefore;insertBefore=insertBefore._next;}batch._next=insertBefore;if(insertAfter!==null){insertAfter._next=batch;}}return batch;};/**
 * True if the supplied DOM node is a valid node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid DOM node.
 * @internal
 */function isValidContainer(node){return!!(node&&(node.nodeType===ELEMENT_NODE||node.nodeType===DOCUMENT_NODE||node.nodeType===DOCUMENT_FRAGMENT_NODE||node.nodeType===COMMENT_NODE&&node.nodeValue===' react-mount-point-unstable '));}function getReactRootElementInContainer(container){if(!container){return null;}if(container.nodeType===DOCUMENT_NODE){return container.documentElement;}else{return container.firstChild;}}function shouldHydrateDueToLegacyHeuristic(container){var rootElement=getReactRootElementInContainer(container);return!!(rootElement&&rootElement.nodeType===ELEMENT_NODE&&rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));}setBatchingImplementation(batchedUpdates$1,interactiveUpdates$1,flushInteractiveUpdates$1);var warnedAboutHydrateAPI=false;function legacyCreateRootFromDOMContainer(container,forceHydrate){var shouldHydrate=forceHydrate||shouldHydrateDueToLegacyHeuristic(container);// First clear any existing content.
if(!shouldHydrate){var warned=false;var rootSibling=void 0;while(rootSibling=container.lastChild){{if(!warned&&rootSibling.nodeType===ELEMENT_NODE&&rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)){warned=true;warningWithoutStack$1(false,'render(): Target node has markup rendered by React, but there '+'are unrelated nodes as well. This is most commonly caused by '+'white-space inserted around server-rendered markup.');}}container.removeChild(rootSibling);}}{if(shouldHydrate&&!forceHydrate&&!warnedAboutHydrateAPI){warnedAboutHydrateAPI=true;lowPriorityWarning$1(false,'render(): Calling ReactDOM.render() to hydrate server-rendered markup '+'will stop working in React v17. Replace the ReactDOM.render() call '+'with ReactDOM.hydrate() if you want React to attach to the server HTML.');}}// Legacy roots are not async by default.
var isConcurrent=false;return new ReactRoot(container,isConcurrent,shouldHydrate);}function legacyRenderSubtreeIntoContainer(parentComponent,children,container,forceHydrate,callback){// TODO: Ensure all entry points contain this check
!isValidContainer(container)?invariant(false,'Target container is not a DOM element.'):void 0;{topLevelUpdateWarnings(container);}// TODO: Without `any` type, Flow says "Property cannot be accessed on any
// member of intersection type." Whyyyyyy.
var root=container._reactRootContainer;if(!root){// Initial mount
root=container._reactRootContainer=legacyCreateRootFromDOMContainer(container,forceHydrate);if(typeof callback==='function'){var originalCallback=callback;callback=function callback(){var instance=getPublicRootInstance(root._internalRoot);originalCallback.call(instance);};}// Initial mount should not be batched.
unbatchedUpdates(function(){if(parentComponent!=null){root.legacy_renderSubtreeIntoContainer(parentComponent,children,callback);}else{root.render(children,callback);}});}else{if(typeof callback==='function'){var _originalCallback=callback;callback=function callback(){var instance=getPublicRootInstance(root._internalRoot);_originalCallback.call(instance);};}// Update
if(parentComponent!=null){root.legacy_renderSubtreeIntoContainer(parentComponent,children,callback);}else{root.render(children,callback);}}return getPublicRootInstance(root._internalRoot);}function createPortal(children,container){var key=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;!isValidContainer(container)?invariant(false,'Target container is not a DOM element.'):void 0;// TODO: pass ReactDOM portal implementation as third argument
return createPortal$1(children,container,null,key);}var ReactDOM={createPortal:createPortal,findDOMNode:function findDOMNode(componentOrElement){{var owner=ReactCurrentOwner.current;if(owner!==null&&owner.stateNode!==null){var warnedAboutRefsInRender=owner.stateNode._warnedAboutRefsInRender;!warnedAboutRefsInRender?warningWithoutStack$1(false,'%s is accessing findDOMNode inside its render(). '+'render() should be a pure function of props and state. It should '+'never access something that requires stale data from the previous '+'render, such as refs. Move this logic to componentDidMount and '+'componentDidUpdate instead.',getComponentName(owner.type)||'A component'):void 0;owner.stateNode._warnedAboutRefsInRender=true;}}if(componentOrElement==null){return null;}if(componentOrElement.nodeType===ELEMENT_NODE){return componentOrElement;}{return findHostInstanceWithWarning(componentOrElement,'findDOMNode');}return findHostInstance(componentOrElement);},hydrate:function hydrate(element,container,callback){// TODO: throw or warn if we couldn't hydrate?
return legacyRenderSubtreeIntoContainer(null,element,container,true,callback);},render:function render(element,container,callback){return legacyRenderSubtreeIntoContainer(null,element,container,false,callback);},unstable_renderSubtreeIntoContainer:function unstable_renderSubtreeIntoContainer(parentComponent,element,containerNode,callback){!(parentComponent!=null&&has(parentComponent))?invariant(false,'parentComponent must be a valid React Component'):void 0;return legacyRenderSubtreeIntoContainer(parentComponent,element,containerNode,false,callback);},unmountComponentAtNode:function unmountComponentAtNode(container){!isValidContainer(container)?invariant(false,'unmountComponentAtNode(...): Target container is not a DOM element.'):void 0;if(container._reactRootContainer){{var rootEl=getReactRootElementInContainer(container);var renderedByDifferentReact=rootEl&&!getInstanceFromNode$1(rootEl);!!renderedByDifferentReact?warningWithoutStack$1(false,"unmountComponentAtNode(): The node you're attempting to unmount "+'was rendered by another copy of React.'):void 0;}// Unmount should not be batched.
unbatchedUpdates(function(){legacyRenderSubtreeIntoContainer(null,null,container,false,function(){container._reactRootContainer=null;});});// If you call unmountComponentAtNode twice in quick succession, you'll
// get `true` twice. That's probably fine?
return true;}else{{var _rootEl=getReactRootElementInContainer(container);var hasNonRootReactChild=!!(_rootEl&&getInstanceFromNode$1(_rootEl));// Check if the container itself is a React root node.
var isContainerReactRoot=container.nodeType===ELEMENT_NODE&&isValidContainer(container.parentNode)&&!!container.parentNode._reactRootContainer;!!hasNonRootReactChild?warningWithoutStack$1(false,"unmountComponentAtNode(): The node you're attempting to unmount "+'was rendered by React and is not a top-level container. %s',isContainerReactRoot?'You may have accidentally passed in a React root node instead '+'of its container.':'Instead, have the parent component update its state and '+'rerender in order to remove this component.'):void 0;}return false;}},// Temporary alias since we already shipped React 16 RC with it.
// TODO: remove in React 17.
unstable_createPortal:function unstable_createPortal(){if(!didWarnAboutUnstableCreatePortal){didWarnAboutUnstableCreatePortal=true;lowPriorityWarning$1(false,'The ReactDOM.unstable_createPortal() alias has been deprecated, '+'and will be removed in React 17+. Update your code to use '+'ReactDOM.createPortal() instead. It has the exact same API, '+'but without the "unstable_" prefix.');}return createPortal.apply(undefined,arguments);},unstable_batchedUpdates:batchedUpdates$1,unstable_interactiveUpdates:interactiveUpdates$1,flushSync:flushSync,unstable_flushControlled:flushControlled,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{// Keep in sync with ReactDOMUnstableNativeDependencies.js
// and ReactTestUtils.js. This is an array for better minification.
Events:[getInstanceFromNode$1,getNodeFromInstance$1,getFiberCurrentPropsFromNode$1,injection.injectEventPluginsByName,eventNameDispatchConfigs,accumulateTwoPhaseDispatches,accumulateDirectDispatches,enqueueStateRestore,restoreStateIfNeeded,dispatchEvent,runEventsInBatch]}};ReactDOM.unstable_createRoot=function createRoot(container,options){!isValidContainer(container)?invariant(false,'unstable_createRoot(...): Target container is not a DOM element.'):void 0;var hydrate=options!=null&&options.hydrate===true;return new ReactRoot(container,true,hydrate);};var foundDevTools=injectIntoDevTools({findFiberByHostInstance:getClosestInstanceFromNode,bundleType:1,version:ReactVersion,rendererPackageName:'react-dom'});{if(!foundDevTools&&canUseDOM&&window.top===window.self){// If we're in Chrome or Firefox, provide a download link if not installed.
if(navigator.userAgent.indexOf('Chrome')>-1&&navigator.userAgent.indexOf('Edge')===-1||navigator.userAgent.indexOf('Firefox')>-1){var protocol=window.location.protocol;// Don't warn in exotic cases like chrome-extension://.
if(/^(https?|file):$/.test(protocol)){console.info('%cDownload the React DevTools '+'for a better development experience: '+'https://fb.me/react-devtools'+(protocol==='file:'?'\nYou might need to use a local HTTP server (instead of file://): '+'https://fb.me/react-devtools-faq':''),'font-weight:bold');}}}}var ReactDOM$2=Object.freeze({default:ReactDOM});var ReactDOM$3=ReactDOM$2&&ReactDOM||ReactDOM$2;// TODO: decide on the top-level export form.
// This is hacky but makes it work with both Rollup and Jest.
var reactDom=ReactDOM$3.default||ReactDOM$3;module.exports=reactDom;})();}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (process.env.NODE_ENV === 'production') {
  module.exports = __webpack_require__(82);
} else {
  module.exports = __webpack_require__(83);
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.6.0
 * scheduler-tracing.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


Object.defineProperty(exports, "__esModule", { value: !0 });var b = 0;exports.__interactionsRef = null;exports.__subscriberRef = null;exports.unstable_clear = function (a) {
  return a();
};exports.unstable_getCurrent = function () {
  return null;
};exports.unstable_getThreadID = function () {
  return ++b;
};exports.unstable_trace = function (a, d, c) {
  return c();
};exports.unstable_wrap = function (a) {
  return a;
};exports.unstable_subscribe = function () {};exports.unstable_unsubscribe = function () {};

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/** @license React v16.6.0
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



if (process.env.NODE_ENV !== "production") {
  (function () {
    'use strict';

    Object.defineProperty(exports, '__esModule', { value: true });

    // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:


    // In some cases, StrictMode should also double-render lifecycles.
    // This can be confusing for tests though,
    // And it can be bad for performance in production.
    // This feature flag can be used to control the behavior:


    // To preserve the "Pause on caught exceptions" behavior of the debugger, we
    // replay the begin phase of a failed component inside invokeGuardedCallback.


    // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:


    // Gather advanced timing metrics for Profiler subtrees.


    // Trace which interactions trigger each commit.
    var enableSchedulerTracing = true;

    // Only used in www builds.


    // Only used in www builds.


    // React Fire: prevent the value and checked attributes from syncing
    // with their related DOM properties

    var DEFAULT_THREAD_ID = 0;

    // Counters used to generate unique IDs.
    var interactionIDCounter = 0;
    var threadIDCounter = 0;

    // Set of currently traced interactions.
    // Interactions "stack"â
    // Meaning that newly traced interactions are appended to the previously active set.
    // When an interaction goes out of scope, the previous set (if any) is restored.
    exports.__interactionsRef = null;

    // Listener(s) to notify when interactions begin and end.
    exports.__subscriberRef = null;

    if (enableSchedulerTracing) {
      exports.__interactionsRef = {
        current: new Set()
      };
      exports.__subscriberRef = {
        current: null
      };
    }

    function unstable_clear(callback) {
      if (!enableSchedulerTracing) {
        return callback();
      }

      var prevInteractions = exports.__interactionsRef.current;
      exports.__interactionsRef.current = new Set();

      try {
        return callback();
      } finally {
        exports.__interactionsRef.current = prevInteractions;
      }
    }

    function unstable_getCurrent() {
      if (!enableSchedulerTracing) {
        return null;
      } else {
        return exports.__interactionsRef.current;
      }
    }

    function unstable_getThreadID() {
      return ++threadIDCounter;
    }

    function unstable_trace(name, timestamp, callback) {
      var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;

      if (!enableSchedulerTracing) {
        return callback();
      }

      var interaction = {
        __count: 1,
        id: interactionIDCounter++,
        name: name,
        timestamp: timestamp
      };

      var prevInteractions = exports.__interactionsRef.current;

      // Traced interactions should stack/accumulate.
      // To do that, clone the current interactions.
      // The previous set will be restored upon completion.
      var interactions = new Set(prevInteractions);
      interactions.add(interaction);
      exports.__interactionsRef.current = interactions;

      var subscriber = exports.__subscriberRef.current;
      var returnValue = void 0;

      try {
        if (subscriber !== null) {
          subscriber.onInteractionTraced(interaction);
        }
      } finally {
        try {
          if (subscriber !== null) {
            subscriber.onWorkStarted(interactions, threadID);
          }
        } finally {
          try {
            returnValue = callback();
          } finally {
            exports.__interactionsRef.current = prevInteractions;

            try {
              if (subscriber !== null) {
                subscriber.onWorkStopped(interactions, threadID);
              }
            } finally {
              interaction.__count--;

              // If no async work was scheduled for this interaction,
              // Notify subscribers that it's completed.
              if (subscriber !== null && interaction.__count === 0) {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              }
            }
          }
        }
      }

      return returnValue;
    }

    function unstable_wrap(callback) {
      var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;

      if (!enableSchedulerTracing) {
        return callback;
      }

      var wrappedInteractions = exports.__interactionsRef.current;

      var subscriber = exports.__subscriberRef.current;
      if (subscriber !== null) {
        subscriber.onWorkScheduled(wrappedInteractions, threadID);
      }

      // Update the pending async work count for the current interactions.
      // Update after calling subscribers in case of error.
      wrappedInteractions.forEach(function (interaction) {
        interaction.__count++;
      });

      var hasRun = false;

      function wrapped() {
        var prevInteractions = exports.__interactionsRef.current;
        exports.__interactionsRef.current = wrappedInteractions;

        subscriber = exports.__subscriberRef.current;

        try {
          var returnValue = void 0;

          try {
            if (subscriber !== null) {
              subscriber.onWorkStarted(wrappedInteractions, threadID);
            }
          } finally {
            try {
              returnValue = callback.apply(undefined, arguments);
            } finally {
              exports.__interactionsRef.current = prevInteractions;

              if (subscriber !== null) {
                subscriber.onWorkStopped(wrappedInteractions, threadID);
              }
            }
          }

          return returnValue;
        } finally {
          if (!hasRun) {
            // We only expect a wrapped function to be executed once,
            // But in the event that it's executed more than onceâ
            // Only decrement the outstanding interaction counts once.
            hasRun = true;

            // Update pending async counts for all wrapped interactions.
            // If this was the last scheduled async work for any of them,
            // Mark them as completed.
            wrappedInteractions.forEach(function (interaction) {
              interaction.__count--;

              if (subscriber !== null && interaction.__count === 0) {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              }
            });
          }
        }
      }

      wrapped.cancel = function cancel() {
        subscriber = exports.__subscriberRef.current;

        try {
          if (subscriber !== null) {
            subscriber.onWorkCanceled(wrappedInteractions, threadID);
          }
        } finally {
          // Update pending async counts for all wrapped interactions.
          // If this was the last scheduled async work for any of them,
          // Mark them as completed.
          wrappedInteractions.forEach(function (interaction) {
            interaction.__count--;

            if (subscriber && interaction.__count === 0) {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            }
          });
        }
      };

      return wrapped;
    }

    var subscribers = null;
    if (enableSchedulerTracing) {
      subscribers = new Set();
    }

    function unstable_subscribe(subscriber) {
      if (enableSchedulerTracing) {
        subscribers.add(subscriber);

        if (subscribers.size === 1) {
          exports.__subscriberRef.current = {
            onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
            onInteractionTraced: onInteractionTraced,
            onWorkCanceled: onWorkCanceled,
            onWorkScheduled: onWorkScheduled,
            onWorkStarted: onWorkStarted,
            onWorkStopped: onWorkStopped
          };
        }
      }
    }

    function unstable_unsubscribe(subscriber) {
      if (enableSchedulerTracing) {
        subscribers.delete(subscriber);

        if (subscribers.size === 0) {
          exports.__subscriberRef.current = null;
        }
      }
    }

    function onInteractionTraced(interaction) {
      var didCatchError = false;
      var caughtError = null;

      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onInteractionTraced(interaction);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onInteractionScheduledWorkCompleted(interaction) {
      var didCatchError = false;
      var caughtError = null;

      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onInteractionScheduledWorkCompleted(interaction);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onWorkScheduled(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;

      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkScheduled(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onWorkStarted(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;

      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkStarted(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onWorkStopped(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;

      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkStopped(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onWorkCanceled(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;

      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkCanceled(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    exports.unstable_clear = unstable_clear;
    exports.unstable_getCurrent = unstable_getCurrent;
    exports.unstable_getThreadID = unstable_getThreadID;
    exports.unstable_trace = unstable_trace;
    exports.unstable_wrap = unstable_wrap;
    exports.unstable_subscribe = unstable_subscribe;
    exports.unstable_unsubscribe = unstable_unsubscribe;
  })();
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(85);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(4)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./ui.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./ui.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

var escape = __webpack_require__(9);
exports = module.exports = __webpack_require__(3)(false);
// imports


// module
exports.push([module.i, "* {\n  margin: 0px;\n  padding: 0px;\n  cursor: default;\n  user-select: none;\n}\n.hudTargetCursor {\n  cursor: url(" + escape(__webpack_require__(41)) + ") 16 16, pointer !important;\n}\n.hudHideCursor {\n  cursor: none !important;\n}\n.hudSelectionCursor {\n  cursor: url(" + escape(__webpack_require__(42)) + ") 16 16, pointer !important;\n}\n.hudSelectionCursorPressed {\n  cursor: url(" + escape(__webpack_require__(32)) + ") 16 31, pointer !important;\n}\n.hudSelectionCursorFail {\n  cursor: url(" + escape(__webpack_require__(43)) + ") 16 31, pointer !important;\n}\n#twitchIconCoach {\n  top: -8%;\n  left: -8%;\n  width: 123%;\n  filter: drop-shadow(0 0 4px rgba(255, 255, 255, 0.125)) drop-shadow(0 0 4px rgba(255, 0, 149, 0.125));\n}\n.hud {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  pointer-events: auto;\n  z-index: -1;\n  border: 1px solid rgba(255, 0, 255, 0.85);\n  box-sizing: border-box;\n  animation-name: hudBorderFade;\n  animation-duration: 30s;\n  animation-iteration-count: 1;\n  animation-fill-mode: forwards;\n  animation-timing-function: ease-in-out;\n}\n@keyframes hudBorderFade {\n  0% {\n    border: 1px solid rgba(255, 0, 255, 0.85);\n  }\n  100% {\n    border: 1px solid rgba(255, 0, 255, 0);\n  }\n}\n.hudMainMenu {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  pointer-events: auto;\n  border: 1px solid rgba(255, 0, 255, 0.85);\n  box-sizing: border-box;\n}\n", ""]);

// exports


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// stats.js r8 - http://github.com/mrdoob/stats.js
window.Stats = function () {
  var h,
      a,
      n = 0,
      o = 0,
      i = Date.now(),
      u = i,
      p = i,
      l = 0,
      q = 1E3,
      r = 0,
      e,
      j,
      f,
      b = [[16, 16, 48], [0, 255, 255]],
      m = 0,
      s = 1E3,
      t = 0,
      d,
      k,
      g,
      c = [[16, 48, 16], [0, 255, 0]];h = document.createElement("div");h.style.cursor = "pointer";h.style.width = "80px";h.style.opacity = "0.9";h.style.zIndex = "10001";h.addEventListener("mousedown", function (a) {
    a.preventDefault();n = (n + 1) % 2;n == 0 ? (e.style.display = "block", d.style.display = "none") : (e.style.display = "none", d.style.display = "block");
  }, !1);e = document.createElement("div");e.style.textAlign = "left";e.style.lineHeight = "1.2em";e.style.backgroundColor = "rgb(" + Math.floor(b[0][0] / 2) + "," + Math.floor(b[0][1] / 2) + "," + Math.floor(b[0][2] / 2) + ")";e.style.padding = "0 0 3px 3px";h.appendChild(e);j = document.createElement("div");j.style.fontFamily = "Helvetica, Arial, sans-serif";j.style.fontSize = "9px";j.style.color = "rgb(" + b[1][0] + "," + b[1][1] + "," + b[1][2] + ")";j.style.fontWeight = "bold";j.innerHTML = "FPS";e.appendChild(j);f = document.createElement("div");f.style.position = "relative";f.style.width = "74px";f.style.height = "30px";f.style.backgroundColor = "rgb(" + b[1][0] + "," + b[1][1] + "," + b[1][2] + ")";for (e.appendChild(f); f.children.length < 74;) {
    a = document.createElement("span"), a.style.width = "1px", a.style.height = "30px", a.style.cssFloat = "left", a.style.backgroundColor = "rgb(" + b[0][0] + "," + b[0][1] + "," + b[0][2] + ")", f.appendChild(a);
  }d = document.createElement("div");d.style.textAlign = "left";d.style.lineHeight = "1.2em";d.style.backgroundColor = "rgb(" + Math.floor(c[0][0] / 2) + "," + Math.floor(c[0][1] / 2) + "," + Math.floor(c[0][2] / 2) + ")";d.style.padding = "0 0 3px 3px";d.style.display = "none";h.appendChild(d);k = document.createElement("div");k.style.fontFamily = "Helvetica, Arial, sans-serif";k.style.fontSize = "9px";k.style.color = "rgb(" + c[1][0] + "," + c[1][1] + "," + c[1][2] + ")";k.style.fontWeight = "bold";k.innerHTML = "MS";d.appendChild(k);g = document.createElement("div");g.style.position = "relative";g.style.width = "74px";g.style.height = "30px";g.style.backgroundColor = "rgb(" + c[1][0] + "," + c[1][1] + "," + c[1][2] + ")";for (d.appendChild(g); g.children.length < 74;) {
    a = document.createElement("span"), a.style.width = "1px", a.style.height = Math.random() * 30 + "px", a.style.cssFloat = "left", a.style.backgroundColor = "rgb(" + c[0][0] + "," + c[0][1] + "," + c[0][2] + ")", g.appendChild(a);
  }return { domElement: h, update: function update() {
      i = Date.now();m = i - u;s = Math.min(s, m);t = Math.max(t, m);k.textContent = m + " MS (" + s + "-" + t + ")";var a = Math.min(30, 30 - m / 200 * 30);g.appendChild(g.firstChild).style.height = a + "px";u = i;o++;if (i > p + 1E3) l = Math.round(o * 1E3 / (i - p)), q = Math.min(q, l), r = Math.max(r, l), j.textContent = l + " FPS (" + q + "-" + r + ")", a = Math.min(30, 30 - l / 100 * 30), f.appendChild(f.firstChild).style.height = a + "px", p = i, o = 0;
    } };
};

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.

var React = __webpack_require__(5);

__webpack_require__(88);

var BuffManager = __webpack_require__(18);

var BuffBarView = function (_React$Component) {
    _inherits(BuffBarView, _React$Component);

    function BuffBarView() {
        _classCallCheck(this, BuffBarView);

        return _possibleConstructorReturn(this, (BuffBarView.__proto__ || Object.getPrototypeOf(BuffBarView)).apply(this, arguments));
    }

    _createClass(BuffBarView, [{
        key: "render",
        value: function render() {
            var outerStyle = {
                width: Math.abs(this.props.buffData.amount * 100) + "%"
            };

            var containerClass = "buffBarContainer";
            var hue = this.props.buffData.amount >= 0 ? this.props.buffData.hue : this.props.buffData.hueEvil;
            var hueStyle = {
                filter: "hue-rotate(" + hue + "deg)"

                // If evil, then saturate more so red color pops
            };if (this.props.buffData.amount < 0) {
                hueStyle.filter += " saturate(275%)";
                containerClass += " buffBarContainerEvil";
            }

            var percentVotes = Math.abs(Math.round(this.props.buffData.amount * 100));

            var percentStyle = {
                color: this.props.buffData.amount >= 0 ? "white" : "red"
            };

            return React.createElement(
                "div",
                { className: containerClass },
                React.createElement(
                    "div",
                    { className: "displayName" },
                    this.props.buffData.displayName
                ),
                React.createElement(
                    "div",
                    { className: "voteText", style: percentStyle },
                    percentVotes + "%"
                ),
                React.createElement(
                    "div",
                    { className: "outerBar", style: outerStyle },
                    React.createElement(
                        "div",
                        { className: "hueBar", style: hueStyle },
                        React.createElement("img", { className: "outerBarBg", src: "gui/buffMeterFill.png" })
                    )
                ),
                React.createElement("img", { className: "buffBarContainerBg", src: "gui/buffMeter.png" })
            );
        }
    }]);

    return BuffBarView;
}(React.Component);

var BuffView = function (_React$Component2) {
    _inherits(BuffView, _React$Component2);

    function BuffView() {
        _classCallCheck(this, BuffView);

        return _possibleConstructorReturn(this, (BuffView.__proto__ || Object.getPrototypeOf(BuffView)).apply(this, arguments));
    }

    _createClass(BuffView, [{
        key: "renderBuffBars",
        value: function renderBuffBars() {
            return BuffManager.buffInfo.map(function (buff) {
                return React.createElement(BuffBarView, { key: buff.displayName, buffData: buff });
            });
        }
    }, {
        key: "render",
        value: function render() {
            return React.createElement(
                "div",
                { className: "buffContainer" },
                this.renderBuffBars()
            );
        }
    }]);

    return BuffView;
}(React.Component);

module.exports = BuffView;

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(89);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(4)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../../node_modules/css-loader/index.js!../../../../node_modules/less-loader/dist/cjs.js!./buffView.less", function() {
			var newContent = require("!!../../../../node_modules/css-loader/index.js!../../../../node_modules/less-loader/dist/cjs.js!./buffView.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

var escape = __webpack_require__(9);
exports = module.exports = __webpack_require__(3)(false);
// imports


// module
exports.push([module.i, "@font-face {\n  font-family: buffMeterFont;\n  src: url(" + escape(__webpack_require__(15)) + ");\n}\n.buffContainer {\n  position: absolute;\n  top: 9vw;\n  right: 4.75vw;\n  width: 8.3vw;\n  height: 4.75vw;\n  display: flex;\n  flex-direction: column;\n  opacity: 0.8;\n  z-index: -1;\n  pointer-events: none;\n}\n.buffBarContainer {\n  position: relative;\n  margin: 1%;\n  height: 50%;\n  width: 100%;\n  transition: filter 0.5s ease-in-out;\n}\n.buffBarContainerEvil {\n  filter: drop-shadow(-0.25vw -0.25vw 0.5vw rgba(255, 0, 0, 0.75)) drop-shadow(0.25vw 0.25vw 0.5vw rgba(255, 0, 0, 0.75));\n}\n.buffBarContainerBg {\n  width: 100%;\n  height: 100%;\n}\n.displayName {\n  position: absolute;\n  color: white;\n  top: calc((4.75vw / 2 - 4.75vw * 0.24) / 2.7);\n  right: 10.8%;\n  font-family: buffMeterFont;\n  font-size: calc(4.75vw * 0.24);\n  text-shadow: -0.1vw -0.1vw 0 #000, 0.1vw -0.1vw 0 #000, -0.1vw 0.1vw 0 #000, 0.1vw 0.1vw 0 #000, 0 -0.1vw 0 #000, 0.1vw 0 0 #000, -0.1vw 0 0 #000, 0 0.1vw 0 #000;\n  opacity: 0.85;\n  z-index: 1;\n}\n.voteText {\n  position: absolute;\n  color: white;\n  top: calc((4.75vw / 2 - 4.75vw * 0.195) / 2.6);\n  left: 11%;\n  height: 90%;\n  font-family: buffMeterFont;\n  font-size: calc(4.75vw * 0.195);\n  text-shadow: -0.1vw -0.1vw 0 #000, 0.1vw -0.1vw 0 #000, -0.1vw 0.1vw 0 #000, 0.1vw 0.1vw 0 #000, 0 -0.1vw 0 #000, 0.1vw 0 0 #000, -0.1vw 0 0 #000, 0 0.1vw 0 #000;\n  text-align: right;\n  opacity: 0.9;\n  z-index: 1;\n}\n.outerBar {\n  position: absolute;\n  top: 0%;\n  right: 0%;\n  height: 100%;\n  width: 50%;\n  overflow: hidden;\n  transition: width 0.7s ease-in-out;\n  animation-name: hue_rotate_buffBar_anim;\n  animation-duration: 1s;\n  animation-iteration-count: infinite;\n  animation-timing-function: ease-in-out;\n}\n@keyframes hue_rotate_buffBar_anim {\n  0% {\n    filter: brightness(100%);\n  }\n  50% {\n    filter: brightness(125%);\n  }\n  100% {\n    filter: brightness(100%);\n  }\n}\n.hueBar {\n  width: 100%;\n  height: 100%;\n  transition: filter 0.5s ease-in-out;\n}\n.outerBarBg {\n  position: absolute;\n  top: 0%;\n  right: 0%;\n  width: 8.3vw;\n  height: calc(100% - 1%);\n  animation-duration: 2s;\n  animation-iteration-count: infinite;\n  animation-timing-function: ease-in-out;\n}\n@keyframes hue_rotate_buffBarBG_anim {\n  0% {\n    filter: hue-rotate(0deg);\n  }\n  50% {\n    filter: hue-rotate(30deg) brightness(150%);\n  }\n  0% {\n    filter: hue-rotate(0deg);\n  }\n}\n", ""]);

// exports


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GameStore = __webpack_require__(0);
var TychoCommon = __webpack_require__(10);

module.exports = function () {
    function OptionsMenu() {
        _classCallCheck(this, OptionsMenu);

        // TODO: Setup tooltips for settings menu options

        this.enabled = false;
        this.reRender = true;
        this.feedbackEnabled = false;

        // resolution
        this.resolutions = [{ width: 0, height: 0 }, // Invalid
        { width: 1024, height: 576 }, { width: 1280, height: 720 }, { width: 1920, height: 1080 }, // HD
        { width: 2560, height: 1440 }, // 2k
        { width: 3840, height: 2160 // 4k
        }];

        this.mainMenuMusic = document.getElementById("mainMenuMusic");
        this.mainMenuVolumeInitial = this.mainMenuMusic.volume;

        this.fpsElement = undefined; // Stores FPS dom element once initialized in Game
        this.access = Object.assign({}, TychoCommon.constants.access);

        // Needed for resolution settings
        this.loadSettings();

        // TODO: disable stream coach
        // TODO: hide web cam hint
        // TODO: key bindings?
    }

    _createClass(OptionsMenu, [{
        key: "loadSettings",
        value: function loadSettings() {
            var _this = this;

            // store/load from localStorage
            this.storageEnabled = (typeof Storage === "undefined" ? "undefined" : _typeof(Storage)) !== undefined;

            this.tutorialEnabled = this.storageEnabled ? !(localStorage.getItem("tycho_tutorialEnabled") === "false") : true; // Option to force tutorial on or off

            this.selectedResolution = this.storageEnabled ? parseInt(localStorage.getItem("tycho_selectedResolution")) : 5;
            if (isNaN(this.selectedResolution)) {
                this.selectedResolution = 3;
            }
            setTimeout(this.setResolution.bind(this), 32); // Waiting a couple frames for GameStore to init

            this.rating = this.storageEnabled ? parseInt(localStorage.getItem("tycho_rating")) : undefined;
            if (isNaN(this.rating)) {
                this.rating = undefined;
            }

            this.showRating = this.storageEnabled ? localStorage.getItem("tycho_ratingReady") === "true" : false; // Ready to show rating window

            this.musicVolume = this.storageEnabled ? parseFloat(localStorage.getItem("tycho_musicVolume")) : 1.0; // Option to set volume
            if (isNaN(this.musicVolume)) {
                this.musicVolume = 1.0;
            }

            if (GameStore.GameInstance === undefined) {
                this.mainMenuMusic.volume = this.mainMenuVolumeInitial * this.musicVolume;
            }

            this.showFPS = this.storageEnabled ? !(localStorage.getItem("tycho_showFPS") === "false") : false; // Option to show current framerate

            this.tiltShiftEnabled = this.storageEnabled ? !(localStorage.getItem("tycho_tiltShift") === "false") : true; // Option to enable/disable tilt shift post processing
            this.bloomEnabled = this.storageEnabled ? !(localStorage.getItem("tycho_bloom") === "false") : true; // Option to enable/disable bloom
            this.ssaoEnabled = this.storageEnabled ? localStorage.getItem("tycho_ssao") === "true" : false; // Option to enable/disable ssao
            this.vignetteEnabled = this.storageEnabled ? !(localStorage.getItem("tycho_vignette") === "false") : true; // Option to enable/disable vignette

            GameStore.stateManager.getStreamerData().then(function (data) {
                _this.coinMineTimeMS = data.coinMineTimeMS;
                _this.access = data.access;
                GameStore.stateManager.evilUnlocked = data.evilUnlocked;
                _this.setDisplayMineTime();
                _this.reRender = true;
            }).catch(function (error) {
                _this.coinMineTimeMS = TychoCommon.constants.coinMineTimeMS;
                _this.access = TychoCommon.constants.access;
                GameStore.stateManager.evilUnlocked = false;
                _this.setDisplayMineTime();
                _this.reRender = true;
            });
        }
    }, {
        key: "setDisplayMineTime",
        value: function setDisplayMineTime() {
            this.displayMineTime = this.coinMineTimeMS !== undefined ? this.coinMineTimeMS / 1000 : TychoCommon.constants.coinMineTimeMS / 1000;
        }
    }, {
        key: "setResolution",
        value: function setResolution() {
            var _this2 = this;

            var resolution = this.resolutions[this.selectedResolution];

            // Call resize
            if (GameStore.screenDimensions.screenWidth !== resolution.width) {
                GameStore.screenDimensions.screenWidth = resolution.width;
                GameStore.screenDimensions.screenHeight = resolution.height;

                if (GameStore.GameInstance !== undefined) {
                    GameStore.GameInstance.screenWidth = GameStore.screenDimensions.screenWidth;
                    GameStore.GameInstance.screenHeight = GameStore.screenDimensions.screenHeight;
                    GameStore.mainMenu.doResize();

                    // Added a 1 frame delay, renderer was adjusting to previous resolution
                    setTimeout(function () {
                        GameStore.GameInstance.doResize();
                    }, 300);
                } else {
                    GameStore.mainMenu.doResize();
                }

                this.reRender = true;
                setTimeout(function () {
                    _this2.reRender = true;
                }, 500);
            }
        }
    }, {
        key: "saveSettings",
        value: function saveSettings() {
            if (this.storageEnabled) {
                localStorage.setItem("tycho_tutorialEnabled", this.tutorialEnabled);
                localStorage.setItem("tycho_selectedResolution", this.selectedResolution);
                localStorage.setItem("tycho_musicVolume", this.musicVolume);
                localStorage.setItem("tycho_showFPS", this.showFPS);
                localStorage.setItem("tycho_tiltShift", this.tiltShiftEnabled);
                localStorage.setItem("tycho_bloom", this.bloomEnabled);
                localStorage.setItem("tycho_ssao", this.ssaoEnabled);
                localStorage.setItem("tycho_vignette", this.vignetteEnabled);
            }

            GameStore.stateManager.setStreamerData({
                coinMineTimeMS: this.coinMineTimeMS,
                access: this.access,
                maxVoxelCoin: 1000000 // Just a test value till the setting ui is created
            });
        }

        // Called by clicking main menu option or by player hitting esc

    }, {
        key: "openClick",
        value: function openClick() {
            if (!this.enabled) {
                if (this.view !== undefined && !this.view.OptionsMenuCW.expanded) {
                    this.view.OptionsMenuCW.onClick();
                }

                this.loadSettings();
                this.enabled = true;
                this.reRender = true;
            }
        }

        // Called in optionsMenuView when clicking collapsable window to close

    }, {
        key: "closeClick",
        value: function closeClick() {
            if (this.enabled) {
                this.enabled = false;

                this.feedbackEnabled = false;
                this.forcedFeedback = false;
                this.view.OptionsMenuCW.canClose = true;

                this.saveSettings();
            }
        }
    }, {
        key: "feedbackClick",
        value: function feedbackClick() {
            this.feedbackEnabled = true;
            this.reRender = true;
            this.view.OptionsMenuCW.canClose = false;
        }
    }, {
        key: "starClick",
        value: function starClick(e) {
            if (this.storageEnabled) {
                localStorage.setItem("tycho_rating", e.target.value);
            }
        }
    }, {
        key: "checkReadyForRating",
        value: function checkReadyForRating() {
            // On level N display rate the game message if not rated
            if (this.rating === undefined && GameStore.GameInstance.levelManager && GameStore.GameInstance.levelManager.levelNumber === 3) {
                // If passed, then ready the forced rating for the next time we're in the main menu
                if (this.storageEnabled) {
                    localStorage.setItem("tycho_ratingReady", true);
                }
            }
        }
    }, {
        key: "checkDisplayRating",
        value: function checkDisplayRating() {
            if (this.rating === undefined && this.showRating) {
                this.forcedFeedback = true;
                this.feedbackClick();

                if (!GameStore.optionsMenu.enabled) {
                    this.openClick();
                }
            }
        }
    }, {
        key: "feedbackCloseClick",
        value: function feedbackCloseClick() {
            this.feedbackEnabled = false;
            this.reRender = true;
            this.view.OptionsMenuCW.canClose = true;

            for (var i = 1; i <= 5; ++i) {
                if (document.getElementById("star-" + i).checked) {
                    GameStore.hubbleManager.sendHubbleStarRating(i);
                }
            }

            if (this.forcedFeedback) {
                this.closeClick();
            }
        }
    }, {
        key: "fpsClick",
        value: function fpsClick() {
            this.showFPS = !this.showFPS;
            this.reRender = true;

            if (this.fpsElement !== undefined) {
                this.fpsElement.style.visibility = this.showFPS ? "visible" : "hidden";
            }
        }
    }, {
        key: "fpsDisplayRedraw",
        value: function fpsDisplayRedraw() {
            this.reRender = true;

            if (this.fpsElement !== undefined) {
                this.fpsElement.style.visibility = this.showFPS && !GameStore.mainMenu.drawCredits ? "visible" : "hidden";
            }
        }
    }, {
        key: "musicVolumeChange",
        value: function musicVolumeChange(e) {
            var newMusicVolume = e.target.validity.valid ? e.target.value : 100;
            newMusicVolume /= 100;

            this.changeMusicVolume(newMusicVolume);
        }
    }, {
        key: "changeMusicVolume",
        value: function changeMusicVolume(newVolume) {
            this.musicVolume = isNaN(newVolume) || newVolume > 1.0 ? 1.0 : newVolume;
            this.reRender = true;

            if (GameStore.GameInstance === undefined) {
                this.mainMenuMusic.volume = this.mainMenuVolumeInitial * this.musicVolume;
            } else {
                GameStore.GameInstance.SoundSystem.globalMusic.adjustMusicFromOptionsMenu();
            }
        }
    }, {
        key: "tiltShiftClick",
        value: function tiltShiftClick() {
            this.tiltShiftEnabled = !this.tiltShiftEnabled;
            this.reRender = true;

            if (GameStore.GameInstance !== undefined) {
                GameStore.GameInstance.setEnabledTiltShift(this.tiltShiftEnabled);
            }
        }
    }, {
        key: "bloomClick",
        value: function bloomClick() {
            this.bloomEnabled = !this.bloomEnabled;
            this.reRender = true;

            if (GameStore.GameInstance !== undefined) {
                GameStore.GameInstance.setEnabledBloom(this.bloomEnabled);
            }
        }
    }, {
        key: "ssaoClick",
        value: function ssaoClick() {
            this.ssaoEnabled = !this.ssaoEnabled;
            this.reRender = true;

            if (GameStore.GameInstance !== undefined) {
                GameStore.GameInstance.setEnabledSSAO(this.ssaoEnabled);
            }
        }
    }, {
        key: "vignetteClick",
        value: function vignetteClick() {
            this.vignetteEnabled = !this.vignetteEnabled;
            this.reRender = true;

            if (GameStore.GameInstance !== undefined) {
                GameStore.GameInstance.setEnabledVignette(this.vignetteEnabled);
            }
        }
    }, {
        key: "setupDarkTheme",
        value: function setupDarkTheme() {
            // Set option menu theme to dark in game
            if (this.view !== undefined && !this.view.OptionsMenuCW.useDarkTheme) {
                this.view.OptionsMenuCW.useDarkTheme = true;
            }
        }
    }, {
        key: "tutorialClick",
        value: function tutorialClick() {
            this.tutorialEnabled = !this.tutorialEnabled;
            this.reRender = true;
        }
    }, {
        key: "accessClick",
        value: function accessClick(acessLevel) {
            this.access[acessLevel] = !this.access[acessLevel];
            this.reRender = true;
        }
    }]);

    return OptionsMenu;
}();

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Nimble = __webpack_require__(6);
var ENDPOINTS = __webpack_require__(14);
var GameStore = __webpack_require__(0);
var Game = __webpack_require__(133);

var TWITCH_AUTH_URI = new Nimble.uri(ENDPOINTS["DEVELOPMENT"].TWITCH_AUTH_URI);
var EXTENSION_INSTALL_URI = new Nimble.uri(ENDPOINTS["DEVELOPMENT"].EXTENSION_INSTALL_URI);

module.exports = function () {
    function MainMenu() {
        var _this = this;

        _classCallCheck(this, MainMenu);

        this.mainMenuSong = document.getElementById("mainMenuMusic");
        this.mainMenuSong.loop = true;
        this.mainMenuSong.volume = 0.5;

        // Don't start playing until done refreshing
        this.startMainMenuSongHandle = setInterval(function () {
            if (!_this.waitingForAuthResponse) {
                clearInterval(_this.startMainMenuSongHandle);

                _this.mainMenuSong.play();
            }
        }, 500);

        this.urlParms = this.getUrlVars();
        this.hasCode = this.urlParms["code"] !== undefined;
        this.hasAuth = false;
        this.waitingForAuthResponse = true;
        this.loginFailed = false;
        this.checkAuthTimeMS = 500;
        this.autoRetryAuthOnce = true;

        this.showCloseMessage = false; // When a new locked window is created this turns on a message to close the old window
        this.fadeTimeMenu = 1500;
        this.menuOpacity = 1.0;
        this.fadeHandleMenu = undefined;
        this.lastMenu = undefined; // Used to track last time for fade
        this.showCalibrateScreen = false;
        this.showCalibrateButton = false;

        this.drawCredits = false; // Used to render credits screen

        this.easyStreamingOpacity = 0.0;
        this.fadeTime = 1500;
        this.fadeStartDelay = 4000;
        this.fadeHandle = undefined;
        this.last = undefined; // Used to track last time for fade

        this.view = undefined; // Reference to MainMenu React Component, set in mainMenuView.js

        this.takeDown = false; // Used to show the alpha is down

        this.isEdge = navigator.userAgent.search("Edge") !== -1;
        this.isChrome = navigator.userAgent.search("Chrome") !== -1 && !this.isEdge;
        this.validBrowser = this.isChrome || navigator.userAgent.search("Firefox") !== -1 || navigator.userAgent.indexOf("Safari") !== -1 && !this.isEdge || navigator.userAgent.search("Opera") !== -1;

        setTimeout(function () {
            _this.showResolutionMessage();
        }, 100);

        // bind the resize event
        this.resizeFunc = function () {
            _this.resizeFromMainMenu();
        };

        window.addEventListener("resize", this.resizeFunc);

        // The game needs one resize on load since creating a new window on Chrome
        // doesn't actually create it at the right size.
        setTimeout(function () {
            if (GameStore.mainMenu.getIsLockedWindow()) {
                _this.resizeFromMainMenu();
            }
        }, 500);

        // Check auth every second
        if (this.hasCode) {
            var authInterval = setInterval(function () {
                if (Nimble.twitch.store.accessToken === undefined) {
                    GameStore.twitchManager.authenticate().then(function (hasAuth) {
                        if (_this.waitingForAuthResponse) {

                            if (_this.hasAuth !== hasAuth) {
                                _this.hasAuth = hasAuth;
                            }

                            if (_this.hasAuth) {
                                clearInterval(authInterval);
                                _this.waitingForAuthResponse = false;

                                GameStore.optionsMenu.checkDisplayRating();
                            } else {
                                _this.loginFailed = true;

                                if (_this.autoRetryAuthOnce) {
                                    _this.autoRetryAuthOnce = false;
                                    clearInterval(authInterval);

                                    _this.reAuthClick();
                                } else {
                                    _this.waitingForAuthResponse = false;
                                }
                            }
                        } else if (!_this.loginFailed && _this.hasAuth) {
                            clearInterval(authInterval);
                        }
                    }).catch(function (error) {
                        _this.loginFailed = true;

                        Nimble.logger.error(error);
                    });
                }
            }, this.checkAuthTimeMS);
        }

        if (this.urlParms.nameDemo !== undefined) {
            setTimeout(function () {
                GameStore.demoManager.startDemo(_this.urlParms.nameDemo);
                _this.hideMenuAndStartGame();
            }, 1);
        }
    }

    _createClass(MainMenu, [{
        key: "isChromeAndNvidia",
        value: function isChromeAndNvidia() {
            if (this.isChrome) {
                var canvas = document.createElement("canvas");
                var debugInfo = void 0;

                this.gl = undefined;
                try {
                    this.gl = canvas.getContext("webgl") || canvas.getContext("experimental-webgl");
                } catch (e) {
                    return false;
                }

                if (this.gl) {
                    debugInfo = this.gl.getExtension("WEBGL_debug_renderer_info");
                    var renderer = this.gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL);
                    return renderer.search("NVIDIA") > 0;
                }
            }

            return false;
        }
    }, {
        key: "resizeFromMainMenu",
        value: function resizeFromMainMenu() {
            if (this.getIsLockedWindow() && GameStore.GameInstance === undefined) {
                this.showResolutionMessage();
                this.doResize();
            }
        }
    }, {
        key: "doResize",
        value: function doResize() {
            var scaling = window.devicePixelRatio;
            var innerWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
            innerWidth *= scaling;
            var innerHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
            innerHeight *= scaling;
            var deltaX = GameStore.screenDimensions.screenWidth - innerWidth;
            var deltaY = GameStore.screenDimensions.screenHeight - innerHeight;

            // Only adjust if more than 1 pixel difference. Some windows machines, like my own,
            // cannot always perfectly set the resolution due to resolution scaling.
            if (deltaX * deltaX > 1 || deltaY * deltaY > 1) {
                window.resizeBy(deltaX / scaling, deltaY / scaling);
            }
        }
    }, {
        key: "showResolutionMessage",
        value: function showResolutionMessage() {
            var _this2 = this;

            this.easyStreamingOpacity = GameStore.mainMenu.getIsLockedWindow() ? 1.0 : 0.0;

            // Start-up message fade if not already fading
            if (this.fadeHandle === undefined) {
                this.fadeHandle = setTimeout(function () {
                    _this2.last = new Date();
                    _this2.fadeResolutionMessage();
                }, this.fadeStartDelay);
            }
        }
    }, {
        key: "fadeResolutionMessage",
        value: function fadeResolutionMessage() {
            var _this3 = this;

            this.easyStreamingOpacity = this.easyStreamingOpacity - (new Date() - this.last) / this.fadeTime;
            this.last = new Date();

            if (this.easyStreamingOpacity > 0) {
                this.fadeHandle = setTimeout(function () {
                    _this3.fadeResolutionMessage();
                }, 16);
            } else {
                this.fadeHandle = undefined;
            }
        }
    }, {
        key: "getUrlVars",
        value: function getUrlVars() {
            var vars = {};

            var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (m, key, value) {
                vars[key] = value;
            });

            return vars;
        }
    }, {
        key: "getIsStreaming",
        value: function getIsStreaming() {
            var streamInfo = GameStore.twitchManager.cachedStreamInfo;
            return streamInfo !== undefined && streamInfo !== null;
        }
    }, {
        key: "getIsExtensionEnabled",
        value: function getIsExtensionEnabled() {
            var ret = false;
            if (GameStore.twitchManager.cachedExtensionsInfo !== undefined) {
                var overlayExt = GameStore.twitchManager.cachedExtensionsInfo.overlay[1];
                if (overlayExt.active) {
                    if (overlayExt.name === "The Collaborative: Automaton #0059") {
                        ret = true;

                        for (var componentId in GameStore.twitchManager.cachedExtensionsInfo.component) {
                            var component = GameStore.twitchManager.cachedExtensionsInfo.component[componentId];
                            if (component.active) {
                                ret = false;
                                break;
                            }
                        }
                    }
                }
            }

            return ret;
        }
    }, {
        key: "getIsLockedWindow",
        value: function getIsLockedWindow() {
            // This is to detect when started from the Tycho-Launcher
            var isStandalone = window.matchMedia("(display-mode: standalone)").matches;

            return window.toolbar.visible === false || isStandalone;
        }
    }, {
        key: "getIsStreamingGameAllowed",
        value: function getIsStreamingGameAllowed() {
            return GameStore.mainMenu.hasAuth && this.getIsStreaming() && GameStore.twitchManager.getIsExtensionInstalled();
        }
    }, {
        key: "lowLatencyClick",
        value: function lowLatencyClick(event) {
            var usernameTitle = Nimble.twitch.store.streamer.name ? Nimble.twitch.store.streamer.name : undefined;

            if (usernameTitle !== undefined) {
                window.open("https://www.twitch.tv/" + usernameTitle + "/dashboard/settings");
            } else {
                window.open("https://www.twitch.tv/dashboard/settings");
            }
        }
    }, {
        key: "openLockedAspectRatioWindowClick",
        value: function openLockedAspectRatioWindowClick(event) {
            var _this4 = this;

            event.preventDefault();
            event.stopPropagation();

            var GameStore = __webpack_require__(0);

            if (this.mainMenuSong) {
                this.mainMenuSong.pause();
            }

            this.showCloseMessage = true;

            // Fade out background & menu
            if (this.fadeHandleMenu === undefined) {
                this.fadeHandleMenu = setTimeout(function () {
                    _this4.lastMenu = new Date();
                    _this4.fadeMenu();
                }, 16);
            }

            var hostData = GameStore.hostData;

            window.open(TWITCH_AUTH_URI({
                clientId: hostData.clientId,
                address: hostData.address
            }), "The Collaborative: Automaton #0059", "location=no, titlebar=no, toolbar=no, resizable=no, scrollbars=no, menubar=no, status=no, directories=no, width=" + GameStore.screenDimensions.screenWidth + ",height=" + GameStore.screenDimensions.screenHeight + ",left=" + (window.screen.availWidth - GameStore.screenDimensions.screenWidth - 100) + ",top=100");
        }
    }, {
        key: "fadeMenu",
        value: function fadeMenu() {
            var _this5 = this;

            this.menuOpacity = this.menuOpacity - (new Date() - this.lastMenu) / this.fadeTimeMenu;
            this.lastMenu = new Date();

            if (this.menuOpacity > 0) {
                this.fadeHandleMenu = setTimeout(function () {
                    _this5.fadeMenu();
                }, 16);
            } else {
                this.fadeHandleMenu = undefined;
            }
        }
    }, {
        key: "setExtensionOnChannel",
        value: function setExtensionOnChannel(event) {
            event.preventDefault();
            event.stopPropagation();

            GameStore.twitchManager.setTychoExtensionOnChannel();
        }
    }, {
        key: "gotoExtensionInstallPage",
        value: function gotoExtensionInstallPage(event) {
            event.preventDefault();
            event.stopPropagation();

            window.open(EXTENSION_INSTALL_URI());
        }
    }, {
        key: "logoutClick",
        value: function logoutClick() {
            // Stub since this seems impossible at the moment
        }
    }, {
        key: "offlineGameClick",
        value: function offlineGameClick() {
            GameStore.gamestateManager.playingOffline = true;
            this.startNewGame();
        }
    }, {
        key: "newGameClick",
        value: function newGameClick() {
            GameStore.gamestateManager.playingOffline = false;
            this.startNewGame();
        }
    }, {
        key: "startNewGame",
        value: function startNewGame() {
            var _this6 = this;

            var hasShownCalibrateScreen = window.localStorage.getItem("hasShownCalibrateScreen");
            if (hasShownCalibrateScreen === "true") {
                this.hideMenuAndStartGame();
            } else {
                window.localStorage.setItem("hasShownCalibrateScreen", true);

                setTimeout(function () {
                    _this6.showCalibrateButton = true;
                }, 2000);

                this.showCalibrateScreen = true;
            }
        }
    }, {
        key: "downloadClick",
        value: function downloadClick() {
            window.open(GameStore.hostData.msiUrl);
        }
    }, {
        key: "helpClick",
        value: function helpClick() {
            window.open("https://collaborativegame.com/tycho-website/index.html?faq=streamer");
        }
    }, {
        key: "creditsClick",
        value: function creditsClick() {
            this.drawCredits = true;
            GameStore.optionsMenu.fpsDisplayRedraw();
        }
    }, {
        key: "returnClick",
        value: function returnClick() {
            this.drawCredits = false;
            GameStore.optionsMenu.fpsDisplayRedraw();
        }
    }, {
        key: "calibrateContinueClick",
        value: function calibrateContinueClick() {
            this.hideMenuAndStartGame();
        }
    }, {
        key: "hideMenuAndStartGame",
        value: function hideMenuAndStartGame() {
            // Remove main menu resizer
            window.removeEventListener("resize", this.resizeFunc);

            // Disable main menu update
            this.view = undefined;
            this.easyStreamingOpacity = 0;

            // Start game!
            var GameStore = __webpack_require__(0);
            GameStore.hubbleManager.sendHubbleEvent("new_game");
            GameStore.GameInstance = new Game();
            GameStore.GameInstance.Init(1);

            if (!GameStore.demoManager.isDemoModeEnabled) {
                GameStore.stateManager.updateInteractionTime();
            }
        }
    }, {
        key: "reAuthClick",
        value: function reAuthClick() {
            var hostData = __webpack_require__(0).hostData;
            window.location.href = TWITCH_AUTH_URI({
                clientId: hostData.clientId,
                address: hostData.address
            });
        }
    }]);

    return MainMenu;
}();

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

// For representing an HTTP resource.
// https://en.wikipedia.org/wiki/URI

// URI
// Builds a URL from a URI resource path.
// @accepts [string] a fully qualified path, with `{...}` as parameters
// @returns [function] a curried function, that injects parameters over the `{...}`

// @example (using the PokeAPI)
// const POKEMON = new URI("http://pokeapi.co/api/v2/pokemon/{name}")
// let url = POKEMON({"name": "bulbasaur"})
// window.fetch(url)

module.exports = function URI(URL) {
    return function (parameters) {
        var queryParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

        var url = URL;
        for (var key in parameters) {
            url = url.replace("{" + key + "}", parameters[key]);
        }
        if (queryParameters !== undefined) {
            var queryString = constructQueryString(queryParameters);
            url += "?" + queryString;
        }
        return url;
    };
};

function constructQueryString(queryParameters) {
    return Object.keys(queryParameters).map(function (key) {
        return key + "=" + queryParameters[key];
    }).join("&");
}

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Nimble = __webpack_require__(6);
var UUID = __webpack_require__(45);
var platform = __webpack_require__(46);

var EVENT_TABLE_NAME = "events";
var FEEDBACK_TABLE_NAME = "feedback";
var ARCADE_TABLE_NAME = "arcade";
var TYCHO_TABLE_NAME = "tycho";
var TYCHO_GAME_TABLE_NAME = "tycho_game";
var TYCHO_CUSTOM_TABLE_NAME = "tycho_custom";
var ERROR_TABLE_NAME = "errors";
var DRAGONS_LAIR_TABLE_NAME = "dragon";
var PICKS_TABLE_NAME = "picks";

var defaultparams = {
    authToken: "not_set",
    authSource: "not_set",
    source: "not_set",
    instance: "not_set"
};

module.exports.configure = function (parameters) {
    for (var key in parameters) {
        defaultparams[key] = parameters[key];
    }
};

module.exports.isDebugMode = false;

/* parameters:
*   source: string - the source extension the hubble call request is comming from (for purposes of SECRET lookup)
*   tableName: string - name of table to insert data into
*   data: object - json object containing key:value pairs of field names and data to insert into the designated table
*/
module.exports.submitToHubble = function (tableName, data) {
    var queryParameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;


    if (defaultparams.authToken == null || defaultparams.authToken === "not_set") {
        Nimble.logger.warn("Refusing to send a request to hubble that is missing an auth token.");
        Nimble.logger.warn("Table: " + tableName + ", Data: " + JSON.stringify(data) + ", Query Params: " + queryParameters);
        return;
    }

    if (defaultparams.endpoint === undefined) {
        Nimble.logger.warn("â ï¸ Nimble.hubble.configure has not passed the `endpoint` parameter.");
        Nimble.logger.warn("â¡ Out of backwards compatability, we're going to try and find the endpoints under config/endpoints.json");
        Nimble.logger.warn("â ï¸ But this is an anti-pattern where a library accesses top-level files. So please consider manually configuring the endpoint.");
        var ENDPOINTS = __webpack_require__(14);
        defaultparams.endpoint = ENDPOINTS["DEVELOPMENT"].HUBBLE_URI;
    }
    var HUBBLE_URI = new Nimble.uri(defaultparams.endpoint);

    window.fetch(HUBBLE_URI({ "source": defaultparams.authSource }, queryParameters), {
        "method": "POST",
        "body": JSON.stringify({
            "table_name": tableName,
            "fields": data
        }),
        "headers": {
            "Authorization": "Bearer " + defaultparams.authToken,
            "Content-Type": "application/json"
        }
    }).then(function (response) {
        return response.json();
    }).then(function (hubbleResponse) {
        if (module.exports.isDebugMode === true) {
            Nimble.logger.log("submitToHubble", hubbleResponse);
        }
    }).catch(function (error) {
        if (module.exports.isDebugMode === true) {
            Nimble.logger.error(error);
        }
    });
};

module.exports.attachEventData = function (data) {
    data["user_id"] = Nimble.twitch.store.viewer.userId;
    data["event_id"] = UUID.generate();
    data["event_source"] = defaultparams.source;
    data["anchor"] = Nimble.twitch.store.extension.mount;
    data["instance"] = defaultparams.instance;
    data["version"] = "0.0.1";
    data["platform_name"] = platform.name;
    data["platform_version"] = platform.version;
    data["platform_os"] = platform.os.toString();
    data["locale"] = Nimble.twitch.store.extension.locale;
    data["broadcaster_type"] = Nimble.twitch.store.streamer.broadcasterType;
    data["subscription_tier"] = Nimble.twitch.store.viewer.subscriptionTier;
    return data;
};

//Helper function that adds basic information when making a write to events table
module.exports.submitEvent = function (data) {
    var queryParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

    data = Nimble.hubble.attachEventData(data);
    Nimble.hubble.submitToHubble(EVENT_TABLE_NAME, data, queryParameters);
};

//Helper function that adds basic information when making a write to feedback table
//Uses the uuid from the Event submit as the pk for the Feedback record.
module.exports.submitFeedback = function (eventData, feedbackData) {
    var queryParameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

    // First, submit a generic 'Picks' event
    eventData = Nimble.hubble.attachEventData(eventData);
    Nimble.hubble.submitToHubble(EVENT_TABLE_NAME, eventData, queryParameters);
    // Now submit a 'feedback' event with an ID matching the just-created event.
    feedbackData["event_id"] = eventData["event_id"];
    Nimble.hubble.submitToHubble(FEEDBACK_TABLE_NAME, feedbackData, queryParameters);
};

//Helper function that adds basic information when making a write to AFK Arcade table
//Uses the uuid from the Event submit as the pk for the Arcade record.
module.exports.submitArcadeEvent = function (eventData, arcadeData) {
    var queryParameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

    // First, submit a generic analytics event
    eventData = Nimble.hubble.attachEventData(eventData);
    Nimble.hubble.submitToHubble(EVENT_TABLE_NAME, eventData, queryParameters);
    // Now submit a 'arcade' event with an ID matching the just-created event.
    arcadeData["event_id"] = eventData["event_id"];
    Nimble.hubble.submitToHubble(ARCADE_TABLE_NAME, arcadeData, queryParameters);
};

//Helper function that adds basic information when making a write to Tycho table
//Uses the uuid from the Event submit as the pk for the Tycho record.
module.exports.submitTychoEvent = function (eventData, tychoData) {
    var queryParameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

    // First, submit a generic analytics event
    eventData = Nimble.hubble.attachEventData(eventData);
    Nimble.hubble.submitToHubble(EVENT_TABLE_NAME, eventData, queryParameters);
    // Now submit a 'tycho' event with an ID matching the just-created event.
    tychoData["event_id"] = eventData["event_id"];
    Nimble.hubble.submitToHubble(TYCHO_TABLE_NAME, tychoData, queryParameters);
};

//Helper function that writes to Tycho Game table
module.exports.submitTychoGameEvent = function (tychoData) {
    var queryParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

    // Tycho Game has its own standalone table
    tychoData.event_id = UUID.generate();

    Nimble.hubble.submitToHubble(TYCHO_GAME_TABLE_NAME, tychoData, queryParameters);
};

//Helper function that adds basic information when making a write to Tycho table
//Uses the uuid from the Event submit as the pk for the Tycho Custom record.
module.exports.submitTychoCustomEvent = function (tychoData, customData) {
    var queryParameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

    // Tycho Game has its own standalone table
    tychoData.event_id = UUID.generate();

    Nimble.hubble.submitToHubble(TYCHO_GAME_TABLE_NAME, tychoData, queryParameters);

    // Now submit a 'tycho_custom' event with an ID matching the just-created event.
    customData["event_id"] = tychoData["event_id"];
    Nimble.hubble.submitToHubble(TYCHO_CUSTOM_TABLE_NAME, customData, queryParameters);
};

//Helper function that adds basic information when making a write to Errors table
//Uses the uuid from the Event submit as the pk for the Error record.
module.exports.submitErrorEvent = function (eventData, errorData) {
    var queryParameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

    // First, submit a generic analytics event
    eventData = Nimble.hubble.attachEventData(eventData);
    Nimble.hubble.submitToHubble(EVENT_TABLE_NAME, eventData, queryParameters);
    // Now submit a 'error' event with an ID matching the just-created event.
    errorData["event_id"] = eventData["event_id"];
    Nimble.hubble.submitToHubble(ERROR_TABLE_NAME, errorData, queryParameters);
};

//Helper function that adds basic information when making a write to Dragons Lair table
//Uses the uuid from the Event submit as the pk for the Dragons Lair record.
module.exports.submitDragonEvent = function (eventData, dragonData) {
    var queryParameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

    // First, submit a generic analytics event
    eventData = Nimble.hubble.attachEventData(eventData);
    Nimble.hubble.submitToHubble(EVENT_TABLE_NAME, eventData, queryParameters);
    // Now submit a 'DragonsLair' event with an ID matching the just-created event.
    dragonData["event_id"] = eventData["event_id"];
    Nimble.hubble.submitToHubble(DRAGONS_LAIR_TABLE_NAME, dragonData, queryParameters);
};

//Helper function that adds basic information when making a write to Picks table
//Uses the uuid from the Event submit as the pk for the Picks record.
module.exports.submitPicksEvent = function (eventData, picksData) {
    var queryParameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

    // First, submit a generic analytics event
    eventData = Nimble.hubble.attachEventData(eventData);
    Nimble.hubble.submitToHubble(EVENT_TABLE_NAME, eventData, queryParameters);
    // Now submit a 'picks' event with an ID matching the just-created event.
    picksData["event_id"] = eventData["event_id"];
    Nimble.hubble.submitToHubble(PICKS_TABLE_NAME, picksData, queryParameters);
};

//sample submitToHubble call
/*
let hubbleData = {
    "event_id": UUID.generate(),
    "opq_user_id": ExtensionStore.viewer.userId,
    "event_source":"PICKS",
    "event_type":"startup",
    "event_time": Math.floor(Date.now() / 1000)
}

Nimble.hubble.submitToHubble("PICKS", "events", hubbleData)

=============================================================
submit event sample

let hubbleData = {
    "opq_user_id": ExtensionStore.viewer.userId,
    "event_source":"PICKS",
    "event_type":"startup"
}

Nimble.hubble.submitToHubble("PICKS", hubbleData)
*/

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var alphabet = __webpack_require__(25);
var build = __webpack_require__(96);
var isValid = __webpack_require__(100);

// if you are using cluster or multiple servers use this to make each instance
// has a unique value for worker
// Note: I don't know if this is automatically set when using third
// party cluster solutions such as pm2.
var clusterWorkerId = __webpack_require__(101) || 0;

/**
 * Set the seed.
 * Highly recommended if you don't want people to try to figure out your id schema.
 * exposed as shortid.seed(int)
 * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.
 */
function seed(seedValue) {
  alphabet.seed(seedValue);
  return module.exports;
}

/**
 * Set the cluster worker or machine id
 * exposed as shortid.worker(int)
 * @param workerId worker must be positive integer.  Number less than 16 is recommended.
 * returns shortid module so it can be chained.
 */
function worker(workerId) {
  clusterWorkerId = workerId;
  return module.exports;
}

/**
 *
 * sets new characters to use in the alphabet
 * returns the shuffled alphabet
 */
function characters(newCharacters) {
  if (newCharacters !== undefined) {
    alphabet.characters(newCharacters);
  }

  return alphabet.shuffled();
}

/**
 * Generate unique id
 * Returns string id
 */
function generate() {
  return build(clusterWorkerId);
}

// Export all other functions as properties of the generate function
module.exports = generate;
module.exports.generate = generate;
module.exports.seed = seed;
module.exports.worker = worker;
module.exports.characters = characters;
module.exports.isValid = isValid;

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Found this seed-based random generator somewhere
// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)

var seed = 1;

/**
 * return a random number based on a seed
 * @param seed
 * @returns {number}
 */
function getNextValue() {
    seed = (seed * 9301 + 49297) % 233280;
    return seed / 233280.0;
}

function setSeed(_seed_) {
    seed = _seed_;
}

module.exports = {
    nextValue: getNextValue,
    seed: setSeed
};

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var generate = __webpack_require__(97);
var alphabet = __webpack_require__(25);

// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.
// This number should be updated every year or so to keep the generated id short.
// To regenerate `new Date() - 0` and bump the version. Always bump the version!
var REDUCE_TIME = 1459707606518;

// don't change unless we change the algos or REDUCE_TIME
// must be an integer and less than 16
var version = 6;

// Counter is used when shortid is called multiple times in one second.
var counter;

// Remember the last time shortid was called in case counter is needed.
var previousSeconds;

/**
 * Generate unique id
 * Returns string id
 */
function build(clusterWorkerId) {
    var str = '';

    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);

    if (seconds === previousSeconds) {
        counter++;
    } else {
        counter = 0;
        previousSeconds = seconds;
    }

    str = str + generate(version);
    str = str + generate(clusterWorkerId);
    if (counter > 0) {
        str = str + generate(counter);
    }
    str = str + generate(seconds);
    return str;
}

module.exports = build;

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var alphabet = __webpack_require__(25);
var random = __webpack_require__(98);
var format = __webpack_require__(99);

function generate(number) {
    var loopCounter = 0;
    var done;

    var str = '';

    while (!done) {
        str = str + format(random, alphabet.get(), 1);
        done = number < Math.pow(16, loopCounter + 1);
        loopCounter++;
    }
    return str;
}

module.exports = generate;

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var crypto = (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto

var randomByte;

if (!crypto || !crypto.getRandomValues) {
    randomByte = function randomByte(size) {
        var bytes = [];
        for (var i = 0; i < size; i++) {
            bytes.push(Math.floor(Math.random() * 256));
        }
        return bytes;
    };
} else {
    randomByte = function randomByte(size) {
        return crypto.getRandomValues(new Uint8Array(size));
    };
}

module.exports = randomByte;

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Secure random string generator with custom alphabet.
 *
 * Alphabet must contain 256 symbols or less. Otherwise, the generator
 * will not be secure.
 *
 * @param {generator} random The random bytes generator.
 * @param {string} alphabet Symbols to be used in new random string.
 * @param {size} size The number of symbols in new random string.
 *
 * @return {string} Random string.
 *
 * @example
 * const format = require('nanoid/format')
 *
 * function random (size) {
 *   const result = []
 *   for (let i = 0; i < size; i++) {
 *     result.push(randomByte())
 *   }
 *   return result
 * }
 *
 * format(random, "abcdef", 5) //=> "fbaef"
 *
 * @name format
 * @function
 */
module.exports = function (random, alphabet, size) {
  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;
  var step = Math.ceil(1.6 * mask * size / alphabet.length);

  var id = '';
  while (true) {
    var bytes = random(step);
    for (var i = 0; i < step; i++) {
      var byte = bytes[i] & mask;
      if (alphabet[byte]) {
        id += alphabet[byte];
        if (id.length === size) return id;
      }
    }
  }
};

/**
 * @callback generator
 * @param {number} bytes The number of bytes to generate.
 * @return {number[]} Random bytes.
 */

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var alphabet = __webpack_require__(25);

function isShortId(id) {
    if (!id || typeof id !== 'string' || id.length < 6) {
        return false;
    }

    var nonAlphabetic = new RegExp('[^' + alphabet.get().replace(/[|\\{}()[\]^$+*?.-]/g, '\\$&') + ']');
    return !nonAlphabetic.test(id);
}

module.exports = isShortId;

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = 0;

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function () {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function get() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function get() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

var Nimble = __webpack_require__(6);

var bits = module.exports = {
    onTransactionCompleteListeners: {},
    onTransactionCancelledListeners: []

    // Nimble.bits.registerListener
    // Register a listener for a specific bits SKU.
    // Replaces the listener if it already exists.
    // @param: <String> productId
    // @param: <function> listener
};bits.registerListener = function (productId, listener) {
    if (productId === undefined || listener === undefined) {
        throw new Error("UNDEFINED_PARAMETER");
    }
    bits.onTransactionCompleteListeners[productId] = listener;
};

// Nimble.bits.registerCancelListener
// Register a listener called when ANY bits transaction is cancelled.
// TODO When Twitch updates the API to give us product IDs onCancel, update this to match pattern in registerListener
bits.registerCancelListener = function (listener) {
    bits.onTransactionCancelledListeners.push(listener);
};

// Nimble.bits.useBits
// @param: <String> productId
bits.useBits = function (productId) {
    Twitch.ext.bits.useBits(productId);
};

// Nimble.bits.showBalance
bits.showBitsBalance = function () {
    Twitch.ext.bits.showBitsBalance();
};

// Nimble.bits.getProducts
bits.getProducts = function () {
    return Twitch.ext.bits.getProducts();
};

if (window.Twitch !== undefined && window.Twitch.ext !== undefined && window.Twitch.ext.bits !== undefined && window.Twitch.ext.bits.onTransactionComplete !== undefined && window.Twitch.ext.bits.onTransactionCancelled !== undefined) {

    window.Twitch.ext.bits.onTransactionComplete(function (transactionObject) {
        var productId = transactionObject.product.sku;
        if (bits.onTransactionCompleteListeners[productId] !== undefined) {
            bits.onTransactionCompleteListeners[productId](transactionObject);
        } else {
            Nimble.logger.error("Received onTransactionComplete for an unregistered bits product.");
        }
    });

    window.Twitch.ext.bits.onTransactionCancelled(function () {
        bits.onTransactionCancelledListeners.forEach(function (callback) {
            callback();
        });
    });
}

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var strictUriEncode = __webpack_require__(105);
var decodeComponent = __webpack_require__(106);
var splitOnFirst = __webpack_require__(107);

function encoderForArrayFormat(options) {
	switch (options.arrayFormat) {
		case 'index':
			return function (key) {
				return function (result, value) {
					var index = result.length;
					if (value === undefined) {
						return result;
					}

					if (value === null) {
						return [].concat(_toConsumableArray(result), [[encode(key, options), '[', index, ']'].join('')]);
					}

					return [].concat(_toConsumableArray(result), [[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')]);
				};
			};

		case 'bracket':
			return function (key) {
				return function (result, value) {
					if (value === undefined) {
						return result;
					}

					if (value === null) {
						return [].concat(_toConsumableArray(result), [[encode(key, options), '[]'].join('')]);
					}

					return [].concat(_toConsumableArray(result), [[encode(key, options), '[]=', encode(value, options)].join('')]);
				};
			};

		case 'comma':
			return function (key) {
				return function (result, value, index) {
					if (value === null || value === undefined || value.length === 0) {
						return result;
					}

					if (index === 0) {
						return [[encode(key, options), '=', encode(value, options)].join('')];
					}

					return [[result, encode(value, options)].join(',')];
				};
			};

		default:
			return function (key) {
				return function (result, value) {
					if (value === undefined) {
						return result;
					}

					if (value === null) {
						return [].concat(_toConsumableArray(result), [encode(key, options)]);
					}

					return [].concat(_toConsumableArray(result), [[encode(key, options), '=', encode(value, options)].join('')]);
				};
			};
	}
}

function parserForArrayFormat(options) {
	var result = void 0;

	switch (options.arrayFormat) {
		case 'index':
			return function (key, value, accumulator) {
				result = /\[(\d*)\]$/.exec(key);

				key = key.replace(/\[\d*\]$/, '');

				if (!result) {
					accumulator[key] = value;
					return;
				}

				if (accumulator[key] === undefined) {
					accumulator[key] = {};
				}

				accumulator[key][result[1]] = value;
			};

		case 'bracket':
			return function (key, value, accumulator) {
				result = /(\[\])$/.exec(key);
				key = key.replace(/\[\]$/, '');

				if (!result) {
					accumulator[key] = value;
					return;
				}

				if (accumulator[key] === undefined) {
					accumulator[key] = [value];
					return;
				}

				accumulator[key] = [].concat(accumulator[key], value);
			};

		case 'comma':
			return function (key, value, accumulator) {
				var isArray = typeof value === 'string' && value.split('').indexOf(',') > -1;
				var newValue = isArray ? value.split(',') : value;
				accumulator[key] = newValue;
			};

		default:
			return function (key, value, accumulator) {
				if (accumulator[key] === undefined) {
					accumulator[key] = value;
					return;
				}

				accumulator[key] = [].concat(accumulator[key], value);
			};
	}
}

function encode(value, options) {
	if (options.encode) {
		return options.strict ? strictUriEncode(value) : encodeURIComponent(value);
	}

	return value;
}

function decode(value, options) {
	if (options.decode) {
		return decodeComponent(value);
	}

	return value;
}

function keysSorter(input) {
	if (Array.isArray(input)) {
		return input.sort();
	}

	if ((typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object') {
		return keysSorter(Object.keys(input)).sort(function (a, b) {
			return Number(a) - Number(b);
		}).map(function (key) {
			return input[key];
		});
	}

	return input;
}

function removeHash(input) {
	var hashStart = input.indexOf('#');
	if (hashStart !== -1) {
		input = input.slice(0, hashStart);
	}

	return input;
}

function extract(input) {
	input = removeHash(input);
	var queryStart = input.indexOf('?');
	if (queryStart === -1) {
		return '';
	}

	return input.slice(queryStart + 1);
}

function parse(input, options) {
	options = Object.assign({
		decode: true,
		arrayFormat: 'none'
	}, options);

	var formatter = parserForArrayFormat(options);

	// Create an object with no prototype
	var ret = Object.create(null);

	if (typeof input !== 'string') {
		return ret;
	}

	input = input.trim().replace(/^[?#&]/, '');

	if (!input) {
		return ret;
	}

	var _iteratorNormalCompletion = true;
	var _didIteratorError = false;
	var _iteratorError = undefined;

	try {
		for (var _iterator = input.split('&')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
			var param = _step.value;

			var _splitOnFirst = splitOnFirst(param.replace(/\+/g, ' '), '='),
			    _splitOnFirst2 = _slicedToArray(_splitOnFirst, 2),
			    key = _splitOnFirst2[0],
			    value = _splitOnFirst2[1];

			// Missing `=` should be `null`:
			// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters


			value = value === undefined ? null : decode(value, options);

			formatter(decode(key, options), value, ret);
		}
	} catch (err) {
		_didIteratorError = true;
		_iteratorError = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion && _iterator.return) {
				_iterator.return();
			}
		} finally {
			if (_didIteratorError) {
				throw _iteratorError;
			}
		}
	}

	return Object.keys(ret).sort().reduce(function (result, key) {
		var value = ret[key];
		if (Boolean(value) && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && !Array.isArray(value)) {
			// Sort object keys, not values
			result[key] = keysSorter(value);
		} else {
			result[key] = value;
		}

		return result;
	}, Object.create(null));
}

exports.extract = extract;
exports.parse = parse;

exports.stringify = function (object, options) {
	if (!object) {
		return '';
	}

	options = Object.assign({
		encode: true,
		strict: true,
		arrayFormat: 'none'
	}, options);

	var formatter = encoderForArrayFormat(options);
	var keys = Object.keys(object);

	if (options.sort !== false) {
		keys.sort(options.sort);
	}

	return keys.map(function (key) {
		var value = object[key];

		if (value === undefined) {
			return '';
		}

		if (value === null) {
			return encode(key, options);
		}

		if (Array.isArray(value)) {
			return value.reduce(formatter(key), []).join('&');
		}

		return encode(key, options) + '=' + encode(value, options);
	}).filter(function (x) {
		return x.length > 0;
	}).join('&');
};

exports.parseUrl = function (input, options) {
	return {
		url: removeHash(input).split('?')[0] || '',
		query: parse(extract(input), options)
	};
};

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (str) {
  return encodeURIComponent(str).replace(/[!'()*]/g, function (x) {
    return '%' + x.charCodeAt(0).toString(16).toUpperCase();
  });
};

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var token = '%[a-f0-9]{2}';
var singleMatcher = new RegExp(token, 'gi');
var multiMatcher = new RegExp('(' + token + ')+', 'gi');

function decodeComponents(components, split) {
	try {
		// Try to decode the entire string first
		return decodeURIComponent(components.join(''));
	} catch (err) {
		// Do nothing
	}

	if (components.length === 1) {
		return components;
	}

	split = split || 1;

	// Split the array in 2 parts
	var left = components.slice(0, split);
	var right = components.slice(split);

	return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
}

function decode(input) {
	try {
		return decodeURIComponent(input);
	} catch (err) {
		var tokens = input.match(singleMatcher);

		for (var i = 1; i < tokens.length; i++) {
			input = decodeComponents(tokens, i).join('');

			tokens = input.match(singleMatcher);
		}

		return input;
	}
}

function customDecodeURIComponent(input) {
	// Keep track of all the replacements and prefill the map with the `BOM`
	var replaceMap = {
		'%FE%FF': '\uFFFD\uFFFD',
		'%FF%FE': '\uFFFD\uFFFD'
	};

	var match = multiMatcher.exec(input);
	while (match) {
		try {
			// Decode as big chunks as possible
			replaceMap[match[0]] = decodeURIComponent(match[0]);
		} catch (err) {
			var result = decode(match[0]);

			if (result !== match[0]) {
				replaceMap[match[0]] = result;
			}
		}

		match = multiMatcher.exec(input);
	}

	// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else
	replaceMap['%C2'] = '\uFFFD';

	var entries = Object.keys(replaceMap);

	for (var i = 0; i < entries.length; i++) {
		// Replace all decoded components
		var key = entries[i];
		input = input.replace(new RegExp(key, 'g'), replaceMap[key]);
	}

	return input;
}

module.exports = function (encodedURI) {
	if (typeof encodedURI !== 'string') {
		throw new TypeError('Expected `encodedURI` to be of type `string`, got `' + (typeof encodedURI === 'undefined' ? 'undefined' : _typeof(encodedURI)) + '`');
	}

	try {
		encodedURI = encodedURI.replace(/\+/g, ' ');

		// Try the built in decoder first
		return decodeURIComponent(encodedURI);
	} catch (err) {
		// Fallback to a more advanced decoder
		return customDecodeURIComponent(encodedURI);
	}
};

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (string, separator) {
	if (!(typeof string === 'string' && typeof separator === 'string')) {
		throw new TypeError('Expected the arguments to be of type `string`');
	}

	if (separator === '') {
		return [string];
	}

	var separatorIndex = string.indexOf(separator);

	if (separatorIndex === -1) {
		return [string];
	}

	return [string.slice(0, separatorIndex), string.slice(separatorIndex + separator.length)];
};

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

var Nimble = __webpack_require__(6);
var GameSparks = __webpack_require__(109);

var GAMESPARKS_API_KEY = "A354942pqu2s";
var GAMESPARKS_URI = __webpack_require__(16).GAMESPARKS_NONCE_URI;

var TwitchSparks = module.exports = {
    "isInitialized": false,
    "leaderboards": {}
};

TwitchSparks.initializeStandalone = function (endpoint, username, name, authOverride) {
    GAMESPARKS_URI = endpoint;
    this.username = username;
    this.name = name;
    this.authOverride = authOverride;

    return TwitchSparks.initialize();
};

TwitchSparks.initialize = function () {
    if (TwitchSparks.isInitialized === true) {
        return Promise.resolve();
    }

    return TwitchSparks.init().then(function () {
        return TwitchSparks.authenticate();
    }).then(function () {
        TwitchSparks.isInitialized = true;
    });
};

TwitchSparks.init = function () {
    return new Promise(function (resolve, reject) {
        var init =  true ? "initPreview" : "initLive";
        GameSparks[init]({
            "key": GAMESPARKS_API_KEY,
            "onNonce": function onNonce(nonce) {
                return TwitchSparks.retrieveEncryptedNonce(nonce);
            },
            "onInit": function onInit(response) {
                return resolve(response);
            },
            "onError": function onError(response) {
                return reject(response);
            },
            "onMessage": function onMessage(message) {
                return TwitchSparks.onMessageCallback(message);
            }
        });
    });
};

TwitchSparks.retrieveEncryptedNonce = function (nonce) {
    var _this = this;

    if (this.nonce !== undefined) {
        return Promise.resolve(this.nonce);
    } else {
        return window.fetch(GAMESPARKS_URI({ "nonce": nonce }) + ("?extension=" + Nimble.extension.instance), {
            "headers": {
                "Authorization": this.authOverride || Nimble.twitch.store.token,
                "Content-Type": "application/json"
            }
        }).then(function (response) {
            return response.json().then(function (response) {
                _this.password = response.userPassword || response.password;
                _this.nonce = response.hmac || response.nonce;
                return _this.nonce;
            });
        });
    }
};

// Logs in the given user, and if this
// is their first time, make an account
// for them. If this isn't their first time,
// make sure their user details are up to date.
// Returns a promise.
TwitchSparks.authenticate = function () {
    var _this2 = this;

    return new Promise(function (resolve, reject) {
        _this2.username = _this2.username || Nimble.twitch.store.viewer.opaqueUserId;
        _this2.name = _this2.name || Nimble.twitch.store.viewer.name || "@" + Nimble.twitch.store.viewer.opaqueUserId;
        GameSparks.authenticationRequest(_this2.password, _this2.username, function (response) {
            if (response.error !== undefined) {
                // Login failed because the user isn't registered? Register them.
                if (response.error["DETAILS"] === "UNRECOGNISED") {
                    GameSparks.registrationRequest(_this2.name, _this2.password, _this2.username, function (response) {
                        resolve(response);
                    });
                } else {
                    reject(response.error);
                }
            } else {
                if (Nimble.twitch.store.viewer.name !== response.displayName) {
                    GameSparks.changeUserDetailsRequest(_this2.name, function (response) {
                        resolve(response);
                    });
                } else {
                    resolve(response);
                }
            }
        });
    });
};

TwitchSparks.onMessageCallbacks = [];
TwitchSparks.onMessage = function (callback) {
    TwitchSparks.onMessageCallbacks.push(callback);
};

TwitchSparks.onMessageCallback = function (message) {
    TwitchSparks.onMessageCallbacks.forEach(function (callback) {
        callback(message);
    });

    if (message["@class"] === ".NewHighScoreMessage" || message["@class"] === ".GlobalRankChangedMessage") {
        for (var leaderboardKey in TwitchSparks.leaderboardCodes) {
            if (message.leaderboardShortCode === TwitchSparks.leaderboardCodes[leaderboardKey]) {
                TwitchSparks.retrieveLeaderboardEntries(leaderboardKey, TwitchSparks.leaderboardCodes[leaderboardKey]);
            }
        }
    }
};

TwitchSparks.submitLeaderboardEntry = function (entry) {
    return new Promise(function (resolve, reject) {
        GameSparks.logLeaderboardEventRequest({
            "eventKey": "ActivityEvent",
            "channelId": Nimble.twitch.store.streamer.channelId,
            "sessionId": entry.sessionId || "temp",
            "score": entry.score || 0,
            "activity": entry.activity
        }, function (response) {
            if (response.error === undefined) {
                resolve(response);
            } else {
                reject(response);
            }
        });
    });
};

var LEADERBOARD_AROUND_ME_ENTRIES_COUNT = 2;
var LEADERBOARD_TOP_ENTRIES_COUNT = 9;

TwitchSparks.leaderboardCodes = {};
TwitchSparks.listenToLeaderboard = function (leaderboardKey, leaderboardCode) {
    TwitchSparks.leaderboardCodes[leaderboardKey] = leaderboardCode;
    TwitchSparks.retrieveLeaderboardEntries(leaderboardKey, leaderboardCode);
};

TwitchSparks.retrieveLeaderboardEntries = function (leaderboardKey, leaderboardCode) {
    return GameSparks.aroundMeLeaderboardRequest({
        "leaderboardShortCode": leaderboardCode,
        "count": LEADERBOARD_AROUND_ME_ENTRIES_COUNT,
        "includeFirst": LEADERBOARD_TOP_ENTRIES_COUNT
    }).then(function (response) {
        return {
            "top": response.first.map(toEntry),
            "around": response.data.map(toEntry)
        };
    }).catch(function (response) {
        if (response.error !== undefined) {
            // If the leaderboard is brand new, the servers will
            // return "INVALID", which we want to handle as if it
            // was an empty leaderboard.
            // https://api.gamesparks.net/#aroundmeleaderboardrequest
            if (response.error.leaderboardShortCode === "INVALID") {
                return {
                    "top": [],
                    "around": []
                };
            }

            // If the user hasn't yet submitted a score for us to
            // find scores around, the servers will return "NO_ENTRY",
            // which we want to handle with a fallback to just the
            // top scores.
            // https://api.gamesparks.net/#aroundmeleaderboardrequest
            if (response.error.leaderboardShortCode === "NO_ENTRY" || response.error.authentication === "NOTAUTHORIZED") {
                return TwitchSparks.retrieveTopLeaderboardEntries(leaderboardCode).then(function (top) {
                    return {
                        "top": top,
                        "around": []
                    };
                });
            }
        }
    }).then(function (entries) {
        Nimble.twitchsparks.leaderboards[leaderboardKey + "/" + "around"] = entries.around || [];
        Nimble.twitchsparks.leaderboards[leaderboardKey + "/" + "around-me"] = entries.around || [];
        Nimble.twitchsparks.leaderboards[leaderboardKey + "/" + "top"] = entries.top || [];

        Nimble.twitchsparks.leaderboards[leaderboardKey + "/" + "me"] = entries.around.find(function (entry) {
            return entry.name === "@" + Nimble.twitch.store.viewer.opaqueUserId || entry.name === Nimble.twitch.store.viewer.name;
        });
    });
};

TwitchSparks.retrieveTopLeaderboardEntries = function (leaderboardCode, offset) {
    return new Promise(function (resolve, reject) {
        GameSparks.leaderboardDataRequestCustom(LEADERBOARD_TOP_ENTRIES_COUNT, leaderboardCode, offset, function (response) {
            if (response.error === undefined) {
                resolve(response.data.map(toEntry));
            } else {
                reject(response);
            }
        });
    });
};

function toEntry(entry) {
    return {
        "rank": entry.rank,
        "name": entry.userName,
        "activity": entry.activity,
        "channelId": entry.channelId,
        "gamesparksUserId": entry.userId,
        "score": entry["score"] || entry["MAX-score"]
    };
}

// This method will return LEADERBOARDSHORTCODE = INVALID if no scores have been submitted yet.
// Might return NO_ENTRY if there isn't anything around this user!!

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Downloaded from their bitbucket, and forked with some changes.
// They say they'll be releasing an entirely new JS SDK soon.
// But until then, we'll just keep using this super outdated version.

// Changes made:
// - Made it work with Webpack
// - Added some custom SDK calls
// - Refactored calls to `window.gamesparks` to `this`
// - Extended `handshake` to support promised `onNonce`

var WebSocket = window.WebSocket;

var GameSparks = function GameSparks() {};

GameSparks.prototype = {

    init: function init(options) {
        this.options = options;
        this.socketUrl = options.url;

        this.pendingRequests = {};
        this.requestCounter = 0;

        this.connect();
    },

    buildServiceUrl: function buildServiceUrl(live, options) {
        var stage;
        var urlAddition = options.key;
        var credential;
        var index;

        if (live) {
            stage = "live";
        } else {
            stage = "preview";
        }

        if (!options.credential || options.credential.length === 0) {
            credential = "device";
        } else {
            credential = options.credential;
        }

        if (options.secret) {
            index = options.secret.indexOf(":");
            if (index > 0) {
                credential = "secure";

                urlAddition = options.secret.substr(0, index) + "/" + urlAddition;
            }
        }

        return "wss://" + stage + "-" + urlAddition + ".ws.gamesparks.net/ws/" + credential + "/" + urlAddition;
    },

    initPreview: function initPreview(options) {
        options.url = this.buildServiceUrl(false, options);
        this.init(options);
    },

    initLive: function initLive(options) {
        options.url = this.buildServiceUrl(true, options);
        this.init(options);
    },

    reset: function reset() {
        this.initialised = false;
        this.connected = false;
        this.error = false;
        this.disconnected = false;

        if (!!this.webSocket) {
            this.webSocket.onclose = null;
            this.webSocket.close();
        }
    },

    connect: function connect() {
        this.reset();

        try {
            this.webSocket = new WebSocket(this.socketUrl);
            this.webSocket.onopen = this.onWebSocketOpen.bind(this);
            this.webSocket.onclose = this.onWebSocketClose.bind(this);
            this.webSocket.onerror = this.onWebSocketError.bind(this);
            this.webSocket.onmessage = this.onWebSocketMessage.bind(this);
        } catch (e) {
            this.log(e.message);
        }
    },

    disconnect: function disconnect() {
        if (this.webSocket && this.connected) {
            this.disconnected = true;
            this.webSocket.close();
        }
    },

    onWebSocketOpen: function onWebSocketOpen(ev) {
        this.log("WebSocket onOpen");

        if (this.options.onOpen) {
            this.options.onOpen(ev);
        }

        this.connected = true;
    },

    onWebSocketClose: function onWebSocketClose(ev) {
        this.log("WebSocket onClose");

        if (this.options.onClose) {
            this.options.onClose(ev);
        }

        this.connected = false;

        // Attemp a re-connection if not in error state or deliberately disconnected.
        if (!this.error && !this.disconnected) {
            this.connect();
        }
    },

    onWebSocketError: function onWebSocketError(ev) {

        this.log("WebSocket onError: Sorry, but there is some problem with your socket or the server is down");

        if (this.options.onError) {
            this.options.onError(ev);
        }

        // Reset the socketUrl to the original.
        this.socketUrl = this.options.url;

        this.error = true;
    },

    onWebSocketMessage: function onWebSocketMessage(message) {
        this.log("WebSocket onMessage: " + message.data);

        var result;
        try {
            result = JSON.parse(message.data);
        } catch (e) {
            this.log("An error ocurred while parsing the JSON Data: " + message + "; Error: " + e);
            return;
        }

        if (this.options.onMessage) {
            this.options.onMessage(result);
        }

        // Extract any auth token.
        if (result["authToken"]) {
            this.authToken = result["authToken"];
            delete result["authToken"];
        }

        if (result["connectUrl"]) {
            // Any time a connectUrl is in the response we should update and reconnect.
            this.socketUrl = result["connectUrl"];
            this.connect();
        }

        var resultType = result["@class"];

        if (resultType === ".AuthenticatedConnectResponse") {
            this.handshake(result);
        } else if (resultType.match(/Response$/)) {
            if (result["requestId"]) {
                var requestId = result["requestId"];
                delete result["requestId"];

                if (this.pendingRequests[requestId]) {
                    this.pendingRequests[requestId](result);
                    this.pendingRequests[requestId] = null;
                }
            }
        }
    },

    handshake: function handshake(result) {
        var _this = this;

        if (result["nonce"]) {
            // if (this.options.onNonce) {
            //     hmac = this.options.onNonce(result["nonce"])
            // } else if (this.options.secret) {
            //     hmac = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA256(result["nonce"], this.options.secret))
            // }

            this.options.onNonce(result["nonce"]).then(function (hmac) {
                var toSend = {
                    "@class": ".AuthenticatedConnectRequest",
                    "hmac": hmac
                };

                if (_this.authToken) {
                    toSend.authToken = _this.authToken;
                }

                if (_this.sessionId) {
                    toSend.sessionId = _this.sessionId;
                }

                var browserData = _this.getBrowserData();
                toSend.platform = browserData.browser;
                toSend.os = browserData.operatingSystem;

                _this.webSocketSend(toSend);
            });
        } else if (result["sessionId"]) {
            this.sessionId = result["sessionId"];
            this.initialised = true;

            if (this.options.onInit) {
                this.options.onInit();
            }

            this.keepAliveInterval = window.setInterval(this.keepAlive.bind(this), 30000);
        }
    },

    keepAlive: function keepAlive() {
        if (this.initialised && this.connected) {
            this.webSocket.send(" ");
        }
    },

    send: function send(requestType, onResponse) {
        this.sendWithData(requestType, {}, onResponse);
    },

    sendWithData: function sendWithData(requestType, json, onResponse) {
        if (!this.initialised) {
            onResponse({ error: "NOT_INITIALISED" });
            return;
        }

        // Ensure requestType starts with a dot.
        if (requestType.indexOf(".") !== 0) {
            requestType = "." + requestType;
        }

        json["@class"] = requestType;

        json.requestId = new Date().getTime() + "_" + ++this.requestCounter;

        if (!!onResponse) {
            this.pendingRequests[json.requestId] = onResponse;
            // Time out handler.
            setTimeout(function () {
                if (this.pendingRequests[json.requestId]) {
                    this.pendingRequests[json.requestId]({ error: "NO_RESPONSE" });
                }
            }.bind(this), 32000);
        }

        this.webSocketSend(json);
    },

    webSocketSend: function webSocketSend(data) {

        if (this.options.onSend) {
            this.options.onSend(data);
        }

        var requestString = JSON.stringify(data);
        this.log("WebSocket send: " + requestString);
        this.webSocket.send(requestString);
    },

    getSocketUrl: function getSocketUrl() {
        return this.socketUrl;
    },

    getSessionId: function getSessionId() {
        return this.sessionId;
    },

    getAuthToken: function getAuthToken() {
        return this.authToken;
    },

    setAuthToken: function setAuthToken(authToken) {
        this.authToken = authToken;
    },

    isConnected: function isConnected() {
        return this.connected;
    },

    log: function log(message) {
        if (this.options.logger) {
            this.options.logger(message);
        }
    },

    getBrowserData: function getBrowserData() {

        var browsers = [{
            string: navigator.userAgent,
            subString: "Chrome",
            identity: "Chrome"
        }, {
            string: navigator.userAgent,
            subString: "OmniWeb",
            versionSearch: "OmniWeb/",
            identity: "OmniWeb"
        }, {
            string: navigator.vendor,
            subString: "Apple",
            identity: "Safari",
            versionSearch: "Version"
        }, {
            prop: window.opera,
            identity: "Opera",
            versionSearch: "Version"
        }, {
            string: navigator.vendor,
            subString: "iCab",
            identity: "iCab"
        }, {
            string: navigator.vendor,
            subString: "KDE",
            identity: "Konqueror"
        }, {
            string: navigator.userAgent,
            subString: "Firefox",
            identity: "Firefox"
        }, {
            string: navigator.vendor,
            subString: "Camino",
            identity: "Camino"
        }, {
            string: navigator.userAgent,
            subString: "Netscape",
            identity: "Netscape"
        }, {
            string: navigator.userAgent,
            subString: "MSIE",
            identity: "Explorer",
            versionSearch: "MSIE"
        }, {
            string: navigator.userAgent,
            subString: "Gecko",
            identity: "Mozilla",
            versionSearch: "rv"
        }, {
            string: navigator.userAgent,
            subString: "Mozilla",
            identity: "Netscape",
            versionSearch: "Mozilla"
        }];

        var operatingSystems = [{
            string: navigator.platform,
            subString: "Win",
            identity: "Windows"
        }, {
            string: navigator.platform,
            subString: "Mac",
            identity: "Mac"
        }, {
            string: navigator.userAgent,
            subString: "iPhone",
            identity: "iPhone/iPod"
        }, {
            string: navigator.platform,
            subString: "Linux",
            identity: "Linux"
        }];

        function searchForIdentity(data) {
            for (var i = 0; i < data.length; i++) {
                var string = data[i].string;
                var prop = data[i].prop;

                if (string) {
                    // Look for the sub string in the string.
                    if (string.indexOf(data[i].subString) !== -1) {
                        return data[i].identity;
                    }
                } else if (prop) {
                    return data[i].identity;
                }
            }
        }

        return {
            browser: searchForIdentity(browsers),
            operatingSystem: searchForIdentity(operatingSystems)
        };
    }
};

GameSparks.prototype.acceptChallengeRequest = function (challengeInstanceId, message, onResponse) {
    var request = {};
    request["challengeInstanceId"] = challengeInstanceId;
    request["message"] = message;
    this.sendWithData("AcceptChallengeRequest", request, onResponse);
};
GameSparks.prototype.accountDetailsRequest = function (onResponse) {
    var request = {};
    this.sendWithData("AccountDetailsRequest", request, onResponse);
};
GameSparks.prototype.analyticsRequest = function (data, end, key, start, onResponse) {
    var request = {};
    request["data"] = data;
    request["end"] = end;
    request["key"] = key;
    request["start"] = start;
    this.sendWithData("AnalyticsRequest", request, onResponse);
};
GameSparks.prototype.authenticationRequest = function (password, userName, onResponse) {
    var request = {};
    request["password"] = password;
    request["userName"] = userName;
    this.sendWithData("AuthenticationRequest", request, onResponse);
};
GameSparks.prototype.buyVirtualGoodsRequest = function (currencyType, quantity, shortCode, onResponse) {
    var request = {};
    request["currencyType"] = currencyType;
    request["quantity"] = quantity;
    request["shortCode"] = shortCode;
    this.sendWithData("BuyVirtualGoodsRequest", request, onResponse);
};
GameSparks.prototype.changeUserDetailsRequest = function (displayName, onResponse) {
    var request = {};
    request["displayName"] = displayName;
    this.sendWithData("ChangeUserDetailsRequest", request, onResponse);
};
GameSparks.prototype.chatOnChallengeRequest = function (challengeInstanceId, message, onResponse) {
    var request = {};
    request["challengeInstanceId"] = challengeInstanceId;
    request["message"] = message;
    this.sendWithData("ChatOnChallengeRequest", request, onResponse);
};
GameSparks.prototype.consumeVirtualGoodRequest = function (quantity, shortCode, onResponse) {
    var request = {};
    request["quantity"] = quantity;
    request["shortCode"] = shortCode;
    this.sendWithData("ConsumeVirtualGoodRequest", request, onResponse);
};
GameSparks.prototype.createChallengeRequest = function (accessType, challengeMessage, challengeShortCode, currency1Wager, currency2Wager, currency3Wager, currency4Wager, currency5Wager, currency6Wager, endTime, expiryTime, maxAttempts, maxPlayers, minPlayers, silent, startTime, usersToChallenge, onResponse) {
    var request = {};
    request["accessType"] = accessType;
    request["challengeMessage"] = challengeMessage;
    request["challengeShortCode"] = challengeShortCode;
    request["currency1Wager"] = currency1Wager;
    request["currency2Wager"] = currency2Wager;
    request["currency3Wager"] = currency3Wager;
    request["currency4Wager"] = currency4Wager;
    request["currency5Wager"] = currency5Wager;
    request["currency6Wager"] = currency6Wager;
    request["endTime"] = endTime;
    request["expiryTime"] = expiryTime;
    request["maxAttempts"] = maxAttempts;
    request["maxPlayers"] = maxPlayers;
    request["minPlayers"] = minPlayers;
    request["silent"] = silent;
    request["startTime"] = startTime;
    request["usersToChallenge"] = usersToChallenge;
    this.sendWithData("CreateChallengeRequest", request, onResponse);
};
GameSparks.prototype.declineChallengeRequest = function (challengeInstanceId, message, onResponse) {
    var request = {};
    request["challengeInstanceId"] = challengeInstanceId;
    request["message"] = message;
    this.sendWithData("DeclineChallengeRequest", request, onResponse);
};
GameSparks.prototype.deviceAuthenticationRequest = function (deviceId, deviceModel, deviceName, deviceOS, deviceType, operatingSystem, onResponse) {
    var request = {};
    request["deviceId"] = deviceId;
    request["deviceModel"] = deviceModel;
    request["deviceName"] = deviceName;
    request["deviceOS"] = deviceOS;
    request["deviceType"] = deviceType;
    request["operatingSystem"] = operatingSystem;
    this.sendWithData("DeviceAuthenticationRequest", request, onResponse);
};
GameSparks.prototype.dismissMessageRequest = function (messageId, onResponse) {
    var request = {};
    request["messageId"] = messageId;
    this.sendWithData("DismissMessageRequest", request, onResponse);
};
GameSparks.prototype.endSessionRequest = function (onResponse) {
    var request = {};
    this.sendWithData("EndSessionRequest", request, onResponse);
};
GameSparks.prototype.facebookConnectRequest = function (accessToken, code, onResponse) {
    var request = {};
    request["accessToken"] = accessToken;
    request["code"] = code;
    this.sendWithData("FacebookConnectRequest", request, onResponse);
};
GameSparks.prototype.findChallengeRequest = function (accessType, count, offset, onResponse) {
    var request = {};
    request["accessType"] = accessType;
    request["count"] = count;
    request["offset"] = offset;
    this.sendWithData("FindChallengeRequest", request, onResponse);
};
GameSparks.prototype.getChallengeRequest = function (challengeInstanceId, message, onResponse) {
    var request = {};
    request["challengeInstanceId"] = challengeInstanceId;
    request["message"] = message;
    this.sendWithData("GetChallengeRequest", request, onResponse);
};
GameSparks.prototype.getDownloadableRequest = function (shortCode, onResponse) {
    var request = {};
    request["shortCode"] = shortCode;
    this.sendWithData("GetDownloadableRequest", request, onResponse);
};
GameSparks.prototype.getMessageRequest = function (messageId, onResponse) {
    var request = {};
    request["messageId"] = messageId;
    this.sendWithData("GetMessageRequest", request, onResponse);
};
GameSparks.prototype.getRunningTotalsRequest = function (friendIds, shortCode, onResponse) {
    var request = {};
    request["friendIds"] = friendIds;
    request["shortCode"] = shortCode;
    this.sendWithData("GetRunningTotalsRequest", request, onResponse);
};
GameSparks.prototype.getUploadUrlRequest = function (uploadData, onResponse) {
    var request = {};
    request["uploadData"] = uploadData;
    this.sendWithData("GetUploadUrlRequest", request, onResponse);
};
GameSparks.prototype.getUploadedRequest = function (uploadId, onResponse) {
    var request = {};
    request["uploadId"] = uploadId;
    this.sendWithData("GetUploadedRequest", request, onResponse);
};
GameSparks.prototype.googlePlayBuyGoodsRequest = function (currencyCode, signature, signedData, subUnitPrice, onResponse) {
    var request = {};
    request["currencyCode"] = currencyCode;
    request["signature"] = signature;
    request["signedData"] = signedData;
    request["subUnitPrice"] = subUnitPrice;
    this.sendWithData("GooglePlayBuyGoodsRequest", request, onResponse);
};
GameSparks.prototype.iOSBuyGoodsRequest = function (currencyCode, receipt, sandbox, subUnitPrice, onResponse) {
    var request = {};
    request["currencyCode"] = currencyCode;
    request["receipt"] = receipt;
    request["sandbox"] = sandbox;
    request["subUnitPrice"] = subUnitPrice;
    this.sendWithData("IOSBuyGoodsRequest", request, onResponse);
};
GameSparks.prototype.joinChallengeRequest = function (challengeInstanceId, message, onResponse) {
    var request = {};
    request["challengeInstanceId"] = challengeInstanceId;
    request["message"] = message;
    this.sendWithData("JoinChallengeRequest", request, onResponse);
};
GameSparks.prototype.leaderboardDataRequest = function (challengeInstanceId, entryCount, friendIds, leaderboardShortCode, offset, social, onResponse) {
    var request = {};
    request["challengeInstanceId"] = challengeInstanceId;
    request["entryCount"] = entryCount;
    request["friendIds"] = friendIds;
    request["leaderboardShortCode"] = leaderboardShortCode;
    request["offset"] = offset;
    request["social"] = social;
    this.sendWithData("LeaderboardDataRequest", request, onResponse);
};
GameSparks.prototype.aroundMeLeaderboardRequest = function (request, onResponse) {
    var _this2 = this;

    return new Promise(function (resolve, reject) {
        _this2.sendWithData("AroundMeLeaderboardRequest", request, function (response) {
            if (response.error === undefined) {
                resolve(response);
            } else {
                reject(response);
            }
        });
    });
};
GameSparks.prototype.leaderboardDataRequestCustom = function (entryCount, leaderboardShortCode, offset, onResponse) {
    var request = {};
    request["entryCount"] = entryCount;
    request["leaderboardShortCode"] = leaderboardShortCode;
    request["offset"] = offset;
    this.sendWithData("LeaderboardDataRequest", request, onResponse);
};
GameSparks.prototype.listAchievementsRequest = function (onResponse) {
    var request = {};
    this.sendWithData("ListAchievementsRequest", request, onResponse);
};
GameSparks.prototype.listChallengeRequest = function (entryCount, offset, shortCode, state, onResponse) {
    var request = {};
    request["entryCount"] = entryCount;
    request["offset"] = offset;
    request["shortCode"] = shortCode;
    request["state"] = state;
    this.sendWithData("ListChallengeRequest", request, onResponse);
};
GameSparks.prototype.listChallengeTypeRequest = function (onResponse) {
    var request = {};
    this.sendWithData("ListChallengeTypeRequest", request, onResponse);
};
GameSparks.prototype.listGameFriendsRequest = function (onResponse) {
    var request = {};
    this.sendWithData("ListGameFriendsRequest", request, onResponse);
};
GameSparks.prototype.listInviteFriendsRequest = function (onResponse) {
    var request = {};
    this.sendWithData("ListInviteFriendsRequest", request, onResponse);
};
GameSparks.prototype.listLeaderboardsRequest = function (onResponse) {
    var request = {};
    this.sendWithData("ListLeaderboardsRequest", request, onResponse);
};
GameSparks.prototype.listMessageRequest = function (entryCount, offset, onResponse) {
    var request = {};
    request["entryCount"] = entryCount;
    request["offset"] = offset;
    this.sendWithData("ListMessageRequest", request, onResponse);
};
GameSparks.prototype.listMessageSummaryRequest = function (entryCount, offset, onResponse) {
    var request = {};
    request["entryCount"] = entryCount;
    request["offset"] = offset;
    this.sendWithData("ListMessageSummaryRequest", request, onResponse);
};
GameSparks.prototype.listVirtualGoodsRequest = function (onResponse) {
    var request = {};
    this.sendWithData("ListVirtualGoodsRequest", request, onResponse);
};
GameSparks.prototype.logChallengeEventRequest = function (challengeInstanceId, eventKey, onResponse) {
    var request = {};
    request["challengeInstanceId"] = challengeInstanceId;
    request["eventKey"] = eventKey;
    this.sendWithData("LogChallengeEventRequest", request, onResponse);
};
GameSparks.prototype.logLeaderboardEventRequest = function (leaderboardEvent, onResponse) {
    var request = leaderboardEvent;
    this.sendWithData("LogEventRequest", request, onResponse);
};
GameSparks.prototype.logEventRequest = function (eventKey, onResponse) {
    var request = {};
    request["eventKey"] = eventKey;
    this.sendWithData("LogEventRequest", request, onResponse);
};
GameSparks.prototype.pushRegistrationRequest = function (deviceOS, pushId, onResponse) {
    var request = {};
    request["deviceOS"] = deviceOS;
    request["pushId"] = pushId;
    this.sendWithData("PushRegistrationRequest", request, onResponse);
};
GameSparks.prototype.registrationRequest = function (displayName, password, userName, onResponse) {
    var request = {};
    request["displayName"] = displayName;
    request["password"] = password;
    request["userName"] = userName;
    this.sendWithData("RegistrationRequest", request, onResponse);
};
GameSparks.prototype.sendFriendMessageRequest = function (friendIds, message, onResponse) {
    var request = {};
    request["friendIds"] = friendIds;
    request["message"] = message;
    this.sendWithData("SendFriendMessageRequest", request, onResponse);
};
GameSparks.prototype.socialLeaderboardDataRequest = function (challengeInstanceId, entryCount, friendIds, leaderboardShortCode, offset, social, onResponse) {
    var request = {};
    request["challengeInstanceId"] = challengeInstanceId;
    request["entryCount"] = entryCount;
    request["friendIds"] = friendIds;
    request["leaderboardShortCode"] = leaderboardShortCode;
    request["offset"] = offset;
    request["social"] = social;
    this.sendWithData("SocialLeaderboardDataRequest", request, onResponse);
};
GameSparks.prototype.twitterConnectRequest = function (accessSecret, accessToken, onResponse) {
    var request = {};
    request["accessSecret"] = accessSecret;
    request["accessToken"] = accessToken;
    this.sendWithData("TwitterConnectRequest", request, onResponse);
};
GameSparks.prototype.windowsBuyGoodsRequest = function (currencyCode, receipt, subUnitPrice, onResponse) {
    var request = {};
    request["currencyCode"] = currencyCode;
    request["receipt"] = receipt;
    request["subUnitPrice"] = subUnitPrice;
    this.sendWithData("WindowsBuyGoodsRequest", request, onResponse);
};
GameSparks.prototype.withdrawChallengeRequest = function (challengeInstanceId, message, onResponse) {
    var request = {};
    request["challengeInstanceId"] = challengeInstanceId;
    request["message"] = message;
    this.sendWithData("WithdrawChallengeRequest", request, onResponse);
};

module.exports = new GameSparks();

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

// A set of utilities and stateto be shared between
// the Twitch AFK Arcade and its activities.

module.exports.store = {
    "sessionId": "temp"
};

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

// https://minixperiment.internal.justin.tv
// https://data.internal.justin.tv/experiments/experimentsetupclient.html#new-minixperimentclientconfigobject

var Nimble = __webpack_require__(6);

var Minixperiment = __webpack_require__(112);
var MinixperimentServiceProvider = __webpack_require__(118);

// I'm very unhappy that we have to declare
// our A/B tests in our shared Nimble library;
// I wish we could just call them whenever without
// any setup. But if we want to eventually integrate
// this with Hubble, we need a comprehensive manifest
// of all our experiments.
var list = {
    "AGS_HEDGEHOG_TWITCH_ARCADE_RANDOM_ORDER": "3f8094fb-2ae3-4c19-b86d-05e935d972f8"
};

var EXPERIMENTS = {};
Object.values(list).forEach(function (experiment) {
    EXPERIMENTS[experiment] = null;
});

var minixperiment = undefined;
module.exports.get = function (experimentName) {
    if (minixperiment === undefined) {
        minixperiment = new Minixperiment({
            "defaults": EXPERIMENTS,
            "channelID": Nimble.twitch.store.streamer.channelId,
            "userID": Nimble.twitch.store.viewer.userId,
            "deviceID": Nimble.twitch.store.viewer.opaqueUserId,
            "platform": "web",
            "provider": new MinixperimentServiceProvider(MinixperimentServiceProvider.SERVICE_URL),
            "Promise": Promise
        });
    }

    return minixperiment.get(list[experimentName]);
};

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var experiments = __webpack_require__(113);
var spade = __webpack_require__(115);

module.exports = MinixperimentClient;

/**
 * Create a new Minixperiment client object, from which assignments can be
 * determined.
 * @class
 *
 * @param {Object} config
 *        Configuration object for the library. Valid properties:
 *        `defaults` : an object mapping expected experiment UUIDs to their
 *                     default values, to be returned should an error occur
 *                     somewhere within the library. It is considered an error to
 *                     request an experimental treatment from an experiment
 *                     without a default value.
 *        `deviceID` : the unique ID associated with the device using this library
 *        `login`    : the username of the current user
 *        `overrides`: An object hash of experiment ID to forced assignment,
 *                      which causes the client to ignore any configuration and
 *                      simply return the overridden value. The value may be a
 *                      Promise, which is used if it resolves and is ignored if it
 *                      is rejected.
 *        `platform` : The consumer of this library (e.g. `web`, `xboxone`)
 *        `provider` : a minixperiment-defined Experiments provider
 *        `Promise`  : a Promises/A+-compliant implementation
 */
function MinixperimentClient(config) {
	var configError = validateConfig(config);
	if (configError !== null) {
		throw configError;
	}

	this._config = getExperimentsConfiguration(config);
	this._Promise = config.Promise;
	this._deviceID = config.deviceID;
	this._platform = config.platform;
	this._username = config.login || null;
	this._defaults = determineDefaults(config.Promise, config.defaults, config.overrides || {});
	this._assignments = determineAssignments(config.Promise, this._config, this._defaults, config.overrides || {}, this._deviceID);
}

/**
 * Get the treatment for a particular named experiment
 *
 * @param {String} experimentUUID
 *        The UUID of the experiment from which the client will draw a treatment
 * @param {Object} options
 *        `mustTrack` [default: false]: if true, then tracking must complete
 *            before the assignment is returned to the caller
 * @return {Promise}
 *         Resolves to the value of the treatment for the given experiment, or
 *         the provided default value in the event of an error
 */
MinixperimentClient.prototype.get = function (experimentUUID, opts) {
	var options = applyDefaults(opts || {}, {
		mustTrack: false
	});
	var assignment = this._assignments[experimentUUID] || this._Promise.reject(new Error("No experiment with ID `" + experimentUUID + "`"));

	var trackedEvent = this._Promise.all([this._config, assignment]).then(function (data) {
		var expConfig = data[0];
		var treatment = data[1];

		// only track assignments that are valid
		var trackingProperties = {
			// epoch time of the event, in seconds
			"client_time": new Date().getTime() / 1000,
			// user's unique device ID
			"device_id": this._deviceID,
			// experiment identifier
			"experiment_id": expConfig[experimentUUID].name,
			// which group the user was assigned to
			"experiment_group": treatment,
			// the platform from which this experiment was experienced
			"platform": this._platform
		};
		if (this._username !== null) {
			// the user's username, if logged in
			trackingProperties.login = this._username;
		}

		var spadePromise = new this._Promise(function (resolve, _) {
			spade.sendEvent('experiment_branch', trackingProperties, resolve);
		}).then(null, function () {
			return null;
		});

		return spadePromise;
	}.bind(this));

	return this._Promise.all([assignment, options.mustTrack ? trackedEvent : null]).then(function (data) {
		return data[0];
	}, function (err) {
		console.warn(err);
		return this._defaults[experimentUUID] || null;
	}.bind(this));
};

/**
 * Validate the Minixperiment client configuration, returning an error if there
 * are any issues, or `null` for "OK".
 *
 * @param {Object} config
 * @return {Error?}
 */
function validateConfig(config) {
	if (!config.defaults || Object.getPrototypeOf(config.defaults) !== Object.prototype) {
		return new Error("Invalid defaults; expected object, got " + JSON.stringify(config.defaults));
	} else if (typeof config.deviceID !== 'string' || config.deviceID.length === 0) {
		return new Error("Invalid device ID; expected non-empty string, got `" + config.deviceID + "`");
	} else if (typeof config.platform !== 'string' || config.platform.length === 0) {
		return new Error("Invalid platform; expected non-empty string, got `" + config.platform + "`");
	} else if (_typeof(config.provider) !== 'object' || typeof config.provider.getExperimentConfiguration !== 'function') {
		return new Error("Invalid provider");
	} else if (typeof config.Promise !== 'function') {
		return new Error("Invalid Promise implementation");
	}

	return null;
}

function getExperimentsConfiguration(config) {
	return new config.Promise(function (resolve, reject) {
		config.provider.getExperimentConfiguration(resolve, reject);
	}).then(function (experimentConfig) {
		var error = experiments.validate(experimentConfig);
		if (error) {
			throw error;
		}

		return experimentConfig;
	});
}

/**
 * Combine overrides with the defaults to generate the actual set of defaults
 * used when an issue is encountered.
 *
 * @param {*} _Promise The Promises/A+ implementation object
 * @param {Object<String, String>} defaults
 * @param {Object<String, (String|Promise<String>)>} overrides
 * @return {Object<String, Promise<String>>}
 */
function determineDefaults(_Promise, defaults, overrides) {
	var actualDefaults = {};

	for (var uuid in defaults) {
		actualDefaults[uuid] = function (expID) {
			return _Promise.resolve(overrides[uuid]).then(function (override) {
				// possibly an undefined override; ensure a valid value is given
				return typeof override === 'string' ? override : defaults[expID];
			}, function () {
				return defaults[expID];
			});
		}(uuid);
	}

	return actualDefaults;
}

/**
 * Translate the experiment configuration and client configuration into a set of
 * experiment treatment assignments. This is resolved during client instantiation,
 * which prevents any reconfiguration after the client is running.
 *
 * @param {*} _Promise The Promises/A+ implementation object
 * @param {Promise<Object<UUID, ExperimentConfig>>} experimentConfig
 * @param {Object<UUID, String>} defaults
 * @param {Object<UUID, (String|Promise<String>)>} overrides
 * @param {String} deviceID
 * @return {Object<UUID, Promise<String>>}
 */
function determineAssignments(_Promise, experimentConfig, defaults, overrides, deviceID) {
	var assignments = {};

	for (var uuid in defaults) {
		if (!defaults.hasOwnProperty(uuid)) {
			continue;
		}
		assignments[uuid] = function (expID) {
			return experimentConfig.then(function (cfg) {
				if (!cfg.hasOwnProperty(expID)) {
					throw new Error("Experiment `" + expID + "` is deprecated");
				}

				return experiments.selectTreatment(expID, cfg[expID], deviceID);
			}, function (err) {
				return defaults[expID];
			}).then(function (assignment) {
				return _Promise.resolve(overrides[expID]).then(function (override) {
					return typeof override === 'string' ? override : assignment;
				}, function () {
					return assignment;
				});
			});
		}(uuid);
	}

	return assignments;
}

/**
 * Creates a new object with the properties of the given source object, filling
 * in any missing/non-existent properties with values from the defaults object.
 *
 * @param {Object} src
 * @param {Object} defaults
 * @return {Object}
 */
function applyDefaults(src, defaults) {
	var prop;
	var rv = {};

	for (prop in src) {
		if (src.hasOwnProperty(prop)) {
			rv[prop] = src[prop];
		}
	}

	for (prop in defaults) {
		if (defaults.hasOwnProperty(prop) && !src.hasOwnProperty(prop)) {
			rv[prop] = defaults[prop];
		}
	}

	return rv;
}

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var SHA1 = __webpack_require__(114);

/**
 * Error representing invalid experiment configurations
 * @class
 * @private
 *
 * @param {String} name
 *        Name of the experiment
 * @param {*} config
 *        Invalid configuration for an experiment
 * @param {String} message
 *        Detailed message of the invalid component of the configuration
 */
function InvalidExperimentConfigurationError(name, config, message) {
	this.name = 'InvalidExperimentConfigurationError';
	this.message = "Invalid configuration for experiment \"" + name + "\": " + message;
	this.stack = new Error().stack;
}

/**
 * Verifies that the argument conforms to the experimental configuration
 * structure. Experiment configurations should contain the following structure:
 *
 * {
 *   groups: [
 *     {
 *       value: "some string",
 *       weight: 5
 *     }
 *   ]
 * }
 *
 * where groups may have any string in the `value` field, and any non-negative
 * integer weight
 * @private
 *
 * @param {String} name
 *        Name of experiment
 * @param {Object} config
 *        Configuration for experiment
 * @return {?Error}
 */
function validateExperimentalConfiguration(name, config) {
	if (!config.hasOwnProperty('groups')) {
		return new InvalidExperimentConfigurationError(name, config, "missing a `groups` property");
	}

	if (config.groups.length === 0) {
		return new InvalidExperimentConfigurationError(name, config, "`groups` has no members");
	}

	var i, groupError;

	for (i = 0; i < config.groups.length; i++) {
		if (!config.groups[i].hasOwnProperty('value')) {
			groupError = "is missing a `value` property";
		} else if (!config.groups[i].hasOwnProperty('weight')) {
			groupError = "is missing a `weight` property";
		} else if (config.groups[i].weight !== Math.floor(config.groups[i].weight)) {
			groupError = "has a non-integer weight";
		} else if (config.groups[i].weight < 0) {
			groupError = "has a negative weight";
		}

		if (groupError) {
			return new InvalidExperimentConfigurationError(name, config, "Group " + config.groups[i].value + " " + groupError);
		}
	}

	return null;
}

/**
 * Validate an experimental config; returns `null` or an error, if the provided
 * configuration is not valid.
 *
 * @param {Object<String, ExperimentalConfig>} config
 * @return {?Error}
 */
exports.validate = function (config) {
	for (var experimentUUID in config) {
		if (!config.hasOwnProperty(experimentUUID)) {
			continue;
		}
		var configError = validateExperimentalConfiguration(experimentUUID, config[experimentUUID]);
		if (configError !== null) {
			return configError;
		}
	}

	return null;
};

/**
 * Select a treatment from a specific experimental configuration
 *
 * @param {String} experimentUUID
 * @param {ExperimentalConfig} config
 * @param {String} deviceID
 * @return {String}
 */
exports.selectTreatment = function (experimentUUID, config, deviceID) {
	// per Spencer Nelson <spencer@twitch.tv>
	var rng_seed = experimentUUID + deviceID;
	var hashed_seed = SHA1(rng_seed);
	// CryptoJS gives back a hash object, with a WordArray that contains bytes.
	// The described algorithm takes the first 8 bytes and parses them as
	// hexadecimal; this is equivalent to the first word in the returned hash.
	var rand_int = hashed_seed.words[0] >>> 0;
	var rand_float = rand_int / Math.pow(2, 32);

	// TODO implement according to Spencer's suggestion, when available
	var total = config.groups.reduce(function (sum, treatment) {
		return sum + treatment.weight;
	}, 0);
	return config.groups.reduce(function (data, treatment) {
		if (data.value === null) {
			data.current -= treatment.weight / total;
			if (data.current <= 0) {
				data.value = treatment.value;
			}
		}

		return data;
	}, {
		value: null,
		current: rand_float
	}).value;
};

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory) {
	if (( false ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(19));
	} else if (true) {
		// AMD
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(19)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		// Global (browser)
		factory(root.CryptoJS);
	}
})(undefined, function (CryptoJS) {

	(function () {
		// Shortcuts
		var C = CryptoJS;
		var C_lib = C.lib;
		var WordArray = C_lib.WordArray;
		var Hasher = C_lib.Hasher;
		var C_algo = C.algo;

		// Reusable object
		var W = [];

		/**
   * SHA-1 hash algorithm.
   */
		var SHA1 = C_algo.SHA1 = Hasher.extend({
			_doReset: function _doReset() {
				this._hash = new WordArray.init([0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0]);
			},

			_doProcessBlock: function _doProcessBlock(M, offset) {
				// Shortcut
				var H = this._hash.words;

				// Working variables
				var a = H[0];
				var b = H[1];
				var c = H[2];
				var d = H[3];
				var e = H[4];

				// Computation
				for (var i = 0; i < 80; i++) {
					if (i < 16) {
						W[i] = M[offset + i] | 0;
					} else {
						var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
						W[i] = n << 1 | n >>> 31;
					}

					var t = (a << 5 | a >>> 27) + e + W[i];
					if (i < 20) {
						t += (b & c | ~b & d) + 0x5a827999;
					} else if (i < 40) {
						t += (b ^ c ^ d) + 0x6ed9eba1;
					} else if (i < 60) {
						t += (b & c | b & d | c & d) - 0x70e44324;
					} else /* if (i < 80) */{
							t += (b ^ c ^ d) - 0x359d3e2a;
						}

					e = d;
					d = c;
					c = b << 30 | b >>> 2;
					b = a;
					a = t;
				}

				// Intermediate hash value
				H[0] = H[0] + a | 0;
				H[1] = H[1] + b | 0;
				H[2] = H[2] + c | 0;
				H[3] = H[3] + d | 0;
				H[4] = H[4] + e | 0;
			},

			_doFinalize: function _doFinalize() {
				// Shortcuts
				var data = this._data;
				var dataWords = data.words;

				var nBitsTotal = this._nDataBytes * 8;
				var nBitsLeft = data.sigBytes * 8;

				// Add padding
				dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
				dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
				dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
				data.sigBytes = dataWords.length * 4;

				// Hash final blocks
				this._process();

				// Return final computed hash
				return this._hash;
			},

			clone: function clone() {
				var clone = Hasher.clone.call(this);
				clone._hash = this._hash.clone();

				return clone;
			}
		});

		/**
   * Shortcut function to the hasher's object interface.
   *
   * @param {WordArray|string} message The message to hash.
   *
   * @return {WordArray} The hash.
   *
   * @static
   *
   * @example
   *
   *     var hash = CryptoJS.SHA1('message');
   *     var hash = CryptoJS.SHA1(wordArray);
   */
		C.SHA1 = Hasher._createHelper(SHA1);

		/**
   * Shortcut function to the HMAC's object interface.
   *
   * @param {WordArray|string} message The message to hash.
   * @param {WordArray|string} key The secret key.
   *
   * @return {WordArray} The HMAC.
   *
   * @static
   *
   * @example
   *
   *     var hmac = CryptoJS.HmacSHA1(message, key);
   */
		C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
	})();

	return CryptoJS.SHA1;
});

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Base64 = __webpack_require__(116);
var Utf8 = __webpack_require__(117);
var ajax = __webpack_require__(49);

/**
 * Spade beacon URL
 * @var {String}
 */
exports.SPADE_URL = '//spade.twitch.tv/';

/**
 * Send an event to the Spade service
 *
 * @param {String} event
 * @param {Object} properties
 * @param {Function} callback
 */
exports.sendEvent = function (event, properties, callback) {
	var data = {
		event: event,
		properties: properties
	};
	var payload = Base64.stringify(Utf8.parse(JSON.stringify(data)));

	ajax.fetch(exports.SPADE_URL + '?data=' + encodeURIComponent(payload), {}, callback);
};

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory) {
	if (( false ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(19));
	} else if (true) {
		// AMD
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(19)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		// Global (browser)
		factory(root.CryptoJS);
	}
})(undefined, function (CryptoJS) {

	(function () {
		// Shortcuts
		var C = CryptoJS;
		var C_lib = C.lib;
		var WordArray = C_lib.WordArray;
		var C_enc = C.enc;

		/**
   * Base64 encoding strategy.
   */
		var Base64 = C_enc.Base64 = {
			/**
    * Converts a word array to a Base64 string.
    *
    * @param {WordArray} wordArray The word array.
    *
    * @return {string} The Base64 string.
    *
    * @static
    *
    * @example
    *
    *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
    */
			stringify: function stringify(wordArray) {
				// Shortcuts
				var words = wordArray.words;
				var sigBytes = wordArray.sigBytes;
				var map = this._map;

				// Clamp excess bits
				wordArray.clamp();

				// Convert
				var base64Chars = [];
				for (var i = 0; i < sigBytes; i += 3) {
					var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
					var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;
					var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;

					var triplet = byte1 << 16 | byte2 << 8 | byte3;

					for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
						base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));
					}
				}

				// Add padding
				var paddingChar = map.charAt(64);
				if (paddingChar) {
					while (base64Chars.length % 4) {
						base64Chars.push(paddingChar);
					}
				}

				return base64Chars.join('');
			},

			/**
    * Converts a Base64 string to a word array.
    *
    * @param {string} base64Str The Base64 string.
    *
    * @return {WordArray} The word array.
    *
    * @static
    *
    * @example
    *
    *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
    */
			parse: function parse(base64Str) {
				// Shortcuts
				var base64StrLength = base64Str.length;
				var map = this._map;

				// Ignore padding
				var paddingChar = map.charAt(64);
				if (paddingChar) {
					var paddingIndex = base64Str.indexOf(paddingChar);
					if (paddingIndex != -1) {
						base64StrLength = paddingIndex;
					}
				}

				// Convert
				var words = [];
				var nBytes = 0;
				for (var i = 0; i < base64StrLength; i++) {
					if (i % 4) {
						var bits1 = map.indexOf(base64Str.charAt(i - 1)) << i % 4 * 2;
						var bits2 = map.indexOf(base64Str.charAt(i)) >>> 6 - i % 4 * 2;
						var bitsCombined = bits1 | bits2;
						words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
						nBytes++;
					}
				}

				return WordArray.create(words, nBytes);
			},

			_map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
		};
	})();

	return CryptoJS.enc.Base64;
});

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory) {
	if (( false ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(19));
	} else if (true) {
		// AMD
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(19)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		// Global (browser)
		factory(root.CryptoJS);
	}
})(undefined, function (CryptoJS) {

	return CryptoJS.enc.Utf8;
});

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var ajax = __webpack_require__(49);

module.exports = ServiceProvider;

/**
 * Provides the experimental configuration defined by the backend service.
 * @class
 *
 * @param {String} url Location of the experiment configuration
 */
function ServiceProvider(url) {
  this._url = url;
}

/**
 * Defines the location of the Minixperiment backend where most experiments
 * actually live.
 * @const {String}
 */
ServiceProvider.SERVICE_URL = "//minixperiment.twitch.tv/experiments.json";

/**
 * Retrieves the experimental configuration from the remote service.
 *
 * @param {function(ExperimentConfig):*} success
 *        Callback function invoked when the configuration is successfully retrieved.
 * @param {function(Error):*} failure
 *        Callback function invoked when an error is encountered while trying to
 *        retrieve the experiment configuration.
 */
ServiceProvider.prototype.getExperimentConfiguration = function (success, failure) {
  ajax.fetch(this._url, {}, function (err, jsonString) {
    if (err !== null) {
      failure(err);
      return;
    }

    try {
      success(JSON.parse(jsonString));
    } catch (e) {
      failure(new Error("Invalid JSON response from server: " + jsonString));
    }
  });
};

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

var Nimble = __webpack_require__(6);

var NEXUS_AUTH_URI = __webpack_require__(16).NEXUS_AUTH_URI;

var nexus = module.exports = {
    "store": {
        "token": undefined
    }

    // Nimble.twitch.retrieveNexusToken
    // @description:
    // Retrieves and sets the Nexus Auth Token
};nexus.retrieveNexusToken = function (twitchToken, channelId) {
    return window.fetch(NEXUS_AUTH_URI({
        "channelId": channelId
    }), {
        method: "GET",
        headers: {
            "Authorization": twitchToken,
            "Content-Type": "application/json"
        }
    }).then(function (response) {
        if (response.status >= 400) {
            return response.json().then(function (body) {
                throw body;
            });
        } else {
            return response.json();
        }
    }).then(function (nexusToken) {
        nexus.store.token = nexusToken;
    }).catch(function (error) {
        Nimble.logger.error(error);
    });
};

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Nimble = __webpack_require__(6);

var ERROR_EVENT_TYPE = "error_submitted";
var MAX_CALLSTACK_STRING_LENGTH = 2000;

// Helper function to report a error message and callstack to hubble
module.exports.reportError = function (eventData, errorMessage) {
    //
    // eventData.event_type = ERROR_EVENT_TYPE
    //
    // // If the callstack is too long, send the part that has the most recent call history
    // let callstackString = new Error().stack
    // if (callstackString.length > MAX_CALLSTACK_STRING_LENGTH) {
    //     callstackString = callstackString.slice(0, MAX_CALLSTACK_STRING_LENGTH)
    // }
    //
    // let errorData = {
    //     message: errorMessage,
    //     callstack: callstackString
    // }
    //
    // add back in should we come up with a way to utilize/analize client errors
    // Nimble.hubble.submitErrorEvent(eventData, errorData)
};

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

var Nimble = __webpack_require__(6);
var Mobx = __webpack_require__(122);
var ShortID = __webpack_require__(45);

var settings = Mobx.observable({
    "volume": 1.0, // 0 - 1.0 range
    "muted": false,
    "currentlyPlayingSounds": {}
});
module.exports.settings = settings;

/**
 * Toggle the muted state on or off.
 * @returns the current state of muted.
 *
 * Example Usage:
 *  Nimble.audio.toggleMute()
 */
module.exports.toggleMute = function () {
    settings.muted = !settings.muted;
    return settings.muted;
};

/**
 * Set the default volume for sounds played by this extension.
 * @param newVolume A volume between 0 and 1 (sorry, you can't turn this one up to 11)
 * @returns number the new value for volume, or the existing one in case of an invalid input.
 *
 * Example Usage:
 *  Nimble.audio.setVolume(0.5)
 */
module.exports.setVolume = function (newVolume) {
    if (typeof newVolume != "number" || newVolume < 0 || newVolume > 1) {
        Nimble.logger.error("New volume must be a number between 0 and one.");
    }
    settings.volume = newVolume;
    return settings.volume;
};

/**
 * Play a sound from a file. Sound will play until it ends or until it is manually stopped (whichever comes first).
 * @param file A reference to the audio file to be played, e.g. the output of require('../sounds/mySound.mp3')
 * @param options Optional dictionary with playback options. Valid keys:
 *      @param options[volume] A number between 0 and 1 representing what volume this sound should be played at. Defaults to current volume setting.
 *      @param options[loop] A boolean representing whether this should play on a loop or not
 *      @param options[startDelayMS] The number of milliseconds before this sound should be played.
 * @returns string a short UUID handle to the sound being played, which can be used to stop the sound manually.
 *
 * Example usage:
 *  // Import sound file
 *  sound = require('../../sounds/mySound.mp3')
 *  Nimble.audio.playSound(sound)  // Play sound now
 *  Nimble.audio.playSound(sound, {'startDelayMS': 3000})  // Play sound in 3 seconds
 *  const soundID = Nimble.audio.playSound(sound, {'loop': true})  // Loop Sound
 *  Nimble.audio.stopSound(soundID)  // Use returned ID to stop sound.
 */
module.exports.playSound = function (file, options) {
    if (options == null) {
        options = {};
    }
    var volume = options.volume || settings.volume;
    var loop = options.loop || false;
    var startDelayMS = options.startDelay || 0;
    var sound = null;

    if (file == undefined) {
        Nimble.logger.error("Must include file reference.");
        return;
    }

    // Try to load sound
    try {
        sound = new Audio(file);
    } catch (err) {
        Nimble.logger.error("Error loading sound " + sound + ", Error: " + err);
    }

    // Set sound settings
    sound.volume = volume;
    sound.loop = loop;

    // Generate short ID so caller can stop a sound that is playing
    sound.id = ShortID.generate();

    // Play sound after delay
    setTimeout(function () {
        onPlayStart(sound);
    }, startDelayMS);
    return sound.id;
};

/**
 * Stop a sound that has already been started. Fails gracefully if sound is not still playing.
 * @param id The UUID returned from a startSound() call.
 *
 * Example usage:
 *  sound = require('../../sounds/mySound.mp3')
 *  const soundID = Nimble.audio.playSound(sound, {'loop': true})  // Loop Sound
 *  Nimble.audio.stopSound(soundID)  // Use returned ID to stop sound.
 */
module.exports.stopSound = function (id) {
    var sound = settings.currentlyPlayingSounds[id];
    if (sound == null) {
        Nimble.logger.warn("Attempted to stop a sound that is not currently playing.");
        return;
    }
    sound.pause();
    //Nimble.logger.log(`Sound ${sound.id} has been stopped manually.`)
    delete settings.currentlyPlayingSounds[this.id];
};

/**
 * Called when a sound's start delay is completed; this actually plays the sound and adds it to our currently playing sounds.
 * @param sound an Audio object generated from a `new Audio()` call, with a unique ID injected as a field.
 */
function onPlayStart(sound) {
    settings.currentlyPlayingSounds[sound.id] = sound;
    sound.muted = settings.muted;
    sound.play();
    sound.addEventListener("ended", function () {
        //Nimble.logger.log(`Sound ${sound.id} has ended automatically.`)
        delete settings.currentlyPlayingSounds[sound.id];
    });
}

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/** MobX - (c) Michel Weststrate 2015, 2016 - MIT Licensed */
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
    d.__proto__ = b;
} || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

/**
 * Anything that can be used to _store_ state is an Atom in mobx. Atoms have two important jobs
 *
 * 1) detect when they are being _used_ and report this (using reportObserved). This allows mobx to make the connection between running functions and the data they used
 * 2) they should notify mobx whenever they have _changed_. This way mobx can re-run any functions (derivations) that are using this atom.
 */
var BaseAtom = /** @class */function () {
    /**
     * Create a new atom. For debugging purposes it is recommended to give it a name.
     * The onBecomeObserved and onBecomeUnobserved callbacks can be used for resource management.
     */
    function BaseAtom(name) {
        if (name === void 0) {
            name = "Atom@" + getNextId();
        }
        this.name = name;
        this.isPendingUnobservation = true; // for effective unobserving. BaseAtom has true, for extra optimization, so its onBecomeUnobserved never gets called, because it's not needed
        this.observers = [];
        this.observersIndexes = {};
        this.diffValue = 0;
        this.lastAccessedBy = 0;
        this.lowestObserverState = IDerivationState.NOT_TRACKING;
    }
    BaseAtom.prototype.onBecomeUnobserved = function () {
        // noop
    };
    /**
     * Invoke this method to notify mobx that your atom has been used somehow.
     */
    BaseAtom.prototype.reportObserved = function () {
        reportObserved(this);
    };
    /**
     * Invoke this method _after_ this method has changed to signal mobx that all its observers should invalidate.
     */
    BaseAtom.prototype.reportChanged = function () {
        startBatch();
        propagateChanged(this);
        endBatch();
    };
    BaseAtom.prototype.toString = function () {
        return this.name;
    };
    return BaseAtom;
}();
var Atom = /** @class */function (_super) {
    __extends(Atom, _super);
    /**
     * Create a new atom. For debugging purposes it is recommended to give it a name.
     * The onBecomeObserved and onBecomeUnobserved callbacks can be used for resource management.
     */
    function Atom(name, onBecomeObservedHandler, onBecomeUnobservedHandler) {
        if (name === void 0) {
            name = "Atom@" + getNextId();
        }
        if (onBecomeObservedHandler === void 0) {
            onBecomeObservedHandler = noop;
        }
        if (onBecomeUnobservedHandler === void 0) {
            onBecomeUnobservedHandler = noop;
        }
        var _this = _super.call(this, name) || this;
        _this.name = name;
        _this.onBecomeObservedHandler = onBecomeObservedHandler;
        _this.onBecomeUnobservedHandler = onBecomeUnobservedHandler;
        _this.isPendingUnobservation = false; // for effective unobserving.
        _this.isBeingTracked = false;
        return _this;
    }
    Atom.prototype.reportObserved = function () {
        startBatch();
        _super.prototype.reportObserved.call(this);
        if (!this.isBeingTracked) {
            this.isBeingTracked = true;
            this.onBecomeObservedHandler();
        }
        endBatch();
        return !!globalState.trackingDerivation;
        // return doesn't really give useful info, because it can be as well calling computed which calls atom (no reactions)
        // also it could not trigger when calculating reaction dependent on Atom because Atom's value was cached by computed called by given reaction.
    };
    Atom.prototype.onBecomeUnobserved = function () {
        this.isBeingTracked = false;
        this.onBecomeUnobservedHandler();
    };
    return Atom;
}(BaseAtom);
var isAtom = createInstanceofPredicate("Atom", BaseAtom);

function hasInterceptors(interceptable) {
    return interceptable.interceptors && interceptable.interceptors.length > 0;
}
function registerInterceptor(interceptable, handler) {
    var interceptors = interceptable.interceptors || (interceptable.interceptors = []);
    interceptors.push(handler);
    return once(function () {
        var idx = interceptors.indexOf(handler);
        if (idx !== -1) interceptors.splice(idx, 1);
    });
}
function interceptChange(interceptable, change) {
    var prevU = untrackedStart();
    try {
        var interceptors = interceptable.interceptors;
        if (interceptors) for (var i = 0, l = interceptors.length; i < l; i++) {
            change = interceptors[i](change);
            invariant(!change || change.type, "Intercept handlers should return nothing or a change object");
            if (!change) break;
        }
        return change;
    } finally {
        untrackedEnd(prevU);
    }
}

function hasListeners(listenable) {
    return listenable.changeListeners && listenable.changeListeners.length > 0;
}
function registerListener(listenable, handler) {
    var listeners = listenable.changeListeners || (listenable.changeListeners = []);
    listeners.push(handler);
    return once(function () {
        var idx = listeners.indexOf(handler);
        if (idx !== -1) listeners.splice(idx, 1);
    });
}
function notifyListeners(listenable, change) {
    var prevU = untrackedStart();
    var listeners = listenable.changeListeners;
    if (!listeners) return;
    listeners = listeners.slice();
    for (var i = 0, l = listeners.length; i < l; i++) {
        listeners[i](change);
    }
    untrackedEnd(prevU);
}

function isSpyEnabled() {
    return !!globalState.spyListeners.length;
}
function spyReport(event) {
    if (!globalState.spyListeners.length) return;
    var listeners = globalState.spyListeners;
    for (var i = 0, l = listeners.length; i < l; i++) {
        listeners[i](event);
    }
}
function spyReportStart(event) {
    var change = objectAssign({}, event, { spyReportStart: true });
    spyReport(change);
}
var END_EVENT = { spyReportEnd: true };
function spyReportEnd(change) {
    if (change) spyReport(objectAssign({}, change, END_EVENT));else spyReport(END_EVENT);
}
function spy(listener) {
    globalState.spyListeners.push(listener);
    return once(function () {
        var idx = globalState.spyListeners.indexOf(listener);
        if (idx !== -1) globalState.spyListeners.splice(idx, 1);
    });
}

function iteratorSymbol() {
    return typeof Symbol === "function" && Symbol.iterator || "@@iterator";
}
var IS_ITERATING_MARKER = "__$$iterating";
function arrayAsIterator(array) {
    // returning an array for entries(), values() etc for maps was a mis-interpretation of the specs..,
    // yet it is quite convenient to be able to use the response both as array directly and as iterator
    // it is suboptimal, but alas...
    invariant(array[IS_ITERATING_MARKER] !== true, "Illegal state: cannot recycle array as iterator");
    addHiddenFinalProp(array, IS_ITERATING_MARKER, true);
    var idx = -1;
    addHiddenFinalProp(array, "next", function next() {
        idx++;
        return {
            done: idx >= this.length,
            value: idx < this.length ? this[idx] : undefined
        };
    });
    return array;
}
function declareIterator(prototType, iteratorFactory) {
    addHiddenFinalProp(prototType, iteratorSymbol(), iteratorFactory);
}

var MAX_SPLICE_SIZE = 10000; // See e.g. https://github.com/mobxjs/mobx/issues/859
// Detects bug in safari 9.1.1 (or iOS 9 safari mobile). See #364
var safariPrototypeSetterInheritanceBug = function () {
    var v = false;
    var p = {};
    Object.defineProperty(p, "0", {
        set: function set() {
            v = true;
        }
    });
    Object.create(p)["0"] = 1;
    return v === false;
}();
/**
 * This array buffer contains two lists of properties, so that all arrays
 * can recycle their property definitions, which significantly improves performance of creating
 * properties on the fly.
 */
var OBSERVABLE_ARRAY_BUFFER_SIZE = 0;
// Typescript workaround to make sure ObservableArray extends Array
var StubArray = /** @class */function () {
    function StubArray() {}
    return StubArray;
}();
function inherit(ctor, proto) {
    if (typeof Object["setPrototypeOf"] !== "undefined") {
        Object["setPrototypeOf"](ctor.prototype, proto);
    } else if (typeof ctor.prototype.__proto__ !== "undefined") {
        ctor.prototype.__proto__ = proto;
    } else {
        ctor["prototype"] = proto;
    }
}
inherit(StubArray, Array.prototype);
// Weex freeze Array.prototype
// Make them writeable and configurable in prototype chain
// https://github.com/alibaba/weex/pull/1529
if (Object.isFrozen(Array)) {

    ["constructor", "push", "shift", "concat", "pop", "unshift", "replace", "find", "findIndex", "splice", "reverse", "sort"].forEach(function (key) {
        Object.defineProperty(StubArray.prototype, key, {
            configurable: true,
            writable: true,
            value: Array.prototype[key]
        });
    });
}
var ObservableArrayAdministration = /** @class */function () {
    function ObservableArrayAdministration(name, enhancer, array, owned) {
        this.array = array;
        this.owned = owned;
        this.values = [];
        this.lastKnownLength = 0;
        this.interceptors = null;
        this.changeListeners = null;
        this.atom = new BaseAtom(name || "ObservableArray@" + getNextId());
        this.enhancer = function (newV, oldV) {
            return enhancer(newV, oldV, name + "[..]");
        };
    }
    ObservableArrayAdministration.prototype.dehanceValue = function (value) {
        if (this.dehancer !== undefined) return this.dehancer(value);
        return value;
    };
    ObservableArrayAdministration.prototype.dehanceValues = function (values) {
        if (this.dehancer !== undefined) return values.map(this.dehancer);
        return values;
    };
    ObservableArrayAdministration.prototype.intercept = function (handler) {
        return registerInterceptor(this, handler);
    };
    ObservableArrayAdministration.prototype.observe = function (listener, fireImmediately) {
        if (fireImmediately === void 0) {
            fireImmediately = false;
        }
        if (fireImmediately) {
            listener({
                object: this.array,
                type: "splice",
                index: 0,
                added: this.values.slice(),
                addedCount: this.values.length,
                removed: [],
                removedCount: 0
            });
        }
        return registerListener(this, listener);
    };
    ObservableArrayAdministration.prototype.getArrayLength = function () {
        this.atom.reportObserved();
        return this.values.length;
    };
    ObservableArrayAdministration.prototype.setArrayLength = function (newLength) {
        if (typeof newLength !== "number" || newLength < 0) throw new Error("[mobx.array] Out of range: " + newLength);
        var currentLength = this.values.length;
        if (newLength === currentLength) return;else if (newLength > currentLength) {
            var newItems = new Array(newLength - currentLength);
            for (var i = 0; i < newLength - currentLength; i++) {
                newItems[i] = undefined;
            } // No Array.fill everywhere...
            this.spliceWithArray(currentLength, 0, newItems);
        } else this.spliceWithArray(newLength, currentLength - newLength);
    };
    // adds / removes the necessary numeric properties to this object
    ObservableArrayAdministration.prototype.updateArrayLength = function (oldLength, delta) {
        if (oldLength !== this.lastKnownLength) throw new Error("[mobx] Modification exception: the internal structure of an observable array was changed. Did you use peek() to change it?");
        this.lastKnownLength += delta;
        if (delta > 0 && oldLength + delta + 1 > OBSERVABLE_ARRAY_BUFFER_SIZE) reserveArrayBuffer(oldLength + delta + 1);
    };
    ObservableArrayAdministration.prototype.spliceWithArray = function (index, deleteCount, newItems) {
        var _this = this;
        checkIfStateModificationsAreAllowed(this.atom);
        var length = this.values.length;
        if (index === undefined) index = 0;else if (index > length) index = length;else if (index < 0) index = Math.max(0, length + index);
        if (arguments.length === 1) deleteCount = length - index;else if (deleteCount === undefined || deleteCount === null) deleteCount = 0;else deleteCount = Math.max(0, Math.min(deleteCount, length - index));
        if (newItems === undefined) newItems = [];
        if (hasInterceptors(this)) {
            var change = interceptChange(this, {
                object: this.array,
                type: "splice",
                index: index,
                removedCount: deleteCount,
                added: newItems
            });
            if (!change) return EMPTY_ARRAY;
            deleteCount = change.removedCount;
            newItems = change.added;
        }
        newItems = newItems.map(function (v) {
            return _this.enhancer(v, undefined);
        });
        var lengthDelta = newItems.length - deleteCount;
        this.updateArrayLength(length, lengthDelta); // create or remove new entries
        var res = this.spliceItemsIntoValues(index, deleteCount, newItems);
        if (deleteCount !== 0 || newItems.length !== 0) this.notifyArraySplice(index, newItems, res);
        return this.dehanceValues(res);
    };
    ObservableArrayAdministration.prototype.spliceItemsIntoValues = function (index, deleteCount, newItems) {
        if (newItems.length < MAX_SPLICE_SIZE) {
            return (_a = this.values).splice.apply(_a, [index, deleteCount].concat(newItems));
        } else {
            var res = this.values.slice(index, index + deleteCount);
            this.values = this.values.slice(0, index).concat(newItems, this.values.slice(index + deleteCount));
            return res;
        }
        var _a;
    };
    ObservableArrayAdministration.prototype.notifyArrayChildUpdate = function (index, newValue, oldValue) {
        var notifySpy = !this.owned && isSpyEnabled();
        var notify = hasListeners(this);
        var change = notify || notifySpy ? {
            object: this.array,
            type: "update",
            index: index,
            newValue: newValue,
            oldValue: oldValue
        } : null;
        if (notifySpy) spyReportStart(change);
        this.atom.reportChanged();
        if (notify) notifyListeners(this, change);
        if (notifySpy) spyReportEnd();
    };
    ObservableArrayAdministration.prototype.notifyArraySplice = function (index, added, removed) {
        var notifySpy = !this.owned && isSpyEnabled();
        var notify = hasListeners(this);
        var change = notify || notifySpy ? {
            object: this.array,
            type: "splice",
            index: index,
            removed: removed,
            added: added,
            removedCount: removed.length,
            addedCount: added.length
        } : null;
        if (notifySpy) spyReportStart(change);
        this.atom.reportChanged();
        // conform: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe
        if (notify) notifyListeners(this, change);
        if (notifySpy) spyReportEnd();
    };
    return ObservableArrayAdministration;
}();
var ObservableArray = /** @class */function (_super) {
    __extends(ObservableArray, _super);
    function ObservableArray(initialValues, enhancer, name, owned) {
        if (name === void 0) {
            name = "ObservableArray@" + getNextId();
        }
        if (owned === void 0) {
            owned = false;
        }
        var _this = _super.call(this) || this;
        var adm = new ObservableArrayAdministration(name, enhancer, _this, owned);
        addHiddenFinalProp(_this, "$mobx", adm);
        if (initialValues && initialValues.length) {
            _this.spliceWithArray(0, 0, initialValues);
        }
        if (safariPrototypeSetterInheritanceBug) {
            // Seems that Safari won't use numeric prototype setter untill any * numeric property is
            // defined on the instance. After that it works fine, even if this property is deleted.
            Object.defineProperty(adm.array, "0", ENTRY_0);
        }
        return _this;
    }
    ObservableArray.prototype.intercept = function (handler) {
        return this.$mobx.intercept(handler);
    };
    ObservableArray.prototype.observe = function (listener, fireImmediately) {
        if (fireImmediately === void 0) {
            fireImmediately = false;
        }
        return this.$mobx.observe(listener, fireImmediately);
    };
    ObservableArray.prototype.clear = function () {
        return this.splice(0);
    };
    ObservableArray.prototype.concat = function () {
        var arrays = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            arrays[_i] = arguments[_i];
        }
        this.$mobx.atom.reportObserved();
        return Array.prototype.concat.apply(this.peek(), arrays.map(function (a) {
            return isObservableArray(a) ? a.peek() : a;
        }));
    };
    ObservableArray.prototype.replace = function (newItems) {
        return this.$mobx.spliceWithArray(0, this.$mobx.values.length, newItems);
    };
    /**
     * Converts this array back to a (shallow) javascript structure.
     * For a deep clone use mobx.toJS
     */
    ObservableArray.prototype.toJS = function () {
        return this.slice();
    };
    ObservableArray.prototype.toJSON = function () {
        // Used by JSON.stringify
        return this.toJS();
    };
    ObservableArray.prototype.peek = function () {
        this.$mobx.atom.reportObserved();
        return this.$mobx.dehanceValues(this.$mobx.values);
    };
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find
    ObservableArray.prototype.find = function (predicate, thisArg, fromIndex) {
        if (fromIndex === void 0) {
            fromIndex = 0;
        }
        var idx = this.findIndex.apply(this, arguments);
        return idx === -1 ? undefined : this.get(idx);
    };
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex
    ObservableArray.prototype.findIndex = function (predicate, thisArg, fromIndex) {
        if (fromIndex === void 0) {
            fromIndex = 0;
        }
        var items = this.peek(),
            l = items.length;
        for (var i = fromIndex; i < l; i++) {
            if (predicate.call(thisArg, items[i], i, this)) return i;
        }return -1;
    };
    /*
     * functions that do alter the internal structure of the array, (based on lib.es6.d.ts)
     * since these functions alter the inner structure of the array, the have side effects.
     * Because the have side effects, they should not be used in computed function,
     * and for that reason the do not call dependencyState.notifyObserved
     */
    ObservableArray.prototype.splice = function (index, deleteCount) {
        var newItems = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newItems[_i - 2] = arguments[_i];
        }
        switch (arguments.length) {
            case 0:
                return [];
            case 1:
                return this.$mobx.spliceWithArray(index);
            case 2:
                return this.$mobx.spliceWithArray(index, deleteCount);
        }
        return this.$mobx.spliceWithArray(index, deleteCount, newItems);
    };
    ObservableArray.prototype.spliceWithArray = function (index, deleteCount, newItems) {
        return this.$mobx.spliceWithArray(index, deleteCount, newItems);
    };
    ObservableArray.prototype.push = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        var adm = this.$mobx;
        adm.spliceWithArray(adm.values.length, 0, items);
        return adm.values.length;
    };
    ObservableArray.prototype.pop = function () {
        return this.splice(Math.max(this.$mobx.values.length - 1, 0), 1)[0];
    };
    ObservableArray.prototype.shift = function () {
        return this.splice(0, 1)[0];
    };
    ObservableArray.prototype.unshift = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        var adm = this.$mobx;
        adm.spliceWithArray(0, 0, items);
        return adm.values.length;
    };
    ObservableArray.prototype.reverse = function () {
        // reverse by default mutates in place before returning the result
        // which makes it both a 'derivation' and a 'mutation'.
        // so we deviate from the default and just make it an dervitation
        var clone = this.slice();
        return clone.reverse.apply(clone, arguments);
    };
    ObservableArray.prototype.sort = function (compareFn) {
        // sort by default mutates in place before returning the result
        // which goes against all good practices. Let's not change the array in place!
        var clone = this.slice();
        return clone.sort.apply(clone, arguments);
    };
    ObservableArray.prototype.remove = function (value) {
        var idx = this.$mobx.dehanceValues(this.$mobx.values).indexOf(value);
        if (idx > -1) {
            this.splice(idx, 1);
            return true;
        }
        return false;
    };
    ObservableArray.prototype.move = function (fromIndex, toIndex) {
        function checkIndex(index) {
            if (index < 0) {
                throw new Error("[mobx.array] Index out of bounds: " + index + " is negative");
            }
            var length = this.$mobx.values.length;
            if (index >= length) {
                throw new Error("[mobx.array] Index out of bounds: " + index + " is not smaller than " + length);
            }
        }
        checkIndex.call(this, fromIndex);
        checkIndex.call(this, toIndex);
        if (fromIndex === toIndex) {
            return;
        }
        var oldItems = this.$mobx.values;
        var newItems;
        if (fromIndex < toIndex) {
            newItems = oldItems.slice(0, fromIndex).concat(oldItems.slice(fromIndex + 1, toIndex + 1), [oldItems[fromIndex]], oldItems.slice(toIndex + 1));
        } else {
            // toIndex < fromIndex
            newItems = oldItems.slice(0, toIndex).concat([oldItems[fromIndex]], oldItems.slice(toIndex, fromIndex), oldItems.slice(fromIndex + 1));
        }
        this.replace(newItems);
    };
    // See #734, in case property accessors are unreliable...
    ObservableArray.prototype.get = function (index) {
        var impl = this.$mobx;
        if (impl) {
            if (index < impl.values.length) {
                impl.atom.reportObserved();
                return impl.dehanceValue(impl.values[index]);
            }
            console.warn("[mobx.array] Attempt to read an array index (" + index + ") that is out of bounds (" + impl.values.length + "). Please check length first. Out of bound indices will not be tracked by MobX");
        }
        return undefined;
    };
    // See #734, in case property accessors are unreliable...
    ObservableArray.prototype.set = function (index, newValue) {
        var adm = this.$mobx;
        var values = adm.values;
        if (index < values.length) {
            // update at index in range
            checkIfStateModificationsAreAllowed(adm.atom);
            var oldValue = values[index];
            if (hasInterceptors(adm)) {
                var change = interceptChange(adm, {
                    type: "update",
                    object: this,
                    index: index,
                    newValue: newValue
                });
                if (!change) return;
                newValue = change.newValue;
            }
            newValue = adm.enhancer(newValue, oldValue);
            var changed = newValue !== oldValue;
            if (changed) {
                values[index] = newValue;
                adm.notifyArrayChildUpdate(index, newValue, oldValue);
            }
        } else if (index === values.length) {
            // add a new item
            adm.spliceWithArray(index, 0, [newValue]);
        } else {
            // out of bounds
            throw new Error("[mobx.array] Index out of bounds, " + index + " is larger than " + values.length);
        }
    };
    return ObservableArray;
}(StubArray);
declareIterator(ObservableArray.prototype, function () {
    return arrayAsIterator(this.slice());
});
Object.defineProperty(ObservableArray.prototype, "length", {
    enumerable: false,
    configurable: true,
    get: function get() {
        return this.$mobx.getArrayLength();
    },
    set: function set(newLength) {
        this.$mobx.setArrayLength(newLength);
    }
});
["every", "filter", "forEach", "indexOf", "join", "lastIndexOf", "map", "reduce", "reduceRight", "slice", "some", "toString", "toLocaleString"].forEach(function (funcName) {
    var baseFunc = Array.prototype[funcName];
    invariant(typeof baseFunc === "function", "Base function not defined on Array prototype: '" + funcName + "'");
    addHiddenProp(ObservableArray.prototype, funcName, function () {
        return baseFunc.apply(this.peek(), arguments);
    });
});
/**
 * We don't want those to show up in `for (const key in ar)` ...
 */
makeNonEnumerable(ObservableArray.prototype, ["constructor", "intercept", "observe", "clear", "concat", "get", "replace", "toJS", "toJSON", "peek", "find", "findIndex", "splice", "spliceWithArray", "push", "pop", "set", "shift", "unshift", "reverse", "sort", "remove", "move", "toString", "toLocaleString"]);
// See #364
var ENTRY_0 = createArrayEntryDescriptor(0);
function createArrayEntryDescriptor(index) {
    return {
        enumerable: false,
        configurable: false,
        get: function get() {
            // TODO: Check `this`?, see #752?
            return this.get(index);
        },
        set: function set(value) {
            this.set(index, value);
        }
    };
}
function createArrayBufferItem(index) {
    Object.defineProperty(ObservableArray.prototype, "" + index, createArrayEntryDescriptor(index));
}
function reserveArrayBuffer(max) {
    for (var index = OBSERVABLE_ARRAY_BUFFER_SIZE; index < max; index++) {
        createArrayBufferItem(index);
    }OBSERVABLE_ARRAY_BUFFER_SIZE = max;
}
reserveArrayBuffer(1000);
var isObservableArrayAdministration = createInstanceofPredicate("ObservableArrayAdministration", ObservableArrayAdministration);
function isObservableArray(thing) {
    return isObject(thing) && isObservableArrayAdministration(thing.$mobx);
}

var UNCHANGED = {};
var ObservableValue = /** @class */function (_super) {
    __extends(ObservableValue, _super);
    function ObservableValue(value, enhancer, name, notifySpy) {
        if (name === void 0) {
            name = "ObservableValue@" + getNextId();
        }
        if (notifySpy === void 0) {
            notifySpy = true;
        }
        var _this = _super.call(this, name) || this;
        _this.enhancer = enhancer;
        _this.hasUnreportedChange = false;
        _this.dehancer = undefined;
        _this.value = enhancer(value, undefined, name);
        if (notifySpy && isSpyEnabled()) {
            // only notify spy if this is a stand-alone observable
            spyReport({ type: "create", object: _this, newValue: _this.value });
        }
        return _this;
    }
    ObservableValue.prototype.dehanceValue = function (value) {
        if (this.dehancer !== undefined) return this.dehancer(value);
        return value;
    };
    ObservableValue.prototype.set = function (newValue) {
        var oldValue = this.value;
        newValue = this.prepareNewValue(newValue);
        if (newValue !== UNCHANGED) {
            var notifySpy = isSpyEnabled();
            if (notifySpy) {
                spyReportStart({
                    type: "update",
                    object: this,
                    newValue: newValue,
                    oldValue: oldValue
                });
            }
            this.setNewValue(newValue);
            if (notifySpy) spyReportEnd();
        }
    };
    ObservableValue.prototype.prepareNewValue = function (newValue) {
        checkIfStateModificationsAreAllowed(this);
        if (hasInterceptors(this)) {
            var change = interceptChange(this, {
                object: this,
                type: "update",
                newValue: newValue
            });
            if (!change) return UNCHANGED;
            newValue = change.newValue;
        }
        // apply modifier
        newValue = this.enhancer(newValue, this.value, this.name);
        return this.value !== newValue ? newValue : UNCHANGED;
    };
    ObservableValue.prototype.setNewValue = function (newValue) {
        var oldValue = this.value;
        this.value = newValue;
        this.reportChanged();
        if (hasListeners(this)) {
            notifyListeners(this, {
                type: "update",
                object: this,
                newValue: newValue,
                oldValue: oldValue
            });
        }
    };
    ObservableValue.prototype.get = function () {
        this.reportObserved();
        return this.dehanceValue(this.value);
    };
    ObservableValue.prototype.intercept = function (handler) {
        return registerInterceptor(this, handler);
    };
    ObservableValue.prototype.observe = function (listener, fireImmediately) {
        if (fireImmediately) listener({
            object: this,
            type: "update",
            newValue: this.value,
            oldValue: undefined
        });
        return registerListener(this, listener);
    };
    ObservableValue.prototype.toJSON = function () {
        return this.get();
    };
    ObservableValue.prototype.toString = function () {
        return this.name + "[" + this.value + "]";
    };
    ObservableValue.prototype.valueOf = function () {
        return toPrimitive(this.get());
    };
    return ObservableValue;
}(BaseAtom);
ObservableValue.prototype[primitiveSymbol()] = ObservableValue.prototype.valueOf;
var isObservableValue = createInstanceofPredicate("ObservableValue", ObservableValue);

var messages = {
    m001: "It is not allowed to assign new values to @action fields",
    m002: "`runInAction` expects a function",
    m003: "`runInAction` expects a function without arguments",
    m004: "autorun expects a function",
    m005: "Warning: attempted to pass an action to autorun. Actions are untracked and will not trigger on state changes. Use `reaction` or wrap only your state modification code in an action.",
    m006: "Warning: attempted to pass an action to autorunAsync. Actions are untracked and will not trigger on state changes. Use `reaction` or wrap only your state modification code in an action.",
    m007: "reaction only accepts 2 or 3 arguments. If migrating from MobX 2, please provide an options object",
    m008: "wrapping reaction expression in `asReference` is no longer supported, use options object instead",
    m009: "@computed can only be used on getter functions, like: '@computed get myProps() { return ...; }'. It looks like it was used on a property.",
    m010: "@computed can only be used on getter functions, like: '@computed get myProps() { return ...; }'",
    m011: "First argument to `computed` should be an expression. If using computed as decorator, don't pass it arguments",
    m012: "computed takes one or two arguments if used as function",
    m013: "[mobx.expr] 'expr' should only be used inside other reactive functions.",
    m014: "extendObservable expected 2 or more arguments",
    m015: "extendObservable expects an object as first argument",
    m016: "extendObservable should not be used on maps, use map.merge instead",
    m017: "all arguments of extendObservable should be objects",
    m018: "extending an object with another observable (object) is not supported. Please construct an explicit propertymap, using `toJS` if need. See issue #540",
    m019: "[mobx.isObservable] isObservable(object, propertyName) is not supported for arrays and maps. Use map.has or array.length instead.",
    m020: "modifiers can only be used for individual object properties",
    m021: "observable expects zero or one arguments",
    m022: "@observable can not be used on getters, use @computed instead",
    m024: "whyRun() can only be used if a derivation is active, or by passing an computed value / reaction explicitly. If you invoked whyRun from inside a computation; the computation is currently suspended but re-evaluating because somebody requested its value.",
    m025: "whyRun can only be used on reactions and computed values",
    m026: "`action` can only be invoked on functions",
    m028: "It is not allowed to set `useStrict` when a derivation is running",
    m029: "INTERNAL ERROR only onBecomeUnobserved shouldn't be called twice in a row",
    m030a: "Since strict-mode is enabled, changing observed observable values outside actions is not allowed. Please wrap the code in an `action` if this change is intended. Tried to modify: ",
    m030b: "Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, the render function of a React component? Tried to modify: ",
    m031: "Computed values are not allowed to cause side effects by changing observables that are already being observed. Tried to modify: ",
    m032: "* This computation is suspended (not in use by any reaction) and won't run automatically.\n	Didn't expect this computation to be suspended at this point?\n	  1. Make sure this computation is used by a reaction (reaction, autorun, observer).\n	  2. Check whether you are using this computation synchronously (in the same stack as they reaction that needs it).",
    m033: "`observe` doesn't support the fire immediately property for observable maps.",
    m034: "`mobx.map` is deprecated, use `new ObservableMap` or `mobx.observable.map` instead",
    m035: "Cannot make the designated object observable; it is not extensible",
    m036: "It is not possible to get index atoms from arrays",
    m037: "Hi there! I'm sorry you have just run into an exception.\nIf your debugger ends up here, know that some reaction (like the render() of an observer component, autorun or reaction)\nthrew an exception and that mobx caught it, to avoid that it brings the rest of your application down.\nThe original cause of the exception (the code that caused this reaction to run (again)), is still in the stack.\n\nHowever, more interesting is the actual stack trace of the error itself.\nHopefully the error is an instanceof Error, because in that case you can inspect the original stack of the error from where it was thrown.\nSee `error.stack` property, or press the very subtle \"(...)\" link you see near the console.error message that probably brought you here.\nThat stack is more interesting than the stack of this console.error itself.\n\nIf the exception you see is an exception you created yourself, make sure to use `throw new Error(\"Oops\")` instead of `throw \"Oops\"`,\nbecause the javascript environment will only preserve the original stack trace in the first form.\n\nYou can also make sure the debugger pauses the next time this very same exception is thrown by enabling \"Pause on caught exception\".\n(Note that it might pause on many other, unrelated exception as well).\n\nIf that all doesn't help you out, feel free to open an issue https://github.com/mobxjs/mobx/issues!\n",
    m038: "Missing items in this list?\n    1. Check whether all used values are properly marked as observable (use isObservable to verify)\n    2. Make sure you didn't dereference values too early. MobX observes props, not primitives. E.g: use 'person.name' instead of 'name' in your computation.\n"
};
function getMessage(id) {
    return messages[id];
}

function createAction(actionName, fn) {
    invariant(typeof fn === "function", getMessage("m026"));
    invariant(typeof actionName === "string" && actionName.length > 0, "actions should have valid names, got: '" + actionName + "'");
    var res = function res() {
        return executeAction(actionName, fn, this, arguments);
    };
    res.originalFn = fn;
    res.isMobxAction = true;
    return res;
}
function executeAction(actionName, fn, scope, args) {
    var runInfo = startAction(actionName, fn, scope, args);
    try {
        return fn.apply(scope, args);
    } finally {
        endAction(runInfo);
    }
}
function startAction(actionName, fn, scope, args) {
    var notifySpy = isSpyEnabled() && !!actionName;
    var startTime = 0;
    if (notifySpy) {
        startTime = Date.now();
        var l = args && args.length || 0;
        var flattendArgs = new Array(l);
        if (l > 0) for (var i = 0; i < l; i++) {
            flattendArgs[i] = args[i];
        }spyReportStart({
            type: "action",
            name: actionName,
            fn: fn,
            object: scope,
            arguments: flattendArgs
        });
    }
    var prevDerivation = untrackedStart();
    startBatch();
    var prevAllowStateChanges = allowStateChangesStart(true);
    return {
        prevDerivation: prevDerivation,
        prevAllowStateChanges: prevAllowStateChanges,
        notifySpy: notifySpy,
        startTime: startTime
    };
}
function endAction(runInfo) {
    allowStateChangesEnd(runInfo.prevAllowStateChanges);
    endBatch();
    untrackedEnd(runInfo.prevDerivation);
    if (runInfo.notifySpy) spyReportEnd({ time: Date.now() - runInfo.startTime });
}
function useStrict(strict) {
    invariant(globalState.trackingDerivation === null, getMessage("m028"));
    globalState.strictMode = strict;
    globalState.allowStateChanges = !strict;
}
function isStrictModeEnabled() {
    return globalState.strictMode;
}
function allowStateChanges(allowStateChanges, func) {
    // TODO: deprecate / refactor this function in next major
    // Currently only used by `@observer`
    // Proposed change: remove first param, rename to `forbidStateChanges`,
    // require error callback instead of the hardcoded error message now used
    // Use `inAction` instead of allowStateChanges in derivation.ts to check strictMode
    var prev = allowStateChangesStart(allowStateChanges);
    var res;
    try {
        res = func();
    } finally {
        allowStateChangesEnd(prev);
    }
    return res;
}
function allowStateChangesStart(allowStateChanges) {
    var prev = globalState.allowStateChanges;
    globalState.allowStateChanges = allowStateChanges;
    return prev;
}
function allowStateChangesEnd(prev) {
    globalState.allowStateChanges = prev;
}

/**
 * Constructs a decorator, that normalizes the differences between
 * TypeScript and Babel. Mainly caused by the fact that legacy-decorator cannot assign
 * values during instance creation to properties that have a getter setter.
 *
 * - Sigh -
 *
 * Also takes care of the difference between @decorator field and @decorator(args) field, and different forms of values.
 * For performance (cpu and mem) reasons the properties are always defined on the prototype (at least initially).
 * This means that these properties despite being enumerable might not show up in Object.keys() (but they will show up in for...in loops).
 */
function createClassPropertyDecorator(
/**
 * This function is invoked once, when the property is added to a new instance.
 * When this happens is not strictly determined due to differences in TS and Babel:
 * Typescript: Usually when constructing the new instance
 * Babel, sometimes Typescript: during the first get / set
 * Both: when calling `runLazyInitializers(instance)`
 */
onInitialize, _get, _set, enumerable,
/**
 * Can this decorator invoked with arguments? e.g. @decorator(args)
 */
allowCustomArguments) {
    function classPropertyDecorator(target, key, descriptor, customArgs, argLen) {
        if (argLen === void 0) {
            argLen = 0;
        }
        invariant(allowCustomArguments || quacksLikeADecorator(arguments), "This function is a decorator, but it wasn't invoked like a decorator");
        if (!descriptor) {
            // typescript (except for getter / setters)
            var newDescriptor = {
                enumerable: enumerable,
                configurable: true,
                get: function get() {
                    if (!this.__mobxInitializedProps || this.__mobxInitializedProps[key] !== true) typescriptInitializeProperty(this, key, undefined, onInitialize, customArgs, descriptor);
                    return _get.call(this, key);
                },
                set: function set(v) {
                    if (!this.__mobxInitializedProps || this.__mobxInitializedProps[key] !== true) {
                        typescriptInitializeProperty(this, key, v, onInitialize, customArgs, descriptor);
                    } else {
                        _set.call(this, key, v);
                    }
                }
            };
            if (arguments.length < 3 || arguments.length === 5 && argLen < 3) {
                // Typescript target is ES3, so it won't define property for us
                // or using Reflect.decorate polyfill, which will return no descriptor
                // (see https://github.com/mobxjs/mobx/issues/333)
                Object.defineProperty(target, key, newDescriptor);
            }
            return newDescriptor;
        } else {
            // babel and typescript getter / setter props
            if (!hasOwnProperty(target, "__mobxLazyInitializers")) {
                addHiddenProp(target, "__mobxLazyInitializers", target.__mobxLazyInitializers && target.__mobxLazyInitializers.slice() || [] // support inheritance
                );
            }
            var value_1 = descriptor.value,
                initializer_1 = descriptor.initializer;
            target.__mobxLazyInitializers.push(function (instance) {
                onInitialize(instance, key, initializer_1 ? initializer_1.call(instance) : value_1, customArgs, descriptor);
            });
            return {
                enumerable: enumerable,
                configurable: true,
                get: function get() {
                    if (this.__mobxDidRunLazyInitializers !== true) runLazyInitializers(this);
                    return _get.call(this, key);
                },
                set: function set(v) {
                    if (this.__mobxDidRunLazyInitializers !== true) runLazyInitializers(this);
                    _set.call(this, key, v);
                }
            };
        }
    }
    if (allowCustomArguments) {
        /** If custom arguments are allowed, we should return a function that returns a decorator */
        return function () {
            /** Direct invocation: @decorator bla */
            if (quacksLikeADecorator(arguments)) return classPropertyDecorator.apply(null, arguments);
            /** Indirect invocation: @decorator(args) bla */
            var outerArgs = arguments;
            var argLen = arguments.length;
            return function (target, key, descriptor) {
                return classPropertyDecorator(target, key, descriptor, outerArgs, argLen);
            };
        };
    }
    return classPropertyDecorator;
}
function typescriptInitializeProperty(instance, key, v, onInitialize, customArgs, baseDescriptor) {
    if (!hasOwnProperty(instance, "__mobxInitializedProps")) addHiddenProp(instance, "__mobxInitializedProps", {});
    instance.__mobxInitializedProps[key] = true;
    onInitialize(instance, key, v, customArgs, baseDescriptor);
}
function runLazyInitializers(instance) {
    if (instance.__mobxDidRunLazyInitializers === true) return;
    if (instance.__mobxLazyInitializers) {
        addHiddenProp(instance, "__mobxDidRunLazyInitializers", true);
        instance.__mobxDidRunLazyInitializers && instance.__mobxLazyInitializers.forEach(function (initializer) {
            return initializer(instance);
        });
    }
}
function quacksLikeADecorator(args) {
    return (args.length === 2 || args.length === 3) && typeof args[1] === "string";
}

var actionFieldDecorator = createClassPropertyDecorator(function (target, key, value, args, originalDescriptor) {
    var actionName = args && args.length === 1 ? args[0] : value.name || key || "<unnamed action>";
    var wrappedAction = action(actionName, value);
    addHiddenProp(target, key, wrappedAction);
}, function (key) {
    return this[key];
}, function () {
    invariant(false, getMessage("m001"));
}, false, true);
var boundActionDecorator = createClassPropertyDecorator(function (target, key, value) {
    defineBoundAction(target, key, value);
}, function (key) {
    return this[key];
}, function () {
    invariant(false, getMessage("m001"));
}, false, false);
var action = function action(arg1, arg2, arg3, arg4) {
    if (arguments.length === 1 && typeof arg1 === "function") return createAction(arg1.name || "<unnamed action>", arg1);
    if (arguments.length === 2 && typeof arg2 === "function") return createAction(arg1, arg2);
    if (arguments.length === 1 && typeof arg1 === "string") return namedActionDecorator(arg1);
    return namedActionDecorator(arg2).apply(null, arguments);
};
action.bound = function boundAction(arg1, arg2, arg3) {
    if (typeof arg1 === "function") {
        var action_1 = createAction("<not yet bound action>", arg1);
        action_1.autoBind = true;
        return action_1;
    }
    return boundActionDecorator.apply(null, arguments);
};
function namedActionDecorator(name) {
    return function (target, prop, descriptor) {
        if (descriptor && typeof descriptor.value === "function") {
            // TypeScript @action method() { }. Defined on proto before being decorated
            // Don't use the field decorator if we are just decorating a method
            descriptor.value = createAction(name, descriptor.value);
            descriptor.enumerable = false;
            descriptor.configurable = true;
            return descriptor;
        }
        if (descriptor !== undefined && descriptor.get !== undefined) {
            throw new Error("[mobx] action is not expected to be used with getters");
        }
        // bound instance methods
        return actionFieldDecorator(name).apply(this, arguments);
    };
}
function runInAction(arg1, arg2, arg3) {
    var actionName = typeof arg1 === "string" ? arg1 : arg1.name || "<unnamed action>";
    var fn = typeof arg1 === "function" ? arg1 : arg2;
    var scope = typeof arg1 === "function" ? arg2 : arg3;
    invariant(typeof fn === "function", getMessage("m002"));
    invariant(fn.length === 0, getMessage("m003"));
    invariant(typeof actionName === "string" && actionName.length > 0, "actions should have valid names, got: '" + actionName + "'");
    return executeAction(actionName, fn, scope, undefined);
}
function isAction(thing) {
    return typeof thing === "function" && thing.isMobxAction === true;
}
function defineBoundAction(target, propertyName, fn) {
    var res = function res() {
        return executeAction(propertyName, fn, target, arguments);
    };
    res.isMobxAction = true;
    addHiddenProp(target, propertyName, res);
}

var toString = Object.prototype.toString;
function deepEqual(a, b) {
    return eq(a, b);
}
// Copied from https://github.com/jashkenas/underscore/blob/5c237a7c682fb68fd5378203f0bf22dce1624854/underscore.js#L1186-L1289
// Internal recursive comparison function for `isEqual`.
function eq(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // `null` or `undefined` only equal to itself (strict comparison).
    if (a == null || b == null) return false;
    // `NaN`s are equivalent, but non-reflexive.
    if (a !== a) return b !== b;
    // Exhaust primitive checks
    var type = typeof a === "undefined" ? "undefined" : _typeof(a);
    if (type !== "function" && type !== "object" && (typeof b === "undefined" ? "undefined" : _typeof(b)) != "object") return false;
    return deepEq(a, b, aStack, bStack);
}
// Internal recursive comparison function for `isEqual`.
function deepEq(a, b, aStack, bStack) {
    // Unwrap any wrapped objects.
    a = unwrap(a);
    b = unwrap(b);
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
        // Strings, numbers, regular expressions, dates, and booleans are compared by value.
        case "[object RegExp]":
        // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
        case "[object String]":
            // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
            // equivalent to `new String("5")`.
            return "" + a === "" + b;
        case "[object Number]":
            // `NaN`s are equivalent, but non-reflexive.
            // Object(NaN) is equivalent to NaN.
            if (+a !== +a) return +b !== +b;
            // An `egal` comparison is performed for other numeric values.
            return +a === 0 ? 1 / +a === 1 / b : +a === +b;
        case "[object Date]":
        case "[object Boolean]":
            // Coerce dates and booleans to numeric primitive values. Dates are compared by their
            // millisecond representations. Note that invalid dates with millisecond representations
            // of `NaN` are not equivalent.
            return +a === +b;
        case "[object Symbol]":
            return typeof Symbol !== "undefined" && Symbol.valueOf.call(a) === Symbol.valueOf.call(b);
    }
    var areArrays = className === "[object Array]";
    if (!areArrays) {
        if ((typeof a === "undefined" ? "undefined" : _typeof(a)) != "object" || (typeof b === "undefined" ? "undefined" : _typeof(b)) != "object") return false;
        // Objects with different constructors are not equivalent, but `Object`s or `Array`s
        // from different frames are.
        var aCtor = a.constructor,
            bCtor = b.constructor;
        if (aCtor !== bCtor && !(typeof aCtor === "function" && aCtor instanceof aCtor && typeof bCtor === "function" && bCtor instanceof bCtor) && "constructor" in a && "constructor" in b) {
            return false;
        }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
        // Linear search. Performance is inversely proportional to the number of
        // unique nested structures.
        if (aStack[length] === a) return bStack[length] === b;
    }
    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);
    // Recursively compare objects and arrays.
    if (areArrays) {
        // Compare array lengths to determine if a deep comparison is necessary.
        length = a.length;
        if (length !== b.length) return false;
        // Deep compare the contents, ignoring non-numeric properties.
        while (length--) {
            if (!eq(a[length], b[length], aStack, bStack)) return false;
        }
    } else {
        // Deep compare objects.
        var keys = Object.keys(a),
            key;
        length = keys.length;
        // Ensure that both objects contain the same number of properties before comparing deep equality.
        if (Object.keys(b).length !== length) return false;
        while (length--) {
            // Deep compare each member
            key = keys[length];
            if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
        }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
}
function unwrap(a) {
    if (isObservableArray(a)) return a.peek();
    if (isObservableMap(a)) return a.entries();
    if (isES6Map(a)) return iteratorToArray(a.entries());
    return a;
}
function has(a, key) {
    return Object.prototype.hasOwnProperty.call(a, key);
}

function identityComparer(a, b) {
    return a === b;
}
function structuralComparer(a, b) {
    return deepEqual(a, b);
}
function defaultComparer(a, b) {
    return areBothNaN(a, b) || identityComparer(a, b);
}
var comparer = {
    identity: identityComparer,
    structural: structuralComparer,
    default: defaultComparer
};

function autorun(arg1, arg2, arg3) {
    var name, view, scope;
    if (typeof arg1 === "string") {
        name = arg1;
        view = arg2;
        scope = arg3;
    } else {
        name = arg1.name || "Autorun@" + getNextId();
        view = arg1;
        scope = arg2;
    }
    invariant(typeof view === "function", getMessage("m004"));
    invariant(isAction(view) === false, getMessage("m005"));
    if (scope) view = view.bind(scope);
    var reaction = new Reaction(name, function () {
        this.track(reactionRunner);
    });
    function reactionRunner() {
        view(reaction);
    }
    reaction.schedule();
    return reaction.getDisposer();
}
function when(arg1, arg2, arg3, arg4) {
    var name, predicate, effect, scope;
    if (typeof arg1 === "string") {
        name = arg1;
        predicate = arg2;
        effect = arg3;
        scope = arg4;
    } else {
        name = "When@" + getNextId();
        predicate = arg1;
        effect = arg2;
        scope = arg3;
    }
    var disposer = autorun(name, function (r) {
        if (predicate.call(scope)) {
            r.dispose();
            var prevUntracked = untrackedStart();
            effect.call(scope);
            untrackedEnd(prevUntracked);
        }
    });
    return disposer;
}
function autorunAsync(arg1, arg2, arg3, arg4) {
    var name, func, delay, scope;
    if (typeof arg1 === "string") {
        name = arg1;
        func = arg2;
        delay = arg3;
        scope = arg4;
    } else {
        name = arg1.name || "AutorunAsync@" + getNextId();
        func = arg1;
        delay = arg2;
        scope = arg3;
    }
    invariant(isAction(func) === false, getMessage("m006"));
    if (delay === void 0) delay = 1;
    if (scope) func = func.bind(scope);
    var isScheduled = false;
    var r = new Reaction(name, function () {
        if (!isScheduled) {
            isScheduled = true;
            setTimeout(function () {
                isScheduled = false;
                if (!r.isDisposed) r.track(reactionRunner);
            }, delay);
        }
    });
    function reactionRunner() {
        func(r);
    }
    r.schedule();
    return r.getDisposer();
}
function reaction(expression, effect, arg3) {
    if (arguments.length > 3) {
        fail(getMessage("m007"));
    }
    if (isModifierDescriptor(expression)) {
        fail(getMessage("m008"));
    }
    var opts;
    if ((typeof arg3 === "undefined" ? "undefined" : _typeof(arg3)) === "object") {
        opts = arg3;
    } else {
        opts = {};
    }
    opts.name = opts.name || expression.name || effect.name || "Reaction@" + getNextId();
    opts.fireImmediately = arg3 === true || opts.fireImmediately === true;
    opts.delay = opts.delay || 0;
    opts.compareStructural = opts.compareStructural || opts.struct || false;
    // TODO: creates ugly spy events, use `effect = (r) => runInAction(opts.name, () => effect(r))` instead
    effect = action(opts.name, opts.context ? effect.bind(opts.context) : effect);
    if (opts.context) {
        expression = expression.bind(opts.context);
    }
    var firstTime = true;
    var isScheduled = false;
    var value;
    var equals = opts.equals ? opts.equals : opts.compareStructural || opts.struct ? comparer.structural : comparer.default;
    var r = new Reaction(opts.name, function () {
        if (firstTime || opts.delay < 1) {
            reactionRunner();
        } else if (!isScheduled) {
            isScheduled = true;
            setTimeout(function () {
                isScheduled = false;
                reactionRunner();
            }, opts.delay);
        }
    });
    function reactionRunner() {
        if (r.isDisposed) return;
        var changed = false;
        r.track(function () {
            var nextValue = expression(r);
            changed = firstTime || !equals(value, nextValue);
            value = nextValue;
        });
        if (firstTime && opts.fireImmediately) effect(value, r);
        if (!firstTime && changed === true) effect(value, r);
        if (firstTime) firstTime = false;
    }
    r.schedule();
    return r.getDisposer();
}

/**
 * A node in the state dependency root that observes other nodes, and can be observed itself.
 *
 * ComputedValue will remember the result of the computation for the duration of the batch, or
 * while being observed.
 *
 * During this time it will recompute only when one of its direct dependencies changed,
 * but only when it is being accessed with `ComputedValue.get()`.
 *
 * Implementation description:
 * 1. First time it's being accessed it will compute and remember result
 *    give back remembered result until 2. happens
 * 2. First time any deep dependency change, propagate POSSIBLY_STALE to all observers, wait for 3.
 * 3. When it's being accessed, recompute if any shallow dependency changed.
 *    if result changed: propagate STALE to all observers, that were POSSIBLY_STALE from the last step.
 *    go to step 2. either way
 *
 * If at any point it's outside batch and it isn't observed: reset everything and go to 1.
 */
var ComputedValue = /** @class */function () {
    /**
     * Create a new computed value based on a function expression.
     *
     * The `name` property is for debug purposes only.
     *
     * The `equals` property specifies the comparer function to use to determine if a newly produced
     * value differs from the previous value. Two comparers are provided in the library; `defaultComparer`
     * compares based on identity comparison (===), and `structualComparer` deeply compares the structure.
     * Structural comparison can be convenient if you always produce an new aggregated object and
     * don't want to notify observers if it is structurally the same.
     * This is useful for working with vectors, mouse coordinates etc.
     */
    function ComputedValue(derivation, scope, equals, name, setter) {
        this.derivation = derivation;
        this.scope = scope;
        this.equals = equals;
        this.dependenciesState = IDerivationState.NOT_TRACKING;
        this.observing = []; // nodes we are looking at. Our value depends on these nodes
        this.newObserving = null; // during tracking it's an array with new observed observers
        this.isPendingUnobservation = false;
        this.observers = [];
        this.observersIndexes = {};
        this.diffValue = 0;
        this.runId = 0;
        this.lastAccessedBy = 0;
        this.lowestObserverState = IDerivationState.UP_TO_DATE;
        this.unboundDepsCount = 0;
        this.__mapid = "#" + getNextId();
        this.value = new CaughtException(null);
        this.isComputing = false; // to check for cycles
        this.isRunningSetter = false;
        this.isTracing = TraceMode.NONE;
        this.name = name || "ComputedValue@" + getNextId();
        if (setter) this.setter = createAction(name + "-setter", setter);
    }
    ComputedValue.prototype.onBecomeStale = function () {
        propagateMaybeChanged(this);
    };
    ComputedValue.prototype.onBecomeUnobserved = function () {
        clearObserving(this);
        this.value = undefined;
    };
    /**
     * Returns the current value of this computed value.
     * Will evaluate its computation first if needed.
     */
    ComputedValue.prototype.get = function () {
        invariant(!this.isComputing, "Cycle detected in computation " + this.name, this.derivation);
        if (globalState.inBatch === 0) {
            // This is an minor optimization which could be omitted to simplify the code
            // The computedValue is accessed outside of any mobx stuff. Batch observing should be enough and don't need
            // tracking as it will never be called again inside this batch.
            startBatch();
            if (shouldCompute(this)) {
                if (this.isTracing !== TraceMode.NONE) {
                    console.log("[mobx.trace] '" + this.name + "' is being read outside a reactive context and doing a full recompute");
                }
                this.value = this.computeValue(false);
            }
            endBatch();
        } else {
            reportObserved(this);
            if (shouldCompute(this)) if (this.trackAndCompute()) propagateChangeConfirmed(this);
        }
        var result = this.value;
        if (isCaughtException(result)) throw result.cause;
        return result;
    };
    ComputedValue.prototype.peek = function () {
        var res = this.computeValue(false);
        if (isCaughtException(res)) throw res.cause;
        return res;
    };
    ComputedValue.prototype.set = function (value) {
        if (this.setter) {
            invariant(!this.isRunningSetter, "The setter of computed value '" + this.name + "' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?");
            this.isRunningSetter = true;
            try {
                this.setter.call(this.scope, value);
            } finally {
                this.isRunningSetter = false;
            }
        } else invariant(false, "[ComputedValue '" + this.name + "'] It is not possible to assign a new value to a computed value.");
    };
    ComputedValue.prototype.trackAndCompute = function () {
        if (isSpyEnabled()) {
            spyReport({
                object: this.scope,
                type: "compute",
                fn: this.derivation
            });
        }
        var oldValue = this.value;
        var wasSuspended =
        /* see #1208 */this.dependenciesState === IDerivationState.NOT_TRACKING;
        var newValue = this.value = this.computeValue(true);
        return wasSuspended || isCaughtException(oldValue) || isCaughtException(newValue) || !this.equals(oldValue, newValue);
    };
    ComputedValue.prototype.computeValue = function (track) {
        this.isComputing = true;
        globalState.computationDepth++;
        var res;
        if (track) {
            res = trackDerivedFunction(this, this.derivation, this.scope);
        } else {
            try {
                res = this.derivation.call(this.scope);
            } catch (e) {
                res = new CaughtException(e);
            }
        }
        globalState.computationDepth--;
        this.isComputing = false;
        return res;
    };
    ComputedValue.prototype.observe = function (listener, fireImmediately) {
        var _this = this;
        var firstTime = true;
        var prevValue = undefined;
        return autorun(function () {
            var newValue = _this.get();
            if (!firstTime || fireImmediately) {
                var prevU = untrackedStart();
                listener({
                    type: "update",
                    object: _this,
                    newValue: newValue,
                    oldValue: prevValue
                });
                untrackedEnd(prevU);
            }
            firstTime = false;
            prevValue = newValue;
        });
    };
    ComputedValue.prototype.toJSON = function () {
        return this.get();
    };
    ComputedValue.prototype.toString = function () {
        return this.name + "[" + this.derivation.toString() + "]";
    };
    ComputedValue.prototype.valueOf = function () {
        return toPrimitive(this.get());
    };
    ComputedValue.prototype.whyRun = function () {
        var isTracking = Boolean(globalState.trackingDerivation);
        var observing = unique(this.isComputing ? this.newObserving : this.observing).map(function (dep) {
            return dep.name;
        });
        var observers = unique(getObservers(this).map(function (dep) {
            return dep.name;
        }));
        return "\nWhyRun? computation '" + this.name + "':\n * Running because: " + (isTracking ? "[active] the value of this computation is needed by a reaction" : this.isComputing ? "[get] The value of this computed was requested outside a reaction" : "[idle] not running at the moment") + "\n" + (this.dependenciesState === IDerivationState.NOT_TRACKING ? getMessage("m032") : " * This computation will re-run if any of the following observables changes:\n    " + joinStrings(observing) + "\n    " + (this.isComputing && isTracking ? " (... or any observable accessed during the remainder of the current run)" : "") + "\n    " + getMessage("m038") + "\n\n  * If the outcome of this computation changes, the following observers will be re-run:\n    " + joinStrings(observers) + "\n");
    };
    return ComputedValue;
}();
ComputedValue.prototype[primitiveSymbol()] = ComputedValue.prototype.valueOf;
var isComputedValue = createInstanceofPredicate("ComputedValue", ComputedValue);

var ObservableObjectAdministration = /** @class */function () {
    function ObservableObjectAdministration(target, name) {
        this.target = target;
        this.name = name;
        this.values = {};
        this.changeListeners = null;
        this.interceptors = null;
    }
    /**
     * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
     * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
     * for callback details
     */
    ObservableObjectAdministration.prototype.observe = function (callback, fireImmediately) {
        invariant(fireImmediately !== true, "`observe` doesn't support the fire immediately property for observable objects.");
        return registerListener(this, callback);
    };
    ObservableObjectAdministration.prototype.intercept = function (handler) {
        return registerInterceptor(this, handler);
    };
    return ObservableObjectAdministration;
}();
function asObservableObject(target, name) {
    if (isObservableObject(target) && target.hasOwnProperty("$mobx")) return target.$mobx;
    invariant(Object.isExtensible(target), getMessage("m035"));
    if (!isPlainObject(target)) name = (target.constructor.name || "ObservableObject") + "@" + getNextId();
    if (!name) name = "ObservableObject@" + getNextId();
    var adm = new ObservableObjectAdministration(target, name);
    addHiddenFinalProp(target, "$mobx", adm);
    return adm;
}
function defineObservablePropertyFromDescriptor(adm, propName, descriptor, defaultEnhancer) {
    if (adm.values[propName] && !isComputedValue(adm.values[propName])) {
        // already observable property
        invariant("value" in descriptor, "The property " + propName + " in " + adm.name + " is already observable, cannot redefine it as computed property");
        adm.target[propName] = descriptor.value; // the property setter will make 'value' reactive if needed.
        return;
    }
    // not yet observable property
    if ("value" in descriptor) {
        // not a computed value
        if (isModifierDescriptor(descriptor.value)) {
            // x : ref(someValue)
            var modifierDescriptor = descriptor.value;
            defineObservableProperty(adm, propName, modifierDescriptor.initialValue, modifierDescriptor.enhancer);
        } else if (isAction(descriptor.value) && descriptor.value.autoBind === true) {
            defineBoundAction(adm.target, propName, descriptor.value.originalFn);
        } else if (isComputedValue(descriptor.value)) {
            // x: computed(someExpr)
            defineComputedPropertyFromComputedValue(adm, propName, descriptor.value);
        } else {
            // x: someValue
            defineObservableProperty(adm, propName, descriptor.value, defaultEnhancer);
        }
    } else {
        // get x() { return 3 } set x(v) { }
        defineComputedProperty(adm, propName, descriptor.get, descriptor.set, comparer.default, true);
    }
}
function defineObservableProperty(adm, propName, newValue, enhancer) {
    assertPropertyConfigurable(adm.target, propName);
    if (hasInterceptors(adm)) {
        var change = interceptChange(adm, {
            object: adm.target,
            name: propName,
            type: "add",
            newValue: newValue
        });
        if (!change) return;
        newValue = change.newValue;
    }
    var observable = adm.values[propName] = new ObservableValue(newValue, enhancer, adm.name + "." + propName, false);
    newValue = observable.value; // observableValue might have changed it
    Object.defineProperty(adm.target, propName, generateObservablePropConfig(propName));
    notifyPropertyAddition(adm, adm.target, propName, newValue);
}
function defineComputedProperty(adm, propName, getter, setter, equals, asInstanceProperty) {
    if (asInstanceProperty) assertPropertyConfigurable(adm.target, propName);
    adm.values[propName] = new ComputedValue(getter, adm.target, equals, adm.name + "." + propName, setter);
    if (asInstanceProperty) {
        Object.defineProperty(adm.target, propName, generateComputedPropConfig(propName));
    }
}
function defineComputedPropertyFromComputedValue(adm, propName, computedValue) {
    var name = adm.name + "." + propName;
    computedValue.name = name;
    if (!computedValue.scope) computedValue.scope = adm.target;
    adm.values[propName] = computedValue;
    Object.defineProperty(adm.target, propName, generateComputedPropConfig(propName));
}
var observablePropertyConfigs = {};
var computedPropertyConfigs = {};
function generateObservablePropConfig(propName) {
    return observablePropertyConfigs[propName] || (observablePropertyConfigs[propName] = {
        configurable: true,
        enumerable: true,
        get: function get() {
            return this.$mobx.values[propName].get();
        },
        set: function set(v) {
            setPropertyValue(this, propName, v);
        }
    });
}
function generateComputedPropConfig(propName) {
    return computedPropertyConfigs[propName] || (computedPropertyConfigs[propName] = {
        configurable: true,
        enumerable: false,
        get: function get() {
            return this.$mobx.values[propName].get();
        },
        set: function set(v) {
            return this.$mobx.values[propName].set(v);
        }
    });
}
function setPropertyValue(instance, name, newValue) {
    var adm = instance.$mobx;
    var observable = adm.values[name];
    // intercept
    if (hasInterceptors(adm)) {
        var change = interceptChange(adm, {
            type: "update",
            object: instance,
            name: name,
            newValue: newValue
        });
        if (!change) return;
        newValue = change.newValue;
    }
    newValue = observable.prepareNewValue(newValue);
    // notify spy & observers
    if (newValue !== UNCHANGED) {
        var notify = hasListeners(adm);
        var notifySpy = isSpyEnabled();
        var change = notify || notifySpy ? {
            type: "update",
            object: instance,
            oldValue: observable.value,
            name: name,
            newValue: newValue
        } : null;
        if (notifySpy) spyReportStart(change);
        observable.setNewValue(newValue);
        if (notify) notifyListeners(adm, change);
        if (notifySpy) spyReportEnd();
    }
}
function notifyPropertyAddition(adm, object, name, newValue) {
    var notify = hasListeners(adm);
    var notifySpy = isSpyEnabled();
    var change = notify || notifySpy ? {
        type: "add",
        object: object,
        name: name,
        newValue: newValue
    } : null;
    if (notifySpy) spyReportStart(change);
    if (notify) notifyListeners(adm, change);
    if (notifySpy) spyReportEnd();
}
var isObservableObjectAdministration = createInstanceofPredicate("ObservableObjectAdministration", ObservableObjectAdministration);
function isObservableObject(thing) {
    if (isObject(thing)) {
        // Initializers run lazily when transpiling to babel, so make sure they are run...
        runLazyInitializers(thing);
        return isObservableObjectAdministration(thing.$mobx);
    }
    return false;
}

/**
 * Returns true if the provided value is reactive.
 * @param value object, function or array
 * @param property if property is specified, checks whether value.property is reactive.
 */
function isObservable(value, property) {
    if (value === null || value === undefined) return false;
    if (property !== undefined) {
        if (isObservableArray(value) || isObservableMap(value)) throw new Error(getMessage("m019"));else if (isObservableObject(value)) {
            var o = value.$mobx;
            return o.values && !!o.values[property];
        }
        return false;
    }
    // For first check, see #701
    return isObservableObject(value) || !!value.$mobx || isAtom(value) || isReaction(value) || isComputedValue(value);
}

function createDecoratorForEnhancer(enhancer) {
    invariant(!!enhancer, ":(");
    return createClassPropertyDecorator(function (target, name, baseValue, _, baseDescriptor) {
        assertPropertyConfigurable(target, name);
        invariant(!baseDescriptor || !baseDescriptor.get, getMessage("m022"));
        var adm = asObservableObject(target, undefined);
        defineObservableProperty(adm, name, baseValue, enhancer);
    }, function (name) {
        var observable = this.$mobx.values[name];
        if (observable === undefined // See #505
        ) return undefined;
        return observable.get();
    }, function (name, value) {
        setPropertyValue(this, name, value);
    }, true, false);
}

function extendObservable(target) {
    var properties = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        properties[_i - 1] = arguments[_i];
    }
    return extendObservableHelper(target, deepEnhancer, properties);
}
function extendShallowObservable(target) {
    var properties = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        properties[_i - 1] = arguments[_i];
    }
    return extendObservableHelper(target, referenceEnhancer, properties);
}
function extendObservableHelper(target, defaultEnhancer, properties) {
    invariant(arguments.length >= 2, getMessage("m014"));
    invariant((typeof target === "undefined" ? "undefined" : _typeof(target)) === "object", getMessage("m015"));
    invariant(!isObservableMap(target), getMessage("m016"));
    properties.forEach(function (propSet) {
        invariant((typeof propSet === "undefined" ? "undefined" : _typeof(propSet)) === "object", getMessage("m017"));
        invariant(!isObservable(propSet), getMessage("m018"));
    });
    var adm = asObservableObject(target);
    var definedProps = {};
    // Note could be optimised if properties.length === 1
    for (var i = properties.length - 1; i >= 0; i--) {
        var propSet = properties[i];
        for (var key in propSet) {
            if (definedProps[key] !== true && hasOwnProperty(propSet, key)) {
                definedProps[key] = true;
                if (target === propSet && !isPropertyConfigurable(target, key)) continue; // see #111, skip non-configurable or non-writable props for `observable(object)`.
                var descriptor = Object.getOwnPropertyDescriptor(propSet, key);
                defineObservablePropertyFromDescriptor(adm, key, descriptor, defaultEnhancer);
            }
        }
    }
    return target;
}

var deepDecorator = createDecoratorForEnhancer(deepEnhancer);
var shallowDecorator = createDecoratorForEnhancer(shallowEnhancer);
var refDecorator = createDecoratorForEnhancer(referenceEnhancer);
var deepStructDecorator = createDecoratorForEnhancer(deepStructEnhancer);
var refStructDecorator = createDecoratorForEnhancer(refStructEnhancer);
/**
 * Turns an object, array or function into a reactive structure.
 * @param v the value which should become observable.
 */
function createObservable(v) {
    if (v === void 0) {
        v = undefined;
    }
    // @observable someProp;
    if (typeof arguments[1] === "string") return deepDecorator.apply(null, arguments);
    invariant(arguments.length <= 1, getMessage("m021"));
    invariant(!isModifierDescriptor(v), getMessage("m020"));
    // it is an observable already, done
    if (isObservable(v)) return v;
    // something that can be converted and mutated?
    var res = deepEnhancer(v, undefined, undefined);
    // this value could be converted to a new observable data structure, return it
    if (res !== v) return res;
    // otherwise, just box it
    return observable.box(v);
}
var observableFactories = {
    box: function box(value, name) {
        if (arguments.length > 2) incorrectlyUsedAsDecorator("box");
        return new ObservableValue(value, deepEnhancer, name);
    },
    shallowBox: function shallowBox(value, name) {
        if (arguments.length > 2) incorrectlyUsedAsDecorator("shallowBox");
        return new ObservableValue(value, referenceEnhancer, name);
    },
    array: function array(initialValues, name) {
        if (arguments.length > 2) incorrectlyUsedAsDecorator("array");
        return new ObservableArray(initialValues, deepEnhancer, name);
    },
    shallowArray: function shallowArray(initialValues, name) {
        if (arguments.length > 2) incorrectlyUsedAsDecorator("shallowArray");
        return new ObservableArray(initialValues, referenceEnhancer, name);
    },
    map: function map(initialValues, name) {
        if (arguments.length > 2) incorrectlyUsedAsDecorator("map");
        return new ObservableMap(initialValues, deepEnhancer, name);
    },
    shallowMap: function shallowMap(initialValues, name) {
        if (arguments.length > 2) incorrectlyUsedAsDecorator("shallowMap");
        return new ObservableMap(initialValues, referenceEnhancer, name);
    },
    object: function object(props, name) {
        if (arguments.length > 2) incorrectlyUsedAsDecorator("object");
        var res = {};
        // convert to observable object
        asObservableObject(res, name);
        // add properties
        extendObservable(res, props);
        return res;
    },
    shallowObject: function shallowObject(props, name) {
        if (arguments.length > 2) incorrectlyUsedAsDecorator("shallowObject");
        var res = {};
        asObservableObject(res, name);
        extendShallowObservable(res, props);
        return res;
    },
    ref: function ref() {
        if (arguments.length < 2) {
            // although ref creates actually a modifier descriptor, the type of the resultig properties
            // of the object is `T` in the end, when the descriptors are interpreted
            return createModifierDescriptor(referenceEnhancer, arguments[0]);
        } else {
            return refDecorator.apply(null, arguments);
        }
    },
    shallow: function shallow() {
        if (arguments.length < 2) {
            // although ref creates actually a modifier descriptor, the type of the resultig properties
            // of the object is `T` in the end, when the descriptors are interpreted
            return createModifierDescriptor(shallowEnhancer, arguments[0]);
        } else {
            return shallowDecorator.apply(null, arguments);
        }
    },
    deep: function deep() {
        if (arguments.length < 2) {
            // although ref creates actually a modifier descriptor, the type of the resultig properties
            // of the object is `T` in the end, when the descriptors are interpreted
            return createModifierDescriptor(deepEnhancer, arguments[0]);
        } else {
            return deepDecorator.apply(null, arguments);
        }
    },
    struct: function struct() {
        if (arguments.length < 2) {
            // although ref creates actually a modifier descriptor, the type of the resultig properties
            // of the object is `T` in the end, when the descriptors are interpreted
            return createModifierDescriptor(deepStructEnhancer, arguments[0]);
        } else {
            return deepStructDecorator.apply(null, arguments);
        }
    }
};
var observable = createObservable;
// weird trick to keep our typings nicely with our funcs, and still extend the observable function
Object.keys(observableFactories).forEach(function (name) {
    return observable[name] = observableFactories[name];
});
observable.deep.struct = observable.struct;
observable.ref.struct = function () {
    if (arguments.length < 2) {
        return createModifierDescriptor(refStructEnhancer, arguments[0]);
    } else {
        return refStructDecorator.apply(null, arguments);
    }
};
function incorrectlyUsedAsDecorator(methodName) {
    fail("Expected one or two arguments to observable." + methodName + ". Did you accidentally try to use observable." + methodName + " as decorator?");
}

function isModifierDescriptor(thing) {
    return (typeof thing === "undefined" ? "undefined" : _typeof(thing)) === "object" && thing !== null && thing.isMobxModifierDescriptor === true;
}
function createModifierDescriptor(enhancer, initialValue) {
    invariant(!isModifierDescriptor(initialValue), "Modifiers cannot be nested");
    return {
        isMobxModifierDescriptor: true,
        initialValue: initialValue,
        enhancer: enhancer
    };
}
function deepEnhancer(v, _, name) {
    if (isModifierDescriptor(v)) fail("You tried to assign a modifier wrapped value to a collection, please define modifiers when creating the collection, not when modifying it");
    // it is an observable already, done
    if (isObservable(v)) return v;
    // something that can be converted and mutated?
    if (Array.isArray(v)) return observable.array(v, name);
    if (isPlainObject(v)) return observable.object(v, name);
    if (isES6Map(v)) return observable.map(v, name);
    return v;
}
function shallowEnhancer(v, _, name) {
    if (isModifierDescriptor(v)) fail("You tried to assign a modifier wrapped value to a collection, please define modifiers when creating the collection, not when modifying it");
    if (v === undefined || v === null) return v;
    if (isObservableObject(v) || isObservableArray(v) || isObservableMap(v)) return v;
    if (Array.isArray(v)) return observable.shallowArray(v, name);
    if (isPlainObject(v)) return observable.shallowObject(v, name);
    if (isES6Map(v)) return observable.shallowMap(v, name);
    return fail("The shallow modifier / decorator can only used in combination with arrays, objects and maps");
}
function referenceEnhancer(newValue) {
    // never turn into an observable
    return newValue;
}
function deepStructEnhancer(v, oldValue, name) {
    // don't confuse structurally compare enhancer with ref enhancer! The latter is probably
    // more suited for immutable objects
    if (deepEqual(v, oldValue)) return oldValue;
    // it is an observable already, done
    if (isObservable(v)) return v;
    // something that can be converted and mutated?
    if (Array.isArray(v)) return new ObservableArray(v, deepStructEnhancer, name);
    if (isES6Map(v)) return new ObservableMap(v, deepStructEnhancer, name);
    if (isPlainObject(v)) {
        var res = {};
        asObservableObject(res, name);
        extendObservableHelper(res, deepStructEnhancer, [v]);
        return res;
    }
    return v;
}
function refStructEnhancer(v, oldValue, name) {
    if (deepEqual(v, oldValue)) return oldValue;
    return v;
}

/**
 * During a transaction no views are updated until the end of the transaction.
 * The transaction will be run synchronously nonetheless.
 *
 * @param action a function that updates some reactive state
 * @returns any value that was returned by the 'action' parameter.
 */
function transaction(action, thisArg) {
    if (thisArg === void 0) {
        thisArg = undefined;
    }
    startBatch();
    try {
        return action.apply(thisArg);
    } finally {
        endBatch();
    }
}

var ObservableMapMarker = {};
var ObservableMap = /** @class */function () {
    function ObservableMap(initialData, enhancer, name) {
        if (enhancer === void 0) {
            enhancer = deepEnhancer;
        }
        if (name === void 0) {
            name = "ObservableMap@" + getNextId();
        }
        this.enhancer = enhancer;
        this.name = name;
        this.$mobx = ObservableMapMarker;
        this._data = Object.create(null);
        this._hasMap = Object.create(null); // hasMap, not hashMap >-).
        this._keys = new ObservableArray(undefined, referenceEnhancer, this.name + ".keys()", true);
        this.interceptors = null;
        this.changeListeners = null;
        this.dehancer = undefined;
        this.merge(initialData);
    }
    ObservableMap.prototype._has = function (key) {
        return typeof this._data[key] !== "undefined";
    };
    ObservableMap.prototype.has = function (key) {
        if (!this.isValidKey(key)) return false;
        key = "" + key;
        if (this._hasMap[key]) return this._hasMap[key].get();
        return this._updateHasMapEntry(key, false).get();
    };
    ObservableMap.prototype.set = function (key, value) {
        this.assertValidKey(key);
        key = "" + key;
        var hasKey = this._has(key);
        if (hasInterceptors(this)) {
            var change = interceptChange(this, {
                type: hasKey ? "update" : "add",
                object: this,
                newValue: value,
                name: key
            });
            if (!change) return this;
            value = change.newValue;
        }
        if (hasKey) {
            this._updateValue(key, value);
        } else {
            this._addValue(key, value);
        }
        return this;
    };
    ObservableMap.prototype.delete = function (key) {
        var _this = this;
        this.assertValidKey(key);
        key = "" + key;
        if (hasInterceptors(this)) {
            var change = interceptChange(this, {
                type: "delete",
                object: this,
                name: key
            });
            if (!change) return false;
        }
        if (this._has(key)) {
            var notifySpy = isSpyEnabled();
            var notify = hasListeners(this);
            var change = notify || notifySpy ? {
                type: "delete",
                object: this,
                oldValue: this._data[key].value,
                name: key
            } : null;
            if (notifySpy) spyReportStart(change);
            transaction(function () {
                _this._keys.remove(key);
                _this._updateHasMapEntry(key, false);
                var observable$$1 = _this._data[key];
                observable$$1.setNewValue(undefined);
                _this._data[key] = undefined;
            });
            if (notify) notifyListeners(this, change);
            if (notifySpy) spyReportEnd();
            return true;
        }
        return false;
    };
    ObservableMap.prototype._updateHasMapEntry = function (key, value) {
        // optimization; don't fill the hasMap if we are not observing, or remove entry if there are no observers anymore
        var entry = this._hasMap[key];
        if (entry) {
            entry.setNewValue(value);
        } else {
            entry = this._hasMap[key] = new ObservableValue(value, referenceEnhancer, this.name + "." + key + "?", false);
        }
        return entry;
    };
    ObservableMap.prototype._updateValue = function (name, newValue) {
        var observable$$1 = this._data[name];
        newValue = observable$$1.prepareNewValue(newValue);
        if (newValue !== UNCHANGED) {
            var notifySpy = isSpyEnabled();
            var notify = hasListeners(this);
            var change = notify || notifySpy ? {
                type: "update",
                object: this,
                oldValue: observable$$1.value,
                name: name,
                newValue: newValue
            } : null;
            if (notifySpy) spyReportStart(change);
            observable$$1.setNewValue(newValue);
            if (notify) notifyListeners(this, change);
            if (notifySpy) spyReportEnd();
        }
    };
    ObservableMap.prototype._addValue = function (name, newValue) {
        var _this = this;
        transaction(function () {
            var observable$$1 = _this._data[name] = new ObservableValue(newValue, _this.enhancer, _this.name + "." + name, false);
            newValue = observable$$1.value; // value might have been changed
            _this._updateHasMapEntry(name, true);
            _this._keys.push(name);
        });
        var notifySpy = isSpyEnabled();
        var notify = hasListeners(this);
        var change = notify || notifySpy ? {
            type: "add",
            object: this,
            name: name,
            newValue: newValue
        } : null;
        if (notifySpy) spyReportStart(change);
        if (notify) notifyListeners(this, change);
        if (notifySpy) spyReportEnd();
    };
    ObservableMap.prototype.get = function (key) {
        key = "" + key;
        if (this.has(key)) return this.dehanceValue(this._data[key].get());
        return this.dehanceValue(undefined);
    };
    ObservableMap.prototype.dehanceValue = function (value) {
        if (this.dehancer !== undefined) {
            return this.dehancer(value);
        }
        return value;
    };
    ObservableMap.prototype.keys = function () {
        return arrayAsIterator(this._keys.slice());
    };
    ObservableMap.prototype.values = function () {
        return arrayAsIterator(this._keys.map(this.get, this));
    };
    ObservableMap.prototype.entries = function () {
        var _this = this;
        return arrayAsIterator(this._keys.map(function (key) {
            return [key, _this.get(key)];
        }));
    };
    ObservableMap.prototype.forEach = function (callback, thisArg) {
        var _this = this;
        this.keys().forEach(function (key) {
            return callback.call(thisArg, _this.get(key), key, _this);
        });
    };
    /** Merge another object into this object, returns this. */
    ObservableMap.prototype.merge = function (other) {
        var _this = this;
        if (isObservableMap(other)) {
            other = other.toJS();
        }
        transaction(function () {
            if (isPlainObject(other)) Object.keys(other).forEach(function (key) {
                return _this.set(key, other[key]);
            });else if (Array.isArray(other)) other.forEach(function (_a) {
                var key = _a[0],
                    value = _a[1];
                return _this.set(key, value);
            });else if (isES6Map(other)) other.forEach(function (value, key) {
                return _this.set(key, value);
            });else if (other !== null && other !== undefined) fail("Cannot initialize map from " + other);
        });
        return this;
    };
    ObservableMap.prototype.clear = function () {
        var _this = this;
        transaction(function () {
            untracked(function () {
                _this.keys().forEach(_this.delete, _this);
            });
        });
    };
    ObservableMap.prototype.replace = function (values) {
        var _this = this;
        transaction(function () {
            // grab all the keys that are present in the new map but not present in the current map
            // and delete them from the map, then merge the new map
            // this will cause reactions only on changed values
            var newKeys = getMapLikeKeys(values);
            var oldKeys = _this.keys();
            var missingKeys = oldKeys.filter(function (k) {
                return newKeys.indexOf(k) === -1;
            });
            missingKeys.forEach(function (k) {
                return _this.delete(k);
            });
            _this.merge(values);
        });
        return this;
    };
    Object.defineProperty(ObservableMap.prototype, "size", {
        get: function get() {
            return this._keys.length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns a shallow non observable object clone of this map.
     * Note that the values might still be observable. For a deep clone use mobx.toJS.
     */
    ObservableMap.prototype.toJS = function () {
        var _this = this;
        var res = {};
        this.keys().forEach(function (key) {
            return res[key] = _this.get(key);
        });
        return res;
    };
    ObservableMap.prototype.toJSON = function () {
        // Used by JSON.stringify
        return this.toJS();
    };
    ObservableMap.prototype.isValidKey = function (key) {
        if (key === null || key === undefined) return false;
        if (typeof key === "string" || typeof key === "number" || typeof key === "boolean") return true;
        return false;
    };
    ObservableMap.prototype.assertValidKey = function (key) {
        if (!this.isValidKey(key)) throw new Error("[mobx.map] Invalid key: '" + key + "', only strings, numbers and booleans are accepted as key in observable maps.");
    };
    ObservableMap.prototype.toString = function () {
        var _this = this;
        return this.name + "[{ " + this.keys().map(function (key) {
            return key + ": " + ("" + _this.get(key));
        }).join(", ") + " }]";
    };
    /**
     * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
     * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
     * for callback details
     */
    ObservableMap.prototype.observe = function (listener, fireImmediately) {
        invariant(fireImmediately !== true, getMessage("m033"));
        return registerListener(this, listener);
    };
    ObservableMap.prototype.intercept = function (handler) {
        return registerInterceptor(this, handler);
    };
    return ObservableMap;
}();
declareIterator(ObservableMap.prototype, function () {
    return this.entries();
});
function map(initialValues) {
    deprecated("`mobx.map` is deprecated, use `new ObservableMap` or `mobx.observable.map` instead");
    return observable.map(initialValues);
}
/* 'var' fixes small-build issue */
var isObservableMap = createInstanceofPredicate("ObservableMap", ObservableMap);

var EMPTY_ARRAY = [];
Object.freeze(EMPTY_ARRAY);
function getGlobal() {
    return typeof window !== "undefined" ? window : global;
}
function getNextId() {
    return ++globalState.mobxGuid;
}
function fail(message, thing) {
    invariant(false, message, thing);
    throw "X"; // unreachable
}
function invariant(check, message, thing) {
    if (!check) throw new Error("[mobx] Invariant failed: " + message + (thing ? " in '" + thing + "'" : ""));
}
/**
 * Prints a deprecation message, but only one time.
 * Returns false if the deprecated message was already printed before
 */
var deprecatedMessages = [];
function deprecated(msg) {
    if (deprecatedMessages.indexOf(msg) !== -1) return false;
    deprecatedMessages.push(msg);
    console.error("[mobx] Deprecated: " + msg);
    return true;
}
/**
 * Makes sure that the provided function is invoked at most once.
 */
function once(func) {
    var invoked = false;
    return function () {
        if (invoked) return;
        invoked = true;
        return func.apply(this, arguments);
    };
}
var noop = function noop() {};
function unique(list) {
    var res = [];
    list.forEach(function (item) {
        if (res.indexOf(item) === -1) res.push(item);
    });
    return res;
}
function joinStrings(things, limit, separator) {
    if (limit === void 0) {
        limit = 100;
    }
    if (separator === void 0) {
        separator = " - ";
    }
    if (!things) return "";
    var sliced = things.slice(0, limit);
    return "" + sliced.join(separator) + (things.length > limit ? " (... and " + (things.length - limit) + "more)" : "");
}
function isObject(value) {
    return value !== null && (typeof value === "undefined" ? "undefined" : _typeof(value)) === "object";
}
function isPlainObject(value) {
    if (value === null || (typeof value === "undefined" ? "undefined" : _typeof(value)) !== "object") return false;
    var proto = Object.getPrototypeOf(value);
    return proto === Object.prototype || proto === null;
}
function objectAssign() {
    var res = arguments[0];
    for (var i = 1, l = arguments.length; i < l; i++) {
        var source = arguments[i];
        for (var key in source) {
            if (hasOwnProperty(source, key)) {
                res[key] = source[key];
            }
        }
    }
    return res;
}
var prototypeHasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwnProperty(object, propName) {
    return prototypeHasOwnProperty.call(object, propName);
}
function makeNonEnumerable(object, propNames) {
    for (var i = 0; i < propNames.length; i++) {
        addHiddenProp(object, propNames[i], object[propNames[i]]);
    }
}
function addHiddenProp(object, propName, value) {
    Object.defineProperty(object, propName, {
        enumerable: false,
        writable: true,
        configurable: true,
        value: value
    });
}
function addHiddenFinalProp(object, propName, value) {
    Object.defineProperty(object, propName, {
        enumerable: false,
        writable: false,
        configurable: true,
        value: value
    });
}
function isPropertyConfigurable(object, prop) {
    var descriptor = Object.getOwnPropertyDescriptor(object, prop);
    return !descriptor || descriptor.configurable !== false && descriptor.writable !== false;
}
function assertPropertyConfigurable(object, prop) {
    invariant(isPropertyConfigurable(object, prop), "Cannot make property '" + prop + "' observable, it is not configurable and writable in the target object");
}
function createInstanceofPredicate(name, clazz) {
    var propName = "isMobX" + name;
    clazz.prototype[propName] = true;
    return function (x) {
        return isObject(x) && x[propName] === true;
    };
}
function areBothNaN(a, b) {
    return typeof a === "number" && typeof b === "number" && isNaN(a) && isNaN(b);
}
/**
 * Returns whether the argument is an array, disregarding observability.
 */
function isArrayLike(x) {
    return Array.isArray(x) || isObservableArray(x);
}
function isES6Map(thing) {
    if (getGlobal().Map !== undefined && thing instanceof getGlobal().Map) return true;
    return false;
}
function getMapLikeKeys(map$$1) {
    if (isPlainObject(map$$1)) return Object.keys(map$$1);
    if (Array.isArray(map$$1)) return map$$1.map(function (_a) {
        var key = _a[0];
        return key;
    });
    if (isES6Map(map$$1)) return Array.from(map$$1.keys());
    if (isObservableMap(map$$1)) return map$$1.keys();
    return fail("Cannot get keys from " + map$$1);
}
function iteratorToArray(it) {
    var res = [];
    while (true) {
        var r = it.next();
        if (r.done) break;
        res.push(r.value);
    }
    return res;
}
function primitiveSymbol() {
    return typeof Symbol === "function" && Symbol.toPrimitive || "@@toPrimitive";
}
function toPrimitive(value) {
    return value === null ? null : (typeof value === "undefined" ? "undefined" : _typeof(value)) === "object" ? "" + value : value;
}

/**
 * These values will persist if global state is reset
 */
var persistentKeys = ["mobxGuid", "resetId", "spyListeners", "strictMode", "runId"];
var MobXGlobals = /** @class */function () {
    function MobXGlobals() {
        /**
         * MobXGlobals version.
         * MobX compatiblity with other versions loaded in memory as long as this version matches.
         * It indicates that the global state still stores similar information
         */
        this.version = 5;
        /**
         * Currently running derivation
         */
        this.trackingDerivation = null;
        /**
         * Are we running a computation currently? (not a reaction)
         */
        this.computationDepth = 0;
        /**
         * Each time a derivation is tracked, it is assigned a unique run-id
         */
        this.runId = 0;
        /**
         * 'guid' for general purpose. Will be persisted amongst resets.
         */
        this.mobxGuid = 0;
        /**
         * Are we in a batch block? (and how many of them)
         */
        this.inBatch = 0;
        /**
         * Observables that don't have observers anymore, and are about to be
         * suspended, unless somebody else accesses it in the same batch
         *
         * @type {IObservable[]}
         */
        this.pendingUnobservations = [];
        /**
         * List of scheduled, not yet executed, reactions.
         */
        this.pendingReactions = [];
        /**
         * Are we currently processing reactions?
         */
        this.isRunningReactions = false;
        /**
         * Is it allowed to change observables at this point?
         * In general, MobX doesn't allow that when running computations and React.render.
         * To ensure that those functions stay pure.
         */
        this.allowStateChanges = true;
        /**
         * If strict mode is enabled, state changes are by default not allowed
         */
        this.strictMode = false;
        /**
         * Used by createTransformer to detect that the global state has been reset.
         */
        this.resetId = 0;
        /**
         * Spy callbacks
         */
        this.spyListeners = [];
        /**
         * Globally attached error handlers that react specifically to errors in reactions
         */
        this.globalReactionErrorHandlers = [];
    }
    return MobXGlobals;
}();
var globalState = new MobXGlobals();
var shareGlobalStateCalled = false;
var runInIsolationCalled = false;
var warnedAboutMultipleInstances = false;
{
    var global_1 = getGlobal();
    if (!global_1.__mobxInstanceCount) {
        global_1.__mobxInstanceCount = 1;
    } else {
        global_1.__mobxInstanceCount++;
        setTimeout(function () {
            if (!shareGlobalStateCalled && !runInIsolationCalled && !warnedAboutMultipleInstances) {
                warnedAboutMultipleInstances = true;
                console.warn("[mobx] Warning: there are multiple mobx instances active. This might lead to unexpected results. See https://github.com/mobxjs/mobx/issues/1082 for details.");
            }
        }, 1);
    }
}
function isolateGlobalState() {
    runInIsolationCalled = true;
    getGlobal().__mobxInstanceCount--;
}
function shareGlobalState() {
    // TODO: remove in 4.0; just use peer dependencies instead.
    deprecated("Using `shareGlobalState` is not recommended, use peer dependencies instead. See https://github.com/mobxjs/mobx/issues/1082 for details.");
    shareGlobalStateCalled = true;
    var global = getGlobal();
    var ownState = globalState;
    /**
     * Backward compatibility check
     */
    if (global.__mobservableTrackingStack || global.__mobservableViewStack) throw new Error("[mobx] An incompatible version of mobservable is already loaded.");
    if (global.__mobxGlobal && global.__mobxGlobal.version !== ownState.version) throw new Error("[mobx] An incompatible version of mobx is already loaded.");
    if (global.__mobxGlobal) globalState = global.__mobxGlobal;else global.__mobxGlobal = ownState;
}
function getGlobalState() {
    return globalState;
}

/**
 * For testing purposes only; this will break the internal state of existing observables,
 * but can be used to get back at a stable state after throwing errors
 */
function resetGlobalState() {
    globalState.resetId++;
    var defaultGlobals = new MobXGlobals();
    for (var key in defaultGlobals) {
        if (persistentKeys.indexOf(key) === -1) globalState[key] = defaultGlobals[key];
    }globalState.allowStateChanges = !globalState.strictMode;
}

function getAtom(thing, property) {
    if ((typeof thing === "undefined" ? "undefined" : _typeof(thing)) === "object" && thing !== null) {
        if (isObservableArray(thing)) {
            invariant(property === undefined, getMessage("m036"));
            return thing.$mobx.atom;
        }
        if (isObservableMap(thing)) {
            var anyThing = thing;
            if (property === undefined) return getAtom(anyThing._keys);
            var observable = anyThing._data[property] || anyThing._hasMap[property];
            invariant(!!observable, "the entry '" + property + "' does not exist in the observable map '" + getDebugName(thing) + "'");
            return observable;
        }
        // Initializers run lazily when transpiling to babel, so make sure they are run...
        runLazyInitializers(thing);
        if (property && !thing.$mobx) thing[property]; // See #1072 // TODO: remove in 4.0
        if (isObservableObject(thing)) {
            if (!property) return fail("please specify a property");
            var observable = thing.$mobx.values[property];
            invariant(!!observable, "no observable property '" + property + "' found on the observable object '" + getDebugName(thing) + "'");
            return observable;
        }
        if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {
            return thing;
        }
    } else if (typeof thing === "function") {
        if (isReaction(thing.$mobx)) {
            // disposer function
            return thing.$mobx;
        }
    }
    return fail("Cannot obtain atom from " + thing);
}
function getAdministration(thing, property) {
    invariant(thing, "Expecting some object");
    if (property !== undefined) return getAdministration(getAtom(thing, property));
    if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) return thing;
    if (isObservableMap(thing)) return thing;
    // Initializers run lazily when transpiling to babel, so make sure they are run...
    runLazyInitializers(thing);
    if (thing.$mobx) return thing.$mobx;
    invariant(false, "Cannot obtain administration from " + thing);
}
function getDebugName(thing, property) {
    var named;
    if (property !== undefined) named = getAtom(thing, property);else if (isObservableObject(thing) || isObservableMap(thing)) named = getAdministration(thing);else named = getAtom(thing); // valid for arrays as well
    return named.name;
}

function getDependencyTree(thing, property) {
    return nodeToDependencyTree(getAtom(thing, property));
}
function nodeToDependencyTree(node) {
    var result = {
        name: node.name
    };
    if (node.observing && node.observing.length > 0) result.dependencies = unique(node.observing).map(nodeToDependencyTree);
    return result;
}
function getObserverTree(thing, property) {
    return nodeToObserverTree(getAtom(thing, property));
}
function nodeToObserverTree(node) {
    var result = {
        name: node.name
    };
    if (hasObservers(node)) result.observers = getObservers(node).map(nodeToObserverTree);
    return result;
}

function hasObservers(observable) {
    return observable.observers && observable.observers.length > 0;
}
function getObservers(observable) {
    return observable.observers;
}
function addObserver(observable, node) {
    // invariant(node.dependenciesState !== -1, "INTERNAL ERROR, can add only dependenciesState !== -1");
    // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR add already added node");
    // invariantObservers(observable);
    var l = observable.observers.length;
    if (l) {
        // because object assignment is relatively expensive, let's not store data about index 0.
        observable.observersIndexes[node.__mapid] = l;
    }
    observable.observers[l] = node;
    if (observable.lowestObserverState > node.dependenciesState) observable.lowestObserverState = node.dependenciesState;
    // invariantObservers(observable);
    // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR didn't add node");
}
function removeObserver(observable, node) {
    // invariant(globalState.inBatch > 0, "INTERNAL ERROR, remove should be called only inside batch");
    // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR remove already removed node");
    // invariantObservers(observable);
    if (observable.observers.length === 1) {
        // deleting last observer
        observable.observers.length = 0;
        queueForUnobservation(observable);
    } else {
        // deleting from _observersIndexes is straight forward, to delete from _observers, let's swap `node` with last element
        var list = observable.observers;
        var map = observable.observersIndexes;
        var filler = list.pop(); // get last element, which should fill the place of `node`, so the array doesn't have holes
        if (filler !== node) {
            // otherwise node was the last element, which already got removed from array
            var index = map[node.__mapid] || 0; // getting index of `node`. this is the only place we actually use map.
            if (index) {
                // map store all indexes but 0, see comment in `addObserver`
                map[filler.__mapid] = index;
            } else {
                delete map[filler.__mapid];
            }
            list[index] = filler;
        }
        delete map[node.__mapid];
    }
    // invariantObservers(observable);
    // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR remove already removed node2");
}
function queueForUnobservation(observable) {
    if (!observable.isPendingUnobservation) {
        // invariant(globalState.inBatch > 0, "INTERNAL ERROR, remove should be called only inside batch");
        // invariant(observable._observers.length === 0, "INTERNAL ERROR, should only queue for unobservation unobserved observables");
        observable.isPendingUnobservation = true;
        globalState.pendingUnobservations.push(observable);
    }
}
/**
 * Batch starts a transaction, at least for purposes of memoizing ComputedValues when nothing else does.
 * During a batch `onBecomeUnobserved` will be called at most once per observable.
 * Avoids unnecessary recalculations.
 */
function startBatch() {
    globalState.inBatch++;
}
function endBatch() {
    if (--globalState.inBatch === 0) {
        runReactions();
        // the batch is actually about to finish, all unobserving should happen here.
        var list = globalState.pendingUnobservations;
        for (var i = 0; i < list.length; i++) {
            var observable = list[i];
            observable.isPendingUnobservation = false;
            if (observable.observers.length === 0) {
                observable.onBecomeUnobserved();
                // NOTE: onBecomeUnobserved might push to `pendingUnobservations`
            }
        }
        globalState.pendingUnobservations = [];
    }
}
function reportObserved(observable) {
    var derivation = globalState.trackingDerivation;
    if (derivation !== null) {
        /**
         * Simple optimization, give each derivation run an unique id (runId)
         * Check if last time this observable was accessed the same runId is used
         * if this is the case, the relation is already known
         */
        if (derivation.runId !== observable.lastAccessedBy) {
            observable.lastAccessedBy = derivation.runId;
            derivation.newObserving[derivation.unboundDepsCount++] = observable;
        }
    } else if (observable.observers.length === 0) {
        queueForUnobservation(observable);
    }
}
/**
 * NOTE: current propagation mechanism will in case of self reruning autoruns behave unexpectedly
 * It will propagate changes to observers from previous run
 * It's hard or maybe impossible (with reasonable perf) to get it right with current approach
 * Hopefully self reruning autoruns aren't a feature people should depend on
 * Also most basic use cases should be ok
 */
// Called by Atom when its value changes
function propagateChanged(observable) {
    // invariantLOS(observable, "changed start");
    if (observable.lowestObserverState === IDerivationState.STALE) return;
    observable.lowestObserverState = IDerivationState.STALE;
    var observers = observable.observers;
    var i = observers.length;
    while (i--) {
        var d = observers[i];
        if (d.dependenciesState === IDerivationState.UP_TO_DATE) {
            if (d.isTracing !== TraceMode.NONE) {
                logTraceInfo(d, observable);
            }
            d.onBecomeStale();
        }
        d.dependenciesState = IDerivationState.STALE;
    }
    // invariantLOS(observable, "changed end");
}
// Called by ComputedValue when it recalculate and its value changed
function propagateChangeConfirmed(observable) {
    // invariantLOS(observable, "confirmed start");
    if (observable.lowestObserverState === IDerivationState.STALE) return;
    observable.lowestObserverState = IDerivationState.STALE;
    var observers = observable.observers;
    var i = observers.length;
    while (i--) {
        var d = observers[i];
        if (d.dependenciesState === IDerivationState.POSSIBLY_STALE) d.dependenciesState = IDerivationState.STALE;else if (d.dependenciesState === IDerivationState.UP_TO_DATE // this happens during computing of `d`, just keep lowestObserverState up to date.
        ) observable.lowestObserverState = IDerivationState.UP_TO_DATE;
    }
    // invariantLOS(observable, "confirmed end");
}
// Used by computed when its dependency changed, but we don't wan't to immediately recompute.
function propagateMaybeChanged(observable) {
    // invariantLOS(observable, "maybe start");
    if (observable.lowestObserverState !== IDerivationState.UP_TO_DATE) return;
    observable.lowestObserverState = IDerivationState.POSSIBLY_STALE;
    var observers = observable.observers;
    var i = observers.length;
    while (i--) {
        var d = observers[i];
        if (d.dependenciesState === IDerivationState.UP_TO_DATE) {
            d.dependenciesState = IDerivationState.POSSIBLY_STALE;
            if (d.isTracing !== TraceMode.NONE) {
                logTraceInfo(d, observable);
            }
            d.onBecomeStale();
        }
    }
    // invariantLOS(observable, "maybe end");
}
function logTraceInfo(derivation, observable) {
    console.log("[mobx.trace] '" + derivation.name + "' is invalidated due to a change in: '" + observable.name + "'");
    if (derivation.isTracing === TraceMode.BREAK) {
        var lines = [];
        printDepTree(getDependencyTree(derivation), lines, 1);
        // prettier-ignore
        new Function("debugger;\n/*\nTracing '" + derivation.name + "'\n\nYou are entering this break point because derivation '" + derivation.name + "' is being traced and '" + observable.name + "' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n" + (derivation instanceof ComputedValue ? derivation.derivation.toString() : "") + "\n\nThe dependencies for this derivation are:\n\n" + lines.join("\n") + "\n*/\n    ")();
    }
}
function printDepTree(tree, lines, depth) {
    if (lines.length >= 1000) {
        lines.push("(and many more)");
        return;
    }
    lines.push("" + new Array(depth).join("\t") + tree.name); // MWE: not the fastest, but the easiest way :)
    if (tree.dependencies) tree.dependencies.forEach(function (child) {
        return printDepTree(child, lines, depth + 1);
    });
}

var IDerivationState;
(function (IDerivationState) {
    // before being run or (outside batch and not being observed)
    // at this point derivation is not holding any data about dependency tree
    IDerivationState[IDerivationState["NOT_TRACKING"] = -1] = "NOT_TRACKING";
    // no shallow dependency changed since last computation
    // won't recalculate derivation
    // this is what makes mobx fast
    IDerivationState[IDerivationState["UP_TO_DATE"] = 0] = "UP_TO_DATE";
    // some deep dependency changed, but don't know if shallow dependency changed
    // will require to check first if UP_TO_DATE or POSSIBLY_STALE
    // currently only ComputedValue will propagate POSSIBLY_STALE
    //
    // having this state is second big optimization:
    // don't have to recompute on every dependency change, but only when it's needed
    IDerivationState[IDerivationState["POSSIBLY_STALE"] = 1] = "POSSIBLY_STALE";
    // A shallow dependency has changed since last computation and the derivation
    // will need to recompute when it's needed next.
    IDerivationState[IDerivationState["STALE"] = 2] = "STALE";
})(IDerivationState || (exports.IDerivationState = IDerivationState = {}));
var TraceMode;
(function (TraceMode) {
    TraceMode[TraceMode["NONE"] = 0] = "NONE";
    TraceMode[TraceMode["LOG"] = 1] = "LOG";
    TraceMode[TraceMode["BREAK"] = 2] = "BREAK";
})(TraceMode || (TraceMode = {}));
var CaughtException = /** @class */function () {
    function CaughtException(cause) {
        this.cause = cause;
        // Empty
    }
    return CaughtException;
}();
function isCaughtException(e) {
    return e instanceof CaughtException;
}
/**
 * Finds out whether any dependency of the derivation has actually changed.
 * If dependenciesState is 1 then it will recalculate dependencies,
 * if any dependency changed it will propagate it by changing dependenciesState to 2.
 *
 * By iterating over the dependencies in the same order that they were reported and
 * stopping on the first change, all the recalculations are only called for ComputedValues
 * that will be tracked by derivation. That is because we assume that if the first x
 * dependencies of the derivation doesn't change then the derivation should run the same way
 * up until accessing x-th dependency.
 */
function shouldCompute(derivation) {
    switch (derivation.dependenciesState) {
        case IDerivationState.UP_TO_DATE:
            return false;
        case IDerivationState.NOT_TRACKING:
        case IDerivationState.STALE:
            return true;
        case IDerivationState.POSSIBLY_STALE:
            {
                var prevUntracked = untrackedStart(); // no need for those computeds to be reported, they will be picked up in trackDerivedFunction.
                var obs = derivation.observing,
                    l = obs.length;
                for (var i = 0; i < l; i++) {
                    var obj = obs[i];
                    if (isComputedValue(obj)) {
                        try {
                            obj.get();
                        } catch (e) {
                            // we are not interested in the value *or* exception at this moment, but if there is one, notify all
                            untrackedEnd(prevUntracked);
                            return true;
                        }
                        // if ComputedValue `obj` actually changed it will be computed and propagated to its observers.
                        // and `derivation` is an observer of `obj`
                        if (derivation.dependenciesState === IDerivationState.STALE) {
                            untrackedEnd(prevUntracked);
                            return true;
                        }
                    }
                }
                changeDependenciesStateTo0(derivation);
                untrackedEnd(prevUntracked);
                return false;
            }
    }
}
function isComputingDerivation() {
    return globalState.trackingDerivation !== null; // filter out actions inside computations
}
function checkIfStateModificationsAreAllowed(atom) {
    var hasObservers$$1 = atom.observers.length > 0;
    // Should never be possible to change an observed observable from inside computed, see #798
    if (globalState.computationDepth > 0 && hasObservers$$1) fail(getMessage("m031") + atom.name);
    // Should not be possible to change observed state outside strict mode, except during initialization, see #563
    if (!globalState.allowStateChanges && hasObservers$$1) fail(getMessage(globalState.strictMode ? "m030a" : "m030b") + atom.name);
}
/**
 * Executes the provided function `f` and tracks which observables are being accessed.
 * The tracking information is stored on the `derivation` object and the derivation is registered
 * as observer of any of the accessed observables.
 */
function trackDerivedFunction(derivation, f, context) {
    // pre allocate array allocation + room for variation in deps
    // array will be trimmed by bindDependencies
    changeDependenciesStateTo0(derivation);
    derivation.newObserving = new Array(derivation.observing.length + 100);
    derivation.unboundDepsCount = 0;
    derivation.runId = ++globalState.runId;
    var prevTracking = globalState.trackingDerivation;
    globalState.trackingDerivation = derivation;
    var result;
    try {
        result = f.call(context);
    } catch (e) {
        result = new CaughtException(e);
    }
    globalState.trackingDerivation = prevTracking;
    bindDependencies(derivation);
    return result;
}
/**
 * diffs newObserving with observing.
 * update observing to be newObserving with unique observables
 * notify observers that become observed/unobserved
 */
function bindDependencies(derivation) {
    // invariant(derivation.dependenciesState !== IDerivationState.NOT_TRACKING, "INTERNAL ERROR bindDependencies expects derivation.dependenciesState !== -1");
    var prevObserving = derivation.observing;
    var observing = derivation.observing = derivation.newObserving;
    var lowestNewObservingDerivationState = IDerivationState.UP_TO_DATE;
    // Go through all new observables and check diffValue: (this list can contain duplicates):
    //   0: first occurrence, change to 1 and keep it
    //   1: extra occurrence, drop it
    var i0 = 0,
        l = derivation.unboundDepsCount;
    for (var i = 0; i < l; i++) {
        var dep = observing[i];
        if (dep.diffValue === 0) {
            dep.diffValue = 1;
            if (i0 !== i) observing[i0] = dep;
            i0++;
        }
        // Upcast is 'safe' here, because if dep is IObservable, `dependenciesState` will be undefined,
        // not hitting the condition
        if (dep.dependenciesState > lowestNewObservingDerivationState) {
            lowestNewObservingDerivationState = dep.dependenciesState;
        }
    }
    observing.length = i0;
    derivation.newObserving = null; // newObserving shouldn't be needed outside tracking (statement moved down to work around FF bug, see #614)
    // Go through all old observables and check diffValue: (it is unique after last bindDependencies)
    //   0: it's not in new observables, unobserve it
    //   1: it keeps being observed, don't want to notify it. change to 0
    l = prevObserving.length;
    while (l--) {
        var dep = prevObserving[l];
        if (dep.diffValue === 0) {
            removeObserver(dep, derivation);
        }
        dep.diffValue = 0;
    }
    // Go through all new observables and check diffValue: (now it should be unique)
    //   0: it was set to 0 in last loop. don't need to do anything.
    //   1: it wasn't observed, let's observe it. set back to 0
    while (i0--) {
        var dep = observing[i0];
        if (dep.diffValue === 1) {
            dep.diffValue = 0;
            addObserver(dep, derivation);
        }
    }
    // Some new observed derivations may become stale during this derivation computation
    // so they have had no chance to propagate staleness (#916)
    if (lowestNewObservingDerivationState !== IDerivationState.UP_TO_DATE) {
        derivation.dependenciesState = lowestNewObservingDerivationState;
        derivation.onBecomeStale();
    }
}
function clearObserving(derivation) {
    // invariant(globalState.inBatch > 0, "INTERNAL ERROR clearObserving should be called only inside batch");
    var obs = derivation.observing;
    derivation.observing = [];
    var i = obs.length;
    while (i--) {
        removeObserver(obs[i], derivation);
    }derivation.dependenciesState = IDerivationState.NOT_TRACKING;
}
function untracked(action) {
    var prev = untrackedStart();
    var res = action();
    untrackedEnd(prev);
    return res;
}
function untrackedStart() {
    var prev = globalState.trackingDerivation;
    globalState.trackingDerivation = null;
    return prev;
}
function untrackedEnd(prev) {
    globalState.trackingDerivation = prev;
}
/**
 * needed to keep `lowestObserverState` correct. when changing from (2 or 1) to 0
 *
 */
function changeDependenciesStateTo0(derivation) {
    if (derivation.dependenciesState === IDerivationState.UP_TO_DATE) return;
    derivation.dependenciesState = IDerivationState.UP_TO_DATE;
    var obs = derivation.observing;
    var i = obs.length;
    while (i--) {
        obs[i].lowestObserverState = IDerivationState.UP_TO_DATE;
    }
}

function log(msg) {
    console.log(msg);
    return msg;
}
function whyRun(thing, prop) {
    deprecated("`whyRun` is deprecated in favor of `trace`");
    thing = getAtomFromArgs(arguments);
    if (!thing) return log(getMessage("m024"));
    if (isComputedValue(thing) || isReaction(thing)) return log(thing.whyRun());
    return fail(getMessage("m025"));
}
function trace() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var enterBreakPoint = false;
    if (typeof args[args.length - 1] === "boolean") enterBreakPoint = args.pop();
    var derivation = getAtomFromArgs(args);
    if (!derivation) {
        return fail("'trace(break?)' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly");
    }
    if (derivation.isTracing === TraceMode.NONE) {
        console.log("[mobx.trace] '" + derivation.name + "' tracing enabled");
    }
    derivation.isTracing = enterBreakPoint ? TraceMode.BREAK : TraceMode.LOG;
}
function getAtomFromArgs(args) {
    switch (args.length) {
        case 0:
            return globalState.trackingDerivation;
        case 1:
            return getAtom(args[0]);
        case 2:
            return getAtom(args[0], args[1]);
    }
}

var Reaction = /** @class */function () {
    function Reaction(name, onInvalidate) {
        if (name === void 0) {
            name = "Reaction@" + getNextId();
        }
        this.name = name;
        this.onInvalidate = onInvalidate;
        this.observing = []; // nodes we are looking at. Our value depends on these nodes
        this.newObserving = [];
        this.dependenciesState = IDerivationState.NOT_TRACKING;
        this.diffValue = 0;
        this.runId = 0;
        this.unboundDepsCount = 0;
        this.__mapid = "#" + getNextId();
        this.isDisposed = false;
        this._isScheduled = false;
        this._isTrackPending = false;
        this._isRunning = false;
        this.isTracing = TraceMode.NONE;
    }
    Reaction.prototype.onBecomeStale = function () {
        this.schedule();
    };
    Reaction.prototype.schedule = function () {
        if (!this._isScheduled) {
            this._isScheduled = true;
            globalState.pendingReactions.push(this);
            runReactions();
        }
    };
    Reaction.prototype.isScheduled = function () {
        return this._isScheduled;
    };
    /**
     * internal, use schedule() if you intend to kick off a reaction
     */
    Reaction.prototype.runReaction = function () {
        if (!this.isDisposed) {
            startBatch();
            this._isScheduled = false;
            if (shouldCompute(this)) {
                this._isTrackPending = true;
                this.onInvalidate();
                if (this._isTrackPending && isSpyEnabled()) {
                    // onInvalidate didn't trigger track right away..
                    spyReport({
                        object: this,
                        type: "scheduled-reaction"
                    });
                }
            }
            endBatch();
        }
    };
    Reaction.prototype.track = function (fn) {
        startBatch();
        var notify = isSpyEnabled();
        var startTime;
        if (notify) {
            startTime = Date.now();
            spyReportStart({
                object: this,
                type: "reaction",
                fn: fn
            });
        }
        this._isRunning = true;
        var result = trackDerivedFunction(this, fn, undefined);
        this._isRunning = false;
        this._isTrackPending = false;
        if (this.isDisposed) {
            // disposed during last run. Clean up everything that was bound after the dispose call.
            clearObserving(this);
        }
        if (isCaughtException(result)) this.reportExceptionInDerivation(result.cause);
        if (notify) {
            spyReportEnd({
                time: Date.now() - startTime
            });
        }
        endBatch();
    };
    Reaction.prototype.reportExceptionInDerivation = function (error) {
        var _this = this;
        if (this.errorHandler) {
            this.errorHandler(error, this);
            return;
        }
        var message = "[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '" + this;
        var messageToUser = getMessage("m037");
        console.error(message || messageToUser /* latter will not be true, make sure uglify doesn't remove */, error);
        /** If debugging brought you here, please, read the above message :-). Tnx! */
        if (isSpyEnabled()) {
            spyReport({
                type: "error",
                message: message,
                error: error,
                object: this
            });
        }
        globalState.globalReactionErrorHandlers.forEach(function (f) {
            return f(error, _this);
        });
    };
    Reaction.prototype.dispose = function () {
        if (!this.isDisposed) {
            this.isDisposed = true;
            if (!this._isRunning) {
                // if disposed while running, clean up later. Maybe not optimal, but rare case
                startBatch();
                clearObserving(this);
                endBatch();
            }
        }
    };
    Reaction.prototype.getDisposer = function () {
        var r = this.dispose.bind(this);
        r.$mobx = this;
        r.onError = registerErrorHandler;
        return r;
    };
    Reaction.prototype.toString = function () {
        return "Reaction[" + this.name + "]";
    };
    Reaction.prototype.whyRun = function () {
        var observing = unique(this._isRunning ? this.newObserving : this.observing).map(function (dep) {
            return dep.name;
        });
        return "\nWhyRun? reaction '" + this.name + "':\n * Status: [" + (this.isDisposed ? "stopped" : this._isRunning ? "running" : this.isScheduled() ? "scheduled" : "idle") + "]\n * This reaction will re-run if any of the following observables changes:\n    " + joinStrings(observing) + "\n    " + (this._isRunning ? " (... or any observable accessed during the remainder of the current run)" : "") + "\n\t" + getMessage("m038") + "\n";
    };
    Reaction.prototype.trace = function (enterBreakPoint) {
        if (enterBreakPoint === void 0) {
            enterBreakPoint = false;
        }
        trace(this, enterBreakPoint);
    };
    return Reaction;
}();
function registerErrorHandler(handler) {
    invariant(this && this.$mobx && isReaction(this.$mobx), "Invalid `this`");
    invariant(!this.$mobx.errorHandler, "Only one onErrorHandler can be registered");
    this.$mobx.errorHandler = handler;
}
function onReactionError(handler) {
    globalState.globalReactionErrorHandlers.push(handler);
    return function () {
        var idx = globalState.globalReactionErrorHandlers.indexOf(handler);
        if (idx >= 0) globalState.globalReactionErrorHandlers.splice(idx, 1);
    };
}
/**
 * Magic number alert!
 * Defines within how many times a reaction is allowed to re-trigger itself
 * until it is assumed that this is gonna be a never ending loop...
 */
var MAX_REACTION_ITERATIONS = 100;
var reactionScheduler = function reactionScheduler(f) {
    return f();
};
function runReactions() {
    // Trampolining, if runReactions are already running, new reactions will be picked up
    if (globalState.inBatch > 0 || globalState.isRunningReactions) return;
    reactionScheduler(runReactionsHelper);
}
function runReactionsHelper() {
    globalState.isRunningReactions = true;
    var allReactions = globalState.pendingReactions;
    var iterations = 0;
    // While running reactions, new reactions might be triggered.
    // Hence we work with two variables and check whether
    // we converge to no remaining reactions after a while.
    while (allReactions.length > 0) {
        if (++iterations === MAX_REACTION_ITERATIONS) {
            console.error("Reaction doesn't converge to a stable state after " + MAX_REACTION_ITERATIONS + " iterations." + (" Probably there is a cycle in the reactive function: " + allReactions[0]));
            allReactions.splice(0); // clear reactions
        }
        var remainingReactions = allReactions.splice(0);
        for (var i = 0, l = remainingReactions.length; i < l; i++) {
            remainingReactions[i].runReaction();
        }
    }
    globalState.isRunningReactions = false;
}
var isReaction = createInstanceofPredicate("Reaction", Reaction);
function setReactionScheduler(fn) {
    var baseScheduler = reactionScheduler;
    reactionScheduler = function reactionScheduler(f) {
        return fn(function () {
            return baseScheduler(f);
        });
    };
}

function asReference(value) {
    deprecated("asReference is deprecated, use observable.ref instead");
    return observable.ref(value);
}
function asStructure(value) {
    deprecated("asStructure is deprecated. Use observable.struct, computed.struct or reaction options instead.");
    return observable.struct(value);
}
function asFlat(value) {
    deprecated("asFlat is deprecated, use observable.shallow instead");
    return observable.shallow(value);
}
function asMap(data) {
    deprecated("asMap is deprecated, use observable.map or observable.shallowMap instead");
    return observable.map(data || {});
}

function createComputedDecorator(equals) {
    return createClassPropertyDecorator(function (target, name, _, __, originalDescriptor) {
        invariant(typeof originalDescriptor !== "undefined", getMessage("m009"));
        invariant(typeof originalDescriptor.get === "function", getMessage("m010"));
        var adm = asObservableObject(target, "");
        defineComputedProperty(adm, name, originalDescriptor.get, originalDescriptor.set, equals, false);
    }, function (name) {
        var observable = this.$mobx.values[name];
        if (observable === undefined // See #505
        ) return undefined;
        return observable.get();
    }, function (name, value) {
        this.$mobx.values[name].set(value);
    }, false, false);
}
var computedDecorator = createComputedDecorator(comparer.default);
var computedStructDecorator = createComputedDecorator(comparer.structural);
/**
 * Decorator for class properties: @computed get value() { return expr; }.
 * For legacy purposes also invokable as ES5 observable created: `computed(() => expr)`;
 */
var computed = function computed(arg1, arg2, arg3) {
    if (typeof arg2 === "string") {
        return computedDecorator.apply(null, arguments);
    }
    invariant(typeof arg1 === "function", getMessage("m011"));
    invariant(arguments.length < 3, getMessage("m012"));
    var opts = (typeof arg2 === "undefined" ? "undefined" : _typeof(arg2)) === "object" ? arg2 : {};
    opts.setter = typeof arg2 === "function" ? arg2 : opts.setter;
    var equals = opts.equals ? opts.equals : opts.compareStructural || opts.struct ? comparer.structural : comparer.default;
    return new ComputedValue(arg1, opts.context, equals, opts.name || arg1.name || "", opts.setter);
};
computed.struct = computedStructDecorator;
computed.equals = createComputedDecorator;

function isComputed(value, property) {
    if (value === null || value === undefined) return false;
    if (property !== undefined) {
        if (isObservableObject(value) === false) return false;
        if (!value.$mobx.values[property]) return false;
        var atom = getAtom(value, property);
        return isComputedValue(atom);
    }
    return isComputedValue(value);
}

function observe(thing, propOrCb, cbOrFire, fireImmediately) {
    if (typeof cbOrFire === "function") return observeObservableProperty(thing, propOrCb, cbOrFire, fireImmediately);else return observeObservable(thing, propOrCb, cbOrFire);
}
function observeObservable(thing, listener, fireImmediately) {
    return getAdministration(thing).observe(listener, fireImmediately);
}
function observeObservableProperty(thing, property, listener, fireImmediately) {
    return getAdministration(thing, property).observe(listener, fireImmediately);
}

function intercept(thing, propOrHandler, handler) {
    if (typeof handler === "function") return interceptProperty(thing, propOrHandler, handler);else return interceptInterceptable(thing, propOrHandler);
}
function interceptInterceptable(thing, handler) {
    return getAdministration(thing).intercept(handler);
}
function interceptProperty(thing, property, handler) {
    return getAdministration(thing, property).intercept(handler);
}

/**
 * expr can be used to create temporarily views inside views.
 * This can be improved to improve performance if a value changes often, but usually doesn't affect the outcome of an expression.
 *
 * In the following example the expression prevents that a component is rerender _each time_ the selection changes;
 * instead it will only rerenders when the current todo is (de)selected.
 *
 * reactiveComponent((props) => {
 *     const todo = props.todo;
 *     const isSelected = mobx.expr(() => props.viewState.selection === todo);
 *     return <div className={isSelected ? "todo todo-selected" : "todo"}>{todo.title}</div>
 * });
 *
 */
function expr(expr, scope) {
    if (!isComputingDerivation()) console.warn(getMessage("m013"));
    // optimization: would be more efficient if the expr itself wouldn't be evaluated first on the next change, but just a 'changed' signal would be fired
    return computed(expr, { context: scope }).get();
}

function toJS(source, detectCycles, __alreadySeen) {
    if (detectCycles === void 0) {
        detectCycles = true;
    }
    if (__alreadySeen === void 0) {
        __alreadySeen = [];
    }
    // optimization: using ES6 map would be more efficient!
    // optimization: lift this function outside toJS, this makes recursion expensive
    function cache(value) {
        if (detectCycles) __alreadySeen.push([source, value]);
        return value;
    }
    if (isObservable(source)) {
        if (detectCycles && __alreadySeen === null) __alreadySeen = [];
        if (detectCycles && source !== null && (typeof source === "undefined" ? "undefined" : _typeof(source)) === "object") {
            for (var i = 0, l = __alreadySeen.length; i < l; i++) {
                if (__alreadySeen[i][0] === source) return __alreadySeen[i][1];
            }
        }
        if (isObservableArray(source)) {
            var res = cache([]);
            var toAdd = source.map(function (value) {
                return toJS(value, detectCycles, __alreadySeen);
            });
            res.length = toAdd.length;
            for (var i = 0, l = toAdd.length; i < l; i++) {
                res[i] = toAdd[i];
            }return res;
        }
        if (isObservableObject(source)) {
            var res = cache({});
            for (var key in source) {
                res[key] = toJS(source[key], detectCycles, __alreadySeen);
            }return res;
        }
        if (isObservableMap(source)) {
            var res_1 = cache({});
            source.forEach(function (value, key) {
                return res_1[key] = toJS(value, detectCycles, __alreadySeen);
            });
            return res_1;
        }
        if (isObservableValue(source)) return toJS(source.get(), detectCycles, __alreadySeen);
    }
    return source;
}

function createTransformer(transformer, onCleanup) {
    invariant(typeof transformer === "function" && transformer.length < 2, "createTransformer expects a function that accepts one argument");
    // Memoizes: object id -> reactive view that applies transformer to the object
    var objectCache = {};
    // If the resetId changes, we will clear the object cache, see #163
    // This construction is used to avoid leaking refs to the objectCache directly
    var resetId = globalState.resetId;
    // Local transformer class specifically for this transformer
    var Transformer = /** @class */function (_super) {
        __extends(Transformer, _super);
        function Transformer(sourceIdentifier, sourceObject) {
            var _this = _super.call(this, function () {
                return transformer(sourceObject);
            }, undefined, comparer.default, "Transformer-" + transformer.name + "-" + sourceIdentifier, undefined) || this;
            _this.sourceIdentifier = sourceIdentifier;
            _this.sourceObject = sourceObject;
            return _this;
        }
        Transformer.prototype.onBecomeUnobserved = function () {
            var lastValue = this.value;
            _super.prototype.onBecomeUnobserved.call(this);
            delete objectCache[this.sourceIdentifier];
            if (onCleanup) onCleanup(lastValue, this.sourceObject);
        };
        return Transformer;
    }(ComputedValue);
    return function (object) {
        if (resetId !== globalState.resetId) {
            objectCache = {};
            resetId = globalState.resetId;
        }
        var identifier = getMemoizationId(object);
        var reactiveTransformer = objectCache[identifier];
        if (reactiveTransformer) return reactiveTransformer.get();
        // Not in cache; create a reactive view
        reactiveTransformer = objectCache[identifier] = new Transformer(identifier, object);
        return reactiveTransformer.get();
    };
}
function getMemoizationId(object) {
    if (typeof object === "string" || typeof object === "number") return object;
    if (object === null || (typeof object === "undefined" ? "undefined" : _typeof(object)) !== "object") throw new Error("[mobx] transform expected some kind of object or primitive value, got: " + object);
    var tid = object.$transformId;
    if (tid === undefined) {
        tid = getNextId();
        addHiddenProp(object, "$transformId", tid);
    }
    return tid;
}

function interceptReads(thing, propOrHandler, handler) {
    var target;
    if (isObservableMap(thing) || isObservableArray(thing) || isObservableValue(thing)) {
        target = getAdministration(thing);
    } else if (isObservableObject(thing)) {
        if (typeof propOrHandler !== "string") return fail("InterceptReads can only be used with a specific property, not with an object in general");
        target = getAdministration(thing, propOrHandler);
    } else {
        return fail("Expected observable map, object or array as first array");
    }
    if (target.dehancer !== undefined) return fail("An intercept reader was already established");
    target.dehancer = typeof propOrHandler === "function" ? propOrHandler : handler;
    return function () {
        target.dehancer = undefined;
    };
}

/**
 * (c) Michel Weststrate 2015 - 2016
 * MIT Licensed
 *
 * Welcome to the mobx sources! To get an global overview of how MobX internally works,
 * this is a good place to start:
 * https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.xvbh6qd74
 *
 * Source folders:
 * ===============
 *
 * - api/     Most of the public static methods exposed by the module can be found here.
 * - core/    Implementation of the MobX algorithm; atoms, derivations, reactions, dependency trees, optimizations. Cool stuff can be found here.
 * - types/   All the magic that is need to have observable objects, arrays and values is in this folder. Including the modifiers like `asFlat`.
 * - utils/   Utility stuff.
 *
 */
var extras = {
    allowStateChanges: allowStateChanges,
    deepEqual: deepEqual,
    getAtom: getAtom,
    getDebugName: getDebugName,
    getDependencyTree: getDependencyTree,
    getAdministration: getAdministration,
    getGlobalState: getGlobalState,
    getObserverTree: getObserverTree,
    interceptReads: interceptReads,
    isComputingDerivation: isComputingDerivation,
    isSpyEnabled: isSpyEnabled,
    onReactionError: onReactionError,
    reserveArrayBuffer: reserveArrayBuffer,
    resetGlobalState: resetGlobalState,
    isolateGlobalState: isolateGlobalState,
    shareGlobalState: shareGlobalState,
    spyReport: spyReport,
    spyReportEnd: spyReportEnd,
    spyReportStart: spyReportStart,
    setReactionScheduler: setReactionScheduler
};
var everything = {
    Reaction: Reaction,
    untracked: untracked,
    Atom: Atom,
    BaseAtom: BaseAtom,
    useStrict: useStrict,
    isStrictModeEnabled: isStrictModeEnabled,
    spy: spy,
    comparer: comparer,
    asReference: asReference,
    asFlat: asFlat,
    asStructure: asStructure,
    asMap: asMap,
    isModifierDescriptor: isModifierDescriptor,
    isObservableObject: isObservableObject,
    isBoxedObservable: isObservableValue,
    isObservableArray: isObservableArray,
    ObservableMap: ObservableMap,
    isObservableMap: isObservableMap,
    map: map,
    transaction: transaction,
    observable: observable,
    computed: computed,
    isObservable: isObservable,
    isComputed: isComputed,
    extendObservable: extendObservable,
    extendShallowObservable: extendShallowObservable,
    observe: observe,
    intercept: intercept,
    autorun: autorun,
    autorunAsync: autorunAsync,
    when: when,
    reaction: reaction,
    action: action,
    isAction: isAction,
    runInAction: runInAction,
    expr: expr,
    toJS: toJS,
    createTransformer: createTransformer,
    whyRun: whyRun,
    isArrayLike: isArrayLike,
    extras: extras
};
var warnedAboutDefaultExport = false;
var _loop_1 = function _loop_1(p) {
    var val = everything[p];
    Object.defineProperty(everything, p, {
        get: function get() {
            if (!warnedAboutDefaultExport) {
                warnedAboutDefaultExport = true;
                console.warn("Using default export (`import mobx from 'mobx'`) is deprecated " + "and wonât work in mobx@4.0.0\n" + "Use `import * as mobx from 'mobx'` instead");
            }
            return val;
        }
    });
};
for (var p in everything) {
    _loop_1(p);
}
if ((typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === "undefined" ? "undefined" : _typeof(__MOBX_DEVTOOLS_GLOBAL_HOOK__)) === "object") {
    __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({ spy: spy, extras: extras });
}

exports.extras = extras;
exports.Reaction = Reaction;
exports.untracked = untracked;
exports.IDerivationState = IDerivationState;
exports.Atom = Atom;
exports.BaseAtom = BaseAtom;
exports.useStrict = useStrict;
exports.isStrictModeEnabled = isStrictModeEnabled;
exports.spy = spy;
exports.comparer = comparer;
exports.asReference = asReference;
exports.asFlat = asFlat;
exports.asStructure = asStructure;
exports.asMap = asMap;
exports.isModifierDescriptor = isModifierDescriptor;
exports.isObservableObject = isObservableObject;
exports.isBoxedObservable = isObservableValue;
exports.isObservableArray = isObservableArray;
exports.ObservableMap = ObservableMap;
exports.isObservableMap = isObservableMap;
exports.map = map;
exports.transaction = transaction;
exports.observable = observable;
exports.computed = computed;
exports.isObservable = isObservable;
exports.isComputed = isComputed;
exports.extendObservable = extendObservable;
exports.extendShallowObservable = extendShallowObservable;
exports.observe = observe;
exports.intercept = intercept;
exports.autorun = autorun;
exports.autorunAsync = autorunAsync;
exports.when = when;
exports.reaction = reaction;
exports.action = action;
exports.isAction = isAction;
exports.runInAction = runInAction;
exports.expr = expr;
exports.toJS = toJS;
exports.createTransformer = createTransformer;
exports.whyRun = whyRun;
exports.trace = trace;
exports.isArrayLike = isArrayLike;
exports.default = everything;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(33)))

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
var NetworkActions = module.exports;
var Logger = __webpack_require__(44);
var Twitch = __webpack_require__(48);

var asyncJSON = __webpack_require__(124);

var EMPTY_RESPONSE = { 'ok': false, 'json': {}, 'response': null

    /**
     * Parse a Response object, logging errors and returning JSON.
     * @param {Response} response The Response object returned from a fetch call.
     *
     * @returns {object} An object with keys 'ok', 'json', and 'response'
     * @example {'ok': true, 'json': {'playlist': ['a', 'b', 'c']}, 'response': <Response>}
     */
};NetworkActions.parseResponse = function (response) {
    // Handle 4xx/5xx errors in one place
    if (!response.ok) {
        return response.json().then(function (body) {
            Logger.error("Error code returned from server. Code: ", response.status, "Body: ", body);
            return { 'ok': false, 'json': body, 'response': response };
        }).catch(function (_) {
            Logger.error("Error code returned from server, and body unparsable as JSON. Code: ", response.status);
            return { 'ok': false, 'json': {}, 'response': response };
        });
    }
    return response.json().then(function (body) {
        return { 'ok': true, 'json': body, 'response': response };
    });
};

/**
 * Adds provided headers to an assumed default list.
 * @param {object} supplementalHeaders A set of headers to supplement or replace the existing headers.
 * @example {"Authorization": "abc", "Client-ID": auth.clientId }
 *
 * @returns {object} The built headers set
 * @example {"Authorization": "abc", "Content-Type": "application/json", "Client-ID": "jfoaij341235"}
 */
NetworkActions.buildHeaders = function (supplementalHeaders) {
    var headers = {
        "Authorization": Twitch.store.viewer.token,
        "Content-Type": "application/json"
    };
    if ((typeof supplementalHeaders === "undefined" ? "undefined" : _typeof(supplementalHeaders)) !== undefined) {
        Object.assign(headers, supplementalHeaders);
    }
    return headers;
};

/**
 * Send a GET request to a given URI.
 * @param {Nimble.uri} uri A Nimble.uri object
 * @example new Nimble.uri(ENDPOINTS[__STAGE__].POLL_URI)
 *
 * @param {object} params A set of k/v pairs to be replaced in the URI
 * @example {'channelId': 225960490}
 *
 * @param {object} headers A set of k/v pairs to be used as headers for the request in addition to or overwriting the default headers.
 * @default {"Authorization": <viewers_token>, "Content-Type": "application/json"}
 * @example {"Accept": "application/vnd.twitchtv.v5+json", "Client-ID": auth.clientId }
 *
 * @param queryParameters A set of k/v pairs to be used as query params for this request
 * @example {"extension": "PICKS"}
 *
 * @returns {Promise<Response>} A promise that eventually resolves into an object with fields 'ok', 'json', 'response'
 * @example {'ok': true/false, 'json': {...}, 'response': <ResponseObject>}
 */
NetworkActions.getJSON = function (uri, params, headers) {
    var queryParameters = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;

    var allHeaders = NetworkActions.buildHeaders(headers);
    return window.fetch(uri(params, queryParameters), { "method": "GET", "headers": allHeaders }).then(NetworkActions.parseResponse).catch(function (error) {
        Logger.error("Error occurred making GET request: ", error);
        return EMPTY_RESPONSE;
    });
};

/**
 * Send a POST request to a given URI.
 * @param {Nimble.uri} uri A Nimble.uri object
 * @example new Nimble.uri(ENDPOINTS[__STAGE__].POLL_URI)
 *
 * @param {object} params A set of k/v pairs to be replaced in the URI
 * @example {'channelId': 225960490}
 *
 * @param {object} body A set of k/v pairs representing the POST body. Must be JSON serializable via JSON.stringify()
 * @example  {"tokenDelta": 25}
 *
 * @param {object} headers A set of k/v pairs to be used as headers for the request in addition to or overwriting the default headers.
 * @default {"Authorization": <viewers_token>, "Content-Type": "application/json"}
 * @example {"Accept": "application/vnd.twitchtv.v5+json", "Client-ID": auth.clientId }
 *
 * @param queryParameters A set of k/v pairs to be used as query params for this request
 * @example {"extension": "ARCADE"}
 *
 * @returns {Promise<object>} A promise that eventually resolves into an object with fields 'ok', 'json', 'response'
 * @example {'ok': true/false, 'json': {...}, 'response': <ResponseObject>}
 */
NetworkActions.postJSON = function (uri, params, body, headers) {
    var queryParameters = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

    // Parse json body to string for fetch, returning if failed.
    return asyncJSON.stringify(body).then(function (json) {
        var allHeaders = NetworkActions.buildHeaders(headers);
        return window.fetch(uri(params, queryParameters), { "method": "POST", "headers": allHeaders, "body": json }).then(NetworkActions.parseResponse).catch(function (error) {
            Logger.error("Error occurred making POST request: ", error);
            return { 'ok': false, 'json': {}, 'response': null };
        });
    }).catch(function (error) {
        Logger.error("Error stringifying JSON body. Error: ", error);
        return EMPTY_RESPONSE;
    });
};

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(125);

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (exports, undefined) {
    "use strict";

    if (!JSON || !JSON.stringify) {
        // older browsers
        throw new Error("The json2.js file must be included before async-json.js");
    }
    var jsonStringify = JSON.stringify;
    var isArray = Array.isArray || function (o) {
        // older browsers
        return Object.prototype.toString.call(o) === '[object Array]';
    };
    var getKeys = Object.keys || function () {
        // older browsers

        var has = Object.prototype.hasOwnProperty || function () {
            // Object.prototype.hasOwnProperty should really always exist.
            return true;
        };

        return function (obj) {
            var result = [];
            for (var key in obj) {
                if (has.call(obj, key)) {
                    result.push(key);
                }
            }
            return result;
        };
    }();

    var _stringify;

    /**
     * Stringify an array
     *
     * @param {Array} array The array to stringify.
     * @param {Function} callback The callback to invoke when completed the stringification.
     * @api private
     *
     * @example internalStringifyArray([1, 2, 3], function(err, value) { value === "[1,2,3]"; });
     */
    var internalStringifyArray = function internalStringifyArray(array, callback) {
        var len = array.length;
        if (len === 0) {
            callback(null, "[]");
            return;
        }

        // buffer is our ultimate return value
        var buffer = "[";

        var handle = function handle(n) {
            if (n === len) {
                // we're done
                buffer += "]";
                callback(null, buffer);
                return;
            }

            // asynchronously stringify the nth element.
            _stringify(array[n], function (err, value) {
                if (err) {
                    callback(err);
                    return;
                }

                if (n > 0) {
                    buffer += ",";
                }

                if (value === undefined) {
                    // JSON.stringify turns bad values in arrays into null, so we need to as well
                    buffer += "null";
                } else {
                    buffer += value;
                }

                // go to the next element
                handle(n + 1);
            }, String(n));
        };
        // let's pump, starting at index 0
        handle(0);
    };

    /**
     * Stringify an object
     *
     * @param {Object} object The object to stringify.
     * @param {Function} callback The callback to invoke when completed the stringification.
     * @api private
     *
     * @example internalStringifyObject({alpha: 1, bravo: 2}, function(err, value) { value === '{"alpha":1,"bravo":2}'; });
     */
    var internalStringifyObject = function internalStringifyObject(object, callback) {
        // getKeys _should_ be a reference to Object.keys
        // JSON.stringify gets the keys in the same order as this, but that is arbitrary.
        var keys = getKeys(object);
        var len = keys.length;
        if (len === 0) {
            callback(null, "{}");
            return;
        }

        // whether or not we've placed the first element in yet.
        // can't rely on i === 0, since we might skip it if the value === undefined.
        var first = true;

        // buffer is our ultimate return value
        var buffer = "{";

        var handle = function handle(n) {
            if (n === len) {
                buffer += "}";
                callback(null, buffer);
                return;
            }

            var key = keys[n];
            // asynchronously stringify the nth element in our list of keys
            _stringify(object[key], function (err, value) {
                if (err) {
                    callback(err);
                    return;
                }

                // if we get an undefined, rather than placing in null like the array does, we just skip it.
                if (value !== undefined) {
                    if (first) {
                        first = false;
                    } else {
                        buffer += ",";
                    }

                    buffer += jsonStringify(key);
                    buffer += ":";
                    buffer += value;
                }

                // go to the next key
                handle(n + 1);
            }, key);
        };
        // let's pump, starting at index 0
        handle(0);
    };

    /**
     * Asynchronously convert a JavaScript object to JSON.
     * If any functions are supplied in the data, it will be invoked.
     * If the function has 0 parameters, it will be invoked and treated as synchronous, its return value being its replacement.
     * Otherwise, the first parameter is assumed to be a callback which should be invoked as callback(error, result)
     * 
     * @param {Any} data Any JavaScript object.
     * @param {Function} callback A callback that takes an error and the result as parameters.
     * @api public
     *
     * @example stringify({some: "data"}, function(err, value) { if (err) { throw err; } value === '{"some":"data"}' })
     */
    exports.stringify = _stringify = function stringify(data, callback, key) {
        if (data === undefined) {
            return callback(null, undefined);
        }
        try {
            switch (typeof data === "undefined" ? "undefined" : _typeof(data)) {
                case "string":
                case "number":
                    return callback(null, jsonStringify(data));
                case "boolean":
                    return callback(null, data ? "true" : "false");
                case "object":
                    if (data === null) {
                        // why is typeof null === "object"?
                        return callback(null, "null");
                    } else if (typeof data.toJSON === "function") {
                        // used by Date and possibly some others.
                        return _stringify(data.toJSON(key), callback, key);
                    } else if (data.constructor === String || data.constructor === Number || data.constructor === Boolean) {
                        // horrible, someone used the new String(), new Number(), or new Boolean() syntax.
                        return _stringify(data.valueOf(), callback, key);
                    } else if (isArray(data)) {
                        return internalStringifyArray(data, callback);
                    } else {
                        return internalStringifyObject(data, callback);
                    }
                    break;
                case "function":
                    if (data.length === 0) {
                        // assume a sync function that returns a value
                        return _stringify(data(), callback, key);
                    } else {
                        // assume an async function that takes a callback
                        return data(function (err, value) {
                            if (err) {
                                callback(err);
                            } else {
                                _stringify(value, callback, key);
                            }
                        });
                    }
                    break;
                default:
                    throw new Error("Unknown object type: " + (typeof data === "undefined" ? "undefined" : _typeof(data)));
            }
        } catch (err) {
            return callback(err);
        }
    };
})(exports || (undefined.asyncJSON = {}));

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

// Converts from the AGS Loc XML to JSON.
// https://wiki.agscollab.com/display/AGSCG/Loc+XML
// https://github.com/Leonidas-from-XIV/node-xml2js#options

module.exports = function flattenLocXML(locxml) {
    if (locxml == null || locxml.resources == null || locxml.resources.string == null) {
        return {};
    }
    var list = locxml.resources.string;

    var set = {};

    list.forEach(function (value) {
        set[value.$.key] = value._;
    });

    return set;
};

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

var React = __webpack_require__(5);
var Nimble = __webpack_require__(6);

__webpack_require__(128);

var LEADERBOARD_RENDER_LENGTH = 10;
var LEADERBOARD_TOP_RENDER_LENGTH = 1;
var LEADERBOARD_AROUND_ME_RENDER_LENGTH = 1;

var BIG_ROW_COUNT = 9;
var SMALL_ROW_COUNT = 5;

module.exports = function (_React$Component) {
    _inherits(NimbleLeaderboard, _React$Component);

    function NimbleLeaderboard() {
        _classCallCheck(this, NimbleLeaderboard);

        return _possibleConstructorReturn(this, (NimbleLeaderboard.__proto__ || Object.getPrototypeOf(NimbleLeaderboard)).apply(this, arguments));
    }

    _createClass(NimbleLeaderboard, [{
        key: "render",
        value: function render() {
            return React.createElement(
                "div",
                { className: this.className },
                React.createElement(
                    "div",
                    { className: "entries" },
                    this.entries
                )
            );
        }
    }, {
        key: "className",
        get: function get() {
            return "NimbleLeaderboard scoped-to-" + this.props.scope;
        }
    }, {
        key: "leaderboardKey",
        get: function get() {
            return this.props.activity + "/" + this.props.scope;
        }
    }, {
        key: "entries",
        get: function get() {
            var topEntries = Nimble.twitchsparks.leaderboards[this.leaderboardKey + "/top"];
            var aroundEntries = Nimble.twitchsparks.leaderboards[this.leaderboardKey + "/around"];

            var entries = [];
            for (var i = 0; i < (this.props.size === "big" ? BIG_ROW_COUNT : SMALL_ROW_COUNT); i += 1) {
                entries[i] = entries[i] || undefined;
            }

            if (topEntries !== undefined && aroundEntries !== undefined) {
                var viewerName = Nimble.twitch.store.viewer.name || "@" + Nimble.twitch.store.viewer.opaqueUserId;
                var viewerEntry = aroundEntries.find(function (entry) {
                    return entry.name === viewerName;
                });
                if (viewerEntry !== undefined) {
                    if (this.props.size === "big") {
                        if (viewerEntry.rank >= BIG_ROW_COUNT - 2) {
                            entries[0] = topEntries[0];
                            entries[1] = topEntries[1];
                            entries[2] = topEntries[2];
                            entries[3] = "...";
                            entries[4] = aroundEntries[0];
                            entries[5] = aroundEntries[1];
                            entries[6] = aroundEntries[2];
                            entries[7] = aroundEntries[3];
                            entries[8] = aroundEntries[4];
                        } else {
                            entries[0] = topEntries[0];
                            entries[1] = topEntries[1];
                            entries[2] = topEntries[2];
                            entries[3] = topEntries[3];
                            entries[4] = topEntries[4];
                            entries[5] = topEntries[5];
                            entries[6] = topEntries[6];
                            entries[7] = topEntries[7];
                            entries[8] = topEntries[8];
                        }
                    } else {
                        if (viewerEntry.rank >= SMALL_ROW_COUNT - 1) {
                            entries[0] = topEntries[0];
                            entries[1] = "...";
                            entries[2] = aroundEntries[1];
                            entries[3] = aroundEntries[2];
                            entries[4] = aroundEntries[3];
                        } else {
                            entries[0] = topEntries[0];
                            entries[1] = topEntries[1];
                            entries[2] = topEntries[2];
                            entries[3] = topEntries[3];
                            entries[4] = topEntries[4];
                        }
                    }
                } else {
                    if (this.props.size === "big") {
                        entries[0] = topEntries[0];
                        entries[1] = topEntries[1];
                        entries[2] = topEntries[2];
                        entries[3] = topEntries[3];
                        entries[4] = topEntries[4];
                        entries[5] = topEntries[5];
                        entries[6] = topEntries[6];
                        entries[7] = topEntries[7];
                        entries[8] = topEntries[8];
                    } else {
                        entries[0] = topEntries[0];
                        entries[1] = topEntries[1];
                        entries[2] = topEntries[2];
                        entries[3] = topEntries[3];
                        entries[4] = topEntries[4];
                    }
                }
            }

            // // Waiting for localization before uncommenting this.
            // if(topEntries !== undefined && topEntries.length === 0
            // && aroundEntries !== undefined && aroundEntries.length === 0) {
            //     entries[1] = "No entries... yet!!"
            // }

            return entries.map(function (entry, index) {
                if (entry === undefined) {
                    return React.createElement("div", { className: "entry isEmpty", key: index });
                } else if (typeof entry === "string") {
                    return React.createElement(
                        "div",
                        { className: "entry isString", key: index },
                        entry
                    );
                } else {
                    return React.createElement(LeaderboardEntry, { entry: entry, key: index });
                }
            });
        }
    }]);

    return NimbleLeaderboard;
}(React.Component);

var LeaderboardEntry = function (_React$Component2) {
    _inherits(LeaderboardEntry, _React$Component2);

    function LeaderboardEntry() {
        _classCallCheck(this, LeaderboardEntry);

        return _possibleConstructorReturn(this, (LeaderboardEntry.__proto__ || Object.getPrototypeOf(LeaderboardEntry)).apply(this, arguments));
    }

    _createClass(LeaderboardEntry, [{
        key: "render",
        value: function render() {
            return React.createElement(
                "div",
                { className: "entry " + (this.isYou ? "isYou" : ""), onMouseDown: this.onMouseDown,
                    title: this.isYou && this.isPrivate ? "Grant us your Twitch ID!" : "" },
                React.createElement(
                    "span",
                    { className: "rank" },
                    this.props.entry.rank
                ),
                React.createElement(
                    "span",
                    { className: "name" },
                    this.name
                ),
                React.createElement(
                    "span",
                    { className: "score" },
                    this.props.entry.score || 0
                )
            );
        }
    }, {
        key: "name",
        get: function get() {
            if (this.isPrivate) {
                return "Private Player" + (this.isYou ? "?" : "");
            } else {
                return this.props.entry.name;
            }
        }
    }, {
        key: "prompt",
        get: function get() {
            if (this.isYou && this.isPrivate) {
                return React.createElement(
                    "svg",
                    { className: "prompt", width: "20px", height: "20px", version: "1.1", viewBox: "0 0 20 20", x: "0px", y: "0px" },
                    React.createElement("path", { d: "M7 9C5.346 9 4 7.654 4 6s1.346-3 3-3 3 1.346 3 3-1.346 3-3 3zm5.526 2.947a.86.86 0 0 1 .474.767v3.428a.858.858 0 0 1-.858.858H1.857A.857.857 0 0 1 1 16.142v-3.428c0-.325.183-.62.473-.767C1.551 11.91 3.41 11 7 11s5.45.91 5.526.947zm3.784-6.909a.5.5 0 0 1 .544.107l2 2.503a.495.495 0 0 1 0 .703l-2 2.503a.5.5 0 0 1-.853-.35V8.997h-3.502a.499.499 0 0 1-.5-.497V7.51c0-.275.225-.497.5-.497H16V5.497c0-.2.122-.382.309-.459z", "fill-rule": "evenodd" })
                );
            }
        }
    }, {
        key: "isYou",
        get: function get() {
            return this.props.entry.name === Nimble.twitch.store.viewer.name || this.props.entry.name === "@" + Nimble.twitch.store.viewer.opaqueUserId;
        }
    }, {
        key: "isPrivate",
        get: function get() {
            return this.props.entry.name[0] === "@";
        }
    }, {
        key: "onMouseDown",
        get: function get() {
            var _this3 = this;

            return function (event) {
                if (_this3.isYou && _this3.isPrivate) {
                    window.Twitch.ext.actions.requestIdShare();
                }
            };
        }
    }]);

    return LeaderboardEntry;
}(React.Component);

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(129);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(4)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/less-loader/dist/cjs.js!./Leaderboard.view.less", function() {
			var newContent = require("!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/less-loader/dist/cjs.js!./Leaderboard.view.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(3)(false);
// imports


// module
exports.push([module.i, ".NimbleLeaderboard {\n  color: #FFF;\n  text-align: left;\n  border-radius: 0.5em;\n  opacity: 1;\n  transition-duration: 2s;\n  transition-property: opacity;\n}\n.NimbleLeaderboard.scoped-to-global .entry:not(:nth-child(2n)) {\n  background-color: rgba(100, 65, 164, 0.75);\n}\n.NimbleLeaderboard.scoped-to-global .entry:nth-child(2n) {\n  background-color: rgba(100, 65, 164, 0.6);\n}\n.NimbleLeaderboard.scoped-to-global .entry.isYou {\n  background-color: #6441A4;\n}\n.NimbleLeaderboard.scoped-to-channel .entry:not(:nth-child(2n)) {\n  background-color: rgba(240, 95, 80, 0.75);\n}\n.NimbleLeaderboard.scoped-to-channel .entry:nth-child(2n) {\n  background-color: rgba(240, 95, 80, 0.6);\n}\n.NimbleLeaderboard.scoped-to-channel .entry.isYou {\n  background-color: #F05F50;\n}\n.NimbleLeaderboard.scoped-to-session .entry:not(:nth-child(2n)) {\n  background-color: rgba(55, 166, 116, 0.75);\n}\n.NimbleLeaderboard.scoped-to-session .entry:nth-child(2n) {\n  background-color: rgba(55, 166, 116, 0.6);\n}\n.NimbleLeaderboard.scoped-to-session .entry.isYou {\n  background-color: #37A674;\n}\n.NimbleLeaderboard .entries .entry {\n  display: flex;\n  font-size: 0.5em;\n  font-family: \"Oswald\", inherit;\n  padding: 0.25em 0.4045em;\n}\n.NimbleLeaderboard .entries .entry:first-of-type {\n  border-top-left-radius: 0.2em;\n  border-top-right-radius: 0.2em;\n}\n.NimbleLeaderboard .entries .entry:last-of-type {\n  border-bottom-left-radius: 0.2em;\n  border-bottom-right-radius: 0.2em;\n}\n.NimbleLeaderboard .entries .entry.isEmpty::after {\n  content: \"-\";\n}\n.NimbleLeaderboard .entries .entry.isString {\n  display: block;\n  text-align: center;\n}\n.NimbleLeaderboard .entries .entry.isYou {\n  margin-left: -0.5em;\n  border-top-left-radius: 0.2em;\n  border-bottom-left-radius: 0.2em;\n}\n.NimbleLeaderboard .entries .entry .rank {\n  opacity: 0.25;\n  margin-right: 0.5em;\n}\n.NimbleLeaderboard .entries .entry .rank:after {\n  content: \". \";\n}\n.NimbleLeaderboard .entries .entry .name {\n  flex: 1;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n.NimbleLeaderboard .entries .entry .score {\n  margin-left: 0.25em;\n  text-align: right;\n}\n.NimbleLeaderboard .entries .entry .prompt {\n  fill: #FFF;\n  vertical-align: bottom;\n}\n.NimbleLeaderboard .entries .entry:hover .prompt {\n  fill: #111;\n}\n", ""]);

// exports


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

var React = __webpack_require__(5);
var Nimble = __webpack_require__(6);

__webpack_require__(131);

module.exports = function (_React$Component) {
    _inherits(NimbleBrowsableLeaderboard, _React$Component);

    function NimbleBrowsableLeaderboard(props) {
        _classCallCheck(this, NimbleBrowsableLeaderboard);

        var _this = _possibleConstructorReturn(this, (NimbleBrowsableLeaderboard.__proto__ || Object.getPrototypeOf(NimbleBrowsableLeaderboard)).call(this, props));

        _this.state = {};
        return _this;
    }

    _createClass(NimbleBrowsableLeaderboard, [{
        key: "render",
        value: function render() {
            return React.createElement(
                "div",
                { className: "NimbleBrowsableLeaderboard" },
                React.createElement(Nimble.views.Leaderboard, { activity: this.props.activity, scope: this.state.selectedScope || "channel", size: this.props.size || "big" }),
                React.createElement(
                    "div",
                    { className: "scopes" },
                    React.createElement(
                        "div",
                        { className: "channel scope", onMouseOver: this.onSelectScope("channel") },
                        "for channel"
                    ),
                    React.createElement("div", { className: "separator" }),
                    React.createElement(
                        "div",
                        { className: "global scope", onMouseOver: this.onSelectScope("global") },
                        "for twitch"
                    )
                )
            );
        }
    }, {
        key: "onSelectScope",
        value: function onSelectScope(scope) {
            var _this2 = this;

            return function (event) {
                _this2.state.selectedScope = scope;
            };
        }
    }]);

    return NimbleBrowsableLeaderboard;
}(React.Component);

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(132);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(4)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/less-loader/dist/cjs.js!./BrowsableLeaderboard.view.less", function() {
			var newContent = require("!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/less-loader/dist/cjs.js!./BrowsableLeaderboard.view.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(3)(false);
// imports


// module
exports.push([module.i, ".NimbleBrowsableLeaderboard .scopes {\n  font-size: 0.4em;\n  padding: 0.25em;\n  text-align: center;\n  white-space: nowrap;\n}\n.NimbleBrowsableLeaderboard .scopes .scope {\n  cursor: pointer;\n  display: inline-block;\n  padding: 0.1em 0.1618em;\n}\n.NimbleBrowsableLeaderboard .scopes .scope.channel:hover {\n  background-color: #F05F50;\n}\n.NimbleBrowsableLeaderboard .scopes .scope.global:hover {\n  background-color: #6441A4;\n}\n.NimbleBrowsableLeaderboard .scopes .separator {\n  display: inline-block;\n  margin: 0em 0.25em;\n}\n.NimbleBrowsableLeaderboard .scopes .separator::after {\n  content: \"|\";\n}\n", ""]);

// exports


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

__webpack_require__(134);
__webpack_require__(135);
var THREE = __webpack_require__(1);
__webpack_require__(136);
__webpack_require__(137);
__webpack_require__(138);
__webpack_require__(139);
__webpack_require__(140);
__webpack_require__(141);
__webpack_require__(142);
__webpack_require__(143);
__webpack_require__(144);
__webpack_require__(145);
__webpack_require__(146);
__webpack_require__(147);
__webpack_require__(148);
__webpack_require__(149);
__webpack_require__(151);

var Loader = __webpack_require__(152);
var ChunkManager = __webpack_require__(154);
var StampManager = __webpack_require__(155);
var Projectile = __webpack_require__(21);
var MapManager = __webpack_require__(168);
var LevelManager = __webpack_require__(54);
var BuffManager = __webpack_require__(18);
var AiManager = __webpack_require__(12);
var WaveSpawner = __webpack_require__(176);
var ScriptingManager = __webpack_require__(177);
var WorldTextManager = __webpack_require__(178);
var HistoryManager = __webpack_require__(27);
var TagManager = __webpack_require__(50);
var BountyManager = __webpack_require__(51);
var XpManager = __webpack_require__(52);
var TouchControls = __webpack_require__(179);
var BitBotManager = __webpack_require__(180);
var DropManager = __webpack_require__(181);
var Tutorial = __webpack_require__(182);
var UpgradeManager = __webpack_require__(22);
var Pools = __webpack_require__(183);
var SoundSystem = __webpack_require__(7);
var GameStore = __webpack_require__(0);
var Utils = __webpack_require__(2);
var UI = __webpack_require__(38);
var Nimble = __webpack_require__(6);
var ENDPOINTS = __webpack_require__(14);
var PlayerStore = __webpack_require__(17);
var LeaderboardStore = __webpack_require__(35);
var NexusMessageType = __webpack_require__(10).constants.nexusMessageType;

var NEXUS_GET_MESSAGES_URI = new Nimble.uri(ENDPOINTS["DEVELOPMENT"].NEXUS_GET_MESSAGES_URI);
var PUBLISH_SNS_URI = new Nimble.uri(ENDPOINTS["DEVELOPMENT"].PUBLISH_SNS_URI);

function Game() {
    // Debug stuff
    this.drawBoundingMeshes = false;
    // Will only load a single room for quick iteration
    this.enableSingleLevelDebug = false;
    this.singleLevelIndex = 3; // intro1_south

    this.doWaveCombat = true;

    this.container;
    this.scene;
    this.camera;
    this.renderer;
    this.clock;
    this.controls;
    this.composer;
    this.pass;

    // Setup a single texture loader
    this.loader = new THREE.TextureLoader();

    // Scene settings
    this.screenWidth = GameStore.screenDimensions.screenWidth;
    this.screenHeight = GameStore.screenDimensions.screenHeight;
    THREEx.WindowResize(this);

    this.viewAngle = 49;
    this.aspect = this.screenWidth / this.screenHeight;
    this.near = 1;
    this.far = 145;
    this.updateEnd = 0;
    this.animId = 0;
    this.spectate = 1;

    // Object arrays
    this.objects = [];
    this.engines = [];
    this.targets = [];
    this.raycastMeshes = [];

    // Game
    this.world = undefined;
    this.rotateY = new THREE.Matrix4().makeRotationY(0.005);
    this.loadedLevelRooms = [];

    this.onHUDElement = false; // used tot rack if mouse is over HUD element

    this.worldMap = undefined;
    this.chunkManager = undefined;
    this.stampManager = undefined;
    this.projectileManager = undefined;
    this.player = undefined;
    this.goalAi = undefined;
    this.physBlockPool = undefined;
    this.ammoPool = undefined;
    this.voxLoader = new Loader.VoxLoader();
    this.currentMap = undefined;
    this.songMuted = false;
    this.Tutorial = new Tutorial();
    this.SoundSystem = SoundSystem;

    this.nexusUpdateIntervalSeconds = .2;
    this.nexusUpdateTime = 0;

    //==========================================================
    // Called by THREEx.WindowResize
    //==========================================================
    Game.prototype.resizeCallback = function () {
        GameStore.mainMenu.showResolutionMessage();
        this.doResize();
    };

    Game.prototype.doResize = function () {
        // Will use this later when we give users the option to set resolution
        this.camera.aspect = window.innerWidth / window.innerHeight;
        this.camera.updateProjectionMatrix();
        this.SetupTiltShiftBlurByResolution();
        var scaling = window.devicePixelRatio;
        this.renderer.setPixelRatio(scaling);
        var scaledWidth = window.innerWidth * scaling;
        var scaledHeight = window.innerHeight * scaling;
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        this.composer.setSize(scaledWidth, scaledHeight);
        this.ssaoPass.setSize(scaledWidth, scaledHeight);
        this.pass.setSize(scaledWidth, scaledHeight);
        this.outlinePass.setSize(scaledWidth, scaledHeight);
    };

    //==========================================================
    // Update progressbar for loading map
    //==========================================================
    Game.prototype.updateProgress = function (txt, percent) {
        document.getElementById("progress").text(txt);
        document.getElementById("progress").width(percent);
    };

    //==========================================================
    // InitScene
    //==========================================================
    Game.prototype.initScene = function () {
        this.scene = new THREE.Scene();
        this.camera = new THREE.PerspectiveCamera(this.viewAngle, this.aspect, this.near, this.far);
        SoundSystem.global.AttachListener(this.camera);
        this.scene.add(this.camera);
    };

    //==========================================================
    // Init other stuff
    //==========================================================
    Game.prototype.Init = function (mapId) {
        var _this = this;

        document.getElementById("menu").style.display = "none";
        document.getElementById("container").innerHTML = "";
        document.getElementById("container").style.display = "none";
        document.getElementById("menu").innerHTML = "";
        Object.assign(document.getElementById("main").style, {
            "background": "url('gui/bg" + (Utils.RandomInt(3) + 1) + ".png') no-repeat",
            "background-size": "cover"
        });

        this.clock = new THREE.Clock();

        this.loading = true;
        UI.render.forceUpdate();

        // Give loading screen a second to animate in befor halt from loading
        setTimeout(function () {
            _this.PostInit(mapId);
        }, 1350);
    };

    this.preloadLevel = function () {
        var _this2 = this,
            _loadedLevelRooms;

        var roomTypes = this.levelManager.preGenerateRooms();

        var roomsToLoad = roomTypes.filter(function (type) {
            return !_this2.loadedLevelRooms.includes(type);
        });

        (_loadedLevelRooms = this.loadedLevelRooms).push.apply(_loadedLevelRooms, _toConsumableArray(roomsToLoad));

        if (this.enableSingleLevelDebug) {
            var singleLevelName = LevelManager.roomData[this.singleLevelIndex].name;
            this.voxLoader.Add({ file: "maps/kowloon/" + singleLevelName + ".vox", name: singleLevelName });
        } else {

            roomsToLoad.forEach(function (roomType) {
                var singleLevelName = LevelManager.roomData[roomType].name;
                _this2.voxLoader.Add({ file: "maps/kowloon/" + singleLevelName + ".vox", name: singleLevelName });

                _this2.lastLoadedRoomIndex = roomType;
            });
        }
    };

    this.isLevelLoadingFinished = function () {
        var _this3 = this;

        if (!this.enableSingleLevelDebug) {

            return this.loadedLevelRooms.find(function (roomType) {
                return _this3.voxLoader.GetModel(LevelManager.roomData[roomType].name) === undefined;
            }) === undefined;
        }

        return true;
    };

    Game.prototype.setEnabledBloom = function (enabled) {
        this.pass.enabled = enabled;
    };

    Game.prototype.setEnabledVignette = function (enabled) {
        this.vignettePass.enabled = enabled;
    };

    Game.prototype.setEnabledSSAO = function (enabled) {
        this.ssaoPass.enabled = enabled;
        this.colorCorrectionPassStub.enabled = enabled;
    };

    Game.prototype.setEnabledTiltShift = function (enabled) {
        this.hTiltShiftPass.enabled = enabled;
        this.vTiltShiftPass.enabled = enabled;
    };

    Game.prototype.setChromacticDistortion = function (distortion) {
        this.caPass.uniforms["distortion"].value = distortion;
    };

    Game.prototype.PostInit = function (mapId) {
        this.initScene();

        this.levelManager = new LevelManager.LevelManager();
        this.roomData = LevelManager.roomData;

        // Load models
        this.voxLoader.Add({ file: "models/bit_bot_1.vox", name: "bit_bot" });
        this.voxLoader.Add({ file: "models/sub_bot_1.vox", name: "sub_bot" });
        this.voxLoader.Add({ file: "models/player_body.vox", name: "player_body" });
        this.voxLoader.Add({ file: "models/player_tracks.vox", name: "player_tracks" });
        this.voxLoader.Add({ file: "models/player_mflash_1.vox", name: "player_mflash_1" });
        this.voxLoader.Add({ file: "models/player_mflash_2.vox", name: "player_mflash_2" });
        this.voxLoader.Add({ file: "models/player_mflash_3.vox", name: "player_mflash_3" });
        this.voxLoader.Add({ file: "models/player_mflash_4.vox", name: "player_mflash_4" });
        this.voxLoader.Add({ file: "models/retail_box.vox", name: "retail_box" });
        this.voxLoader.Add({ file: "models/beacon.vox", name: "beacon" });
        this.voxLoader.Add({ file: "models/jeep_pink.vox", name: "jeep_pink" });
        this.voxLoader.Add({ file: "models/force_field.vox", name: "force_field" });
        this.voxLoader.Add({ file: "models/fireball.vox", name: "fireball" });
        this.voxLoader.Add({ file: "models/fireball_bb.vox", name: "fireball_bb" });
        this.voxLoader.Add({ file: "models/fireball_ai.vox", name: "fireball_ai" });
        this.voxLoader.Add({ file: "models/enemy_drone_retail_1.vox", name: "enemy_drone_retail_1" });
        this.voxLoader.Add({ file: "models/enemy_gord_retail_1.vox", name: "enemy_gord_retail_1" });
        this.voxLoader.Add({ file: "models/enemy_chibi_retail_1.vox", name: "enemy_chibi_retail_1" });
        this.voxLoader.Add({ file: "models/enemy_bot_retail_1.vox", name: "enemy_bot_retail_1" });
        this.voxLoader.Add({ file: "models/upgrade_fire_speed.vox", name: "upgrade_fire_speed" });
        this.voxLoader.Add({ file: "models/upgrade_fireball_multishot.vox", name: "upgrade_fireball_multishot" });
        this.voxLoader.Add({ file: "models/upgrade_fireball_speed.vox", name: "upgrade_fireball_speed" });
        this.voxLoader.Add({ file: "models/upgrade_increase_health.vox", name: "upgrade_increase_health" });
        this.voxLoader.Add({ file: "models/upgrade_jump_height.vox", name: "upgrade_jump_height" });
        this.voxLoader.Add({ file: "models/upgrade_stamp_count.vox", name: "upgrade_stamp_count" });
        this.voxLoader.Add({ file: "models/upgrade_stamp_speed.vox", name: "upgrade_stamp_speed" });
        this.voxLoader.Add({ file: "models/upgrade_stamp_thrower.vox", name: "upgrade_stamp_thrower" });

        GameStore.ugcManager.onGameLoad();

        this.preloadLevel();

        this.renderer = new THREE.WebGLRenderer({ antialias: false });
        this.renderer.setPixelRatio(window.devicePixelRatio);
        this.renderer.setSize(this.screenWidth / window.devicePixelRatio, this.screenHeight / window.devicePixelRatio);
        this.renderer.shadowMap.enabled = true;
        this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;
        this.composer = new THREE.EffectComposer(this.renderer);

        // Setup bloom post processing
        this.pass = new THREE.BloomPass(new THREE.Vector2(this.screenWidth, this.screenHeight), 0.6, 0.4, 0.8); // resolution, strength, radius, threshold

        // Setup vignette post processing
        this.vignettePass = new THREE.ShaderPass(THREE.VignetteShader);
        this.vignettePass.uniforms["offset"].value = 0.5;
        this.vignettePass.uniforms["darkness"].value = 1.4;

        // Tilt shift post processing
        this.hTiltShiftPass = new THREE.ShaderPass(THREE.HorizontalTiltShiftShader);
        this.vTiltShiftPass = new THREE.ShaderPass(THREE.VerticalTiltShiftShader);
        this.SetupTiltShiftBlurByResolution();
        this.hTiltShiftPass.uniforms["r"].value = this.vTiltShiftPass.uniforms["r"].value = 0.425;
        this.hTiltShiftPass.uniforms["d"].value = this.vTiltShiftPass.uniforms["d"].value = 0.3;

        // Color correct post processing
        this.colorCorrectionPass = new THREE.ShaderPass(THREE.ColorCorrectionShader);
        this.colorCorrectionPass.uniforms["powRGB"].value = new THREE.Vector3(1.05, 1.05, 0.925);
        this.colorCorrectionPass.uniforms["mulRGB"].value = new THREE.Vector3(1.15, 1.2, 1.1);
        this.colorCorrectionPass.uniforms["addRGB"].value = new THREE.Vector3(0.01, 0, 0);
        this.colorCorrectionPassStub = new THREE.ShaderPass(THREE.ColorCorrectionShader);

        // Setup SSAO post processing
        this.ssaoPass = new THREE.SSAOPass(this.scene, this.camera, this.screenWidth, this.screenHeight);
        this.ssaoPass.kernelRadius = 4;

        // Setup outline post processing for evil stamps
        this.outlinePass = new THREE.OutlinePass(new THREE.Vector2(this.screenWidth, this.screenHeight), this.scene, this.camera);

        this.outlinePass.edgeStrength = Number(10);
        this.outlinePass.edgeGlow = Number(1);
        this.outlinePass.edgeThickness = Number(4);
        this.outlinePass.pulsePeriod = Number(3);
        this.outlinePass.visibleEdgeColor.set("#ff0000");
        this.outlinePass.hiddenEdgeColor.set("#000000");

        // Setup chromatic aberration
        this.caPass = new THREE.ShaderPass(THREE.ChromaticAberrationShader);
        this.caPass.renderToScreen = true;

        this.composer.addPass(new THREE.RenderPass(this.scene, this.camera));
        this.composer.addPass(this.colorCorrectionPass);
        this.composer.addPass(this.colorCorrectionPassStub); // Stub needed before SSAO since it clobers the previous pass...
        this.composer.addPass(this.ssaoPass);
        this.composer.addPass(this.pass);
        this.composer.addPass(this.vignettePass);
        this.composer.addPass(this.hTiltShiftPass);
        this.composer.addPass(this.vTiltShiftPass);
        this.composer.addPass(this.outlinePass);
        this.composer.addPass(this.caPass);
        this.composer.setSize(this.screenWidth, this.screenHeight);
        this.ssaoPass.setSize(this.screenWidth, this.screenHeight);

        // Set passes enabled or disabled based on storage settings
        this.setEnabledTiltShift(GameStore.optionsMenu.tiltShiftEnabled);
        this.setEnabledBloom(GameStore.optionsMenu.bloomEnabled);
        this.setEnabledSSAO(GameStore.optionsMenu.ssaoEnabled);
        this.setEnabledVignette(GameStore.optionsMenu.vignetteEnabled);
        this.doResize(); // Calling once on load, fixes bug on offline mode with non 16:9 setup

        this.keyboard = new THREEx.KeyboardState();
        this.container = document.getElementById("container");
        this.container.appendChild(this.renderer.domElement);
        this.renderer.domElement.classList.add("touchMobile");

        this.chunkManager = new ChunkManager();
        this.chunkManager.Create();

        this.stampManager = new StampManager();
        this.aiManager = new AiManager.AiManager();
        this.waveSpawner = new WaveSpawner();
        this.buffManager = new BuffManager.BuffManager();
        this.projectileManager = new Projectile.ProjectileManager();
        this.scriptingManager = new ScriptingManager();
        this.worldTextManager = new WorldTextManager();
        this.historyManager = new HistoryManager.HistoryManager();
        this.tagManager = new TagManager.TagManager();
        this.bountyManager = new BountyManager.BountyManager();
        this.xpManager = new XpManager.XpManager();
        this.touchControls = new TouchControls.TouchControls();
        this.bitBotManager = new BitBotManager();
        this.dropManager = new DropManager();
        this.upgradeManager = new UpgradeManager.UpgradeManager();

        this.bitBotManager.queryTransactions();

        this.LoadScene(mapId);

        var channelId = Nimble.twitch.store.streamer.channelId;
        Nimble.twitchsparks.initializeStandalone(new Nimble.uri(ENDPOINTS["DEVELOPMENT"].GAMESPARKS_URI.replace("{channelId}", channelId)), channelId, Nimble.twitch.store.streamer.name, GameStore.twitchManager.getAuthForAWS()).then(function () {

            var GLOBAL_LEADERBOARD = "GlobalHighScores.activity." + GameStore.hostData.activityKey;
            Nimble.twitchsparks.listenToLeaderboard(GameStore.hostData.activityKey + "/global", GLOBAL_LEADERBOARD);
        });
    };

    Game.prototype.SetupTiltShiftBlurByResolution = function () {
        var bluriness = 4;
        var scaling = window.devicePixelRatio;
        this.hTiltShiftPass.uniforms["h"].value = bluriness / (window.innerWidth * scaling);
        this.vTiltShiftPass.uniforms["v"].value = bluriness / (window.innerHeight * scaling);
    };

    Game.prototype.FadeMainMenuMusic = function () {
        var mainMenuMusic = document.getElementById("mainMenuMusic");

        var fadeAudio = setInterval(function () {
            if (mainMenuMusic.volume >= 0.01) {
                mainMenuMusic.volume -= 0.01;
            } else {
                mainMenuMusic.volume = 0;
            }

            if (mainMenuMusic.volume === 0.0) {
                clearInterval(fadeAudio);
            }
        }, 100);
    };

    Game.prototype.LoadScene = function (mapId) {
        var x = GameStore.GameInstance.voxLoader.PercentLoaded();
        console.log("Loaded: " + x + "%");
        if (x < 100) {
            setTimeout(function () {
                GameStore.GameInstance.LoadScene(mapId);
            }, 500);
            return;
        }

        this.FadeMainMenuMusic();

        this.SetMap(mapId);

        setTimeout(function () {
            document.getElementById("container").style.display = "block";
            document.getElementById("menu").style.display = "none";
            PlayerStore.showHud = true;
        }, 1000);

        this.physBlockPool = new Pools.PhysBlockPool();
        this.physBlockPool.Create(500);

        this.ammoPool = new Pools.AmmoPool();
        this.ammoPool.Create(30);
        this.animate();
    };

    // dgorski - Heads up for any code reviews. We will be deleting all of the map
    // setup in main and replace it with a level generator object. We don't plan to
    // maintain any of this original code so we have things like magic numbers!
    Game.prototype.SetMap = function (id) {
        var map = new Object();
        if (id === 1) {
            map.mapId = 1;
            map.mapFile = "maps/map1.png";
            map.mapName = "New Kowloon";

            map.playerPosition = new THREE.Vector3(28, 4, 200);

            map.cageModel = "jeep_pink";
            map.cagePosition = new THREE.Vector3(85, 4, 45);

            map.fogColor = 0x6d1f57; // dark cyan 00948f // magenta ff2a8e // dark blue 00182e
            map.clearColor = 0x000000;
            map.blockSize = 0.5;
            map.wallHeight = 20;
            map.useLava = false;
            map.useWater = true;
            map.waterPosition = 0;
            map.lavaPosition = 0;

            map.lights = function () {
                var ambientLight = new THREE.AmbientLight(0x003366);
                GameStore.GameInstance.scene.add(ambientLight);

                var hemiLight = new THREE.HemisphereLight(0x003366, 0x00001c, 0.2);
                hemiLight.position.set(0, 200, 0);
                GameStore.GameInstance.scene.add(hemiLight);

                var dirLight = new THREE.DirectionalLight(0x7dcbff, 0.9);
                dirLight.position.set(10, 10.75, 10);
                dirLight.position.multiplyScalar(10);
                GameStore.GameInstance.scene.add(dirLight);

                dirLight.castShadow = true;

                dirLight.shadow.mapSize.width = 2048;
                dirLight.shadow.mapSize.height = 2048;

                var d = 150;
                dirLight.shadow.camera.left = -d;
                dirLight.shadow.camera.right = d;
                dirLight.shadow.camera.top = d;
                dirLight.shadow.camera.bottom = -d;

                dirLight.shadow.camera.far = 3500;
                dirLight.shadow.bias = -0.000001;
            };
        }

        this.currentMap = new MapManager();
        this.currentMap.Create(map);
    };

    //==========================================================
    // Render
    //==========================================================
    Game.prototype.render = function () {
        this.renderer.render(this.scene, this.camera);
    };

    //==========================================================
    // Animate
    //==========================================================
    Game.prototype.animate = function () {
        this.animId = requestAnimationFrame(this.animate.bind(this));
        this.update();
    };

    //==========================================================
    // Update
    //==========================================================
    Game.prototype.update = function () {
        var delta = this.clock.getDelta();
        this.elapsedTime = this.clock.getElapsedTime();

        this.chunkManager.Draw(this.elapsedTime, delta);
        for (var i = 0; i < this.objects.length; i++) {
            if (this.objects[i] !== undefined) {
                if (this.objects[i].remove === 1) {
                    this.objects.splice(i, 1);
                } else {
                    this.objects[i].Draw(this.elapsedTime, delta, i);
                }
            }
        }
        for (var _i = 0; _i < this.targets.length; _i++) {
            if (this.targets[_i] !== undefined) {
                if (this.targets[_i].that.remove === 1) {
                    this.targets.splice(_i, 1);
                } else if (this.targets[_i].that.skipDraw > 0) {
                    this.targets[_i].that.skipDraw--;
                    continue;
                } else {
                    if (this.targets[_i].that.type !== "player") {
                        this.targets[_i].that.Draw(this.elapsedTime, delta);
                    }
                }
            }
        }

        this.scriptingManager.Update(this.elapsedTime, delta);

        if (GameStore.GameInstance.player !== undefined) {
            this.levelManager.Update(GameStore.GameInstance.player, this.elapsedTime);
            this.waveSpawner.update(this.elapsedTime, delta);
            this.buffManager.Update(this.elapsedTime, delta);
            this.worldTextManager.update(this, delta);
            this.historyManager.update(this.elapsedTime, delta);
            this.tagManager.update(this.elapsedTime, delta);
            this.bountyManager.update(this.elapsedTime, delta);
            this.xpManager.update(this.elapsedTime, delta);
            this.bitBotManager.update(this.elapsedTime, delta);
            this.dropManager.update(this.elapsedTime, delta);
            this.stampManager.update(this.elapsedTime, delta);
        }

        this.composer.render(delta);

        // Update HUD every frame
        UI.render.forceUpdate();

        this.nexusUpdateTime += delta;
        if (this.nexusUpdateTime >= this.nexusUpdateIntervalSeconds) {
            this.nexusUpdateTime = 0;

            this.processNexusMessages(Nimble.twitch.store.streamer.channelId);
        }
    };

    Game.prototype.getDistance = function (v1, v2) {
        var dx = v1.x - v2.x;
        var dy = v1.y - v2.y;
        var dz = v1.z - v2.z;
        return Math.sqrt(dx * dx + dy * dy + dz * dz);
    };

    this.processNexusMessages = function (channelId) {
        if (channelId && !GameStore.gamestateManager.playingOffline) {
            return window.fetch(NEXUS_GET_MESSAGES_URI({
                channelId: channelId
            }), {
                "method": "GET",
                "headers": {
                    "Authorization": GameStore.twitchManager.getAuthForAWS(),
                    "Content-Type": "application/json"
                }
            }).then(function (response) {
                if (response.status >= 400) {
                    return response.json().then(function (body) {
                        throw body;
                    });
                } else {
                    return response.json();
                }
            }).then(function (json) {
                if (json.messages !== undefined) {
                    json.messages.forEach(function (message) {
                        GameStore.GameInstance.handleNexusMessage(message);
                    });
                }
            }).catch(function (error) {
                Nimble.logger.error(error);
            });
        } else {
            return null;
        }
    };

    this.twitchBroadcast = function (type, message) {
        GameStore.gamestateManager.queueBroadcast(type, message);
    };

    this.twitchWhisper = function (type, message, targets) {
        GameStore.gamestateManager.queueWhisper(type, message, targets);
    };

    Game.prototype.handleNexusMessage = function (message) {
        if (message.type === undefined) {
            return;
        }

        switch (message.type) {
            case NexusMessageType.stamp:
                GameStore.GameInstance.stampManager.placeStampFromScreen(message.x, message.y, message.stamp, message.delay, message.userId, message.user + (" (" + (message.scoreData.level + 1) + ")"), message.laserColor, message.isEnemy);
                break;
            case NexusMessageType.vote:
                GameStore.GameInstance.buffManager.viewerBuffVote(message.buffType, message.voteCount, message.user + (" (" + (message.scoreData.level + 1) + ")"), message.isEvil);
                break;
            case NexusMessageType.tag:
                this.historyManager.test(message);
                break;
            case NexusMessageType.bounty:
                this.bountyManager.placeBounty(message);
                break;
            case NexusMessageType.bitsBounty:
                GameStore.twitchManager.addBitsTransaction(message);
                this.bitBotManager.queryTransactions();
                break;
            case NexusMessageType.bitsTransaction:
                GameStore.twitchManager.addBitsTransaction(message);
                break;
            case NexusMessageType.subBot:
                GameStore.GameInstance.bitBotManager.subBotInput(message);
                break;
            case NexusMessageType.recolor:
                if (GameStore.GameInstance.player !== undefined) {
                    GameStore.GameInstance.player.recolorFromDataArray(message.recolorArray);
                }
                break;
            case NexusMessageType.badBitBot:
                GameStore.GameInstance.waveSpawner.spawnBadBitBot(message);
                break;
        }

        this.updateLeaderboardScore(message.user, message.anonymousUuid, message.scoreData);
    };

    Game.prototype.updateLeaderboardScore = function (name, id, scoreData) {

        if (name === undefined || scoreData === undefined) {
            return;
        }

        // Don't show board until at least one entry exists
        // Can't use sortedLeaderboard.length since its initialized with 10 empty entries
        // to display pattern
        if (!LeaderboardStore.firstEntry) {
            LeaderboardStore.firstEntry = true;
        }

        // This algorithm assumes scores can only go up
        var leaderboard = LeaderboardStore.sortedLeaderboard;
        var existingIndex = leaderboard.findIndex(function (entry) {
            if (id !== undefined) {
                return entry.id === id;
            } else {
                return entry.name === name;
            }
        });

        if (existingIndex !== -1) {
            leaderboard.splice(existingIndex, 1);
        }

        var insertIndex = leaderboard.findIndex(function (entry) {
            return entry.score < scoreData.score;
        });

        if (insertIndex !== -1) {
            leaderboard.splice(insertIndex, 0, {
                name: name,
                id: id,
                score: scoreData.score,
                color: scoreData.color,
                level: scoreData.level
            });
        } else {
            leaderboard.push({
                name: name,
                id: id,
                score: scoreData.score,
                color: scoreData.color,
                level: scoreData.level
            });
        }
    };

    Game.prototype.ReSpawnPlayer = function (delayTime) {
        // Remove goal
        if (GameStore.GameInstance.goalAi !== undefined) {
            GameStore.GameInstance.goalAi.Die(true);
        }

        // Remove old player
        GameStore.GameInstance.player.Die(true);
    };

    Game.prototype.restartLevel = function () {
        var _this4 = this;

        if (this.player) {
            this.player.Die();
        }

        this.aiManager.removeAllAi();
        this.waveSpawner.stopWaveCombat();
        this.chunkManager.destroyWorldChunks();
        this.preloadLevel();

        var startLevelFunc = function startLevelFunc() {
            if (_this4.isLevelLoadingFinished()) {
                _this4.levelManager.spawnStartingRoom();
            } else {
                setTimeout(function () {
                    startLevelFunc();
                }, 500);
            }
        };

        startLevelFunc();
    };

    Game.prototype.startLevel = function () {
        GameStore.GameInstance.player.respawnPlayer();

        GameStore.gamestateManager.onStartLevel();
    };

    Game.prototype.endGame = function () {
        var activityKey = GameStore.hostData.activityKey;
        Nimble.twitchsparks.submitLeaderboardEntry({
            "sessionId": 0,
            "activity": activityKey,
            "score": this.xpManager.getTotalXp()
        });

        GameStore.gamestateManager.onFinishLevel();

        this.aiManager.removeAllAi();
        this.waveSpawner.stopWaveCombat();
        this.chunkManager.destroyWorldChunks();
        this.scriptingManager.shutdown();
        this.player.Remove();

        while (this.scene.children.length > 0) {
            this.scene.remove(this.scene.children[0]);
        }

        this.objects = [];
        this.targets = [];

        this.showLevelFinished = true;
    };

    Game.prototype.reloadGame = function () {
        window.location.reload();
    };

    Game.prototype.publishTychoSns = function (message) {
        return window.fetch(PUBLISH_SNS_URI({
            channelId: Nimble.twitch.store.streamer.channelId
        }), {
            "method": "POST",
            "headers": {
                "Authorization": GameStore.twitchManager.getAuthForAWS(),
                "Content-Type": "application/json"
            },
            "body": JSON.stringify({
                message: message
            })
        }).catch(function (error) {
            Nimble.logger.error(error);
        });
    };
}

module.exports = Game;

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// THREEx.KeyboardState.js keep the current state of the keyboard.
// It is possible to query it at any time. No need of an event.
// This is particularly convenient in loop driven case, like in
// 3D demos or games.
//
// # Usage
//
// **Step 1**: Create the object
//
// ```var keyboard	= new THREEx.KeyboardState();```
//
// **Step 2**: Query the keyboard state
//
// This will return true if shift and A are pressed, false otherwise
//
// ```keyboard.pressed("shift+A")```
//
// **Step 3**: Stop listening to the keyboard
//
// ```keyboard.destroy()```
//
// NOTE: this library may be nice as standaline. independant from three.js
// - rename it keyboardForGame
//
// # Code
//

/** @namespace */
window.THREEx = window.THREEx || {};

window.keys_enabled = 0;
/**
 * - NOTE: it would be quite easy to push event-driven too
 *   - microevent.js for events handling
 *   - in this._onkeyChange, generate a string from the DOM event
 *   - use this as event name
*/
THREEx.KeyboardState = function () {
	// to store the current state
	this.keyCodes = {};
	this.modifiers = {};

	// create callback to bind/unbind keyboard events
	var self = this;
	this._onKeyDown = function (event) {
		self._onKeyChange(event, true);
	};
	this._onKeyUp = function (event) {
		self._onKeyChange(event, false);
	};

	// bind keyEvents
	document.addEventListener("keydown", this._onKeyDown, false);
	document.addEventListener("keyup", this._onKeyUp, false);
};

/**
 * To stop listening of the keyboard events
*/
THREEx.KeyboardState.prototype.destroy = function () {
	// unbind keyEvents
	document.removeEventListener("keydown", this._onKeyDown, false);
	document.removeEventListener("keyup", this._onKeyUp, false);
};

THREEx.KeyboardState.MODIFIERS = ['shift', 'ctrl', 'alt', 'meta'];
THREEx.KeyboardState.ALIAS = {
	'left': 37,
	'up': 38,
	'right': 39,
	'down': 40,
	'space': 32,
	'pageup': 33,
	'pagedown': 34,
	'esc': 27,
	'tab': 9
};

/**
 * to process the keyboard dom event
*/
THREEx.KeyboardState.prototype._onKeyChange = function (event, pressed) {
	// log to debug
	//console.log("onKeyChange", event, pressed, event.keyCode, event.shiftKey, event.ctrlKey, event.altKey, event.metaKey)

	// update this.keyCodes
	var keyCode = event.keyCode;
	this.keyCodes[keyCode] = pressed;

	// update this.modifiers
	this.modifiers['shift'] = event.shiftKey;
	this.modifiers['ctrl'] = event.ctrlKey;
	this.modifiers['alt'] = event.altKey;
	this.modifiers['meta'] = event.metaKey;
};

/**
 * query keyboard state to know if a key is pressed of not
 *
 * @param {String} keyDesc the description of the key. format : modifiers+key e.g shift+A
 * @returns {Boolean} true if the key is pressed, false otherwise
*/
THREEx.KeyboardState.prototype.pressed = function (keyDesc) {
	if (!keys_enabled) {
		return;
	}
	var keys = keyDesc.split("+");
	for (var i = 0; i < keys.length; i++) {
		var key = keys[i];
		var pressed;
		if (THREEx.KeyboardState.MODIFIERS.indexOf(key) !== -1) {
			pressed = this.modifiers[key];
		} else if (Object.keys(THREEx.KeyboardState.ALIAS).indexOf(key) != -1) {
			pressed = this.keyCodes[THREEx.KeyboardState.ALIAS[key]];
		} else {
			pressed = this.keyCodes[key.toUpperCase().charCodeAt(0)];
		}
		if (!pressed) return false;
	};
	return true;
};

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// This THREEx helper makes it easy to handle window resize.
// It will update renderer and camera when window is resized.
//
// # Usage
//
// **Step 1**: Start updating renderer and camera
//
// ```var windowResize = THREEx.WindowResize(aRenderer, aCamera)```
//    
// **Step 2**: Start updating renderer and camera
//
// ```windowResize.stop()```
// # Code

//

/** @namespace */
window.THREEx = window.THREEx || {};

/**
 * Update renderer and camera when the window is resized
 * 
 * @param {Object} renderer the renderer to update
 * @param {Object} Camera the camera to update
*/
THREEx.WindowResize = function (game) {
	var callback = function callback() {
		var scaling = window.devicePixelRatio;
		var innerWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
		innerWidth *= scaling;
		var innerHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
		innerHeight *= scaling;
		var deltaX = game.screenWidth - innerWidth;
		var deltaY = game.screenHeight - innerHeight;

		// Only adjust if more than 1 pixel difference. Some windows machines, like my own,
		// cannot always perfectly set the resolution due to resolution scaling.
		if (deltaX * deltaX > 1 || deltaY * deltaY > 1) {
			window.resizeBy(deltaX / scaling, deltaY / scaling);
			game.resizeCallback();
		}
	};

	// bind the resize event
	window.addEventListener("resize", callback, false);

	// return .stop() the function to stop watching window resize
	return {
		/**
   * Stop watching window resize
  */
		stop: function stop() {
			window.removeEventListener("resize", callback);
		}
	};
};

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * @author alteredq / http://alteredqualia.com/
 */

var THREE = __webpack_require__(1);

THREE.EffectComposer = function (renderer, renderTarget) {

	this.renderer = renderer;

	if (renderTarget === undefined) {

		var parameters = {
			minFilter: THREE.LinearFilter,
			magFilter: THREE.LinearFilter,
			format: THREE.RGBAFormat,
			stencilBuffer: false
		};
		var size = renderer.getSize();
		renderTarget = new THREE.WebGLRenderTarget(size.width, size.height, parameters);
	}

	this.renderTarget1 = renderTarget;
	this.renderTarget2 = renderTarget.clone();

	this.writeBuffer = this.renderTarget1;
	this.readBuffer = this.renderTarget2;

	this.passes = [];

	if (THREE.CopyShader === undefined) console.error("THREE.EffectComposer relies on THREE.CopyShader");

	this.copyPass = new THREE.ShaderPass(THREE.CopyShader);
};

Object.assign(THREE.EffectComposer.prototype, {

	swapBuffers: function swapBuffers() {

		var tmp = this.readBuffer;
		this.readBuffer = this.writeBuffer;
		this.writeBuffer = tmp;
	},

	addPass: function addPass(pass) {

		this.passes.push(pass);

		var size = this.renderer.getSize();
		pass.setSize(size.width, size.height);
	},

	insertPass: function insertPass(pass, index) {

		this.passes.splice(index, 0, pass);
	},

	render: function render(delta) {

		var maskActive = false;

		var pass,
		    i,
		    il = this.passes.length;

		for (i = 0; i < il; i++) {

			pass = this.passes[i];

			if (pass.enabled === false) continue;

			pass.render(this.renderer, this.writeBuffer, this.readBuffer, delta, maskActive);

			if (pass.needsSwap) {

				if (maskActive) {

					var context = this.renderer.context;

					context.stencilFunc(context.NOTEQUAL, 1, 0xffffffff);

					this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, delta);

					context.stencilFunc(context.EQUAL, 1, 0xffffffff);
				}

				this.swapBuffers();
			}

			if (THREE.MaskPass !== undefined) {

				if (pass instanceof THREE.MaskPass) {

					maskActive = true;
				} else if (pass instanceof THREE.ClearMaskPass) {

					maskActive = false;
				}
			}
		}
	},

	reset: function reset(renderTarget) {

		if (renderTarget === undefined) {

			var size = this.renderer.getSize();

			renderTarget = this.renderTarget1.clone();
			renderTarget.setSize(size.width, size.height);
		}

		this.renderTarget1.dispose();
		this.renderTarget2.dispose();
		this.renderTarget1 = renderTarget;
		this.renderTarget2 = renderTarget.clone();

		this.writeBuffer = this.renderTarget1;
		this.readBuffer = this.renderTarget2;
	},

	setSize: function setSize(width, height) {

		this.renderTarget1.setSize(width, height);
		this.renderTarget2.setSize(width, height);

		for (var i = 0; i < this.passes.length; i++) {

			this.passes[i].setSize(width, height);
		}
	}

});

THREE.Pass = function () {

	// if set to true, the pass is processed by the composer
	this.enabled = true;

	// if set to true, the pass indicates to swap read and write buffer after rendering
	this.needsSwap = true;

	// if set to true, the pass clears its buffer before rendering
	this.clear = false;

	// if set to true, the result of the pass is rendered to screen
	this.renderToScreen = false;
};

Object.assign(THREE.Pass.prototype, {

	setSize: function setSize(width, height) {},

	render: function render(renderer, writeBuffer, readBuffer, delta, maskActive) {

		console.error("THREE.Pass: .render() must be implemented in derived pass.");
	}

});

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * @author alteredq / http://alteredqualia.com/
 */

var THREE = __webpack_require__(1);

THREE.ShaderPass = function (shader, textureID) {

	THREE.Pass.call(this);

	this.textureID = textureID !== undefined ? textureID : "tDiffuse";

	if (shader instanceof THREE.ShaderMaterial) {

		this.uniforms = shader.uniforms;

		this.material = shader;
	} else if (shader) {

		this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);

		this.material = new THREE.ShaderMaterial({

			defines: shader.defines || {},
			uniforms: this.uniforms,
			vertexShader: shader.vertexShader,
			fragmentShader: shader.fragmentShader

		});
	}

	this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);
	this.scene = new THREE.Scene();

	this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null);
	this.scene.add(this.quad);
};

THREE.ShaderPass.prototype = Object.assign(Object.create(THREE.Pass.prototype), {

	constructor: THREE.ShaderPass,

	render: function render(renderer, writeBuffer, readBuffer, delta, maskActive) {

		if (this.uniforms[this.textureID]) {

			this.uniforms[this.textureID].value = readBuffer.texture;
		}

		this.quad.material = this.material;

		if (this.renderToScreen) {

			renderer.render(this.scene, this.camera);
		} else {

			renderer.render(this.scene, this.camera, writeBuffer, this.clear);
		}
	}

});

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * @author alteredq / http://alteredqualia.com/
 */

var THREE = __webpack_require__(1);

THREE.RenderPass = function (scene, camera, overrideMaterial, clearColor, clearAlpha) {

	THREE.Pass.call(this);

	this.scene = scene;
	this.camera = camera;

	this.overrideMaterial = overrideMaterial;

	this.clearColor = clearColor;
	this.clearAlpha = clearAlpha !== undefined ? clearAlpha : 0;

	this.clear = true;
	this.needsSwap = false;
};

THREE.RenderPass.prototype = Object.assign(Object.create(THREE.Pass.prototype), {

	constructor: THREE.RenderPass,

	render: function render(renderer, writeBuffer, readBuffer, delta, maskActive) {

		var oldAutoClear = renderer.autoClear;
		renderer.autoClear = false;

		this.scene.overrideMaterial = this.overrideMaterial;

		var oldClearColor, oldClearAlpha;

		if (this.clearColor) {

			oldClearColor = renderer.getClearColor().getHex();
			oldClearAlpha = renderer.getClearAlpha();

			renderer.setClearColor(this.clearColor, this.clearAlpha);
		}

		renderer.render(this.scene, this.camera, this.renderToScreen ? null : readBuffer, this.clear);

		if (this.clearColor) {

			renderer.setClearColor(oldClearColor, oldClearAlpha);
		}

		this.scene.overrideMaterial = null;
		renderer.autoClear = oldAutoClear;
	}

});

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * @author alteredq / http://alteredqualia.com/
 *
 * Full-screen textured quad shader
 */

var THREE = __webpack_require__(1);

THREE.CopyShader = {

	uniforms: {

		"tDiffuse": { value: null },
		"opacity": { value: 1.0 }

	},

	vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

	fragmentShader: ["uniform float opacity;", "uniform sampler2D tDiffuse;", "varying vec2 vUv;", "void main() {", "vec4 texel = texture2D( tDiffuse, vUv );", "gl_FragColor = opacity * texel;", "}"].join("\n")

};

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * @author alteredq / http://alteredqualia.com/
 *
 * Convolution shader
 * ported from o3d sample to WebGL / GLSL
 * http://o3d.googlecode.com/svn/trunk/samples/convolution.html
 */

var THREE = __webpack_require__(1);

THREE.ConvolutionShader = {

	defines: {

		"KERNEL_SIZE_FLOAT": "25.0",
		"KERNEL_SIZE_INT": "25"

	},

	uniforms: {

		"tDiffuse": { value: null },
		"uImageIncrement": { value: new THREE.Vector2(0.001953125, 0.0) },
		"cKernel": { value: [] }

	},

	vertexShader: ["uniform vec2 uImageIncrement;", "varying vec2 vUv;", "void main() {", "vUv = uv - ( ( KERNEL_SIZE_FLOAT - 1.0 ) / 2.0 ) * uImageIncrement;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

	fragmentShader: ["uniform float cKernel[ KERNEL_SIZE_INT ];", "uniform sampler2D tDiffuse;", "uniform vec2 uImageIncrement;", "varying vec2 vUv;", "void main() {", "vec2 imageCoord = vUv;", "vec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );", "for( int i = 0; i < KERNEL_SIZE_INT; i ++ ) {", "sum += texture2D( tDiffuse, imageCoord ) * cKernel[ i ];", "imageCoord += uImageIncrement;", "}", "gl_FragColor = sum;", "}"].join("\n"),

	buildKernel: function buildKernel(sigma) {

		// We lop off the sqrt(2 * pi) * sigma term, since we're going to normalize anyway.

		function gauss(x, sigma) {

			return Math.exp(-(x * x) / (2.0 * sigma * sigma));
		}

		var i,
		    values,
		    sum,
		    halfWidth,
		    kMaxKernelSize = 25,
		    kernelSize = 2 * Math.ceil(sigma * 3.0) + 1;

		if (kernelSize > kMaxKernelSize) kernelSize = kMaxKernelSize;
		halfWidth = (kernelSize - 1) * 0.5;

		values = new Array(kernelSize);
		sum = 0.0;
		for (i = 0; i < kernelSize; ++i) {

			values[i] = gauss(i - halfWidth, sigma);
			sum += values[i];
		}

		// normalize the kernel

		for (i = 0; i < kernelSize; ++i) {
			values[i] /= sum;
		}return values;
	}

};

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * @author bhouston / http://clara.io/
 *
 * Luminosity
 * http://en.wikipedia.org/wiki/Luminosity
 */

var THREE = __webpack_require__(1);

THREE.LuminosityHighPassShader = {

        shaderID: "luminosityHighPass",

        uniforms: {

                "tDiffuse": { type: "t", value: null },
                "luminosityThreshold": { type: "f", value: 1.0 },
                "smoothWidth": { type: "f", value: 1.0 },
                "defaultColor": { type: "c", value: new THREE.Color(0x000000) },
                "defaultOpacity": { type: "f", value: 0.0 }

        },

        vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

        fragmentShader: ["uniform sampler2D tDiffuse;", "uniform vec3 defaultColor;", "uniform float defaultOpacity;", "uniform float luminosityThreshold;", "uniform float smoothWidth;", "varying vec2 vUv;", "void main() {", "vec4 texel = texture2D( tDiffuse, vUv );", "vec3 luma = vec3( 0.85, 0.413, 0.725 );", "float v = dot( texel.xyz, luma );", "vec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );", "float alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );", "gl_FragColor = mix( outputColor, texel, alpha );", "}"].join("\n")

};

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * @author spidersharma / http://eduperiment.com/
 *
 */

var THREE = __webpack_require__(1);

THREE.BloomPass = function (resolution, strength, radius, threshold) {

	THREE.Pass.call(this);

	this.strength = strength !== undefined ? strength : 1;
	this.radius = radius;
	this.threshold = threshold;
	this.resolution = resolution !== undefined ? new THREE.Vector2(resolution.x, resolution.y) : new THREE.Vector2(256, 256);

	// create color only once here, reuse it later inside the render function
	this.clearColor = new THREE.Color(0, 0, 0);

	// render targets
	var pars = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBAFormat };
	this.renderTargetsHorizontal = [];
	this.renderTargetsVertical = [];
	this.nMips = 5;
	var resx = Math.round(this.resolution.x / 2);
	var resy = Math.round(this.resolution.y / 2);

	this.renderTargetBright = new THREE.WebGLRenderTarget(resx, resy, pars);
	this.renderTargetBright.texture.name = "BloomPass.bright";
	this.renderTargetBright.texture.generateMipmaps = false;

	for (var i = 0; i < this.nMips; i++) {

		var renderTarget = new THREE.WebGLRenderTarget(resx, resy, pars);

		renderTarget.texture.name = "BloomPass.h" + i;
		renderTarget.texture.generateMipmaps = false;

		this.renderTargetsHorizontal.push(renderTarget);

		var renderTarget = new THREE.WebGLRenderTarget(resx, resy, pars);

		renderTarget.texture.name = "BloomPass.v" + i;
		renderTarget.texture.generateMipmaps = false;

		this.renderTargetsVertical.push(renderTarget);

		resx = Math.round(resx / 2);

		resy = Math.round(resy / 2);
	}

	// luminosity high pass material

	if (THREE.LuminosityHighPassShader === undefined) console.error("THREE.BloomPass relies on THREE.LuminosityHighPassShader");

	var highPassShader = THREE.LuminosityHighPassShader;
	this.highPassUniforms = THREE.UniformsUtils.clone(highPassShader.uniforms);

	this.highPassUniforms["luminosityThreshold"].value = threshold;
	this.highPassUniforms["smoothWidth"].value = 0.01;

	this.materialHighPassFilter = new THREE.ShaderMaterial({
		uniforms: this.highPassUniforms,
		vertexShader: highPassShader.vertexShader,
		fragmentShader: highPassShader.fragmentShader,
		defines: {}
	});

	// Gaussian Blur Materials
	this.separableBlurMaterials = [];
	var kernelSizeArray = [3, 5, 7, 9, 11];
	var resx = Math.round(this.resolution.x / 2);
	var resy = Math.round(this.resolution.y / 2);

	for (var i = 0; i < this.nMips; i++) {

		this.separableBlurMaterials.push(this.getSeperableBlurMaterial(kernelSizeArray[i]));

		this.separableBlurMaterials[i].uniforms["texSize"].value = new THREE.Vector2(resx, resy);

		resx = Math.round(resx / 2);

		resy = Math.round(resy / 2);
	}

	// Composite material
	this.compositeMaterial = this.getCompositeMaterial(this.nMips);
	this.compositeMaterial.uniforms["blurTexture1"].value = this.renderTargetsVertical[0].texture;
	this.compositeMaterial.uniforms["blurTexture2"].value = this.renderTargetsVertical[1].texture;
	this.compositeMaterial.uniforms["blurTexture3"].value = this.renderTargetsVertical[2].texture;
	this.compositeMaterial.uniforms["blurTexture4"].value = this.renderTargetsVertical[3].texture;
	this.compositeMaterial.uniforms["blurTexture5"].value = this.renderTargetsVertical[4].texture;
	this.compositeMaterial.uniforms["bloomStrength"].value = strength;
	this.compositeMaterial.uniforms["bloomRadius"].value = 0.1;
	this.compositeMaterial.needsUpdate = true;

	var bloomFactors = [1.0, 0.8, 0.6, 0.4, 0.2];
	this.compositeMaterial.uniforms["bloomFactors"].value = bloomFactors;
	this.bloomTintColors = [new THREE.Vector3(1, 1, 1), new THREE.Vector3(1, 1, 1), new THREE.Vector3(1, 1, 1), new THREE.Vector3(1, 1, 1), new THREE.Vector3(1, 1, 1)];
	this.compositeMaterial.uniforms["bloomTintColors"].value = this.bloomTintColors;

	// copy material
	if (THREE.CopyShader === undefined) {

		console.error("THREE.BloomPass relies on THREE.CopyShader");
	}

	var copyShader = THREE.CopyShader;

	this.copyUniforms = THREE.UniformsUtils.clone(copyShader.uniforms);
	this.copyUniforms["opacity"].value = 1.0;

	this.materialCopy = new THREE.ShaderMaterial({
		uniforms: this.copyUniforms,
		vertexShader: copyShader.vertexShader,
		fragmentShader: copyShader.fragmentShader,
		blending: THREE.AdditiveBlending,
		depthTest: false,
		depthWrite: false,
		transparent: true
	});

	this.enabled = true;
	this.needsSwap = false;

	this.oldClearColor = new THREE.Color();
	this.oldClearAlpha = 1;

	this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);
	this.scene = new THREE.Scene();

	this.basic = new THREE.MeshBasicMaterial();

	this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null);
	this.quad.frustumCulled = false; // Avoid getting clipped
	this.scene.add(this.quad);
};

THREE.BloomPass.prototype = Object.assign(Object.create(THREE.Pass.prototype), {

	constructor: THREE.BloomPass,

	dispose: function dispose() {

		for (var i = 0; i < this.renderTargetsHorizontal.length; i++) {

			this.renderTargetsHorizontal[i].dispose();
		}

		for (var i = 0; i < this.renderTargetsVertical.length; i++) {

			this.renderTargetsVertical[i].dispose();
		}

		this.renderTargetBright.dispose();
	},

	setSize: function setSize(width, height) {

		var resx = Math.round(width / 2);
		var resy = Math.round(height / 2);

		this.renderTargetBright.setSize(resx, resy);

		for (var i = 0; i < this.nMips; i++) {

			this.renderTargetsHorizontal[i].setSize(resx, resy);
			this.renderTargetsVertical[i].setSize(resx, resy);

			this.separableBlurMaterials[i].uniforms["texSize"].value = new THREE.Vector2(resx, resy);

			resx = Math.round(resx / 2);
			resy = Math.round(resy / 2);
		}
	},

	render: function render(renderer, writeBuffer, readBuffer, delta, maskActive) {

		this.oldClearColor.copy(renderer.getClearColor());
		this.oldClearAlpha = renderer.getClearAlpha();
		var oldAutoClear = renderer.autoClear;
		renderer.autoClear = false;

		renderer.setClearColor(this.clearColor, 0);

		if (maskActive) renderer.context.disable(renderer.context.STENCIL_TEST);

		// Render input to screen

		if (this.renderToScreen) {

			this.quad.material = this.basic;
			this.basic.map = readBuffer.texture;

			renderer.render(this.scene, this.camera, undefined, true);
		}

		// 1. Extract Bright Areas

		this.highPassUniforms["tDiffuse"].value = readBuffer.texture;
		this.highPassUniforms["luminosityThreshold"].value = this.threshold;
		this.quad.material = this.materialHighPassFilter;

		renderer.render(this.scene, this.camera, this.renderTargetBright, true);

		// 2. Blur All the mips progressively

		var inputRenderTarget = this.renderTargetBright;

		for (var i = 0; i < this.nMips; i++) {

			this.quad.material = this.separableBlurMaterials[i];

			this.separableBlurMaterials[i].uniforms["colorTexture"].value = inputRenderTarget.texture;
			this.separableBlurMaterials[i].uniforms["direction"].value = THREE.BloomPass.BlurDirectionX;
			renderer.render(this.scene, this.camera, this.renderTargetsHorizontal[i], true);

			this.separableBlurMaterials[i].uniforms["colorTexture"].value = this.renderTargetsHorizontal[i].texture;
			this.separableBlurMaterials[i].uniforms["direction"].value = THREE.BloomPass.BlurDirectionY;
			renderer.render(this.scene, this.camera, this.renderTargetsVertical[i], true);

			inputRenderTarget = this.renderTargetsVertical[i];
		}

		// Composite All the mips

		this.quad.material = this.compositeMaterial;
		this.compositeMaterial.uniforms["bloomStrength"].value = this.strength;
		this.compositeMaterial.uniforms["bloomRadius"].value = this.radius;
		this.compositeMaterial.uniforms["bloomTintColors"].value = this.bloomTintColors;

		renderer.render(this.scene, this.camera, this.renderTargetsHorizontal[0], true);

		// Blend it additively over the input texture

		this.quad.material = this.materialCopy;
		this.copyUniforms["tDiffuse"].value = this.renderTargetsHorizontal[0].texture;

		if (maskActive) renderer.context.enable(renderer.context.STENCIL_TEST);

		if (this.renderToScreen) {

			renderer.render(this.scene, this.camera, undefined, false);
		} else {

			renderer.render(this.scene, this.camera, readBuffer, false);
		}

		// Restore renderer settings

		renderer.setClearColor(this.oldClearColor, this.oldClearAlpha);
		renderer.autoClear = oldAutoClear;
	},

	getSeperableBlurMaterial: function getSeperableBlurMaterial(kernelRadius) {

		return new THREE.ShaderMaterial({

			defines: {
				"KERNEL_RADIUS": kernelRadius,
				"SIGMA": kernelRadius
			},

			uniforms: {
				"colorTexture": { value: null },
				"texSize": { value: new THREE.Vector2(0.5, 0.5) },
				"direction": { value: new THREE.Vector2(0.5, 0.5) }
			},

			vertexShader: "varying vec2 vUv;\n\
				void main() {\n\
					vUv = uv;\n\
					gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\
				}",

			fragmentShader: "#include <common>\
				varying vec2 vUv;\n\
				uniform sampler2D colorTexture;\n\
				uniform vec2 texSize;\
				uniform vec2 direction;\
				\
				float gaussianPdf(in float x, in float sigma) {\
					return 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\
				}\
				void main() {\n\
					vec2 invSize = 1.0 / texSize;\
					float fSigma = float(SIGMA);\
					float weightSum = gaussianPdf(0.0, fSigma);\
					vec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\
					for( int i = 1; i < KERNEL_RADIUS; i ++ ) {\
						float x = float(i);\
						float w = gaussianPdf(x, fSigma);\
						vec2 uvOffset = direction * invSize * x;\
						vec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\
						vec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\
						diffuseSum += (sample1 + sample2) * w;\
						weightSum += 2.0 * w;\
					}\
					gl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n\
				}"
		});
	},

	getCompositeMaterial: function getCompositeMaterial(nMips) {

		return new THREE.ShaderMaterial({

			defines: {
				"NUM_MIPS": nMips
			},

			uniforms: {
				"blurTexture1": { value: null },
				"blurTexture2": { value: null },
				"blurTexture3": { value: null },
				"blurTexture4": { value: null },
				"blurTexture5": { value: null },
				"dirtTexture": { value: null },
				"bloomStrength": { value: 1.0 },
				"bloomFactors": { value: null },
				"bloomTintColors": { value: null },
				"bloomRadius": { value: 0.0 }
			},

			vertexShader: "varying vec2 vUv;\n\
				void main() {\n\
					vUv = uv;\n\
					gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\
				}",

			fragmentShader: "varying vec2 vUv;\
				uniform sampler2D blurTexture1;\
				uniform sampler2D blurTexture2;\
				uniform sampler2D blurTexture3;\
				uniform sampler2D blurTexture4;\
				uniform sampler2D blurTexture5;\
				uniform sampler2D dirtTexture;\
				uniform float bloomStrength;\
				uniform float bloomRadius;\
				uniform float bloomFactors[NUM_MIPS];\
				uniform vec3 bloomTintColors[NUM_MIPS];\
				\
				float lerpBloomFactor(const in float factor) { \
					float mirrorFactor = 1.2 - factor;\
					return mix(factor, mirrorFactor, bloomRadius);\
				}\
				\
				void main() {\
					gl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) + \
													 lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) + \
													 lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) + \
													 lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) + \
													 lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\
				}"
		});
	}

});

THREE.BloomPass.BlurDirectionX = new THREE.Vector2(1.0, 0.0);
THREE.BloomPass.BlurDirectionY = new THREE.Vector2(0.0, 1.0);

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * @author spidersharma / http://eduperiment.com/
 */

var THREE = __webpack_require__(1);

THREE.OutlinePass = function (resolution, scene, camera, selectedObjects) {

	this.renderScene = scene;
	this.renderCamera = camera;
	this.selectedObjects = selectedObjects !== undefined ? selectedObjects : [];
	this.visibleEdgeColor = new THREE.Color(1, 1, 1);
	this.hiddenEdgeColor = new THREE.Color(0.1, 0.04, 0.02);
	this.edgeGlow = 0.0;
	this.usePatternTexture = false;
	this.edgeThickness = 1.0;
	this.edgeStrength = 3.0;
	this.downSampleRatio = 2;
	this.pulsePeriod = 0;

	THREE.Pass.call(this);

	this.resolution = resolution !== undefined ? new THREE.Vector2(resolution.x, resolution.y) : new THREE.Vector2(256, 256);

	var pars = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBAFormat };

	var resx = Math.round(this.resolution.x / this.downSampleRatio);
	var resy = Math.round(this.resolution.y / this.downSampleRatio);

	this.maskBufferMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });
	this.maskBufferMaterial.side = THREE.DoubleSide;
	this.renderTargetMaskBuffer = new THREE.WebGLRenderTarget(this.resolution.x, this.resolution.y, pars);
	this.renderTargetMaskBuffer.texture.name = "OutlinePass.mask";
	this.renderTargetMaskBuffer.texture.generateMipmaps = false;

	this.depthMaterial = new THREE.MeshDepthMaterial();
	this.depthMaterial.side = THREE.DoubleSide;
	this.depthMaterial.depthPacking = THREE.RGBADepthPacking;
	this.depthMaterial.blending = THREE.NoBlending;

	this.prepareMaskMaterial = this.getPrepareMaskMaterial();
	this.prepareMaskMaterial.side = THREE.DoubleSide;
	this.prepareMaskMaterial.fragmentShader = replaceDepthToViewZ(this.prepareMaskMaterial.fragmentShader, this.renderCamera);

	this.renderTargetDepthBuffer = new THREE.WebGLRenderTarget(this.resolution.x, this.resolution.y, pars);
	this.renderTargetDepthBuffer.texture.name = "OutlinePass.depth";
	this.renderTargetDepthBuffer.texture.generateMipmaps = false;

	this.renderTargetMaskDownSampleBuffer = new THREE.WebGLRenderTarget(resx, resy, pars);
	this.renderTargetMaskDownSampleBuffer.texture.name = "OutlinePass.depthDownSample";
	this.renderTargetMaskDownSampleBuffer.texture.generateMipmaps = false;

	this.renderTargetBlurBuffer1 = new THREE.WebGLRenderTarget(resx, resy, pars);
	this.renderTargetBlurBuffer1.texture.name = "OutlinePass.blur1";
	this.renderTargetBlurBuffer1.texture.generateMipmaps = false;
	this.renderTargetBlurBuffer2 = new THREE.WebGLRenderTarget(Math.round(resx / 2), Math.round(resy / 2), pars);
	this.renderTargetBlurBuffer2.texture.name = "OutlinePass.blur2";
	this.renderTargetBlurBuffer2.texture.generateMipmaps = false;

	this.edgeDetectionMaterial = this.getEdgeDetectionMaterial();
	this.renderTargetEdgeBuffer1 = new THREE.WebGLRenderTarget(resx, resy, pars);
	this.renderTargetEdgeBuffer1.texture.name = "OutlinePass.edge1";
	this.renderTargetEdgeBuffer1.texture.generateMipmaps = false;
	this.renderTargetEdgeBuffer2 = new THREE.WebGLRenderTarget(Math.round(resx / 2), Math.round(resy / 2), pars);
	this.renderTargetEdgeBuffer2.texture.name = "OutlinePass.edge2";
	this.renderTargetEdgeBuffer2.texture.generateMipmaps = false;

	var MAX_EDGE_THICKNESS = 4;
	var MAX_EDGE_GLOW = 4;

	this.separableBlurMaterial1 = this.getSeperableBlurMaterial(MAX_EDGE_THICKNESS);
	this.separableBlurMaterial1.uniforms["texSize"].value = new THREE.Vector2(resx, resy);
	this.separableBlurMaterial1.uniforms["kernelRadius"].value = 1;
	this.separableBlurMaterial2 = this.getSeperableBlurMaterial(MAX_EDGE_GLOW);
	this.separableBlurMaterial2.uniforms["texSize"].value = new THREE.Vector2(Math.round(resx / 2), Math.round(resy / 2));
	this.separableBlurMaterial2.uniforms["kernelRadius"].value = MAX_EDGE_GLOW;

	// Overlay material
	this.overlayMaterial = this.getOverlayMaterial();

	// copy material
	if (THREE.CopyShader === undefined) console.error("THREE.OutlinePass relies on THREE.CopyShader");

	var copyShader = THREE.CopyShader;

	this.copyUniforms = THREE.UniformsUtils.clone(copyShader.uniforms);
	this.copyUniforms["opacity"].value = 1.0;

	this.materialCopy = new THREE.ShaderMaterial({
		uniforms: this.copyUniforms,
		vertexShader: copyShader.vertexShader,
		fragmentShader: copyShader.fragmentShader,
		blending: THREE.NoBlending,
		depthTest: false,
		depthWrite: false,
		transparent: true
	});

	this.enabled = true;
	this.needsSwap = false;

	this.oldClearColor = new THREE.Color();
	this.oldClearAlpha = 1;

	this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);
	this.scene = new THREE.Scene();

	this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null);
	this.quad.frustumCulled = false; // Avoid getting clipped
	this.scene.add(this.quad);

	this.tempPulseColor1 = new THREE.Color();
	this.tempPulseColor2 = new THREE.Color();
	this.textureMatrix = new THREE.Matrix4();

	function replaceDepthToViewZ(string, camera) {

		var type = camera.isPerspectiveCamera ? 'perspective' : 'orthographic';

		return string.replace(/DEPTH_TO_VIEW_Z/g, type + 'DepthToViewZ');
	}
};

THREE.OutlinePass.prototype = Object.assign(Object.create(THREE.Pass.prototype), {

	constructor: THREE.OutlinePass,

	dispose: function dispose() {

		this.renderTargetMaskBuffer.dispose();
		this.renderTargetDepthBuffer.dispose();
		this.renderTargetMaskDownSampleBuffer.dispose();
		this.renderTargetBlurBuffer1.dispose();
		this.renderTargetBlurBuffer2.dispose();
		this.renderTargetEdgeBuffer1.dispose();
		this.renderTargetEdgeBuffer2.dispose();
	},

	setSize: function setSize(width, height) {

		this.renderTargetMaskBuffer.setSize(width, height);

		var resx = Math.round(width / this.downSampleRatio);
		var resy = Math.round(height / this.downSampleRatio);
		this.renderTargetMaskDownSampleBuffer.setSize(resx, resy);
		this.renderTargetBlurBuffer1.setSize(resx, resy);
		this.renderTargetEdgeBuffer1.setSize(resx, resy);
		this.separableBlurMaterial1.uniforms["texSize"].value = new THREE.Vector2(resx, resy);

		resx = Math.round(resx / 2);
		resy = Math.round(resy / 2);

		this.renderTargetBlurBuffer2.setSize(resx, resy);
		this.renderTargetEdgeBuffer2.setSize(resx, resy);

		this.separableBlurMaterial2.uniforms["texSize"].value = new THREE.Vector2(resx, resy);
	},

	changeVisibilityOfSelectedObjects: function changeVisibilityOfSelectedObjects(bVisible) {

		function gatherSelectedMeshesCallBack(object) {

			if (object.isMesh) {

				if (bVisible) {

					object.visible = object.userData.oldVisible;
					delete object.userData.oldVisible;
				} else {

					object.userData.oldVisible = object.visible;
					object.visible = bVisible;
				}
			}
		}

		for (var i = 0; i < this.selectedObjects.length; i++) {

			var selectedObject = this.selectedObjects[i];
			selectedObject.traverse(gatherSelectedMeshesCallBack);
		}
	},

	changeVisibilityOfNonSelectedObjects: function changeVisibilityOfNonSelectedObjects(bVisible) {

		var selectedMeshes = [];

		function gatherSelectedMeshesCallBack(object) {

			if (object.isMesh) selectedMeshes.push(object);
		}

		for (var i = 0; i < this.selectedObjects.length; i++) {

			var selectedObject = this.selectedObjects[i];
			selectedObject.traverse(gatherSelectedMeshesCallBack);
		}

		function VisibilityChangeCallBack(object) {

			if (object.isMesh || object.isLine || object.isSprite) {

				var bFound = false;

				for (var i = 0; i < selectedMeshes.length; i++) {

					var selectedObjectId = selectedMeshes[i].id;

					if (selectedObjectId === object.id) {

						bFound = true;
						break;
					}
				}

				if (!bFound) {

					var visibility = object.visible;

					if (!bVisible || object.bVisible) object.visible = bVisible;

					object.bVisible = visibility;
				}
			}
		}

		this.renderScene.traverse(VisibilityChangeCallBack);
	},

	updateTextureMatrix: function updateTextureMatrix() {

		this.textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);
		this.textureMatrix.multiply(this.renderCamera.projectionMatrix);
		this.textureMatrix.multiply(this.renderCamera.matrixWorldInverse);
	},

	render: function render(renderer, writeBuffer, readBuffer, delta, maskActive) {

		if (this.selectedObjects.length > 0) {

			this.oldClearColor.copy(renderer.getClearColor());
			this.oldClearAlpha = renderer.getClearAlpha();
			var oldAutoClear = renderer.autoClear;

			renderer.autoClear = false;

			if (maskActive) renderer.context.disable(renderer.context.STENCIL_TEST);

			renderer.setClearColor(0xffffff, 1);

			// Make selected objects invisible
			this.changeVisibilityOfSelectedObjects(false);

			var currentBackground = this.renderScene.background;
			this.renderScene.background = null;

			// 1. Draw Non Selected objects in the depth buffer
			this.renderScene.overrideMaterial = this.depthMaterial;
			renderer.render(this.renderScene, this.renderCamera, this.renderTargetDepthBuffer, true);

			// Make selected objects visible
			this.changeVisibilityOfSelectedObjects(true);

			// Update Texture Matrix for Depth compare
			this.updateTextureMatrix();

			// Make non selected objects invisible, and draw only the selected objects, by comparing the depth buffer of non selected objects
			this.changeVisibilityOfNonSelectedObjects(false);
			this.renderScene.overrideMaterial = this.prepareMaskMaterial;
			this.prepareMaskMaterial.uniforms["cameraNearFar"].value = new THREE.Vector2(this.renderCamera.near, this.renderCamera.far);
			this.prepareMaskMaterial.uniforms["depthTexture"].value = this.renderTargetDepthBuffer.texture;
			this.prepareMaskMaterial.uniforms["textureMatrix"].value = this.textureMatrix;
			renderer.render(this.renderScene, this.renderCamera, this.renderTargetMaskBuffer, true);
			this.renderScene.overrideMaterial = null;
			this.changeVisibilityOfNonSelectedObjects(true);

			this.renderScene.background = currentBackground;

			// 2. Downsample to Half resolution
			this.quad.material = this.materialCopy;
			this.copyUniforms["tDiffuse"].value = this.renderTargetMaskBuffer.texture;
			renderer.render(this.scene, this.camera, this.renderTargetMaskDownSampleBuffer, true);

			this.tempPulseColor1.copy(this.visibleEdgeColor);
			this.tempPulseColor2.copy(this.hiddenEdgeColor);

			if (this.pulsePeriod > 0) {

				var scalar = (1 + 0.25) / 2 + Math.cos(performance.now() * 0.01 / this.pulsePeriod) * (1.0 - 0.25) / 2;
				this.tempPulseColor1.multiplyScalar(scalar);
				this.tempPulseColor2.multiplyScalar(scalar);
			}

			// 3. Apply Edge Detection Pass
			this.quad.material = this.edgeDetectionMaterial;
			this.edgeDetectionMaterial.uniforms["maskTexture"].value = this.renderTargetMaskDownSampleBuffer.texture;
			this.edgeDetectionMaterial.uniforms["texSize"].value = new THREE.Vector2(this.renderTargetMaskDownSampleBuffer.width, this.renderTargetMaskDownSampleBuffer.height);
			this.edgeDetectionMaterial.uniforms["visibleEdgeColor"].value = this.tempPulseColor1;
			this.edgeDetectionMaterial.uniforms["hiddenEdgeColor"].value = this.tempPulseColor2;
			renderer.render(this.scene, this.camera, this.renderTargetEdgeBuffer1, true);

			// 4. Apply Blur on Half res
			this.quad.material = this.separableBlurMaterial1;
			this.separableBlurMaterial1.uniforms["colorTexture"].value = this.renderTargetEdgeBuffer1.texture;
			this.separableBlurMaterial1.uniforms["direction"].value = THREE.OutlinePass.BlurDirectionX;
			this.separableBlurMaterial1.uniforms["kernelRadius"].value = this.edgeThickness;
			renderer.render(this.scene, this.camera, this.renderTargetBlurBuffer1, true);
			this.separableBlurMaterial1.uniforms["colorTexture"].value = this.renderTargetBlurBuffer1.texture;
			this.separableBlurMaterial1.uniforms["direction"].value = THREE.OutlinePass.BlurDirectionY;
			renderer.render(this.scene, this.camera, this.renderTargetEdgeBuffer1, true);

			// Apply Blur on quarter res
			this.quad.material = this.separableBlurMaterial2;
			this.separableBlurMaterial2.uniforms["colorTexture"].value = this.renderTargetEdgeBuffer1.texture;
			this.separableBlurMaterial2.uniforms["direction"].value = THREE.OutlinePass.BlurDirectionX;
			renderer.render(this.scene, this.camera, this.renderTargetBlurBuffer2, true);
			this.separableBlurMaterial2.uniforms["colorTexture"].value = this.renderTargetBlurBuffer2.texture;
			this.separableBlurMaterial2.uniforms["direction"].value = THREE.OutlinePass.BlurDirectionY;
			renderer.render(this.scene, this.camera, this.renderTargetEdgeBuffer2, true);

			// Blend it additively over the input texture
			this.quad.material = this.overlayMaterial;
			this.overlayMaterial.uniforms["maskTexture"].value = this.renderTargetMaskBuffer.texture;
			this.overlayMaterial.uniforms["edgeTexture1"].value = this.renderTargetEdgeBuffer1.texture;
			this.overlayMaterial.uniforms["edgeTexture2"].value = this.renderTargetEdgeBuffer2.texture;
			this.overlayMaterial.uniforms["patternTexture"].value = this.patternTexture;
			this.overlayMaterial.uniforms["edgeStrength"].value = this.edgeStrength;
			this.overlayMaterial.uniforms["edgeGlow"].value = this.edgeGlow;
			this.overlayMaterial.uniforms["usePatternTexture"].value = this.usePatternTexture;

			if (maskActive) renderer.context.enable(renderer.context.STENCIL_TEST);

			renderer.render(this.scene, this.camera, readBuffer, false);

			renderer.setClearColor(this.oldClearColor, this.oldClearAlpha);
			renderer.autoClear = oldAutoClear;
		}

		if (this.renderToScreen) {

			this.quad.material = this.materialCopy;
			this.copyUniforms["tDiffuse"].value = readBuffer.texture;
			renderer.render(this.scene, this.camera);
		}
	},

	getPrepareMaskMaterial: function getPrepareMaskMaterial() {

		return new THREE.ShaderMaterial({

			uniforms: {
				"depthTexture": { value: null },
				"cameraNearFar": { value: new THREE.Vector2(0.5, 0.5) },
				"textureMatrix": { value: new THREE.Matrix4() }
			},

			vertexShader: ['varying vec4 projTexCoord;', 'varying vec4 vPosition;', 'uniform mat4 textureMatrix;', 'void main() {', '	vPosition = modelViewMatrix * vec4( position, 1.0 );', '	vec4 worldPosition = modelMatrix * vec4( position, 1.0 );', '	projTexCoord = textureMatrix * worldPosition;', '	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\n'),

			fragmentShader: ['#include <packing>', 'varying vec4 vPosition;', 'varying vec4 projTexCoord;', 'uniform sampler2D depthTexture;', 'uniform vec2 cameraNearFar;', 'void main() {', '	float depth = unpackRGBAToDepth(texture2DProj( depthTexture, projTexCoord ));', '	float viewZ = - DEPTH_TO_VIEW_Z( depth, cameraNearFar.x, cameraNearFar.y );', '	float depthTest = (-vPosition.z > viewZ) ? 1.0 : 0.0;', '	gl_FragColor = vec4(0.0, depthTest, 1.0, 1.0);', '}'].join('\n')

		});
	},

	getEdgeDetectionMaterial: function getEdgeDetectionMaterial() {

		return new THREE.ShaderMaterial({

			uniforms: {
				"maskTexture": { value: null },
				"texSize": { value: new THREE.Vector2(0.5, 0.5) },
				"visibleEdgeColor": { value: new THREE.Vector3(1.0, 1.0, 1.0) },
				"hiddenEdgeColor": { value: new THREE.Vector3(1.0, 1.0, 1.0) }
			},

			vertexShader: "varying vec2 vUv;\n\
				void main() {\n\
					vUv = uv;\n\
					gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\
				}",

			fragmentShader: "varying vec2 vUv;\
				uniform sampler2D maskTexture;\
				uniform vec2 texSize;\
				uniform vec3 visibleEdgeColor;\
				uniform vec3 hiddenEdgeColor;\
				\
				void main() {\n\
					vec2 invSize = 1.0 / texSize;\
					vec4 uvOffset = vec4(1.0, 0.0, 0.0, 1.0) * vec4(invSize, invSize);\
					vec4 c1 = texture2D( maskTexture, vUv + uvOffset.xy);\
					vec4 c2 = texture2D( maskTexture, vUv - uvOffset.xy);\
					vec4 c3 = texture2D( maskTexture, vUv + uvOffset.yw);\
					vec4 c4 = texture2D( maskTexture, vUv - uvOffset.yw);\
					float diff1 = (c1.r - c2.r)*0.5;\
					float diff2 = (c3.r - c4.r)*0.5;\
					float d = length( vec2(diff1, diff2) );\
					float a1 = min(c1.g, c2.g);\
					float a2 = min(c3.g, c4.g);\
					float visibilityFactor = min(a1, a2);\
					vec3 edgeColor = 1.0 - visibilityFactor > 0.001 ? visibleEdgeColor : hiddenEdgeColor;\
					gl_FragColor = vec4(edgeColor, 1.0) * vec4(d);\
				}"
		});
	},

	getSeperableBlurMaterial: function getSeperableBlurMaterial(maxRadius) {

		return new THREE.ShaderMaterial({

			defines: {
				"MAX_RADIUS": maxRadius
			},

			uniforms: {
				"colorTexture": { value: null },
				"texSize": { value: new THREE.Vector2(0.5, 0.5) },
				"direction": { value: new THREE.Vector2(0.5, 0.5) },
				"kernelRadius": { value: 1.0 }
			},

			vertexShader: "varying vec2 vUv;\n\
				void main() {\n\
					vUv = uv;\n\
					gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\
				}",

			fragmentShader: "#include <common>\
				varying vec2 vUv;\
				uniform sampler2D colorTexture;\
				uniform vec2 texSize;\
				uniform vec2 direction;\
				uniform float kernelRadius;\
				\
				float gaussianPdf(in float x, in float sigma) {\
					return 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\
				}\
				void main() {\
					vec2 invSize = 1.0 / texSize;\
					float weightSum = gaussianPdf(0.0, kernelRadius);\
					vec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\
					vec2 delta = direction * invSize * kernelRadius/float(MAX_RADIUS);\
					vec2 uvOffset = delta;\
					for( int i = 1; i <= MAX_RADIUS; i ++ ) {\
						float w = gaussianPdf(uvOffset.x, kernelRadius);\
						vec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\
						vec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\
						diffuseSum += ((sample1 + sample2) * w);\
						weightSum += (2.0 * w);\
						uvOffset += delta;\
					}\
					gl_FragColor = vec4(diffuseSum/weightSum, 1.0);\
				}"
		});
	},

	getOverlayMaterial: function getOverlayMaterial() {

		return new THREE.ShaderMaterial({

			uniforms: {
				"maskTexture": { value: null },
				"edgeTexture1": { value: null },
				"edgeTexture2": { value: null },
				"patternTexture": { value: null },
				"edgeStrength": { value: 1.0 },
				"edgeGlow": { value: 1.0 },
				"usePatternTexture": { value: 0.0 }
			},

			vertexShader: "varying vec2 vUv;\n\
				void main() {\n\
					vUv = uv;\n\
					gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\
				}",

			fragmentShader: "varying vec2 vUv;\
				uniform sampler2D maskTexture;\
				uniform sampler2D edgeTexture1;\
				uniform sampler2D edgeTexture2;\
				uniform sampler2D patternTexture;\
				uniform float edgeStrength;\
				uniform float edgeGlow;\
				uniform bool usePatternTexture;\
				\
				void main() {\
					vec4 edgeValue1 = texture2D(edgeTexture1, vUv);\
					vec4 edgeValue2 = texture2D(edgeTexture2, vUv);\
					vec4 maskColor = texture2D(maskTexture, vUv);\
					vec4 patternColor = texture2D(patternTexture, 6.0 * vUv);\
					float visibilityFactor = 1.0 - maskColor.g > 0.0 ? 1.0 : 0.5;\
					vec4 edgeValue = edgeValue1 + edgeValue2 * edgeGlow;\
					vec4 finalColor = edgeStrength * maskColor.r * edgeValue;\
					if(usePatternTexture)\
						finalColor += + visibilityFactor * (1.0 - maskColor.r) * (1.0 - patternColor.r);\
					gl_FragColor = finalColor;\
				}",
			blending: THREE.AdditiveBlending,
			depthTest: false,
			depthWrite: false,
			transparent: true
		});
	}

});

THREE.OutlinePass.BlurDirectionX = new THREE.Vector2(1.0, 0.0);
THREE.OutlinePass.BlurDirectionY = new THREE.Vector2(0.0, 1.0);

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.

var THREE = __webpack_require__(1);

THREE.VignetteShader = {

	uniforms: {

		"tDiffuse": { value: null },
		"offset": { value: 1.0 },
		"darkness": { value: 1.0 }

	},

	vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

	fragmentShader: ["uniform float offset;", "uniform float darkness;", "uniform sampler2D tDiffuse;", "varying vec2 vUv;", "void main() {",

	// Eskil's vignette

	"vec4 texel = texture2D( tDiffuse, vUv );", "vec2 uv = ( vUv - vec2( 0.5 ) ) * vec2( offset );", "gl_FragColor = vec4( mix( texel.rgb, vec3( 1.0 - darkness ), dot( uv, uv ) ), texel.a );",

	/*
 // alternative version from glfx.js
 // this one makes more "dusty" look (as opposed to "burned")
 "vec4 color = texture2D( tDiffuse, vUv );",
 "float dist = distance( vUv, vec2( 0.5 ) );",
 "color.rgb *= smoothstep( 0.8, offset * 0.799, dist *( darkness + offset ) );",
 "gl_FragColor = color;",
 */

	"}"].join("\n")

};

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.

var THREE = __webpack_require__(1);

THREE.HorizontalTiltShiftShader = {

	uniforms: {

		"tDiffuse": { value: null },
		"h": { value: 1.0 / 512.0 },
		"r": { value: 0.35 },
		"d": { value: 0.4 }

	},

	vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

	fragmentShader: ["uniform sampler2D tDiffuse;", "uniform float h;", "uniform float r;", "uniform float d;", "varying vec2 vUv;", "void main() {", "vec4 sum = vec4( 0.0 );", "float hh = h * max(0.0, abs(r - vUv.y) - d) * (1.0 / r);", "sum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;", "sum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;", "sum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;", "sum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;", "sum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;", "sum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;", "sum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;", "sum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;", "gl_FragColor = sum;", "}"].join("\n")

};

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.
/**
 * - 9 samples per pass
 * - standard deviation 2.7
 * - "h" and "v" parameters should be set to "1 / width" and "1 / height"
 * - "r" parameter control where "focused" horizontal line lies in V space of UVs
 * - "d" width of unblurred area in V space of UVs
 */

var THREE = __webpack_require__(1);

THREE.VerticalTiltShiftShader = {

	uniforms: {

		"tDiffuse": { value: null },
		"v": { value: 1.0 / 512.0 },
		"r": { value: 0.35 },
		"d": { value: 0.4 }

	},

	vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

	fragmentShader: ["uniform sampler2D tDiffuse;", "uniform float v;", "uniform float r;", "uniform float d;", "varying vec2 vUv;", "void main() {", "vec4 sum = vec4( 0.0 );", "float vv = v * max(0.0, abs(r - vUv.y) - d) * (1.0 / r);", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;", "gl_FragColor = sum;", "}"].join("\n")

};

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * @author alteredq / http://alteredqualia.com/
 *
 * Color correction
 */

var THREE = __webpack_require__(1);

THREE.ColorCorrectionShader = {

	uniforms: {

		"tDiffuse": { value: null },
		"powRGB": { value: new THREE.Vector3(2, 2, 2) },
		"mulRGB": { value: new THREE.Vector3(1, 1, 1) },
		"addRGB": { value: new THREE.Vector3(0, 0, 0) }

	},

	vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

	fragmentShader: ["uniform sampler2D tDiffuse;", "uniform vec3 powRGB;", "uniform vec3 mulRGB;", "uniform vec3 addRGB;", "varying vec2 vUv;", "void main() {", "gl_FragColor = texture2D( tDiffuse, vUv );", "gl_FragColor.rgb = mulRGB * pow( ( gl_FragColor.rgb + addRGB ), powRGB );", "}"].join("\n")

};

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * @author Mugen87 / https://github.com/Mugen87
 *
 * References:
 * http://john-chapman-graphics.blogspot.com/2013/01/ssao-tutorial.html
 * https://learnopengl.com/Advanced-Lighting/SSAO
 * https://github.com/McNopper/OpenGL/blob/master/Example28/shader/ssao.frag.glsl
 */

var THREE = __webpack_require__(1);

THREE.SSAOShader = {

	defines: {
		"PERSPECTIVE_CAMERA": 1,
		"KERNEL_SIZE": 64
	},

	uniforms: {

		"tDiffuse": { value: null },
		"tNormal": { value: null },
		"tDepth": { value: null },
		"tNoise": { value: null },
		"kernel": { value: null },
		"cameraNear": { value: null },
		"cameraFar": { value: null },
		"resolution": { value: new THREE.Vector2() },
		"cameraProjectionMatrix": { value: new THREE.Matrix4() },
		"cameraInverseProjectionMatrix": { value: new THREE.Matrix4() },
		"kernelRadius": { value: 8 },
		"minDistance": { value: 0.005 },
		"maxDistance": { value: 0.05 }

	},

	vertexShader: ["varying vec2 vUv;", "void main() {", "	vUv = uv;", "	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

	fragmentShader: ["uniform sampler2D tDiffuse;", "uniform sampler2D tNormal;", "uniform sampler2D tDepth;", "uniform sampler2D tNoise;", "uniform vec3 kernel[ KERNEL_SIZE ];", "uniform vec2 resolution;", "uniform float cameraNear;", "uniform float cameraFar;", "uniform mat4 cameraProjectionMatrix;", "uniform mat4 cameraInverseProjectionMatrix;", "uniform float kernelRadius;", "uniform float minDistance;", // avoid artifacts caused by neighbour fragments with minimal depth difference
	"uniform float maxDistance;", // avoid the influence of fragments which are too far away

	"varying vec2 vUv;", "#include <packing>", "float getDepth( const in vec2 screenPosition ) {", "	return texture2D( tDepth, screenPosition ).x;", "}", "float getLinearDepth( const in vec2 screenPosition ) {", "	#if PERSPECTIVE_CAMERA == 1", "		float fragCoordZ = texture2D( tDepth, screenPosition ).x;", "		float viewZ = perspectiveDepthToViewZ( fragCoordZ, cameraNear, cameraFar );", "		return viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );", "	#else", "		return texture2D( depthSampler, coord ).x;", "	#endif", "}", "float getViewZ( const in float depth ) {", "	#if PERSPECTIVE_CAMERA == 1", "		return perspectiveDepthToViewZ( depth, cameraNear, cameraFar );", "	#else", "		return orthographicDepthToViewZ( depth, cameraNear, cameraFar );", "	#endif", "}", "vec3 getViewPosition( const in vec2 screenPosition, const in float depth, const in float viewZ ) {", "	float clipW = cameraProjectionMatrix[2][3] * viewZ + cameraProjectionMatrix[3][3];", "	vec4 clipPosition = vec4( ( vec3( screenPosition, depth ) - 0.5 ) * 2.0, 1.0 );", "	clipPosition *= clipW; // unprojection.", "	return ( cameraInverseProjectionMatrix * clipPosition ).xyz;", "}", "vec3 getViewNormal( const in vec2 screenPosition ) {", "	return unpackRGBToNormal( texture2D( tNormal, screenPosition ).xyz );", "}", "void main() {", "	float depth = getDepth( vUv );", "	float viewZ = getViewZ( depth );", "	vec3 viewPosition = getViewPosition( vUv, depth, viewZ );", "	vec3 viewNormal = getViewNormal( vUv );", " vec2 noiseScale = vec2( resolution.x / 4.0, resolution.y / 4.0 );", "	vec3 random = texture2D( tNoise, vUv * noiseScale ).xyz;",

	// compute matrix used to reorient a kernel vector

	"	vec3 tangent = normalize( random - viewNormal * dot( random, viewNormal ) );", "	vec3 bitangent = cross( viewNormal, tangent );", "	mat3 kernelMatrix = mat3( tangent, bitangent, viewNormal );", " float occlusion = 0.0;", " for ( int i = 0; i < KERNEL_SIZE; i ++ ) {", "		vec3 sampleVector = kernelMatrix * kernel[ i ];", // reorient sample vector in view space
	"		vec3 samplePoint = viewPosition + ( sampleVector * kernelRadius );", // calculate sample point

	"		vec4 samplePointNDC = cameraProjectionMatrix * vec4( samplePoint, 1.0 );", // project point and calculate NDC
	"		samplePointNDC /= samplePointNDC.w;", "		vec2 samplePointUv = samplePointNDC.xy * 0.5 + 0.5;", // compute uv coordinates

	"		float realDepth = getLinearDepth( samplePointUv );", // get linear depth from depth texture
	"		float sampleDepth = viewZToOrthographicDepth( samplePoint.z, cameraNear, cameraFar );", // compute linear depth of the sample view Z value
	"		float delta = sampleDepth - realDepth;", "		if ( delta > minDistance && delta < maxDistance ) {", // if fragment is before sample point, increase occlusion

	"			occlusion += 1.0;", "		}", "	}", "	occlusion = clamp( occlusion / float( KERNEL_SIZE ), 0.0, 1.0 );", "	gl_FragColor = vec4( vec3( 1.0 - occlusion ), 1.0 );", "}"].join("\n")

};

THREE.SSAODepthShader = {

	defines: {
		"PERSPECTIVE_CAMERA": 1
	},

	uniforms: {

		"tDepth": { value: null },
		"cameraNear": { value: null },
		"cameraFar": { value: null }

	},

	vertexShader: ["varying vec2 vUv;", "void main() {", "	vUv = uv;", "	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

	fragmentShader: ["uniform sampler2D tDepth;", "uniform float cameraNear;", "uniform float cameraFar;", "varying vec2 vUv;", "#include <packing>", "float getLinearDepth( const in vec2 screenPosition ) {", "	#if PERSPECTIVE_CAMERA == 1", "		float fragCoordZ = texture2D( tDepth, screenPosition ).x;", "		float viewZ = perspectiveDepthToViewZ( fragCoordZ, cameraNear, cameraFar );", "		return viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );", "	#else", "		return texture2D( depthSampler, coord ).x;", "	#endif", "}", "void main() {", "	float depth = getLinearDepth( vUv );", "	gl_FragColor = vec4( vec3( 1.0 - depth ), 1.0 );", "}"].join("\n")

};

THREE.SSAOBlurShader = {

	uniforms: {

		"tDiffuse": { value: null },
		"resolution": { value: new THREE.Vector2() }

	},

	vertexShader: ["varying vec2 vUv;", "void main() {", "	vUv = uv;", "	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

	fragmentShader: ["uniform sampler2D tDiffuse;", "uniform vec2 resolution;", "varying vec2 vUv;", "void main() {", "	vec2 texelSize = ( 1.0 / resolution );", "	float result = 0.0;", "	for ( int i = - 2; i <= 2; i ++ ) {", "		for ( int j = - 2; j <= 2; j ++ ) {", "			vec2 offset = ( vec2( float( i ), float( j ) ) ) * texelSize;", "			result += texture2D( tDiffuse, vUv + offset ).r;", "		}", "	}", "	gl_FragColor = vec4( vec3( result / ( 5.0 * 5.0 ) ), 1.0 );", "}"].join("\n")

};

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * @author Mugen87 / https://github.com/Mugen87
 */

var THREE = __webpack_require__(1);
var SimplexNoise = __webpack_require__(150);

THREE.SSAOPass = function (scene, camera, width, height) {

	THREE.Pass.call(this);

	this.width = width !== undefined ? width : 512;
	this.height = height !== undefined ? height : 512;

	this.clear = true;

	this.camera = camera;
	this.scene = scene;

	this.kernelRadius = 8;
	this.kernelSize = 64;
	this.kernel = [];
	this.noiseTexture = null;
	this.output = 0;

	this.minDistance = 0.005;
	this.maxDistance = 0.1;

	//

	this.generateSampleKernel();
	this.generateRandomKernelRotations();

	// beauty render target with depth buffer

	var depthTexture = new THREE.DepthTexture();
	depthTexture.type = THREE.UnsignedShortType;
	depthTexture.minFilter = THREE.NearestFilter;
	depthTexture.maxFilter = THREE.NearestFilter;

	this.beautyRenderTarget = new THREE.WebGLRenderTarget(this.width, this.height, {
		minFilter: THREE.LinearFilter,
		magFilter: THREE.LinearFilter,
		format: THREE.RGBAFormat,
		depthTexture: depthTexture,
		depthBuffer: true
	});

	// normal render target

	this.normalRenderTarget = new THREE.WebGLRenderTarget(this.width, this.height, {
		minFilter: THREE.NearestFilter,
		magFilter: THREE.NearestFilter,
		format: THREE.RGBAFormat
	});

	// ssao render target

	this.ssaoRenderTarget = new THREE.WebGLRenderTarget(this.width, this.height, {
		minFilter: THREE.LinearFilter,
		magFilter: THREE.LinearFilter,
		format: THREE.RGBAFormat
	});

	this.blurRenderTarget = this.ssaoRenderTarget.clone();

	// ssao material

	if (THREE.SSAOShader === undefined) {

		console.error('THREE.SSAOPass: The pass relies on THREE.SSAOShader.');
	}

	this.ssaoMaterial = new THREE.ShaderMaterial({
		defines: Object.assign({}, THREE.SSAOShader.defines),
		uniforms: THREE.UniformsUtils.clone(THREE.SSAOShader.uniforms),
		vertexShader: THREE.SSAOShader.vertexShader,
		fragmentShader: THREE.SSAOShader.fragmentShader,
		blending: THREE.NoBlending
	});

	this.ssaoMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;
	this.ssaoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture;
	this.ssaoMaterial.uniforms['tDepth'].value = this.beautyRenderTarget.depthTexture;
	this.ssaoMaterial.uniforms['tNoise'].value = this.noiseTexture;
	this.ssaoMaterial.uniforms['kernel'].value = this.kernel;
	this.ssaoMaterial.uniforms['cameraNear'].value = this.camera.near;
	this.ssaoMaterial.uniforms['cameraFar'].value = this.camera.far;
	this.ssaoMaterial.uniforms['resolution'].value.set(this.width, this.height);
	this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);
	this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.getInverse(this.camera.projectionMatrix);

	// normal material

	this.normalMaterial = new THREE.MeshNormalMaterial();
	this.normalMaterial.blending = THREE.NoBlending;

	// blur material

	this.blurMaterial = new THREE.ShaderMaterial({
		defines: Object.assign({}, THREE.SSAOBlurShader.defines),
		uniforms: THREE.UniformsUtils.clone(THREE.SSAOBlurShader.uniforms),
		vertexShader: THREE.SSAOBlurShader.vertexShader,
		fragmentShader: THREE.SSAOBlurShader.fragmentShader
	});
	this.blurMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;
	this.blurMaterial.uniforms['resolution'].value.set(this.width, this.height);

	// material for rendering the depth

	this.depthRenderMaterial = new THREE.ShaderMaterial({
		defines: Object.assign({}, THREE.SSAODepthShader.defines),
		uniforms: THREE.UniformsUtils.clone(THREE.SSAODepthShader.uniforms),
		vertexShader: THREE.SSAODepthShader.vertexShader,
		fragmentShader: THREE.SSAODepthShader.fragmentShader,
		blending: THREE.NoBlending
	});
	this.depthRenderMaterial.uniforms['tDepth'].value = this.beautyRenderTarget.depthTexture;
	this.depthRenderMaterial.uniforms['cameraNear'].value = this.camera.near;
	this.depthRenderMaterial.uniforms['cameraFar'].value = this.camera.far;

	// material for rendering the content of a render target

	this.copyMaterial = new THREE.ShaderMaterial({
		uniforms: THREE.UniformsUtils.clone(THREE.CopyShader.uniforms),
		vertexShader: THREE.CopyShader.vertexShader,
		fragmentShader: THREE.CopyShader.fragmentShader,
		transparent: true,
		depthTest: false,
		depthWrite: false,
		blendSrc: THREE.DstColorFactor,
		blendDst: THREE.ZeroFactor,
		blendEquation: THREE.AddEquation,
		blendSrcAlpha: THREE.DstAlphaFactor,
		blendDstAlpha: THREE.ZeroFactor,
		blendEquationAlpha: THREE.AddEquation
	});

	//

	this.quadCamera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);
	this.quadScene = new THREE.Scene();
	this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null);
	this.quadScene.add(this.quad);

	//

	this.originalClearColor = new THREE.Color();
};

THREE.SSAOPass.prototype = Object.assign(Object.create(THREE.Pass.prototype), {

	constructor: THREE.SSAOPass,

	dispose: function dispose() {

		// dispose render targets

		this.beautyRenderTarget.dispose();
		this.normalRenderTarget.dispose();
		this.ssaoRenderTarget.dispose();
		this.blurRenderTarget.dispose();

		// dispose geometry

		this.quad.geometry.dispose();

		// dispose materials

		this.normalMaterial.dispose();
		this.blurMaterial.dispose();
		this.copyMaterial.dispose();
		this.depthRenderMaterial.dispose();
	},

	render: function render(renderer, writeBuffer /*, readBuffer, delta, maskActive */) {

		// render beauty and depth

		renderer.render(this.scene, this.camera, this.beautyRenderTarget, true);

		// render normals

		this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0);

		// render SSAO

		this.ssaoMaterial.uniforms['kernelRadius'].value = this.kernelRadius;
		this.ssaoMaterial.uniforms['minDistance'].value = this.minDistance;
		this.ssaoMaterial.uniforms['maxDistance'].value = this.maxDistance;
		this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget);

		// render blur

		this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget);

		// output result to screen

		switch (this.output) {

			case THREE.SSAOPass.OUTPUT.SSAO:

				this.copyMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;
				this.copyMaterial.blending = THREE.NoBlending;
				this.renderPass(renderer, this.copyMaterial, null);

				break;

			case THREE.SSAOPass.OUTPUT.Blur:

				this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;
				this.copyMaterial.blending = THREE.NoBlending;
				this.renderPass(renderer, this.copyMaterial, null);

				break;

			case THREE.SSAOPass.OUTPUT.Beauty:

				this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;
				this.copyMaterial.blending = THREE.NoBlending;
				this.renderPass(renderer, this.copyMaterial, null);

				break;

			case THREE.SSAOPass.OUTPUT.Depth:

				this.renderPass(renderer, this.depthRenderMaterial, null);

				break;

			case THREE.SSAOPass.OUTPUT.Normal:

				this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;
				this.copyMaterial.blending = THREE.NoBlending;
				this.renderPass(renderer, this.copyMaterial, null);

				break;

			case THREE.SSAOPass.OUTPUT.Default:

				this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;
				this.copyMaterial.blending = THREE.NoBlending;
				this.renderPass(renderer, this.copyMaterial, null);

				this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;
				this.copyMaterial.blending = THREE.CustomBlending;
				this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);

				break;

			default:
				console.warn('THREE.SSAOPass: Unknown output type.');

		}
	},

	renderPass: function renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {

		// save original state
		this.originalClearColor.copy(renderer.getClearColor());
		var originalClearAlpha = renderer.getClearAlpha();
		var originalAutoClear = renderer.autoClear;

		// setup pass state
		renderer.autoClear = false;
		var clearNeeded = clearColor !== undefined && clearColor !== null;
		if (clearNeeded) {

			renderer.setClearColor(clearColor);
			renderer.setClearAlpha(clearAlpha || 0.0);
		}

		this.quad.material = passMaterial;
		renderer.render(this.quadScene, this.quadCamera, renderTarget, clearNeeded);

		// restore original state
		renderer.autoClear = originalAutoClear;
		renderer.setClearColor(this.originalClearColor);
		renderer.setClearAlpha(originalClearAlpha);
	},

	renderOverride: function renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {

		this.originalClearColor.copy(renderer.getClearColor());
		var originalClearAlpha = renderer.getClearAlpha();
		var originalAutoClear = renderer.autoClear;

		renderer.autoClear = false;

		clearColor = overrideMaterial.clearColor || clearColor;
		clearAlpha = overrideMaterial.clearAlpha || clearAlpha;

		var clearNeeded = clearColor !== undefined && clearColor !== null;

		if (clearNeeded) {

			renderer.setClearColor(clearColor);
			renderer.setClearAlpha(clearAlpha || 0.0);
		}

		this.scene.overrideMaterial = overrideMaterial;
		renderer.render(this.scene, this.camera, renderTarget, clearNeeded);
		this.scene.overrideMaterial = null;

		// restore original state

		renderer.autoClear = originalAutoClear;
		renderer.setClearColor(this.originalClearColor);
		renderer.setClearAlpha(originalClearAlpha);
	},

	setSize: function setSize(width, height) {

		this.width = width;
		this.height = height;

		this.beautyRenderTarget.setSize(width, height);
		this.ssaoRenderTarget.setSize(width, height);
		this.normalRenderTarget.setSize(width, height);
		this.blurRenderTarget.setSize(width, height);

		this.ssaoMaterial.uniforms['resolution'].value.set(width, height);
		this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);
		this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.getInverse(this.camera.projectionMatrix);

		this.blurMaterial.uniforms['resolution'].value.set(width, height);
	},

	generateSampleKernel: function generateSampleKernel() {

		var kernelSize = this.kernelSize;
		var kernel = this.kernel;

		for (var i = 0; i < kernelSize; i++) {

			var sample = new THREE.Vector3();
			sample.x = Math.random() * 2 - 1;
			sample.y = Math.random() * 2 - 1;
			sample.z = Math.random();

			sample.normalize();

			var scale = i / kernelSize;
			scale = THREE.Math.lerp(0.1, 1, scale * scale);
			sample.multiplyScalar(scale);

			kernel.push(sample);
		}
	},

	generateRandomKernelRotations: function generateRandomKernelRotations() {

		var width = 4,
		    height = 4;

		if (SimplexNoise === undefined) {

			console.error('THREE.SSAOPass: The pass relies on THREE.SimplexNoise.');
		}

		var simplex = new SimplexNoise();

		var size = width * height;
		var data = new Float32Array(size);

		for (var i = 0; i < size; i++) {

			var x = Math.random() * 2 - 1;
			var y = Math.random() * 2 - 1;
			var z = 0;

			data[i] = simplex.noise3d(x, y, z);
		}

		this.noiseTexture = new THREE.DataTexture(data, width, height, THREE.LuminanceFormat, THREE.FloatType);
		this.noiseTexture.wrapS = THREE.RepeatWrapping;
		this.noiseTexture.wrapT = THREE.RepeatWrapping;
		this.noiseTexture.needsUpdate = true;
	}

});

THREE.SSAOPass.OUTPUT = {
	'Default': 0,
	'SSAO': 1,
	'Blur': 2,
	'Beauty': 3,
	'Depth': 4,
	'Normal': 5
};

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Ported from Stefan Gustavson's java implementation
// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf
// Read Stefan's excellent paper for details on how this code works.
//
// Sean McCullough banksean@gmail.com
//
// Added 4D noise
// Joshua Koo zz85nus@gmail.com 

/**
 * You can pass in a random number generator object if you like.
 * It is assumed to have a random() method.
 */
var SimplexNoise = function SimplexNoise(r) {
	if (r == undefined) r = Math;
	this.grad3 = [[1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0], [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1], [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]];

	this.grad4 = [[0, 1, 1, 1], [0, 1, 1, -1], [0, 1, -1, 1], [0, 1, -1, -1], [0, -1, 1, 1], [0, -1, 1, -1], [0, -1, -1, 1], [0, -1, -1, -1], [1, 0, 1, 1], [1, 0, 1, -1], [1, 0, -1, 1], [1, 0, -1, -1], [-1, 0, 1, 1], [-1, 0, 1, -1], [-1, 0, -1, 1], [-1, 0, -1, -1], [1, 1, 0, 1], [1, 1, 0, -1], [1, -1, 0, 1], [1, -1, 0, -1], [-1, 1, 0, 1], [-1, 1, 0, -1], [-1, -1, 0, 1], [-1, -1, 0, -1], [1, 1, 1, 0], [1, 1, -1, 0], [1, -1, 1, 0], [1, -1, -1, 0], [-1, 1, 1, 0], [-1, 1, -1, 0], [-1, -1, 1, 0], [-1, -1, -1, 0]];

	this.p = [];
	for (var i = 0; i < 256; i++) {
		this.p[i] = Math.floor(r.random() * 256);
	}
	// To remove the need for index wrapping, double the permutation table length 
	this.perm = [];
	for (var i = 0; i < 512; i++) {
		this.perm[i] = this.p[i & 255];
	}

	// A lookup table to traverse the simplex around a given point in 4D. 
	// Details can be found where this table is used, in the 4D noise method. 
	this.simplex = [[0, 1, 2, 3], [0, 1, 3, 2], [0, 0, 0, 0], [0, 2, 3, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 3, 0], [0, 2, 1, 3], [0, 0, 0, 0], [0, 3, 1, 2], [0, 3, 2, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 3, 2, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 0, 3], [0, 0, 0, 0], [1, 3, 0, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 3, 0, 1], [2, 3, 1, 0], [1, 0, 2, 3], [1, 0, 3, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 3, 1], [0, 0, 0, 0], [2, 1, 3, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 1, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 0, 1, 2], [3, 0, 2, 1], [0, 0, 0, 0], [3, 1, 2, 0], [2, 1, 0, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 1, 0, 2], [0, 0, 0, 0], [3, 2, 0, 1], [3, 2, 1, 0]];
};

SimplexNoise.prototype.dot = function (g, x, y) {
	return g[0] * x + g[1] * y;
};

SimplexNoise.prototype.dot3 = function (g, x, y, z) {
	return g[0] * x + g[1] * y + g[2] * z;
};

SimplexNoise.prototype.dot4 = function (g, x, y, z, w) {
	return g[0] * x + g[1] * y + g[2] * z + g[3] * w;
};

SimplexNoise.prototype.noise = function (xin, yin) {
	var n0, n1, n2; // Noise contributions from the three corners 
	// Skew the input space to determine which simplex cell we're in 
	var F2 = 0.5 * (Math.sqrt(3.0) - 1.0);
	var s = (xin + yin) * F2; // Hairy factor for 2D 
	var i = Math.floor(xin + s);
	var j = Math.floor(yin + s);
	var G2 = (3.0 - Math.sqrt(3.0)) / 6.0;
	var t = (i + j) * G2;
	var X0 = i - t; // Unskew the cell origin back to (x,y) space 
	var Y0 = j - t;
	var x0 = xin - X0; // The x,y distances from the cell origin 
	var y0 = yin - Y0;
	// For the 2D case, the simplex shape is an equilateral triangle. 
	// Determine which simplex we are in. 
	var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords 
	if (x0 > y0) {
		i1 = 1;j1 = 0;
	} // lower triangle, XY order: (0,0)->(1,0)->(1,1) 
	else {
			i1 = 0;j1 = 1;
		} // upper triangle, YX order: (0,0)->(0,1)->(1,1) 
	// A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and 
	// a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where 
	// c = (3-sqrt(3))/6 
	var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords 
	var y1 = y0 - j1 + G2;
	var x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords 
	var y2 = y0 - 1.0 + 2.0 * G2;
	// Work out the hashed gradient indices of the three simplex corners 
	var ii = i & 255;
	var jj = j & 255;
	var gi0 = this.perm[ii + this.perm[jj]] % 12;
	var gi1 = this.perm[ii + i1 + this.perm[jj + j1]] % 12;
	var gi2 = this.perm[ii + 1 + this.perm[jj + 1]] % 12;
	// Calculate the contribution from the three corners 
	var t0 = 0.5 - x0 * x0 - y0 * y0;
	if (t0 < 0) n0 = 0.0;else {
		t0 *= t0;
		n0 = t0 * t0 * this.dot(this.grad3[gi0], x0, y0); // (x,y) of grad3 used for 2D gradient 
	}
	var t1 = 0.5 - x1 * x1 - y1 * y1;
	if (t1 < 0) n1 = 0.0;else {
		t1 *= t1;
		n1 = t1 * t1 * this.dot(this.grad3[gi1], x1, y1);
	}
	var t2 = 0.5 - x2 * x2 - y2 * y2;
	if (t2 < 0) n2 = 0.0;else {
		t2 *= t2;
		n2 = t2 * t2 * this.dot(this.grad3[gi2], x2, y2);
	}
	// Add contributions from each corner to get the final noise value. 
	// The result is scaled to return values in the interval [-1,1]. 
	return 70.0 * (n0 + n1 + n2);
};

// 3D simplex noise 
SimplexNoise.prototype.noise3d = function (xin, yin, zin) {
	var n0, n1, n2, n3; // Noise contributions from the four corners 
	// Skew the input space to determine which simplex cell we're in 
	var F3 = 1.0 / 3.0;
	var s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D 
	var i = Math.floor(xin + s);
	var j = Math.floor(yin + s);
	var k = Math.floor(zin + s);
	var G3 = 1.0 / 6.0; // Very nice and simple unskew factor, too 
	var t = (i + j + k) * G3;
	var X0 = i - t; // Unskew the cell origin back to (x,y,z) space 
	var Y0 = j - t;
	var Z0 = k - t;
	var x0 = xin - X0; // The x,y,z distances from the cell origin 
	var y0 = yin - Y0;
	var z0 = zin - Z0;
	// For the 3D case, the simplex shape is a slightly irregular tetrahedron. 
	// Determine which simplex we are in. 
	var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords 
	var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords 
	if (x0 >= y0) {
		if (y0 >= z0) {
			i1 = 1;j1 = 0;k1 = 0;i2 = 1;j2 = 1;k2 = 0;
		} // X Y Z order 
		else if (x0 >= z0) {
				i1 = 1;j1 = 0;k1 = 0;i2 = 1;j2 = 0;k2 = 1;
			} // X Z Y order 
			else {
					i1 = 0;j1 = 0;k1 = 1;i2 = 1;j2 = 0;k2 = 1;
				} // Z X Y order 
	} else {
		// x0<y0 
		if (y0 < z0) {
			i1 = 0;j1 = 0;k1 = 1;i2 = 0;j2 = 1;k2 = 1;
		} // Z Y X order 
		else if (x0 < z0) {
				i1 = 0;j1 = 1;k1 = 0;i2 = 0;j2 = 1;k2 = 1;
			} // Y Z X order 
			else {
					i1 = 0;j1 = 1;k1 = 0;i2 = 1;j2 = 1;k2 = 0;
				} // Y X Z order 
	}
	// A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z), 
	// a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and 
	// a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where 
	// c = 1/6.
	var x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords 
	var y1 = y0 - j1 + G3;
	var z1 = z0 - k1 + G3;
	var x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords 
	var y2 = y0 - j2 + 2.0 * G3;
	var z2 = z0 - k2 + 2.0 * G3;
	var x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords 
	var y3 = y0 - 1.0 + 3.0 * G3;
	var z3 = z0 - 1.0 + 3.0 * G3;
	// Work out the hashed gradient indices of the four simplex corners 
	var ii = i & 255;
	var jj = j & 255;
	var kk = k & 255;
	var gi0 = this.perm[ii + this.perm[jj + this.perm[kk]]] % 12;
	var gi1 = this.perm[ii + i1 + this.perm[jj + j1 + this.perm[kk + k1]]] % 12;
	var gi2 = this.perm[ii + i2 + this.perm[jj + j2 + this.perm[kk + k2]]] % 12;
	var gi3 = this.perm[ii + 1 + this.perm[jj + 1 + this.perm[kk + 1]]] % 12;
	// Calculate the contribution from the four corners 
	var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;
	if (t0 < 0) n0 = 0.0;else {
		t0 *= t0;
		n0 = t0 * t0 * this.dot3(this.grad3[gi0], x0, y0, z0);
	}
	var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;
	if (t1 < 0) n1 = 0.0;else {
		t1 *= t1;
		n1 = t1 * t1 * this.dot3(this.grad3[gi1], x1, y1, z1);
	}
	var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;
	if (t2 < 0) n2 = 0.0;else {
		t2 *= t2;
		n2 = t2 * t2 * this.dot3(this.grad3[gi2], x2, y2, z2);
	}
	var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;
	if (t3 < 0) n3 = 0.0;else {
		t3 *= t3;
		n3 = t3 * t3 * this.dot3(this.grad3[gi3], x3, y3, z3);
	}
	// Add contributions from each corner to get the final noise value. 
	// The result is scaled to stay just inside [-1,1] 
	return 32.0 * (n0 + n1 + n2 + n3);
};

// 4D simplex noise
SimplexNoise.prototype.noise4d = function (x, y, z, w) {
	// For faster and easier lookups
	var grad4 = this.grad4;
	var simplex = this.simplex;
	var perm = this.perm;

	// The skewing and unskewing factors are hairy again for the 4D case
	var F4 = (Math.sqrt(5.0) - 1.0) / 4.0;
	var G4 = (5.0 - Math.sqrt(5.0)) / 20.0;
	var n0, n1, n2, n3, n4; // Noise contributions from the five corners
	// Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in
	var s = (x + y + z + w) * F4; // Factor for 4D skewing
	var i = Math.floor(x + s);
	var j = Math.floor(y + s);
	var k = Math.floor(z + s);
	var l = Math.floor(w + s);
	var t = (i + j + k + l) * G4; // Factor for 4D unskewing
	var X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space
	var Y0 = j - t;
	var Z0 = k - t;
	var W0 = l - t;
	var x0 = x - X0; // The x,y,z,w distances from the cell origin
	var y0 = y - Y0;
	var z0 = z - Z0;
	var w0 = w - W0;

	// For the 4D case, the simplex is a 4D shape I won't even try to describe.
	// To find out which of the 24 possible simplices we're in, we need to
	// determine the magnitude ordering of x0, y0, z0 and w0.
	// The method below is a good way of finding the ordering of x,y,z,w and
	// then find the correct traversal order for the simplex weâre in.
	// First, six pair-wise comparisons are performed between each possible pair
	// of the four coordinates, and the results are used to add up binary bits
	// for an integer index.
	var c1 = x0 > y0 ? 32 : 0;
	var c2 = x0 > z0 ? 16 : 0;
	var c3 = y0 > z0 ? 8 : 0;
	var c4 = x0 > w0 ? 4 : 0;
	var c5 = y0 > w0 ? 2 : 0;
	var c6 = z0 > w0 ? 1 : 0;
	var c = c1 + c2 + c3 + c4 + c5 + c6;
	var i1, j1, k1, l1; // The integer offsets for the second simplex corner
	var i2, j2, k2, l2; // The integer offsets for the third simplex corner
	var i3, j3, k3, l3; // The integer offsets for the fourth simplex corner
	// simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.
	// Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w
	// impossible. Only the 24 indices which have non-zero entries make any sense.
	// We use a thresholding to set the coordinates in turn from the largest magnitude.
	// The number 3 in the "simplex" array is at the position of the largest coordinate.
	i1 = simplex[c][0] >= 3 ? 1 : 0;
	j1 = simplex[c][1] >= 3 ? 1 : 0;
	k1 = simplex[c][2] >= 3 ? 1 : 0;
	l1 = simplex[c][3] >= 3 ? 1 : 0;
	// The number 2 in the "simplex" array is at the second largest coordinate.
	i2 = simplex[c][0] >= 2 ? 1 : 0;
	j2 = simplex[c][1] >= 2 ? 1 : 0;k2 = simplex[c][2] >= 2 ? 1 : 0;
	l2 = simplex[c][3] >= 2 ? 1 : 0;
	// The number 1 in the "simplex" array is at the second smallest coordinate.
	i3 = simplex[c][0] >= 1 ? 1 : 0;
	j3 = simplex[c][1] >= 1 ? 1 : 0;
	k3 = simplex[c][2] >= 1 ? 1 : 0;
	l3 = simplex[c][3] >= 1 ? 1 : 0;
	// The fifth corner has all coordinate offsets = 1, so no need to look that up.
	var x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords
	var y1 = y0 - j1 + G4;
	var z1 = z0 - k1 + G4;
	var w1 = w0 - l1 + G4;
	var x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords
	var y2 = y0 - j2 + 2.0 * G4;
	var z2 = z0 - k2 + 2.0 * G4;
	var w2 = w0 - l2 + 2.0 * G4;
	var x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords
	var y3 = y0 - j3 + 3.0 * G4;
	var z3 = z0 - k3 + 3.0 * G4;
	var w3 = w0 - l3 + 3.0 * G4;
	var x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords
	var y4 = y0 - 1.0 + 4.0 * G4;
	var z4 = z0 - 1.0 + 4.0 * G4;
	var w4 = w0 - 1.0 + 4.0 * G4;
	// Work out the hashed gradient indices of the five simplex corners
	var ii = i & 255;
	var jj = j & 255;
	var kk = k & 255;
	var ll = l & 255;
	var gi0 = perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32;
	var gi1 = perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32;
	var gi2 = perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32;
	var gi3 = perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32;
	var gi4 = perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32;
	// Calculate the contribution from the five corners
	var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;
	if (t0 < 0) n0 = 0.0;else {
		t0 *= t0;
		n0 = t0 * t0 * this.dot4(grad4[gi0], x0, y0, z0, w0);
	}
	var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;
	if (t1 < 0) n1 = 0.0;else {
		t1 *= t1;
		n1 = t1 * t1 * this.dot4(grad4[gi1], x1, y1, z1, w1);
	}
	var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;
	if (t2 < 0) n2 = 0.0;else {
		t2 *= t2;
		n2 = t2 * t2 * this.dot4(grad4[gi2], x2, y2, z2, w2);
	}var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;
	if (t3 < 0) n3 = 0.0;else {
		t3 *= t3;
		n3 = t3 * t3 * this.dot4(grad4[gi3], x3, y3, z3, w3);
	}
	var t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;
	if (t4 < 0) n4 = 0.0;else {
		t4 *= t4;
		n4 = t4 * t4 * this.dot4(grad4[gi4], x4, y4, z4, w4);
	}
	// Sum up and scale the result to cover the range [-1,1]
	return 27.0 * (n0 + n1 + n2 + n3 + n4);
};

SimplexNoise.prototype = new SimplexNoise();
SimplexNoise.prototype.constructor = SimplexNoise;
module.exports = SimplexNoise;

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.

var THREE = __webpack_require__(1);

THREE.ChromaticAberrationShader = {

	uniforms: {

		"tDiffuse": { value: null },
		"distortion": { value: 0.025 }

	},

	vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

	fragmentShader: ["uniform sampler2D tDiffuse;", "uniform float distortion;", "varying vec2 vUv;", "vec2 barrelDistortion(vec2 coord, float amt) {", "vec2 cc = coord - 0.5;", "float dist = dot(cc, cc);", "return coord + cc * dist * amt;", "}", "float sat( float t )", "{", "return clamp( t, 0.0, 1.0 );", "}", "float linterp( float t ) {", "return sat( 1.0 - abs( 2.0*t - 1.0 ) );", "}", "float remap( float t, float a, float b ) {", "return sat( (t - a) / (b - a) );", "}", "vec4 spectrum_offset( float t ) {", "vec4 ret;", "float lo = step(t, 0.5);", "float hi = 1.0 - lo;", "float w = linterp( remap( t, 1.0 / 6.0, 5.0 / 6.0 ) );", "ret = vec4(lo, 1.0, hi, 1.) * vec4(1.0 - w, w, 1.0 - w, 1.);", "return pow( abs(ret), vec4(1.0 / 2.2) );", "}", "const int num_iter = 12;", "const float reci_num_iter_f = 1.0 / float(num_iter);", "void main() {", "vec4 sumcol = vec4(0.0);", "vec4 sumw = vec4(0.0);	", "for ( int i = 0; i < num_iter; ++i )", "{", "float t = float(i) * reci_num_iter_f;", "vec4 w = spectrum_offset( t );", "sumw += w;", "sumcol += w * texture2D( tDiffuse, barrelDistortion(vUv, 1.0 * distortion * t ) );", "}", "gl_FragColor = sumcol / sumw;", "}"].join("\n")

};

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.

var THREE = __webpack_require__(1);
var Vox = __webpack_require__(153);
var Utils = __webpack_require__(2);
var GameStore = __webpack_require__(0);

function Loader() {
    Loader.prototype.total = 0;
    Loader.prototype.loaded = 0;
    Loader.prototype.percentLoaded = 0;

    Loader.prototype.PercentLoaded = function () {
        return Math.round(Loader.prototype.loaded / Loader.prototype.total * 100);
    };

    Loader.prototype.Loaded = function () {
        Loader.prototype.loaded++;
        //        $('#info_load_percent').text(this.PercentLoaded()+'%')
        //        $('#info_load').width(this.PercentLoaded()+'%')
    };
}

/////////////////////////////////////////////////////////////
// Sounds
/////////////////////////////////////////////////////////////
function SoundLoader() {
    Loader.call(this);
    this.sounds = new Array();
    this.context;
    this.muted = false;

    SoundLoader.prototype.StopSound = function (name) {
        var source = this.sounds[name].context;
        source.stop = source.noteOff;
        source.stop(0);
    };

    SoundLoader.prototype.PlaySound = function (name, position, radius, volumeScale) {
        if (this.muted) {
            return;
        }

        if (!volumeScale) {
            volumeScale = 1;
        }

        var source = this.sounds[name].context.createBufferSource();
        source.buffer = this.sounds[name].buffer;
        var gainNode = this.sounds[name].context.createGain();
        source.connect(gainNode);
        gainNode.connect(this.sounds[name].context.destination);

        if (position !== undefined) {
            var vector = GameStore.GameInstance.camera.localToWorld(new THREE.Vector3(0, 0, 0));
            var distance = position.distanceTo(vector);
            if (distance <= radius) {
                var vol = volumeScale * 1 * (1 - distance / radius);
                gainNode.gain.value = vol;
                source.start(0);
            } else {
                gainNode.gain.value = 0;
            }
        } else {
            gainNode.gain.value = 1;
            source.start(0);
        }
    };

    SoundLoader.prototype.Add = function (args) {
        this.sounds[args.name] = new Object();
        window.AudioContext = window.AudioContext || window.webkitAudioContext;
        if (this.context === undefined) {
            this.context = new AudioContext();
        }
        //var context = new AudioContext()
        var loader = new Utils.BufferLoader(this.context, [args.file], this.Load.bind(this, args.name));

        this.sounds[args.name].context = this.context;
        Loader.prototype.total++;
        loader.load();
    };

    SoundLoader.prototype.Load = function (name, buffer) {
        this.sounds[name].buffer = buffer[0];
        this.Loaded();
    };
}
SoundLoader.prototype = new Loader();
SoundLoader.prototype.constructor = SoundLoader;
module.exports.SoundLoader = SoundLoader;

/////////////////////////////////////////////////////////////
// Vox models
/////////////////////////////////////////////////////////////
function VoxLoader() {
    Loader.call(this);
    this.models = new Array();

    VoxLoader.prototype.GetModel = function (name) {
        if (this.models[name].chunk) {
            return this.models[name].chunk.Clone();
        } else {
            console.log("Can't find chunk with name " + name);
            return undefined;
        }
    };

    VoxLoader.prototype.getColorMap = function (name) {
        if (this.models[name].vox) {
            return this.models[name].vox.colorMap;
        } else {
            console.log("Can't find color map with name " + name);
            return undefined;
        }
    };

    VoxLoader.prototype.Add = function (args) {
        var _this = this;

        this.models[args.name] = new Object();
        this.models[args.name].args = args;
        Loader.prototype.total++;

        var vox = new Vox();
        vox.LoadModel(args.file, function (vox, name) {
            return _this.Load(vox, name);
        }, args.name);
        this.models[args.name].vox = VoxLoader;
    };

    VoxLoader.prototype.addFromArrayBuffer = function (arrayBuffer, name) {
        var _this2 = this;

        this.models[name] = new Object();
        this.models[name].args = {
            name: name
        };
        Loader.prototype.total++;

        var vox = new Vox();
        vox.loadFromArrayBuffer(arrayBuffer, function (vox, name) {
            return _this2.Load(vox, name);
        }, name);
        this.models[name].vox = vox;

        return this.models[name];
    };

    VoxLoader.prototype.Load = function (vox, name) {
        this.models[name].vox = vox;
        this.models[name].chunk = vox.getChunk();
        this.models[name].chunk.Rebuild();
        this.models[name].mesh = vox.getMesh();
        this.models[name].mesh.geometry.center();
        this.Loaded();
    };
}
VoxLoader.prototype = new Loader();
VoxLoader.prototype.constructor = VoxLoader;
module.exports.VoxLoader = VoxLoader;

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.

var Chunk = __webpack_require__(23);
var Utils = __webpack_require__(2);

function VoxelData() {
    this.x;
    this.y;
    this.z;
    this.color;

    VoxelData.prototype.Create = function (buffer, i, subSample) {
        this.x = subSample ? buffer[i] & 0xFF / 2 : buffer[i++] & 0xFF;
        this.y = subSample ? buffer[i] & 0xFF / 2 : buffer[i++] & 0xFF;
        this.z = subSample ? buffer[i] & 0xFF / 2 : buffer[i++] & 0xFF;
        this.color = buffer[i] & 0xFF;
    };
}
VoxelData.prototype = new VoxelData();
VoxelData.prototype.constructor = VoxelData;

function Vox() {
    this.chunk = undefined;

    var voxColors = [0x00000000, 0xffffffff, 0xffccffff, 0xff99ffff, 0xff66ffff, 0xff33ffff, 0xff00ffff, 0xffffccff, 0xffccccff, 0xff99ccff, 0xff66ccff, 0xff33ccff, 0xff00ccff, 0xffff99ff, 0xffcc99ff, 0xff9999ff, 0xff6699ff, 0xff3399ff, 0xff0099ff, 0xffff66ff, 0xffcc66ff, 0xff9966ff, 0xff6666ff, 0xff3366ff, 0xff0066ff, 0xffff33ff, 0xffcc33ff, 0xff9933ff, 0xff6633ff, 0xff3333ff, 0xff0033ff, 0xffff00ff, 0xffcc00ff, 0xff9900ff, 0xff6600ff, 0xff3300ff, 0xff0000ff, 0xffffffcc, 0xffccffcc, 0xff99ffcc, 0xff66ffcc, 0xff33ffcc, 0xff00ffcc, 0xffffcccc, 0xffcccccc, 0xff99cccc, 0xff66cccc, 0xff33cccc, 0xff00cccc, 0xffff99cc, 0xffcc99cc, 0xff9999cc, 0xff6699cc, 0xff3399cc, 0xff0099cc, 0xffff66cc, 0xffcc66cc, 0xff9966cc, 0xff6666cc, 0xff3366cc, 0xff0066cc, 0xffff33cc, 0xffcc33cc, 0xff9933cc, 0xff6633cc, 0xff3333cc, 0xff0033cc, 0xffff00cc, 0xffcc00cc, 0xff9900cc, 0xff6600cc, 0xff3300cc, 0xff0000cc, 0xffffff99, 0xffccff99, 0xff99ff99, 0xff66ff99, 0xff33ff99, 0xff00ff99, 0xffffcc99, 0xffcccc99, 0xff99cc99, 0xff66cc99, 0xff33cc99, 0xff00cc99, 0xffff9999, 0xffcc9999, 0xff999999, 0xff669999, 0xff339999, 0xff009999, 0xffff6699, 0xffcc6699, 0xff996699, 0xff666699, 0xff336699, 0xff006699, 0xffff3399, 0xffcc3399, 0xff993399, 0xff663399, 0xff333399, 0xff003399, 0xffff0099, 0xffcc0099, 0xff990099, 0xff660099, 0xff330099, 0xff000099, 0xffffff66, 0xffccff66, 0xff99ff66, 0xff66ff66, 0xff33ff66, 0xff00ff66, 0xffffcc66, 0xffcccc66, 0xff99cc66, 0xff66cc66, 0xff33cc66, 0xff00cc66, 0xffff9966, 0xffcc9966, 0xff999966, 0xff669966, 0xff339966, 0xff009966, 0xffff6666, 0xffcc6666, 0xff996666, 0xff666666, 0xff336666, 0xff006666, 0xffff3366, 0xffcc3366, 0xff993366, 0xff663366, 0xff333366, 0xff003366, 0xffff0066, 0xffcc0066, 0xff990066, 0xff660066, 0xff330066, 0xff000066, 0xffffff33, 0xffccff33, 0xff99ff33, 0xff66ff33, 0xff33ff33, 0xff00ff33, 0xffffcc33, 0xffcccc33, 0xff99cc33, 0xff66cc33, 0xff33cc33, 0xff00cc33, 0xffff9933, 0xffcc9933, 0xff999933, 0xff669933, 0xff339933, 0xff009933, 0xffff6633, 0xffcc6633, 0xff996633, 0xff666633, 0xff336633, 0xff006633, 0xffff3333, 0xffcc3333, 0xff993333, 0xff663333, 0xff333333, 0xff003333, 0xffff0033, 0xffcc0033, 0xff990033, 0xff660033, 0xff330033, 0xff000033, 0xffffff00, 0xffccff00, 0xff99ff00, 0xff66ff00, 0xff33ff00, 0xff00ff00, 0xffffcc00, 0xffcccc00, 0xff99cc00, 0xff66cc00, 0xff33cc00, 0xff00cc00, 0xffff9900, 0xffcc9900, 0xff999900, 0xff669900, 0xff339900, 0xff009900, 0xffff6600, 0xffcc6600, 0xff996600, 0xff666600, 0xff336600, 0xff006600, 0xffff3300, 0xffcc3300, 0xff993300, 0xff663300, 0xff333300, 0xff003300, 0xffff0000, 0xffcc0000, 0xff990000, 0xff660000, 0xff330000, 0xff0000ee, 0xff0000dd, 0xff0000bb, 0xff0000aa, 0xff000088, 0xff000077, 0xff000055, 0xff000044, 0xff000022, 0xff000011, 0xff00ee00, 0xff00dd00, 0xff00bb00, 0xff00aa00, 0xff008800, 0xff007700, 0xff005500, 0xff004400, 0xff002200, 0xff001100, 0xffee0000, 0xffdd0000, 0xffbb0000, 0xffaa0000, 0xff880000, 0xff770000, 0xff550000, 0xff440000, 0xff220000, 0xff110000, 0xffeeeeee, 0xffdddddd, 0xffbbbbbb, 0xffaaaaaa, 0xff888888, 0xff777777, 0xff555555, 0xff444444, 0xff222222, 0xff111111];

    Vox.prototype.getChunk = function () {
        return this.chunk;
    };

    Vox.prototype.getMesh = function () {
        return this.chunk.mesh;
    };

    Vox.prototype.readInt = function (buffer, from) {
        return buffer[from] | buffer[from + 1] << 8 | buffer[from + 2] << 16 | buffer[from + 3] << 24;
    };

    Vox.prototype.readString = function (params) {
        var n = this.readInt(params.buffer, params.from);
        params.from += 4;

        var str = "";
        for (var i = 0; i < n; i++) {
            str += String.fromCharCode(parseInt(params.buffer[params.from++]));
        }

        return str;
    };

    Vox.prototype.readDict = function (params) {
        var n = this.readInt(params.buffer, params.from);
        params.from += 4;

        var dict = {};
        for (var i = 0; i < n; i++) {
            var key = this.readString(params);
            var value = this.readString(params);
            dict[key] = value;
        }

        return dict;
    };

    Vox.prototype.LoadModel = function (filename, loadptr, name) {
        var _this = this;

        this.name = name;
        var oReq = new XMLHttpRequest();
        oReq.open("GET", filename, true);
        oReq.responseType = "arraybuffer";

        oReq.onload = function () {
            _this.loadInternal(oReq.response, loadptr);
        };

        oReq.send(null);
    };

    Vox.prototype.loadFromArrayBuffer = function (arrayBuffer, loadptr, name) {
        this.name = name;

        this.loadInternal(arrayBuffer, loadptr);
    };

    Vox.prototype.loadInternal = function (arrayBuffer, onFinishLoad) {
        var colors = undefined;
        var voxelData = [];
        this.chunk = new Chunk();
        if (arrayBuffer) {
            var buffer = new Uint8Array(arrayBuffer);
            var voxId = this.readInt(buffer, 0);
            var version = this.readInt(buffer, 4);
            // TBD: Check version to support
            var i = 8;
            while (i < buffer.length) {
                var subSample = false;
                var sizex = 0;
                var sizey = 0;
                var sizez = 0;
                var id = String.fromCharCode(parseInt(buffer[i++])) + String.fromCharCode(parseInt(buffer[i++])) + String.fromCharCode(parseInt(buffer[i++])) + String.fromCharCode(parseInt(buffer[i++]));

                var chunkSize = this.readInt(buffer, i) & 0xFF;
                i += 4;
                var childChunks = this.readInt(buffer, i) & 0xFF;
                i += 4;

                if (id === "SIZE") {
                    sizex = this.readInt(buffer, i) & 0xFF;
                    i += 4;
                    sizey = this.readInt(buffer, i) & 0xFF;
                    i += 4;
                    sizez = this.readInt(buffer, i) & 0xFF;
                    i += 4;

                    if (sizex > 32 || sizey > 32) {
                        subSample = true;
                    }

                    this.chunk.Create(sizex, sizey, sizez);
                    i += chunkSize - 4 * 3;
                } else if (id === "XYZI") {
                    var numVoxels = Math.abs(this.readInt(buffer, i));
                    i += 4;
                    voxelData = new Array(numVoxels);
                    for (var n = 0; n < voxelData.length; n++) {
                        voxelData[n] = new VoxelData();
                        voxelData[n].Create(buffer, i, subSample); // Read 4 bytes
                        i += 4;
                    }
                } else if (id === "RGBA") {
                    colors = new Array(256);
                    for (var n = 0; n < 256; n++) {
                        var r = buffer[i++] & 0xFF;
                        var g = buffer[i++] & 0xFF;
                        var b = buffer[i++] & 0xFF;
                        var a = 0;
                        i++;

                        colors[n] = { "r": r, "g": g, "b": b, "a": a };
                    }
                } else if (id === "MATL") {
                    var _id = this.readInt(buffer, i) & 0xFF;
                    i += 4;

                    var params = { buffer: buffer, from: i };
                    var dict = this.readDict(params);
                    i = params.from;

                    var emit = 0;
                    if (typeof dict["_type"] !== "undefined" && dict["_type"] === "_emit") {
                        emit = parseFloat(dict["_weight"]); // Value from 0 to 1
                        var flux = 1; // Value from 1 to 5

                        if (typeof dict["_flux"] !== "undefined") {
                            flux = parseInt(dict["_flux"]);
                        }

                        emit *= flux;

                        // Remap 0-5 to 0-255
                        emit = parseInt(Utils.MapRange(emit, 0, 5, 0, 255));

                        colors[_id - 1].a = emit;
                    }
                } else {
                    i += chunkSize;
                }
            }

            if (voxelData === null || voxelData.length === 0) {
                return null;
            }

            this.colorMap = {};
            var uniqueColors = [];
            for (var n = 0; n < voxelData.length; n++) {
                if (colors === undefined) {
                    var c = voxColors[Math.abs(voxelData[n].color - 1)];
                    var cRGBA = {
                        b: (c & 0xff0000) >> 16,
                        g: (c & 0x00ff00) >> 8,
                        r: c & 0x0000ff,
                        a: 1
                    };
                    this.chunk.ActivateBlock(voxelData[n].x, voxelData[n].y, voxelData[n].z, cRGBA);
                } else {
                    var colorIndex = Math.abs(voxelData[n].color - 1);
                    var color = colors[colorIndex];
                    this.chunk.ActivateBlock(voxelData[n].x, voxelData[n].y, voxelData[n].z, color);

                    var mapIndex = uniqueColors.indexOf(colorIndex);
                    if (mapIndex === -1) {
                        mapIndex = uniqueColors.length;

                        uniqueColors.push(colorIndex);

                        this.colorMap[color.r] = this.colorMap[color.r] || {};
                        this.colorMap[color.r][color.g] = this.colorMap[color.r][color.g] || {};
                        this.colorMap[color.r][color.g][color.b] = this.colorMap[color.r][color.g][color.b] || {};
                        this.colorMap[color.r][color.g][color.b][color.a] = mapIndex;
                    }
                }
            }
            onFinishLoad(this, this.name);
        }
    };
}
Vox.prototype = new Vox();
Vox.prototype.constructor = Vox;
module.exports = Vox;

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.

var GameStore = __webpack_require__(0);
var Block = __webpack_require__(34);

function ChunkManager() {
    this.worldChunks = [];
    this.totalBlocks = 0;
    this.totalChunks = 0;
    this.activeBlocks = 0;
    this.activeTriangles = 0;
    this.updateChunks = [];
    this.maxChunks = 0;

    this.percentChanceSpawnBlock = 0.95; // Value between 0 and 1 for chance to spawn block on remove

    ChunkManager.prototype.PercentLoaded = function () {
        // console.log("TOTAL: " + this.totalChunks + " MAX: " + this.maxChunks)

        return Math.round(this.maxChunks / this.totalChunks * 100);
    };

    ChunkManager.prototype.Draw = function (time, delta) {
        if (this.updateChunks.length > 0) {
            var cid = this.updateChunks.shift();
            if (this.worldChunks[cid] !== undefined) {
                this.worldChunks[cid].Rebuild();
            }
        }
    };

    ChunkManager.prototype.addChunkToUpdate = function (cid) {
        if (!this.updateChunks.includes(cid)) {
            this.updateChunks.push(cid);
        }
    };

    ChunkManager.prototype.Create = function () {};

    ChunkManager.prototype.Gib = function (x, z, power) {
        var aChunks = [];
        var aBlocksXZ = [];
        var aBlocksZ = [];

        x = Math.round(x);
        z = Math.round(z);
        var cid = 0;
        var totals = 0;
        var y = this.GetHeight(x, z);
        y = y / GameStore.GameInstance.world.blockSize;
        for (var rx = x + power; rx >= x - power; rx -= GameStore.GameInstance.world.blockSize) {
            for (var rz = z + power; rz >= z - power; rz -= GameStore.GameInstance.world.blockSize) {
                for (var ry = y + power; ry >= y - power; ry -= GameStore.GameInstance.world.blockSize) {
                    if ((rx - x) * (rx - x) + (ry - y) * (ry - y) + (rz - z) * (rz - z) <= power * power) {
                        if (Math.random() > 0.7) {
                            // Set random shade to the blocks to look as burnt.
                            cid = this.GetWorldChunkID(rx, rz);
                            if (cid === undefined) {
                                continue;
                            }
                            var pos = this.Translate(rx, rz, cid);

                            var yy = Math.round(ry);
                            if (yy <= 0) {
                                yy = 0;
                            }
                            if (this.worldChunks[cid.id].blocks[pos.x][pos.z][yy] !== undefined) {
                                if (this.worldChunks[cid.id].blocks[pos.x][pos.z][yy].getActive()) {
                                    var greyShade = Math.random() * 255;
                                    this.worldChunks[cid.id].blocks[pos.x][pos.z][yy].setR(greyShade);
                                    this.worldChunks[cid.id].blocks[pos.x][pos.z][yy].setG(greyShade);
                                    this.worldChunks[cid.id].blocks[pos.x][pos.z][yy].setB(greyShade);
                                    aChunks.push(cid);
                                }
                            }
                        }
                    }
                }
            }
        }
        var crebuild = {};
        for (var i = 0; i < aChunks.length; i++) {
            crebuild[aChunks[i].id] = 0;
        }
        for (var c in crebuild) {
            this.addChunkToUpdate(c);
        }
    };

    this.multiplyDelta = function (axisData, x, z, depth) {
        return (axisData.x ? axisData.x * x : 0) + (axisData.z ? axisData.z * z : 0) + (axisData.depth ? axisData.depth * depth : 0);
    };

    ChunkManager.prototype.placeStamp = function (worldCenterX, worldCenterY, worldCenterZ, normal, id, dataArray, sizeX, sizeZ, getColorFromCode, isRemoving) {
        var blockSize = GameStore.GameInstance.world.blockSize;
        var worldHalfX = Math.floor(sizeX / 2) * blockSize;
        var worldHalfZ = Math.floor(sizeZ / 2) * blockSize;

        var brushDepth = 8;
        var worldStart = {};
        var delta = {};
        var almostOne = .9;

        var voxelChangedCount = 0;

        if (normal.y > almostOne) {
            worldStart.x = worldCenterX + brushDepth / 2 * blockSize;
            worldStart.y = worldCenterY + worldHalfZ + blockSize / 2;
            worldStart.z = worldCenterZ + worldHalfX + blockSize / 2;

            delta.x = { depth: -1 };
            delta.y = { z: -1 };
            delta.z = { x: -1 };
        } else if (normal.y < -almostOne) {
            worldStart.x = worldCenterX - brushDepth / 2 * blockSize;
            worldStart.y = worldCenterY + worldHalfZ + blockSize / 2;
            worldStart.z = worldCenterZ - worldHalfX - blockSize / 2;

            delta.x = { depth: 1 };
            delta.y = { z: -1 };
            delta.z = { x: 1 };
        } else if (normal.x > almostOne) {
            worldStart.x = worldCenterX - worldHalfX - blockSize / 2;
            worldStart.y = worldCenterY + worldHalfZ + blockSize / 2;
            worldStart.z = worldCenterZ + brushDepth / 2 * blockSize;

            delta.x = { x: 1 };
            delta.y = { z: -1 };
            delta.z = { depth: -1 };
        } else if (normal.z > almostOne) {
            worldStart.x = worldCenterX - worldHalfX;
            worldStart.y = worldCenterY + brushDepth / 2 * blockSize;
            worldStart.z = worldCenterZ - worldHalfZ;

            delta.x = { x: 1 };
            delta.y = { depth: -1 };
            delta.z = { z: 1 };
        }

        if (worldStart.x) {
            for (var z = 0; z < sizeZ; ++z) {
                for (var x = 0; x < sizeX; ++x) {
                    var colorCode = dataArray[z * sizeX + x];
                    if (colorCode > 0) {
                        for (var depth = 0; depth < brushDepth; ++depth) {
                            var wx = worldStart.x + this.multiplyDelta(delta.x, x, z, depth) * blockSize;
                            var wy = worldStart.y + this.multiplyDelta(delta.y, x, z, depth) * blockSize;
                            var wz = worldStart.z + this.multiplyDelta(delta.z, x, z, depth) * blockSize;

                            var cid = this.GetWorldChunkID(wx, wz);
                            if (cid === undefined) {
                                continue;
                            }

                            var voxelPos = this.Translate(wx, wz, cid);
                            var vy = Math.round(wy / blockSize);

                            if (this.worldChunks[cid.id].blocks[voxelPos.x] !== undefined && this.worldChunks[cid.id].blocks[voxelPos.x][voxelPos.z] !== undefined && this.worldChunks[cid.id].blocks[voxelPos.x][voxelPos.z][vy] !== undefined) {

                                var voxelData = this.worldChunks[cid.id].blocks[voxelPos.x][voxelPos.z][vy];

                                if (voxelData.getActive()) {
                                    if (isRemoving) {
                                        voxelData.setActive(false);
                                    } else {
                                        var color = getColorFromCode(colorCode - 1);
                                        voxelData.setR(color.r);
                                        voxelData.setG(color.g);
                                        voxelData.setB(color.b);
                                        voxelData.setA(color.a);
                                        voxelData.setStampId(id);

                                        ++voxelChangedCount;
                                    }

                                    this.addChunkToUpdate(cid.id);

                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }

        return voxelChangedCount;
    };

    ChunkManager.prototype.pickVoxel = function (worldX, worldY, worldZ, normal) {
        var delta = {
            x: {},
            y: {},
            z: {}
        };
        var almostOne = .9;
        var brushDepth = 8;
        var blockSize = GameStore.GameInstance.world.blockSize;

        var voxelChangedCount = 0;

        if (normal.y > almostOne) {
            delta.x = { depth: -1 };
        } else if (normal.y < -almostOne) {
            delta.x = { depth: 1 };
        } else if (normal.x > almostOne) {
            delta.z = { depth: -1 };
        } else if (normal.z > almostOne) {
            delta.y = { depth: -1 };
        }

        for (var depth = 0; depth < brushDepth; ++depth) {
            var wx = worldX + this.multiplyDelta(delta.x, 0, 0, depth) * blockSize;
            var wy = worldY + this.multiplyDelta(delta.y, 0, 0, depth) * blockSize;
            var wz = worldZ + this.multiplyDelta(delta.z, 0, 0, depth) * blockSize;

            var cid = this.GetWorldChunkID(wx, wz);
            if (cid === undefined) {
                continue;
            }

            var voxelPos = this.Translate(wx, wz, cid);
            var vy = Math.round(wy / blockSize);

            if (this.worldChunks[cid.id].blocks[voxelPos.x] !== undefined && this.worldChunks[cid.id].blocks[voxelPos.x][voxelPos.z] !== undefined && this.worldChunks[cid.id].blocks[voxelPos.x][voxelPos.z][vy] !== undefined) {

                var voxelData = this.worldChunks[cid.id].blocks[voxelPos.x][voxelPos.z][vy];

                if (voxelData.getActive()) {
                    return voxelData;
                }
            }
        }

        return undefined;
    };

    ChunkManager.prototype.extractSphere = function (x, y, z, radius) {
        var _this = this;

        var blockSize = GameStore.GameInstance.world.blockSize;
        var arraySize = Math.round(2 * radius / blockSize);
        var retColors = new Array(arraySize * arraySize * arraySize);
        var extractCount = 0;

        this.IterateWorld(x, y, z, radius, function (cid, px, py, pz, wx, wy, wz) {
            var voxel = _this.worldChunks[cid].blocks[wx][wz][wy];
            var modified = false;
            if (voxel.getActive()) {
                voxel.setActive(false);

                var ix = Math.floor((px - x + radius) / blockSize);
                var iy = Math.floor((py - y + radius) / blockSize);
                var iz = Math.floor((pz - z + radius) / blockSize);

                retColors[ix + iy * arraySize + iz * arraySize * arraySize] = {
                    r: voxel.getR(),
                    g: voxel.getG(),
                    b: voxel.getB(),
                    a: voxel.getA()
                };

                ++extractCount;

                modified = true;
            }

            return modified;
        });

        return extractCount > 0 ? retColors : undefined;
    };

    this.IterateWorld = function (x, y, z, radius, actionFunction) {
        var crebuild = {};
        x = Math.round(x);
        z = Math.round(z);
        var cid = 0;

        y = y / GameStore.GameInstance.world.blockSize;

        var yy = 0;
        var pos = 0;
        var val = 0;
        var pow = 0;
        var rand = 0;
        var block = undefined;
        for (var rx = x + radius; rx >= x - radius; rx -= GameStore.GameInstance.world.blockSize) {
            for (var rz = z + radius; rz >= z - radius; rz -= GameStore.GameInstance.world.blockSize) {
                for (var ry = y + radius; ry >= y - radius; ry -= GameStore.GameInstance.world.blockSize) {
                    val = (rx - x) * (rx - x) + (ry - y) * (ry - y) + (rz - z) * (rz - z);
                    pow = radius * radius;
                    if (val <= pow) {
                        cid = this.GetWorldChunkID(rx, rz);
                        if (cid === undefined || cid >= this.worldChunks.length) {
                            continue;
                        }
                        pos = this.Translate(rx, rz, cid);
                        if (ry <= 0) {
                            yy = 0;
                        } else {
                            yy = Math.round(ry);
                        }

                        if (this.worldChunks[cid.id] === undefined || this.worldChunks[cid.id].blocks === undefined || this.worldChunks[cid.id].blocks[pos.x] === undefined || this.worldChunks[cid.id].blocks[pos.x][pos.z] === undefined || this.worldChunks[cid.id].blocks[pos.x][pos.z][yy] === undefined) {
                            continue;
                        }

                        if (actionFunction(cid.id, rx, yy, rz, pos.x, yy, pos.z)) {
                            // Check if on border
                            if (pos.x === this.worldChunks[cid.id].chunkSizeX - 1) {
                                crebuild[cid.id + 1] = 0;
                            } else if (pos.x === 0) {
                                crebuild[cid.id - 1] = 0;
                            }

                            if (pos.z === this.worldChunks[cid.id].chunkSizeZ - 1) {
                                crebuild[cid.id + 1] = 0;
                            } else if (pos.z === 0) {
                                crebuild[cid.id - 1] = 0;
                            }

                            if (yy === this.worldChunks[cid.id].chunkSizeY - 1) {
                                crebuild[cid.id + Math.sqrt(GameStore.GameInstance.world.map.length)] = 0;
                            } else if (yy === 0) {
                                crebuild[cid.id - Math.sqrt(GameStore.GameInstance.world.map.length)] = 0;
                            }

                            crebuild[cid.id] = 0;
                        }
                    }
                }
            }
        }

        for (var c in crebuild) {
            this.addChunkToUpdate(c);
        }
    };

    ChunkManager.prototype.RemoveSphere = function (x, y, z, radius, power) {
        var _this2 = this;

        if (!power) {
            power = 3;
        }

        var block = undefined;

        this.IterateWorld(x, y, z, radius, function (cid, px, py, pz, wx, wy, wz) {
            var voxel = _this2.worldChunks[cid].blocks[wx][wz][wy];
            if (voxel.getActive()) {
                voxel.setActive(false);

                if (Math.random() <= _this2.percentChanceSpawnBlock) {
                    // Create physics block
                    block = GameStore.GameInstance.physBlockPool.Get();
                    if (block !== undefined) {
                        var emissiveColor = undefined;
                        if (_this2.worldChunks[cid].blocks[wx][wz][wy].getA() > 0) {
                            var color = {
                                r: _this2.worldChunks[cid].blocks[wx][wz][wy].getR(),
                                g: _this2.worldChunks[cid].blocks[wx][wz][wy].getG(),
                                b: _this2.worldChunks[cid].blocks[wx][wz][wy].getB(),
                                a: _this2.worldChunks[cid].blocks[wx][wz][wy].getA() * GameStore.EMISSIVE_GLOBAL_SCALAR

                                // Color to Hex Number
                            };emissiveColor = color.a * color.r * 255 << 16 ^ color.a * color.g * 255 << 8 ^ color.a * color.b * 255 << 0;
                        }

                        block.Create(px, py, pz, _this2.worldChunks[cid].blockSize, _this2.worldChunks[cid].blocks[wx][wz][wy].getR(), _this2.worldChunks[cid].blocks[wx][wz][wy].getG(), _this2.worldChunks[cid].blocks[wx][wz][wy].getB(), 15, Math.random() * 180, power, emissiveColor);
                    }
                }

                return true;
            }
        });
    };

    ChunkManager.prototype.AddSphere = function (x, y, z, radius) {
        var _this3 = this;

        this.IterateWorld(x, y, z, radius, function (cid, px, py, pz, wx, wy, wz) {
            var voxel = _this3.worldChunks[cid].blocks[wx][wz][wy];
            if (!voxel.getActive()) {
                voxel.setActive(true);

                return true;
            }
        });
    };

    ChunkManager.prototype.AddWorldChunk = function (chunk) {
        this.totalChunks++;
        this.totalBlocks += chunk.blocks.length * chunk.blocks.length * chunk.blocks.length;
        this.activeBlocks += chunk.NoOfActiveBlocks();
        this.worldChunks.push(chunk);
    };

    ChunkManager.prototype.destroyWorldChunks = function () {
        for (var i = 0; i < this.worldChunks.length; i++) {
            this.worldChunks[i].destroy();
        }

        this.worldChunks = [];
        GameStore.GameInstance.world.chunks = 0;
    };

    ChunkManager.prototype.BuildAllChunks = function () {
        for (var i = 0; i < this.worldChunks.length; i++) {
            this.worldChunks[i].Rebuild();
            this.activeTriangles += this.worldChunks[i].GetActiveTriangles();
        }

        console.log("ACTIVE TRIANGLES: " + this.activeTriangles);
        console.log("ACTIVE BLOCKS: " + this.activeBlocks);
    };

    ChunkManager.prototype.BuildDirtyChunks = function (maxRebuildCount) {
        var _this4 = this;

        var maxProcessCount = maxRebuildCount || Infinity;
        var needRequeue = false;
        for (var i = 0, processCount = 0; i < this.worldChunks.length; i++) {
            var chunk = this.worldChunks[i];
            if (chunk.isDirty === true) {
                chunk.Rebuild();

                ++processCount;
                if (processCount >= maxProcessCount) {
                    needRequeue = true;
                    break;
                }
            }
        }

        if (needRequeue) {
            setTimeout(function () {
                _this4.BuildDirtyChunks(maxRebuildCount);
            }, 1);
        }
    };

    ChunkManager.prototype.GetWorldChunkID = function (x, z) {
        if (GameStore.GameInstance.worldMap === undefined) {
            return;
        }
        var mp = GameStore.GameInstance.world.chunkSize * GameStore.GameInstance.world.blockSize;
        var wX = Math.floor(Math.abs(x) / mp);
        var wZ = Math.floor(Math.abs(z) / mp);
        if (GameStore.GameInstance.worldMap[wX] === undefined) {
            return;
        }
        if (GameStore.GameInstance.worldMap[wX][wZ] === undefined) {
            return;
        }
        var cid = GameStore.GameInstance.worldMap[wX][wZ];
        return cid;
    };

    ChunkManager.prototype.GetChunk = function (x, z) {
        var mp = GameStore.GameInstance.world.chunkSize * GameStore.GameInstance.world.blockSize;
        var wX = Math.floor(Math.abs(x) / mp);
        var wZ = Math.floor(Math.abs(z) / mp);
        if (GameStore.GameInstance.worldMap[wX][wZ] === undefined) {
            return;
        }
        var cid = GameStore.GameInstance.worldMap[wX][wZ];
        return this.worldChunks[cid.id];
    };

    ChunkManager.prototype.Translate = function (x, z, cid) {
        var block = this.worldChunks[cid.id];
        if (block !== undefined) {
            var x1 = Math.floor((z - block.posX) / GameStore.GameInstance.world.blockSize);
            var z1 = Math.floor((x - block.posY) / GameStore.GameInstance.world.blockSize);
            return { x: x1, z: z1 };
        } else {
            return { x: 0, z: 0 };
        }
    };

    ChunkManager.prototype.GetHeight = function (x, z) {
        var cid = this.GetWorldChunkID(x, z);
        if (cid === undefined) {
            return undefined;
        }
        if (this.worldChunks[cid.id] === undefined) {
            return undefined;
        }
        var tmp = this.Translate(x, z, cid);

        var x1 = Math.round(tmp.x);
        var z1 = Math.round(tmp.z);
        if (this.worldChunks[cid.id].blocks[x1] !== undefined) {
            if (this.worldChunks[cid.id].blocks[x1][z1] !== undefined) {
                var y = this.worldChunks[cid.id].blocks[x1][z1].height * GameStore.GameInstance.world.blockSize;
            }
        }

        if (y > 0) {
            return y;
        } else {
            return 0;
        }
    };

    ChunkManager.prototype.GetHeightWindow = function (x, z, startY, endY) {
        var cid = this.GetWorldChunkID(x, z);
        if (cid === undefined) {
            return undefined;
        }
        if (this.worldChunks[cid.id] === undefined) {
            return undefined;
        }
        var tmp = this.Translate(x, z, cid);

        var x1 = Math.round(tmp.x);
        var z1 = Math.round(tmp.z);
        var blockSize = GameStore.GameInstance.world.blockSize;
        if (this.worldChunks[cid.id].blocks[x1] !== undefined) {
            if (this.worldChunks[cid.id].blocks[x1][z1] !== undefined) {
                for (var searchY = Math.floor(endY / blockSize); endY >= startY; endY -= blockSize, --searchY) {
                    var block = this.worldChunks[cid.id].blocks[x1][z1][searchY];
                    if (block !== undefined && block.getActive()) {
                        return searchY * blockSize;
                    }
                }
            }
        }

        return undefined;
    };

    ChunkManager.prototype.getGroundColor = function (x, z) {
        var cid = this.GetWorldChunkID(x, z);
        if (cid === undefined) {
            return undefined;
        }
        if (this.worldChunks[cid.id] === undefined) {
            return undefined;
        }
        var tmp = this.Translate(x, z, cid);

        var x1 = Math.round(tmp.x);
        var z1 = Math.round(tmp.z);
        if (this.worldChunks[cid.id].blocks[x1] !== undefined) {
            var yArray = this.worldChunks[cid.id].blocks[x1][z1];
            if (yArray !== undefined) {
                var block = yArray[yArray.height];
                if (block !== undefined) {
                    return {
                        r: block.getR(),
                        g: block.getG(),
                        b: block.getB(),
                        a: block.getA(),
                        stampId: block.getStampId()
                    };
                }
            }
        }

        return undefined;
    };

    ChunkManager.prototype.setGroundColor = function (x, z, r, g, b, a) {
        var cid = this.GetWorldChunkID(x, z);
        if (cid === undefined) {
            return undefined;
        }
        if (this.worldChunks[cid.id] === undefined) {
            return undefined;
        }
        var tmp = this.Translate(x, z, cid);

        var x1 = Math.round(tmp.x);
        var z1 = Math.round(tmp.z);
        if (this.worldChunks[cid.id].blocks[x1] !== undefined) {
            var yArray = this.worldChunks[cid.id].blocks[x1][z1];
            if (yArray !== undefined) {
                var block = yArray[yArray.height];
                if (block !== undefined && (block.getR() !== r || block.getG() !== g || block.getB() !== b)) {

                    block.setR(r);
                    block.setG(g);
                    block.setB(b);
                    block.setA(a);

                    this.addChunkToUpdate(cid.id);
                }
            }
        }

        return undefined;
    };
}

module.exports = ChunkManager;

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var THREE = __webpack_require__(1);

var GameStore = __webpack_require__(0);
var EAiType = __webpack_require__(12).EAiType;
var Chunk = __webpack_require__(23);
var UpgradeManager = __webpack_require__(22);

var paletteInfo = [{ r: 0.1, g: 1.0, b: 1.0, a: 0.55 }, // Cyan
{ r: 0.1, g: 0.5, b: 1.0, a: 0.12 }, // Sky Blue
{ r: 0.1, g: 0.1, b: 1.0, a: 0.30 }, // Blue
{ r: 0.5, g: 0.0, b: 1.0, a: 0.10 }, // Purple
{ r: 1.0, g: 0.1, b: 1.0, a: 0.30 }, // Magenta

{ r: 0.1, g: 0.8, b: 0.1, a: 0.07 }, // Green
{ r: 0.5, g: 1.0, b: 0.1, a: 0.08 }, // Dew
{ r: 1.0, g: 1.0, b: 0.1, a: 0.30 }, // Yellow
{ r: 1.0, g: 0.5, b: 0.1, a: 0.07 }, // Orange
{ r: 1.0, g: 0.1, b: 0.1, a: 0.30 }, // Red

{ r: 1.0, g: 1.0, b: 1.0, a: 0.50 }, // White
{ r: 0.5, g: 0.5, b: 0.5, a: 0.07 }, // Grey
{ r: 0.1, g: 0.1, b: 0.1, a: 0.00 }, // Black
{ r: 0.5, g: 0.3, b: 0.1, a: 0.07 }, // Brown
{ r: 1.0, g: 0.6, b: 0.5, a: 0.09 // Beige
}];

var canvasSize = 9;
var halfCanvasSize = canvasSize / 2;
var numStampsToSave = 30;
var minStampVoxelCountToSave = 10;

var StampStatsData = function () {
    function StampStatsData() {
        _classCallCheck(this, StampStatsData);

        this.numStamps = 0;
        this.numStampSpawns = 0;
        this.voxelsChanged = 0;
        this.randomStampsList = [];

        this.enemySpawnDelay = 1000;
    }

    _createClass(StampStatsData, [{
        key: "tryAddRandomStamp",
        value: function tryAddRandomStamp(tychoData) {

            var dataArraySize = canvasSize * canvasSize;
            var stampVoxelCount = 0;
            for (var i = 0; i < dataArraySize; ++i) {
                stampVoxelCount += tychoData.dataArray[i] > 0 ? 1 : 0;
            }

            if (stampVoxelCount >= minStampVoxelCountToSave) {
                var newStamp = this.randomStampsList.find(function (data) {
                    for (var _i = 0; _i < dataArraySize; ++_i) {
                        if (tychoData.dataArray[_i] !== data.dataArray[_i]) {
                            return false;
                        }
                    }

                    return true;
                }) === undefined;

                if (newStamp) {
                    if (this.randomStampsList.length < numStampsToSave) {
                        this.randomStampsList.push(tychoData);
                    } else {
                        this.randomStampsList[Math.floor(Math.random() * numStampsToSave)] = tychoData;
                    }
                }
            }
        }
    }, {
        key: "removeRandomStamp",
        value: function removeRandomStamp(stampId) {
            var index = this.randomStampsList.findIndex(function (data) {
                return data.id === stampId;
            });

            if (index !== -1) {
                this.randomStampsList.splice(index, 1);
            }
        }
    }]);

    return StampStatsData;
}();

var StampManager = function () {
    function StampManager() {
        _classCallCheck(this, StampManager);

        this.drawDebugStampPos = false;
        this.drawDebugStampBoundingBox = false;
        this.printDebugStampsPerSecond = false;
        this.intervalStampCount = 0;
        this.intervalStampTimeSeconds = 1;
        this.stampHistoryCount = 128;
        this.maxStampId = 64000; // This is stored in 16 bits in block.js
        this.nextStampId = 1;
        this.stampHistoryList = [];
        this.mouseOverStamp = undefined;
        this.mouseOverLivingStamp = undefined;
        this.minStampPickingCollisionSize = 3;
        this.collisionBoxMat = new THREE.MeshBasicMaterial({ color: 0x00ff00, opacity: 0.5, wireframe: true });

        this.spawnCountFlashTimeStart = 0.5;
        this.spawnCountFlashTime = 0; // Used to flash the spawn count on spawn
        this.spawnCountFailFlashTimeStart = 1;
        this.spawnCountFailFlashTime = 0; // Used to flash the spawn count on spawn fail

        // Gameplay
        this.maxSpawnedStampCount = 5;
        this.cachedSpawnedStampsAiList = [];
        this.statsData = new StampStatsData();

        if (this.drawDebugStampPos) {
            var geometry = new THREE.BoxGeometry(.3, .3, .3);
            var material = new THREE.MeshBasicMaterial({ color: 0x00ff00, opacity: 0.5, wireframe: true });
            this.debugMesh = new THREE.Mesh(geometry, material);
            this.debugMesh.that = this;
            GameStore.GameInstance.scene.add(this.debugMesh);
        }
    }

    _createClass(StampManager, [{
        key: "getColorFromCode",
        value: function getColorFromCode(code) {
            return {
                r: paletteInfo[code].r * 255,
                g: paletteInfo[code].g * 255,
                b: paletteInfo[code].b * 255,
                a: paletteInfo[code].a * 255
            };
        }
    }, {
        key: "checkColorChannelMatch",
        value: function checkColorChannelMatch(a, b) {
            var epsilon = .1;

            return Math.floor(Math.abs(a - b)) < epsilon;
        }
    }, {
        key: "findCodeFromColor",
        value: function findCodeFromColor(color) {
            var _this = this;

            return paletteInfo.findIndex(function (info) {
                return _this.checkColorChannelMatch(color.r, info.r * 255) && _this.checkColorChannelMatch(color.g, info.g * 255) && _this.checkColorChannelMatch(color.b, info.b * 255) && _this.checkColorChannelMatch(color.a, info.a * 255);
            });
        }
    }, {
        key: "placeStampFromScreen",
        value: function placeStampFromScreen(x, y, dataArray, delay, userId, name, color, isEnemy) {
            var _this2 = this;

            var stampId = undefined;
            var intersects = GameStore.GameInstance.player.cameraObj.getHistoryIntersects(x, y, GameStore.GameInstance.elapsedTime - delay);

            if (intersects && intersects.length > 0) {
                var worldPos = intersects[0].point;
                var normal = intersects[0].face.normal;

                stampId = this.addStampHistory(worldPos, normal, dataArray, userId, name);

                var voxelChangedCount = GameStore.GameInstance.chunkManager.placeStamp(worldPos.x, worldPos.y, worldPos.z, normal, stampId, dataArray, canvasSize, canvasSize, this.getColorFromCode, false);

                GameStore.gamestateManager.recordStampData(voxelChangedCount, userId);

                if (name !== undefined) {
                    GameStore.GameInstance.worldTextManager.spawnTextForStamp(worldPos, name, normal, color);
                }

                ++this.statsData.numStamps;
                this.statsData.voxelsChanged += voxelChangedCount;

                GameStore.GameInstance.xpManager.awardStampXp(voxelChangedCount);

                if (this.drawDebugStampPos) {
                    this.debugMesh.position.set(worldPos.x, worldPos.y, worldPos.z);
                }

                if (isEnemy === true) {
                    setTimeout(function () {
                        var stampData = _this2.getStampHistory(stampId);
                        if (stampData !== undefined) {
                            _this2.spawnStampInternal(stampData, true);
                        }
                    }, this.enemySpawnDelay);
                }
            }

            ++this.intervalStampCount;

            return stampId;
        }
    }, {
        key: "addStampHistory",
        value: function addStampHistory(worldPos, normal, dataArray, userId, name) {
            var stampMinX = Infinity;
            var stampMaxX = 0;
            var stampMinY = Infinity;
            var stampMaxY = 0;
            for (var y = 0; y < canvasSize; ++y) {
                for (var x = 0; x < canvasSize; ++x) {
                    if (dataArray[y * canvasSize + x] > 0) {
                        stampMinX = Math.min(stampMinX, x);
                        stampMaxX = Math.max(stampMaxX, x);
                        stampMinY = Math.min(stampMinY, y);
                        stampMaxY = Math.max(stampMaxY, y);
                    }
                }
            }

            var worldStampOffsetX = ((stampMaxX + stampMinX) / 2 - halfCanvasSize) * GameStore.GameInstance.world.blockSize;
            var worldStampOffsetY = ((stampMaxY + stampMinY) / 2 - halfCanvasSize) * GameStore.GameInstance.world.blockSize;
            var stampWidth = stampMaxX - stampMinX + 1;
            var stampHeight = stampMaxY - stampMinY + 1;

            var stampGeo = new THREE.BoxGeometry(Math.max(this.minStampPickingCollisionSize, stampWidth * GameStore.GameInstance.world.blockSize), 1, Math.max(this.minStampPickingCollisionSize, stampHeight * GameStore.GameInstance.world.blockSize));
            var stampObj = new THREE.Mesh(stampGeo, this.collisionBoxMat);

            stampObj.position.copy(worldPos.clone().add(new THREE.Vector3(worldStampOffsetX, 0, worldStampOffsetY)));

            if (this.drawDebugStampBoundingBox) {
                GameStore.GameInstance.scene.add(stampObj);
            } else {
                stampObj.updateMatrixWorld(true);
            }

            stampObj.tychoData = {
                id: this.getNextStampId(),
                worldPos: worldPos,
                normal: normal,
                dataArray: dataArray,
                startX: stampMinX,
                startY: stampMinY,
                width: stampWidth,
                height: stampHeight,
                userId: userId,
                name: name
            };
            this.stampHistoryList.push(stampObj);

            if (this.stampHistoryList.length > this.stampHistoryCount) {
                this.stampHistoryList.shift();
            }

            GameStore.GameInstance.projectileManager.addStampProjectile(stampObj.tychoData);

            this.statsData.tryAddRandomStamp(stampObj.tychoData);

            return stampObj.tychoData.id;
        }
    }, {
        key: "getNextStampId",
        value: function getNextStampId() {
            // Valid ids are 1 to this.maxStampId + 1
            return this.nextStampId++ % this.maxStampId + 1;
        }
    }, {
        key: "getStampHistory",
        value: function getStampHistory(stampId) {
            return this.stampHistoryList.find(function (history) {
                return history.tychoData.id === stampId;
            });
        }
    }, {
        key: "update",
        value: function update(time, delta) {
            var _this3 = this;

            this.mouseOverStamp = undefined;

            if (this.stampHistoryList.length > 0) {
                var worldIntersects = GameStore.GameInstance.world.intersectMouseWithWorld();
                if (worldIntersects.length > 0) {
                    var worldPos = worldIntersects[0].point;
                    var normal = worldIntersects[0].face.normal;
                    var voxelData = GameStore.GameInstance.chunkManager.pickVoxel(worldPos.x, worldPos.y, worldPos.z, normal);

                    if (voxelData !== undefined) {
                        var stampObject = this.getStampHistory(voxelData.getStampId());
                        if (stampObject !== undefined) {
                            this.mouseOverStamp = stampObject;
                        }
                    }
                }

                if (this.mouseOverStamp === undefined && GameStore.GameInstance.player !== undefined) {
                    var intersects = GameStore.GameInstance.player.IntersectMouseWithObjects(this.stampHistoryList);

                    if (intersects.length > 0) {
                        this.mouseOverStamp = intersects[0].object;
                    }
                }
            }

            this.mouseOverLivingStamp = undefined;
            var raycastMeshes = GameStore.GameInstance.raycastMeshes;
            if (this.mouseOverStamp === undefined && GameStore.GameInstance.player !== undefined && raycastMeshes !== undefined && raycastMeshes.length > 0) {
                var _intersects = GameStore.GameInstance.player.IntersectMouseWithObjects(raycastMeshes);
                var i = 0;
                while (i < _intersects.length && this.mouseOverLivingStamp === undefined) {
                    if (_intersects[i].object.that.type !== undefined && _intersects[i].object.that.type === EAiType.Stamp) {
                        this.mouseOverLivingStamp = _intersects[i].object.that;
                    }

                    i++;
                }
            }

            this.cachedSpawnedStampsAiList = [];
            GameStore.GameInstance.aiManager.aiList.forEach(function (ai) {
                if (ai.type === EAiType.Stamp) {
                    _this3.cachedSpawnedStampsAiList.push(ai);
                }
            });

            this.updateStampUpgrades(time, delta);

            this.spawnCountFlashTime -= delta;
            this.spawnCountFailFlashTime -= delta;

            if (this.printDebugStampsPerSecond) {
                this.intervalStampTimeSeconds -= delta;
                if (this.intervalStampTimeSeconds < 0) {
                    this.intervalStampTimeSeconds = 1;
                    console.log(this.intervalStampCount);

                    this.intervalStampCount = 0;
                }
            }
        }
    }, {
        key: "updateStampUpgrades",
        value: function updateStampUpgrades(time, delta) {
            var throwerCount = 0;
            this.cachedSpawnedStampsAiList.forEach(function (ai) {
                throwerCount += ai.isUpgradedThrower ? 1 : 0;
            });

            if (throwerCount < GameStore.GameInstance.upgradeManager.getEquippedUpgradeCount(UpgradeManager.EUpgradeType.SpawnedStampThrower)) {
                var randomIndex = Math.floor(Math.random() * (this.cachedSpawnedStampsAiList.length - throwerCount));

                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = this.cachedSpawnedStampsAiList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var ai = _step.value;

                        if (randomIndex === 0) {
                            if (ai.isUpgradedThrower !== true) {
                                ai.upgradeToThrower();

                                break;
                            }
                        } else {
                            --randomIndex;
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        }
    }, {
        key: "likeStamp",
        value: function likeStamp() {
            if (this.mouseOverStamp !== undefined && this.mouseOverStamp.tychoData.liked !== true) {
                var data = this.mouseOverStamp.tychoData;
                data.liked = true;
                GameStore.GameInstance.worldTextManager.spawnTextForStamp(data.worldPos, "Liked " + data.name, data.normal);

                GameStore.gamestateManager.recordStampLiked(data.userId);

                GameStore.hubbleManager.sendHubbleEvent("stamp_like");
            }
        }
    }, {
        key: "createChunkFromStamp",
        value: function createChunkFromStamp(stampData, offset) {
            var blockSize = GameStore.GameInstance.world.blockSize;
            var newChunk = new Chunk();
            newChunk.blockSize = blockSize;
            newChunk.Create(1, stampData.height, stampData.width);

            for (var y = 0; y < stampData.height; ++y) {
                for (var x = 0; x < stampData.width; ++x) {
                    var dataX = stampData.startX + x;
                    var dataY = stampData.startY + (stampData.height - y - 1);
                    var colorCode = stampData.dataArray[dataY * canvasSize + dataX];
                    if (colorCode > 0) {
                        var color = this.getColorFromCode(colorCode - 1);
                        newChunk.ActivateBlock(0, y, x, color);
                    }
                }
            }

            newChunk.Rebuild(offset);

            return newChunk;
        }
    }, {
        key: "getMaxStamps",
        value: function getMaxStamps() {
            return this.maxSpawnedStampCount + GameStore.GameInstance.upgradeManager.getEquippedUpgradeCount(UpgradeManager.EUpgradeType.IncreaseSpawnedStampCount);
        }
    }, {
        key: "getAlliedStampCount",
        value: function getAlliedStampCount() {
            var count = 0;
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.cachedSpawnedStampsAiList[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var ai = _step2.value;

                    if (ai.team === GameStore.Teams.Collaborators) {
                        ++count;
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return count;
        }
    }, {
        key: "availableStamps",
        value: function availableStamps() {
            return this.getMaxStamps() - this.getAlliedStampCount();
        }
    }, {
        key: "canSpawnNewStamp",
        value: function canSpawnNewStamp() {
            return this.getAlliedStampCount() < this.getMaxStamps();
        }
    }, {
        key: "spawnStampInternal",
        value: function spawnStampInternal(stampData, isEnemy) {
            GameStore.GameInstance.player.soundStampRaise.Play();

            this.spawnCountFlashTime = this.spawnCountFlashTimeStart;

            var blockSize = GameStore.GameInstance.world.blockSize;
            var data = stampData.tychoData;
            var offset = {
                x: 0,
                y: blockSize,
                z: -data.width / 2 * blockSize
            };

            var newChunk = this.createChunkFromStamp(data, offset);

            var almostOne = .9;
            var isNormalUp = data.normal.z > almostOne;
            var isNormalForward = data.normal.x > almostOne;
            var isNormalRight = data.normal.y > almostOne;
            var spawnX = data.worldPos.x - (isNormalUp ? 0 : isNormalRight ? offset.z : 0);
            var spawnY = data.worldPos.y - (isNormalUp ? offset.y : 0);
            var spawnZ = data.worldPos.z - (isNormalUp ? offset.z : isNormalForward ? offset.z : 0);
            var rotY = isNormalUp ? Math.PI / 2 : isNormalForward ? Math.PI / 2 : isNormalRight ? Math.PI : 0;
            var rotZ = isNormalUp ? -Math.PI / 2 : 0;
            var optParams = {
                chunk: newChunk,
                rotation: new THREE.Euler(0, rotY, rotZ, "YXZ"),
                normal: data.normal,
                dataArray: data.dataArray,
                userId: data.userId,
                data: data,
                offset: offset,
                isEnemy: isEnemy
            };
            GameStore.GameInstance.aiManager.spawnAi(EAiType.Stamp, spawnX, spawnY, spawnZ, optParams);

            GameStore.GameInstance.chunkManager.placeStamp(data.worldPos.x, data.worldPos.y, data.worldPos.z, data.normal, data.id, data.dataArray, canvasSize, canvasSize, this.getColorFromCode, true);

            this.removeStampHistory(stampData);

            ++this.statsData.numStampSpawns;

            GameStore.gamestateManager.recordStampSpawned(data.userId);

            GameStore.hubbleManager.sendHubbleEvent("stamp_spawn");
        }
    }, {
        key: "spawnStamp",
        value: function spawnStamp() {
            var _this4 = this;

            if (this.mouseOverStamp !== undefined) {
                this.likeStamp();

                if (this.canSpawnNewStamp()) {
                    this.spawnStampInternal(this.mouseOverStamp);
                    this.mouseOverStamp = undefined;
                } else {
                    GameStore.GameInstance.player.soundStampFail.Play();
                    this.spawnCountFailFlashTime = 0;

                    setTimeout(function () {
                        _this4.spawnCountFailFlashTime = _this4.spawnCountFailFlashTimeStart;
                    }, 10);
                }
            }
        }
    }, {
        key: "censoreStamp",
        value: function censoreStamp() {
            if (this.mouseOverStamp !== undefined) {
                var data = this.mouseOverStamp.tychoData;

                var pixelCount = canvasSize * canvasSize;
                var dataArray = [];
                for (var i = 0; i < pixelCount; ++i) {
                    dataArray.push(13); // Black
                }

                GameStore.GameInstance.chunkManager.placeStamp(data.worldPos.x, data.worldPos.y, data.worldPos.z, data.normal, data.id, dataArray, canvasSize, canvasSize, this.getColorFromCode, false);

                this.removeStampHistory(this.mouseOverStamp);

                this.statsData.removeRandomStamp(data.id);
                this.mouseOverStamp = undefined;

                GameStore.hubbleManager.sendHubbleEvent("stamp_censore");
            } else if (this.mouseOverLivingStamp !== undefined) {
                this.mouseOverLivingStamp.DoExplosion();
                this.mouseOverLivingStamp = undefined;

                GameStore.hubbleManager.sendHubbleEvent("stamp_censore_living");
            }
        }
    }, {
        key: "removeStampHistory",
        value: function removeStampHistory(historyObject) {
            var index = this.stampHistoryList.indexOf(historyObject);
            if (index !== -1) {
                this.stampHistoryList.splice(index, 1);
            }
        }
    }, {
        key: "consumeEndLevelStats",
        value: function consumeEndLevelStats() {

            var stats = this.statsData;

            this.statsData = new StampStatsData();

            return stats;
        }
    }, {
        key: "onStartLevel",
        value: function onStartLevel() {
            this.stampHistoryList = [];
        }
    }, {
        key: "getPalette",
        value: function getPalette() {
            return paletteInfo;
        }
    }]);

    return StampManager;
}();

module.exports = StampManager;

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var THREE = __webpack_require__(1);

var GameStore = __webpack_require__(0);
var AiBase = __webpack_require__(20);
var AiManager = __webpack_require__(12);
var Projectile = __webpack_require__(21);
var Utils = __webpack_require__(2);
var SoundSystem = __webpack_require__(7);
var HistoryManager = __webpack_require__(27);

var AiSimple = function (_AiBase) {
    _inherits(AiSimple, _AiBase);

    function AiSimple(x, y, z) {
        _classCallCheck(this, AiSimple);

        var _this = _possibleConstructorReturn(this, (AiSimple.__proto__ || Object.getPrototypeOf(AiSimple)).call(this));

        _this.voxName = "enemy_drone_retail_1";

        _this.turnAroundLength = 4;
        _this.turnAroundTime = _this.turnAroundLength;

        _this.speed = 4; // Default patrol speed
        _this.acceleration = 8;
        _this.deceleration = 2;
        _this.maxSpeed = 12; // Used to limit speed of AI after being pushed
        _this.aggroSpeed = 6; // Speed to use after spotting the player
        _this.idleSpeed = 4; // Speed to use when no target
        _this.size = 2;
        _this.offset = { x: 0, y: 4.5, z: 0 };
        _this.selfDestructDamage = 30;
        _this.selfDestructDeathTime = 50; // Time in MS before removing mesh
        _this.selfDestructed = false;
        _this.customCollisionBounds = new THREE.Box3(new THREE.Vector3(-3.5, -5, -2.5), new THREE.Vector3(3.5, 5, 1));
        _this.xp = 10;
        _this.rotateSpeed = Math.PI; // Pitch & roll speed
        _this.desiredPitchRollDir = new THREE.Vector3(); // Used to avoid clone
        _this.mass = 80;

        _this.stepHeight = 30; // Maximum allowed step height, anything higher than this will block movement
        _this.heightSpeed = 10; // Speed to lerp character up or down for changes to height

        var randomAngle = Math.random() * Math.PI * 2;
        _this.direction.x = Math.sin(randomAngle);
        _this.direction.y = 0;
        _this.direction.z = Math.cos(randomAngle);
        _this.direction.normalize();
        _this.desiredDirection = _this.direction.clone();

        _this.Init(x, y, z);

        _this.firePos = new THREE.Object3D();
        _this.firePos.position.set(0, -.5, -1.5);
        _this.mesh.add(_this.firePos);

        _this.gatherer = new HistoryManager.HistoryGather(_this, _this.customCollisionBounds);
        return _this;
    }

    _createClass(AiSimple, [{
        key: "Init",
        value: function Init(x, y, z) {
            // Setup damage sounds
            if (this.damagedSound !== undefined && this.damagedSound.fileName === "") {
                this.damagedSound.LoadSound("sound/drone_damage-01.wav", 60, 0.5);
                this.damagedSound.LoadSound("sound/drone_damage-02.wav", 60, 0.5);
                this.damagedSound.LoadSound("sound/drone_damage-03.wav", 60, 0.5);
                this.damagedSound.LoadSound("sound/drone_damage-04.wav", 60, 0.5);
                this.damagedSound.LoadSound("sound/drone_damage-05.wav", 60, 0.5);
                if (this.damagedSound.Object3D) {
                    this.mesh.add(this.damagedSound.Object3D);
                }
            }

            // Setup death sounds
            if (this.destroyedSound !== undefined && this.destroyedSound.fileName === "") {
                this.destroyedSound.LoadSound("sound/drone_death-01.wav", 90, 0.5);
                this.destroyedSound.LoadSound("sound/drone_death-02.wav", 90, 0.5);
                this.destroyedSound.LoadSound("sound/drone_death-03.wav", 90, 0.5);
                this.destroyedSound.LoadSound("sound/drone_death-07.wav", 90, 0.5);
                if (this.destroyedSound.Object3D) {
                    this.mesh.add(this.destroyedSound.Object3D);
                }
            }

            // Setup idle sound
            if (this.idleSound !== undefined && this.idleSound.fileName === "") {
                this.idleSound.LoadSound("sound/drone_buzz.mp3", 90, 0.6, true, true, SoundSystem.CHANNELS.ENEMY_IDLES_BIG);
                if (this.idleSound.Object3D) {
                    this.mesh.add(this.idleSound.Object3D);
                }
            }

            _get(AiSimple.prototype.__proto__ || Object.getPrototypeOf(AiSimple.prototype), "Init", this).call(this, x, y, z);

            if (this.voxName !== undefined) {
                this.childChunk = GameStore.GameInstance.voxLoader.GetModel(this.voxName);
            }

            if (this.childChunk.mesh !== undefined) {
                this.childMesh = this.childChunk.mesh;
                this.mesh.add(this.childMesh);
                this.childMesh.rotation.x = 0;
                this.childMesh.rotation.y = 0;
                this.childMesh.rotation.z = 0;
                this.mesh.material.visible = false;
            }
        }
    }, {
        key: "setActive",
        value: function setActive(isActive) {
            _get(AiSimple.prototype.__proto__ || Object.getPrototypeOf(AiSimple.prototype), "setActive", this).call(this, isActive);

            if (isActive) {
                this.idleSound.FadeIn(1.0, 0.6);
            }
        }
    }, {
        key: "SelfDestruct",
        value: function SelfDestruct() {
            this.deathTime = this.selfDestructDeathTime;
            this.DoDamage(this.maxHealth, GameStore.Teams.Collaborators);
            if (this.enemyTarget !== undefined) {
                this.enemyTarget.DoDamage(this.selfDestructDamage, this.team);
            }
        }
    }, {
        key: "SetEmissiveOnMesh",
        value: function SetEmissiveOnMesh(color, alpha) {
            this.childMesh.material.emissive.lerp(color, alpha);
        }
    }, {
        key: "DisposeMesh",
        value: function DisposeMesh() {
            _get(AiSimple.prototype.__proto__ || Object.getPrototypeOf(AiSimple.prototype), "DisposeMesh", this).call(this);
            this.childMesh.geometry.dispose();
            this.childMesh.material.dispose();
        }
    }, {
        key: "DrawDebugDirectionLines",
        value: function DrawDebugDirectionLines(draw) {
            if (draw && !this.dead) {
                var lineStart = this.mesh.position.clone();

                var debugLine = Utils.CreateDebugLine(lineStart, lineStart.clone().add(this.direction.clone().multiplyScalar(5)), 0xffffff);
                this.debugLines.push(debugLine);

                debugLine = Utils.CreateDebugLine(lineStart, lineStart.clone().add(this.directionRight.clone().multiplyScalar(5)), 0x00ff00);
                this.debugLines.push(debugLine);

                debugLine = Utils.CreateDebugLine(lineStart, lineStart.clone().add(this.desiredDirection.clone().multiplyScalar(5)), 0x0000ff);
                this.debugLines.push(debugLine);
            }
        }
    }, {
        key: "DrawDebugAccelVel",
        value: function DrawDebugAccelVel(draw) {
            if (draw && !this.dead) {
                var lineStart = this.mesh.position.clone().add(new THREE.Vector3(0, 2, 0));

                // // Draw yellow velocity line
                if (this.velocity.length() > 0) {
                    var lineEnd = lineStart.clone().add(this.velocity.clone().multiplyScalar(20));
                    var debugLine = Utils.CreateDebugLine(lineStart, lineEnd, 0xffff00);
                    this.debugLines.push(debugLine);

                    var debugSphere = Utils.CreateDebugSphere(lineEnd, 0.25, 0xffff00);
                    this.debugLines.push(debugSphere);
                }

                // Draw red acceleration line
                if (this.currentAcceleration.length() > 0) {
                    var _lineEnd = lineStart.clone().add(this.currentAcceleration.clone().multiplyScalar(20));
                    var _debugLine = Utils.CreateDebugLine(lineStart, _lineEnd, 0xff0000);
                    this.debugLines.push(_debugLine);

                    var _debugSphere = Utils.CreateDebugSphere(_lineEnd, 0.25, 0xff0000);
                    this.debugLines.push(_debugSphere);
                }

                // Draw green acceleration line
                // if (this.accelerationAverage.length() > 0) {
                //     let lineStart = this.mesh.position.clone().add(new THREE.Vector3(0, 1.5, 0))
                //     let lineEnd = lineStart.clone().add(this.accelerationAverage.clone().multiplyScalar(20))
                //     let debugLine = Utils.CreateDebugLine(lineStart, lineEnd, 0x00ff00)
                //     this.debugLines.push(debugLine)

                //     let debugSphere = Utils.CreateDebugSphere(lineEnd, 0.25, 0x00ff00)
                //     this.debugLines.push(debugSphere)
                // }
            }
        }
    }, {
        key: "FindDesiredDirection",
        value: function FindDesiredDirection() {
            if (this.enemyTarget !== undefined) {
                this.desiredDirection.copy(this.enemyTarget.mesh.position).sub(this.mesh.position);
            } else if (this.turnAroundTime === this.turnAroundLength) {
                this.desiredDirection.copy(this.direction).multiplyScalar(-1);
            }

            this.desiredDirection.y = 0;
            this.desiredDirection.normalize();
        }

        // Given an AI will return true or false if this AI should attempt to avoid

    }, {
        key: "ShouldAvoid",
        value: function ShouldAvoid(obstacleAI) {
            if (this.type === AiManager.EAiType.Simple) {
                // Do not avoid the subbot
                if (obstacleAI.type === AiManager.EAiType.SubBot) {
                    return false;
                }

                // Do not avoid the package
                if (obstacleAI.type === AiManager.EAiType.Goal) {
                    return false;
                }

                // Do avoid enemies

                return true;
            } else {
                // Chibi uses default rules
                return _get(AiSimple.prototype.__proto__ || Object.getPrototypeOf(AiSimple.prototype), "ShouldAvoid", this).call(this, obstacleAI);
            }
        }
    }, {
        key: "ShouldFire",
        value: function ShouldFire() {
            if (!_get(AiSimple.prototype.__proto__ || Object.getPrototypeOf(AiSimple.prototype), "ShouldFire", this).call(this)) {
                return false;
            }

            if (!this.checkTargetInSameRoom(this.enemyTarget)) {
                return false;
            }

            return true;
        }
    }, {
        key: "FindDesiredNextPosition",
        value: function FindDesiredNextPosition(delta) {
            if (this.currentSpeed > this.speed) {
                this.HandleDeceleration(delta);
            } else if (this.currentSpeed < this.speed) {
                this.HandleAcceleration(delta);
            }

            // Calculate speed to add
            this.nextPosition.x = this.mesh.position.x + this.direction.x * this.currentSpeed * delta;
            this.nextPosition.y = this.mesh.position.y;
            this.nextPosition.z = this.mesh.position.z + this.direction.z * this.currentSpeed * delta;
        }
    }, {
        key: "PitchRollBasedOnMovement",
        value: function PitchRollBasedOnMovement(delta) {
            // Update our direction vector
            this.direction = Utils.GetForwardVector(this.mesh);
            this.directionRight = Utils.GetRightVector(this.mesh);

            this.desiredPitchRollDir.copy(this.velocity);

            // this.RemoveDebugLines()
            // this.DrawDebugDirectionLines(true)
            // this.DrawDebugAccelVel(true)

            // Find desired body pitch & roll
            this.desiredPitchRollDir.normalize();

            // Find pitch
            var forwardDot = this.desiredPitchRollDir.dot(this.direction);
            var desiredPitch = Utils.MapRange(forwardDot, -1, 1, Utils.DegToRad(-35), Utils.DegToRad(25));

            // Find roll
            var rightDot = this.desiredPitchRollDir.dot(this.directionRight);
            var desiredRoll = Utils.MapRange(rightDot, -1, 1, Utils.DegToRad(-25), Utils.DegToRad(25));

            // Set new pitch
            var takingDamage = this.currentFlashTime + this.currentHoldFlashTime + this.currentDeFlashTime > 0;
            var frameRotAmount = takingDamage ? this.rotateSpeed * delta * 3 : this.rotateSpeed * delta;
            if (desiredPitch !== this.childMesh.rotation.x) {
                var deltaPitch = desiredPitch - this.childMesh.rotation.x;

                if (frameRotAmount >= Math.abs(deltaPitch)) {
                    this.childMesh.rotation.x = desiredPitch;
                } else {
                    this.childMesh.rotation.x += frameRotAmount * Math.sign(deltaPitch);
                }
            }

            // Set new roll
            if (desiredRoll !== this.childMesh.rotation.x) {
                var deltaRoll = desiredRoll - this.childMesh.rotation.y;

                if (frameRotAmount >= Math.abs(deltaRoll)) {
                    this.childMesh.rotation.y = desiredRoll;
                } else {
                    this.childMesh.rotation.y += frameRotAmount * Math.sign(deltaRoll);
                }
            }
        }
    }, {
        key: "Update",
        value: function Update(time, delta) {
            // Movement
            this.FindEnemyTarget();

            var enemyDist = this.enemyTarget !== undefined ? this.mesh.position.distanceTo(this.enemyTarget.mesh.position) : undefined;
            enemyDist = enemyDist === undefined && GameStore.GameInstance.player !== undefined ? this.mesh.position.distanceTo(GameStore.GameInstance.player.mesh.position) : enemyDist;
            if (enemyDist) {
                // Calc current direction vector
                this.direction = Utils.GetForwardVector(this.mesh);

                if (this.enemyTarget !== undefined) {
                    this.speed = this.aggroSpeed;
                } else {
                    this.speed = this.idleSpeed;

                    // Walk back and forth
                    this.turnAroundTime -= delta;
                    if (this.turnAroundTime <= 0) {
                        this.turnAroundTime = this.turnAroundLength;
                    }
                }

                this.FindDesiredDirection();

                this.CopyLastPositionAndVelocity();

                if (enemyDist > this.stopDistance) {
                    this.FindDesiredNextPosition(delta);

                    this.AddAvoidanceToNextPosition(delta);
                    this.AddKnockbackToNextPosition(delta);

                    this.SetPositionFromNextPosition(delta);
                } else if ((this.enemyTarget !== undefined && this.enemyTarget.mesh.visible || GameStore.GameInstance.player.mesh.visible) && !this.selfDestructed) {
                    // If close enough to player, then self destruct!
                    this.selfDestructed = true;
                    this.SelfDestruct();
                }

                this.RotateToDesiredDirection(delta);

                this.CalcVelocityAndAcceleration();

                this.PitchRollBasedOnMovement(delta);

                // Shooting
                this.remainingShootCooldown -= delta;
                if (this.ShouldFire()) {
                    this.FireWeapon();
                }

                this.weapon.Update(time, delta);
            }

            _get(AiSimple.prototype.__proto__ || Object.getPrototypeOf(AiSimple.prototype), "Update", this).call(this, time, delta);
        }
    }]);

    return AiSimple;
}(AiBase);

module.exports = AiSimple;

var AiChibi = function (_AiSimple) {
    _inherits(AiChibi, _AiSimple);

    function AiChibi(x, y, z) {
        _classCallCheck(this, AiChibi);

        var _this2 = _possibleConstructorReturn(this, (AiChibi.__proto__ || Object.getPrototypeOf(AiChibi)).call(this, x, y, z));

        _this2.speed = 6; // Default patrol speed
        _this2.acceleration = 12;
        _this2.deceleration = 4;
        _this2.maxSpeed = 16; // Used to limit speed of AI after being pushed
        _this2.aggroSpeed = 8; // Speed to use after spotting the player
        _this2.maxKnockbackSpeed = 40;
        _this2.maxKnockbackInitialSpeed = 55;
        _this2.idleSpeed = 6; // Speed to use when no target
        _this2.turnSpeed = 0.4 * Math.PI;
        _this2.deathTime = 200;

        _this2.selfDestructDamage = 13;
        _this2.stopDistance = 5.5; // Distance from player to stop moving
        _this2.mass = 40;
        return _this2;
    }

    _createClass(AiChibi, [{
        key: "Init",
        value: function Init(x, y, z) {
            this.maxHealth = 40;
            this.voxName = "enemy_chibi_retail_1";
            this.xp = 1;

            this.customCollisionBounds = new THREE.Box3(new THREE.Vector3(-3, -5, -2), new THREE.Vector3(3, 2, 2));

            // Setup death sounds
            if (this.destroyedSound !== undefined && this.destroyedSound.fileName === "") {
                this.destroyedSound.LoadSound("sound/chibi_death-01.mp3", 90, 0.5);
                this.destroyedSound.LoadSound("sound/chibi_death-02.mp3", 90, 0.5);
                this.destroyedSound.LoadSound("sound/chibi_death-03.mp3", 90, 0.5);
                this.destroyedSound.LoadSound("sound/chibi_death-04.mp3", 90, 0.5);
                if (this.destroyedSound.Object3D) {
                    this.mesh.add(this.destroyedSound.Object3D);
                }
            }

            // Setup idle sound
            if (this.idleSound !== undefined && this.idleSound.fileName === "") {
                this.idleSound.LoadSound("sound/chibi_buzz.mp3", 90, 0.6, true, true, SoundSystem.CHANNELS.ENEMY_IDLES);
                if (this.idleSound.Object3D) {
                    this.mesh.add(this.idleSound.Object3D);
                }
            }

            _get(AiChibi.prototype.__proto__ || Object.getPrototypeOf(AiChibi.prototype), "Init", this).call(this, x, y, z);
        }
    }, {
        key: "ShouldFire",
        value: function ShouldFire() {
            return false;
        }
    }]);

    return AiChibi;
}(AiSimple);

module.exports.AiChibi = AiChibi;

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var THREE = __webpack_require__(1);
var GameStore = __webpack_require__(0);

var Force = function () {
    /**
     * Represents a force like knockback.
     * @constructor
     * @param {number} mass - Amount of mass for the force. More mass... more force.
     * @param {Object} owner - Reference to owning Player/AI if any
     * @param {number} lifetime - Total lifetime of the force
     * @param {Object} position - Vector3 of spawn position
     */
    function Force(mass, owner, lifetime, position) {
        _classCallCheck(this, Force);

        if (!mass) {
            this.mass = 400;
        } else {
            this.mass = mass;
        }

        // Used to remove self from objects internal forces list
        this.owner = owner;

        if (!lifetime) {
            this.lifeTime = 1;
        } else {
            this.lifeTime = lifetime;
        }

        if (!position) {
            position = new THREE.Vector3();
        }

        this.dead = false;

        this.spawnPos = new THREE.Object3D();
        this.spawnPos.position.set(position.x, position.y, position.z);

        // Add to tick
        GameStore.GameInstance.objects.push(this);
    }

    _createClass(Force, [{
        key: "Update",
        value: function Update(time, delta) {
            if (this.lifeTime > 0) {
                this.lifeTime -= delta;
            } else if (!this.dead) {
                this.Die();
            }
        }
    }, {
        key: "Draw",
        value: function Draw(time, delta) {
            this.Update(time, delta);
        }
    }, {
        key: "Die",
        value: function Die() {
            this.dead = true;

            // Remove from tick
            if (GameStore.GameInstance.objects) {
                var index = GameStore.GameInstance.objects.indexOf(this);
                if (index !== -1) {
                    GameStore.GameInstance.objects.splice(index, 1);
                }
            }

            // Remove this force from owners force list
            if (this.owner && this.owner.forces) {
                var _index = this.owner.forces.indexOf(this);
                if (_index !== -1) {
                    this.owner.forces.splice(_index, 1);
                }
            }
        }
    }]);

    return Force;
}();

module.exports = Force;

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var THREE = __webpack_require__(1);
var GameStore = __webpack_require__(0);
var Utils = __webpack_require__(2);

module.exports = function () {
    function _class(owner) {
        _classCallCheck(this, _class);

        this.owner = owner;

        this.intensity = 0; // Store for current intensity
        this.intensityMin = 0; // Minimum intensity
        this.intensityMax = 100; // Maximum intensity
        this.spawnRateAtMin = 0; // Spawn rate when intensity is at min or lower
        this.spawnRateAtMax = 20; // Spawn rate when intensity is at max or higher
        this.deltaScalarAtMin = 1; // Simulate speed of emitters at lowest intensity
        this.deltaScalarAtMax = 2.5; // Simulate speed of emitters at highest intensity


        this.emitterSpawnRadius = 1; // Spawn radius
        this.particleLifeTimeMax = 2;
        this.particleLifeTimeMin = 1;
        this.particleForce = 1.9; // Controls how much initial force is in the particles, helps to spread them out
        this.particleHeightOffset = 0.7; // Offset up from feet
        this.particleColor = new THREE.Color("rgb(255, 120, 0)"); // Bounty gold
        this.particleScale = 1.5;

        this.useBitColors = false;
        this.bitColorIndex = 0;
        this.bitColors = []; // Used for bit bot
        this.bitColors.push(new THREE.Color("rgb(250, 0, 135)")); // Bit purple
        this.bitColors.push(new THREE.Color("rgb(0, 245, 65)")); // Bit green
        this.bitColors.push(new THREE.Color("rgb(27, 75, 255)")); // Bit blue
        this.bitColors.push(new THREE.Color("rgb(255, 195, 128)")); // Bit grey - Offset yellow to account for blue lighting
        this.bitColors.push(new THREE.Color("rgb(255, 25, 28)")); // Bit red
        this.bitEmissiveScalar = 0.5;
        this.bitParticleScale = 2.25;

        this.particleFadeEmissive = false;
        this.emissiveScalar = 0.9;
        this.timeSinceLastEmitterSpawned = 0;
    }

    _createClass(_class, [{
        key: "setIntensity",
        value: function setIntensity(value) {
            if (!this.useBitColors) {
                this.intensity = value;
            }
        }

        // Called from base AI

    }, {
        key: "update",
        value: function update(time, delta) {
            this.emitFloaters(delta);
        }
    }, {
        key: "emitFloaters",
        value: function emitFloaters(delta) {
            // Spawn rate decided by intensity
            var spawnRate = Utils.MapRangeClamped(this.intensity, this.intensityMin, this.intensityMax, this.spawnRateAtMin, this.spawnRateAtMax);
            // Play rate decided by intensity
            var deltaScalar = Utils.MapRangeClamped(this.intensity, this.intensityMin, this.intensityMax, this.deltaScalarAtMin, this.deltaScalarAtMax);

            this.timeSinceLastEmitterSpawned += delta * deltaScalar;

            if (this.timeSinceLastEmitterSpawned > 1 / spawnRate) {
                this.timeSinceLastEmitterSpawned = 0;

                // Find spawn position
                var randomX = Utils.RandomRange(-this.emitterSpawnRadius, this.emitterSpawnRadius);
                var randomY = Utils.RandomRange(-this.emitterSpawnRadius, this.emitterSpawnRadius);
                var randomZ = Utils.RandomRange(-this.emitterSpawnRadius, this.emitterSpawnRadius);

                var pos = new THREE.Vector3(this.owner.mesh.position.x + randomX, this.owner.mesh.position.y + randomY + this.particleHeightOffset, this.owner.mesh.position.z + randomZ);

                var color = undefined;
                if (this.useBitColors) {
                    this.bitColorIndex++;
                    var index = this.bitColorIndex % this.bitColors.length;
                    color = this.bitColors[index];
                } else {
                    color = this.particleColor;
                }

                var finalScalar = this.useBitColors ? this.bitParticleScale : this.particleScale;
                var scale = 0.1 * this.owner.size * finalScalar;
                this.spawnFloater(pos, this.particleLifeTimeMax, this.particleLifeTimeMin, deltaScalar, scale, color, this.owner.velocity, this.particleFadeEmissive);
            }
        }

        /**
         * @description Spawn cubes for some percent of the voxels within this chunk
         * @param {Object} pos Vector3 of the spawn position.
         * @param {number} lifeTimeMax Lifetime of spawned cubes.
         * @param {number} lifeTimeMin Minimum lifetime of spawned cubes.
         * @param {number} deltaScalar Amount to scale delta by
         * @param {Object} color THREE.Color Object
         * @param {number} [scale] Amount to scale the spawned cubes by.
         * @param {Object} [parentVelocity] Velocity of exploding parent.
         * @param {boolean} [fadeEmissive] Whether the emissive value should fade to off
         */

    }, {
        key: "spawnFloater",
        value: function spawnFloater(pos, lifeTimeMax, lifeTimeMin, deltaScalar, scale, color, parentVelocity, fadeEmissive) {
            if (scale === undefined) {
                scale = this.scale;
            }

            if (parentVelocity === undefined) {
                parentVelocity = new THREE.Vector3();
            }

            var block = undefined;
            block = GameStore.GameInstance.physBlockPool.Get();
            var scalar = this.useBitColors ? this.bitEmissiveScalar : this.emissiveScalar;
            var emissiveColor = color.clone().multiplyScalar(scalar);
            if (block !== undefined) {
                block.CreateFloater(pos.x, pos.y, pos.z, scale, Math.round(color.r * 255), Math.round(color.g * 255), Math.round(color.b * 255), lifeTimeMax, lifeTimeMin, this.particleForce, 0, emissiveColor.getHex(), parentVelocity, deltaScalar, fadeEmissive);
            }
        }
    }]);

    return _class;
}();

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Weapon = __webpack_require__(26);
var Projectile = __webpack_require__(21);

module.exports.WeaponAiSimple = function (_Weapon$WeaponBase) {
    _inherits(_class, _Weapon$WeaponBase);

    function _class() {
        _classCallCheck(this, _class);

        var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));

        _this.type = Weapon.EWeaponType.SimpleAi;
        _this.activtionType = Weapon.EActivationType.Semi;
        _this.activationCooldown = .1;
        _this.accuracyOffset = 0.1;

        // Setup fire soundShader
        _this.fireSoundShader.LoadSound("sound/lasershot1.mp3", 60, 0.3);
        _this.fireSoundShader.LoadSound("sound/lasershot2.mp3", 60, 0.3);
        _this.fireSoundShader.LoadSound("sound/lasershot3.mp3", 60, 0.3);
        _this.fireSoundShader.LoadSound("sound/lasershot4.mp3", 60, 0.3);

        // Post construct for any overrides
        _this.Init();

        _this.activationList = [_this.spawnDefaultShot()];
        return _this;
    }

    _createClass(_class, [{
        key: "spawnDefaultShot",
        value: function spawnDefaultShot() {
            return new Weapon.ActivationBase({
                activationEventIndex: 0,
                spawnOffset: this.spawnOffset,
                accuracyOffset: this.accuracyOffset,
                projectileType: Projectile.EProjectileType.SimpleAi
            });
        }
    }]);

    return _class;
}(Weapon.WeaponBase);

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var THREE = __webpack_require__(1);

var GameStore = __webpack_require__(0);
var Utils = __webpack_require__(2);
var SoundSystem = __webpack_require__(7);
var Chunk = __webpack_require__(23);

var EProjectileType = Object.freeze({
    Simple: 1,
    SimpleAi: 2,
    Stamp: 3,
    StampThrow: 4,
    SimpleBB: 5,
    GordThrow: 6
});
module.exports.EProjectileType = EProjectileType;

var ProjectileBase = function () {
    function ProjectileBase() {
        _classCallCheck(this, ProjectileBase);

        this.lifetime = 2;
        this.damage = 1;
        this.speed = 1;
        this.owner = undefined;
        this.chunk = undefined;
        this.mesh = undefined;
        this.direction = undefined;
        this.size = 1.25;
        this.castShadow = true;
        this.receiveShadow = true;
        this.hasGlow = false;
        this.glow = { r: 0, g: 0, b: 0 };
        this.glowNormal = { r: 0, g: 0, b: 0 };
        this.glowBuffed = { r: 0, g: 0, b: 0 };
        this.glowDebuffed = { r: 0, g: 0, b: 0 };
        this.emissiveScale = 1;
        this.lights = []; // member format { color: 0xffffff, distance: 1.5, decay: 20 }
        this.lightsLocalOffset = { x: 0, y: 0, z: 0 };

        this.velocity = new THREE.Vector3(); // Store for current velocity

        this.knockbackForce = 0;
        this.knockbackLifetime = 0;

        this.voxelImpactRadius = 0; // Number of voxels to remove at point of impact
        this.voxelChance = 0.334; // Chance a voxel will spawn when removed
        this.voxelLife = 10; // Lifetime of spawned voxels on explode
        this.voxelVelocityScale = 5; // Amount to scale velocity inherited from parent on voxels
        this.voxelImpactPower = 6; // Amount of force applied to voxels during explosion

        this.spawnSound = new SoundSystem.SoundShader();
        this.impactSound = new SoundSystem.SoundShader();
    }

    _createClass(ProjectileBase, [{
        key: "Init",
        value: function Init(x, y, z, dir, owner) {
            if (this.inited) {
                return;
            }

            this.inited = true;
            this.hitSomething = false;
            this.owner = owner;
            var hasAttackBuff = owner !== undefined && owner.buffAttack !== undefined;
            var attackBuffed = hasAttackBuff && owner.buffAttack > 1;
            var attackDebuffed = hasAttackBuff && owner.buffAttack < 1;
            this.buffAttack = hasAttackBuff ? owner.buffAttack : 1;
            this.direction = dir.clone();
            this.direction.y = 0;
            this.direction.normalize();
            this.startRayPos = new THREE.Vector3(); // Used to avoid clone
            this.lastPosition = new THREE.Vector3(); // Used to avoid clone
            this.frameDir = new THREE.Vector3(); // Used to avoid clone
            this.remainingLifetime = this.lifetime;

            if (this.mesh === undefined) {
                this.setupMesh(GameStore.GameInstance.voxLoader.GetModel(this.voxName));
            }

            // Setup glow on mesh
            if (this.hasGlow) {
                if (attackBuffed) {
                    this.glow = this.glowBuffed;
                } else if (attackDebuffed) {
                    this.glow = this.glowDebuffed;
                } else {
                    this.glow = this.glowNormal;
                }

                var col = Utils.rgbToHex(Math.round(this.glow.r), Math.round(this.glow.g), Math.round(this.glow.b));
                this.mesh.material.emissive.setHex(col);
                this.mesh.material.emissive.multiplyScalar(this.emissiveScale);
            }

            // Setup lights if any
            // this.lights.forEach((lightElem) => {
            //     if (lightElem !== undefined) {
            //         var light = new THREE.PointLight( lightElem.color, lightElem.intensity, lightElem.distance, lightElem.decay )
            //         light.castShadow = false
            //         this.mesh.add( light )
            //         light.position.set( this.lightsLocalOffset.x, this.lightsLocalOffset.y, this.lightsLocalOffset.z )
            //     }
            // })

            this.mesh.position.set(x, y, z);
            this.mesh.rotation.z = Math.atan2(this.direction.x, this.direction.z);
            this.mesh.updateMatrix();
            this.mesh.updateMatrixWorld();

            this.mesh.visible = true;

            if (!GameStore.GameInstance.targets.includes(this.mesh)) {
                GameStore.GameInstance.targets.push(this.mesh);
            }

            // Play spawn sounds
            this.spawnSound.Play();
        }
    }, {
        key: "setupMesh",
        value: function setupMesh(chunk) {
            this.chunk = chunk;
            this.mesh = this.chunk.mesh;
            this.mesh.geometry.computeBoundingBox();
            this.mesh.scale.set(this.size, this.size, this.size);
            this.mesh.that = this;
            this.mesh.castShadow = this.castShadow;
            this.mesh.receiveShadow = this.receiveShadow;
            GameStore.GameInstance.scene.add(this.mesh);
        }
    }, {
        key: "Disable",
        value: function Disable() {
            var index = GameStore.GameInstance.targets.indexOf(this.mesh);
            if (index !== -1) {
                GameStore.GameInstance.targets.splice(index, 1);
            }

            this.chunk.Explode(this.mesh.position, this.size, false, this.voxelChance, this.voxelLife, this.mesh.material.emissive.getHex(), this.velocity.clone().multiplyScalar(this.voxelVelocityScale));

            this.mesh.visible = false;

            this.inited = false;
        }
    }, {
        key: "Update",
        value: function Update(time, delta) {
            var _this = this;

            this.remainingLifetime -= delta;
            if (this.remainingLifetime <= 0) {
                GameStore.GameInstance.projectileManager.ReturnProjectile(this);
                return;
            }

            // Find any hit objects
            this.startRayPos.copy(this.mesh.position);
            var frameSpeed = this.speed * delta;

            var raycaster = new THREE.Raycaster(this.startRayPos, this.direction, 0, frameSpeed);

            var intersects = raycaster.intersectObjects(GameStore.GameInstance.raycastMeshes);
            intersects.forEach(function (hit) {
                if (hit.object.that !== _this.owner && hit.object.that.DoDamage !== undefined) {
                    _this.OnHit(hit.object.that);
                    _this.hitSomething = true;
                }
            });

            // Find if world was hit
            // TODO: We should push voxels removed from the world based on the normal of the
            // impacted surface. This way voxels explode out & away from the surface they're
            // being removed from.
            if (!this.hitSomething && this.voxelImpactRadius) {
                var height = GameStore.GameInstance.chunkManager.GetHeight(this.mesh.position.x, this.mesh.position.z);
                if (height !== undefined) {
                    if (height >= this.mesh.position.y) {
                        var explodePos = this.mesh.position;
                        var worldIntersects = GameStore.GameInstance.world.intersectRayWithWorld(this.startRayPos, this.direction);
                        if (worldIntersects.length > 0) {
                            explodePos = worldIntersects[0].point;
                        }

                        GameStore.GameInstance.chunkManager.RemoveSphere(explodePos.x, explodePos.y, explodePos.z, this.voxelImpactRadius, this.voxelImpactPower);
                        this.hitSomething = true;
                    }
                }
            }

            if (this.hitSomething) {
                GameStore.GameInstance.projectileManager.ReturnProjectile(this);
            }
        }
    }, {
        key: "Draw",
        value: function Draw(time, delta) {
            this.Update(time, delta);
        }
    }, {
        key: "OnHit",
        value: function OnHit(hitObject) {
            if (!this.hitSomething) {
                // Play impact sound
                this.impactSound.Play();

                if (this.buffAttack > 1) {
                    this.owner.attackBonus = this.damage * this.buffAttack - this.damage;
                }

                hitObject.DoDamage(this.damage * this.buffAttack, this.owner.team, this.mesh.position.clone(), this.knockbackForce * this.buffAttack, this.knockbackLifetime, this.owner);
            }
        }
    }]);

    return ProjectileBase;
}();

var ProjectileSimple = function (_ProjectileBase) {
    _inherits(ProjectileSimple, _ProjectileBase);

    function ProjectileSimple(x, y, z, dir, owner) {
        _classCallCheck(this, ProjectileSimple);

        var _this2 = _possibleConstructorReturn(this, (ProjectileSimple.__proto__ || Object.getPrototypeOf(ProjectileSimple)).call(this));

        _this2.type = EProjectileType.Simple;
        _this2.voxName = "fireball";
        _this2.lifetime = 1;
        _this2.damage = 35;
        _this2.size = 2.5;
        _this2.castShadow = false;
        _this2.receiveShadow = false;
        _this2.hasGlow = true;
        _this2.glow = { r: 255, g: 188, b: 137 };
        _this2.glowNormal = { r: 255, g: 188, b: 137 };
        _this2.glowBuffed = { r: 255, g: 40, b: 20 };
        _this2.glowDebuffed = { r: 0, g: 0, b: 128 };
        _this2.lights = [{ color: 0xff9500, intensity: 3, distance: 5, decay: 1 }];
        _this2.lightsLocalOffset = { x: 0, y: 0, z: 3 };
        _this2.voxelImpactRadius = 2;

        _this2.knockbackForce = 330;
        _this2.knockbackLifetime = 0.01875;

        _this2.Init(x, y, z, dir, owner);

        // Setup impact sounds
        _this2.impactSound.LoadSound("sound/generic_hit-01.wav");
        _this2.impactSound.LoadSound("sound/generic_hit-02.wav");
        _this2.impactSound.LoadSound("sound/generic_hit-03.wav");
        _this2.impactSound.LoadSound("sound/generic_hit-04.wav");
        _this2.impactSound.LoadSound("sound/generic_hit-05.wav");
        if (_this2.impactSound.Object3D) {
            _this2.mesh.add(_this2.impactSound.Object3D);
        }
        return _this2;
    }

    _createClass(ProjectileSimple, [{
        key: "Init",
        value: function Init(x, y, z, dir, owner) {
            this.speed = 45 * GameStore.GameInstance.upgradeManager.getIncreasedProjectileSpeedModifier();

            _get(ProjectileSimple.prototype.__proto__ || Object.getPrototypeOf(ProjectileSimple.prototype), "Init", this).call(this, x, y, z, dir, owner);
        }
    }, {
        key: "Update",
        value: function Update(time, delta) {
            _get(ProjectileSimple.prototype.__proto__ || Object.getPrototypeOf(ProjectileSimple.prototype), "Update", this).call(this, time, delta);

            this.frameDir.copy(this.direction).multiplyScalar(this.speed * delta);

            this.lastPosition.copy(this.mesh.position);
            this.mesh.position.x += this.frameDir.x;
            this.mesh.position.z += this.frameDir.z;

            // Get new velocity
            this.velocity.copy(this.mesh.position).sub(this.lastPosition);

            this.mesh.rotation.z = Math.atan2(this.direction.x, this.direction.z);
        }
    }]);

    return ProjectileSimple;
}(ProjectileBase);

module.exports.ProjectileSimple = ProjectileSimple;

var ProjectileSimpleBB = function (_ProjectileSimple) {
    _inherits(ProjectileSimpleBB, _ProjectileSimple);

    function ProjectileSimpleBB(x, y, z, dir, owner) {
        _classCallCheck(this, ProjectileSimpleBB);

        var _this3 = _possibleConstructorReturn(this, (ProjectileSimpleBB.__proto__ || Object.getPrototypeOf(ProjectileSimpleBB)).call(this, x, y, z, dir, owner));

        _this3.type = EProjectileType.SimpleBB;
        _this3.lifetime = 1.2;
        _this3.damage = 16;
        _this3.speed = 130;
        _this3.knockbackForce = 300;

        _this3.Init(x, y, z, dir, owner);
        return _this3;
    }

    _createClass(ProjectileSimpleBB, [{
        key: "Init",
        value: function Init(x, y, z, dir, owner) {
            this.voxName = "fireball_bb";
            this.glow = { r: 120, g: 170, b: 250 };

            _get(ProjectileSimpleBB.prototype.__proto__ || Object.getPrototypeOf(ProjectileSimpleBB.prototype), "Init", this).call(this, x, y, z, dir, owner);
        }
    }]);

    return ProjectileSimpleBB;
}(ProjectileSimple);

module.exports.ProjectileSimpleBB = ProjectileSimpleBB;

var ProjectileSimpleAi = function (_ProjectileBase2) {
    _inherits(ProjectileSimpleAi, _ProjectileBase2);

    function ProjectileSimpleAi(x, y, z, dir, owner) {
        _classCallCheck(this, ProjectileSimpleAi);

        var _this4 = _possibleConstructorReturn(this, (ProjectileSimpleAi.__proto__ || Object.getPrototypeOf(ProjectileSimpleAi)).call(this));

        _this4.type = EProjectileType.SimpleAi;
        _this4.voxName = "fireball_ai";
        _this4.damage = 25;
        _this4.speed = 15;
        _this4.size = 2.5;
        _this4.lifetime = 3;
        _this4.castShadow = false;
        _this4.receiveShadow = false;
        _this4.hasGlow = true;
        _this4.glow = { r: 255, g: 137, b: 137 };
        _this4.glowNormal = { r: 255, g: 137, b: 137 };
        _this4.emissiveScale = 1.5;
        _this4.voxelImpactRadius = 2;

        // dgorski - TODO: Add knockback to player
        _this4.knockbackForce = 50;
        _this4.knockbackLifetime = 0.015;

        _this4.Init(x, y, z, dir, owner);

        // Setup impact sounds
        _this4.impactSound.LoadSound("sound/generic_hit-01.wav");
        _this4.impactSound.LoadSound("sound/generic_hit-02.wav");
        _this4.impactSound.LoadSound("sound/generic_hit-03.wav");
        _this4.impactSound.LoadSound("sound/generic_hit-04.wav");
        _this4.impactSound.LoadSound("sound/generic_hit-05.wav");
        if (_this4.impactSound.Object3D) {
            _this4.mesh.add(_this4.impactSound.Object3D);
        }

        // Setup spawn sounds
        _this4.spawnSound.LoadSound("sound/drone_fire-01.wav");
        _this4.spawnSound.LoadSound("sound/drone_fire-02.wav");
        _this4.spawnSound.LoadSound("sound/drone_fire-03.wav");
        _this4.spawnSound.LoadSound("sound/drone_fire-04.wav");
        if (_this4.spawnSound.Object3D) {
            _this4.mesh.add(_this4.spawnSound.Object3D);
        }
        return _this4;
    }

    _createClass(ProjectileSimpleAi, [{
        key: "Update",
        value: function Update(time, delta) {
            _get(ProjectileSimpleAi.prototype.__proto__ || Object.getPrototypeOf(ProjectileSimpleAi.prototype), "Update", this).call(this, time, delta);

            this.frameDir.copy(this.direction).multiplyScalar(this.speed * delta);
            this.lastPosition.copy(this.mesh.position);
            this.mesh.position.x += this.frameDir.x;
            this.mesh.position.z += this.frameDir.z;

            // Get new velocity
            this.velocity.copy(this.mesh.position).sub(this.lastPosition);

            this.mesh.rotation.z = Math.atan2(this.direction.x, this.direction.z);
        }
    }]);

    return ProjectileSimpleAi;
}(ProjectileBase);

module.exports.ProjectileSimpleAi = ProjectileSimpleAi;

var ProjectileStamp = function (_ProjectileBase3) {
    _inherits(ProjectileStamp, _ProjectileBase3);

    function ProjectileStamp(x, y, z, dir, owner) {
        _classCallCheck(this, ProjectileStamp);

        var _this5 = _possibleConstructorReturn(this, (ProjectileStamp.__proto__ || Object.getPrototypeOf(ProjectileStamp)).call(this));

        _this5.type = EProjectileType.Stamp;
        _this5.lifetime = 4;
        _this5.damage = 150;
        _this5.speed = 10;
        _this5.size = 1;
        _this5.castShadow = false;
        _this5.receiveShadow = false;

        _this5.glow = { r: 255, g: 188, b: 137 };
        _this5.glowNormal = { r: 255, g: 137, b: 137 };
        _this5.lights = [{ color: 0xff9500, intensity: 3, distance: 5, decay: 1 }];
        _this5.lightsLocalOffset = { x: 0, y: 0, z: 3 };
        _this5.voxelImpactRadius = 2;

        _this5.knockbackForce = 300;
        _this5.knockbackLifetime = 0.01875;

        // Need to setup mesh before Init
        _this5.stampData = GameStore.GameInstance.projectileManager.getStampProjectile();
        if (_this5.stampData !== undefined) {
            var offset = {
                x: 0,
                y: 0,
                z: -_this5.stampData.width / 2 * GameStore.GameInstance.world.blockSize
            };
            var newChunk = GameStore.GameInstance.stampManager.createChunkFromStamp(_this5.stampData, offset);
            _this5.setupMesh(newChunk);

            _this5.hasGlow = false;
        } else {
            _this5.voxName = "fireball";
            _this5.size = 2.5;
            _this5.hasGlow = true;
        }

        _this5.Init(x, y, z, dir, owner);

        // Need to set rotation after Init
        if (_this5.stampData !== undefined) {
            _this5.mesh.rotation.copy(new THREE.Euler(0, Math.atan2(_this5.direction.x, _this5.direction.z) - Math.PI / 2, -Math.PI / 2, "YXZ"));
        }

        // Setup impact sounds
        _this5.impactSound.LoadSound("sound/generic_hit-01.wav");
        _this5.impactSound.LoadSound("sound/generic_hit-02.wav");
        _this5.impactSound.LoadSound("sound/generic_hit-03.wav");
        _this5.impactSound.LoadSound("sound/generic_hit-04.wav");
        _this5.impactSound.LoadSound("sound/generic_hit-05.wav");
        if (_this5.impactSound.Object3D) {
            _this5.mesh.add(_this5.impactSound.Object3D);
        }
        return _this5;
    }

    _createClass(ProjectileStamp, [{
        key: "Update",
        value: function Update(time, delta) {
            _get(ProjectileStamp.prototype.__proto__ || Object.getPrototypeOf(ProjectileStamp.prototype), "Update", this).call(this, time, delta);

            this.frameDir.copy(this.direction).multiplyScalar(this.speed * delta);

            this.lastPosition.copy(this.mesh.position);
            this.mesh.position.x += this.frameDir.x;
            this.mesh.position.z += this.frameDir.z;

            // Get new velocity
            this.velocity.copy(this.mesh.position).sub(this.lastPosition);
        }
    }]);

    return ProjectileStamp;
}(ProjectileBase);

module.exports.ProjectileStamp = ProjectileStamp;

var ProjectileStampThrow = function (_ProjectileBase4) {
    _inherits(ProjectileStampThrow, _ProjectileBase4);

    function ProjectileStampThrow(x, y, z, dir, owner) {
        _classCallCheck(this, ProjectileStampThrow);

        var _this6 = _possibleConstructorReturn(this, (ProjectileStampThrow.__proto__ || Object.getPrototypeOf(ProjectileStampThrow)).call(this));

        _this6.type = EProjectileType.StampThrow;
        _this6.lifetime = 4;
        _this6.damage = 150;
        _this6.speed = 20;
        _this6.size = 1;
        _this6.castShadow = false;
        _this6.receiveShadow = false;

        _this6.lights = [{ color: 0xff9500, intensity: 3, distance: 5, decay: 1 }];
        _this6.lightsLocalOffset = { x: 0, y: 0, z: 3 };
        _this6.voxelImpactRadius = 2;

        _this6.knockbackForce = 300;
        _this6.knockbackLifetime = 0.01875;

        // Need to setup mesh before Init
        _this6.setupMesh(owner.throwChunk);
        owner.throwChunk = undefined;
        _this6.hasGlow = false;

        _this6.targetPos = dir.clone();
        _this6.targetDelta = new THREE.Vector3();

        // Setup spawn sounds
        _this6.spawnSound.LoadSound("sound/gord_throw-01.mp3");
        _this6.spawnSound.LoadSound("sound/gord_throw-02.mp3");
        _this6.spawnSound.LoadSound("sound/gord_throw-03.mp3");
        _this6.spawnSound.LoadSound("sound/gord_throw-04.mp3");
        if (_this6.spawnSound.Object3D) {
            _this6.mesh.add(_this6.spawnSound.Object3D);
        }

        _this6.Init(x, y, z, dir, owner);

        _this6.flightTime = 0;
        var totalFlightTime = _this6.targetPos.clone().sub(_this6.mesh.position).length() / _this6.speed;
        _this6.gravity = 20;
        _this6.velY = .5 * _this6.gravity * totalFlightTime;

        // Need to set rotation after Init
        if (_this6.stampData !== undefined) {
            _this6.mesh.rotation.copy(new THREE.Euler(0, Math.atan2(_this6.direction.x, _this6.direction.z) - Math.PI / 2, -Math.PI / 2, "YXZ"));
        }

        // Setup impact sounds
        _this6.impactSound.LoadSound("sound/generic_hit-01.wav");
        _this6.impactSound.LoadSound("sound/generic_hit-02.wav");
        _this6.impactSound.LoadSound("sound/generic_hit-03.wav");
        _this6.impactSound.LoadSound("sound/generic_hit-04.wav");
        _this6.impactSound.LoadSound("sound/generic_hit-05.wav");
        if (_this6.impactSound.Object3D) {
            _this6.mesh.add(_this6.impactSound.Object3D);
        }
        return _this6;
    }

    _createClass(ProjectileStampThrow, [{
        key: "Update",
        value: function Update(time, delta) {
            var frameSpeed = this.speed * delta;

            this.lastPosition.copy(this.mesh.position);

            this.flightTime += delta;

            this.targetDelta.copy(this.targetPos).sub(this.mesh.position);
            if (this.targetDelta.length() > frameSpeed) {
                this.mesh.position.add(this.targetDelta.normalize().multiplyScalar(frameSpeed));
                this.mesh.position.y = this.targetPos.y + 5 + this.velY * this.flightTime - .5 * this.gravity * this.flightTime * this.flightTime;
            } else {
                GameStore.GameInstance.projectileManager.ReturnProjectile(this);
            }

            // Get new velocity
            this.velocity.copy(this.mesh.position).sub(this.lastPosition);
            this.direction.copy(this.velocity).normalize();

            _get(ProjectileStampThrow.prototype.__proto__ || Object.getPrototypeOf(ProjectileStampThrow.prototype), "Update", this).call(this, time, delta);
        }
    }]);

    return ProjectileStampThrow;
}(ProjectileBase);

module.exports.ProjectileStampThrow = ProjectileStampThrow;

var ProjectileGordThrow = function (_ProjectileStampThrow) {
    _inherits(ProjectileGordThrow, _ProjectileStampThrow);

    function ProjectileGordThrow(x, y, z, dir, owner) {
        _classCallCheck(this, ProjectileGordThrow);

        var _this7 = _possibleConstructorReturn(this, (ProjectileGordThrow.__proto__ || Object.getPrototypeOf(ProjectileGordThrow)).call(this, x, y, z, dir, owner));

        _this7.type = EProjectileType.GordThrow;
        _this7.damage = 80;
        return _this7;
    }

    return ProjectileGordThrow;
}(ProjectileStampThrow);

module.exports.ProjectileGordThrow = ProjectileGordThrow;

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var THREE = __webpack_require__(1);

var GameStore = __webpack_require__(0);
var AiBase = __webpack_require__(20);
var Utils = __webpack_require__(2);
var SoundSystem = __webpack_require__(7);

var AiGoal = function (_AiBase) {
    _inherits(AiGoal, _AiBase);

    function AiGoal(x, y, z) {
        _classCallCheck(this, AiGoal);

        var _this = _possibleConstructorReturn(this, (AiGoal.__proto__ || Object.getPrototypeOf(AiGoal)).call(this));

        _this.team = GameStore.Teams.Collaborators;
        _this.voxName = "retail_box";
        _this.speed = 14;
        _this.deceleration = 3;
        _this.turnSpeed = 2 * Math.PI; // Yaw rotation speed in radians
        _this.size = 2;
        _this.maxHealth = Infinity;
        _this.mass = 25;

        // Spawn angle
        var angle = 0.22 * Math.PI * 2;
        _this.direction = new THREE.Vector3(Math.cos(angle), 0, Math.sin(angle));

        // Use for light on goal
        _this.lightSettings = { color: 0xffffff, distance: 1.5, decay: 20 };
        _this.lightLocalPosition = { x: 0.0, y: 0.0, z: 2.0

            // Setup light
        };var light = new THREE.PointLight(_this.lightSettings.color, _this.lightSettings.distance, _this.lightSettings.decay);
        light.position.set(_this.lightLocalPosition.x, _this.lightLocalPosition.y, _this.lightLocalPosition.z);
        light.castShadow = true;

        // Setup for spawn offset & height calculation
        _this.offset = { x: 0, y: 0.8, z: 0

            // Set up shadow properties for the light
        };light.shadow.mapSize.width = 512;
        light.shadow.mapSize.height = 512;
        light.shadow.camera.near = 0.5;
        light.shadow.camera.far = 100;
        light.shadow.radius = 10;
        light.shadow.bias = -0.00001;

        _this.Init(x, y, z);
        _this.mesh.rotation.z = Math.atan2(_this.direction.x, _this.direction.z);
        // this.mesh.add( light ) // Too many lights are causing shaders to fail

        // Setup drop sound
        _this.dropSound = new SoundSystem.SoundShader();
        _this.dropSound.LoadSound("sound/player_drop-01.mp3", 60, 0.5);
        _this.dropSound.LoadSound("sound/player_drop-02.mp3", 60, 0.5);
        _this.dropSound.LoadSound("sound/player_drop-03.mp3", 60, 0.5);

        // Setup pickup sound
        _this.pickupSound = new SoundSystem.SoundShader();
        _this.pickupSound.LoadSound("sound/player_picku-01.mp3", 60, 0.5);
        _this.pickupSound.LoadSound("sound/player_picku-02.mp3", 60, 0.5);

        // Used to throw box when knocked off player
        _this.throwOffPlayer = false;

        // Used to pickup
        _this.canPickup = false;
        _this.pickupDistance = 4;
        _this.pickupTime = 0.7;
        _this.currentPickupTime = 0;
        _this.attachPosition = new THREE.Vector3(0, 1.55, -0.2);
        _this.isAttached = false;
        _this.attachRotX = 1.5708;

        // Affects how high to "jump" when knocked
        _this.startVelocityY = 1;
        _this.velocityY = _this.startVelocityY;
        _this.gravity = 0.06;

        // Package can take a few hits before dropping
        _this.allowedHitsBeforeDrop = 3;
        _this.currentHits = 0;

        // Used on win condition
        _this.delivered = false;

        // For strobe when ready for pickup
        _this.mesh.material.emissive.setRGB(1, 1, 1);

        // No XP should be earned from the Goal object when the level ends.
        _this.xpComp.xp = 0;
        return _this;
    }

    /**
     * @description Process damage on AI
     * @param {number} damage Amount of damage to deal
     * @param {Object} [team] Attackers team
     * @param {Object} [hitPosition] A Vector3 for the damage position
     * @param {number} [forceMass] Amount of force for knockback
     * @param {number} [forceLifetime] Lifetime of knockback
     */


    _createClass(AiGoal, [{
        key: "DoDamage",
        value: function DoDamage(damage, team, hitPosition, forceMass, forceLifetime, attacker) {
            if (team === undefined) {
                team = GameStore.Teams.Threat;
            }

            if (team !== this.team) {
                this.currentHits++;
                if (this.currentHits >= this.allowedHitsBeforeDrop && !(this.throwOffPlayer || this.canPickup)) {
                    this.Drop();
                }
            }

            _get(AiGoal.prototype.__proto__ || Object.getPrototypeOf(AiGoal.prototype), "DoDamage", this).call(this, damage, team, hitPosition, forceMass, forceLifetime, attacker);
        }
    }, {
        key: "Drop",
        value: function Drop(direction) {
            // If attached star drop
            if (this.mesh.parent !== null && this.mesh.parent.type !== "Scene") {
                this.StartDrop(direction);
            }
        }
    }, {
        key: "StartDrop",
        value: function StartDrop(direction) {
            var _this2 = this;

            var parent = this.mesh.parent.parent; // parent is player body, parent parent are the tracks

            // Play drop sound
            if (!this.delivered) {
                this.dropSound.Play();
            }

            // Release from Parent
            this.Detach(this.mesh.parent);

            // Get throw direction
            if (direction !== undefined) {
                this.direction.copy(direction);
            } else {
                this.direction.copy(this.mesh.position).sub(parent.position).normalize();
            }

            // Bounce off
            this.currentSpeed = this.speed;
            this.velocityY = this.startVelocityY;
            this.throwOffPlayer = true;
            this.randomYaw = Utils.RandomRange(0, 3.14);

            // If delivered then remove
            if (this.delivered) {
                setTimeout(function () {
                    _this2.Die(true);
                }, 2000);
            }
        }
    }, {
        key: "Detach",
        value: function Detach(parentMesh) {
            this.mesh.applyMatrix(parentMesh.matrixWorld);
            parentMesh.remove(this.mesh);
            GameStore.GameInstance.scene.add(this.mesh);

            this.isAttached = false;
        }
    }, {
        key: "Attach",
        value: function Attach(parentMesh, immediate) {
            // Disable pickup
            this.canPickup = false;

            // Play pickup sound
            this.pickupSound.Play();

            // Disable strobe
            this.mesh.material.emissiveIntensity = 1;
            this.mesh.material.emissive.setRGB(0, 0, 0);

            // Attach from current position
            this.mesh.applyMatrix(new THREE.Matrix4().getInverse(parentMesh.matrixWorld));
            GameStore.GameInstance.scene.remove(this.mesh);
            parentMesh.add(this.mesh);

            // Tutorial needs to be aware of first pickup before beginning
            GameStore.GameInstance.Tutorial.packagePickup();

            // Reset hit counter
            this.currentHits = 0;

            // Lerp to this rotation & position over X time
            this.currentPickupTime = this.pickupTime;

            if (immediate === true) {
                this.mesh.position.copy(this.attachPosition);
                this.mesh.rotation.set(this.attachRotX, 0, 0);
            }

            this.isAttached = true;
        }
    }, {
        key: "delayedDestroy",
        value: function delayedDestroy() {
            _get(AiGoal.prototype.__proto__ || Object.getPrototypeOf(AiGoal.prototype), "delayedDestroy", this).call(this);
            this.dropSound.Destroy();
            this.pickupSound.Destroy();
        }

        /**
         * @description Use to move AI to new height given next position
         * @param {number} newX X coordinate of the next position
         * @param {number} newZ Z coordinate of the next position
         * @param {number} delta Delta time from tick
         * @returns {boolean} Returns true if the height change was successful
         */

    }, {
        key: "ChangeHeight",
        value: function ChangeHeight(newX, newZ, delta) {
            // Get desired height
            this.desiredHeight = this.GetHeight(newX, newZ) + this.offset.y;

            // Move in a direction, handle throw
            if (this.desiredHeight < this.mesh.position.y) {
                this.velocityY -= this.gravity;
                var newPosY = this.mesh.position.y + this.velocityY;

                // Check if fell below world
                if (newPosY < 0.3) {
                    newPosY = 0.3;
                }

                // Check if done falling
                var allowMovement = true;
                if (newPosY < this.desiredHeight) {
                    var currentFloorHeight = this.GetHeight(this.mesh.position.x, this.mesh.position.z) + this.offset.y;
                    if (newPosY < currentFloorHeight) {
                        newPosY = currentFloorHeight;
                        this.velocityY = 0;
                        this.throwOffPlayer = false;

                        // Turn on pickupable when done
                        this.canPickup = true;
                    }

                    allowMovement = false;
                }

                this.mesh.position.y = newPosY;

                return allowMovement;
            }

            return false;
        }
    }, {
        key: "Update",
        value: function Update(time, delta) {
            if (this.mesh.parent === null || this.mesh.parent.type === "Scene") {
                var frameRotAmount = this.turnSpeed * delta;

                // Rotate pitch if needed
                if (this.mesh.rotation.x !== this.attachRotX) {
                    var deltaAngle = this.attachRotX - this.mesh.rotation.x;
                    if (Math.abs(deltaAngle) > 0) {
                        if (frameRotAmount >= Math.abs(deltaAngle)) {
                            this.mesh.rotation.x = this.attachRotX;
                        } else {
                            this.mesh.rotation.x += Math.sign(deltaAngle) * frameRotAmount;
                        }
                    }
                }

                // Rotate roll if needed
                if (this.mesh.rotation.y !== 0) {
                    if (frameRotAmount >= this.mesh.rotation.y) {
                        this.mesh.rotation.y = 0;
                    } else {
                        this.mesh.rotation.y -= frameRotAmount;
                    }
                }

                // Rotate body toward random yaw
                if (this.mesh.rotation.z !== this.randomYaw) {
                    var _deltaAngle = this.randomYaw - this.mesh.rotation.z;
                    if (_deltaAngle > 0) {
                        if (frameRotAmount >= _deltaAngle) {
                            this.mesh.rotation.z = this.randomYaw;
                        } else {
                            this.mesh.rotation.z += frameRotAmount;
                        }
                    }
                }
            }
            if (this.throwOffPlayer) {
                // Handle throw movement
                this.CopyLastPositionAndVelocity();
                this.FindDesiredNextPosition(delta);
                this.SetPositionFromNextPosition(delta);
                this.RotateToDesiredDirection(delta);
                this.CalcVelocityAndAcceleration();
            } else if (this.currentPickupTime > 0) {
                // Lerp to attach position
                this.currentPickupTime -= delta;
                var alpha = Utils.MapRangeClamped(this.currentPickupTime, this.pickupTime, 0, 0, 1);
                this.mesh.position.lerp(this.attachPosition, alpha);
                this.mesh.rotation.set(Utils.Lerp(this.mesh.rotation.x, this.attachRotX, alpha), Utils.Lerp(this.mesh.rotation.y, 0, alpha), Utils.Lerp(this.mesh.rotation.z, 0, alpha));
            } else if (this.canPickup) {
                var playerDist = this.mesh.position.distanceTo(GameStore.GameInstance.player.mesh.position);

                // Strobe
                this.mesh.material.emissive.setRGB(1, 1, 1);
                this.mesh.material.emissiveIntensity = Math.max(0, 0.375 * Math.sin(time * 8));

                if (playerDist <= this.pickupDistance && !this.delivered) {
                    this.Attach(GameStore.GameInstance.player.meshBody);
                }
            }

            _get(AiGoal.prototype.__proto__ || Object.getPrototypeOf(AiGoal.prototype), "Update", this).call(this, time, delta);
        }
    }]);

    return AiGoal;
}(AiBase);

module.exports = AiGoal;

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var THREE = __webpack_require__(1);

var GameStore = __webpack_require__(0);
var AiBase = __webpack_require__(20);

var AiDrop = function (_AiBase) {
    _inherits(AiDrop, _AiBase);

    function AiDrop(x, y, z, optionalParams) {
        _classCallCheck(this, AiDrop);

        var _this = _possibleConstructorReturn(this, (AiDrop.__proto__ || Object.getPrototypeOf(AiDrop)).call(this));

        _this.team = GameStore.Teams.Collaborators;
        _this.voxName = optionalParams.voxName;
        _this.speed = 0;
        _this.size = 2;
        _this.maxHealth = Infinity;
        _this.collectDistance = 4;
        _this.customCollisionBounds = new THREE.Box3(new THREE.Vector3(-1, -1, -1), new THREE.Vector3(1, 1, 1));

        // Setup for spawn offset & height calculation
        _this.offset = { x: 0, y: 0.8, z: 0

            // Drop specific
        };_this.upgradeInfo = optionalParams;

        _this.Init(x, y, z);
        return _this;
    }

    _createClass(AiDrop, [{
        key: "Update",
        value: function Update(time, delta) {
            this.ChangeHeight(this.mesh.position.x, this.mesh.position.z, delta);

            if (!this.dead && GameStore.GameInstance.player !== undefined) {
                var playerDist = GameStore.GameInstance.player.mesh.position.distanceTo(this.mesh.position);
                if (playerDist <= this.collectDistance) {
                    this.awardDrop();
                }
            }

            _get(AiDrop.prototype.__proto__ || Object.getPrototypeOf(AiDrop.prototype), "Update", this).call(this, time, delta);
        }
    }, {
        key: "awardDrop",
        value: function awardDrop() {

            GameStore.GameInstance.upgradeManager.equipUpgrade(this.upgradeInfo.type);

            this.Die();
        }
    }]);

    return AiDrop;
}(AiBase);

module.exports = AiDrop;

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var THREE = __webpack_require__(1);

var GameStore = __webpack_require__(0);
var SoundSystem = __webpack_require__(7);
var AiBase = __webpack_require__(20);
var Utils = __webpack_require__(2);
var Projectile = __webpack_require__(21);
var BuffManager = __webpack_require__(18);
var HistoryManager = __webpack_require__(27);

var AiStamp = function (_AiBase) {
    _inherits(AiStamp, _AiBase);

    function AiStamp(x, y, z, params) {
        _classCallCheck(this, AiStamp);

        var _this = _possibleConstructorReturn(this, (AiStamp.__proto__ || Object.getPrototypeOf(AiStamp)).call(this));

        if (params !== undefined) {
            _this.chunk = params.chunk !== undefined ? params.chunk : undefined;
            _this.viewerUserId = params.userId !== undefined ? params.userId : undefined;
            _this.spawnNormal = params.normal !== undefined ? params.normal : undefined;
            _this.stampData = Object.assign({}, params.data);
            _this.stampData.dataArray = params.data.dataArray.slice(0);
            _this.stampOffset = params.offset;
            _this.isEnemy = params.isEnemy;
        }

        _this.team = _this.isEnemy ? GameStore.Teams.Threat : GameStore.Teams.Collaborators;

        _this.acceleration = 4;
        _this.deceleration = 10;
        _this.maxSpeed = 20; // Used to limit speed of AI after being pushed
        _this.size = 1;
        _this.deathTime = 20;
        _this.voxelChance = 1;
        _this.offset = { x: 0, y: 1, z: 0 };
        _this.aggroDistance = 40;
        _this.voxelSize = 1;

        _this.angleT = 0;
        _this.walkTSpeed = 7;
        _this.walkRockAngle = Math.PI / 4;
        _this.standTSpeed = 3;

        _this.throwCooldown = 3;
        _this.throwDistance = 20;
        _this.remainingThrowCooldown = 0;

        _this.followPlayerDistance = 8;
        _this.followEnemyDistance = 6;

        _this.turnAroundLength = 4;
        _this.turnAroundTime = _this.turnAroundLength;

        _this.projectileType = Projectile.EProjectileType.StampThrow;

        _this.customCollisionBounds = new THREE.Box3(new THREE.Vector3(-2, -2, -2), new THREE.Vector3(2, 2, 2));
        _this.customCollisionBoundsForWall = new THREE.Box3(new THREE.Vector3(-3, -3, -3), new THREE.Vector3(3, 3, 3));

        var canvasArea = 81;

        _this.setupBuffsFromVoxels(canvasArea, params);
        _this.setupGameplayPropertiesFromVoxels(canvasArea);

        _this.Init(x, y, z);

        if (params !== undefined && params.rotation !== undefined && _this.mesh !== undefined) {
            _this.mesh.rotation.copy(params.rotation);
        }

        _this.uprightRotZ = 0;
        _this.targetRotY = _this.mesh.rotation.y;
        _this.rotSpeedY = Math.PI;
        _this.spawnAnimFinished = false;
        _this.spawnAnimT = 0;
        _this.spawnAnimRotSpeed = 3;
        _this.spawnAnimRotAmount = Math.PI / 6;
        _this.spawnAnimPart1T = _this.spawnAnimRotAmount / _this.spawnAnimRotSpeed;
        _this.spawnAnimPart2T = _this.spawnAnimPart1T + .5;
        _this.spawnAnimMoveSpeed = 5;

        _this.throwAnimT = 0;
        _this.startThrowAnimT = .5;
        _this.throwBlockSize = 5;

        _this.throwSound = new SoundSystem.SoundShader();
        _this.throwSound.LoadSound("sound/gord_throw_start-01.mp3", 60, 0.5);
        _this.throwSound.LoadSound("sound/gord_throw_start-02.mp3", 60, 0.5);
        _this.throwSound.LoadSound("sound/gord_throw_start-03.mp3", 60, 0.5);
        if (_this.throwSound.Object3D) {
            _this.mesh.add(_this.throwSound.Object3D);
        }

        _this.deleteSound = new SoundSystem.SoundShader();
        _this.deleteSound.LoadSound("sound/gord_throw-01.mp3", 60, 0.5);
        _this.deleteSound.LoadSound("sound/gord_throw-02.mp3", 60, 0.5);
        _this.deleteSound.LoadSound("sound/gord_throw-03.mp3", 60, 0.5);
        _this.deleteSound.LoadSound("sound/gord_throw-04.mp3", 60, 0.5);

        if (_this.isEnemy) {
            GameStore.GameInstance.outlinePass.selectedObjects.push(_this.mesh);
        }
        return _this;
    }

    _createClass(AiStamp, [{
        key: "breakMesh",
        value: function breakMesh(amount) {
            // Randomly protect a single pixel so there is no chance of a 0 pixel mesh
            var validIndexList = [];
            for (var i = 0; i < this.stampData.dataArray.length; ++i) {
                var code = this.stampData.dataArray[i];
                if (code > 0) {
                    validIndexList.push(i);
                }
            }
            var protectedIndex = validIndexList[Math.floor(Math.random() * validIndexList.length)];

            for (var _i = 0; _i < this.stampData.dataArray.length; ++_i) {
                if (_i !== protectedIndex) {
                    var _code = this.stampData.dataArray[_i];
                    if (_code > 0) {
                        if (Math.random() < amount) {
                            this.stampData.dataArray[_i] = 0;

                            var canvasSize = 9;
                            var voxelVelocity = this.velocity.clone().multiplyScalar(this.voxelVelocityScale);
                            voxelVelocity.clampLength(0, this.voxelVelocityMagnitudeMax);
                            this.chunk.Explode(this.mesh.position, this.size * this.voxelSize, false, this.voxelChance, this.voxelLife, this.voxelEmissiveColor, voxelVelocity, undefined, undefined, undefined, 0, Math.floor(_i / canvasSize), _i % canvasSize);
                        }
                    }
                }
            }

            var oldPos = this.mesh.position.clone();
            var oldRot = this.mesh.rotation.clone();

            var index = GameStore.GameInstance.targets.indexOf(this.mesh);
            if (index !== -1) {
                GameStore.GameInstance.targets.splice(index, 1);
            }
            GameStore.GameInstance.scene.remove(this.mesh);
            this.mesh.geometry.dispose();
            this.mesh.material.dispose();
            this.removeOutline();

            this.chunk = GameStore.GameInstance.stampManager.createChunkFromStamp(this.stampData, this.stampOffset);
            this.mesh = this.chunk.mesh;
            this.mesh.scale.set(this.size, this.size, this.size);
            this.mesh.position.copy(oldPos);
            this.mesh.geometry.computeBoundingBox();
            this.mesh.that = this;
            this.mesh.rotation.copy(oldRot);
            GameStore.GameInstance.scene.add(this.mesh);
            GameStore.GameInstance.targets.push(this.mesh);

            if (this.isEnemy) {
                GameStore.GameInstance.outlinePass.selectedObjects.push(this.mesh);
            }
        }
    }, {
        key: "setupGameplayPropertiesFromVoxels",
        value: function setupGameplayPropertiesFromVoxels(canvasArea) {
            this.voxelWeightScaler = this.voxelCount / canvasArea;

            this.mass = 30 + 300 * this.voxelWeightScaler;
            this.speed = 3 + (1 - this.voxelWeightScaler) * 10;
            this.maxHealth = 1 + this.voxelWeightScaler * 100;
            this.distanceToPounce = 7.25 + 5 * this.voxelWeightScaler; // When enemy is closer than this distance then blow up
            this.explosionRadius = 10 + 20 * this.voxelWeightScaler;
            this.explosionDamage = this.voxelCount;

            this.pounceAnimT = 0;
            this.pounceRotSpeed = 6 + 9 * (1 - this.voxelWeightScaler);
            this.pounceSpeed = 1 + 2 * (1 - this.voxelWeightScaler);
            this.startPounceAnimT = 3 + 3 * this.voxelWeightScaler;
            this.pounceDps = 10 + 40 * this.voxelWeightScaler;
            this.pounceDamageRadius = 5 + 10 * this.voxelWeightScaler;

            this.slideAnimT = 0;
            this.startSlideAnimT = 2;
            this.slideSpeed = 3 + 8 * (1 - this.voxelWeightScaler);
            this.slideRotSpeed = 1 + 7 * (1 - this.voxelWeightScaler);
            this.slideDps = 2 + 15 * this.voxelWeightScaler;
            this.slideDamageRadius = 5 + 10 * this.voxelWeightScaler;

            this.againstPlayerDamageScaler = .5;

            this.attackCooldown = 3 + 5 * this.voxelWeightScaler;
            this.remainingAttackCooldown = 3;
        }
    }, {
        key: "setupBuffsFromVoxels",
        value: function setupBuffsFromVoxels(canvasArea, params) {
            var _this2 = this;

            this.buffsActive = false;
            this.buffAmountPerVoxel = 1 / canvasArea;
            this.buffFloaterForce = 1.7;
            this.buffFloaterMinLifetime = 1;
            this.buffFloaterMaxLifetime = 2;
            this.buffFloatScale = .3;
            this.buffData = [{
                id: undefined,
                amount: 0,
                floaterSpawnCooldown: 0
            }, {
                id: undefined,
                amount: 0,
                floaterSpawnCooldown: 0
            }, {
                id: undefined,
                amount: 0,
                floaterSpawnCooldown: 0
            }];

            this.voxelCount = 0;
            params.dataArray.forEach(function (colorCode) {
                if (colorCode > 0) {
                    colorCode -= 1;

                    ++_this2.voxelCount;

                    var buffIndex = BuffManager.buffInfo.findIndex(function (buffInfo) {
                        return buffInfo.stampColorIndex.includes(colorCode);
                    });

                    if (buffIndex !== -1) {
                        _this2.buffData[buffIndex].amount += _this2.buffAmountPerVoxel;
                    }
                }
            });

            var totalBuffAmount = 0;
            this.buffData.forEach(function (data) {
                totalBuffAmount += data.amount;
            });
            this.buffRadius = Math.max(5, totalBuffAmount * 20);
        }
    }, {
        key: "getModifiedSpeed",
        value: function getModifiedSpeed() {
            return this.currentSpeed * GameStore.GameInstance.upgradeManager.getIncreasedSpawnStampSpeedModifier();
        }
    }, {
        key: "updateBuffs",
        value: function updateBuffs(delta) {
            if (this.dead) {
                return;
            }

            if (GameStore.GameInstance.player !== undefined) {
                var dist = GameStore.GameInstance.player.mesh.position.distanceTo(this.mesh.position);
                if (dist < this.buffRadius) {
                    if (!this.buffsActive) {
                        this.buffsActive = true;

                        for (var buffType = 0; buffType < this.buffData.length; ++buffType) {
                            var data = this.buffData[buffType];
                            if (data.amount > 0) {
                                data.id = GameStore.GameInstance.buffManager.addAltInstance(buffType, data.amount, this.viewerUserId);
                            }
                        }
                    }
                } else {
                    if (this.buffsActive) {
                        this.removeBuffs();
                    }
                }

                this.updateFloaters(delta);
            }
        }
    }, {
        key: "removeBuffs",
        value: function removeBuffs() {
            this.buffsActive = false;

            this.buffData.forEach(function (data) {
                if (data.id !== undefined) {
                    GameStore.GameInstance.buffManager.removeAltInstance(data.id);
                    data.id = undefined;
                }
            });
        }
    }, {
        key: "updateFloaters",
        value: function updateFloaters(delta) {
            for (var buffType = 0; buffType < this.buffData.length; ++buffType) {
                var data = this.buffData[buffType];
                if (data.amount > 0) {
                    data.floaterSpawnCooldown -= delta;
                    if (data.floaterSpawnCooldown <= 0) {
                        data.floaterSpawnCooldown = 1 - data.amount * .9;

                        this.spawnFloater(buffType);
                    }
                }
            }
        }
    }, {
        key: "spawnFloater",
        value: function spawnFloater(buffType) {

            var buffInfo = BuffManager.buffInfo[buffType];
            var color = buffInfo.buffParticleColor;

            var block = undefined;
            block = GameStore.GameInstance.physBlockPool.Get();
            if (block !== undefined) {
                block.CreateFloater(this.mesh.position.x, this.mesh.position.y, this.mesh.position.z, this.buffFloatScale, Math.round(color.r * 255), Math.round(color.g * 255), Math.round(color.b * 255), this.buffFloaterMaxLifetime, this.buffFloaterMinLifetime, this.buffFloaterForce, 0, color.getHex(), this.velocity, buffInfo.deltaScalar);
            }
        }
    }, {
        key: "HandleSpawnAnim",
        value: function HandleSpawnAnim(delta) {
            var almostOne = .9;

            if (this.spawnNormal.z < almostOne) {
                this.spawnAnimT += delta;
                var spawnRotFrameSpeed = this.spawnAnimRotSpeed * delta;
                var spawnMoveFrameSpeed = this.spawnAnimMoveSpeed * delta;
                if (this.spawnNormal.x > almostOne) {
                    if (this.spawnAnimT < this.spawnAnimPart1T) {
                        this.mesh.rotation.z += spawnRotFrameSpeed;
                    } else {
                        var spawnAnimRotDelta = -this.mesh.rotation.z;
                        if (Math.abs(spawnAnimRotDelta) < spawnRotFrameSpeed) {
                            this.mesh.rotation.z = 0;

                            if (this.spawnAnimT < this.spawnAnimPart2T) {
                                this.mesh.position.z += spawnMoveFrameSpeed;
                            } else {
                                this.spawnAnimFinished = true;
                            }
                        } else {
                            this.mesh.rotation.z -= spawnRotFrameSpeed;
                        }

                        this.ChangeHeight(this.mesh.position.x, this.mesh.position.z, delta * 3);
                    }
                } else {
                    if (this.spawnAnimT < this.spawnAnimPart1T) {
                        this.mesh.rotation.z += spawnRotFrameSpeed;
                    } else {
                        var _spawnAnimRotDelta = -this.mesh.rotation.z;
                        if (Math.abs(_spawnAnimRotDelta) < spawnRotFrameSpeed) {
                            this.mesh.rotation.z = 0;

                            if (this.spawnAnimT < this.spawnAnimPart2T) {
                                this.mesh.position.x += this.spawnNormal.y > 0 ? spawnMoveFrameSpeed : -spawnMoveFrameSpeed;
                            } else {
                                this.spawnAnimFinished = true;
                            }
                        } else {
                            this.mesh.rotation.z -= spawnRotFrameSpeed;
                        }

                        this.ChangeHeight(this.mesh.position.x, this.mesh.position.z, delta * 3);
                    }
                }
            } else {
                var deltaRotZ = this.uprightRotZ - this.mesh.rotation.z;
                var rotSpeed = Math.PI / 2;
                var frameRotSpeed = rotSpeed * delta;

                if (Math.abs(deltaRotZ) < frameRotSpeed) {
                    this.spawnAnimFinished = true;
                    this.mesh.rotation.z = this.uprightRotZ;
                } else {
                    this.mesh.rotation.z += frameRotSpeed * Math.sign(deltaRotZ);
                }
            }
        }

        // Given an AI will return true or false if this AI should attempt to avoid

    }, {
        key: "ShouldAvoid",
        value: function ShouldAvoid(obstacleAI) {
            // If a Gord, use default rules
            if (this.team === GameStore.Teams.Threat) {
                return _get(AiStamp.prototype.__proto__ || Object.getPrototypeOf(AiStamp.prototype), "ShouldAvoid", this).call(this, obstacleAI);
            }

            // Do not avoid enemies
            if (obstacleAI.team !== this.team) {
                return false;
            }

            // Stamps avoid the package && teammates

            return true;
        }
    }, {
        key: "FindEnemyTarget",
        value: function FindEnemyTarget() {
            var _this3 = this;

            if (this.team === GameStore.Teams.Collaborators) {
                // If I'm a stampAI, then look for enemies
                var closestSimpleAi = undefined;
                var closestSimpleAiDist = Infinity;
                GameStore.GameInstance.aiManager.aiList.forEach(function (ai) {
                    if (ai.team === GameStore.Teams.Threat && ai.isActive) {
                        var pos2d = _this3.mesh.position.clone();
                        var dist = pos2d.distanceTo(ai.mesh.position);
                        if (dist < closestSimpleAiDist && dist < _this3.aggroDistance) {
                            closestSimpleAi = ai;
                            closestSimpleAiDist = dist;
                        }
                    }
                });

                this.enemyTarget = closestSimpleAi;

                return closestSimpleAi;
            } else {
                return _get(AiStamp.prototype.__proto__ || Object.getPrototypeOf(AiStamp.prototype), "FindEnemyTarget", this).call(this);
            }
        }
    }, {
        key: "DoExplosion",
        value: function DoExplosion() {
            var _this4 = this;

            this.deleteSound.Play();

            // Find all hurtable enemies & hurt them!
            GameStore.GameInstance.aiManager.aiList.forEach(function (ai) {
                if (ai.team !== _this4.team) {
                    var dist = _this4.mesh.position.distanceTo(ai.mesh.position);

                    if (dist < _this4.explosionRadius) {
                        ai.DoDamage(_this4.explosionDamage, _this4.team, _this4.mesh.position.clone(), 300, .05, _this4);
                    }
                }
            });

            this.Die(true);
        }
    }, {
        key: "tryDoDamage",
        value: function tryDoDamage(delta, dps, radius, target) {
            var dist = this.mesh.position.distanceTo(target.mesh.position);

            if (dist < radius) {
                target.DoDamage(dps * delta, this.team, this.mesh.position.clone(), 300, .05, this);
            }
        }
    }, {
        key: "doPounceDamage",
        value: function doPounceDamage(delta) {
            var _this5 = this;

            GameStore.GameInstance.aiManager.aiList.forEach(function (ai) {
                if (ai.team !== _this5.team) {
                    _this5.tryDoDamage(delta, _this5.pounceDps, _this5.pounceDamageRadius, ai);
                }
            });

            if (GameStore.GameInstance.player !== undefined && this.team !== GameStore.GameInstance.player.team) {
                this.tryDoDamage(delta, this.pounceDps * this.againstPlayerDamageScaler, this.pounceDamageRadius, GameStore.GameInstance.player);
            }
        }
    }, {
        key: "doSlideDamage",
        value: function doSlideDamage(delta) {
            var _this6 = this;

            GameStore.GameInstance.aiManager.aiList.forEach(function (ai) {
                if (ai.team !== _this6.team) {
                    _this6.tryDoDamage(delta, _this6.slideDps, _this6.slideDamageRadius, ai);
                }
            });

            if (GameStore.GameInstance.player !== undefined && this.team !== GameStore.GameInstance.player.team) {
                this.tryDoDamage(delta, this.slideDps * this.againstPlayerDamageScaler, this.slideDamageRadius, GameStore.GameInstance.player);
            }
        }
    }, {
        key: "FindDesiredNextPosition",
        value: function FindDesiredNextPosition(delta) {
            if (this.enemyTarget !== undefined) {
                this.nextPosition.copy(this.enemyTarget.mesh.position);
                this.nextPosition.sub(this.mesh.position); // Direction toward enemy
                this.nextPosition.y = 0;
                var aiDist = this.nextPosition.length();

                if (this.isUpgradedThrower) {
                    this.remainingThrowCooldown -= delta;

                    this.nextPosition.normalize();
                    this.targetRotY = Math.atan2(this.nextPosition.x, this.nextPosition.z) + Math.PI / 2;

                    if (aiDist < this.throwDistance) {
                        if (this.remainingThrowCooldown <= 0) {
                            this.remainingThrowCooldown = this.throwCooldown;
                            this.throw(this.enemyTarget.mesh.position);
                        }

                        if (this.currentSpeed > 0) {
                            // Slow down to stop
                            this.HandleDeceleration(delta);
                            var frameSpeed = this.getModifiedSpeed() * delta;
                            this.nextPosition.multiplyScalar(frameSpeed).add(this.mesh.position);
                        } else {
                            this.nextPosition.copy(this.mesh.position); // Stay put
                        }
                    } else {
                        // Get within throwing distance
                        this.HandleAcceleration(delta);
                        var _frameSpeed = this.getModifiedSpeed() * delta;
                        this.nextPosition.multiplyScalar(_frameSpeed).add(this.mesh.position);
                    }
                } else if (aiDist > this.followEnemyDistance) {
                    this.HandleAcceleration(delta);
                    var _frameSpeed2 = this.getModifiedSpeed() * delta;
                    this.nextPosition.normalize().multiplyScalar(_frameSpeed2).add(this.mesh.position);
                } else if (this.currentSpeed > 0) {
                    this.HandleDeceleration(delta);
                    var _frameSpeed3 = this.getModifiedSpeed() * delta;
                    this.nextPosition.normalize().multiplyScalar(_frameSpeed3).add(this.mesh.position);
                } else {
                    this.nextPosition.copy(this.mesh.position);

                    this.targetRotY = Math.PI / 2;
                }
            } else if (GameStore.GameInstance.player !== undefined && this.team === GameStore.GameInstance.player.team) {
                // If no enemy then follow player
                this.nextPosition.copy(GameStore.GameInstance.player.mesh.position);
                this.nextPosition.sub(this.mesh.position); // Direction toward player
                this.nextPosition.y = 0;

                if (this.nextPosition.length() > this.followPlayerDistance) {
                    this.HandleAcceleration(delta);
                    var _frameSpeed4 = this.getModifiedSpeed() * delta;
                    this.nextPosition.normalize().multiplyScalar(_frameSpeed4).add(this.mesh.position);
                } else if (this.currentSpeed > 0) {
                    this.HandleDeceleration(delta);
                    var _frameSpeed5 = this.getModifiedSpeed() * delta;
                    this.nextPosition.normalize().multiplyScalar(_frameSpeed5).add(this.mesh.position);
                } else {
                    this.nextPosition.copy(this.mesh.position); // Stay put

                    this.targetRotY = Math.PI / 2;
                }
            } else {
                // Walk back and forth
                this.turnAroundTime -= delta;
                if (this.turnAroundTime <= 0) {
                    this.turnAroundTime = this.turnAroundLength;
                }

                if (this.turnAroundTime === this.turnAroundLength) {
                    var randomDir = Math.random(1);

                    if (randomDir > 0.667) {
                        // 180
                        this.desiredDirection.copy(this.direction).multiplyScalar(-1);
                    } else if (randomDir > 0.334) {
                        // Go right
                        this.desiredDirection = Utils.GetRightVector(this.mesh);
                    } else {
                        // Go left
                        this.desiredDirection = Utils.GetRightVector(this.mesh);
                        this.desiredDirection.multiplyScalar(-1);
                    }

                    this.desiredDirection.y = 0;
                    this.desiredDirection.normalize();
                }

                if (this.desiredDirection.length() <= 0) {
                    this.desiredDirection.copy(this.direction);
                }

                this.nextPosition.copy(this.desiredDirection);

                if (this.currentSpeed < this.speed) {
                    this.HandleAcceleration(delta);
                } else if (this.currentSpeed > 0) {
                    this.HandleDeceleration(delta);
                }

                var _frameSpeed6 = this.getModifiedSpeed() * delta;
                this.nextPosition.multiplyScalar(_frameSpeed6).add(this.mesh.position);
            }
        }
    }, {
        key: "RotateToDesiredDirection",
        value: function RotateToDesiredDirection(delta) {
            // Rotate body
            var PI2 = Math.PI * 2;
            var deltaRotY = (this.targetRotY - this.mesh.rotation.y) % PI2;
            var frameRotY = this.rotSpeedY * delta;
            if (Math.abs(deltaRotY) < frameRotY) {
                this.mesh.rotation.y = this.targetRotY;
            } else {
                var rotDir = (deltaRotY + PI2) % PI2 > Math.PI ? -1 : 1;
                this.mesh.rotation.y += rotDir * frameRotY;
            }
        }
    }, {
        key: "SetPositionFromNextPosition",
        value: function SetPositionFromNextPosition(delta) {
            this.nextPosition = GameStore.GameInstance.levelManager.checkRoomCollision(this.mesh.position, this.nextPosition, this.customCollisionBoundsForWall, this.team === GameStore.Teams.Collaborators);

            var changeHeightAllowed = this.ChangeHeight(this.nextPosition.x, this.nextPosition.z, delta);

            // Only allow AI to move forward if the step height was allowed
            if (changeHeightAllowed) {
                this.mesh.position.x = this.nextPosition.x;
                this.mesh.position.z = this.nextPosition.z;

                return true;
            }

            return false;
        }
    }, {
        key: "Update",
        value: function Update(time, delta) {
            this.updateBuffs(delta);

            // This whole Update is temp
            // Rough code to control spawn and walk animations for the stamps
            // Also makes the stamp ai kamikaze into enemy ai
            if (!this.spawnAnimFinished) {
                this.HandleSpawnAnim(delta);
            } else {
                var deltaRotZ = this.uprightRotZ - this.mesh.rotation.z;
                var rotSpeed = Math.PI / 2;
                var frameRotSpeed = rotSpeed * delta;
                var closestSimpleAi = this.FindEnemyTarget();
                var closestSimpleAiDist = closestSimpleAi !== undefined ? this.mesh.position.distanceTo(closestSimpleAi.mesh.position) : Infinity;

                if (this.throwAnimT > 0) {
                    // If throwing then perform flip
                    this.mesh.rotation.z = this.uprightRotZ + Math.PI * 4 * this.throwAnimT;

                    this.throwAnimT -= delta;
                } else if (this.pounceAnimT > 0) {
                    this.pounceAnimT -= delta;
                    var animT = this.pounceAnimT / this.startPounceAnimT;

                    if (animT > .5) {} else if (animT > .35) {
                        this.mesh.position.y += delta * 16;
                    } else if (animT > .15) {
                        if (closestSimpleAi !== undefined) {
                            this.mesh.position.lerp(closestSimpleAi.mesh.position, Math.min(1, delta * this.pounceSpeed));
                            this.nextPosition.copy(this.mesh.position);
                            this.CopyLastPositionAndVelocity();
                        }
                    }

                    this.mesh.rotation.x *= .9;

                    var peakRotT = .15;
                    if (animT > peakRotT) {
                        var rotT = this.pounceAnimT / (this.startPounceAnimT - peakRotT);
                        this.mesh.rotation.y += delta * (1 - rotT * rotT) * Math.PI * this.pounceRotSpeed;
                    } else {
                        var _rotT = animT / peakRotT;
                        this.mesh.rotation.y += delta * _rotT * Math.PI * this.pounceRotSpeed;
                    }

                    if (animT < .35 && animT > .1) {
                        this.doPounceDamage(delta);
                    }
                } else if (this.slideAnimT > 0) {
                    this.slideAnimT -= delta;

                    this.targetRotY = Math.atan2(this.slideVel.x, this.slideVel.z);
                    this.mesh.rotation.x += delta * Math.PI * 10;
                    this.mesh.rotation.z *= .9;

                    this.RotateToDesiredDirection(delta);

                    this.nextPosition.add(this.slideVel.clone().multiplyScalar(delta));

                    this.CopyLastPositionAndVelocity();
                    this.SetPositionFromNextPosition(delta);

                    this.doSlideDamage(delta);
                } else if (Math.abs(deltaRotZ) < frameRotSpeed) {
                    this.mesh.rotation.z = this.uprightRotZ;
                } else {
                    this.mesh.rotation.z += frameRotSpeed * Math.sign(deltaRotZ);
                }

                this.remainingAttackCooldown -= delta;

                if (closestSimpleAi !== undefined && closestSimpleAiDist < this.distanceToPounce && this.remainingAttackCooldown <= 0) {
                    if (Math.random() < .66) {
                        if (this.slideAnimT <= 0) {
                            this.slideAnimT = this.startSlideAnimT;
                            this.slideVel = closestSimpleAi.mesh.position.clone().sub(this.mesh.position).normalize().multiplyScalar(this.slideSpeed);
                            this.remainingAttackCooldown = this.attackCooldown + this.startSlideAnimT;
                        }
                    } else {
                        if (this.pounceAnimT <= 0) {
                            this.pounceAnimT = this.startPounceAnimT;
                            this.remainingAttackCooldown = this.attackCooldown + this.startPounceAnimT;
                        }
                    }
                } else if (this.pounceAnimT <= 0 && this.slideAnimT <= 0) {
                    this.direction = Utils.GetForwardVector(this.mesh);

                    this.FindDesiredNextPosition(delta);

                    this.AddAvoidanceToNextPosition(delta);
                    this.AddKnockbackToNextPosition(delta);

                    this.CopyLastPositionAndVelocity();

                    this.SetPositionFromNextPosition(delta);

                    this.CalcVelocityAndAcceleration();

                    if (this.velocity.length() > 0) {
                        this.angleT += this.walkTSpeed * delta;

                        if (closestSimpleAi !== undefined) {
                            // targetRotY set to enemy direction
                            var targetDir = closestSimpleAi.mesh.position.clone();
                            targetDir.sub(this.mesh.position);
                            this.targetRotY = Math.atan2(targetDir.x, targetDir.z) + Math.PI / 2;
                        } else {
                            // targetRotY set to velocity direction
                            this.targetRotY = Math.atan2(this.velocity.x, this.velocity.z) + Math.PI / 2;
                        }

                        this.mesh.rotation.x = this.walkRockAngle * Math.sin(this.angleT);
                    } else {
                        this.angleT += this.standTSpeed * delta;

                        this.mesh.rotation.x = this.walkRockAngle * Math.sin(this.angleT);
                    }

                    this.RotateToDesiredDirection(delta);
                }
            }

            _get(AiStamp.prototype.__proto__ || Object.getPrototypeOf(AiStamp.prototype), "Update", this).call(this, time, delta);
        }
    }, {
        key: "upgradeToThrower",
        value: function upgradeToThrower() {
            this.isUpgradedThrower = true;

            this.size = 1.5; // Temp size increase to show uniqueness
            this.mesh.scale.set(this.size, this.size, this.size);
        }
    }, {
        key: "throw",
        value: function _throw(targetPos) {
            var blockSize = GameStore.GameInstance.world.blockSize;
            var radius = this.throwBlockSize * GameStore.GameInstance.world.blockSize;

            var dataArray = GameStore.GameInstance.chunkManager.extractSphere(this.mesh.position.x, this.mesh.position.y - this.offset.y, this.mesh.position.z, radius);

            if (dataArray !== undefined) {
                var offset = -radius;

                this.throwSound.Play();

                this.throwChunk = this.createChunkFromArray(dataArray, Math.round(2 * radius / blockSize), {
                    x: offset,
                    y: offset,
                    z: offset
                });

                GameStore.GameInstance.projectileManager.GetProjectile(this.projectileType, this.mesh.position.x, this.mesh.position.y + 2, this.mesh.position.z, targetPos, this);

                this.throwAnimT = this.startThrowAnimT;
            }
        }
    }, {
        key: "delayedDestroy",
        value: function delayedDestroy() {
            this.throwSound.Destroy();
            this.deleteSound.Destroy();

            _get(AiStamp.prototype.__proto__ || Object.getPrototypeOf(AiStamp.prototype), "delayedDestroy", this).call(this);
        }
    }, {
        key: "Die",
        value: function Die(playDeathSound) {
            this.removeBuffs();

            this.removeOutline();

            _get(AiStamp.prototype.__proto__ || Object.getPrototypeOf(AiStamp.prototype), "Die", this).call(this, playDeathSound);
        }
    }, {
        key: "removeOutline",
        value: function removeOutline() {
            if (this.isEnemy) {
                var index = GameStore.GameInstance.outlinePass.selectedObjects.indexOf(this.mesh);
                if (index !== -1) {
                    GameStore.GameInstance.outlinePass.selectedObjects.splice(index, 1);
                }
            }
        }
    }, {
        key: "DoDamage",
        value: function DoDamage(damage, team, hitPosition, forceMass, forceLifetime, attacker) {
            if (team !== this.team && damage < this.health) {
                this.breakMesh(damage / this.maxHealth);
            }

            _get(AiStamp.prototype.__proto__ || Object.getPrototypeOf(AiStamp.prototype), "DoDamage", this).call(this, damage, team, hitPosition, forceMass, forceLifetime, attacker);
        }
    }]);

    return AiStamp;
}(AiBase);

module.exports = AiStamp;

var AiGord = function (_AiStamp) {
    _inherits(AiGord, _AiStamp);

    function AiGord(x, y, z, params) {
        _classCallCheck(this, AiGord);

        var _this7 = _possibleConstructorReturn(this, (AiGord.__proto__ || Object.getPrototypeOf(AiGord)).call(this, x, y, z, params));

        _this7.team = GameStore.Teams.Threat;

        _this7.speed = 4;
        _this7.mass = 160;
        _this7.aggroDistance = 60;
        _this7.deathTime = 250;
        _this7.voxelChance = 0.06;
        _this7.voxelSize = 1.25;
        _this7.stepHeight = 30; // Maximum allowed step height, anything higher than this will block movement
        _this7.heightSpeed = 10; // Speed to lerp character up or down for changes to height

        var randomAngle = Math.random() * Math.PI * 2;
        _this7.direction.x = Math.sin(randomAngle);
        _this7.direction.y = 0;
        _this7.direction.z = Math.cos(randomAngle);
        _this7.direction.normalize();
        _this7.desiredDirection = _this7.direction.clone();

        _this7.spawnAnimFinished = true;
        _this7.isUpgradedThrower = true;
        _this7.walkRockAngle = Math.PI / 12;

        _this7.projectileType = Projectile.EProjectileType.GordThrow;

        // Setup damage sounds
        _this7.damagedSound.LoadSound("sound/drone_damage-01.wav", 60, 0.5);
        _this7.damagedSound.LoadSound("sound/drone_damage-02.wav", 60, 0.5);
        _this7.damagedSound.LoadSound("sound/drone_damage-03.wav", 60, 0.5);
        _this7.damagedSound.LoadSound("sound/drone_damage-04.wav", 60, 0.5);
        _this7.damagedSound.LoadSound("sound/drone_damage-05.wav", 60, 0.5);
        if (_this7.damagedSound.Object3D) {
            _this7.mesh.add(_this7.damagedSound.Object3D);
        }

        // Setup death sounds
        _this7.destroyedSound.LoadSound("sound/drone_death-01.wav", 90, 0.5);
        _this7.destroyedSound.LoadSound("sound/drone_death-02.wav", 90, 0.5);
        _this7.destroyedSound.LoadSound("sound/drone_death-03.wav", 90, 0.5);
        _this7.destroyedSound.LoadSound("sound/drone_death-07.wav", 90, 0.5);
        if (_this7.destroyedSound.Object3D) {
            _this7.mesh.add(_this7.destroyedSound.Object3D);
        }

        _this7.gatherer = new HistoryManager.HistoryGather(_this7, _this7.customCollisionBounds);
        return _this7;
    }

    _createClass(AiGord, [{
        key: "Init",
        value: function Init(x, y, z) {
            this.maxHealth = 500;
            this.voxName = "enemy_gord_retail_1";
            this.size = 2;
            this.offset = { x: 0, y: 4.5, z: 0 };
            this.xp = 20;
            this.customCollisionBounds = new THREE.Box3(new THREE.Vector3(-4, -6, -4), new THREE.Vector3(4, 3, 4));
            this.customCollisionBoundsForWall = new THREE.Box3(new THREE.Vector3(-6, -6, -6), new THREE.Vector3(6, 3, 6));

            // Setup idle sound
            if (this.idleSound !== undefined && this.idleSound.fileName === "") {
                this.idleSound.LoadSound("sound/gord_buzz.mp3", 90, 0.6, true, true, SoundSystem.CHANNELS.ENEMY_IDLES_BIG);
                if (this.idleSound.Object3D) {
                    this.mesh.add(this.idleSound.Object3D);
                }
            }

            _get(AiGord.prototype.__proto__ || Object.getPrototypeOf(AiGord.prototype), "Init", this).call(this, x, y, z);
        }
    }, {
        key: "setActive",
        value: function setActive(isActive) {
            _get(AiGord.prototype.__proto__ || Object.getPrototypeOf(AiGord.prototype), "setActive", this).call(this, isActive);

            if (isActive) {
                this.idleSound.FadeIn(1.0, 0.6);
            }
        }
    }, {
        key: "setupGameplayPropertiesFromVoxels",
        value: function setupGameplayPropertiesFromVoxels(canvasArea) {
            this.distanceToPounce = -1; // Does not pounce when near enemy
            this.pounceAnimT = 0;
            this.slideAnimT = 0;
            this.remainingAttackCooldown = 3;
            this.attackCooldown = 1;
        }
    }, {
        key: "setupBuffsFromVoxels",
        value: function setupBuffsFromVoxels(canvasArea, params) {
            // Do nothing, override parent
        }
    }, {
        key: "updateBuffs",
        value: function updateBuffs(delta) {
            // Do nothing, override parent
        }
    }, {
        key: "removeBuffs",
        value: function removeBuffs() {
            // Do nothing, override parent
        }
    }, {
        key: "breakMesh",
        value: function breakMesh(amount) {
            // Do nothing, override parent
        }
    }]);

    return AiGord;
}(AiStamp);

module.exports.AiGord = AiGord;

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var THREE = __webpack_require__(1);
var GameStore = __webpack_require__(0);
var Utils = __webpack_require__(2);
var SoundSystem = __webpack_require__(7);
var AiManager = __webpack_require__(12);
var WeaponBB = __webpack_require__(165);
var TychoCommon = __webpack_require__(10);
var AiBotBase = __webpack_require__(53);

var up = new THREE.Vector3(0, 1, 0);
var EBotType = TychoCommon.constants.botType;

var AiBitBot = function (_AiBotBase) {
    _inherits(AiBitBot, _AiBotBase);

    function AiBitBot(x, y, z, params) {
        _classCallCheck(this, AiBitBot);

        var _this = _possibleConstructorReturn(this, (AiBitBot.__proto__ || Object.getPrototypeOf(AiBitBot)).call(this, x, y, z, params));

        _this.team = GameStore.Teams.Collaborators;
        _this.voxName = "bit_bot";
        _this.speed = 30;
        _this.acceleration = 26;
        _this.deceleration = 45;
        _this.maxSpeed = 35; // Used to limit speed of AI after being pushed
        _this.maxKnockbackSpeed = 40;
        _this.maxKnockbackInitialSpeed = 75;
        _this.size = 1.25;
        _this.mass = 50;
        _this.maxHealth = Infinity;
        _this.deathTime = 1;
        _this.offset = { x: 0, y: 1, z: 0 };
        _this.heightSpeed = 30;
        _this.aggroDistance = 40;
        _this.aggroHeightDeltaMaximum = 10;
        _this.shootCooldown = 0.7;
        _this.weapon = new WeaponBB.WeaponBBSimple();

        _this.voxelSize = 2.25;

        var randomAngle = Math.random() * Math.PI * 2;
        _this.direction.x = Math.sin(randomAngle);
        _this.direction.y = 0;
        _this.direction.z = Math.cos(randomAngle);
        _this.direction.normalize();
        _this.desiredDirection = _this.direction.clone();
        _this.turnSpeed = 3 * Math.PI; // Yaw rotation speed in radians

        _this.customCollisionBounds = new THREE.Box3(new THREE.Vector3(-2, -2, -2), new THREE.Vector3(2, 2, 2));
        _this.customCollisionBoundsForWall = new THREE.Box3(new THREE.Vector3(-5, -2, -5), new THREE.Vector3(5, 2, 5));

        // BitBot specific
        _this.timerSoundLength = 20;
        _this.timerSoundFirstSetLength = 5;
        _this.hitRecoveryTime = 0.3;
        _this.currenthitRecoveryTime = 1.2; // Starting with recovery time for dramatic bad bit bot entry
        _this.crashedDown = false;

        if (params !== undefined) {
            _this.totalBits = params.bitsBountyPot;
        }

        var lifetime = GameStore.GameInstance.bitBotManager.getBotLifetime(EBotType.bitBot);
        _this.remainingTimerSoundOffset = lifetime > _this.timerSoundLength ? lifetime % _this.timerSoundFirstSetLength : -1;

        _this.timedOut = false;
        _this.startDodgeDistance = 5; // Projectile must be this close to try & avoid
        _this.dodgeTime = 0.5;
        _this.dodgeTimeRemaining = 0;
        _this.dodgePos = new THREE.Vector3();
        _this.dodgeObj = undefined;
        _this.dodgeDistance = 7;
        _this.isDodging = false;
        _this.followPlayerDistance = 13;
        _this.followEnemyDistance = 22;
        _this.bitsBountyPot = params !== undefined && params.bitsBountyPot !== undefined ? params.bitsBountyPot : undefined;
        _this.projectileTypeToAvoid = "SimpleAi";
        _this.switchTargetIfCloserBy = 11; // Switch enemy target if another enemy is this much closer or greater

        _this.Init(x, y, z);

        // Setup damage sounds
        _this.damagedSound.LoadSound("sound/drone_damage-01.wav", 60, 0.5);
        _this.damagedSound.LoadSound("sound/drone_damage-02.wav", 60, 0.5);
        _this.damagedSound.LoadSound("sound/drone_damage-03.wav", 60, 0.5);
        _this.damagedSound.LoadSound("sound/drone_damage-04.wav", 60, 0.5);
        _this.damagedSound.LoadSound("sound/drone_damage-05.wav", 60, 0.5);
        if (_this.damagedSound.Object3D) {
            _this.mesh.add(_this.damagedSound.Object3D);
        }

        // Setup destroy sounds
        _this.destroyedFailSound = new SoundSystem.SoundShader();
        _this.destroyedFailSound.LoadSound("sound/bitbot_fail.mp3", 60, 1);
        if (_this.destroyedFailSound.Object3D) {
            _this.mesh.add(_this.destroyedFailSound.Object3D);
        }

        _this.destroyedSuccessSound = new SoundSystem.SoundShader();
        _this.destroyedSuccessSound.LoadSound("sound/bitbot_suceed.mp3", 60, 1);
        if (_this.destroyedSuccessSound.Object3D) {
            _this.mesh.add(_this.destroyedSuccessSound.Object3D);
        }

        // Setup timer sound
        _this.timerSound = new SoundSystem.SoundShader();
        _this.timerSound.LoadSound("sound/bitbot_timer.mp3", 60, 1);
        if (_this.timerSound.Object3D) {
            _this.mesh.add(_this.timerSound.Object3D);
        }

        // Setup entry sound
        _this.entrySound = new SoundSystem.SoundShader();
        _this.entrySound.LoadSound("sound/bitbot_entry.mp3", 60, 1);
        if (_this.entrySound.Object3D) {
            _this.mesh.add(_this.entrySound.Object3D);
        }

        // Setup particle spawner
        _this.emitFloaterComp.intensity = 100;
        _this.emitFloaterComp.useBitColors = true;

        setTimeout(function () {
            if (_this.isActive) {
                // Entry landing sound
                if (_this.entrySound) {
                    _this.entrySound.Play();
                }
            }
        }, 200);
        return _this;
    }

    _createClass(AiBitBot, [{
        key: "setBotTransaction",
        value: function setBotTransaction(transaction) {
            this.totalBits = transaction.bitsCount;

            _get(AiBitBot.prototype.__proto__ || Object.getPrototypeOf(AiBitBot.prototype), "setBotTransaction", this).call(this, transaction);
        }
    }, {
        key: "RemoveFromWorld",
        value: function RemoveFromWorld(playDeathSound, bountyAmount) {
            var fadeEmissive = false;
            var useEmissiveForDiffuse = true;
            var bitColors = undefined;

            // Play death sound
            if (!this.timedOut) {
                if (playDeathSound) {
                    this.destroyedFailSound.Play();
                }

                useEmissiveForDiffuse = false;
                fadeEmissive = true;
            } else {
                if (playDeathSound) {
                    this.destroyedSuccessSound.Play();
                }

                bitColors = this.emitFloaterComp.intensity > 0 ? this.emitFloaterComp.bitColors : undefined;
            }

            if (this.emitFloaterComp && this.emitFloaterComp.useBitColors) {
                this.voxelChance *= 2;
            }

            _get(AiBitBot.prototype.__proto__ || Object.getPrototypeOf(AiBitBot.prototype), "RemoveFromWorld", this).call(this, playDeathSound, bountyAmount, useEmissiveForDiffuse, fadeEmissive, bitColors);
        }
    }, {
        key: "DrawDebugDirectionLines",
        value: function DrawDebugDirectionLines(draw) {
            if (draw) {
                var debugLine = Utils.CreateDebugLine(this.mesh.position.clone(), this.mesh.position.clone().add(this.direction.clone().multiplyScalar(5)), 0xffffff);
                this.debugLines.push(debugLine);

                var lineStart = this.mesh.position.clone();
                debugLine = Utils.CreateDebugLine(lineStart, lineStart.clone().add(this.desiredDirection.clone().multiplyScalar(5)), 0xff0000);
                this.debugLines.push(debugLine);
            }
        }
    }, {
        key: "FindDodgePos",
        value: function FindDodgePos(delta) {
            // We'll try left or right first
            // then we'll try the other
            var tryAgain = true;
            for (var i = 0; i < 2 && tryAgain; i++) {
                // Dodge around projectile
                this.dodgePos.copy(this.mesh.position).sub(this.dodgeObj.mesh.position);
                this.dodgePos.y = 0;

                var frameSpeed = this.currentSpeed * delta;

                this.dodgePos.applyAxisAngle(up, this.dodgeRight * 0.52); // Rotate dir 30 degrees around projectile

                this.dodgePos.add(this.dodgeObj.mesh.position); // We have the desired dodge pos

                if (this.currentSpeed > this.speed) {
                    this.HandleDeceleration(delta);
                } else if (this.currentSpeed < this.speed) {
                    this.HandleAcceleration(delta);
                }

                this.nextPosition.copy(this.dodgePos).sub(this.mesh.position); // Direction toward desired dodge pos
                this.nextPosition.multiplyScalar(frameSpeed).add(this.mesh.position); // Move toward desired dodge pos
                this.nextPosition.y = this.mesh.position.y;

                var checkedPosition = GameStore.GameInstance.levelManager.checkRoomCollision(this.mesh.position, this.nextPosition, this.customCollisionBoundsForWall, this.team === GameStore.Teams.Collaborators);

                if (checkedPosition.equals(this.nextPosition)) {
                    tryAgain = false;
                } else {
                    // Dodge position was OOB, trying again in opposite direction
                    this.dodgeRight *= -1;
                }
            }
        }

        // Given an AI will return true or false if this AI should attempt to avoid

    }, {
        key: "ShouldAvoid",
        value: function ShouldAvoid(obstacleAI) {
            // If Bad Bit Bot
            if (this.team === GameStore.Teams.Threat) {
                // Do not avoid the subbot
                if (obstacleAI.type === AiManager.EAiType.SubBot) {
                    return false;
                }
                // Avoid everything else
                return true;
            }

            // Avoid everything
            return true;
        }
    }, {
        key: "ShouldAvoidProjectile",
        value: function ShouldAvoidProjectile(proj) {
            var meshDelta = proj.mesh.position.clone().sub(this.nextPosition);
            var meshDeltaN = meshDelta.clone().normalize();
            var dot = proj.direction.dot(meshDeltaN);
            var roughlyMyDirectionDot = -0.85;

            if (dot < roughlyMyDirectionDot) {
                var project = meshDelta.clone().projectOnVector(proj.direction);
                var dist = project.distanceTo(meshDelta);

                return dist;
            }

            return undefined;
        }
    }, {
        key: "FindProjectileToAvoid",
        value: function FindProjectileToAvoid(delta) {
            var _this2 = this;

            this.dodgeTimeRemaining -= delta;

            if (this.currenthitRecoveryTime > 0) {
                // Don't dodge if getting knocked back
                return false;
            }

            if (this.dodgeTimeRemaining <= 0) {
                var willDodge = false;

                // Move out of the path of nearest enemy projectile
                if (GameStore.GameInstance.projectileManager.projectileList[this.projectileTypeToAvoid] !== undefined) {
                    var nearestProjDist = Infinity;

                    GameStore.GameInstance.projectileManager.projectileList[this.projectileTypeToAvoid].usedList.forEach(function (proj) {
                        var dist = _this2.ShouldAvoidProjectile(proj);

                        if (dist !== undefined && dist < _this2.startDodgeDistance && dist < nearestProjDist) {
                            nearestProjDist = dist;
                            _this2.dodgeObj = proj;

                            willDodge = true;
                        }
                    });

                    if (willDodge) {
                        this.dodgeTimeRemaining = this.dodgeTime;

                        var projRightDir = Utils.GetRightVector(this.dodgeObj.mesh);
                        var dot = projRightDir.dot(this.direction);

                        this.dodgeRight = dot > 0 ? -1 : 1;

                        this.FindDodgePos(delta);
                    }
                }

                return willDodge;
            } else {
                if (this.ShouldAvoidProjectile(this.dodgeObj)) {
                    // If it looks like I'm still going to get hit so calculate new dodgePos
                    this.FindDodgePos(delta);
                } else {
                    // Not going to get hit so don't calculate new direction to dodge, just continue moving in previous dodgeDir now that its clear
                    var frameSpeed = this.currentSpeed * delta;
                    this.nextPosition.copy(this.dodgePos).sub(this.mesh.position); // Direction toward desired dodge pos
                    this.nextPosition.multiplyScalar(frameSpeed).add(this.mesh.position); // Move toward desired dodge pos
                    this.nextPosition.y = this.mesh.position.y;
                }

                return true;
            }
        }

        /**
         * @description Process damage on AI
         * @param {number} damage Amount of damage to deal
         * @param {Object} [team] Attackers team
         * @param {Object} [hitPosition] A Vector3 for the damage position
         * @param {number} [forceMass] Amount of force for knockback
         * @param {number} [forceLifetime] Lifetime of knockback
         */

    }, {
        key: "DoDamage",
        value: function DoDamage(damage, team, hitPosition, forceMass, forceLifetime, attacker) {
            this.currenthitRecoveryTime = this.hitRecoveryTime;
            _get(AiBitBot.prototype.__proto__ || Object.getPrototypeOf(AiBitBot.prototype), "DoDamage", this).call(this, damage, team, hitPosition, forceMass, forceLifetime, attacker);
        }
    }, {
        key: "FindDesiredNextPosition",
        value: function FindDesiredNextPosition(delta) {
            // Copy vector instead of clone for performance
            this.nextPosition.copy(this.mesh.position);

            this.currenthitRecoveryTime -= delta;
            this.isDodging = this.FindProjectileToAvoid(delta);

            if (!this.isDodging && this.currenthitRecoveryTime <= 0) {
                // Only pursue if not recently hit, causes glitchy movements
                this.FindEnemyTarget();
                var enemyDist = this.enemyTarget === undefined ? 0 : this.mesh.position.distanceTo(this.enemyTarget.mesh.position);
                var playerDist = this.enemyTarget === undefined ? this.mesh.position.distanceTo(GameStore.GameInstance.player.mesh.position) : 0;

                if (this.enemyTarget !== undefined) {
                    if (enemyDist < this.followEnemyDistance) {
                        this.HandleDeceleration(delta);
                    } else {
                        this.HandleAcceleration(delta);
                    }

                    // Move toward enemy
                    this.nextPosition.x = this.mesh.position.x + this.direction.x * this.currentSpeed * delta;
                    this.nextPosition.y = this.mesh.position.y;
                    this.nextPosition.z = this.mesh.position.z + this.direction.z * this.currentSpeed * delta;
                } else if (this.team === GameStore.Teams.Collaborators) {
                    if (playerDist < this.followPlayerDistance) {
                        this.HandleDeceleration(delta);
                    } else {
                        this.HandleAcceleration(delta);
                    }

                    // Move toward player
                    this.nextPosition.x = this.mesh.position.x + this.direction.x * this.currentSpeed * delta;
                    this.nextPosition.y = this.mesh.position.y;
                    this.nextPosition.z = this.mesh.position.z + this.direction.z * this.currentSpeed * delta;
                }
            }
        }
    }, {
        key: "FindEnemyTarget",
        value: function FindEnemyTarget() {
            if (this.team === GameStore.Teams.Collaborators) {
                // Find nearest enemy
                var aiList = GameStore.GameInstance.aiManager.aiList;
                var nearestEnemyDist = Infinity;
                var nearestEnemy = undefined;

                for (var i = 0; i < aiList.length; i++) {
                    // Don't target self or stamps
                    if (this !== aiList[i] && aiList[i].type !== AiManager.EAiType.Stamp) {
                        if (this.team !== aiList[i].team) {
                            var enemyDist = this.mesh.position.distanceTo(aiList[i].mesh.position);
                            var enemyHeightDelta = Math.abs(aiList[i].mesh.position.y - this.mesh.position.y);
                            var enemyWithinHeightDelta = enemyHeightDelta <= this.aggroHeightDeltaMaximum;
                            if (enemyWithinHeightDelta && enemyDist < nearestEnemyDist && enemyDist <= this.aggroDistance) {
                                nearestEnemyDist = enemyDist;
                                nearestEnemy = aiList[i];
                            }
                        }
                    }
                }

                var currentEnemyDist = this.enemyTarget !== undefined && this.enemyTarget.mesh !== undefined ? this.mesh.position.distanceTo(this.enemyTarget.mesh.position) : Infinity;

                // Is this a new enemy and if so is it worth switching to?
                if (nearestEnemy !== undefined && nearestEnemy !== this.enemyTarget) {
                    if (this.enemyTarget === undefined) {
                        // YES if we don't have an enemy
                        this.enemyTarget = nearestEnemy;
                        currentEnemyDist = nearestEnemyDist;
                    } else if (currentEnemyDist - nearestEnemyDist > this.switchTargetIfCloserBy) {
                        //  YES if closer by a lot
                        this.enemyTarget = nearestEnemy;
                        currentEnemyDist = nearestEnemyDist;
                    }
                }

                // Make sure the current enemy is still a valid target
                if (this.enemyTarget !== undefined) {
                    // Is the enemy still alive?
                    if (this.enemyTarget.dead) {
                        this.enemyTarget = undefined;
                        return this.enemyTarget;
                    }

                    var _enemyHeightDelta = Math.abs(this.enemyTarget.mesh.position.y - this.mesh.position.y);
                    var _enemyWithinHeightDelta = _enemyHeightDelta <= this.aggroHeightDeltaMaximum;

                    // Is the enemy close enough to be a target?
                    if (!_enemyWithinHeightDelta || currentEnemyDist > this.aggroDistance) {
                        this.enemyTarget = undefined;
                    }

                    return this.enemyTarget;
                } else {
                    // No target
                    return this.enemyTarget;
                }
            } else {
                return _get(AiBitBot.prototype.__proto__ || Object.getPrototypeOf(AiBitBot.prototype), "FindEnemyTarget", this).call(this);
            }
        }
    }, {
        key: "FindDesiredDirection",
        value: function FindDesiredDirection() {
            if (this.enemyTarget !== undefined && this.enemyTarget.mesh !== undefined) {
                this.desiredDirection.x = this.enemyTarget.mesh.position.x;
                this.desiredDirection.y = this.enemyTarget.mesh.position.y;
                this.desiredDirection.z = this.enemyTarget.mesh.position.z;

                this.desiredDirection.sub(this.lastPosition);
            } else if (this.isDodging) {
                // Look in move/dodge direction if dodging
                this.desiredDirection.x = this.nextPosition.x;
                this.desiredDirection.y = this.nextPosition.y;
                this.desiredDirection.z = this.nextPosition.z;

                this.desiredDirection.sub(this.lastPosition);
            } else if (this.team === GameStore.Teams.Collaborators) {
                // Look at player if not moving and no enemy
                this.desiredDirection.x = GameStore.GameInstance.player.mesh.position.x;
                this.desiredDirection.y = GameStore.GameInstance.player.mesh.position.y;
                this.desiredDirection.z = GameStore.GameInstance.player.mesh.position.z;

                this.desiredDirection.sub(this.mesh.position);
            }

            this.desiredDirection.y = 0;
            this.desiredDirection.normalize();
        }
    }, {
        key: "CrashDown",
        value: function CrashDown() {
            this.crashedDown = true;
            var blockSize = GameStore.GameInstance.world.blockSize;
            var radius = 4 * GameStore.GameInstance.world.blockSize;

            var dataArray = GameStore.GameInstance.chunkManager.extractSphere(this.mesh.position.x, this.mesh.position.y - this.offset.y, this.mesh.position.z, radius);

            if (dataArray !== undefined) {
                var offset = -radius;

                this.explodeChunk = this.createChunkFromArray(dataArray, Math.round(2 * radius / blockSize), {
                    x: offset,
                    y: offset,
                    z: offset
                });

                this.explodeChunk.Explode(this.mesh.position);
            }
        }
    }, {
        key: "Update",
        value: function Update(time, delta) {
            if (!this.dead) {
                if (this.team === GameStore.Teams.Collaborators) {
                    // Loop the first 5 seconds if lifetime is long than the timer sound
                    var lifetime = GameStore.GameInstance.bitBotManager.getBotLifetime(EBotType.bitBot);
                    var isLivesLongerThanSoundClip = lifetime > this.timerSoundLength;
                    if (this.remainingTimerSoundOffset > 0 || isLivesLongerThanSoundClip) {
                        this.remainingTimerSoundOffset -= delta;

                        if (this.remainingTimerSoundOffset <= 0) {
                            this.remainingTimerSoundOffset = isLivesLongerThanSoundClip ? lifetime % this.timerSoundFirstSetLength : -1;

                            if (this.remainingTimerSoundOffset > 3 || !isLivesLongerThanSoundClip) {
                                if (this.timerSound) {
                                    this.timerSound.Stop();

                                    // Only play beep if less than 30s of lifetime remain.
                                    if (lifetime <= 30) {
                                        this.timerSound.Play();
                                    }
                                }
                            }
                        }
                    }
                } else if (!this.crashedDown && this.mesh.position.y === this.desiredHeight) {
                    // If landed then crash
                    this.CrashDown();
                }

                this.direction = Utils.GetForwardVector(this.mesh);

                this.FindDesiredNextPosition(delta);

                this.AddAvoidanceToNextPosition(delta);
                this.AddKnockbackToNextPosition(delta);

                this.CopyLastPositionAndVelocity();

                this.SetPositionFromNextPosition(delta);

                this.CalcVelocityAndAcceleration();

                this.FindDesiredDirection();

                this.RotateToDesiredDirection(delta);

                // Shooting
                this.remainingShootCooldown -= delta;
                if (this.ShouldFire()) {
                    this.FireWeapon();
                }

                this.weapon.Update(time, delta);
            }

            _get(AiBitBot.prototype.__proto__ || Object.getPrototypeOf(AiBitBot.prototype), "Update", this).call(this, time, delta);
        }
    }, {
        key: "SetPositionFromNextPosition",
        value: function SetPositionFromNextPosition(delta) {
            this.nextPosition = GameStore.GameInstance.levelManager.checkRoomCollision(this.mesh.position, this.nextPosition, this.customCollisionBoundsForWall, this.team === GameStore.Teams.Collaborators);

            var changeHeightAllowed = this.ChangeHeight(this.nextPosition.x, this.nextPosition.z, delta);

            // Only allow AI to move forward if the step height was allowed
            if (changeHeightAllowed) {
                this.mesh.position.x = this.nextPosition.x;
                this.mesh.position.z = this.nextPosition.z;

                return true;
            }

            return false;
        }
    }, {
        key: "Die",
        value: function Die(playDeathSound) {
            if (!this.dead) {
                // Stop timer sound
                if (this.timerSound) {
                    this.timerSound.Stop();
                }

                if (!this.timedOut) {
                    GameStore.GameInstance.xpManager.awardXp(this.totalBits);
                }

                _get(AiBitBot.prototype.__proto__ || Object.getPrototypeOf(AiBitBot.prototype), "Die", this).call(this, playDeathSound);
            }
        }
    }, {
        key: "delayedDestroy",
        value: function delayedDestroy() {
            _get(AiBitBot.prototype.__proto__ || Object.getPrototypeOf(AiBitBot.prototype), "delayedDestroy", this).call(this);

            if (this.destroyedFailSound !== undefined) {
                this.destroyedFailSound.Destroy();
            }

            if (this.destroyedSuccessSound !== undefined) {
                this.destroyedSuccessSound.Destroy();
            }

            if (this.timerSound !== undefined) {
                this.timerSound.Destroy();
            }

            if (this.entrySound !== undefined) {
                this.entrySound.Destroy();
            }

            this.destroyedFailSound = undefined;
            this.destroyedSuccessSound = undefined;
            this.timerSound = undefined;
            this.entrySound = undefined;
        }
    }, {
        key: "setActive",
        value: function setActive(isActive) {
            if (isActive) {
                // Entry landing sound
                if (this.entrySound) {
                    this.entrySound.Play();
                }
            }

            _get(AiBitBot.prototype.__proto__ || Object.getPrototypeOf(AiBitBot.prototype), "setActive", this).call(this, isActive);
        }
    }]);

    return AiBitBot;
}(AiBotBase);

module.exports = AiBitBot;

var AiBadBitBot = function (_AiBitBot) {
    _inherits(AiBadBitBot, _AiBitBot);

    function AiBadBitBot(x, y, z, params) {
        _classCallCheck(this, AiBadBitBot);

        var _this3 = _possibleConstructorReturn(this, (AiBadBitBot.__proto__ || Object.getPrototypeOf(AiBadBitBot)).call(this, x, y, z, params));

        _this3.team = GameStore.Teams.Threat;

        _this3.totalBits = 0;
        _this3.timedOut = false;
        _this3.aggroDistance = 80;
        _this3.speed = 26;
        _this3.acceleration = 18;
        _this3.deceleration = 80;
        _this3.followEnemyDistance = 16;
        _this3.startDodgeDistance = 7;
        _this3.heightSpeed = 60;
        _this3.mass = 100;
        _this3.aggroHeightDeltaMaximum = 20;
        _this3.shootCooldown = 1;

        _this3.timerSound = undefined;

        _this3.entrySound.Destroy();
        _this3.entrySound = new SoundSystem.SoundShader();
        _this3.entrySound.LoadSound("sound/badbitbot_entry.mp3", 60, 1);

        _this3.emitFloaterComp.intensity = 0;
        _this3.emitFloaterComp.useBitColors = false;

        _this3.projectileTypeToAvoid = "Simple";

        if (params !== undefined && params.username !== undefined) {
            _this3.displayName = params.username;

            _this3.createText(0xf71818);
        }
        return _this3;
    }

    _createClass(AiBadBitBot, [{
        key: "Init",
        value: function Init(x, y, z) {
            this.maxHealth = 360;
            this.voxName = "enemy_bot_retail_1";
            this.xp = 30;

            _get(AiBadBitBot.prototype.__proto__ || Object.getPrototypeOf(AiBadBitBot.prototype), "Init", this).call(this, x, y, z);
        }
    }, {
        key: "Die",
        value: function Die(playDeathSound) {
            if (!this.dead) {
                GameStore.GameInstance.xpManager.awardXp(this.xp);
                _get(AiBadBitBot.prototype.__proto__ || Object.getPrototypeOf(AiBadBitBot.prototype), "Die", this).call(this, playDeathSound);
            }
        }
    }]);

    return AiBadBitBot;
}(AiBitBot);

module.exports.AiBadBitBot = AiBadBitBot;

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Weapon = __webpack_require__(26);
var Projectile = __webpack_require__(21);

module.exports.WeaponBBSimple = function (_Weapon$WeaponSimple) {
    _inherits(_class, _Weapon$WeaponSimple);

    function _class() {
        _classCallCheck(this, _class);

        var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));

        _this.type = Weapon.EWeaponType.SimpleBB;

        // Setup fire soundShader
        _this.fireSoundShader.LoadSound("sound/bitbot_lasershot1.wav", 60, 0.3);
        _this.fireSoundShader.LoadSound("sound/bitbot_lasershot2.wav", 60, 0.3);
        _this.fireSoundShader.LoadSound("sound/bitbot_lasershot3.wav", 60, 0.3);
        _this.fireSoundShader.LoadSound("sound/bitbot_lasershot4.wav", 60, 0.3);

        // Post construct for any overrides
        _this.Init();

        _this.activationList = [_this.spawnDefaultShot()];
        return _this;
    }

    _createClass(_class, [{
        key: "spawnDefaultShot",
        value: function spawnDefaultShot() {
            return new Weapon.ActivationBase({
                activationEventIndex: 0,
                spawnOffset: this.spawnOffset,
                accuracyOffset: this.accuracyOffset,
                projectileType: Projectile.EProjectileType.SimpleBB
            });
        }
    }]);

    return _class;
}(Weapon.WeaponSimple);

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var THREE = __webpack_require__(1);

var GameStore = __webpack_require__(0);
var Utils = __webpack_require__(2);
var SoundSystem = __webpack_require__(7);
var HistoryManager = __webpack_require__(27);
var AiManager = __webpack_require__(12);
var AiBotBase = __webpack_require__(53);

var AiSubBot = function (_AiBotBase) {
    _inherits(AiSubBot, _AiBotBase);

    function AiSubBot(x, y, z, params) {
        _classCallCheck(this, AiSubBot);

        var _this = _possibleConstructorReturn(this, (AiSubBot.__proto__ || Object.getPrototypeOf(AiSubBot)).call(this, x, y, z, params));

        _this.team = GameStore.Teams.Collaborators;
        _this.voxName = "sub_bot";
        _this.speed = 12;
        _this.acceleration = 15;
        _this.deceleration = 30;
        _this.maxSpeed = 35; // Used to limit speed of AI after being pushed
        _this.maxKnockbackSpeed = 40;
        _this.maxKnockbackInitialSpeed = 75;
        _this.size = 1.25;
        _this.mass = 180;
        _this.maxHealth = Infinity;
        _this.deathTime = 1;
        _this.offset = { x: 0, y: 1, z: 0 };
        _this.voxelSize = 2.25;
        _this.markerOffset = new THREE.Vector3(); // Used to move sub bot in figure 8 pattern
        _this.timeAcc = 0;

        _this.selfDestructDamage = 300;
        _this.selfDestructDeathTime = 50; // Time in MS before removing mesh
        _this.selfDestructed = false;
        _this.customCollisionBounds = new THREE.Box3(new THREE.Vector3(-3.5, -5, -2.5), new THREE.Vector3(3.5, 5, 1));
        _this.xp = 0;
        _this.rotateSpeed = 1.5 * Math.PI; // Pitch & roll speed
        _this.turnSpeed = 1.5 * Math.PI; // Yaw rotation speed in radians
        _this.desiredPitchRollDir = new THREE.Vector3(); // Used to avoid clone

        _this.stepHeight = 6; // Maximum allowed step height, anything higher than this will block movement
        _this.heightSpeed = 30; // Speed to lerp character up or down for changes to height

        var randomAngle = Math.random() * Math.PI * 2;
        _this.direction.x = Math.sin(randomAngle);
        _this.direction.y = 0;
        _this.direction.z = Math.cos(randomAngle);
        _this.direction.normalize();
        _this.desiredDirection = _this.direction.clone();

        _this.name = params.name;

        _this.Init(x, y, z);

        // Setup destroy sounds
        _this.destroyedSound = new SoundSystem.SoundShader();
        _this.destroyedSound.LoadSound("sound/bitbot_suceed.mp3", 60, 1);
        if (_this.destroyedSound.Object3D) {
            _this.mesh.add(_this.destroyedSound.Object3D);
        }

        // Setup timer sound
        _this.timerSound = new SoundSystem.SoundShader();
        _this.timerSound.LoadSound("sound/bitbot_timer.mp3", 60, 1);
        if (_this.timerSound.Object3D) {
            _this.mesh.add(_this.timerSound.Object3D);
        }

        // Setup entry sound
        _this.entrySound = new SoundSystem.SoundShader();
        _this.entrySound.LoadSound("sound/subbot_entry.mp3", 60, 1);
        if (_this.entrySound.Object3D) {
            _this.mesh.add(_this.entrySound.Object3D);
        }

        // Setup attack sound
        _this.attackSound = new SoundSystem.SoundShader();
        _this.attackSound.LoadSound("sound/subbot_zap-01.mp3", 60, 1);
        _this.attackSound.LoadSound("sound/subbot_zap-02.mp3", 60, 1);
        _this.attackSound.LoadSound("sound/subbot_zap-03.mp3", 60, 1);
        if (_this.attackSound.Object3D) {
            _this.mesh.add(_this.attackSound.Object3D);
        }

        _this.timerSoundLength = 20;
        _this.timerSoundFirstSetLength = 5;
        var lifetime = GameStore.GameInstance.bitBotManager.getBotLifetime(_this.botType);
        _this.remainingTimerSoundOffset = lifetime > _this.timerSoundLength ? lifetime % _this.timerSoundFirstSetLength : -1;

        // Setup particle spawner
        _this.emitFloaterComp.intensity = 100; // Setup particle spawner
        _this.gatherer = new HistoryManager.HistoryGather(_this, _this.customCollisionBounds);

        _this.SelfDestructRadius = 7;
        _this.killRadius = 4.75;
        _this.maxLeanAngle = Math.PI / 4;
        _this.leanFrequency = 4;
        _this.groundColorCode = 0;
        _this.groundColorDist = 0;
        _this.groundColorChangeDist = 1;

        GameStore.GameInstance.bitBotManager.setShowSubBotMarker(true);

        setTimeout(function () {
            if (_this.isActive) {
                if (_this.idleSound) {
                    _this.idleSound.FadeIn(1.0, 0.6);
                }

                // Entry landing sound
                if (_this.entrySound) {
                    _this.entrySound.Play();
                }
            }
        }, 200);
        return _this;
    }

    _createClass(AiSubBot, [{
        key: "Init",
        value: function Init(x, y, z) {
            // Setup damage sounds
            if (this.damagedSound !== undefined && this.damagedSound.fileName === "") {
                this.damagedSound.LoadSound("sound/drone_damage-01.wav", 60, 0.5);
                this.damagedSound.LoadSound("sound/drone_damage-02.wav", 60, 0.5);
                this.damagedSound.LoadSound("sound/drone_damage-03.wav", 60, 0.5);
                this.damagedSound.LoadSound("sound/drone_damage-04.wav", 60, 0.5);
                this.damagedSound.LoadSound("sound/drone_damage-05.wav", 60, 0.5);
                if (this.damagedSound.Object3D) {
                    this.mesh.add(this.damagedSound.Object3D);
                }
            }

            // Setup idle sound
            if (this.idleSound !== undefined && this.idleSound.fileName === "") {
                this.idleSound.LoadSound("sound/subbot_idle.mp3", 90, 1, true, true);
                if (this.idleSound.Object3D) {
                    this.mesh.add(this.idleSound.Object3D);
                }
            }

            _get(AiSubBot.prototype.__proto__ || Object.getPrototypeOf(AiSubBot.prototype), "Init", this).call(this, x, y, z);

            if (this.voxName !== undefined) {
                this.childChunk = GameStore.GameInstance.voxLoader.GetModel(this.voxName);
            }

            if (this.childChunk.mesh !== undefined) {
                this.childMesh = this.childChunk.mesh;
                this.mesh.add(this.childMesh);
                this.childMesh.rotation.x = 0;
                this.childMesh.rotation.y = 0;
                this.childMesh.rotation.z = 0;
                this.mesh.material.visible = false;
            }
        }
    }, {
        key: "setActive",
        value: function setActive(isActive) {
            _get(AiSubBot.prototype.__proto__ || Object.getPrototypeOf(AiSubBot.prototype), "setActive", this).call(this, isActive);

            if (isActive) {
                if (this.idleSound) {
                    this.idleSound.FadeIn(1.0, 0.6);
                }

                // Entry landing sound
                if (this.entrySound) {
                    this.entrySound.Play();
                }
            }
        }
    }, {
        key: "SelfDestruct",
        value: function SelfDestruct() {
            this.deathTime = this.selfDestructDeathTime;
            this.DoDamage(this.maxHealth, GameStore.Teams.Collaborators);
            if (this.enemyTarget !== undefined) {
                var dist = this.enemyTarget.mesh.position.distanceTo(this.mesh.position);
                if (dist < this.SelfDestructRadius) {
                    this.enemyTarget.DoDamage(this.selfDestructDamage, this.team, this.mesh.position, 500, 0.015, this);
                }
            }
        }
    }, {
        key: "SetEmissiveOnMesh",
        value: function SetEmissiveOnMesh(color, alpha) {
            this.childMesh.material.emissive.lerp(color, alpha);
        }
    }, {
        key: "DisposeMesh",
        value: function DisposeMesh() {
            _get(AiSubBot.prototype.__proto__ || Object.getPrototypeOf(AiSubBot.prototype), "DisposeMesh", this).call(this);
            this.childMesh.geometry.dispose();
            this.childMesh.material.dispose();
        }

        // Given an AI will return true or false if this AI should attempt to avoid

    }, {
        key: "ShouldAvoid",
        value: function ShouldAvoid(obstacleAI) {
            // SubBot should never avoid enemies
            if (obstacleAI.team !== this.team) {
                return false;
            }

            // Do not avoid Stamps, they should move out of the way
            if (obstacleAI.type === AiManager.EAiType.Stamp) {
                return false;
            }

            // Do not avoid the package if not on the player
            if (obstacleAI.type === AiManager.EAiType.Goal && obstacleAI.canPickup) {
                return false;
            }

            return true;
        }
    }, {
        key: "DrawDebugDirectionLines",
        value: function DrawDebugDirectionLines(draw) {
            if (draw && !this.dead) {
                var lineStart = this.mesh.position.clone();

                var debugLine = Utils.CreateDebugLine(lineStart, lineStart.clone().add(this.direction.clone().multiplyScalar(5)), 0xffffff);
                this.debugLines.push(debugLine);

                debugLine = Utils.CreateDebugLine(lineStart, lineStart.clone().add(this.directionRight.clone().multiplyScalar(5)), 0x00ff00);
                this.debugLines.push(debugLine);

                debugLine = Utils.CreateDebugLine(lineStart, lineStart.clone().add(this.desiredDirection.clone().multiplyScalar(5)), 0x0000ff);
                this.debugLines.push(debugLine);
            }
        }
    }, {
        key: "DrawDebugAccelVel",
        value: function DrawDebugAccelVel(draw) {
            if (draw && !this.dead) {
                var lineStart = this.mesh.position.clone().add(new THREE.Vector3(0, 2, 0));

                // // Draw yellow velocity line
                if (this.velocity.length() > 0) {
                    var lineEnd = lineStart.clone().add(this.velocity.clone().multiplyScalar(20));
                    var debugLine = Utils.CreateDebugLine(lineStart, lineEnd, 0xffff00);
                    this.debugLines.push(debugLine);

                    var debugSphere = Utils.CreateDebugSphere(lineEnd, 0.25, 0xffff00);
                    this.debugLines.push(debugSphere);
                }

                // Draw red acceleration line
                if (this.currentAcceleration.length() > 0) {
                    var _lineEnd = lineStart.clone().add(this.currentAcceleration.clone().multiplyScalar(20));
                    var _debugLine = Utils.CreateDebugLine(lineStart, _lineEnd, 0xff0000);
                    this.debugLines.push(_debugLine);

                    var _debugSphere = Utils.CreateDebugSphere(_lineEnd, 0.25, 0xff0000);
                    this.debugLines.push(_debugSphere);
                }
            }
        }
    }, {
        key: "FindDesiredDirection",
        value: function FindDesiredDirection() {
            if (this.enemyTarget !== undefined) {
                this.desiredDirection.copy(this.enemyTarget.mesh.position).sub(this.mesh.position);
            } else if (this.turnAroundTime === this.turnAroundLength) {
                this.desiredDirection.copy(this.direction).multiplyScalar(-1);
            }

            this.desiredDirection.y = 0;
            this.desiredDirection.normalize();
        }
    }, {
        key: "ShouldFire",
        value: function ShouldFire() {
            if (!_get(AiSubBot.prototype.__proto__ || Object.getPrototypeOf(AiSubBot.prototype), "ShouldFire", this).call(this)) {
                return false;
            }

            if (!this.checkTargetInSameRoom(this.enemyTarget)) {
                return false;
            }

            return false;
        }
    }, {
        key: "RemoveFromWorld",
        value: function RemoveFromWorld(playDeathSound, bountyAmount) {
            var fadeEmissive = false;
            var useEmissiveForDiffuse = true;
            var explosionColors = [];
            explosionColors.push(this.emitFloaterComp.particleColor);

            // Play death sound
            if (playDeathSound) {
                this.destroyedSound.Play();
            }

            if (this.emitFloaterComp) {
                this.voxelChance *= 2;
            }

            _get(AiSubBot.prototype.__proto__ || Object.getPrototypeOf(AiSubBot.prototype), "RemoveFromWorld", this).call(this, playDeathSound, bountyAmount, useEmissiveForDiffuse, fadeEmissive, explosionColors);
        }
    }, {
        key: "SetPositionFromNextPosition",
        value: function SetPositionFromNextPosition(delta) {
            this.nextPosition = GameStore.GameInstance.levelManager.checkRoomCollision(this.mesh.position, this.nextPosition, this.customCollisionBounds, this.team === GameStore.Teams.Collaborators);

            var changeHeightAllowed = this.ChangeHeight(this.nextPosition.x, this.nextPosition.z, delta);

            // Only allow AI to move forward if the step height was allowed
            if (changeHeightAllowed) {
                this.mesh.position.x = this.nextPosition.x;
                this.mesh.position.z = this.nextPosition.z;

                return true;
            }

            return false;
        }
    }, {
        key: "Update",
        value: function Update(time, delta) {
            if (this.dead) {
                _get(AiSubBot.prototype.__proto__ || Object.getPrototypeOf(AiSubBot.prototype), "Update", this).call(this, time, delta);
                return;
            }

            // Loop the first 5 seconds of timer sound if lifetime is longer than the timer sound
            var lifetime = GameStore.GameInstance.bitBotManager.getBotLifetime(this.botType);
            var isLivesLongerThanSoundClip = lifetime > this.timerSoundLength;
            if (this.remainingTimerSoundOffset > 0 || isLivesLongerThanSoundClip) {
                this.remainingTimerSoundOffset -= delta;

                if (this.remainingTimerSoundOffset <= 0) {
                    this.remainingTimerSoundOffset = isLivesLongerThanSoundClip ? lifetime % this.timerSoundFirstSetLength : -1;

                    if (this.remainingTimerSoundOffset > 3 || !isLivesLongerThanSoundClip) {
                        if (this.timerSound) {
                            this.timerSound.Stop();

                            // Only play beep if less than 30s of lifetime remain.
                            if (lifetime <= 30) {
                                this.timerSound.Play();
                            }
                        }
                    }
                }
            }

            this.timeAcc += (Math.sin(time) * .5 + .5) * delta;
            this.markerOffset.set(2 * Math.cos(2 * time) + 2 * Math.cos(-4 * this.timeAcc), 0, 2 * Math.sin(4 * time) + 2 * Math.sin(-2 * this.timeAcc));
            var targetDelta = GameStore.GameInstance.bitBotManager.worldMarkerPos.clone().add(this.markerOffset);
            targetDelta.sub(this.mesh.position);
            targetDelta.y = 0;
            var dist = targetDelta.length();
            if (dist > 1) {
                if (this.currentSpeed > this.speed) {
                    this.HandleDeceleration(delta);
                } else if (this.currentSpeed < this.speed) {
                    this.HandleAcceleration(delta);
                }
            } else if (this.currentSpeed > 0) {
                this.HandleDeceleration(delta);
            }

            if (this.currentSpeed > 0) {
                this.direction = targetDelta.normalize();
                var frameSpeed = this.currentSpeed * delta;
                this.nextPosition.x = this.mesh.position.x + this.direction.x * frameSpeed;
                this.nextPosition.y = this.mesh.position.y;
                this.nextPosition.z = this.mesh.position.z + this.direction.z * frameSpeed;

                this.AddAvoidanceToNextPosition(delta);
                this.AddKnockbackToNextPosition(delta);
                this.SetPositionFromNextPosition(delta);
                this.RotateToDesiredDirection(delta);

                this.groundColorDist += frameSpeed;
                if (this.groundColorDist >= this.groundColorChangeDist) {
                    this.groundColorDist = 0;
                    // Only use first 11 palette colors, they're colorful & emissive.
                    this.groundColorCode = (this.groundColorCode + 1) % 11;
                }
            }

            this.mesh.rotation.x = this.maxLeanAngle * Math.sin(time * this.leanFrequency) - Math.PI / 2;
            this.mesh.rotation.y = this.maxLeanAngle * Math.cos(time * this.leanFrequency);

            var groundColor = GameStore.GameInstance.stampManager.getColorFromCode(this.groundColorCode);
            GameStore.GameInstance.chunkManager.setGroundColor(this.mesh.position.x, this.mesh.position.z, groundColor.r, groundColor.g, groundColor.b, 0.3 * groundColor.a);

            var aiList = GameStore.GameInstance.aiManager.aiList;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = aiList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var ai = _step.value;

                    if (ai.team === GameStore.Teams.Threat) {
                        var _dist = ai.mesh.position.distanceTo(this.mesh.position);
                        if (_dist < this.killRadius) {
                            this.StartHitFlash();
                            this.attackSound.Play();
                            ai.DoDamage(Infinity, this.team, this.mesh.position, 500, 0.015, this);
                        }
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            _get(AiSubBot.prototype.__proto__ || Object.getPrototypeOf(AiSubBot.prototype), "Update", this).call(this, time, delta);
        }
    }, {
        key: "delayedDestroy",
        value: function delayedDestroy() {
            _get(AiSubBot.prototype.__proto__ || Object.getPrototypeOf(AiSubBot.prototype), "delayedDestroy", this).call(this);

            if (this.destroyedSound !== undefined) {
                this.destroyedSound.Destroy();
            }

            if (this.timerSound !== undefined) {
                this.timerSound.Destroy();
            }

            if (this.entrySound !== undefined) {
                this.entrySound.Destroy();
            }

            this.destroyedSound = undefined;
            this.timerSound = undefined;
            this.entrySound = undefined;
        }
    }, {
        key: "Die",
        value: function Die(playDeathSound) {
            GameStore.GameInstance.bitBotManager.setShowSubBotMarker(false);

            // Stop timer sound
            if (this.timerSound) {
                this.timerSound.Stop();
            }

            _get(AiSubBot.prototype.__proto__ || Object.getPrototypeOf(AiSubBot.prototype), "Die", this).call(this, playDeathSound);
        }
    }]);

    return AiSubBot;
}(AiBotBase);

module.exports = AiSubBot;

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var THREE = __webpack_require__(1);

var GameStore = __webpack_require__(0);
var AiBase = __webpack_require__(20);
var SoundSystem = __webpack_require__(7);

var AiBeacon = function (_AiBase) {
    _inherits(AiBeacon, _AiBase);

    function AiBeacon(x, y, z) {
        _classCallCheck(this, AiBeacon);

        var _this = _possibleConstructorReturn(this, (AiBeacon.__proto__ || Object.getPrototypeOf(AiBeacon)).call(this));

        _this.team = GameStore.Teams.Collaborators;
        _this.voxName = "beacon";
        _this.speed = 0;
        _this.size = 2;
        _this.maxHealth = Infinity;

        _this.customCollisionBounds = new THREE.Box3(new THREE.Vector3(-3, -2, -2), new THREE.Vector3(3, 2, 2));

        // Spawn angle
        var angle = 0.22 * Math.PI * 2;
        _this.direction = new THREE.Vector3(Math.cos(angle), 0, Math.sin(angle));

        // Setup for spawn offset & height calculation
        _this.offset = { x: 0, y: 0.8, z: 0 };

        _this.Init(x, y, z);
        _this.mesh.rotation.z = Math.atan2(_this.direction.x, _this.direction.z);
        _this.mesh.castShadow = false;

        // Victory sound
        _this.destroyedSound.LoadSound("sound/victory.mp3");
        if (_this.destroyedSound.Object3D) {
            _this.mesh.add(_this.destroyedSound.Object3D);
        }

        // Setup beacon sound
        _this.beaconSound = new SoundSystem.SoundShader();
        _this.beaconSound.LoadSound("sound/goal_beacon-01.mp3", 60, 0.5);
        _this.beaconSound.LoadSound("sound/goal_beacon-02.mp3", 60, 0.5);
        _this.beaconSound.LoadSound("sound/goal_beacon-03.mp3", 60, 0.5);

        _this.mesh.material.emissive.setRGB(1, 1, 1);

        // Used to limit how often the beacon sound plays
        _this.allowBeaconPlay = true;

        // No XP should be earned from the beacon when the level ends.
        _this.xpComp.xp = 0;
        return _this;
    }

    _createClass(AiBeacon, [{
        key: "delayedDestroy",
        value: function delayedDestroy() {
            _get(AiBeacon.prototype.__proto__ || Object.getPrototypeOf(AiBeacon.prototype), "delayedDestroy", this).call(this);
            this.beaconSound.Destroy();
        }
    }, {
        key: "Update",
        value: function Update(time, delta) {
            this.ChangeHeight(this.mesh.position.x, this.mesh.position.z, delta);

            // Strobe beacon
            this.mesh.material.emissiveIntensity = Math.max(0.125, Math.sin(time * 2.75) + 0.5625);

            // Play beacon sound
            if (this.allowBeaconPlay && this.mesh.material.emissiveIntensity >= 1.0) {
                this.beaconSound.Play();
                this.allowBeaconPlay = false;
            } else if (!this.allowBeaconPlay && this.mesh.material.emissiveIntensity <= 0.25) {
                this.allowBeaconPlay = true;
            }

            _get(AiBeacon.prototype.__proto__ || Object.getPrototypeOf(AiBeacon.prototype), "Update", this).call(this, time, delta);
        }
    }]);

    return AiBeacon;
}(AiBase);

module.exports = AiBeacon;

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var THREE = __webpack_require__(1);
var GameStore = __webpack_require__(0);
var World = __webpack_require__(169);
var Objects = __webpack_require__(171);
var Player = __webpack_require__(172);
var Utils = __webpack_require__(2);
var ConditionActions = __webpack_require__(55);

/////////////////////////////////////////////////////////////
// Player base 'class'
/////////////////////////////////////////////////////////////
function MapManager() {
    this.mapName = "Unknown";
    this.mapFile = "map1.png";
    this.startPosition = undefined;
    this.cageModel = "jeep_pink";
    this.cagePosition = undefined;
    this.voxModels = [];
    this.percentLoaded = 0;
    this.clearColor = 0x000000;
    this.fogColor = 0x000000;
    this.blockSize = 0.5;
    this.wallHeight = 20;
    this.useLava = true;
    this.useWater = false;
    this.enemiesKilled = 0;
    this.waterPosition = 0;
    this.lavaPosition = 0;
    this.id = 0;

    MapManager.prototype.Create = function (args) {
        this.mapName = args.mapName;
        this.mapFile = args.mapFile;
        this.playerPosition = args.playerPosition;
        this.cageModel = args.cageModel;
        this.cagePosition = args.cagePosition;
        this.fogColor = args.fogColor;
        this.clearColor = args.clearColor;
        this.blockSize = args.blockSize;
        this.wallHeight = args.wallHeight;
        this.useLava = args.useLava;
        this.useWater = args.useWater;
        this.waterPosition = args.waterPosition;
        this.lavaPosition = args.lavaPosition;
        this.id = args.mapId;

        GameStore.GameInstance.scene.fog = new THREE.Fog(this.fogColor, 70, 170);
        GameStore.GameInstance.renderer.setClearColor(this.clearColor, 1);

        // Init lights
        args.lights();

        // Spawn items
        if (args.objects !== undefined) {
            args.objects();
        }

        this.SpawnWorld();
        this.BuildWorldChunks();
    };

    MapManager.prototype.BuildWorldChunks = function () {
        var x = GameStore.GameInstance.chunkManager.PercentLoaded();

        if (x < 100 || GameStore.GameInstance.chunkManager.maxChunks === 0 || GameStore.GameInstance.chunkManager.worldChunks.length === 0) {
            var that = this;
            setTimeout(function () {
                that.BuildWorldChunks();
            }, 500);

            return;
        }

        if (this.useLava) {
            var lava = new Objects.Lava();
            lava.Create(GameStore.GameInstance.scene);
            GameStore.GameInstance.objects.push(lava);
        }

        if (this.useWater) {
            var water = new Objects.Water();
            water.Create(GameStore.GameInstance.scene);
            GameStore.GameInstance.objects.push(water);
        }

        this.SpawnPlayer();
    };

    MapManager.prototype.Loaded = function (type) {
        // TBD: Update percent loaded on site.
        // $('#loaded').text("Loading "+ type + "("+ this.percentLoaded + "%)")
    };

    MapManager.prototype.SpawnWorld = function () {
        // Load top
        GameStore.GameInstance.world = new World();
        GameStore.GameInstance.world.Load(this.mapFile, this.wallHeight, this.blockSize);
    };

    MapManager.prototype.SpawnPlayer = function () {
        GameStore.GameInstance.player = new Player();
        GameStore.GameInstance.player.Create(this.playerPosition);

        GameStore.GameInstance.scriptingManager.AddConditionAction(new ConditionActions.CreateRestartOnPlayerDeath());
    };
}
MapManager.prototype = new MapManager();
MapManager.prototype.constructor = MapManager;
module.exports = MapManager;

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.

var THREE = __webpack_require__(1);

var GameStore = __webpack_require__(0);
var roomData = __webpack_require__(54).roomData;
var ChunkWorld = __webpack_require__(170);

function World() {
    this.width = 0;
    this.height = 0;
    this.name = "Unknown";
    this.map = undefined;
    this.chunkSize = 16;
    this.chunks = 0;
    this.hemiLight = undefined;
    this.dirLight = undefined;
    this.wallHeight = 15;
    this.blockSize = 0.1;

    World.prototype.Load = function (filename, wallHeight, blockSize) {
        this.wallHeight = wallHeight;
        this.blockSize = blockSize;
        this.readWorld(filename);
        this.readMap();
    };

    World.prototype.readMap = function () {
        if (this.map === undefined) {
            var that = this;

            setTimeout(function () {
                that.readMap();
            }, 500);

            return;
        }

        this.BuildNewMap();
    };

    this.BuildNewMap = function () {
        if (GameStore.GameInstance.enableSingleLevelDebug) {
            this.voxChunk = GameStore.GameInstance.voxLoader.GetModel(roomData[GameStore.GameInstance.singleLevelIndex].name); // intro1_south
        } else {
            if (!GameStore.GameInstance.isLevelLoadingFinished()) {
                var that = this;
                setTimeout(function () {
                    that.BuildNewMap();
                }, 500);
                return;
            }

            this.voxChunk = GameStore.GameInstance.voxLoader.GetModel(roomData[GameStore.GameInstance.lastLoadedRoomIndex].name);
        }

        var textureNormal = GameStore.GameInstance.loader.load("textures/voxel_normal.png");
        var textureSpecular = GameStore.GameInstance.loader.load("textures/voxel_specular.png");
        var textureEnv = GameStore.GameInstance.loader.load("textures/voxel_env.png");
        var normalScaler = new THREE.Vector2(0.25, 0.25);
        var specular = 0x111111;
        var shininess = 50;

        textureNormal.wrapS = textureNormal.wrapT = THREE.RepeatWrapping;
        textureSpecular.wrapS = textureSpecular.wrapT = THREE.RepeatWrapping;

        textureEnv.mapping = THREE.EquirectangularReflectionMapping;

        this.worldChunkMat = new THREE.MeshPhongMaterial({
            vertexColors: THREE.VertexColors,
            normalMap: textureNormal,
            normalScale: normalScaler,
            specular: specular,
            specularMap: textureSpecular,
            shininess: shininess,
            envMap: textureEnv,
            wireframe: false });

        // Move up to the nearest chunkSize
        var modVoxChunkSizeX = this.voxChunk.chunkSizeX % this.chunkSize;
        var voxChunkSizeX = this.voxChunk.chunkSizeX + (modVoxChunkSizeX === 0 ? 0 : this.chunkSize - modVoxChunkSizeX);
        var modVoxChunkSizeY = this.voxChunk.chunkSizeY % this.chunkSize;
        var voxChunkSizeY = this.voxChunk.chunkSizeY + (modVoxChunkSizeY === 0 ? 0 : this.chunkSize - modVoxChunkSizeY);

        this.roomSizeX = voxChunkSizeX * this.blockSize;
        this.roomSizeY = voxChunkSizeY * this.blockSize;

        GameStore.GameInstance.worldMap = new Array(this.voxChunk.chunkSizeX);
        for (var i = 0; i < GameStore.GameInstance.worldMap.length; i++) {
            GameStore.GameInstance.worldMap[i] = new Array();
        }

        GameStore.GameInstance.levelManager.spawnStartingRoom();
    };

    this.spawnRoomByGridIndex = function (indexX, indexY, roomTypeIndex, blockOnLoad) {

        this.spawnRoom(this.roomSizeX * indexX, this.roomSizeY * indexY, roomTypeIndex, blockOnLoad);
    };

    this.spawnRoom = function (roomWorldPosX, roomWorldPosY, roomTypeIndex, blockOnLoad) {

        var roomVoxName = roomData[roomTypeIndex].name;
        var voxModel = GameStore.GameInstance.voxLoader.GetModel(roomVoxName);

        var createData = {
            voxModel: voxModel,
            cx: 0,
            cy: 0,
            roomWorldPosX: roomWorldPosX,
            roomWorldPosY: roomWorldPosY
        };
        this.createRoomChunksAmortized(createData, blockOnLoad ? Infinity : 1);
    };

    this.createRoomChunksAmortized = function (createData, maxProcessCount) {
        var _this = this;

        var continueProcessing = true;
        var processCount = 0;
        while (createData.cy < this.voxChunk.chunkSizeY && continueProcessing) {
            while (createData.cx < this.voxChunk.chunkSizeX) {
                var cSize = this.blockSize;
                var c = new ChunkWorld();
                var worldPosX = createData.cx * cSize + createData.roomWorldPosY;
                var worldPosY = createData.cy * cSize + createData.roomWorldPosX;
                c.CreateFromVox(this.chunkSize, cSize, worldPosX, worldPosY, createData.voxModel.blocks, createData.cx, createData.cy, this.wallHeight, this.chunks);

                GameStore.GameInstance.chunkManager.AddWorldChunk(c);

                // Save to world map
                var mp = this.chunkSize * this.blockSize;
                var x = Math.round(Math.abs(worldPosY) / mp);
                var z = Math.round(Math.abs(worldPosX) / mp);

                GameStore.GameInstance.worldMap[x][z] = { "id": this.chunks, "avgHeight": c.GetAvgHeight() };

                this.chunks++;

                createData.cx += this.chunkSize;

                ++processCount;
                if (processCount >= maxProcessCount) {
                    continueProcessing = false;
                    break;
                }
            }

            if (continueProcessing) {
                createData.cy += this.chunkSize;
                createData.cx = 0;
            }
        }

        if (!continueProcessing) {
            setTimeout(function () {
                _this.createRoomChunksAmortized(createData, maxProcessCount);
            }, 1);
        } else {
            GameStore.GameInstance.chunkManager.BuildDirtyChunks(maxProcessCount);
        }
    };

    World.prototype.readWorld = function (filename) {
        // Read png file binary and get color for each pixel
        // one pixel = one block
        // Read RGBA (alpha is height)
        // 255 = max height
        // a < 50 = floor
        var image = new Image();
        image.src = filename;

        var ctx = document.createElement("canvas").getContext("2d");
        var that = this;
        image.onload = function () {
            ctx.canvas.width = image.width;
            ctx.canvas.height = image.height;
            ctx.drawImage(image, 0, 0);
            that.width = image.width;
            that.height = image.height;
            that.map = new Array();
            var imgData = ctx.getImageData(0, 0, that.width, that.height);

            GameStore.GameInstance.worldMap = new Array();
            for (var y = 0; y < that.height; y++) {
                var pos = y * that.width * 4;
                that.map[y] = new Array();
                GameStore.GameInstance.worldMap[y] = new Array();
                for (var x = 0; x < that.width; x++) {
                    var r = imgData.data[pos++];
                    var g = imgData.data[pos++];
                    var b = imgData.data[pos++];
                    var a = imgData.data[pos++];
                    that.map[y][x] = { "r": r, "g": g, "b": b, "a": a };
                }
            }

            GameStore.GameInstance.chunkManager.maxChunks = that.height / that.chunkSize * (that.height / that.chunkSize);
        };
    };

    this.generateWorldChunkMeshList = function () {
        return GameStore.GameInstance.chunkManager.worldChunks.map(function (chunk) {
            return chunk.mesh;
        }).filter(function (chunk) {
            return chunk !== undefined;
        });
    };

    this.intersectMouseWithWorld = function () {
        if (GameStore.GameInstance.player === undefined) {
            return [];
        }

        return GameStore.GameInstance.player.IntersectMouseWithObjects(this.generateWorldChunkMeshList());
    };

    this.intersectRayWithWorld = function (origin, dir) {
        var raycaster = new THREE.Raycaster(origin, dir);
        return raycaster.intersectObjects(this.generateWorldChunkMeshList());
    };

    this.intersectWithPlane = function (normalizedSpacePos, plane) {
        var unprojectPos = normalizedSpacePos.clone().unproject(GameStore.GameInstance.camera);

        var dir = unprojectPos.sub(GameStore.GameInstance.camera.position).normalize();
        var ray = new THREE.Ray(GameStore.GameInstance.camera.position, dir);
        var worldPos = new THREE.Vector3();
        ray.intersectPlane(plane, worldPos);

        return worldPos;
    };
}
World.prototype = new World();
World.prototype.constructor = World;
module.exports = World;

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.

var THREE = __webpack_require__(1);
var Block = __webpack_require__(34);
var Utils = __webpack_require__(2);
var GameStore = __webpack_require__(0);
var Chunk = __webpack_require__(23);

function ChunkWorld() {
    Chunk.call(this);
    this.wallHeight = 1;

    ChunkWorld.prototype.CreateFromVox = function (chunkSize, blockSize, posX, posY, mapBlocks, blockStartX, blockStartY, wallHeight, id) {
        this.cid = id;
        this.chunkSize = chunkSize;
        this.chunkSizeX = chunkSize;
        this.chunkSizeY = chunkSize;
        this.chunkSizeZ = chunkSize;
        this.blockSize = blockSize;
        this.posX = posX;
        this.posY = posY;
        this.uvOffsetX = 0;
        this.uvOffsetY = 0;
        this.uvScale = 0.1;

        this.blocks = new Array();
        this.isDirty = true;

        for (var x = 0; x < this.chunkSize; x++) {
            this.blocks[x] = new Array();
            for (var y = 0; y < this.chunkSize; y++) {
                this.blocks[x][y] = new Array();
            }
        }

        var maxX = 0;
        var maxY = 0;
        var maxZ = 0;
        for (var _x = 0; _x < this.chunkSize; _x++) {
            for (var _y = 0; _y < this.chunkSize; _y++) {
                for (var z = 0; z < 125; z++) {
                    //HACK This should be this.chunkSize, but setting to 125 for our custom room tiles
                    if (mapBlocks[blockStartX + _x] !== undefined && mapBlocks[blockStartX + _x][blockStartY + _y] !== undefined && mapBlocks[blockStartX + _x][blockStartY + _y][z] !== undefined) {

                        maxX = Math.max(maxX, _x);
                        maxY = Math.max(maxY, _y);
                        maxZ = Math.max(maxZ, z);

                        var mapBlock = mapBlocks[blockStartX + _x][blockStartY + _y][z];
                        this.blocks[_x][_y][z] = new Block();
                        this.blocks[_x][_y][z].Create(mapBlock.getActive(), mapBlock.getR(), mapBlock.getG(), mapBlock.getB(), mapBlock.getA());
                    }
                }
            }
        }

        this.chunkSizeX = maxX + 1;
        this.chunkSizeY = maxY + 1;
        this.chunkSizeZ = maxZ + 1;
    };

    ChunkWorld.prototype.Create = function (chunkSize, blockSize, posX, posY, map, wallHeight, id) {
        this.cid = id;
        this.chunkSize = chunkSize;
        this.chunkSizeX = chunkSize;
        this.chunkSizeY = chunkSize;
        this.chunkSizeZ = chunkSize;
        this.blockSize = blockSize;
        this.posX = posX;
        this.posY = posY;
        this.uvOffsetX = 0.25;
        this.uvOffsetY = 0.25;
        this.uvScale = 0.1;

        this.blocks = new Array();
        var tmpBlocks = new Array();
        var visible = false;
        var maxHeight = 0;
        for (var x = 0; x < this.chunkSize; x++) {
            this.blocks[x] = new Array();
            tmpBlocks[x] = new Array();
            for (var y = 0; y < this.chunkSize; y++) {
                this.blocks[x][y] = new Array();
                tmpBlocks[x][y] = new Array();
                this.wallHeight = map[x][y].a / wallHeight;
                //     this.avgHeight += this.wallHeight
                var v = 0;
                for (var z = 0; z < this.chunkSize; z++) {
                    visible = false;

                    if (map[x][y].a > 0 && z <= this.wallHeight) {
                        visible = true;
                        tmpBlocks[x][y][z] = 1;
                        v++;
                    } else {
                        tmpBlocks[x][y][z] = 0;
                        visible = false;
                    }
                }
                if (maxHeight < v) {
                    maxHeight = v;
                }
            }
        }
        this.chunkSizeZ = maxHeight;

        // Skipping _a_lot_ of blocks by just allocating maxHeight for each block.
        for (var _x2 = 0; _x2 < this.chunkSize; _x2++) {
            for (var _y2 = 0; _y2 < this.chunkSize; _y2++) {
                for (var _z = 0; _z < this.chunkSizeZ; _z++) {
                    this.blocks[_x2][_y2][_z] = new Block();
                    var _visible = false;
                    if (tmpBlocks[_x2][_y2][_z] === 1) {
                        _visible = true;
                    }
                    this.blocks[_x2][_y2][_z].Create(_visible, map[_x2][_y2].r, map[_x2][_y2].g, map[_x2][_y2].b, map[_x2][_y2].a);
                }
            }
        }
    };

    ChunkWorld.prototype.destroy = function () {
        if (this.mesh !== undefined) {
            GameStore.GameInstance.scene.remove(this.mesh);

            this.mesh.geometry.dispose();
            this.mesh = undefined;
        }

        this.blocks = [];
    };

    ChunkWorld.prototype.Rebuild = function () {
        var b = 0;
        var vertices = [];
        var colors = [];
        var uvCoords = [];
        this.isDirty = false;

        // Reset merged blocks
        for (var x = 0; x < this.chunkSize; x++) {
            for (var y = 0; y < this.chunkSize; y++) {
                for (var z = 0; z < this.chunkSizeZ; z++) {
                    if (this.blocks[x] !== undefined && this.blocks[x][y] !== undefined && this.blocks[x][y][z] !== undefined) {

                        this.blocks[x][y][z].setBack(false);
                        this.blocks[x][y][z].setRight(false);
                        this.blocks[x][y][z].setTop(false);
                        this.blocks[x][y][z].setFront(false);
                        this.blocks[x][y][z].setLeft(false);
                        this.blocks[x][y][z].setLeft(false);
                    }
                }
            }
        }

        this.calculateBlocks(vertices, colors, uvCoords, b);

        // Create Object
        //

        var geometry = new THREE.BufferGeometry();
        var v = new THREE.BufferAttribute(new Float32Array(vertices.length * 3), 3);
        for (var i = 0; i < vertices.length; i++) {
            v.setXYZ(i, vertices[i][0], vertices[i][1], vertices[i][2]);
        }
        geometry.addAttribute("position", v);

        // Each vertex has one uv coordinate for texture mapping
        var uvs = new THREE.BufferAttribute(new Float32Array(uvCoords.length * 2), 2);
        for (var _i = 0; _i < uvCoords.length; _i++) {
            uvs.setXY(_i, this.uvScale * uvCoords[_i][0], this.uvScale * uvCoords[_i][1]);
        }
        geometry.addAttribute("uv", uvs);

        var c = new THREE.BufferAttribute(new Float32Array(colors.length * 4), 4);
        for (var _i2 = 0; _i2 < colors.length; _i2++) {
            c.setXYZW(_i2, colors[_i2][0] / 255, colors[_i2][1] / 255, colors[_i2][2] / 255, colors[_i2][3] / 255);
        }
        geometry.addAttribute("color", c);

        geometry.computeVertexNormals();
        geometry.computeFaceNormals();

        var mesh = new THREE.Mesh(geometry, GameStore.GameInstance.world.worldChunkMat);
        mesh.rotation.set(Math.PI / 2, Math.PI, Math.PI / 2);
        mesh.position.set(this.posY, 0, this.posX);

        mesh.receiveShadow = true;
        mesh.castShadow = true;

        if (this.mesh !== undefined) {
            GameStore.GameInstance.scene.remove(this.mesh);
            this.mesh.geometry.dispose();
        }

        GameStore.GameInstance.scene.add(mesh);

        mesh.that = this;
        this.mesh = mesh;
        this.activeTriangles = b;
    };

    // 0 - left, 1 - top, 2 - right, 3 - bottom
    ChunkWorld.prototype.getNeighborCid = function (direction) {

        var chunkOffset = GameStore.GameInstance.world.chunkSize * GameStore.GameInstance.world.blockSize;

        var wx = this.posX + (direction === 0 ? -chunkOffset : direction === 2 ? chunkOffset : 0);
        var wz = this.posY + (direction === 1 ? -chunkOffset : direction === 3 ? chunkOffset : 0);

        return GameStore.GameInstance.chunkManager.GetWorldChunkID(wx, wz);
    };

    ChunkWorld.prototype.checkHiddenEdges = function (x, y, z) {};

    ChunkWorld.prototype.compareColor = function (x1, y1, z1, x2, y2, z2) {
        var b1 = this.blocks[x1][y1][z1];
        var b2 = this.blocks[x2][y2][z2];

        return b1.getR() === b2.getR() && b1.getG() === b2.getG() && b1.getB() === b2.getB();
    };

    ChunkWorld.prototype.calculateBlocks = function (vertices, colors, uvCoords, b) {
        var drawBlock = false;
        for (var x = 0; x < this.chunkSizeX; x++) {
            for (var y = 0; y < this.chunkSizeY; y++) {
                var height = 0;
                for (var z = 1; z < this.chunkSizeZ; z++) {
                    // Draw from 1 to skip "black" spots caused by image when there aint sharp borders for opacity
                    if (this.blocks[x][y][z].getActive() === true) {
                        if (height < z) {
                            height = z;
                        }

                        // Check for hidden blocks on edges (between chunks)
                        if (x === this.chunkSizeX - 1 && y < this.chunkSizeY - 1 && y > 0 && z < this.chunkSizeZ - 1) {
                            var id = this.getNeighborCid(2);
                            var worldChunk = GameStore.GameInstance.chunkManager.worldChunks[id];
                            if (worldChunk !== undefined) {
                                if (worldChunk.blocks[0][y][z] !== undefined && worldChunk.blocks[0][y][z].getActive()) {
                                    if (this.blocks[x][y - 1][z].getActive() && this.blocks[x - 1][y][z].getActive() && this.blocks[x][y + 1][z].getActive() && this.blocks[x][y][z + 1].getActive()) {
                                        continue;
                                    }
                                }
                            }
                        }

                        if (x === 0 && y < this.chunkSizeY - 1 && y > 0 && z < this.chunkSizeZ - 1) {
                            var _id = this.getNeighborCid(0);
                            var _worldChunk = GameStore.GameInstance.chunkManager.worldChunks[_id];
                            if (_worldChunk !== undefined) {
                                if (_worldChunk.blocks[this.chunkSizeX - 1][y][z] !== undefined && _worldChunk.blocks[this.chunkSizeX - 1][y][z].getActive()) {
                                    if (this.blocks[x][y - 1][z].getActive() && this.blocks[x][y + 1][z].getActive() && this.blocks[x + 1][y][z].getActive() && this.blocks[x][y][z + 1].getActive()) {
                                        continue;
                                    }
                                }
                            }
                        }

                        if (y === this.chunkSizeY - 1 && x < this.chunkSizeX - 1 && x > 0 && z < this.chunkSizeZ - 1) {
                            var _id2 = this.getNeighborCid(3);
                            var _worldChunk2 = GameStore.GameInstance.chunkManager.worldChunks[_id2];
                            if (_worldChunk2 !== undefined) {
                                if (_worldChunk2.blocks[x][0][z] !== undefined && _worldChunk2.blocks[x][0][z].getActive()) {
                                    if (this.blocks[x - 1][y][z].getActive() && this.blocks[x + 1][y][z].getActive() && this.blocks[x][y - 1][z].getActive() && this.blocks[x][y][z + 1].getActive()) {
                                        continue;
                                    }
                                }
                            }
                        }

                        if (y === 0 && x < this.chunkSizeX - 1 && x > 0 && z < this.chunkSizeZ - 1) {
                            var _id3 = this.getNeighborCid(1);
                            var _worldChunk3 = GameStore.GameInstance.chunkManager.worldChunks[_id3];
                            if (_worldChunk3 !== undefined) {
                                if (_worldChunk3.blocks[x][this.chunkSizeY - 1][z] !== undefined && _worldChunk3.blocks[x][this.chunkSizeY - 1][z].getActive()) {
                                    if (this.blocks[x - 1][y][z].getActive() && this.blocks[x + 1][y][z].getActive() && this.blocks[x][y + 1][z].getActive() && this.blocks[x][y][z + 1].getActive()) {
                                        continue;
                                    }
                                }
                            }
                        }

                        var sides = 0;

                        drawBlock = false;

                        //////////////////////////////////////////////////////////////////////////////////////////////////////////
                        // front (-X)
                        if (x < this.chunkSizeX - 1) {
                            if (this.blocks[x + 1][y][z] !== undefined && !this.blocks[x + 1][y][z].getActive()) {
                                drawBlock = true;
                            }
                        } else {
                            var _id4 = this.getNeighborCid(2);
                            var _worldChunk4 = GameStore.GameInstance.chunkManager.worldChunks[_id4];
                            var neighborBlock = _worldChunk4 && _worldChunk4.blocks[0][y][z];
                            if (neighborBlock !== undefined && neighborBlock.getActive() && !neighborBlock.getBack()) {
                                this.blocks[x][y][z].setFront(true);
                                drawBlock = false;
                            } else {
                                drawBlock = true;
                            }
                        }

                        if (drawBlock) {
                            if (!this.blocks[x][y][z].getFront()) {

                                var countX = 0;
                                var countY = 0;
                                var maxArea = 0;

                                for (var pY = y; pY < this.chunkSizeY; pY++) {

                                    var searchY = 0;
                                    for (var pZ = z; pZ < this.chunkSizeZ; pZ++) {

                                        var pYZBlock = this.blocks[x][pY][pZ];
                                        if (pYZBlock.getActive() && !pYZBlock.getFront() && this.compareColor(x, y, z, x, pY, pZ)) {
                                            ++searchY;
                                        } else {
                                            break;
                                        }
                                    }

                                    if (searchY > 0) {
                                        var newCountY = countY === 0 ? searchY : Math.min(searchY, countY);
                                        var newCountX = countX + 1;
                                        var newArea = newCountY * newCountX;

                                        if (newArea > maxArea) {
                                            maxArea = newArea;
                                            countX = newCountX;
                                            countY = newCountY;
                                        } else {
                                            break;
                                        }
                                    } else {
                                        break;
                                    }
                                }

                                for (var x1 = 0; x1 < countX; x1++) {
                                    for (var y1 = 0; y1 < countY; y1++) {
                                        var extBlock = this.blocks[x][y + x1][z + y1];
                                        if (extBlock.getFront()) {
                                            countY = y1 - 1;
                                        } else {
                                            extBlock.setFront(true);
                                        }
                                    }
                                }

                                this.blocks[x][y][z].setFront(true);
                                sides++;

                                var wX = x * this.blockSize;
                                var sY = y * this.blockSize - this.blockSize;
                                var sZ = z * this.blockSize - this.blockSize;
                                var eY = y * this.blockSize + this.blockSize * (countX - 1);
                                var eZ = z * this.blockSize + this.blockSize * (countY - 1);

                                vertices.push([wX, sY, sZ]);
                                uvCoords.push([vertices[vertices.length - 1][2], vertices[vertices.length - 1][1] + this.posY + this.uvOffsetY]);

                                vertices.push([wX, eY, eZ]);
                                uvCoords.push([vertices[vertices.length - 1][2], vertices[vertices.length - 1][1] + this.posY + this.uvOffsetY]);

                                vertices.push([wX, sY, eZ]);
                                uvCoords.push([vertices[vertices.length - 1][2], vertices[vertices.length - 1][1] + this.posY + this.uvOffsetY]);

                                vertices.push([wX, eY, eZ]);
                                uvCoords.push([vertices[vertices.length - 1][2], vertices[vertices.length - 1][1] + this.posY + this.uvOffsetY]);

                                vertices.push([wX, sY, sZ]);
                                uvCoords.push([vertices[vertices.length - 1][2], vertices[vertices.length - 1][1] + this.posY + this.uvOffsetY]);

                                vertices.push([wX, eY, sZ]);
                                uvCoords.push([vertices[vertices.length - 1][2], vertices[vertices.length - 1][1] + this.posY + this.uvOffsetY]);

                                for (var i = 0; i < 6; i++) {
                                    colors.push([this.blocks[x][y][z].getR(), this.blocks[x][y][z].getG(), this.blocks[x][y][z].getB(), this.blocks[x][y][z].getA()]);
                                }
                            }
                        }

                        drawBlock = false;

                        //////////////////////////////////////////////////////////////////////////////////////////////////////////
                        // back (+X)
                        if (x > 0) {
                            if (!this.blocks[x - 1][y][z].getActive()) {
                                drawBlock = true;
                            }
                        } else {
                            var _id5 = this.getNeighborCid(1);
                            var _worldChunk5 = GameStore.GameInstance.chunkManager.worldChunks[_id5];
                            var _neighborBlock = _worldChunk5 && _worldChunk5.blocks[this.chunkSizeX - 1][y][z];
                            if (_neighborBlock !== undefined && _neighborBlock.getActive() && !_neighborBlock.getFront()) {
                                drawBlock = false;
                            } else {
                                drawBlock = true;
                            }
                        }

                        if (drawBlock) {
                            if (!this.blocks[x][y][z].getBack()) {

                                var _countX = 0;
                                var _countY = 0;
                                var _maxArea = 0;

                                for (var _pY = y; _pY < this.chunkSizeY; _pY++) {
                                    var searchX = 0;
                                    for (var _pZ = z; _pZ < this.chunkSizeZ; _pZ++) {
                                        var _pYZBlock = this.blocks[x][_pY][_pZ];
                                        if (_pYZBlock.getActive() && !_pYZBlock.getBack() && this.compareColor(x, y, z, x, _pY, _pZ)) {
                                            ++searchX;
                                        } else {
                                            break;
                                        }
                                    }

                                    if (searchX > 0) {
                                        var _newCountY = _countY === 0 ? searchX : Math.min(searchX, _countY);
                                        var _newCountX = _countX + 1;
                                        var _newArea = _newCountY * _newCountX;

                                        if (_newArea > _maxArea) {
                                            _maxArea = _newArea;
                                            _countX = _newCountX;
                                            _countY = _newCountY;
                                        } else {
                                            break;
                                        }
                                    } else {
                                        break;
                                    }
                                }

                                for (var _x3 = 0; _x3 < _countX; _x3++) {
                                    for (var _y3 = 0; _y3 < _countY; _y3++) {
                                        var _extBlock = this.blocks[x][y + _x3][z + _y3];
                                        if (_extBlock.getBack()) {
                                            _countY = _y3 - 1;
                                        } else {
                                            _extBlock.setBack(true);
                                        }
                                    }
                                }

                                this.blocks[x][y][z].setBack(true);
                                sides++;

                                var _wX = x * this.blockSize - this.blockSize;
                                var _sY = y * this.blockSize - this.blockSize;
                                var _eY = y * this.blockSize + this.blockSize * (_countX - 1);
                                var _sZ = z * this.blockSize - this.blockSize;
                                var _eZ = z * this.blockSize + this.blockSize * (_countY - 1);

                                vertices.push([_wX, _sY, _sZ]);
                                uvCoords.push([vertices[vertices.length - 1][2], vertices[vertices.length - 1][1] + this.posY + this.uvOffsetY]);

                                vertices.push([_wX, _sY, _eZ]);
                                uvCoords.push([vertices[vertices.length - 1][2], vertices[vertices.length - 1][1] + this.posY + this.uvOffsetY]);

                                vertices.push([_wX, _eY, _eZ]);
                                uvCoords.push([vertices[vertices.length - 1][2], vertices[vertices.length - 1][1] + this.posY + this.uvOffsetY]);

                                vertices.push([_wX, _eY, _eZ]);
                                uvCoords.push([vertices[vertices.length - 1][2], vertices[vertices.length - 1][1] + this.posY + this.uvOffsetY]);

                                vertices.push([_wX, _eY, _sZ]);
                                uvCoords.push([vertices[vertices.length - 1][2], vertices[vertices.length - 1][1] + this.posY + this.uvOffsetY]);

                                vertices.push([_wX, _sY, _sZ]);
                                uvCoords.push([vertices[vertices.length - 1][2], vertices[vertices.length - 1][1] + this.posY + this.uvOffsetY]);

                                for (var _i3 = 0; _i3 < 6; _i3++) {
                                    colors.push([this.blocks[x][y][z].getR(), this.blocks[x][y][z].getG(), this.blocks[x][y][z].getB(), this.blocks[x][y][z].getA()]);
                                }
                            }
                        }

                        drawBlock = false;

                        //////////////////////////////////////////////////////////////////////////////////////////////////////////
                        // top (+Z)
                        if (z < this.chunkSizeZ - 1) {
                            if (!this.blocks[x][y][z + 1].getActive()) {
                                drawBlock = true;
                            }
                        } else {
                            drawBlock = true;
                        }

                        if (drawBlock) {
                            if (!this.blocks[x][y][z].getTop()) {

                                var _countX2 = 0;
                                var _countY2 = 0;
                                var _maxArea2 = 0;

                                for (var pX = x; pX < this.chunkSizeX; pX++) {

                                    var _searchY = 0;
                                    for (var _pY2 = y; _pY2 < this.chunkSizeY; _pY2++) {

                                        var _pYZBlock2 = this.blocks[pX][_pY2][z];
                                        if (_pYZBlock2.getActive() && !_pYZBlock2.getTop() && this.compareColor(x, y, z, pX, _pY2, z)) {
                                            ++_searchY;
                                        } else {
                                            break;
                                        }
                                    }

                                    if (_searchY > 0) {
                                        var _newCountY2 = _countY2 === 0 ? _searchY : Math.min(_searchY, _countY2);
                                        var _newCountX2 = _countX2 + 1;
                                        var _newArea2 = _newCountY2 * _newCountX2;

                                        if (_newArea2 > _maxArea2) {
                                            _maxArea2 = _newArea2;
                                            _countX2 = _newCountX2;
                                            _countY2 = _newCountY2;
                                        } else {
                                            break;
                                        }
                                    } else {
                                        break;
                                    }
                                }

                                for (var _x4 = 0; _x4 < _countX2; _x4++) {
                                    for (var _y4 = 0; _y4 < _countY2; _y4++) {
                                        var _extBlock2 = this.blocks[x + _x4][y + _y4][z];
                                        if (_extBlock2.getTop()) {
                                            _countY2 = _y4 - 1;
                                        } else {
                                            _extBlock2.getTop();
                                        }
                                    }
                                }
                                this.blocks[x][y][z].getTop();
                                sides++;

                                var sX = x * this.blockSize - this.blockSize;
                                var eX = x * this.blockSize + this.blockSize * (_countX2 - 1);
                                var _sY2 = y * this.blockSize - this.blockSize;
                                var _eY2 = y * this.blockSize + this.blockSize * (_countY2 - 1);
                                var wZ = z * this.blockSize;

                                vertices.push([eX, _eY2, wZ]);
                                uvCoords.push([vertices[vertices.length - 1][1] + this.posY + this.uvOffsetY, vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX]);

                                vertices.push([sX, _eY2, wZ]);
                                uvCoords.push([vertices[vertices.length - 1][1] + this.posY + this.uvOffsetY, vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX]);

                                vertices.push([eX, _sY2, wZ]);
                                uvCoords.push([vertices[vertices.length - 1][1] + this.posY + this.uvOffsetY, vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX]);

                                vertices.push([sX, _eY2, wZ]);
                                uvCoords.push([vertices[vertices.length - 1][1] + this.posY + this.uvOffsetY, vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX]);

                                vertices.push([sX, _sY2, wZ]);
                                uvCoords.push([vertices[vertices.length - 1][1] + this.posY + this.uvOffsetY, vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX]);

                                vertices.push([eX, _sY2, wZ]);
                                uvCoords.push([vertices[vertices.length - 1][1] + this.posY + this.uvOffsetY, vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX]);

                                for (var _i4 = 0; _i4 < 6; _i4++) {
                                    colors.push([this.blocks[x][y][z].getR(), this.blocks[x][y][z].getG(), this.blocks[x][y][z].getB(), this.blocks[x][y][z].getA()]);
                                }
                            }
                        }

                        drawBlock = false;

                        //////////////////////////////////////////////////////////////////////////////////////////////////////////
                        // bottom (-Z)
                        if (z > 0) {
                            if (!this.blocks[x][y][z - 1].getActive()) {
                                drawBlock = true;
                            }
                        } else {
                            var _id6 = this.getNeighborCid(1);
                            var _worldChunk6 = GameStore.GameInstance.chunkManager.worldChunks[_id6];
                            var _neighborBlock2 = _worldChunk6 && _worldChunk6.blocks[x][y][this.chunkSizeZ - 1];
                            if (_neighborBlock2 !== undefined && _neighborBlock2.getActive() && !_neighborBlock2.getTop()) {
                                drawBlock = false;
                            } else {
                                drawBlock = true;
                            }
                        }

                        if (drawBlock) {
                            if (!this.blocks[x][y][z].getBottom()) {

                                var _countX3 = 0;
                                var _countY3 = 0;
                                var _maxArea3 = 0;

                                for (var _pX = x; _pX < this.chunkSizeX; _pX++) {

                                    var _searchY2 = 0;
                                    for (var _pY3 = y; _pY3 < this.chunkSizeY; _pY3++) {
                                        var pXZBlock = this.blocks[_pX][_pY3][z];
                                        if (pXZBlock.getActive() && !pXZBlock.getBottom() && this.compareColor(x, y, z, _pX, _pY3, z)) {
                                            ++_searchY2;
                                        } else {
                                            break;
                                        }
                                    }

                                    if (_searchY2 > 0) {
                                        var _newCountY3 = _countY3 === 0 ? _searchY2 : Math.min(_searchY2, _countY3);
                                        var _newCountX3 = _countX3 + 1;
                                        var _newArea3 = _newCountY3 * _newCountX3;

                                        if (_newArea3 > _maxArea3) {
                                            _maxArea3 = _newArea3;
                                            _countX3 = _newCountX3;
                                            _countY3 = _newCountY3;
                                        } else {
                                            break;
                                        }
                                    } else {
                                        break;
                                    }
                                }

                                for (var _x5 = 0; _x5 < _countX3; _x5++) {
                                    for (var _y5 = 0; _y5 < _countY3; _y5++) {
                                        var _extBlock3 = this.blocks[x + _x5][y + _y5][z];
                                        if (_extBlock3.getBottom()) {
                                            _countY3 = _y5 - 1;
                                        } else {
                                            _extBlock3.setBottom(true);
                                        }
                                    }
                                }

                                this.blocks[x][y][z].setBottom(true);
                                sides++;

                                var _sX = x * this.blockSize - this.blockSize;
                                var _eX = x * this.blockSize + this.blockSize * (_countX3 - 1);
                                var _sY3 = y * this.blockSize - this.blockSize;
                                var _eY3 = y * this.blockSize + this.blockSize * (_countY3 - 1);
                                var _wZ = z * this.blockSize - this.blockSize;

                                vertices.push([_eX, _eY3, _wZ]);
                                uvCoords.push([vertices[vertices.length - 1][1] + this.posY + this.uvOffsetY, vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX]);

                                vertices.push([_eX, _sY3, _wZ]);
                                uvCoords.push([vertices[vertices.length - 1][1] + this.posY + this.uvOffsetY, vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX]);

                                vertices.push([_sX, _eY3, _wZ]);
                                uvCoords.push([vertices[vertices.length - 1][1] + this.posY + this.uvOffsetY, vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX]);

                                vertices.push([_sX, _eY3, _wZ]);
                                uvCoords.push([vertices[vertices.length - 1][1] + this.posY + this.uvOffsetY, vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX]);

                                vertices.push([_eX, _sY3, _wZ]);
                                uvCoords.push([vertices[vertices.length - 1][1] + this.posY + this.uvOffsetY, vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX]);

                                vertices.push([_sX, _sY3, _wZ]);
                                uvCoords.push([vertices[vertices.length - 1][1] + this.posY + this.uvOffsetY, vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX]);

                                for (var _i5 = 0; _i5 < 6; _i5++) {
                                    colors.push([this.blocks[x][y][z].getR(), this.blocks[x][y][z].getG(), this.blocks[x][y][z].getB(), this.blocks[x][y][z].getA()]);
                                }
                            }
                        }

                        drawBlock = false;

                        //////////////////////////////////////////////////////////////////////////////////////////////////////////
                        // left (-Y)
                        if (y > 0) {
                            if (!this.blocks[x][y - 1][z].getActive()) {
                                drawBlock = true;
                            }
                        } else {
                            var _id7 = this.getNeighborCid(1);
                            var _worldChunk7 = GameStore.GameInstance.chunkManager.worldChunks[_id7];
                            var _neighborBlock3 = _worldChunk7 && _worldChunk7.blocks[x][this.chunkSizeY - 1][z];
                            if (_neighborBlock3 !== undefined && _neighborBlock3.getActive() && !_neighborBlock3.getRight()) {
                                drawBlock = false;
                            } else {
                                drawBlock = true;
                            }
                        }

                        if (drawBlock) {
                            if (!this.blocks[x][y][z].getLeft()) {

                                var _countX4 = 0;
                                var _countY4 = 0;
                                var _maxArea4 = 0;

                                for (var _pX2 = x; _pX2 < this.chunkSizeX; _pX2++) {

                                    var _searchY3 = 0;
                                    for (var _pZ2 = z; _pZ2 < this.chunkSizeZ; _pZ2++) {
                                        var _pXZBlock = this.blocks[_pX2][y][_pZ2];
                                        if (_pXZBlock.getActive() && !_pXZBlock.getLeft() && this.compareColor(x, y, z, _pX2, y, _pZ2)) {
                                            ++_searchY3;
                                        } else {
                                            break;
                                        }
                                    }

                                    if (_searchY3 > 0) {
                                        var _newCountY4 = _countY4 === 0 ? _searchY3 : Math.min(_searchY3, _countY4);
                                        var _newCountX4 = _countX4 + 1;
                                        var _newArea4 = _newCountY4 * _newCountX4;

                                        if (_newArea4 > _maxArea4) {
                                            _maxArea4 = _newArea4;
                                            _countX4 = _newCountX4;
                                            _countY4 = _newCountY4;
                                        } else {
                                            break;
                                        }
                                    } else {
                                        break;
                                    }
                                }

                                for (var _x6 = 0; _x6 < _countX4; _x6++) {
                                    for (var _y6 = 0; _y6 < _countY4; _y6++) {
                                        var _extBlock4 = this.blocks[x + _x6][y][z + _y6];
                                        if (_extBlock4.getLeft()) {
                                            _countY4 = _y6 - 1;
                                        } else {
                                            _extBlock4.setLeft(true);
                                        }
                                    }
                                }

                                this.blocks[x][y][z].setLeft(true);
                                sides++;

                                var _sX2 = x * this.blockSize - this.blockSize;
                                var _eX2 = x * this.blockSize + this.blockSize * (_countX4 - 1);
                                var wy = y * this.blockSize - this.blockSize;
                                var _sZ2 = z * this.blockSize - this.blockSize;
                                var _eZ2 = z * this.blockSize + this.blockSize * (_countY4 - 1);

                                vertices.push([_eX2, wy, _eZ2]);
                                uvCoords.push([vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX, vertices[vertices.length - 1][2]]);

                                vertices.push([_sX2, wy, _eZ2]);
                                uvCoords.push([vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX, vertices[vertices.length - 1][2]]);

                                vertices.push([_sX2, wy, _sZ2]);
                                uvCoords.push([vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX, vertices[vertices.length - 1][2]]);

                                vertices.push([_eX2, wy, _eZ2]);
                                uvCoords.push([vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX, vertices[vertices.length - 1][2]]);

                                vertices.push([_sX2, wy, _sZ2]);
                                uvCoords.push([vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX, vertices[vertices.length - 1][2]]);

                                vertices.push([_eX2, wy, _sZ2]);
                                uvCoords.push([vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX, vertices[vertices.length - 1][2]]);

                                for (var _i6 = 0; _i6 < 6; _i6++) {
                                    colors.push([this.blocks[x][y][z].getR(), this.blocks[x][y][z].getG(), this.blocks[x][y][z].getB(), this.blocks[x][y][z].getA()]);
                                }
                            }
                        }

                        drawBlock = false;

                        //////////////////////////////////////////////////////////////////////////////////////////////////////////
                        // right (+Y) 
                        if (y < this.chunkSizeY - 1) {
                            if (!this.blocks[x][y + 1][z].getActive()) {
                                drawBlock = true;
                            }
                        } else {
                            var _id8 = this.getNeighborCid(3);
                            var _worldChunk8 = GameStore.GameInstance.chunkManager.worldChunks[_id8];
                            var _neighborBlock4 = _worldChunk8 && _worldChunk8.blocks[x][0][z];
                            if (_neighborBlock4 !== undefined && _neighborBlock4.getActive() && !_neighborBlock4.getLeft()) {
                                this.blocks[x][y][z].setRight(true);
                                drawBlock = false;
                            } else {
                                drawBlock = true;
                            }
                        }

                        if (drawBlock) {
                            if (!this.blocks[x][y][z].getRight()) {

                                var _countX5 = 0;
                                var _countY5 = 0;
                                var _maxArea5 = 0;

                                for (var _pX3 = x; _pX3 < this.chunkSizeX; ++_pX3) {

                                    var _searchY4 = 0;
                                    for (var _pZ3 = z; _pZ3 < this.chunkSizeZ; _pZ3++) {

                                        var _pXZBlock2 = this.blocks[_pX3][y][_pZ3];
                                        if (_pXZBlock2.getActive() && !_pXZBlock2.getRight() && this.compareColor(x, y, z, _pX3, y, _pZ3)) {
                                            ++_searchY4;
                                        } else {
                                            break;
                                        }
                                    }

                                    if (_searchY4 > 0) {
                                        var _newCountY5 = _countY5 === 0 ? _searchY4 : Math.min(_searchY4, _countY5);
                                        var _newCountX5 = _countX5 + 1;
                                        var _newArea5 = _newCountY5 * _newCountX5;

                                        if (_newArea5 > _maxArea5) {
                                            _maxArea5 = _newArea5;
                                            _countX5 = _newCountX5;
                                            _countY5 = _newCountY5;
                                        } else {
                                            break;
                                        }
                                    } else {
                                        break;
                                    }
                                }

                                for (var _x7 = 0; _x7 < _countX5; _x7++) {
                                    for (var _y7 = 0; _y7 < _countY5; _y7++) {
                                        var _extBlock5 = this.blocks[x + _x7][y][z + _y7];
                                        if (_extBlock5.getRight()) {
                                            _countY5 = _y7 - 1;
                                        } else {
                                            _extBlock5.setRight(true);
                                        }
                                    }
                                }

                                this.blocks[x][y][z].setRight(true);
                                sides++;

                                var _sX3 = x * this.blockSize - this.blockSize;
                                var _eX3 = x * this.blockSize + this.blockSize * (_countX5 - 1);
                                var wY = y * this.blockSize;
                                var _sZ3 = z * this.blockSize - this.blockSize;
                                var _eZ3 = z * this.blockSize + this.blockSize * (_countY5 - 1);

                                vertices.push([_eX3, wY, _eZ3]);
                                uvCoords.push([vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX, vertices[vertices.length - 1][2]]);

                                vertices.push([_sX3, wY, _sZ3]);
                                uvCoords.push([vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX, vertices[vertices.length - 1][2]]);

                                vertices.push([_sX3, wY, _eZ3]);
                                uvCoords.push([vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX, vertices[vertices.length - 1][2]]);

                                vertices.push([_eX3, wY, _eZ3]);
                                uvCoords.push([vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX, vertices[vertices.length - 1][2]]);

                                vertices.push([_eX3, wY, _sZ3]);
                                uvCoords.push([vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX, vertices[vertices.length - 1][2]]);

                                vertices.push([_sX3, wY, _sZ3]);
                                uvCoords.push([vertices[vertices.length - 1][0] + this.posX + this.uvOffsetX, vertices[vertices.length - 1][2]]);

                                for (var _i7 = 0; _i7 < 6; _i7++) {
                                    colors.push([this.blocks[x][y][z].getR(), this.blocks[x][y][z].getG(), this.blocks[x][y][z].getB(), this.blocks[x][y][z].getA()]);
                                }
                            }
                        }

                        // Add colors0
                        b += 2 * sides;

                        // Fully visible
                        if (sides === 6) {
                            // Create physBlock and remove this?
                        }
                    }
                }
                this.blocks[x][y].height = height;
            }
        }
    };
}
ChunkWorld.prototype = new Chunk();
ChunkWorld.prototype.constructor = ChunkWorld;
module.exports = ChunkWorld;

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.
var THREE = __webpack_require__(1);

var GameStore = __webpack_require__(0);

function Object3D() {
    // THREE.Mesh.apply(this, arguments) inherite from mesh
    this.mesh;
    this.time;

    Object3D.prototype.GetObject = function () {
        return this.mesh;
    };

    Object3D.prototype.Draw = function () {
        //draw object
    };

    Object3D.prototype.AddToScene = function (scene) {
        scene.add(this.mesh);
    };
}

////////////////////////////////////////////////////////////
// Cloud
/////////////////////////////////////////////////////////////
function Cloud() {
    Object3D.call(this);
    this.chunk = undefined;
    this.scale = 2;
    this.remove = 0;
    this.speed = 0;

    Cloud.prototype.Draw = function (time, delta) {
        this.mesh.position.z += this.speed;

        if (this.mesh.position.z > 200) {
            this.mesh.position.z = -200;
            this.mesh.position.x = Math.random() * 120;
            this.mesh.position.y = 10 + Math.random() * 2;
        }
    };

    Cloud.prototype.Create = function (type, snow) {
        this.chunk = GameStore.GameInstance.voxLoader.GetModel(type);
        for (var x = 0; x < this.chunk.chunkSizeX; x++) {
            for (var y = 0; y < this.chunk.chunkSizeY; y++) {
                for (var z = 0; z < this.chunk.chunkSizeZ; z++) {
                    this.chunk.blocks[x][y][z].setR(255);
                    this.chunk.blocks[x][y][z].setG(255);
                    this.chunk.blocks[x][y][z].setB(255);
                }
            }
        }
        this.chunk.Rebuild();
        this.mesh = this.chunk.mesh;
        this.mesh.geometry.computeBoundingBox();
        this.mesh.that = this;
        GameStore.GameInstance.targets.push(this.mesh);
        var scale = 1 + Math.random() * 2;
        this.mesh.scale.set(scale, scale, scale);
        GameStore.GameInstance.scene.add(this.mesh);
        this.speed = 0.05 + Math.random() * 0.1;
        this.mesh.position.z = -200;
        this.mesh.position.x = Math.random() * 120;
        this.mesh.position.y = 10 + Math.random() * 2;
    };
}

Cloud.prototype = new Object3D();
Cloud.prototype.constructor = Cloud;

/////////////////////////////////////////////////////////////
// Tree
/////////////////////////////////////////////////////////////
function Tree() {
    Object3D.call(this);
    this.chunk = undefined;
    this.scale = 2;
    this.remove = 0;
    this.origy = 0;

    Tree.prototype.Draw = function (time, delta) {
        var y = GameStore.GameInstance.chunkManager.GetHeight(this.mesh.position.x + this.chunk.blockSize * this.chunk.chunkSizeX / 2, this.mesh.position.z + this.chunk.blockSize * this.chunk.chunkSizeX / 2);

        // Explode tree if ground breaks.
        if (y < this.origy) {
            // this.Hit(0,0)
        }
    };

    Tree.prototype.Hit = function (data, dmg) {
        this.chunk.Explode(this.mesh.position, this.scale);
        this.remove = 1;
        GameStore.GameInstance.scene.remove(this.mesh);
    };

    Tree.prototype.Create = function (x, y, z, scale, type) {
        this.chunk = GameStore.GameInstance.voxLoader.GetModel(type);
        this.mesh = this.chunk.mesh;
        this.mesh.geometry.computeBoundingBox();
        this.mesh.position.set(x, y, z);
        this.mesh.that = this;
        GameStore.GameInstance.targets.push(this.mesh);
        this.mesh.scale.set(scale, scale, scale);
        GameStore.GameInstance.scene.add(this.mesh);
        this.origy = y;
    };
}
Tree.prototype = new Object3D();
Tree.prototype.constructor = Tree;

/////////////////////////////////////////////////////////////
// Lava
/////////////////////////////////////////////////////////////
function Lava() {
    Object3D.call(this);

    Lava.prototype.Create = function (scene) {
        var width = 400;
        var depth = 400;
        var geometry = new THREE.PlaneGeometry(width, depth, 64 - 1, 64 - 1);
        geometry.applyMatrix(new THREE.Matrix4().makeRotationX(-Math.PI / 2));
        geometry.dynamic = true;

        var i;var j;var il;var jl;
        for (i = 0, il = geometry.vertices.length; i < il; i++) {
            geometry.vertices[i].y = 0.4 * Math.sin(i / 2);
        }

        geometry.computeFaceNormals();
        geometry.computeVertexNormals();

        var textureDiffuse = GameStore.GameInstance.loader.load("textures/voxel_lava.png");

        textureDiffuse.wrapS = textureDiffuse.wrapT = THREE.RepeatWrapping;
        textureDiffuse.repeat.set(15, 15);

        var material = new THREE.MeshPhongMaterial({ map: textureDiffuse, emissive: 0xcccccc, specular: 0xbac2ff, shininess: 50, transparent: true, fog: true, opacity: 0.8 });

        var mesh = new THREE.Mesh(geometry, material);
        mesh.position.set(50, GameStore.GameInstance.currentMap.lavaPosition, 50);
        mesh.receiveShadow = false;
        this.mesh = mesh;
        scene.add(this.mesh);
    };

    Lava.prototype.Draw = function (time, delta, i) {
        for (var i = 0, l = this.mesh.geometry.vertices.length; i < l; i++) {
            //   this.mesh.geometry.vertices[ i ].y = 0.1 * Math.sin( i / 5 + ( time + i ) / 7 )    
            this.mesh.geometry.vertices[i].y = 0.2 * Math.sin(i / 5 + (time + i) / 4);
        }
        this.mesh.geometry.verticesNeedUpdate = true;
    };
}
Lava.prototype = new Object3D();
Lava.prototype.constructor = Lava;
module.exports.Lava = Lava;

/////////////////////////////////////////////////////////////
// Water
/////////////////////////////////////////////////////////////
function Water() {
    Object3D.call(this);

    Water.prototype.Create = function (scene) {
        var width = 800;
        var depth = 800;
        var geometry = new THREE.PlaneGeometry(width, depth, 64 - 1, 64 - 1);
        geometry.applyMatrix(new THREE.Matrix4().makeRotationX(-Math.PI / 2));
        geometry.dynamic = true;

        var i;var j;var il;var jl;
        for (i = 0, il = geometry.vertices.length; i < il; i++) {
            geometry.vertices[i].y = 0.4 * Math.sin(i / 2);
        }

        geometry.computeFaceNormals();
        geometry.computeVertexNormals();

        var material = new THREE.MeshPhongMaterial({ color: 0x000000, fog: true });

        var mesh = new THREE.Mesh(geometry, material);
        mesh.position.set(50, GameStore.GameInstance.currentMap.waterPosition, 50);
        mesh.receiveShadow = true;
        this.mesh = mesh;
        scene.add(this.mesh);
    };

    Water.prototype.Draw = function (time, delta, i) {
        for (var i = 0, l = this.mesh.geometry.vertices.length; i < l; i++) {
            // this.mesh.geometry.vertices[ i ].y = 0.1 * Math.sin( i / 5 + ( time + i ) / 7 )    
            this.mesh.geometry.vertices[i].y = 0.2 * Math.sin(i / 5 + (time + i) / 4);
        }
        this.mesh.geometry.verticesNeedUpdate = true;
    };
}
Water.prototype = new Object3D();
Water.prototype.constructor = Water;
module.exports.Water = Water;

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var THREE = __webpack_require__(1);

var GameStore = __webpack_require__(0);
var TopDownCamera = __webpack_require__(173);
var Weapon = __webpack_require__(26);
var Utils = __webpack_require__(2);
var AiManager = __webpack_require__(12);
var SoundSystem = __webpack_require__(7);
var PlayerStore = __webpack_require__(17);
var GamePad = __webpack_require__(174);
var BuffManager = __webpack_require__(18);
var WeaponUpgradeable = __webpack_require__(175);
var UpgradeManager = __webpack_require__(22);

/////////////////////////////////////////////////////////////
// Player base 'class'
/////////////////////////////////////////////////////////////
function Player() {
    this.type = "player";
    this.gamePad = new GamePad.GamePad();
    this.mesh = undefined;
    this.meshBody = undefined;
    this.chunk = undefined;
    this.chunkBody = undefined;
    this.voxNameTracks = "player_tracks";
    this.voxNameBody = "player_body";
    this.velocityY = 0;
    this.gravity = 0.06;
    this.heightClearance = 3.25;
    this.direction = undefined;
    this.moveDir = new THREE.Vector3(); // Use to store per frame player desired moved direction
    this.nextPosition = new THREE.Vector3(); // Used to avoid clone
    this.lastGroundPosition = new THREE.Vector3(); // Used to place player after fall damage
    this.setLastGroundPositionTime = 0;
    this.cameraObj = 0;
    this.keyboard = undefined;
    this.dead = false;
    this.falling = false;
    this.wf = false; // wireframe temp
    this.wfDelta = 0;
    this.remove = 0;
    this.pos = 0;
    this.healthBoxCount = 8;
    this.hudHealthBoxCount = this.healthBoxCount;
    this.hpPerBar = PlayerStore.maxHealth / this.healthBoxCount;
    this.healthBoxColorList = [];
    this.stampModeEnabled = false;
    this.stampModeToggleEnabled = false;
    this.stampModeToggleThresholdTime = .25;
    this.stampModeHoldTime = 0;
    this.wasStampModeAction = false;
    this.stampToLifeEnabled = true;
    this.stampCensorEnabled = true;
    this.stampLikeEnabled = true;
    this.standingStampAltInstanceId = undefined;
    this.standingStampBuffType = undefined;

    this.container = document.getElementById("container");

    // this.destructionMode = true // Use to activate god mode & ability to destroy world with P button

    this.offsetX = -1; // For tracking mouse movement
    this.offsetY = -1;

    this.respawnTime = 3000;
    this.updateHealthBoxInterval = 0.5; // Time in seconds between updating the health box geo
    this.currentHealthBoxInterval = 0; // Use to track last update

    PlayerStore.maxHealth = 100;
    PlayerStore.health = PlayerStore.maxHealth;
    this.healthUpgradeAmount = 50;
    this.lowHealthWarningTheshold = 25; // Any health value at or below this gives a warning
    this.lowHealthWarned = false; // Do not warn again until health goes above threshold

    this.fallSpeed = 12; // Speed to drop player

    this.offset = { x: 0, y: 0.3, z: 0 // Used to offset position on spawn and position updates
    };this.jumpCooldown = 0;
    this.stepHeight = 1; // Maximum allowed step height, anything higher than this will block movement
    this.heightSpeed = 8; // Speed to lerp character up or down for changes to height
    this.desiredHeight = 0; // Currently desired height

    this.healthBoxes = [];
    this.godMode = false;
    this.loaded = false;
    this.firePos = undefined;
    this.mouseMoveEvent = undefined;
    this.scale = 1.25;

    // For hit flash
    this.flashTime = 0.04;
    this.holdFlashTime = 0.1;
    this.deFlashTime = 0.1;
    this.flashColor = new THREE.Color(1, 1, 1);
    this.baseColor = new THREE.Color(0, 0, 0);

    // Load sounds
    this.soundStampRaise = new SoundSystem.SoundShader("sound/player_stamp_raise.mp3");
    this.soundStampFail = new SoundSystem.SoundShader("sound/player_stamp_fail.mp3");
    this.soundStartup = new SoundSystem.SoundShader("sound/player_startup-01.mp3");
    this.soundJump = new SoundSystem.SoundShader("sound/player_jump-01.mp3");
    this.soundJump.LoadSound("sound/player_jump-02.mp3");
    this.soundJump.LoadSound("sound/player_jump-03.mp3");
    this.soundJump.LoadSound("sound/player_jump-04.mp3");
    this.soundJump.LoadSound("sound/player_jump-05.mp3");
    this.soundJump.LoadSound("sound/player_jump-06.mp3");
    this.soundLowHealth = new SoundSystem.SoundShader("sound/player_low_health_warn-01.wav");
    this.soundLowHealth.LoadSound("sound/player_low_health_warn-02.wav");
    this.soundLowHealth.LoadSound("sound/player_low_health_warn-03.wav");
    this.soundLowHealth.LoadSound("sound/player_low_health_warn-04.wav");
    this.soundLowHealth.LoadSound("sound/player_low_health_warn-05.wav");

    // Use for light settings on character face on spawn
    this.lifeLight = { color: 0xFF9500, intensity: 1.5, distance: 5, decay: 1, light: undefined };
    this.lifeLightLocalPosition = { x: 0.0, y: 1.1, z: 1.3 };
    this.faceLight = { color: 0xFF9500, intensity: 1.334, distance: 30, decay: 1, light: undefined };
    this.faceLightLocalPosition = { x: 0.0, y: -2.0, z: 1.5 };

    this.treadRotationSpeed = 2 * Math.PI;
    this.baseSpeed = 13;
    this.minSpeed = 5;
    this.attackingSpeedMultiplier = 0.55;
    this.maxBuffSpeed = 17;
    this.buffSpeedPerAltAmount = 5;
    this.buffAttackPerAltAmount = 1;
    PlayerStore.speed = this.baseSpeed;
    this.velocity = new THREE.Vector3();

    this.minAttackScaler = .3;
    this.buffAttack = 1; // Attack multiplier from buff
    this.minBuffAttack = 1;
    this.maxBuffAttack = 2;
    this.attackBonus = 0; // Used to track amount of buff damage

    this.baseHealthRegen = 0;
    this.maxBuffHealthRegen = 10;
    this.buffEmitterRadius = 1; // Spawn radius
    this.buffParticleLifeTime = 2;
    this.buffParticleLifeTimeMin = 1;
    this.buffParticleForce = 1.7;
    this.buffParticleHeightOffset = 0.7; // Offset up from feet

    this.minChromaticDistortion = 0.025; // Minimum CA, Set based on health
    this.maxChromaticDistortion = 0.2; // Maximum CA, Set based on health
    this.hitAddChromaticDistortion = 0.1; // Amount of CA to add when hit

    this.currentFlashTime = 0; // Used to flash player when hit
    this.currentHoldFlashTime = 0; // Used to flash player when hit
    this.currentDeFlashTime = 0; // Used to flash player when hit

    this.weapon = new WeaponUpgradeable();
    this.weaponStamp = new Weapon.WeaponStamp();

    this.frameHealthRegen = 0;

    this.resetSpawnHeight = 30;
    this.belowWorldThreshold = -10;

    Player.prototype.getBodyMeshName = function () {
        return GameStore.ugcManager.playerMeshOverrideName || this.voxNameBody;
    };

    Player.prototype.UpdateHealthBoxes = function () {
        // Update health boxes
        this.hudHealthBoxCount = Math.round(PlayerStore.maxHealth / this.hpPerBar);

        for (var i = this.healthBoxes.length; i < this.hudHealthBoxCount; i++) {
            var color = void 0;
            switch (i) {
                case 0:
                    color = "rgb(255, 36, 0)";
                    break;
                case 1:
                    color = "rgb(255, 72, 0)";
                    break;
                case 2:
                    color = "rgb(255, 100, 0)";
                    break;
                case 3:
                    color = "rgb(255, 112, 0)";
                    break;
                case 4:
                    color = "rgb(255, 129, 0)";
                    break;
                case 5:
                    color = "rgb(255, 138, 0)";
                    break;
                case 6:
                    color = "rgb(255, 144, 0)";
                    break;
                case 7:
                    color = "rgb(255, 149, 0)";
                    break;
                default:
                    color = "rgb(255, 149, 0)";
            }

            this.healthBoxColorList.push(color);
        }

        var remove = this.healthBoxes.length - Math.ceil(PlayerStore.health / PlayerStore.maxHealth * this.healthBoxCount);

        if (remove > 0) {
            for (var i = 0; i < remove; i++) {
                this.meshBody.remove(this.healthBoxes.pop());
            }
        } else if (remove < 0) {
            this.CreateHealth();
        }

        this.setLifeLightColorFromHealth();
    };

    Player.prototype.CreateHealth = function () {

        var boxCount = Math.min(Math.ceil(PlayerStore.health / PlayerStore.maxHealth * this.healthBoxCount), this.healthBoxCount);
        for (var i = this.healthBoxes.length; i < boxCount; ++i) {
            var color = this.healthBoxColorList[i];
            var scale = 0.1;
            var geo = new THREE.BoxGeometry(scale, scale, scale);
            var mat = new THREE.MeshStandardMaterial({ "color": color, "emissive": color });
            mat.emissive.multiplyScalar(1.4);
            var b = new THREE.Mesh(geo, mat);
            b.position.set(i * scale + scale / 2 - this.healthBoxCount / 2 * scale, 0.75, 0.4);
            this.healthBoxes.push(b);
            this.meshBody.add(b);
        }
    };

    Player.prototype.setLifeLightColorFromHealth = function () {
        if (this.healthBoxes.length > 0 && this.healthBoxes[this.healthBoxes.length - 1].material) {
            var color = this.healthBoxes[this.healthBoxes.length - 1].material.color;
            color = Utils.rgbToHex(Math.round(255 * color.r), Math.round(255 * color.g), Math.round(255 * color.b));
            this.lifeLight.light.color.setHex(color);
        }
    };

    Player.prototype.LoadChunk = function (voxName, pos) {
        var chunk = GameStore.GameInstance.voxLoader.GetModel(voxName);

        var mesh = chunk.mesh;
        mesh.that = this;
        mesh.position.set(pos.x, pos.y, pos.z + 0.2);
        mesh.geometry.computeBoundingBox();

        GameStore.GameInstance.targets.push(mesh);
        GameStore.GameInstance.scene.add(mesh);

        return chunk;
    };

    Player.prototype.Remove = function (playerOnly) {
        GameStore.GameInstance.scene.remove(this.mesh);
        GameStore.GameInstance.scene.remove(this.meshBody);
        GameStore.GameInstance.scene.remove(this.collisionMesh);
        if (!playerOnly) {
            GameStore.GameInstance.scene.remove(this.attachedBox);
        }

        var collisionIndex = GameStore.GameInstance.raycastMeshes.indexOf(this.collisionMesh);
        if (collisionIndex !== -1) {
            GameStore.GameInstance.raycastMeshes.splice(collisionIndex, 1);
        }

        if (!playerOnly) {
            var meshIndex = GameStore.GameInstance.raycastMeshes.indexOf(this.attachedBox.collisionMesh);
            if (meshIndex !== -1) {
                GameStore.GameInstance.raycastMeshes.splice(meshIndex, 1);
            }

            GameStore.GameInstance.scene.remove(this.attachedBox.collisionMesh);
        }

        for (var i = 0; i < this.mflashes.length; i++) {
            GameStore.GameInstance.scene.remove(this.mflashes[i]);
        }
    };

    Player.prototype.recolorFromDataArray = function (dataArray) {
        var wasPackageAttached = this.attachedBox.isAttached;

        this.Remove(true);

        var chunk = GameStore.GameInstance.voxLoader.GetModel(this.getBodyMeshName());
        var colorMap = GameStore.GameInstance.voxLoader.getColorMap(this.getBodyMeshName());

        for (var x = 0; x < chunk.chunkSizeX; x++) {
            for (var y = 0; y < chunk.chunkSizeY; y++) {
                for (var z = 0; z < chunk.chunkSizeZ; z++) {
                    var block = chunk.blocks[x][y][z];
                    if (block.getActive()) {
                        var mapIndex = colorMap[block.getR()][block.getG()][block.getB()][block.getA()];
                        var stampColorIndex = dataArray[mapIndex];
                        if (stampColorIndex > 0) {
                            var color = GameStore.GameInstance.stampManager.getColorFromCode(stampColorIndex - 1);
                            block.setR(color.r);
                            block.setG(color.g);
                            block.setB(color.b);
                        }
                    }
                }
            }
        }

        chunk.Rebuild();

        var mesh = chunk.mesh;
        mesh.that = this;

        mesh.geometry.center();
        mesh.position.set(0, 0, 1.2);

        mesh.rotation.x = 0;
        mesh.rotation.y = 0;
        mesh.rotation.z = Math.PI * 2;

        mesh.geometry.computeBoundingBox();

        GameStore.GameInstance.targets.push(mesh);
        GameStore.GameInstance.scene.add(mesh);

        this.spawnMeshes(this.mesh.position, chunk, true);

        if (wasPackageAttached) {
            this.attachedBox.Attach(this.meshBody, true);
        }
    };

    Player.prototype.spawnOverrideMesh = function () {
        var wasPackageAttached = this.attachedBox.isAttached;

        this.Remove(true);

        var chunk = GameStore.GameInstance.voxLoader.GetModel(this.getBodyMeshName());

        var mesh = chunk.mesh;
        mesh.that = this;

        mesh.geometry.center();
        mesh.position.set(0, 0, 1.2);

        mesh.rotation.x = 0;
        mesh.rotation.y = 0;
        mesh.rotation.z = Math.PI * 2;

        mesh.geometry.computeBoundingBox();

        GameStore.GameInstance.targets.push(mesh);
        GameStore.GameInstance.scene.add(mesh);

        this.spawnMeshes(this.mesh.position, chunk, true);

        if (wasPackageAttached) {
            this.attachedBox.Attach(this.meshBody, true);
        }
    };

    Player.prototype.spawnMeshes = function (pos, torsoChunk, playerOnly) {
        this.team = GameStore.Teams.Collaborators;
        this.keyboard = new THREEx.KeyboardState();

        this.chunk = this.LoadChunk(this.voxNameTracks, pos);
        this.mesh = this.chunk.mesh;
        this.mesh.scale.set(this.scale, this.scale, this.scale);

        var posBody = { x: 0, y: 0, z: 1 };
        this.chunkBody = torsoChunk || this.LoadChunk(this.getBodyMeshName(), posBody);
        this.meshBody = this.chunkBody.mesh;
        this.meshBody.rotation.x = 0;
        this.meshBody.rotation.z = Math.PI * 2;

        // Example to add mesh to the outline shader, leaving this until we have evil stamps
        // let selectedObjects = []
        // selectedObjects.push(this.mesh)
        // GameStore.GameInstance.outlinePass.selectedObjects = selectedObjects

        this.mflashes = [];
        var posFlash = { x: -0.7, y: -1.7, z: -0.6 };
        this.mflashes.push(this.LoadChunk("player_mflash_1", posFlash).mesh);
        this.mflashes.push(this.LoadChunk("player_mflash_2", posFlash).mesh);
        this.mflashes.push(this.LoadChunk("player_mflash_3", posFlash).mesh);
        this.mflashes.push(this.LoadChunk("player_mflash_4", posFlash).mesh);
        this.muzzleFlashIndex = 0;
        this.muzzleFlashDisplayTime = 0;
        this.muzzleFlashDisplayTimeStart = 0.06;

        for (var i = 0; i < this.mflashes.length; i++) {
            this.mflashes[i].scale.set(this.scale * 1.5, this.scale * 1.5, this.scale * 1.5);
            this.mflashes[i].rotation.set(Math.PI / 2, Math.PI / 2, Math.PI / 2);
            this.meshBody.add(this.mflashes[i]);
            this.mflashes[i].castShadow = false;
            this.mflashes[i].visible = false;
        }

        this.mesh.add(this.meshBody);

        // Attach sounds
        if (this.soundJump.Object3D) {
            this.mesh.add(this.soundJump.Object3D);
        }

        if (this.soundLowHealth.Object3D) {
            this.mesh.add(this.soundLowHealth.Object3D);
        }

        // Setup Light for Face
        var light = new THREE.PointLight(this.faceLight.color, this.faceLight.intensity, this.faceLight.distance, this.faceLight.decay);
        this.faceLight.light = light;
        light.position.set(this.faceLightLocalPosition.x, this.faceLightLocalPosition.y, this.faceLightLocalPosition.z);
        light.castShadow = true;
        this.meshBody.add(light);

        // Set up shadow properties for the light
        light.shadow.mapSize.width = 512;
        light.shadow.mapSize.height = 512;
        light.shadow.camera.near = 0.5;
        light.shadow.camera.far = 100;
        light.shadow.radius = 10;
        light.shadow.bias = -0.00001;

        // Setup Light for Battery
        light = new THREE.PointLight(this.lifeLight.color, this.lifeLight.intensity, this.lifeLight.distance, this.lifeLight.decay);
        this.lifeLight.light = light;
        light.position.set(this.lifeLightLocalPosition.x, this.lifeLightLocalPosition.y, this.lifeLightLocalPosition.z);
        light.castShadow = false;
        // this.meshBody.add( light ) // Removed for now since it cause shader issues

        // Init direction
        var worldPos = new THREE.Vector3();
        worldPos.sub(this.mesh.position).normalize();
        this.direction = worldPos;
        this.customCollisionBounds = new THREE.Box3(new THREE.Vector3(-1.4, 0, -1.4), new THREE.Vector3(1.4, 4, 1.4));

        var collisionBoundsBox = this.meshBody.geometry.boundingBox;

        var collisionBoundsBoxSize = new THREE.Vector3();
        collisionBoundsBox.getSize(collisionBoundsBoxSize);

        var geometry = new THREE.BoxGeometry(collisionBoundsBoxSize.x * this.scale, collisionBoundsBoxSize.z * this.scale, collisionBoundsBoxSize.y * this.scale);
        var material = new THREE.MeshBasicMaterial({ color: 0x00ff00, opacity: 0.5, wireframe: true });
        material.visible = GameStore.GameInstance.drawBoundingMeshes;
        this.collisionMesh = new THREE.Mesh(geometry, material);
        this.collisionMesh.that = this;

        this.collisionMeshOffset = new THREE.Vector3();
        this.collisionMeshOffset = collisionBoundsBox.getCenter(this.collisionMeshOffset).clone();

        GameStore.GameInstance.raycastMeshes.push(this.collisionMesh);
        GameStore.GameInstance.scene.add(this.collisionMesh);

        this.UpdateHealthBoxes();

        // Add fire position
        this.firePos = new THREE.Object3D();
        this.firePos.position.set(-0.8, -1.9, -0.4);
        this.meshBody.add(this.firePos);

        this.firePos2 = new THREE.Object3D();
        this.firePos2.position.set(0.8, -1.9, -0.4);
        this.meshBody.add(this.firePos2);

        if (!playerOnly) {
            this.SpawnPackage();
        }
    };

    Player.prototype.FindSpawnDir = function () {
        if (GameStore.GameInstance.levelManager && GameStore.GameInstance.levelManager.roomList[0]) {
            // Player is offset away from the next room to start near door
            var firstRoom = GameStore.GameInstance.levelManager.roomList[0];
            var toDir = GameStore.GameInstance.roomData[firstRoom.roomType].openings.to;
            var spawnDir = new THREE.Euler();
            spawnDir.copy(this.mesh.rotation);

            // 0 West, 1 North, 2 East, 3 South
            switch (toDir) {
                case 0:
                    spawnDir.z = -1.5708;
                    break;
                case 1:
                    spawnDir.z = 3.14159;
                    break;
                case 2:
                    spawnDir.z = 1.5708;
                    break;
                case 3:
                    spawnDir.z = 0;
                    break;
                default:
                    break;
            }

            return spawnDir;
        } else {
            return this.mesh.rotation;
        }
    };

    Player.prototype.FindSpawnPos = function () {
        if (GameStore.GameInstance.levelManager && GameStore.GameInstance.levelManager.roomList[0]) {
            // Player is offset away from the next room to start near door
            var firstRoom = GameStore.GameInstance.levelManager.roomList[0];
            var toDir = GameStore.GameInstance.roomData[firstRoom.roomType].openings.to;
            var spawnPos = new THREE.Vector3();
            spawnPos.copy(this.pos);

            // 0 West, 1 North, 2 East, 3 South
            switch (toDir) {
                case 0:
                    spawnPos.z -= 4;
                    spawnPos.x += 22;
                    break;
                case 1:
                    spawnPos.z += 1;
                    break;
                case 2:
                    spawnPos.z -= 4;
                    spawnPos.x -= 22;
                    break;
                case 3:
                    spawnPos.x -= 1;
                    spawnPos.z -= 22;
                    break;
                default:
                    break;
            }

            var groundHeight = this.GetHeight(spawnPos.x, spawnPos.z) + this.offset.y;
            spawnPos.y = groundHeight;

            return spawnPos;
        } else {
            return this.pos;
        }
    };

    Player.prototype.Create = function (pos) {
        var _this = this;

        this.pos = pos;
        this.spawnMeshes(pos);

        // Place camera before offseting player position
        this.cameraObj = new TopDownCamera(this.mesh.position);

        // Offsets player position to be closer to spawn door
        this.mesh.position.copy(this.FindSpawnPos());

        // Faces player toward next room
        this.mesh.rotation.copy(this.FindSpawnDir());
        this.direction = Utils.GetForwardVector(this.mesh);

        this.loaded = true;

        GameStore.GameInstance.upgradeManager.addOnChangedCallback(UpgradeManager.EUpgradeType.IncreaseHealth, function (newCount) {
            PlayerStore.health += _this.healthUpgradeAmount;
            PlayerStore.maxHealth += _this.healthUpgradeAmount;
        });

        GameStore.GameInstance.objects.push(this);

        // TBD: fix this bug! This is just a workaround for player 
        var that = this;
        setTimeout(function () {
            that.AddBindings();
            // Hack: Don't lock cursor for now
            //Utils.LockPointer()
            keys_enabled = 1;
        }, 1500);
    };

    Player.prototype.SpawnPackage = function () {
        var firstRoomPos = GameStore.GameInstance.levelManager.getRoomCenterPosFromWorld(this.mesh.position.x, this.mesh.position.z);
        var groundHeight = this.GetHeight(firstRoomPos.x, firstRoomPos.y);
        this.attachedBox = GameStore.GameInstance.aiManager.spawnAi(AiManager.EAiType.Goal, firstRoomPos.x - 0.5, groundHeight, firstRoomPos.y - 3);

        this.attachedBox.mesh.rotation.set(1.5708, 0, Utils.DegToRad(15));
        this.attachedBox.mesh.scale.set(this.scale, this.scale, this.scale);

        GameStore.GameInstance.scene.add(this.attachedBox.mesh);

        this.attachedBox.collisionMesh.position.set(0, 0, 0);
        this.attachedBox.mesh.add(this.attachedBox.collisionMesh);
        this.attachedBox.collisionMesh.material.visible = GameStore.GameInstance.drawBoundingMeshes;

        this.attachedBox.canPickup = true;
    };

    Player.prototype.StartHitFlash = function () {
        this.currentFlashTime = this.flashTime;
        this.currentHoldFlashTime = 0;
        this.currentDeFlashTime = 0;
    };

    Player.prototype.HandleHitFlash = function (delta) {
        // Lerp to white
        if (this.currentFlashTime > 0) {
            var alpha = 1 - this.currentFlashTime / this.flashTime; // Starts at 0 and lerps to 1

            this.mesh.material.emissive.lerp(this.flashColor, alpha);
            this.meshBody.material.emissive.lerp(this.flashColor, alpha);
            this.currentFlashTime -= delta;

            var minDistortion = Utils.MapRangeClamped(PlayerStore.health, PlayerStore.maxHealth, 0, this.minChromaticDistortion, this.maxChromaticDistortion);
            var totalDistortion = alpha * this.hitAddChromaticDistortion + minDistortion;
            GameStore.GameInstance.setChromacticDistortion(totalDistortion);

            // If complete setup hold time
            if (this.currentFlashTime <= 0) {
                this.currentFlashTime = 0;
                this.mesh.material.emissive.lerp(this.flashColor, 1);
                this.meshBody.material.emissive.lerp(this.flashColor, 1);
                this.currentHoldFlashTime = this.holdFlashTime;
            }
        }

        // Sustain flash
        if (this.currentHoldFlashTime > 0) {
            this.currentHoldFlashTime -= delta;

            // If complete setup deflash time
            if (this.currentHoldFlashTime <= 0) {
                this.currentHoldFlashTime = 0;
                this.currentDeFlashTime = this.deFlashTime;
            }
        }

        // Deflash
        if (this.currentDeFlashTime > 0) {
            var alpha = 1 - this.currentDeFlashTime / this.deFlashTime; // Starts at 0 and lerps to 1

            this.mesh.material.emissive.lerp(this.baseColor, alpha);
            this.meshBody.material.emissive.lerp(this.baseColor, alpha);
            this.currentDeFlashTime -= delta;

            var _minDistortion = Utils.MapRangeClamped(PlayerStore.health, PlayerStore.maxHealth, 0, this.minChromaticDistortion, this.maxChromaticDistortion);
            var _totalDistortion = (1 - alpha) * this.hitAddChromaticDistortion + _minDistortion;
            GameStore.GameInstance.setChromacticDistortion(_totalDistortion);

            // Done!
            if (this.currentDeFlashTime <= 0) {
                this.currentDeFlashTime = 0;
                this.mesh.material.emissive.lerp(this.baseColor, 1);
                this.meshBody.material.emissive.lerp(this.baseColor, 1);
            }
        }
    };

    Player.prototype.UpdateBuffs = function (time, delta) {
        // Speed Buff
        var attackingSpeed = this.muzzleFlashDisplayTime > 0 ? Utils.MapRangeClamped(Math.pow(1 - this.muzzleFlashDisplayTime / this.muzzleFlashDisplayTimeStart, 4), 0, 1, this.attackingSpeedMultiplier, 1) : 1;

        PlayerStore.speed = Math.max(this.minSpeed, this.baseSpeed * attackingSpeed + this.maxBuffSpeed * BuffManager.buffInfo[1].amount + this.buffSpeedPerAltAmount * BuffManager.buffInfo[1].altAmount);

        // Heal Buff
        var oldHealth = PlayerStore.health;

        var buffHealthAmount = Math.max(0, BuffManager.buffInfo[0].amount + BuffManager.buffInfo[0].altAmount);
        PlayerStore.health = Math.min(PlayerStore.maxHealth, PlayerStore.health + (this.maxBuffHealthRegen - this.baseHealthRegen) * buffHealthAmount * delta);
        PlayerStore.takeDamageScaler = Math.max(1, 1 - BuffManager.buffInfo[0].amount);

        // Update chromatic distortion if not currently showing hit anim or shoot anim
        if (this.muzzleFlashDisplayTime <= 0 && this.currentFlashTime <= 0 && this.currentHoldFlashTime <= 0 && this.currentDeFlashTime <= 0) {
            var minDistortion = Utils.MapRangeClamped(PlayerStore.health, PlayerStore.maxHealth, 0, this.minChromaticDistortion, this.maxChromaticDistortion);
            GameStore.GameInstance.setChromacticDistortion(minDistortion);
        }

        this.frameHealthRegen = Math.max(0, PlayerStore.health - oldHealth);

        if (time > this.currentHealthBoxInterval) {
            this.currentHealthBoxInterval = time + this.updateHealthBoxInterval;
            this.UpdateHealthBoxes();
        }

        // Attack Buff
        this.buffAttack = Math.max(this.minAttackScaler, this.minBuffAttack + BuffManager.buffInfo[2].amount * (this.maxBuffAttack - this.minBuffAttack) + BuffManager.buffInfo[2].altAmount * this.buffAttackPerAltAmount);

        if (this.buffAttack > 1) {
            this.weapon.fireSoundShader.detune = -600;
            this.weapon.fireSoundShader.SetShaderVolume(0.75);
        } else if (this.buffAttack < 1) {
            this.weapon.fireSoundShader.detune = 1000;
            this.weapon.fireSoundShader.SetShaderVolume(0.4);
        } else {
            this.weapon.fireSoundShader.detune = 0;
            this.weapon.fireSoundShader.SetShaderVolume(0.5);
        }

        // Show buffs
        this.EmitFloaters(delta);
    };

    Player.prototype.EmitFloaters = function (delta) {
        var buffInfo = BuffManager.buffInfo;
        for (var i = 0; i < buffInfo.length; i++) {
            var totalAmount = Math.min(1, buffInfo[i].amount + buffInfo[i].altAmount);
            if (totalAmount > 0) {
                // Spawn rate decided by amount of buff
                var spawnRate = buffInfo[i].spawnRate * totalAmount;
                buffInfo[i].timeSinceLastEmitterSpawned += delta * buffInfo[i].deltaScalar;

                if (buffInfo[i].timeSinceLastEmitterSpawned > 1 / spawnRate) {
                    buffInfo[i].timeSinceLastEmitterSpawned = 0;

                    // Find spawn position
                    var randomX = Utils.RandomRange(-this.buffEmitterRadius, this.buffEmitterRadius);
                    var randomY = Utils.RandomRange(-this.buffEmitterRadius, this.buffEmitterRadius);
                    var randomZ = Utils.RandomRange(-this.buffEmitterRadius, this.buffEmitterRadius);

                    var pos = new THREE.Vector3(this.mesh.position.x + randomX, this.mesh.position.y + randomY + this.buffParticleHeightOffset, this.mesh.position.z + randomZ);

                    var scale = 0.1 * this.scale * 1.5;
                    var color = buffInfo[i].buffParticleColor;
                    this.SpawnFloater(pos, this.buffParticleLifeTime, this.buffParticleLifeTimeMin, buffInfo[i].deltaScalar, scale, color, this.velocity);
                }
            }
        }
    };

    /**
     * @description Spawn cubes for some percent of the voxels within this chunk
     * @param {Object} pos Vector3 of the spawn position.
     * @param {number} lifeTime Lifetime of spawned cubes.
     * @param {number} lifeTimeMin Minimum lifetime of spawned cubes.
     * @param {number} deltaScalar Amount to scale delta by
     * @param {Object} color THREE.Color Object
     * @param {number} [scale] Amount to scale the spawned cubes by.
     * @param {Object} [parentVelocity] Velocity of exploding parent.
     */
    Player.prototype.SpawnFloater = function (pos, lifeTime, lifeTimeMin, deltaScalar, scale, color, parentVelocity) {
        if (scale === undefined) {
            scale = this.scale;
        }

        if (parentVelocity === undefined) {
            parentVelocity = new THREE.Vector3();
        }

        var block = undefined;
        block = GameStore.GameInstance.physBlockPool.Get();
        if (block !== undefined) {
            block.CreateFloater(pos.x, pos.y, pos.z, scale, Math.round(color.r * 255), Math.round(color.g * 255), Math.round(color.b * 255), lifeTime, lifeTimeMin, this.buffParticleForce, 0, color.getHex(), parentVelocity, deltaScalar);
        }
    };

    this.debugKeyboardPressed = function (key) {
        return GameStore.hostData.name !== "PROD" && this.keyboard.pressed(key);
    };

    this.tryMovePlayer = function (moveDir, delta) {
        var moveDistance = PlayerStore.speed * delta;
        this.nextPosition.copy(this.mesh.position).add(moveDir.clampLength(0, 1).multiplyScalar(moveDistance));
        this.nextPosition = GameStore.GameInstance.levelManager.checkRoomCollision(this.mesh.position, this.nextPosition, this.customCollisionBounds, true);
        var stepHeightAllowed = this.ChangeHeight(this.nextPosition.x, this.nextPosition.z, delta);
        if (stepHeightAllowed) {
            this.velocity.copy(this.nextPosition).sub(this.mesh.position);

            this.mesh.position.x = this.nextPosition.x;
            this.mesh.position.z = this.nextPosition.z;

            return true;
        } else {
            return false;
        }
    };

    Player.prototype.HandleMuzzleFlash = function (delta) {
        if (this.muzzleFlashDisplayTime > 0) {
            this.muzzleFlashDisplayTime -= delta;

            // Update chromatic distortion if not currently showing hit anim
            if (this.currentFlashTime <= 0 && this.currentHoldFlashTime <= 0 && this.currentDeFlashTime <= 0) {
                var alpha = 1 - this.muzzleFlashDisplayTime / this.muzzleFlashDisplayTimeStart; // Starts at 0 and lerps to 1
                var minDistortion = Utils.MapRangeClamped(PlayerStore.health, PlayerStore.maxHealth, 0, this.minChromaticDistortion, this.maxChromaticDistortion);
                var totalDistortion = alpha * this.hitAddChromaticDistortion * 0.2 + minDistortion;
                GameStore.GameInstance.setChromacticDistortion(totalDistortion);
            }
        } else if (this.mflashes[this.muzzleFlashIndex].visible) {
            this.mflashes[this.muzzleFlashIndex].visible = false;
            this.faceLight.light.intensity = this.faceLight.intensity;

            // Update chromatic distortion if not currently showing hit anim
            if (this.currentFlashTime <= 0 && this.currentHoldFlashTime <= 0 && this.currentDeFlashTime <= 0) {
                var _minDistortion2 = Utils.MapRangeClamped(PlayerStore.health, PlayerStore.maxHealth, 0, this.minChromaticDistortion, this.maxChromaticDistortion);
                GameStore.GameInstance.setChromacticDistortion(_minDistortion2);
            }
        }
    };

    Player.prototype.setNumberKeyCallback = function (callback) {
        this.numberPressedCallback = callback;
    };

    Player.prototype.Draw = function (time, delta) {
        this.gamePad.update();

        this.UpdateBuffs(time, delta);

        this.HandleHitFlash(delta);

        this.HandleMuzzleFlash(delta);

        if (this.destructionMode) {
            this.godMode = true;
            this.wfDelta += delta;
        }

        this.updateStampMode(delta);

        // Only allow movement when alive
        if (!this.dead) {
            this.jumpCooldown -= delta;
            var gamePadOneSetup = this.gamePad.buttonValues !== undefined && this.gamePad.buttonValues[0] !== undefined;
            var gamepadJump = gamePadOneSetup && (
            // https://w3c.github.io/gamepad/#remapping
            this.gamePad.buttonValues[0][0] !== undefined && this.gamePad.buttonValues[0][0] >= 1 || // 'A' on Xbox
            this.gamePad.buttonValues[0][4] !== undefined && this.gamePad.buttonValues[0][4] >= 1 || // 'Left Bumper' on Xbox
            this.gamePad.buttonValues[0][5] !== undefined && this.gamePad.buttonValues[0][5] >= 1 // 'Right Bumper' on Xbox
            );
            if ((this.keyboard.pressed("space") || gamepadJump) && this.jumpCooldown <= 0) {
                if (!this.falling) {
                    this.falling = true;
                    this.jumpCooldown = 0.6;
                    this.velocityY = GameStore.GameInstance.upgradeManager.getIncreasedJumpHeightModifier();

                    this.soundJump.Play(this.mesh.position);
                }

                GameStore.stateManager.updateInteractionTime();
            }

            if (this.debugKeyboardPressed("P")) {
                if (this.wfDelta < 0.2) {
                    return;
                }
                this.wfDelta = 0;
                var radius = 2 + Math.random() * 2;
                GameStore.GameInstance.chunkManager.RemoveSphere(this.mesh.position.x, this.mesh.position.y, this.mesh.position.z, radius);
                console.log("Free blocks: " + GameStore.GameInstance.physBlockPool.Free());
            }

            if (this.debugKeyboardPressed("m")) {
                console.log("MESH Position: ");
                console.log(this.mesh.position);
                console.log(GameStore.GameInstance.camera.position);
            }

            if (this.debugKeyboardPressed("U")) {
                GameStore.GameInstance.restartLevel();
            }

            if (this.debugKeyboardPressed("y")) {
                this.cameraObj.pos.add(new THREE.Vector3(0, 1, 0));
                console.log(this.cameraObj.pos);
            }

            if (this.debugKeyboardPressed("h")) {
                this.cameraObj.pos.sub(new THREE.Vector3(0, 1, 0));
                console.log(this.cameraObj.pos);
            }

            if (this.keyboard.pressed("esc")) {
                if (!this.escapePressed) {
                    this.escapePressed = true;
                }
            } else if (this.escapePressed) {
                this.escapePressed = false;

                GameStore.optionsMenu.setupDarkTheme();

                if (GameStore.optionsMenu.enabled) {
                    GameStore.optionsMenu.closeClick();
                } else {
                    GameStore.optionsMenu.openClick();
                }
            }

            // Handle gamepad censor - left trigger
            var gamePadTrigger = gamePadOneSetup && this.gamePad.buttonValues[0][6] !== undefined;
            if (gamePadTrigger && this.gamePad.buttonValues[0][6] >= 1) {
                if (this.stampCensorEnabled) {
                    GameStore.GameInstance.stampManager.censoreStamp();
                    this.wasStampModeAction = true;
                }
            }

            // Handle gamepad raise - right trigger
            var gamePadRightTrigger = gamePadOneSetup && this.gamePad.buttonValues[0][7] !== undefined;
            if (gamePadRightTrigger && this.gamePad.buttonValues[0][7] >= 1) {
                if (this.stampToLifeEnabled) {
                    GameStore.GameInstance.stampManager.spawnStamp();
                    this.wasStampModeAction = true;
                    this.stampModePressed = true;
                }
            }

            // Handle gamepad


            for (var keyNum = 1; keyNum <= 3; ++keyNum) {
                if (this.keyboard.pressed(keyNum.toString())) {
                    if (this.numberPressedCallback !== undefined) {
                        this.numberPressedCallback(keyNum);
                    }
                }
            }

            // Ask for stamps - up d-pad
            var gamePadUp = gamePadOneSetup && this.gamePad.buttonValues[0][12] !== undefined;
            if (gamePadUp && this.gamePad.buttonValues[0][12] >= 1) {
                this.numberPressedCallback(1);
            }

            // Ask for boosts - left d-pad
            var gamePadLeft = gamePadOneSetup && this.gamePad.buttonValues[0][12] !== undefined;
            if (gamePadLeft && this.gamePad.buttonValues[0][14] >= 1) {
                this.numberPressedCallback(2);
            }

            // Leaderboard callout - left d-pad
            var gamePadRight = gamePadOneSetup && this.gamePad.buttonValues[0][12] !== undefined;
            if (gamePadRight && this.gamePad.buttonValues[0][15] >= 1) {
                this.numberPressedCallback(3);
            }

            var touchControls = GameStore.GameInstance.touchControls;
            var gamePadOneAxesSetup = this.gamePad.axesValues !== undefined && this.gamePad.axesValues[0] !== undefined;
            if (touchControls.leftVector.length() > 0) {
                this.moveDir.set(touchControls.leftVector.x, 0, touchControls.leftVector.y);
            } else if (gamePadOneAxesSetup && (this.gamePad.axesValues[0][0] || this.gamePad.axesValues[0][1])) {
                this.moveDir.set(this.gamePad.axesValues[0][0], 0, this.gamePad.axesValues[0][1]);
                this.moveDir.clampLength(0, 1);
            } else {
                this.moveDir.set(0, 0, 0);

                if (this.keyboard.pressed("W")) {
                    this.moveDir.z = -1;

                    GameStore.stateManager.updateInteractionTime();
                }

                if (this.keyboard.pressed("S")) {
                    this.moveDir.z = 1;

                    GameStore.stateManager.updateInteractionTime();
                }

                if (this.keyboard.pressed("A")) {
                    this.moveDir.x = -1;

                    GameStore.stateManager.updateInteractionTime();
                }

                if (this.keyboard.pressed("D")) {
                    this.moveDir.x = 1;

                    GameStore.stateManager.updateInteractionTime();
                }
            }

            GameStore.demoManager.updatePlayerMovement(time, delta, this);

            var moveDir = this.moveDir;

            var actualMoveDist = 0;
            var stepHeightAllowed = false;
            if (this.tryMovePlayer(moveDir, delta) || this.tryMovePlayer(new THREE.Vector3(Math.sign(moveDir.x), 0, 0), delta) || this.tryMovePlayer(new THREE.Vector3(0, 0, Math.sign(moveDir.z)), delta)) {

                actualMoveDist = this.velocity.length();
                stepHeightAllowed = true;
            }

            // Rotate tracks
            if (stepHeightAllowed && moveDir.length() > 0) {
                moveDir.normalize();
                var currentDir = new THREE.Vector3(Math.sin(this.mesh.rotation.z), 0, Math.cos(this.mesh.rotation.z));
                var dot = moveDir.dot(currentDir);
                var deltaAngle = Math.acos(dot);
                var frameRotAmount = this.treadRotationSpeed * delta;

                if (frameRotAmount >= deltaAngle) {
                    this.mesh.rotation.z = Math.atan2(moveDir.x, moveDir.z);
                } else {
                    var cross = moveDir.clone().cross(currentDir);
                    this.mesh.rotation.z -= Math.sign(cross.y) * frameRotAmount;
                }
            }

            GameStore.gamestateManager.recordPlayerData(this.frameHealthRegen, actualMoveDist, this.attackBonus);
            this.attackBonus = 0;

            // Rotate body
            if (GameStore.GameInstance.camera && this.mouseMoveEvent && !touchControls.enabled && !this.hideMouse) {
                var jevent = this.mouseMoveEvent;
                this.offsetX = jevent.clientX || jevent.x || jevent.offsetX;
                this.offsetY = jevent.clientY || jevent.y || jevent.offsetY;
                var nx = this.offsetX / this.container.clientWidth;
                var ny = 1 - this.offsetY / this.container.clientHeight;

                var unprojectPos = new THREE.Vector3(nx * 2 - 1, ny * 2 - 1, .5);
                this.nMousePos = unprojectPos.clone();

                var worldPos = GameStore.GameInstance.world.intersectWithPlane(this.nMousePos, new THREE.Plane(new THREE.Vector3(0, -1, 0), this.mesh.position.y));

                var worldDir = worldPos.clone().sub(this.mesh.position).normalize();

                var rot = Math.atan2(worldDir.x, worldDir.z);

                this.meshBody.rotation.x = 0;
                this.meshBody.rotation.z = rot - this.mesh.rotation.z;
                this.direction = worldDir;
            }

            GameStore.demoManager.updatePlayerRotation(time, delta, this);

            if (touchControls.rightVector.length() > 0) {
                var _worldDir = touchControls.rightVector;

                var _rot = Math.atan2(_worldDir.x, _worldDir.y);

                this.meshBody.rotation.x = 0;
                this.meshBody.rotation.z = _rot - this.mesh.rotation.z;
                this.direction.set(_worldDir.x, 0, _worldDir.y);
            } else if (gamePadOneAxesSetup && (this.gamePad.axesValues[0][2] || this.gamePad.axesValues[0][3])) {
                var _rot2 = Math.atan2(this.gamePad.axesValues[0][2], this.gamePad.axesValues[0][3]);
                this.meshBody.rotation.x = 0;
                this.meshBody.rotation.z = _rot2 - this.mesh.rotation.z;
                this.direction.set(this.gamePad.axesValues[0][2], 0, this.gamePad.axesValues[0][3]);

                this.hideMouse = true;
                if (!this.weapon.isActive) {
                    this.weapon.Activate(this);
                }
            } else if (this.hideMouse && this.weapon.isActive) {
                this.weapon.Deactivate();
            }

            var groundColor = this.getGroundColor(this.mesh.position.x, this.mesh.position.z);
            if (groundColor !== undefined) {
                var colorIndex = GameStore.GameInstance.stampManager.findCodeFromColor(groundColor);
                if (colorIndex !== -1) {
                    var buffIndex = BuffManager.buffInfo.findIndex(function (buffInfo) {
                        return buffInfo.stampColorIndex.includes(colorIndex);
                    });

                    if (this.standingStampAltInstanceId !== undefined && this.standingStampBuffType !== buffIndex) {
                        this.leaveStandingStamp();
                    }

                    if (buffIndex !== -1 && this.standingStampBuffType !== buffIndex) {
                        var standingStampData = GameStore.GameInstance.stampManager.getStampHistory(groundColor.stampId);
                        if (standingStampData !== undefined) {
                            this.standingStampBuffType = buffIndex;
                            this.standingStampAltInstanceId = GameStore.GameInstance.buffManager.addAltInstance(buffIndex, 1, standingStampData.tychoData.userId);
                        }
                    }
                } else {
                    this.leaveStandingStamp();
                }
            } else if (this.standingStampAltInstanceId !== undefined) {
                this.leaveStandingStamp();
            }

            if (this.debugKeyboardPressed("K")) {
                this.Die();
            }

            if (this.debugKeyboardPressed("O")) {
                this.Respawn();
            }

            if (this.debugKeyboardPressed("L")) {
                GameStore.GameInstance.aiManager.spawnAi(AiManager.EAiType.Simple, 120 - Math.random() * 110, 5, 120 - Math.random() * 70);
            }

            if (this.debugKeyboardPressed("B")) {
                if (this.pressedB !== true) {
                    GameStore.GameInstance.aiManager.removeAllAi();

                    this.pressedB = true;
                }
            } else {
                this.pressedB = false;
            }

            if (this.debugKeyboardPressed("Q")) {
                if (this.pressedQ !== true) {
                    this.recolorFromDataArray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);

                    this.pressedQ = true;
                }
            } else {
                this.pressedQ = false;
            }

            if (this.debugKeyboardPressed("Z")) {
                if (this.pressedZ !== true) {
                    GameStore.GameInstance.bitBotManager.addSubBot("testName" + Math.round(10 * Math.random()));

                    this.pressedZ = true;
                }
            } else {
                this.pressedZ = false;
            }
        }

        this.weapon.Update(time, delta);
        this.weaponStamp.Update(time, delta);

        this.UpdatePos(time, delta);
    };

    this.leaveStandingStamp = function () {
        GameStore.GameInstance.buffManager.removeAltInstance(this.standingStampAltInstanceId);
        this.standingStampAltInstanceId = undefined;
        this.standingStampBuffType = undefined;
    };

    this.updateStampMode = function (delta) {
        if (this.keyboard.pressed("shift") || this.keyboard.pressed("ctrl")) {
            this.stampModeEnabled = true;
            this.stampModeHoldTime += delta;

            GameStore.stateManager.updateInteractionTime();
        } else {

            // Just released this frame
            if (this.stampModeHoldTime > 0) {
                if (this.stampModeToggleEnabled) {
                    this.stampModeEnabled = false;
                    this.stampModeToggleEnabled = false;
                } else if (!this.wasStampModeAction) {
                    if (this.stampModeHoldTime < this.stampModeToggleThresholdTime) {
                        this.stampModeEnabled = true;
                        this.stampModeToggleEnabled = true;
                    } else {
                        this.stampModeEnabled = false;
                    }
                } else {
                    this.stampModeEnabled = false;
                }
            }

            this.wasStampModeAction = false;
            this.stampModeHoldTime = 0;
        }
    };

    Player.prototype.CheckForHealthWarning = function () {
        if (PlayerStore.health <= this.lowHealthWarningTheshold && !this.lowHealthWarned) {
            this.lowHealthWarned = true;
            this.soundLowHealth.Play(this.mesh.position);
        }
    };

    Player.prototype.DoDamage = function (damage, team) {
        if (this.godMode) {
            return;
        }

        if (team === undefined) {
            team = GameStore.Teams.Threat;
        }

        var adjustedDamage = PlayerStore.takeDamageScaler * damage;

        if (team !== this.team) {
            PlayerStore.health -= adjustedDamage;
            this.StartHitFlash();
            this.UpdateHealthBoxes();
            this.CheckForHealthWarning();
        }

        if (PlayerStore.health <= 0) {
            this.Die();

            GameStore.gamestateManager.onPlayerKilled(adjustedDamage);

            GameStore.hubbleManager.sendHubbleEvent("died");
        }
    };

    Player.prototype.Die = function (skipResawn) {
        if (this.godMode) {
            return;
        }

        GameStore.GameInstance.chunkManager.Gib(this.mesh.position.x, this.mesh.position.z, 4 + Math.random() * 2);

        this.chunk.Explode(this.mesh.position, this.scale * 2, false);

        this.mesh.visible = false;

        // Disable collision
        var collisionIndex = GameStore.GameInstance.raycastMeshes.indexOf(this.collisionMesh);
        if (collisionIndex !== -1) {
            GameStore.GameInstance.raycastMeshes.splice(collisionIndex, 1);
        }

        this.dead = true;
        this.killedByDie = true;
    };

    Player.prototype.respawnPlayer = function () {
        this.dead = false;
        this.mesh.visible = true;
        this.killedByDie = false;

        // Reset health
        PlayerStore.health = PlayerStore.maxHealth;
        GameStore.GameInstance.setChromacticDistortion(this.minChromaticDistortion);
        this.lowHealthWarned = false;
        this.UpdateHealthBoxes();

        // Enable collision
        GameStore.GameInstance.raycastMeshes.push(this.collisionMesh);

        // Move back to spawn position
        this.mesh.position.x = this.pos.x;
        this.mesh.position.y = this.pos.y;
        this.mesh.position.z = this.pos.z;

        // Reset camera
        this.cameraObj = new TopDownCamera(this.mesh.position);

        // Offset position to be near door
        this.mesh.position.copy(this.FindSpawnPos());

        // Face toward next room
        this.mesh.rotation.copy(this.FindSpawnDir());
        this.direction = Utils.GetForwardVector(this.mesh);

        // Spawn box
        this.SpawnPackage();
    };

    /**
     * @description Finds height of ground at position
     * @param {number} posX X coordinate of position
     * @param {number} posZ Z coordinate of position
     * @returns {boolean} Returns height at position
     */
    Player.prototype.GetHeight = function (posX, posZ) {
        var height = GameStore.GameInstance.chunkManager.GetHeightWindow(posX + this.chunk.blockSize * this.chunk.chunkSizeX / 2, posZ + this.chunk.blockSize * this.chunk.chunkSizeX / 2, 0, this.mesh.position.y + this.heightClearance);

        height = height !== undefined ? height : -Infinity;

        return height;
    };

    Player.prototype.getGroundColor = function (x, z) {
        return GameStore.GameInstance.chunkManager.getGroundColor(x + this.chunk.blockSize * this.chunk.chunkSizeX / 2, z + this.chunk.blockSize * this.chunk.chunkSizeZ / 2);
    };

    var FALL_DAMAGE = 20;
    Player.prototype.onFallThroughWorld = function () {
        // Remove 20%
        this.DoDamage(FALL_DAMAGE);

        this.velocityY = 0;

        // Place player on last known ground position
        this.mesh.position.x = this.nextPosition.x = this.lastGroundPosition.x;
        this.mesh.position.y = this.nextPosition.y = this.resetSpawnHeight;
        this.mesh.position.z = this.nextPosition.z = this.lastGroundPosition.z;
    };

    /**
     * @description Use to move to new height given next position
     * @param {number} newX X coordinate of the next position
     * @param {number} newZ Z coordinate of the next position
     * @param {number} delta Delta time from tick
     * @returns {boolean} Returns true if the height change was successful
     */
    Player.prototype.ChangeHeight = function (newX, newZ, delta) {
        this.desiredHeight = this.GetHeight(newX, newZ) + this.offset.y;
        var currentFloorHeight = this.GetHeight(this.mesh.position.x, this.mesh.position.z) + this.offset.y;
        var heightDelta = this.desiredHeight - this.mesh.position.y;

        // If falling
        if (this.falling || this.desiredHeight < this.mesh.position.y) {
            this.velocityY -= this.gravity;
            var newPosY = this.mesh.position.y + this.velocityY;

            // Check if fell below lava line
            var allowMovement = true;
            if (newPosY < GameStore.GameInstance.currentMap.lavaPosition + this.belowWorldThreshold) {
                this.onFallThroughWorld();

                allowMovement = false;
            } else {
                // Check if done falling
                if (newPosY < this.desiredHeight) {
                    if (heightDelta < this.stepHeight) {
                        newPosY = this.desiredHeight;
                        this.velocityY = 0;
                        this.falling = false;
                    } else {
                        if (newPosY < currentFloorHeight) {
                            newPosY = currentFloorHeight;
                            this.velocityY = 0;
                            this.falling = false;
                        }

                        allowMovement = false;
                    }
                }

                this.mesh.position.y = newPosY;
            }

            return allowMovement;
        } else {
            // If just moving
            // Is this height change allowed?
            if (heightDelta <= this.stepHeight) {
                var heightChange = this.heightSpeed * delta;

                // Set new height
                if (heightChange > Math.abs(heightDelta)) {
                    this.mesh.position.y = this.desiredHeight;
                } else {
                    this.mesh.position.y += Math.sign(heightDelta) * heightChange;
                }

                // Copy last known ground position
                if (this.setLastGroundPositionTime <= 0) {
                    this.lastGroundPosition.copy(this.mesh.position);

                    // Only update last known ground position every 1s so player doesn't easily fall back in hole
                    this.setLastGroundPositionTime = 1;
                } else {
                    this.setLastGroundPositionTime -= delta;
                }

                return true;
            } else {
                return false;
            }
        }
    };

    Player.prototype.UpdatePos = function (time, delta) {
        var pos = new THREE.Vector3();
        pos.setFromMatrixPosition(this.meshBody.matrixWorld);
        var collisionMeshCenter = pos.add(this.collisionMeshOffset.clone().applyAxisAngle(new THREE.Vector3(0, 1, 0), this.mesh.rotation.z));
        this.collisionMesh.position.set(collisionMeshCenter.x, collisionMeshCenter.y, collisionMeshCenter.z);

        var rot = new THREE.Euler();
        rot.setFromRotationMatrix(this.meshBody.matrixWorld);
        this.collisionMesh.rotation.y = rot.z;

        this.cameraObj.Update(time, delta, this.mesh.position, this.moveDir);
    };

    Player.prototype.OnMouseMove = function (jevent) {
        if (!GameStore.demoManager.isDemoModeEnabled) {
            this.mouseMoveEvent = jevent;

            this.hideMouse = false;

            this.offsetX = jevent.offsetX || jevent.x || jevent.clientX;
            this.offsetY = jevent.offsetY || jevent.y || jevent.clientY;
        }
    };

    Player.prototype.Respawn = function () {
        // TBD: Better solution
        this.Create(this.pos);
    };

    Player.prototype.onWeaponFire = function () {
        this.showRandomMuzzleFlash();
    };

    Player.prototype.showRandomMuzzleFlash = function () {
        if (this.mflashes[this.muzzleFlashIndex].visible) {
            this.mflashes[this.muzzleFlashIndex].visible = false;
        }

        this.muzzleFlashIndex = Utils.RandomInt(this.mflashes.length);
        this.muzzleFlashDisplayTime = this.muzzleFlashDisplayTimeStart;
        this.mflashes[this.muzzleFlashIndex].visible = true;

        this.faceLight.light.intensity = this.faceLight.intensity * 1.2;
    };

    Player.prototype.OnMouseDown = function (event) {
        GameStore.stateManager.updateInteractionTime();

        if (this.dead || !this.mesh.visible || GameStore.GameInstance.onHUDElement) {
            return;
        }

        var mouseButton = event.button;

        if (mouseButton === 0 && !GameStore.GameInstance.touchControls.enabled) {
            this.weapon.Activate(this);
        } else if (mouseButton === 1) {
            if (this.stampCensorEnabled) {
                GameStore.GameInstance.stampManager.censoreStamp();
                this.wasStampModeAction = true;
            }
        } else if (mouseButton === 2) {
            if (this.stampToLifeEnabled) {
                GameStore.GameInstance.stampManager.spawnStamp();
                this.wasStampModeAction = true;
                this.stampModePressed = true;
            }
        }
    };

    this.IntersectMouseWithObjects = function (objectList) {
        if (this.nMousePos !== undefined) {
            var unprojectPos = this.hideMouse ? this.mesh.position.clone() : this.nMousePos.clone().unproject(GameStore.GameInstance.camera);

            var dir = unprojectPos.sub(GameStore.GameInstance.camera.position).normalize();

            var raycaster = new THREE.Raycaster(GameStore.GameInstance.camera.position, dir);
            return raycaster.intersectObjects(objectList);
        }

        return [];
    };

    Player.prototype.OnMouseUp = function (event) {
        this.weapon.Deactivate();
        this.weaponStamp.Deactivate();

        this.stampModePressed = false;
    };

    Player.prototype.OnRightMouseDown = function (event) {
        return false;
    };

    Player.prototype.AddBindings = function () {
        document.onmousedown = this.OnMouseDown.bind(this);
        document.onmouseup = this.OnMouseUp.bind(this);
        document.onmousemove = this.OnMouseMove.bind(this);
        document.oncontextmenu = this.OnRightMouseDown.bind(this);
    };
}

Player.prototype = new Player();
Player.prototype.constructor = Player;
module.exports = Player;

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var THREE = __webpack_require__(1);
var Utils = __webpack_require__(2);

var GameStore = __webpack_require__(0);
var PubSubType = __webpack_require__(10).constants.pubSubType;

var TopDownCamera = function () {
    function TopDownCamera(props) {
        _classCallCheck(this, TopDownCamera);

        this.offset = new THREE.Vector3(0, 0.85 * 49, 0.874 * 30.5);
        this.pos = new THREE.Vector3(props.x, props.y, props.z);
        this.pos.addVectors(this.pos, this.offset);
        this.target = this.pos.clone();
        this.movingTargetCopy = new THREE.Vector3(); // Used for vector copy for performance
        this.cameraAnchorPos = new THREE.Vector3(); // Used for vector copy for performance 
        this.startMovePos = new THREE.Vector3(); // Used for vectory copy for performance
        this.cameraTransitionTime = 1.4; // Time to transition
        this.cameraMovingTime = 0; // If greater than 0 then camera is transitioning
        this.positionHistory = [];
        this.maxPositionHistoryLength = 1800;

        this.windowX = 28; // Allowed movement left/right from room center before moving camera
        this.windowZ = 45.5; // Allowed movement up/down from room center before moving camera
        this.extraOffsetZ = 36.5; // Extra space between north/south rooms
        this.windowShiftX = 56; // How much to shift camera on X if a move event is signaled
        this.windowShiftZ = 56; // How much to shift camera on Y if a move event is signaled

        GameStore.GameInstance.camera.position.copy(this.pos);
        GameStore.GameInstance.camera.rotation.set(Utils.DegToRad(-44.0), 0, 0);
    }

    _createClass(TopDownCamera, [{
        key: "getHistoryRay",
        value: function getHistoryRay(x, y, time) {
            var nx = x;
            var ny = 1 - y;
            var unprojectPos = new THREE.Vector3(nx * 2 - 1, ny * 2 - 1, .5);

            var afterIndex = this.positionHistory.findIndex(function (historyPos) {
                return historyPos.time > time;
            });
            if (afterIndex !== -1 && afterIndex > 0) {
                // Set past camera pos
                var beforeHistoryPos = this.positionHistory[afterIndex - 1];
                var afterHistoryPos = this.positionHistory[afterIndex];

                var t = (time - beforeHistoryPos.time) / (afterHistoryPos.time - beforeHistoryPos.time);
                var historyCameraPos = afterHistoryPos.position.clone().sub(beforeHistoryPos.position).multiplyScalar(t).add(beforeHistoryPos.position);

                GameStore.GameInstance.camera.position.copy(historyCameraPos);
                GameStore.GameInstance.camera.updateMatrixWorld();

                var unprojectedPos = unprojectPos.clone().unproject(GameStore.GameInstance.camera);

                var worldMeshes = GameStore.GameInstance.chunkManager.worldChunks.map(function (chunk) {
                    return chunk.mesh;
                });

                worldMeshes = worldMeshes.filter(function (mesh) {
                    return mesh !== undefined;
                });

                // Do raycast in past camera space
                var dir = unprojectedPos.sub(historyCameraPos).normalize();

                return new THREE.Ray(historyCameraPos, dir);
            }

            return undefined;
        }
    }, {
        key: "getHistoryIntersects",
        value: function getHistoryIntersects(x, y, time) {

            var historyRay = this.getHistoryRay(x, y, time);
            if (historyRay !== undefined) {
                var worldMeshes = GameStore.GameInstance.chunkManager.worldChunks.map(function (chunk) {
                    return chunk.mesh;
                });

                worldMeshes = worldMeshes.filter(function (mesh) {
                    return mesh !== undefined;
                });

                // Do raycast in past camera space
                var raycaster = new THREE.Raycaster(historyRay.origin, historyRay.direction);
                var intersects = raycaster.intersectObjects(worldMeshes);

                // Restore camera pos
                GameStore.GameInstance.camera.position.copy(this.pos);
                GameStore.GameInstance.camera.updateMatrixWorld();

                return intersects;
            }
        }
    }, {
        key: "checkRoomExists",
        value: function checkRoomExists(worldX, worldY, offsetGridX, offsetGridY) {
            var gridPos = GameStore.GameInstance.levelManager.getRoomGridPos(worldX, worldY);
            return GameStore.GameInstance.levelManager.getRoomExists(gridPos.x + offsetGridX, gridPos.y + offsetGridY);
        }
    }, {
        key: "Update",
        value: function Update(time, delta, playerPos, playerMoveDir) {
            var maxX = this.target.x + this.windowX - this.offset.x;
            var maxZ = this.target.z + this.windowZ - this.offset.z - this.extraOffsetZ;
            var minX = this.target.x - this.windowX - this.offset.x;
            var minZ = this.target.z - this.windowZ - this.offset.z;

            // If beyond a bound AND
            // the camera isn't already moving AND
            // the player is holding the right move direction AND
            // there is a room connected THEN
            // shift the camera
            this.cameraAnchorPos.copy(GameStore.GameInstance.camera.position);
            this.cameraAnchorPos.sub(this.offset);

            if (playerPos.x > maxX && !this.cameraMovingTime && playerMoveDir.x > 0 && this.checkRoomExists(this.cameraAnchorPos.x, this.cameraAnchorPos.z, 1, 0)) {
                this.target.x += this.windowShiftX;

                this.onCameraStartMove();
            }

            if (playerPos.x < minX && !this.cameraMovingTime && playerMoveDir.x < 0 && this.checkRoomExists(this.cameraAnchorPos.x, this.cameraAnchorPos.z, -1, 0)) {
                this.target.x -= this.windowShiftX;

                this.onCameraStartMove();
            }

            if (playerPos.z > maxZ && !this.cameraMovingTime && playerMoveDir.z > 0 && this.checkRoomExists(this.cameraAnchorPos.x, this.cameraAnchorPos.z, 0, 1)) {
                this.target.z += this.windowShiftZ;

                this.onCameraStartMove();
            }

            if (playerPos.z < minZ && !this.cameraMovingTime && playerMoveDir.z < 0 && this.checkRoomExists(this.cameraAnchorPos.x, this.cameraAnchorPos.z, 0, -1)) {
                this.target.z -= this.windowShiftZ;

                this.onCameraStartMove();
            }

            if (this.cameraMovingTime > 0) {
                this.cameraMovingTime = Math.max(0, this.cameraMovingTime - delta);

                var alpha = 1 - this.cameraMovingTime / this.cameraTransitionTime; // Value from 0 to 1 over camera transition time
                alpha = Utils.EaseInOutQuad(alpha);

                this.pos.lerpVectors(this.startMovePos, this.target, alpha);
            }

            GameStore.GameInstance.camera.position.copy(this.pos);

            this.positionHistory.push({
                time: time,
                position: this.pos.clone()
            });

            var historyOverflow = this.positionHistory.length - this.maxPositionHistoryLength;
            if (historyOverflow > 0) {
                this.positionHistory.splice(0, historyOverflow);
            }
        }
    }, {
        key: "onCameraStartMove",
        value: function onCameraStartMove() {
            GameStore.GameInstance.twitchBroadcast(PubSubType.cameraMove, {});

            this.startMovePos.copy(this.pos);
            this.cameraMovingTime = this.cameraTransitionTime;
        }
    }]);

    return TopDownCamera;
}();

module.exports = TopDownCamera;

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Utils = __webpack_require__(2);

module.exports.GamePad = function () {
    function _class() {
        _classCallCheck(this, _class);

        this.buttonValues = [];
        this.axesValues = [];
        this.gamePads = navigator.getGamepads();
        this.deadZone = 0.2;
    }

    _createClass(_class, [{
        key: "update",
        value: function update() {
            this.gamePads = navigator.getGamepads();

            for (var i = 0; i < this.gamePads.length; i++) {
                var gamePad = this.gamePads[i];

                if (gamePad) {
                    if (gamePad.buttons.length > 0) {
                        // Have the button values array been setup for this gamepad?
                        if (!this.buttonValues[i]) {
                            this.buttonValues[i] = [];
                        }

                        // Set all values read from the gamepad
                        for (var j = 0; j < gamePad.buttons.length; j++) {
                            this.buttonValues[i][j] = gamePad.buttons[j].value;
                        }
                    } else if (this.buttonValues[i]) {
                        this.buttonValues[i] = null;
                    }

                    if (gamePad.axes.length > 0) {
                        // Have the axes values array been setup for this gamepad?
                        if (!this.axesValues[i]) {
                            this.axesValues[i] = [];
                        }

                        for (var k = 0; k < gamePad.axes.length; k++) {
                            this.axesValues[i][k] = this.removeDeadZone(gamePad.axes[k]);
                        }
                    } else if (this.axesValues[i]) {
                        this.axesValues[i] = null;
                    }
                }
            }
        }
    }, {
        key: "removeDeadZone",
        value: function removeDeadZone(value) {
            var sign = Math.sign(value);
            return sign * Utils.MapRangeClamped(Math.abs(value), this.deadZone, 1, 0, 1);
        }
    }]);

    return _class;
}();

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GameStore = __webpack_require__(0);
var Weapon = __webpack_require__(26);
var UpgradeManager = __webpack_require__(22);

module.exports = function (_Weapon$WeaponBase) {
    _inherits(_class, _Weapon$WeaponBase);

    function _class() {
        _classCallCheck(this, _class);

        var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));

        _this.type = Weapon.EWeaponType.Simple;
        _this.activtionType = Weapon.EActivationType.Auto;
        _this.activationCooldown = .2;
        _this.accuracyOffset = 0.1;

        // Setup fire soundShader
        _this.fireSoundShader.LoadSound("sound/player_shot1.mp3", 60, 0.5);
        _this.fireSoundShader.LoadSound("sound/player_shot2.mp3", 60, 0.5);
        _this.fireSoundShader.LoadSound("sound/player_shot3.mp3", 60, 0.5);
        _this.fireSoundShader.LoadSound("sound/player_shot4.mp3", 60, 0.5);
        _this.fireSoundShader.letPreviousSoundFinish = true;

        if (GameStore.GameInstance && GameStore.GameInstance.upgradeManager) {
            GameStore.GameInstance.upgradeManager.addOnChangedCallback(UpgradeManager.EUpgradeType.Multishot, function (newCount) {
                return _this.onMultishotChanged(newCount);
            });
        }

        // Post construct for any overrides
        _this.Init();

        _this.activationList = [_this.spawnDefaultShot()];
        return _this;
    }

    _createClass(_class, [{
        key: "spawnDefaultShot",
        value: function spawnDefaultShot() {
            return new Weapon.ActivationBase({
                activationEventIndex: 0,
                spawnOffset: this.spawnOffset,
                accuracyOffset: this.accuracyOffset
            });
        }
    }, {
        key: "onMultishotChanged",
        value: function onMultishotChanged(newCount) {

            this.activationList = [];

            var projCount = newCount + 1;

            var spreadIncrementAngle = Math.PI / 16;
            var spreadAngle = projCount * spreadIncrementAngle;
            for (var i = 0; i < projCount; ++i) {
                this.activationList.push(new Weapon.ActivationBase({
                    activationEventIndex: 0,
                    spawnOffset: this.spawnOffset,
                    accuracyOffset: this.accuracyOffset,
                    directionOffset: i * spreadIncrementAngle - spreadAngle / 2
                }));
            }
        }
    }]);

    return _class;
}(Weapon.WeaponBase);

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GameStore = __webpack_require__(0);
var Utils = __webpack_require__(2);
var AiManager = __webpack_require__(12);
var TychoCommon = __webpack_require__(10);

var PubSubType = TychoCommon.constants.pubSubType;
var EBotType = TychoCommon.constants.botType;

var WaveSpawner = function () {
    function WaveSpawner() {
        var _this = this;

        _classCallCheck(this, WaveSpawner);

        this.instanceList = [];

        this.currentParamsIndex = 0;
        this.maxEnemiesPerWave = 48;
        this.prespawnId = 0;
        this.currentPrespawnInstance = undefined;

        this.totalWeight = 0;
        AiManager.SpawnProperties.forEach(function (info) {
            _this.totalWeight += info.weight;
        });

        // Bots
        this.botDataList = [];
        for (var type in EBotType) {
            this.botDataList.push({
                type: EBotType[type],
                botAi: undefined,
                nextBotTransaction: undefined
            });
        }

        this.botSpawnHeight = 40;

        // Wave combat params
        this.levelCombatParams = [{
            numWaves: 2,
            currentWave: 0,
            firstWaveMin: 3,
            firstWaveMax: 6,
            lastWaveMin: 6,
            lastWaveMax: 9,
            spawnHeightMax: 48,
            spawnHeightMin: 41,
            timeBetweenWaves: 1000, // time between waves in ms
            targetRoomGridX: 0,
            targetRoomGridY: 0,
            waitingToSpawn: false,
            aiList: [],
            prespawnAiList: [],
            difficultyIncreaseNumWaves: 1,
            difficultyIncreaseFirstWav: 1,
            difficultyIncreaseLastWav: 1,
            aiTypesToAdd: []
        }, {
            numWaves: 3,
            currentWave: 0,
            firstWaveMin: 6,
            firstWaveMax: 9,
            lastWaveMin: 9,
            lastWaveMax: 15,
            spawnHeightMax: 48,
            spawnHeightMin: 41,
            timeBetweenWaves: 1000, // time between waves in ms
            targetRoomGridX: 0,
            targetRoomGridY: 0,
            waitingToSpawn: false,
            aiList: [],
            prespawnAiList: [],
            difficultyIncreaseNumWaves: 1,
            difficultyIncreaseFirstWav: 1,
            difficultyIncreaseLastWav: 1,
            aiTypesToAdd: [{ type: AiManager.EAiType.Chibi, cost: 2, weight: 1.15 }]
        }, {
            numWaves: 3,
            currentWave: 0,
            firstWaveMin: 6,
            firstWaveMax: 9,
            lastWaveMin: 12,
            lastWaveMax: 15,
            spawnHeightMax: 48,
            spawnHeightMin: 41,
            timeBetweenWaves: 1000, // time between waves in ms
            targetRoomGridX: 0,
            targetRoomGridY: 0,
            waitingToSpawn: false,
            aiList: [],
            prespawnAiList: [],
            difficultyIncreaseNumWaves: 1,
            difficultyIncreaseFirstWav: 1,
            difficultyIncreaseLastWav: 1,
            aiTypesToAdd: [{ type: AiManager.EAiType.Gord, cost: 9, weight: 0.7 }]
        }, {
            numWaves: 4,
            currentWave: 0,
            firstWaveMin: 9,
            firstWaveMax: 12,
            lastWaveMin: 15,
            lastWaveMax: 21,
            spawnHeightMax: 48,
            spawnHeightMin: 41,
            timeBetweenWaves: 1000, // time between waves in ms
            targetRoomGridX: 0,
            targetRoomGridY: 0,
            waitingToSpawn: false,
            aiList: [],
            prespawnAiList: [],
            difficultyIncreaseNumWaves: 1,
            difficultyIncreaseFirstWav: 1,
            difficultyIncreaseLastWav: 1,
            aiTypesToAdd: []
        }, {
            numWaves: 4,
            currentWave: 0,
            firstWaveMin: 9,
            firstWaveMax: 12,
            lastWaveMin: 15,
            lastWaveMax: 27,
            spawnHeightMax: 48,
            spawnHeightMin: 41,
            timeBetweenWaves: 1000, // time between waves in ms
            targetRoomGridX: 0,
            targetRoomGridY: 0,
            waitingToSpawn: false,
            aiList: [],
            prespawnAiList: [],
            difficultyIncreaseNumWaves: 1,
            difficultyIncreaseFirstWav: 1,
            difficultyIncreaseLastWav: 2,
            aiTypesToAdd: [{ type: AiManager.EAiType.BadBitBot, cost: 21, weight: 0.5 }]
        }];
    }

    _createClass(WaveSpawner, [{
        key: "setBotTransaction",
        value: function setBotTransaction(type, transaction) {
            this.botDataList[type].nextBotTransaction = transaction;

            this.updateBotTransaction();
        }
    }, {
        key: "updateBotTransaction",
        value: function updateBotTransaction() {
            if (GameStore.GameInstance.player !== undefined && !GameStore.GameInstance.player.killedByDie) {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = this.botDataList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var botData = _step.value;

                        if (botData.nextBotTransaction !== undefined) {
                            if (botData.botAi === undefined || botData.botAi.dead) {
                                botData.botAi = this.spawnBot(botData.type, botData.nextBotTransaction.name, botData.nextBotTransaction.bitsCount);
                            } else {
                                botData.botAi.setBotTransaction(botData.nextBotTransaction);
                            }

                            botData.nextBotTransaction = undefined;
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        }
    }, {
        key: "getIsBotDead",
        value: function getIsBotDead(type) {
            var botData = this.botDataList[type];
            return botData.botAi !== undefined && botData.botAi.dead;
        }
    }, {
        key: "loadBots",
        value: function loadBots() {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = GameStore.GameInstance.bitBotManager.botDataList[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var managerBotData = _step2.value;

                    var botData = this.botDataList[managerBotData.type];
                    var transactionData = managerBotData.currentTransactionData;
                    if (botData.botAi === undefined && transactionData !== undefined) {
                        if (GameStore.GameInstance.player !== undefined && !GameStore.GameInstance.player.killedByDie) {
                            botData.botAi = this.spawnBot(managerBotData.type, transactionData.name, transactionData.bitsCount);
                        }
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }
    }, {
        key: "spawnBot",
        value: function spawnBot(type, name, bitsCount) {
            return GameStore.GameInstance.aiManager.spawnAi(type === EBotType.bitBot ? AiManager.EAiType.BitBot : AiManager.EAiType.SubBot, GameStore.GameInstance.player.mesh.position.x, this.botSpawnHeight, GameStore.GameInstance.player.mesh.position.z, {
                type: type,
                bitsBountyPot: bitsCount,
                username: name
            });
        }
    }, {
        key: "prespawnWave",
        value: function prespawnWave(instance, waveIndex) {
            if (waveIndex < instance.numWaves) {
                var totalWaves = instance.numWaves - 1;
                totalWaves = totalWaves || 1; // Prevent divide by 0 if only 1 wave

                var waveMin = Math.round(Utils.Lerp(instance.firstWaveMin, instance.lastWaveMin, waveIndex / totalWaves));
                var waveMax = Math.round(Utils.Lerp(instance.firstWaveMax, instance.lastWaveMax, waveIndex / totalWaves));
                var difficultyCost = Utils.RandomRangeInt(waveMin, waveMax);
                var numAIToSpawn = 0;
                var currentDifficultyCost = 0;
                var roomBounds = GameStore.GameInstance.levelManager.getRoomBounds(instance.targetRoomGridX, instance.targetRoomGridY);

                var numTrys = 0;
                var maxTrys = 40;
                while (currentDifficultyCost < difficultyCost && numTrys < maxTrys) {
                    var randomAiType = undefined;
                    var randomWeight = undefined;

                    // Loop until we find our aiType to spawn
                    while (randomAiType === undefined && numTrys < maxTrys) {
                        // Use weighted random to select AI Type
                        randomWeight = Math.random() * this.totalWeight;
                        numTrys++;

                        for (var i = 0; i < AiManager.SpawnProperties.length; i++) {
                            var aiType = AiManager.SpawnProperties[i];

                            // Can we afford to spawn this Ai type and stay under difficulty?
                            if (currentDifficultyCost + aiType.cost <= difficultyCost) {
                                randomWeight -= aiType.weight;
                                if (randomWeight <= 0) {
                                    randomAiType = aiType;
                                    currentDifficultyCost += aiType.cost;
                                    this.prespawnAi(aiType.type, instance, roomBounds);
                                    numAIToSpawn++;
                                    numTrys = 0;

                                    // End loop
                                    i = AiManager.SpawnProperties.length;
                                }
                            }
                        }
                    }
                }

                instance.prespawnId = this.prespawnId++;
                GameStore.GameInstance.twitchBroadcast(PubSubType.prespawn, {
                    prespawnId: instance.prespawnId,
                    aiCount: numAIToSpawn
                });

                this.currentPrespawnInstance = instance;
            }
        }
    }, {
        key: "prespawnAi",
        value: function prespawnAi(type, instance, roomBounds, optionalAiParams) {
            var x = roomBounds.left + Math.random() * (roomBounds.right - roomBounds.left);
            var y = Utils.RandomRangeInt(instance.spawnHeightMin, instance.spawnHeightMax);
            var z = roomBounds.top + Math.random() * (roomBounds.bottom - roomBounds.top);

            // Spawn AI in random position within map coords
            var newAi = GameStore.GameInstance.aiManager.spawnAi(type, x, y, z, optionalAiParams);
            newAi.setActive(false);

            instance.prespawnAiList.push(newAi);
        }
    }, {
        key: "spawnWave",
        value: function spawnWave(instance) {

            instance.prespawnAiList.forEach(function (ai) {
                ai.setActive(true);

                instance.aiList.push(ai);
            });

            instance.prespawnAiList = [];

            instance.waitingToSpawn = false;

            GameStore.GameInstance.twitchBroadcast(PubSubType.spawn, {
                prespawnId: instance.prespawnId
            });

            instance.prespawnId = undefined;
            this.currentPrespawnInstance = undefined;

            if (instance.currentWave + 1 < instance.numWaves) {
                this.prespawnWave(instance, instance.currentWave + 1);
            }
        }
    }, {
        key: "update",
        value: function update(time, delta) {
            var _this2 = this;

            var prespawnInstance = undefined;
            var hasEnabledInstance = false;

            var _loop = function _loop(_i) {
                var instance = _this2.instanceList[_i];
                if (instance.enabled) {
                    hasEnabledInstance = true;
                    var canStartWave = GameStore.GameInstance.aiManager.aiList.length === 0 || instance.aiList.length === 0;

                    if (!canStartWave) {
                        var foundInstanceAi = instance.aiList.find(function (instanceAi) {
                            var foundAi = GameStore.GameInstance.aiManager.aiList.find(function (livingAi) {
                                return instanceAi === livingAi;
                            });

                            return foundAi !== undefined;
                        });

                        canStartWave = foundInstanceAi === undefined;
                    }

                    if (canStartWave) {
                        if (!instance.waitingToSpawn) {
                            ++instance.currentWave;
                            if (instance.currentWave < instance.numWaves) {
                                instance.aiList = [];

                                instance.waitingToSpawn = true;

                                setTimeout(function () {
                                    _this2.spawnWave(instance, instance.targetRoomGridX, instance.targetRoomGridY);
                                }, instance.timeBetweenWaves);
                            } else {
                                _this2.instanceList.splice(_i, 1);
                                --_i;
                            }
                        }
                    }
                } else if (prespawnInstance === undefined) {
                    prespawnInstance = instance;
                }
                i = _i;
            };

            for (var i = 0; i < this.instanceList.length; ++i) {
                _loop(i);
            }

            if (!hasEnabledInstance && prespawnInstance !== undefined && prespawnInstance.prespawnAiList.length === 0) {
                this.prespawnWave(prespawnInstance, 0);
            }

            this.updateBotTransaction();
        }
    }, {
        key: "onStartLevel",
        value: function onStartLevel() {
            this.loadBots();
        }
    }, {
        key: "onFinishLevel",
        value: function onFinishLevel() {
            this.moveToNextLevelParams();

            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = this.botDataList[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var botData = _step3.value;

                    botData.botAi = undefined;
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }
        }
    }, {
        key: "moveToNextLevelParams",
        value: function moveToNextLevelParams() {
            // If at max, then just increase difficulty
            if (this.currentParamsIndex === this.levelCombatParams.length - 1) {
                this.increaseWaveCombatDifficulty();
            } else {
                this.currentParamsIndex += 1;
            }
        }
    }, {
        key: "increaseWaveCombatDifficulty",
        value: function increaseWaveCombatDifficulty() {
            var params = this.levelCombatParams[this.currentParamsIndex];

            // Add new AI types, if any
            for (var _i2 = 0; _i2 < params.aiTypesToAdd.length; _i2++) {
                AiManager.SpawnProperties.push(params.aiTypesToAdd[_i2]);
                this.totalWeight += params.aiTypesToAdd[_i2].weight;
            }

            params.numWaves += params.difficultyIncreaseNumWaves;
            params.firstWaveMin = Math.min(params.firstWaveMin + params.difficultyIncreaseFirstWav, this.maxEnemiesPerWave);
            params.firstWaveMax = Math.min(params.firstWaveMax + params.difficultyIncreaseFirstWav, this.maxEnemiesPerWave);
            params.lastWaveMin = Math.min(params.lastWaveMin + params.difficultyIncreaseLastWav, this.maxEnemiesPerWave);
            params.lastWaveMax = Math.min(params.lastWaveMax + params.difficultyIncreaseLastWav, this.maxEnemiesPerWave);
        }
    }, {
        key: "debugCombatParams",
        value: function debugCombatParams() {
            var params = this.levelCombatParams[this.currentParamsIndex];

            console.log("numWaves: " + params.numWaves);
            console.log("firstWaveMin: " + params.firstWaveMin);
            console.log("firstWaveMax: " + params.firstWaveMax);
            console.log("lastWaveMin: " + params.lastWaveMin);
            console.log("lastWaveMax: " + params.lastWaveMax);
            console.log(" ");
        }
    }, {
        key: "spawnWaveCombatInstance",
        value: function spawnWaveCombatInstance(gridX, gridY, roomIndex) {
            var instance = Object.assign({}, this.levelCombatParams[this.currentParamsIndex]);
            instance.targetRoomGridX = gridX;
            instance.targetRoomGridY = gridY;
            instance.aiList = [];
            instance.prespawnAiList = [];
            instance.roomIndex = roomIndex;
            instance.enabled = false;

            this.increaseWaveCombatDifficulty();

            this.instanceList.push(instance);

            return instance;
        }
    }, {
        key: "stopWaveCombat",
        value: function stopWaveCombat() {
            this.instanceList = [];
        }
    }, {
        key: "onFarthestVisitedRoomIndexChanged",
        value: function onFarthestVisitedRoomIndexChanged(newFarthestVisitedRoomIndex) {
            var _this3 = this;

            this.instanceList.forEach(function (instance) {
                if (instance.roomIndex === newFarthestVisitedRoomIndex && !instance.enabled) {
                    instance.enabled = true;

                    _this3.spawnWave(instance);
                }
            });
        }
    }, {
        key: "tryPlaceBounty",
        value: function tryPlaceBounty(message) {
            if (this.currentPrespawnInstance !== undefined && this.currentPrespawnInstance.prespawnId === message.prespawnId && message.bountyAiIndex < this.currentPrespawnInstance.prespawnAiList.length) {

                var ai = this.currentPrespawnInstance.prespawnAiList[message.bountyAiIndex];
                ai.placeBounty(message);

                return ai;
            }

            return undefined;
        }
    }, {
        key: "spawnBadBitBot",
        value: function spawnBadBitBot(message) {
            GameStore.GameInstance.aiManager.spawnAi(AiManager.EAiType.BadBitBot, GameStore.GameInstance.player.mesh.position.x, this.botSpawnHeight, GameStore.GameInstance.player.mesh.position.z, {
                username: message.name
            });
        }
    }]);

    return WaveSpawner;
}();

module.exports = WaveSpawner;

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ScriptingManager = function () {
    function ScriptingManager() {
        _classCallCheck(this, ScriptingManager);

        this.caList = [];
    }

    _createClass(ScriptingManager, [{
        key: "Update",
        value: function Update(time, delta) {
            for (var i = 0; i < this.caList.length; ++i) {
                var ca = this.caList[i];
                if (ca.Update(time, delta)) {
                    this.caList.splice(i, 1);
                    --i;
                }
            }
        }
    }, {
        key: "AddConditionAction",
        value: function AddConditionAction(ca) {
            this.caList.push(ca);
        }
    }, {
        key: "shutdown",
        value: function shutdown() {
            this.caList = [];
        }
    }]);

    return ScriptingManager;
}();

module.exports = ScriptingManager;

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var THREE = __webpack_require__(1);
var Utils = __webpack_require__(2);
var GameStore = __webpack_require__(0);

var WorldTextManager = function () {
    function WorldTextManager() {
        var _this = this;

        _classCallCheck(this, WorldTextManager);

        this.stampTextInstances = [];
        this.textLifetime = 1.5;
        this.textColor = 0xff9500;
        this.vel = new THREE.Vector3(0, 2, 0);
        this.offsetDistance = 3;
        this.size = 0.75;

        // Restrict how fast we spawn text
        this.maxTextCount = 20;

        var loader = new THREE.FontLoader();
        loader.load("fonts/helvetiker_regular.typeface.json", function (font) {
            _this.font = font;
        });
    }

    _createClass(WorldTextManager, [{
        key: "update",
        value: function update(time, delta) {
            for (var i = 0; i < this.stampTextInstances.length; ++i) {
                var instance = this.stampTextInstances[i];
                instance.lifetime -= delta;

                instance.mesh.position.add(this.vel.clone().multiplyScalar(delta));

                if (instance.lifetime <= 0) {
                    GameStore.GameInstance.scene.remove(instance.mesh);
                    instance.mesh.geometry.dispose();
                    instance.mesh.material.dispose();

                    this.stampTextInstances.splice(i, 1);
                    --i;
                } else if (instance.lifetime < 1) {
                    instance.mesh.material.opacity = instance.lifetime;
                }
            }
        }
    }, {
        key: "spawnTextForStamp",
        value: function spawnTextForStamp(pos, text, normal, color) {

            var spawnPos = pos.clone();
            if (normal !== undefined) {
                normal = new THREE.Vector3(normal.y, normal.z, normal.x);
                spawnPos.add(normal.multiplyScalar(this.offsetDistance));
            }
            var mesh = this.spawnText(spawnPos, text, color);

            if (mesh !== undefined) {
                this.stampTextInstances.push({
                    mesh: mesh,
                    lifetime: this.textLifetime
                });
            }
        }
    }, {
        key: "spawnText",
        value: function spawnText(pos, text, color) {
            if (this.font && this.stampTextInstances.length < this.maxTextCount) {
                var geometry = new THREE.TextGeometry(text, {
                    font: this.font,
                    size: this.size,
                    height: 0,
                    curveSegments: 1,
                    bevelEnabled: false
                });

                var colorToUse = undefined;
                if (color) {
                    if (color.r !== undefined) {
                        colorToUse = Utils.rgbToHex2(Math.round(color.r), Math.round(color.g), Math.round(color.b));
                    } else {
                        colorToUse = color;
                    }
                } else {
                    colorToUse = this.textColor;
                }

                var mat = new THREE.MeshBasicMaterial({ "color": colorToUse });
                mat.depthTest = false;
                mat.transparent = true;

                var mesh = new THREE.Mesh(geometry, mat);
                mesh.geometry.computeBoundingSphere();
                var spawnPos = pos.clone();
                spawnPos.x -= mesh.geometry.boundingSphere.radius / 2;
                mesh.position.copy(spawnPos);
                mesh.rotation.set(-Math.PI / 4, 0, 0);

                GameStore.GameInstance.scene.add(mesh);

                return mesh;
            }

            return undefined;
        }
    }]);

    return WorldTextManager;
}();

module.exports = WorldTextManager;

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var THREE = __webpack_require__(1);
var GameStore = __webpack_require__(0);

module.exports.TouchControls = function () {
    function _class() {
        _classCallCheck(this, _class);

        this.forceEnable = false; // Used for debug

        this.enabled = this.isMobile();

        this.leftStickId = -1;
        this.leftStickPos = new THREE.Vector2(0, 0);
        this.leftStickStartPos = new THREE.Vector2(0, 0);
        this.leftVector = new THREE.Vector2(0, 0);

        this.rightStickId = -1;
        this.rightStickPos = new THREE.Vector2(0, 0);
        this.rightStickStartPos = new THREE.Vector2(0, 0);
        this.rightVector = new THREE.Vector2(0, 0);

        if (this.enabled) {
            document.onpointerdown = this.pointerDown.bind(this);
            document.onpointerup = this.pointerUp.bind(this);
            document.onpointermove = this.pointerMove.bind(this);
        }
    }

    _createClass(_class, [{
        key: "isMobile",
        value: function isMobile() {
            return this.forceEnable || typeof window.orientation !== "undefined" || navigator.userAgent.indexOf("IEMobile") !== -1;
        }
    }, {
        key: "pointerDown",
        value: function pointerDown(event) {
            var halfWidth = window.innerWidth / 2;

            if (this.leftStickId < 0 && event.clientX < halfWidth) {
                this.leftStickId = event.pointerId;
                this.leftStickStartPos.set(event.clientX, event.clientY);
                this.leftStickPos.copy(this.leftStickStartPos);
                this.leftVector.set(0, 0);
            } else if (this.rightStickId < 0 && event.clientX >= halfWidth) {
                this.rightStickId = event.pointerId;
                this.rightStickStartPos.set(event.clientX, event.clientY);
                this.rightStickPos.copy(this.rightStickStartPos);
                this.rightVector.set(0, 0);

                GameStore.GameInstance.player.weapon.Activate(GameStore.GameInstance.player);
            }
        }
    }, {
        key: "pointerMove",
        value: function pointerMove(event) {
            if (this.leftStickId === event.pointerId) {
                this.leftStickPos.set(event.clientX, event.clientY);
                this.leftVector.set(event.clientX / window.innerWidth - this.leftStickStartPos.x / window.innerWidth, event.clientY / window.innerWidth - this.leftStickStartPos.y / window.innerWidth);
                this.leftVector.divideScalar(0.078); // 0.078 value of leftVector when joystick is at maximum
                this.leftVector.clampLength(0, 1);
            } else if (this.rightStickId === event.pointerId) {
                this.rightStickPos.set(event.clientX, event.clientY);
                this.rightVector.set(event.clientX / window.innerWidth - this.rightStickStartPos.x / window.innerWidth, event.clientY / window.innerWidth - this.rightStickStartPos.y / window.innerWidth);
                this.rightVector.divideScalar(0.078); // 0.078 value of leftVector when joystick is at maximum
                this.rightVector.clampLength(0, 1);
            }
        }
    }, {
        key: "pointerUp",
        value: function pointerUp(event) {
            if (this.leftStickId === event.pointerId) {
                this.leftStickId = -1;
                this.leftVector.set(0, 0);
            } else if (this.rightStickId === event.pointerId) {
                this.rightStickId = -1;
                GameStore.GameInstance.player.weapon.Deactivate();
            }
        }
    }]);

    return _class;
}();

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var THREE = __webpack_require__(1);

var GameStore = __webpack_require__(0);
var Nimble = __webpack_require__(6);
var TychoCommon = __webpack_require__(10);
var ENDPOINTS = __webpack_require__(14);

var GET_BITBOT_TRANSACTIONS_URI = new Nimble.uri(ENDPOINTS["DEVELOPMENT"].GET_BITBOT_TRANSACTIONS_URI);
var SET_PROCESSED_BITBOT_TRANSACTION_URI = new Nimble.uri(ENDPOINTS["DEVELOPMENT"].SET_PROCESSED_BITBOT_TRANSACTION_URI);
var ADD_SUBBOT_URI = new Nimble.uri(ENDPOINTS["DEVELOPMENT"].ADD_SUBBOT_URI);
var EBotType = TychoCommon.constants.botType;

var BotData = function () {
    function BotData(type) {
        _classCallCheck(this, BotData);

        this.type = type;
        this.transactionList = [];
        this.currentTransactionId = undefined;
        this.remainingTransactionTime = 0;
        this.currentTransactionData = undefined;
        this.lastQueryId = undefined;

        this.remainingLifetime = 0;
    }

    _createClass(BotData, [{
        key: "setCurrentTransaction",
        value: function setCurrentTransaction(data) {
            this.currentTransactionId = data.transactionId;
            this.remainingTransactionTime = this.getLifetimeAmount(data);
            this.currentTransactionData = data;

            GameStore.GameInstance.waveSpawner.setBotTransaction(this.type, this.currentTransactionData);
        }
    }, {
        key: "clearCurrentTransaction",
        value: function clearCurrentTransaction() {
            this.currentTransactionId = undefined;
            this.currentTransactionData = undefined;
        }
    }, {
        key: "getLifetimeAmount",
        value: function getLifetimeAmount(transaction) {
            if (transaction.sku !== undefined) {
                var scaler = 0;
                switch (transaction.sku) {
                    case TychoCommon.bitsProducts.bitBotNew.sku:
                        scaler = TychoCommon.bitsProducts.bitBotNew.timePerBitSeconds;
                        break;
                    case TychoCommon.bitsProducts.bitBotExtend.sku:
                        scaler = TychoCommon.bitsProducts.bitBotExtend.timePerBitSeconds;
                        break;
                }
                return transaction.bitsCount * scaler;
            } else {
                return 2 * 60; // Temp hardcode 2 minutes for now
            }
        }
    }]);

    return BotData;
}();

module.exports = function () {
    function _class() {
        var _this = this;

        _classCallCheck(this, _class);

        this.botDataList = [];
        for (var botType in EBotType) {
            this.botDataList.push(new BotData(EBotType[botType]));
        }

        this.subBotInputDataList = [];
        this.subBotMarkerEnabled = false;
        this.markerPos = new THREE.Vector2();
        this.worldMarkerPos = undefined;
        GameStore.gamestateManager.addCollectCallback(function () {
            _this.broadcastSubBotData();
        });
    }

    _createClass(_class, [{
        key: "queryTransactions",
        value: function queryTransactions() {
            var _this2 = this;

            if (GameStore.gamestateManager.playingOffline) {
                return;
            }

            var queryParams = {};
            if (this.botDataList[EBotType.bitBot].lastQueryId !== undefined) {
                queryParams.firstBitBotTransactionId = this.botDataList[EBotType.bitBot].lastQueryId;
            }
            if (this.botDataList[EBotType.subBot].lastQueryId !== undefined) {
                queryParams.firstSubBotTransactionId = this.botDataList[EBotType.subBot].lastQueryId;
            }
            window.fetch(GET_BITBOT_TRANSACTIONS_URI({
                channelId: Nimble.twitch.store.streamer.channelId
            }, queryParams), {
                "method": "GET",
                "headers": {
                    "Authorization": GameStore.twitchManager.getAuthForAWS(),
                    "Content-Type": "application/json"
                }
            }).then(function (response) {
                return response.json();
            }).then(function (response) {
                for (var i = 0; i < response.length; ++i) {
                    var transactionList = response[i];
                    var bitBotData = _this2.botDataList[i];

                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = undefined;

                    try {
                        for (var _iterator = transactionList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                            var transaction = _step.value;

                            if (bitBotData.lastQueryId === undefined || transaction.transactionId > bitBotData.lastQueryId) {

                                bitBotData.transactionList.push(transaction);
                                bitBotData.lastQueryId = transaction.transactionId;

                                bitBotData.remainingLifetime += bitBotData.getLifetimeAmount(transaction);
                            }
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return) {
                                _iterator.return();
                            }
                        } finally {
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                }
            }).catch(function (error) {
                Nimble.logger.error(error);
            });
        }
    }, {
        key: "update",
        value: function update(time, delta) {
            if (GameStore.GameInstance.player !== undefined && !GameStore.GameInstance.player.killedByDie) {
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {

                    for (var _iterator2 = this.botDataList[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var botData = _step2.value;

                        if (botData.remainingLifetime > 0) {
                            if (botData.remainingLifetime < delta) {
                                botData.remainingLifetime = 0;

                                GameStore.gamestateManager.onBotDie();
                            } else {
                                botData.remainingLifetime -= delta;
                            }
                        }
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }

                this.updateCurrentTransaction(delta);
            }

            // Update when we have sub bot transaction detection
            if (true) {
                this.worldMarkerPos = GameStore.GameInstance.world.intersectWithPlane(new THREE.Vector3(this.markerPos.x, -this.markerPos.y, .5), new THREE.Plane(new THREE.Vector3(0, 1, 0), -1));
            }
        }
    }, {
        key: "updateCurrentTransaction",
        value: function updateCurrentTransaction(delta) {
            var _this3 = this;

            var _loop = function _loop(botData) {
                if (botData.currentTransactionId === undefined && botData.transactionList.length > 0) {
                    botData.setCurrentTransaction(botData.transactionList[0]);
                } else if (botData.currentTransactionId !== undefined) {
                    botData.remainingTransactionTime -= delta;

                    if (botData.remainingTransactionTime <= 0 || GameStore.GameInstance.waveSpawner.getIsBotDead(botData.type)) {
                        _this3.sendProcessedTransaction(botData.type, botData.currentTransactionId);

                        var currentIndex = botData.transactionList.findIndex(function (transaction) {
                            return transaction.transactionId === botData.currentTransactionId;
                        });

                        if (currentIndex !== -1 && currentIndex + 1 < botData.transactionList.length) {
                            botData.setCurrentTransaction(botData.transactionList[currentIndex + 1]);
                            botData.transactionList.shift();

                            _this3.queryTransactions();
                        } else {
                            botData.transactionList = [];
                            botData.clearCurrentTransaction();
                        }
                    }
                }
            };

            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = this.botDataList[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var botData = _step3.value;

                    _loop(botData);
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }
        }
    }, {
        key: "sendProcessedTransaction",
        value: function sendProcessedTransaction(type, id) {
            window.fetch(SET_PROCESSED_BITBOT_TRANSACTION_URI({
                channelId: Nimble.twitch.store.streamer.channelId
            }), {
                "method": "POST",
                "headers": {
                    "Authorization": GameStore.twitchManager.getAuthForAWS(),
                    "Content-Type": "application/json"
                },
                "body": JSON.stringify({
                    processedBitBotTransactionId: type === EBotType.bitBot ? id : undefined,
                    processedSubBotTransactionId: type === EBotType.subBot ? id : undefined
                })
            }).catch(function (error) {
                Nimble.logger.error(error);
            });
        }
    }, {
        key: "addSubBot",
        value: function addSubBot(name) {
            var _this4 = this;

            GameStore.twitchManager.addSubTransaction(name);

            window.fetch(ADD_SUBBOT_URI({
                channelId: Nimble.twitch.store.streamer.channelId
            }), {
                "method": "POST",
                "headers": {
                    "Authorization": GameStore.twitchManager.getAuthForAWS(),
                    "Content-Type": "application/json"
                },
                "body": JSON.stringify({
                    name: name
                })
            }).then(function () {
                _this4.queryTransactions();
            }).catch(function (error) {
                Nimble.logger.error(error);
            });
        }
    }, {
        key: "getBotLifetime",
        value: function getBotLifetime(type) {
            return this.botDataList[type].remainingLifetime;
        }
    }, {
        key: "subBotInput",
        value: function subBotInput(message) {
            this.subBotInputDataList.push({
                sumPos: message.sumPos,
                count: message.count
            });
        }
    }, {
        key: "setShowSubBotMarker",
        value: function setShowSubBotMarker(enabled) {
            this.subBotMarkerEnabled = enabled;
            GameStore.gamestateManager.setSubBotUpdate({
                subBotType: TychoCommon.constants.subBotMessageType.update,
                subBotMarkerEnabled: this.subBotMarkerEnabled,
                pos: {
                    x: this.markerPos.x,
                    y: this.markerPos.y
                }
            });
        }
    }, {
        key: "broadcastSubBotData",
        value: function broadcastSubBotData() {
            if (this.subBotMarkerEnabled) {
                if (this.subBotInputDataList.length > 0) {
                    var sumX = 0;
                    var sumY = 0;
                    var sumCount = 0;
                    var _iteratorNormalCompletion4 = true;
                    var _didIteratorError4 = false;
                    var _iteratorError4 = undefined;

                    try {
                        for (var _iterator4 = this.subBotInputDataList[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                            var data = _step4.value;

                            sumX += data.sumPos.x;
                            sumY += data.sumPos.y;
                            sumCount += data.count;
                        }
                    } catch (err) {
                        _didIteratorError4 = true;
                        _iteratorError4 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion4 && _iterator4.return) {
                                _iterator4.return();
                            }
                        } finally {
                            if (_didIteratorError4) {
                                throw _iteratorError4;
                            }
                        }
                    }

                    this.subBotInputDataList = [];

                    this.markerPos = new THREE.Vector2(sumX / sumCount, sumY / sumCount);
                }

                GameStore.gamestateManager.setSubBotUpdate({
                    subBotMarkerEnabled: this.subBotMarkerEnabled,
                    pos: {
                        x: this.markerPos.x,
                        y: this.markerPos.y
                    }
                });
            } else {
                GameStore.gamestateManager.setSubBotUpdate({
                    subBotMarkerEnabled: false
                });
            }
        }
    }]);

    return _class;
}();

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GameStore = __webpack_require__(0);
var AiManager = __webpack_require__(12);
var UpgradeManager = __webpack_require__(22);

module.exports = function () {
    function _class() {
        _classCallCheck(this, _class);

        this.spawnHeight = 20;
        this.spawnRadius = 15;
        this.spawnOffset = { x: 0, z: 5 };

        this.mouseOverDropInfo = undefined;

        this.totalWeight = 0;
    }

    _createClass(_class, [{
        key: "calcTotalWeight",
        value: function calcTotalWeight() {
            var _this = this;

            this.totalWeight = 0;
            var upgradeManager = GameStore.GameInstance.upgradeManager;

            UpgradeManager.upgradeList.forEach(function (info) {
                if (upgradeManager.getTotalSpawnedAndEquippedCount(info.type) < info.maxUpgrades) {
                    _this.totalWeight += info.weight;
                }
            });
        }
    }, {
        key: "dropItems",
        value: function dropItems(x, z, numItems) {
            var upgradeManager = GameStore.GameInstance.upgradeManager;
            var angleIncrement = Math.PI / (numItems + 1);

            upgradeManager.resetSpawnedCount();

            for (var i = 0, angle = Math.PI / 2 + angleIncrement; i < numItems; ++i, angle += angleIncrement) {
                this.calcTotalWeight();

                if (this.totalWeight === 0) {
                    console.log("Reached max upgrades");
                    return;
                }

                var randomIndex = undefined;
                var randomWeight = Math.random() * this.totalWeight;
                for (var infoIndex = 0; infoIndex < UpgradeManager.upgradeList.length; ++infoIndex) {
                    if (upgradeManager.getTotalSpawnedAndEquippedCount(infoIndex) < UpgradeManager.upgradeList[infoIndex].maxUpgrades) {
                        randomWeight -= UpgradeManager.upgradeList[infoIndex].weight;
                        if (randomWeight <= 0) {
                            randomIndex = infoIndex;
                            break;
                        }
                    }
                }

                if (randomIndex !== undefined) {
                    var item = UpgradeManager.upgradeList[randomIndex];
                    var spawnX = Math.sin(angle) * this.spawnRadius + x + this.spawnOffset.x;
                    var spawnZ = Math.cos(angle) * this.spawnRadius + z + this.spawnOffset.z;

                    upgradeManager.addToSpawnedCount(randomIndex);
                    GameStore.GameInstance.aiManager.spawnAi(AiManager.EAiType.Drop, spawnX, this.spawnHeight, spawnZ, item);
                }
            }
        }
    }, {
        key: "update",
        value: function update(time, delta) {
            var dropMeshList = [];
            GameStore.GameInstance.aiManager.aiList.forEach(function (ai) {
                if (ai.type === AiManager.EAiType.Drop) {
                    dropMeshList.push(ai.mesh);
                }
            });

            this.mouseOverDropInfo = undefined;

            var intersects = GameStore.GameInstance.player.IntersectMouseWithObjects(dropMeshList);
            if (intersects.length > 0) {
                var dropAi = intersects[0].object.that;
                this.mouseOverDropInfo = dropAi.upgradeInfo;
            }
        }
    }]);

    return _class;
}();

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.
var StringStore = __webpack_require__(11);
var SoundSystem = __webpack_require__(7);
var GameStore = __webpack_require__(0);
var BuffManager = __webpack_require__(18);

var TutorialMessage = function () {
    /**
     * @constructor Creates a new TutorialMessage model
     * @param {Object} params JSOn object which requires several properties
     * @param {Number} params.x Top left x coordinate of box to highlight element
     * @param {Number} params.y Top left y coordinate of box to highlight element
     * @param {Number} params.bx Bottom right x coordinate of box to highlight element
     * @param {Number} params.by Bottom right y coordinate of box to highlight element
     * @param {Number} params.delay Delay before continue
     * @param {String} params.message Content string
     * @param {Number} [params.messageX] Option to set message container position
     * @param {Number} [params.messageY] Option to set message container position
     * @param {Object} [params.clickThroughFunction] Option to call function when clicking on highlighted area
     * @param {Boolean} [params.disableProgressButton] Option to disable next button
     * @param {Object} [params.onProgressFunction] Option to call function when clicking next button
     * @param {String} [params.pointerEvents] Option to override pointer-events on highlighted area
     * @param {String} [params.elementNameForTopLeftCoord] Option to look for position of an element
     * @param {String} [params.imgPath] Option to path to image to display within message
     */
    function TutorialMessage(params) {
        _classCallCheck(this, TutorialMessage);

        this.topLeftCoord = {
            x: params.x,
            y: params.y
        };

        this.bottomRightCoord = {
            x: params.bx,
            y: params.by
        };

        this.message = params.message;

        this.delay = params.delay;

        this.messagePos = {
            x: params.messageX,
            y: params.messageY
        };

        this.imgSrc = params.imgPath;

        this.clickThroughFunction = params.clickThroughFunction;

        // Remove the next button if we want to force the user to click an element
        this.disableProgressButton = params.disableProgressButton === undefined ? false : params.disableProgressButton;

        // Function to call when progress button is clicked
        this.onProgressFunction = params.onProgressFunction;

        // Set to allow user to click elements behind the tutorial background
        this.pointerEvents = params.pointerEvents === undefined ? "auto" : params.pointerEvents;

        // Option to find top left coord on an element with a className that matches this string
        this.elementNameForTopLeftCoord = params.elementNameForTopLeftCoord;

        // Option to set size of message box
        this.size = {
            x: params.cellsWide === undefined ? 95 : params.cellsWide,
            y: params.cellsTall === undefined ? 40 : params.cellsTall
        };
    }

    _createClass(TutorialMessage, [{
        key: "getElementTopLeftCoord",
        value: function getElementTopLeftCoord(classNameForElement) {
            var bounds = document.getElementsByClassName(classNameForElement);

            if (bounds !== undefined && bounds[0] !== undefined) {
                bounds = bounds[0].getBoundingClientRect();

                var scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;
                var scrollTop = window.pageYOffset || document.documentElement.scrollTop;

                return {
                    x: 100 * ((bounds.left + scrollLeft) / window.innerWidth) - this.topLeftCoord.x,
                    y: 100 * ((bounds.top + scrollTop) / window.innerHeight) - this.topLeftCoord.y
                };
            }
        }
    }, {
        key: "getTopLeftCoord",
        value: function getTopLeftCoord() {
            if (this.elementNameForTopLeftCoord !== undefined) {
                return this.getElementTopLeftCoord(this.elementNameForTopLeftCoord);
            }

            return this.topLeftCoord;
        }
    }, {
        key: "getBottomRightCoord",
        value: function getBottomRightCoord() {
            return this.bottomRightCoord;
        }
    }]);

    return TutorialMessage;
}();

module.exports = function () {
    /**
     * @constructor Creates a new score log model
     */
    function Tutorial() {
        _classCallCheck(this, Tutorial);

        this.skipTutorial = false; // Set by checkbox in tutorial messages

        this.debugDelayMultiplier = 1; // Use to shorten delay before progress button appears

        // Store index for current tutorial message
        this.tutorialProgress = 0;

        // Stores tutorial steps
        this.tutorialMessage = [];
        this.tutorialMessage.push( // Hello Ama
        new TutorialMessage({
            x: 0, y: 0,
            bx: 0, by: 0,
            delay: 1,
            message: StringStore.TUTORIAL.WELCOME_1 }));
        this.tutorialMessage.push( // We can help three ways
        new TutorialMessage({
            x: 0, y: 0,
            bx: 0, by: 0,
            delay: 1,
            message: StringStore.TUTORIAL.WELCOME_2,
            onProgressFunction: this.startBuffAnim.bind(this) }));
        this.tutorialMessage.push( // Energy allocation explained
        new TutorialMessage({
            x: 86.5, y: 16,
            bx: 96, by: 29.75,
            delay: 1,
            message: StringStore.TUTORIAL.BUFF_1,
            onProgressFunction: this.endBuffAnim.bind(this),
            imgPath: "gui/AmaBoosted.png" }));
        this.tutorialMessage.push( // Second, we can energize surfaces with images called Stamps. We are sending some now.
        new TutorialMessage({
            x: 0, y: 0,
            bx: 0, by: 0,
            delay: 1,
            message: StringStore.TUTORIAL.STAMPS_1,
            onProgressFunction: this.waitForStand.bind(this),
            cellsTall: 30 }));
        this.tutorialMessage.push( // Green, magenta, and orange Stamps can boost you just like energy allocation. Try standing on one now.
        new TutorialMessage({
            x: 0, y: 0,
            bx: 0, by: 0,
            delay: 1,
            message: StringStore.TUTORIAL.STAMPS_2,
            disableProgressButton: true,
            cellsTall: 22 }));
        this.tutorialMessage.push( // You can also RIGHT CLICK any Stamp to bring it to life. Try it now.
        new TutorialMessage({
            x: 0, y: 0,
            bx: 0, by: 0,
            delay: 1,
            message: StringStore.TUTORIAL.STAMPS_5,
            disableProgressButton: true,
            cellsTall: 22 }));
        this.tutorialMessage.push( // Good work! You may also MIDDLE CLICK on Stamps to delete them.
        new TutorialMessage({
            x: 0, y: 0,
            bx: 0, by: 0,
            delay: 1,
            message: StringStore.TUTORIAL.STAMPS_6,
            cellsTall: 26 }));
        this.tutorialMessage.push( // Bit bot
        new TutorialMessage({
            x: 0, y: 0,
            bx: 0, by: 0,
            delay: 1,
            message: StringStore.TUTORIAL.BITBOT_1,
            cellsTall: 45,
            imgPath: "gui/bitBotIcon.png" }));
        this.tutorialMessage.push( // Sub bot
        new TutorialMessage({
            x: 0, y: 0,
            bx: 0, by: 0,
            delay: 1,
            message: StringStore.TUTORIAL.SUBBOT_1,
            cellsTall: 41,
            imgPath: "gui/subBotIcon.png" }));
        this.tutorialMessage.push( // Good luck
        new TutorialMessage({
            x: 0, y: 0,
            bx: 0, by: 0,
            delay: 1,
            cellsTall: 28,
            message: StringStore.TUTORIAL.BYE_1 }));

        this.tutorialLength = this.tutorialMessage.length;

        this.tutorialMessage.push( // Reach level 10 to unlock anti-collaborative mode for your viewers
        new TutorialMessage({
            x: 0, y: 0,
            bx: 0, by: 0,
            delay: 1,
            cellsTall: 28,
            message: StringStore.TUTORIAL.UNLOCK_PREVIEW }));
        this.unlockPreviewIndex = this.tutorialLength;

        this.tutorialMessage.push( // Anti-Collaborative Mode Unlocked
        new TutorialMessage({
            x: 0, y: 0,
            bx: 0, by: 0,
            delay: 1,
            cellsTall: 28,
            message: StringStore.TUTORIAL.UNLOCKED }));
        this.unlockIndex = this.tutorialLength + 1;

        this.topLeftCoord = {
            x: 0,
            y: 0
        };

        this.bottomRightCoord = {
            x: 0,
            y: 0
        };

        this.showProgressButton = false;
        this.showSkipButton = true;
        this.enabled = false; // Enabled by default unless we retrieve this data from the server
        this.packageObtained = false; // Tutorial doesn't start until the package is picked up by the player
        this.firstTimePlayedDelayMultiplier = 1; // Delay will be cut in half if you've already completed the tutorial

        // this.clearStorageDebug()
        this.initEnabled();
    }

    _createClass(Tutorial, [{
        key: "packagePickup",
        value: function packagePickup() {
            var _this = this;

            setTimeout(function () {
                _this.packageObtained = true;
            }, 1000);
        }
    }, {
        key: "disableStampsLiking",
        value: function disableStampsLiking() {
            var player = GameStore.GameInstance.player;
            player.stampLikeEnabled = false;
        }
    }, {
        key: "enableStampLiking",
        value: function enableStampLiking() {
            var player = GameStore.GameInstance.player;
            player.stampLikeEnabled = true;
        }
    }, {
        key: "disableStampsCensor",
        value: function disableStampsCensor() {
            var player = GameStore.GameInstance.player;
            player.stampCensorEnabled = false;
        }
    }, {
        key: "enableStampCensor",
        value: function enableStampCensor() {
            var player = GameStore.GameInstance.player;
            player.stampCensorEnabled = true;
        }
    }, {
        key: "disableStampsToLife",
        value: function disableStampsToLife() {
            var player = GameStore.GameInstance.player;
            player.stampToLifeEnabled = false;
        }
    }, {
        key: "enableStampToLife",
        value: function enableStampToLife() {
            var player = GameStore.GameInstance.player;
            player.stampToLifeEnabled = true;
        }
    }, {
        key: "switchToTargetMode",
        value: function switchToTargetMode() {
            var player = GameStore.GameInstance.player;
            player.stampModeEnabled = false;
            player.stampModeToggleEnabled = false;
            player.stampModeHoldTime = 0;
            player.wasStampModeAction = false;
        }
    }, {
        key: "waitForRaiseLoop",
        value: function waitForRaiseLoop() {
            if (this.skipTutorial || !this.enabled) {
                return;
            }

            var stampManager = GameStore.GameInstance.stampManager;
            if (stampManager.statsData.numStampSpawns <= 0) {
                setTimeout(this.waitForRaiseLoop.bind(this), 200);
            } else {
                this.enableStampCensor();
                this.progressClick();
            }
        }
    }, {
        key: "waitForRaise",
        value: function waitForRaise() {
            if (this.skipTutorial || !this.enabled) {
                return;
            }

            setTimeout(this.enableStampLiking.bind(this), 5500);
            setTimeout(this.enableStampToLife.bind(this), 5500);
            setTimeout(this.waitForRaiseLoop.bind(this), 5501);
        }
    }, {
        key: "waitForStandLoop",
        value: function waitForStandLoop() {
            if (this.skipTutorial || !this.enabled) {
                return;
            }

            var player = GameStore.GameInstance.player;
            if (player.standingStampBuffType === undefined) {
                setTimeout(this.waitForStandLoop.bind(this), 200);
            } else {
                this.waitForRaise();
                this.progressClick();
            }
        }
    }, {
        key: "waitForStand",
        value: function waitForStand() {
            if (this.skipTutorial || !this.enabled) {
                return;
            }

            setTimeout(this.waitForStandLoop.bind(this), 8000);
        }
    }, {
        key: "sendStamps",
        value: function sendStamps() {
            var _this2 = this;

            if (this.skipTutorial || !this.enabled) {
                return;
            }

            var stampHeal = [];
            for (var i = 0; i < 81; i++) {
                stampHeal.push(7);
            }

            var stampSpeed = [];
            for (var _i = 0; _i < 81; _i++) {
                stampSpeed.push(5);
            }

            var stampCannon = [];
            for (var _i2 = 0; _i2 < 81; _i2++) {
                stampCannon.push(9);
            }

            var message = {
                x: 0.4, y: 0.7,
                delay: 0.5,
                user: "Collaborator (1)",
                stamp: stampHeal,
                textColor: { r: 128, g: 255, b: 0 },
                userId: ""
            };

            GameStore.GameInstance.stampManager.placeStampFromScreen(message.x, message.y, message.stamp, message.delay, message.userId, message.user, message.textColor);

            setTimeout(function () {
                if (_this2.skipTutorial || !_this2.enabled) {
                    return;
                }

                message = {
                    x: 0.5, y: 0.7,
                    delay: 0.5,
                    user: "Collaborator (2)",
                    stamp: stampSpeed,
                    textColor: { r: 255, g: 0, b: 255 },
                    userId: ""
                };

                GameStore.GameInstance.stampManager.placeStampFromScreen(message.x, message.y, message.stamp, message.delay, message.userId, message.user, message.textColor);
            }, 250);

            setTimeout(function () {
                if (_this2.skipTutorial || !_this2.enabled) {
                    return;
                }

                message = {
                    x: 0.6, y: 0.7,
                    delay: 0.5,
                    user: "Collaborator (3)",
                    stamp: stampCannon,
                    textColor: { r: 255, g: 128, b: 0 },
                    userId: ""
                };

                GameStore.GameInstance.stampManager.placeStampFromScreen(message.x, message.y, message.stamp, message.delay, message.userId, message.user, message.textColor);
            }, 500);
        }
    }, {
        key: "startBuffAnim",
        value: function startBuffAnim() {
            var _this3 = this;

            if (this.skipTutorial || !this.enabled) {
                return;
            }

            BuffManager.buffInfo[2].amount = 1;

            this.buffAnimHandle = setInterval(function () {
                if (_this3.skipTutorial || !_this3.enabled) {
                    _this3.endBuffAnimInterval();
                    return;
                }

                if (BuffManager.buffInfo[2].amount === 1) {
                    BuffManager.buffInfo[0].amount = 1;
                    BuffManager.buffInfo[1].amount = 0;
                    BuffManager.buffInfo[2].amount = 0;
                } else if (BuffManager.buffInfo[0].amount === 1) {
                    BuffManager.buffInfo[0].amount = 0;
                    BuffManager.buffInfo[1].amount = 1;
                    BuffManager.buffInfo[2].amount = 0;
                } else {
                    BuffManager.buffInfo[0].amount = 0;
                    BuffManager.buffInfo[1].amount = 0;
                    BuffManager.buffInfo[2].amount = 1;
                }
            }, 1500);
        }
    }, {
        key: "endBuffAnimInterval",
        value: function endBuffAnimInterval() {
            clearInterval(this.buffAnimHandle);
            this.buffAnimHandle = undefined;
            BuffManager.buffInfo[0].amount = 0;
            BuffManager.buffInfo[1].amount = 0;
            BuffManager.buffInfo[2].amount = 0;
        }
    }, {
        key: "endBuffAnim",
        value: function endBuffAnim() {
            this.endBuffAnimInterval();

            if (this.skipTutorial || !this.enabled) {
                return;
            }

            setTimeout(this.sendStamps.bind(this), 6000);
        }
    }, {
        key: "enableShield",
        value: function enableShield() {
            GameStore.GameInstance.levelManager.roomList[0].locked = true;
        }
    }, {
        key: "disableShield",
        value: function disableShield() {
            GameStore.GameInstance.levelManager.roomList[0].locked = false;
        }
    }, {
        key: "clearStorageDebug",
        value: function clearStorageDebug() {
            if ((typeof Storage === "undefined" ? "undefined" : _typeof(Storage)) !== undefined) {
                localStorage.removeItem("tycho_tutorialEnabled");
                localStorage.removeItem("tycho_hasCompletedTutorial");
            }
        }
    }, {
        key: "initEnabled",
        value: function initEnabled() {
            var _this4 = this;

            this.hasCompletedTutorial = (typeof Storage === "undefined" ? "undefined" : _typeof(Storage)) !== undefined ? localStorage.getItem("tycho_hasCompletedTutorial") === "true" : false;
            this.firstTimePlayedDelayMultiplier = this.hasCompletedTutorial ? 0.5 : 1;

            var enabled = (typeof Storage === "undefined" ? "undefined" : _typeof(Storage)) !== undefined ? !(localStorage.getItem("tycho_tutorialEnabled") === "false") : true;

            if (enabled) {
                // Delay display of tutorial for 1s
                setTimeout(function () {
                    _this4.enabled = true;
                    _this4.showSkipButton = true;
                }, 1000);
            } else {
                this.enabled = false;
            }
        }
    }, {
        key: "showNextButtonAfterDelay",
        value: function showNextButtonAfterDelay() {
            var _this5 = this;

            var index = this.tutorialProgress;
            var delay = this.tutorialMessage[index].delay;

            setTimeout(function () {
                _this5.showProgressButton = true;
            }, delay * 1000 * this.debugDelayMultiplier * this.firstTimePlayedDelayMultiplier);
        }
    }, {
        key: "completeTutorial",
        value: function completeTutorial() {
            this.tutorialProgress = 0;
            this.enabled = false;
            this.skipTutorial = false;
            this.hasCompletedTutorial = true;
            this.enableStampToLife();
            this.enableStampCensor();
            this.enableStampLiking();
            this.switchToTargetMode();
            this.disableShield();
            this.endBuffAnimInterval();

            SoundSystem.globalMusic.endIdleMusic();

            this.topLeftCoord = {
                x: 0,
                y: 0
            };

            this.bottomRightCoord = {
                x: 0,
                y: 0

                // Store completed tutorial data
            };if ((typeof Storage === "undefined" ? "undefined" : _typeof(Storage)) !== undefined) {
                localStorage.setItem("tycho_tutorialEnabled", this.enabled);
                localStorage.setItem("tycho_hasCompletedTutorial", this.hasCompletedTutorial);
            }
        }
    }, {
        key: "checkboxChange",
        value: function checkboxChange(event) {
            this.skipTutorial = event.target.checked;
        }
    }, {
        key: "typeOutMessage",
        value: function typeOutMessage() {
            if (this.messageToTypeIndex < this.messagesToType.length) {
                var typingString = this.messagesToType[this.messageToTypeIndex];

                if (this.characterIndex < typingString.length) {
                    // Play new line sound
                    if (this.characterIndex === 0) {
                        SoundSystem.globalMusic.playNewLine();
                    }

                    // Type out string
                    this.displayMessages[this.messageToTypeIndex] += typingString.charAt(this.characterIndex++);
                    setTimeout(this.typeOutMessage.bind(this), 24);
                } else {
                    // Move to next string
                    this.messageToTypeIndex += 1;
                    this.characterIndex = 0;
                    setTimeout(this.typeOutMessage.bind(this), 350);
                }
            } else {
                // Done typing so enable next button
                this.showProgressButton = true;
            }
        }
    }, {
        key: "beginTypeOutMessage",
        value: function beginTypeOutMessage(message) {
            var _this6 = this;

            this.messagesToType = message.split("\n");
            this.messageToTypeIndex = 0;
            this.characterIndex = 0;
            this.displayMessages = [];

            // Setup array of empty strings to match messagesToType length
            this.messagesToType.forEach(function (msg) {
                _this6.displayMessages.push("");
            });

            setTimeout(this.typeOutMessage.bind(this), 1000);
        }
    }, {
        key: "clearTypeOutMessage",
        value: function clearTypeOutMessage() {
            this.displayMessages = undefined;
            this.messageToTypeIndex = 0;
            this.characterIndex = 0;
        }
    }, {
        key: "progressClick",
        value: function progressClick() {
            this.clearTypeOutMessage();

            if (this.messageIndex !== undefined) {
                this.enabled = false;
                this.showSkipButton = true;
                this.messageIndex = undefined;
            } else if (this.skipTutorial || this.tutorialProgress + 1 === this.tutorialLength) {
                if (this.skipTutorial) {
                    GameStore.hubbleManager.sendHubbleEvent("tutorial_skip");
                } else {
                    GameStore.hubbleManager.sendHubbleEvent("tutorial_complete");
                }

                this.completeTutorial();
            } else {
                this.tutorialProgress++;
                this.topLeftCoord = this.tutorialMessage[this.tutorialProgress].getTopLeftCoord();
                this.bottomRightCoord = this.tutorialMessage[this.tutorialProgress].getBottomRightCoord();
                this.showProgressButton = false;
                // this.showNextButtonAfterDelay()

                GameStore.hubbleManager.sendHubbleEvent("tutorial_next");
            }
        }
    }, {
        key: "showUnlockPreviewMessage",
        value: function showUnlockPreviewMessage() {
            this.enabled = true;
            this.showSkipButton = false;
            this.messageIndex = this.unlockPreviewIndex;
        }
    }, {
        key: "showUnlockMessage",
        value: function showUnlockMessage() {
            if ((typeof Storage === "undefined" ? "undefined" : _typeof(Storage)) !== undefined) {
                localStorage.setItem("tycho_hasShownUnlockMessage", true);
            }

            this.enabled = true;
            this.showSkipButton = false;
            this.messageIndex = this.unlockIndex;
        }
    }, {
        key: "getMessageIndex",
        value: function getMessageIndex() {
            return this.messageIndex !== undefined ? this.messageIndex : this.tutorialProgress;
        }
    }, {
        key: "isEnabled",
        value: function isEnabled() {
            return !GameStore.demoManager.isEnabled && this.enabled;
        }
    }]);

    return Tutorial;
}();

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.

var THREE = __webpack_require__(1);

var PhysBlock = __webpack_require__(184);
var GameStore = __webpack_require__(0);
var Utils = __webpack_require__(2);

function PhysBlockPool() {
    var _this = this;

    this.size = 0;
    this.blocks = [];
    this.physBlockParent = new THREE.Object3D();
    this.blockGeo = new THREE.BoxGeometry(1, 1, 1);

    this.paletteMatList = [];
    if (GameStore.GameInstance !== undefined) {
        GameStore.GameInstance.stampManager.getPalette().forEach(function (colorInfo) {
            var mat = new THREE.MeshPhongMaterial({
                specular: 0x050505,
                shininess: 100
            });
            mat.color.setHex(Utils.rgbToHex(Math.round(colorInfo.r * 255), Math.round(colorInfo.g * 255), Math.round(colorInfo.b * 255)));
            _this.paletteMatList.push(mat);
        });
    }

    PhysBlockPool.prototype.getPaletteMat = function (r, g, b) {
        return this.paletteMatList[Utils.getPaletteColorIndex(r, g, b)];
    };

    PhysBlockPool.prototype.Create = function (amount) {
        this.size = amount;

        var b;
        for (var i = 0; i < this.size; i++) {
            b = new PhysBlock();
            b.remove = 1;
            b.Init(this.blockGeo, this.paletteMatList[0]);
            this.blocks.push(b);
        }
    };

    PhysBlockPool.prototype.Get = function () {
        for (var i = 0; i < this.size; i++) {
            if (this.blocks[i].remove === 1) {
                var b = this.blocks[i];
                b.remove = 0;

                // Move youngest blocks to back of array
                this.blocks.splice(i, 1);
                this.blocks.push(b);

                return b;
            }
        }

        // Return oldest if nothing is free
        if (this.blocks.length > 0) {
            var b = this.blocks[0];
            b.remove = 0;

            // Move youngest blocks to back of array
            this.blocks.splice(0, 1);
            this.blocks.push(b);

            return b;
        }

        return undefined;
    };

    PhysBlockPool.prototype.Free = function () {
        var f = 0;
        for (var i = 0; i < this.size; i++) {
            if (this.blocks[i].remove === 1) {
                f++;
            }
        }
        return f;
    };
}
PhysBlockPool.prototype = new PhysBlockPool();
PhysBlockPool.prototype.constructor = PhysBlockPool;
module.exports.PhysBlockPool = PhysBlockPool;

function AmmoPool() {
    this.size = 0;
    this.ammo = [];

    AmmoPool.prototype.Create = function (amount) {
        this.size = amount;

        var b;
        for (var i = 0; i < this.size; i++) {
            var geo = new THREE.BoxGeometry(1, 1, 1);
            var mat = new THREE.MeshBasicMaterial({ color: 0xffffff });
            b = new THREE.Mesh(geo, mat);
            b.position.set(-100, -500, -100);
            b.remove = 1;
            b.that = this;
            b.ammoId = i;
            this.ammo.push(b);
        }
    };

    AmmoPool.prototype.Get = function () {
        for (var i = 0; i < this.size; i++) {
            var ammoObj = this.ammo[i];
            if (ammoObj.remove === 1) {
                ammoObj.remove = 0;
                GameStore.GameInstance.scene.add(ammoObj);
                return ammoObj;
            }
        }
        return undefined;
    };

    AmmoPool.prototype.Free = function () {
        var f = 0;
        for (var i = 0; i < this.size; i++) {
            var ammoObj = this.ammo[i];
            if (ammoObj.remove === 1) {
                GameStore.GameInstance.scene.remove(ammoObj);
                f++;
            }
        }
        return f;
    };

    AmmoPool.prototype.Release = function (mesh) {
        var ammoObj = this.ammo[mesh.ammoId];
        ammoObj.remove = 1;
        ammoObj.position.set(-100, -500, -100);

        GameStore.GameInstance.scene.remove(ammoObj);
    };
}
AmmoPool.prototype = new AmmoPool();
AmmoPool.prototype.constructor = AmmoPool;
module.exports.AmmoPool = AmmoPool;

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.

var THREE = __webpack_require__(1);
var Utils = __webpack_require__(2);
var GameStore = __webpack_require__(0);

function PhysBlock() {
    this.opacity = 1.0;
    this.color = "0xFFFFFF";
    this.rotationDampen = 1; // Used to dampen rotation when on ground
    this.life = 3; // Tracker for remaining life
    this.lifeSpawn = 3; // Total life at spawn time
    this.spawnScale = 1; // Scale at spawn
    this.lifeMin = 10; // Lifetime is randomized, this guarantees a minimum lifetime
    this.fadeTime = 1; // Fade out time
    this.gravity = 0.07; // Default gravity if not set
    this.activeGravity = this.gravity; // Used to subtract Y force
    this.lastPostion = new THREE.Vector3(0, -100, 0); // Store for last position during movement
    this.idleTime = 0; // Store for time the block has not been moving
    this.maxIdleTime = 1; // If idle greater than this then stop calculating
    this.mesh = undefined;
    this.remove = 0;
    this.velocity;
    this.angle;
    this.force = 0;
    this.forceY = 0;
    this.fadeEmissive = true;

    // How long in seconds should we force simulation after spawn
    // This helps voxels spawning under the height found to continue simulating
    this.forceSimulateTime = 1;

    PhysBlock.prototype.Init = function (geo, mat) {
        this.mesh = new THREE.Mesh(geo, mat);
        this.mesh.visible = false;
        this.mesh.castShadow = false;
        GameStore.GameInstance.scene.add(this.mesh);
    };

    /**
     * @description Used to create floating blocks for emitters
     * @param {number} x x coordinate of spawn position
     * @param {number} y y coordinate of spawn position
     * @param {number} z z coordinate of spawn position
     * @param {number} size Spawn scale
     * @param {number} r Red color value from 0 to 255
     * @param {number} g Green color value from 0 to 255
     * @param {number} b Blue color value from 0 to 255
     * @param {number} life Lifetime of spawned cube in seconds
     * @param {number} lifeMin Minimum lifetime of spawned cube in seconds
     * @param {number} angle Spawn angle in degrees
     * @param {number} force Spawn force used to calculate initial velocity & handle acceleration/deceleration
     * @param {number} gravity Override spawn gravity
     * @param {number} emissiveColor Color stored in hexidecimal format 0x000000
     * @param {Object} [parentVelocity] Optional THREE.Vector3 object with parent velocity to inherit from
     * @param {number} deltaScalar Amount to scale delta by
     * @param {boolean} [fadeEmissive] Whether the emissive value should fade to off
     */
    PhysBlock.prototype.CreateFloater = function (x, y, z, size, r, g, b, life, lifeMin, force, gravity, emissiveColor, parentVelocity, deltaScalar, fadeEmissive) {
        this.force = force;
        this.forceY = force * 0.75 - Math.random() * force * 0.25; // 50-75% horizontal force

        if (parentVelocity === undefined) {
            parentVelocity = new THREE.Vector3();
        }

        this.velocity = {
            x: Utils.RandomRange(-this.force, this.force) + parentVelocity.x,
            y: Math.random() * force + force * 0.5 + parentVelocity.y,
            z: Utils.RandomRange(-this.force, this.force) + parentVelocity.z
        };

        this.activeGravity = gravity;

        this.deltaScalar = deltaScalar;

        this.CreateShared(x, y, z, size, r, g, b, life, emissiveColor, lifeMin, fadeEmissive);
    };

    /**
     * @description Used to setup physBlocks from explosion
     * @param {number} x x coordinate of spawn position
     * @param {number} y y coordinate of spawn position
     * @param {number} z z coordinate of spawn position
     * @param {number} size Spawn scale
     * @param {number} r Red color value from 0 to 255
     * @param {number} g Green color value from 0 to 255
     * @param {number} b Blue color value from 0 to 255
     * @param {number} life Lifetime of spawned cube in seconds
     * @param {number} angle Spawn angle in degrees
     * @param {number} force Spawn force used to calculate initial velocity & handle acceleration/deceleration
     * @param {number} emissiveColor Color stored in hexidecimal format 0x000000
     * @param {Object} [parentVelocity] Optional THREE.Vector3 object with parent velocity to inherit from
     * @param {boolean} fadeEmissive Whether emissive should fade over time. TRUE by default.
     */
    PhysBlock.prototype.CreateFromExplode = function (x, y, z, size, r, g, b, life, angle, force, emissiveColor, parentVelocity, fadeEmissive) {
        this.force = force;
        this.forceY = force * 0.75 - Math.random() * force * 0.5;

        if (parentVelocity === undefined) {
            parentVelocity = new THREE.Vector3();
        }

        this.angle = angle * Math.PI / 180; // to rad

        this.velocity = {
            x: Math.random() * force - force / 1.5 + parentVelocity.x,
            y: Math.random() * force + parentVelocity.y,
            z: Math.random() * force - force / 1.5 + parentVelocity.z
        };

        this.activeGravity = this.gravity;

        this.deltaScalar = 1;

        this.CreateShared(x, y, z, size, r, g, b, life, emissiveColor, undefined, fadeEmissive);
    };

    /**
     * @description Used to setup physBlocks from RemoveSphere
     * @param {number} x x coordinate of spawn position
     * @param {number} y y coordinate waof spawn position
     * @param {number} z z coordinate of spawn position
     * @param {number} size Spawn scale
     * @param {number} r Red color value from 0 to 255
     * @param {number} g Green color value from 0 to 255
     * @param {number} b Blue color value from 0 to 255
     * @param {number} life Lifetime of spawned cube in seconds
     * @param {number} angle Spawn angle in degrees
     * @param {number} force Spawn force used to calculate initial velocity & handle acceleration/deceleration
     * @param {number} emissiveColor Color stored in hexidecimal format 0x000000
     * @param {Object} [parentVelocity] Optional THREE.Vector3 object with parent velocity to inherit from
     */
    PhysBlock.prototype.Create = function (x, y, z, size, r, g, b, life, angle, force, emissiveColor, parentVelocity) {
        this.force = Math.random() * force - force / 1.5;
        this.forceY = force * 0.75 - Math.random() * force * 0.5;

        if (parentVelocity === undefined) {
            parentVelocity = new THREE.Vector3();
        }

        this.angle = angle * Math.PI / 180; // to rad

        this.velocity = {
            x: this.force * Math.cos(this.angle) + parentVelocity.x,
            y: Math.random() * force + parentVelocity.y,
            z: this.force * Math.sin(this.angle) + parentVelocity.z
        };

        this.activeGravity = this.gravity;

        this.deltaScalar = 1;

        this.CreateShared(x, y, z, size, r, g, b, life, emissiveColor);
    };

    /**
     * @description Used to finish setup of physBlocks
     * @param {number} x x coordinate of spawn position
     * @param {number} y y coordinate of spawn position
     * @param {number} z z coordinate of spawn position
     * @param {number} size Spawn scale
     * @param {number} r Red color value from 0 to 255
     * @param {number} g Green color value from 0 to 255
     * @param {number} b Blue color value from 0 to 255
     * @param {number} life Lifetime of spawned cube in seconds
     * @param {number} emissiveColor Color stored in hexidecimal format 0x000000
     * @param {number} [lifeMin] Optional minimum lifetime
     * @param {boolean} [fadeEmissive] Whether the emissive value should fade to off
     */
    PhysBlock.prototype.CreateShared = function (x, y, z, size, r, g, b, life, emissiveColor, lifeMin, fadeEmissive) {
        this.rotationDampen = 1;

        if (lifeMin === undefined) {
            lifeMin = this.lifeMin;
        }

        this.life = life * Math.random() + lifeMin;
        this.lifeSpawn = this.life;

        if (fadeEmissive !== undefined) {
            this.fadeEmissive = fadeEmissive;
        } else {
            this.fadeEmissive = true;
        }

        this.forceSimulateTime = 1;

        this.mesh.material = GameStore.GameInstance.physBlockPool.getPaletteMat(r, g, b);
        this.spawnScale = size;
        this.mesh.scale.set(size, size, size);
        this.mesh.position.set(x, y, z);
        this.mesh.castShadow = false;
        this.mesh.visible = true;

        // Add to tick if not already in the list
        var index = GameStore.GameInstance.objects.indexOf(this);
        if (index === -1) {
            GameStore.GameInstance.objects.push(this);
        }
    };

    PhysBlock.prototype.Draw = function (time, delta) {
        this.life -= delta * this.deltaScalar;

        if (this.life <= 0 || this.mesh.position.y < GameStore.GameInstance.currentMap.lavaPosition) {
            this.mesh.visible = false;
            this.remove = 1;
            this.life = 0;
            return;
        }

        if (this.fadeEmissive) {
            // Only start fading at Î» + Î» / 2 + Î» / 4 ... - OMFG HL3 confirmed
            var fadePoint = 1.125;
            // This is really slow, so removing for now
            //this.mesh.material.emissive.multiplyScalar(Math.min((this.life * fadePoint) / this.lifeSpawn, 1))
        }

        var aliveTime = this.lifeSpawn - this.life;

        // Check if idling
        if (this.lastPostion.equals(this.mesh.position)) {
            this.idleTime += delta * this.deltaScalar;
        } else if (this.idleTime > 0) {
            this.idleTime = 0;
        }

        // Only calculate if I'm not idling OR in forced simulate time
        if (this.idleTime <= this.maxIdleTime || aliveTime <= this.forceSimulateTime) {
            var height = GameStore.GameInstance.chunkManager.GetHeight(this.mesh.position.x, this.mesh.position.z);

            if (height === undefined) {
                height = 0;
            }

            // Vector copy instead of clone for performance
            this.lastPostion.x = this.mesh.position.x;
            this.lastPostion.y = this.mesh.position.y;
            this.lastPostion.z = this.mesh.position.z;

            var onGround = height + GameStore.GameInstance.world.blockSize / 2 >= this.mesh.position.y;
            // If not on the ground or if I'm still moving
            if (!onGround || this.force !== 0) {
                this.mesh.position.x += this.force * this.velocity.x * delta * this.deltaScalar;
                this.mesh.position.y += !onGround * this.forceY * this.velocity.y * delta * this.deltaScalar; // Don't modify height if on ground
                this.mesh.position.z += this.force * this.velocity.z * delta * this.deltaScalar;
                this.mesh.rotation.set(this.rotationDampen * this.velocity.x * time * (this.life * this.life) / 300, this.rotationDampen * this.velocity.y * time * (this.life * this.life) / 300, this.rotationDampen * this.velocity.z * time * (this.life * this.life) / 300);

                if (onGround && aliveTime > this.forceSimulateTime) {
                    this.force -= Math.sign(this.force) * 0.03;
                    this.rotationDampen *= 0.65;
                } else {
                    this.force -= Math.sign(this.force) * 0.01;
                    this.forceY -= this.activeGravity;
                }

                if (Math.abs(this.force) <= 0.02) {
                    this.force = 0;
                }
            }
        }

        // Start fading out if remaining life is <= fadeTime
        if (this.life <= this.fadeTime && this.life > 0) {
            var newScale = this.spawnScale * this.life / this.fadeTime;
            this.mesh.scale.set(newScale, newScale, newScale);
        }
    };

    PhysBlock.prototype.getColor = function () {
        return parseInt(this.color);
    };
}
PhysBlock.prototype = new PhysBlock();
PhysBlock.prototype.constructor = PhysBlock;
module.exports = PhysBlock;

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GameStore = __webpack_require__(0);
var Nimble = __webpack_require__(6);
var ENDPOINTS = __webpack_require__(14);
var getPem = __webpack_require__(186);
var tmi = __webpack_require__(277);

var TWITCH_REDIRECT_URI = new Nimble.uri(ENDPOINTS["DEVELOPMENT"].TWITCH_REDIRECT_URI);
var TWITCH_BROADCAST_URI = new Nimble.uri(ENDPOINTS["DEVELOPMENT"].TWITCH_BROADCAST_URI);
var TWITCH_STREAM_INFO_URI = new Nimble.uri(ENDPOINTS["DEVELOPMENT"].TWITCH_STREAM_INFO_URI);
var TWITCH_EXTENSION_LIST_URI = new Nimble.uri(ENDPOINTS["DEVELOPMENT"].TWITCH_EXTENSION_LIST_URI);
var TWITCH_EXTENSIONS_INFO_URI = new Nimble.uri(ENDPOINTS["DEVELOPMENT"].TWITCH_EXTENSIONS_INFO_URI);
var TWITCH_FOLLOWERS_LIST_URI = new Nimble.uri(ENDPOINTS["DEVELOPMENT"].TWITCH_FOLLOWERS_LIST_URI);
var TWITCH_SUBSCRIBERS_LIST_URI = new Nimble.uri(ENDPOINTS["DEVELOPMENT"].TWITCH_SUBSCRIBERS_LIST_URI);

module.exports = function () {
    function _class() {
        _classCallCheck(this, _class);

        this.authCode = "";
        this.authScope = "";
        this.broadcastId = 0;
        this.cachedViewerCount = 0;
        this.cachedStreamInfo = undefined;
        this.cachedExtensionsInfo = undefined;
        this.cachedInstalledExtensionList = undefined;
        this.extensionClientId = "38v1o52q1c2qja1lfr73uid3r5rj8u";
        this.bitsTransactionList = [];
        this.subTransactionList = [];
        this.publicKey = undefined;
        this.refreshTokenIntervalMs = 1000 * 60 * 15; // 15 minutes recommended by Twitch
        this.followersList = [];
        this.subscribersList = [];
    }

    _createClass(_class, [{
        key: "authenticate",
        value: function authenticate() {
            var _this = this;

            var urlParams = {};
            var pars = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (m, key, value) {
                urlParams[key] = value;
            });

            if (urlParams.code === undefined) {
                return Promise.reject(new Error("You need to Twitch Authenticate"));
            }

            this.authCode = urlParams.code;
            this.authScope = urlParams.scope;

            var hostData = GameStore.hostData;
            return Nimble.twitch.retrieveTwitchTokenStandalone(hostData.clientId, hostData.secret, this.authCode, TWITCH_REDIRECT_URI({ address: hostData.address })).then(function () {
                return Nimble.twitch.store.accessToken !== undefined && Nimble.twitch.retrieveTwitchChannelStandalone(Nimble.twitch.store.accessToken);
            }).then(function () {
                return Nimble.twitch.store.accessToken !== undefined && Nimble.nexus.retrieveNexusToken(Nimble.twitch.store.token, Nimble.twitch.store.streamer.channelId);
            }).then(function () {
                return window.fetch("https://id.twitch.tv/oauth2/.well-known/openid-configuration", {
                    "method": "GET",
                    "headers": {
                        "Content-Type": "application/json"
                    }
                });
            }).then(function (response) {
                return response.json();
            }).then(function (response) {
                return window.fetch(response.jwks_uri, {
                    "method": "GET",
                    "headers": {
                        "Content-Type": "application/json"
                    }
                });
            }).then(function (response) {
                return response.json();
            }).then(function (response) {
                _this.publicKey = getPem(response.keys[0].n, response.keys[0].e);

                GameStore.optionsMenu.loadSettings();

                setInterval(function () {
                    _this.refreshToken();
                }, _this.refreshTokenIntervalMs);

                Nimble.hubble.configure({
                    authSource: "TYCHO_GAME",
                    source: "TYCHO_GAME",
                    authToken: GameStore.twitchManager.getAuthForAWS(),
                    endpoint: ENDPOINTS["DEVELOPMENT"].HUBBLE_URI
                });
                GameStore.hubbleManager.sendHubbleEvent("startup", true);

                _this.pubSubConnect();
                _this.tmiConnect(Nimble.twitch.store.streamer.name);
            }).then(function () {
                return Nimble.twitch.store.accessToken !== undefined;
            }).catch(function (error) {
                Nimble.logger.error(error);
            });
        }
    }, {
        key: "refreshToken",
        value: function refreshToken() {
            var _this2 = this;

            // Only allow one refresh call at a time
            if (this.refreshingToken !== true) {
                this.refreshingToken = true;
                var hostData = GameStore.hostData;
                Nimble.twitch.refreshToken(hostData.clientId, hostData.secret).then(function () {
                    _this2.refreshingToken = false;
                }).catch(function (error) {
                    _this2.refreshingToken = false;
                    Nimble.logger.error("Error refreshing token", error);
                });
            }
        }
    }, {
        key: "broadcast",
        value: function broadcast(message, optionalTargets) {
            var body = {
                broadcastId: this.broadcastId++,
                optionalTargets: optionalTargets,
                message: message
            };
            return window.fetch(TWITCH_BROADCAST_URI({
                channelId: Nimble.twitch.store.streamer.channelId
            }), {
                "method": "POST",
                "headers": {
                    "Authorization": this.getAuthForAWS(),
                    "Content-Type": "application/json"
                },
                "body": JSON.stringify(body)
            }).then(function (response) {
                return response.json();
            }).then(function (response) {
                if (response.status >= 400) {
                    throw new Error("Twitch PubSub failed. Most likely too many requests");
                }
            }).catch(function (error) {
                Nimble.logger.error(error);
            });
        }
    }, {
        key: "refreshStreamingInfo",
        value: function refreshStreamingInfo() {
            var _this3 = this;

            return window.fetch(TWITCH_STREAM_INFO_URI({
                channelId: Nimble.twitch.store.streamer.channelId
            }), {
                "method": "GET",
                "headers": {
                    "Accept": "application/vnd.twitchtv.v5+json",
                    "Client-ID": GameStore.hostData.clientId,
                    "Content-Type": "application/json"
                }
            }).then(function (response) {
                return response.json();
            }).then(function (response) {
                _this3.cachedStreamInfo = response.stream;

                _this3.cachedViewerCount = response.stream !== null && response.stream !== undefined ? response.stream.viewers : 0;

                return _this3.cachedStreamInfo;
            }).catch(function (error) {
                Nimble.logger.error(error);
            });
        }
    }, {
        key: "refreshInstalledExtensionList",
        value: function refreshInstalledExtensionList() {
            var _this4 = this;

            return window.fetch(TWITCH_EXTENSION_LIST_URI(), {
                "method": "GET",
                "headers": {
                    "Authorization": "Bearer " + Nimble.twitch.store.accessToken
                }
            }).then(function (response) {
                if (response.status === 200) {
                    return response.json();
                } else {
                    throw new Error("Can't query extension list. " + response.status);
                }
            }).then(function (response) {
                _this4.cachedInstalledExtensionList = response.data;
            }).catch(function (error) {
                Nimble.logger.error(error);
            });
        }
    }, {
        key: "refreshExtensionInfo",
        value: function refreshExtensionInfo() {
            var _this5 = this;

            return window.fetch(TWITCH_EXTENSIONS_INFO_URI(), {
                "method": "GET",
                "headers": {
                    "Authorization": "Bearer " + Nimble.twitch.store.accessToken,
                    "Content-Type": "application/json"
                }
            }).then(function (response) {
                if (response.status === 200) {
                    return response.json();
                } else {
                    throw new Error("Can't query extension. " + response.status);
                }
            }).then(function (response) {
                _this5.cachedExtensionsInfo = response.data;
            }).catch(function (error) {
                Nimble.logger.error(error);
            });
        }
    }, {
        key: "setTychoExtensionOnChannel",
        value: function setTychoExtensionOnChannel() {
            var _this6 = this;

            return window.fetch(TWITCH_EXTENSIONS_INFO_URI(), {
                "method": "PUT",
                "headers": {
                    "Authorization": "Bearer " + Nimble.twitch.store.accessToken,
                    "Content-Type": "application/json"
                },
                "body": JSON.stringify({
                    "data": {
                        "overlay": {
                            "1": {
                                "active": true,
                                "id": this.extensionClientId,
                                "version": "0.6.0"
                            }
                        },
                        "component": {
                            "1": {
                                "active": false
                            },
                            "2": {
                                "active": false
                            }
                        }
                    }
                })
            }).then(function (response) {
                if (response.status === 200) {
                    return response.json();
                } else {
                    throw new Error("Can't set extension. " + response.status);
                }
            }).then(function (response) {
                _this6.cachedExtensionsInfo = response.data;
            }).catch(function (error) {
                Nimble.logger.error(error);
            });
        }
    }, {
        key: "getIsExtensionInstalled",
        value: function getIsExtensionInstalled() {
            var _this7 = this;

            if (this.cachedInstalledExtensionList !== undefined) {
                return this.cachedInstalledExtensionList.find(function (extInfo) {
                    return extInfo.id === _this7.extensionClientId;
                }) !== undefined;
            }

            return false;
        }
    }, {
        key: "addBitsTransaction",
        value: function addBitsTransaction(message) {
            this.bitsTransactionList.push({
                name: message.name,
                bitsCount: message.bitsCount
            });
        }
    }, {
        key: "addSubTransaction",
        value: function addSubTransaction(name) {
            this.subTransactionList.push({
                name: name
            });
        }
    }, {
        key: "getAuthForAWS",
        value: function getAuthForAWS() {
            return Nimble.twitch.store.accessToken;
        }
    }, {
        key: "fetchAndAddFollowers",
        value: function fetchAndAddFollowers(offset, limit) {
            var _this8 = this;

            return window.fetch(TWITCH_FOLLOWERS_LIST_URI({
                channelId: Nimble.twitch.store.streamer.channelId
            }, {
                "offset": offset,
                "limit": limit
            }), {
                "method": "GET",
                "headers": {
                    "Accept": "application/vnd.twitchtv.v5+json",
                    "Content-Type": "application/json",
                    "Client-ID": GameStore.hostData.clientId

                }
            }).then(function (response) {
                return response.json();
            }).then(function (response) {
                response.follows.forEach(function (follower) {
                    _this8.followersList.push(follower.user.name);
                });
                return response;
            }).catch(function (error) {
                console.log("Failed to get followers ", error);
            });
        }
    }, {
        key: "refreshFollowersList",
        value: function refreshFollowersList() {
            var _this9 = this;

            this.followersList = [];

            var limit = 100; // Max according to Twitch docs
            var offset = 0;
            this.fetchAndAddFollowers(offset, limit).then(function (response) {
                if (response !== undefined) {
                    while (offset < response._total - limit) {
                        offset += limit;

                        _this9.fetchAndAddFollowers(offset, limit);
                    }
                }
            });
        }
    }, {
        key: "fetchAndAddSubscribers",
        value: function fetchAndAddSubscribers(offset, limit) {
            var _this10 = this;

            return window.fetch(TWITCH_SUBSCRIBERS_LIST_URI({
                channelId: Nimble.twitch.store.streamer.channelId
            }, {
                "offset": offset,
                "limit": limit
            }), {
                "method": "GET",
                "headers": {
                    "Accept": "application/vnd.twitchtv.v5+json",
                    "Content-Type": "application/json",
                    "Client-ID": GameStore.hostData.clientId,
                    "Authorization": "OAuth " + Nimble.twitch.store.accessToken

                }
            }).then(function (response) {
                return response.json();
            }).then(function (response) {
                if (response.status === 200) {
                    response.subscriptions.forEach(function (sub) {
                        _this10.subscribersList.push(sub.user.name);
                    });
                    return response;
                } else {
                    throw response.message;
                }
            }).catch(function (error) {
                console.log("Failed to get subscribers ", error);
            });
        }
    }, {
        key: "refreshSubscribersList",
        value: function refreshSubscribersList() {
            var _this11 = this;

            this.subscribersList = [];

            var limit = 100; // Max according to Twitch docs
            var offset = 0;
            this.fetchAndAddSubscribers(offset, limit).then(function (response) {
                if (response !== undefined) {
                    while (offset < response._total - limit) {
                        offset += limit;

                        _this11.fetchAndAddSubscribers(offset, limit);
                    }
                }
            });
        }
    }, {
        key: "pubSubConnect",
        value: function pubSubConnect() {
            var _this12 = this;

            var heartbeatInterval = 1000 * 60; //ms between PING's
            var reconnectInterval = 1000 * 3; //ms to wait before reconnect
            var heartbeatHandle = undefined;

            this.pubSubWs = new WebSocket("wss://pubsub-edge.twitch.tv");

            this.pubSubWs.onopen = function (event) {
                _this12.pubSubHeartbeat();
                heartbeatHandle = setInterval(function () {
                    return _this12.pubSubHeartbeat();
                }, heartbeatInterval);
            };

            this.pubSubWs.onerror = function (error) {
                Nimble.logger.log(JSON.stringify(error));
            };

            this.pubSubWs.onmessage = function (event) {
                _this12.onPubSubMessage(JSON.parse(event.data));
            };

            this.pubSubWs.onclose = function () {
                clearInterval(heartbeatHandle);
                setTimeout(function () {
                    return _this12.pubSubConnect();
                }, reconnectInterval);
            };

            this.subscriptionsTopic = "channel-subscribe-events-v1." + Nimble.twitch.store.streamer.channelId;
            setTimeout(function () {
                return _this12.pubSubListen(_this12.subscriptionsTopic);
            }, 1000);
        }
    }, {
        key: "pubSubHeartbeat",
        value: function pubSubHeartbeat() {
            var message = {
                type: "PING"
            };
            this.pubSubWs.send(JSON.stringify(message));
        }
    }, {
        key: "pubSubListen",
        value: function pubSubListen(topic) {
            var message = {
                type: "LISTEN",
                nonce: this.nonce(15),
                data: {
                    topics: [topic],
                    auth_token: Nimble.twitch.store.accessToken
                }
            };
            this.pubSubWs.send(JSON.stringify(message));
        }

        // Source: https://www.thepolyglotdeveloper.com/2015/03/create-a-random-nonce-string-using-javascript/

    }, {
        key: "nonce",
        value: function nonce(length) {
            var text = "";
            var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
            for (var i = 0; i < length; i++) {
                text += possible.charAt(Math.floor(Math.random() * possible.length));
            }
            return text;
        }
    }, {
        key: "onPubSubMessage",
        value: function onPubSubMessage(message) {
            var _this13 = this;

            if (message.type === "MESSAGE") {
                if (message.data.topic === this.subscriptionsTopic) {
                    var subData = JSON.parse(message.data.message);
                    var name = subData.recipient_display_name || subData.display_name || "Anonymmous";
                    GameStore.GameInstance.bitBotManager.addSubBot(name);
                }
            }

            if (message.type === "RECONNECT") {
                setTimeout(function () {
                    return _this13.pubSubConnect();
                }, reconnectInterval);
            }
        }
    }, {
        key: "tmiConnect",
        value: function tmiConnect(channelName) {
            var _this14 = this;

            if (channelName !== undefined) {
                this.options = {
                    connection: {
                        secure: true
                    },
                    identity: {
                        username: channelName,
                        password: GameStore.twitchManager.getAuthForAWS()
                    },
                    channels: [channelName]
                };

                this.client = new tmi.client(this.options);

                this.client.on("message", function (target, context, msg, isSelf) {
                    return _this14.onChatMessage(target, context, msg, isSelf);
                });

                this.client.connect();
            }
        }
    }, {
        key: "tmiDisconnect",
        value: function tmiDisconnect() {
            this.client.disconnect();
        }
    }, {
        key: "onChatMessage",
        value: function onChatMessage(target, context, msg, isSelf) {
            if (isSelf) {
                return;
            }

            GameStore.chatManager.onMessage(target, context, msg);
        }
    }]);

    return _class;
}();

window.onbeforeunload = function () {
    GameStore.twitchManager.tmiDisconnect();
};

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

module.exports = rsaPublicKeyPem;

//http://stackoverflow.com/questions/18835132/xml-to-pem-in-node-js
function rsaPublicKeyPem(modulus_b64, exponent_b64) {

    var modulus = new Buffer(modulus_b64, 'base64');
    var exponent = new Buffer(exponent_b64, 'base64');

    var modulus_hex = modulus.toString('hex');
    var exponent_hex = exponent.toString('hex');

    modulus_hex = prepadSigned(modulus_hex);
    exponent_hex = prepadSigned(exponent_hex);

    var modlen = modulus_hex.length / 2;
    var explen = exponent_hex.length / 2;

    var encoded_modlen = encodeLengthHex(modlen);
    var encoded_explen = encodeLengthHex(explen);
    var encoded_pubkey = '30' + encodeLengthHex(modlen + explen + encoded_modlen.length / 2 + encoded_explen.length / 2 + 2) + '02' + encoded_modlen + modulus_hex + '02' + encoded_explen + exponent_hex;

    var der_b64 = new Buffer(encoded_pubkey, 'hex').toString('base64');

    var pem = '-----BEGIN RSA PUBLIC KEY-----\n' + der_b64.match(/.{1,64}/g).join('\n') + '\n-----END RSA PUBLIC KEY-----\n';

    return pem;
}

function prepadSigned(hexStr) {
    var msb = hexStr[0];
    if (msb < '0' || msb > '7') {
        return '00' + hexStr;
    } else {
        return hexStr;
    }
}

function toHex(number) {
    var nstr = number.toString(16);
    if (nstr.length % 2) return '0' + nstr;
    return nstr;
}

// encode ASN.1 DER length field
// if <=127, short form
// if >=128, long form
function encodeLengthHex(n) {
    if (n <= 127) return toHex(n);else {
        var n_hex = toHex(n);
        var length_of_length_byte = 128 + n_hex.length / 2; // 0x80+numbytes
        return toHex(length_of_length_byte) + n_hex;
    }
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(187).Buffer))

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(188);
var ieee754 = __webpack_require__(189);
var isArray = __webpack_require__(190);

exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength();

function typedArraySupport() {
  try {
    var arr = new Uint8Array(1);
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function foo() {
        return 42;
      } };
    return arr.foo() === 42 && // typed array instances can be augmented
    typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
    arr.subarray(1, 1).byteLength === 0; // ie10 has broken `subarray`
  } catch (e) {
    return false;
  }
}

function kMaxLength() {
  return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
}

function createBuffer(that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length');
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length);
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length);
    }
    that.length = length;
  }

  return that;
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer(arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length);
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error('If encoding is specified then the first argument must be a string');
    }
    return allocUnsafe(this, arg);
  }
  return from(this, arg, encodingOrOffset, length);
}

Buffer.poolSize = 8192; // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype;
  return arr;
};

function from(that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length);
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset);
  }

  return fromObject(that, value);
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length);
};

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype;
  Buffer.__proto__ = Uint8Array;
  if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    });
  }
}

function assertSize(size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number');
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative');
  }
}

function alloc(that, size, fill, encoding) {
  assertSize(size);
  if (size <= 0) {
    return createBuffer(that, size);
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
  }
  return createBuffer(that, size);
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding);
};

function allocUnsafe(that, size) {
  assertSize(size);
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0;
    }
  }
  return that;
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size);
};

function fromString(that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding');
  }

  var length = byteLength(string, encoding) | 0;
  that = createBuffer(that, length);

  var actual = that.write(string, encoding);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual);
  }

  return that;
}

function fromArrayLike(that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  that = createBuffer(that, length);
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255;
  }
  return that;
}

function fromArrayBuffer(that, array, byteOffset, length) {
  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds');
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds');
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array);
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset);
  } else {
    array = new Uint8Array(array, byteOffset, length);
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array;
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array);
  }
  return that;
}

function fromObject(that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0;
    that = createBuffer(that, len);

    if (that.length === 0) {
      return that;
    }

    obj.copy(that, 0, 0, len);
    return that;
  }

  if (obj) {
    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0);
      }
      return fromArrayLike(that, obj);
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data);
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
}

function checked(length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
  }
  return length | 0;
}

function SlowBuffer(length) {
  if (+length != length) {
    // eslint-disable-line eqeqeq
    length = 0;
  }
  return Buffer.alloc(+length);
}

Buffer.isBuffer = function isBuffer(b) {
  return !!(b != null && b._isBuffer);
};

Buffer.compare = function compare(a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers');
  }

  if (a === b) return 0;

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

Buffer.isEncoding = function isEncoding(encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true;
    default:
      return false;
  }
};

Buffer.concat = function concat(list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }

  if (list.length === 0) {
    return Buffer.alloc(0);
  }

  var i;
  if (length === undefined) {
    length = 0;
    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;
  for (i = 0; i < list.length; ++i) {
    var buf = list[i];
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }
    buf.copy(buffer, pos);
    pos += buf.length;
  }
  return buffer;
};

function byteLength(string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length;
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength;
  }
  if (typeof string !== 'string') {
    string = '' + string;
  }

  var len = string.length;
  if (len === 0) return 0;

  // Use a for loop to avoid recursion
  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len;
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length;
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2;
      case 'hex':
        return len >>> 1;
      case 'base64':
        return base64ToBytes(string).length;
      default:
        if (loweredCase) return utf8ToBytes(string).length; // assume utf8
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}
Buffer.byteLength = byteLength;

function slowToString(encoding, start, end) {
  var loweredCase = false;

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0;
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return '';
  }

  if (end === undefined || end > this.length) {
    end = this.length;
  }

  if (end <= 0) {
    return '';
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0;
  start >>>= 0;

  if (end <= start) {
    return '';
  }

  if (!encoding) encoding = 'utf8';

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end);

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end);

      case 'ascii':
        return asciiSlice(this, start, end);

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end);

      case 'base64':
        return base64Slice(this, start, end);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true;

function swap(b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}

Buffer.prototype.swap16 = function swap16() {
  var len = this.length;
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits');
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }
  return this;
};

Buffer.prototype.swap32 = function swap32() {
  var len = this.length;
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits');
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }
  return this;
};

Buffer.prototype.swap64 = function swap64() {
  var len = this.length;
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits');
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }
  return this;
};

Buffer.prototype.toString = function toString() {
  var length = this.length | 0;
  if (length === 0) return '';
  if (arguments.length === 0) return utf8Slice(this, 0, length);
  return slowToString.apply(this, arguments);
};

Buffer.prototype.equals = function equals(b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
  if (this === b) return true;
  return Buffer.compare(this, b) === 0;
};

Buffer.prototype.inspect = function inspect() {
  var str = '';
  var max = exports.INSPECT_MAX_BYTES;
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
    if (this.length > max) str += ' ... ';
  }
  return '<Buffer ' + str + '>';
};

Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer');
  }

  if (start === undefined) {
    start = 0;
  }
  if (end === undefined) {
    end = target ? target.length : 0;
  }
  if (thisStart === undefined) {
    thisStart = 0;
  }
  if (thisEnd === undefined) {
    thisEnd = this.length;
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index');
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0;
  }
  if (thisStart >= thisEnd) {
    return -1;
  }
  if (start >= end) {
    return 1;
  }

  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;

  if (this === target) return 0;

  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);

  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1;

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }
  byteOffset = +byteOffset; // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
  if (byteOffset >= buffer.length) {
    if (dir) return -1;else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;else return -1;
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1;
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }

  throw new TypeError('val must be string, number or Buffer');
}

function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();
    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }
      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }

  function read(buf, i) {
    if (indexSize === 1) {
      return buf[i];
    } else {
      return buf.readUInt16BE(i * indexSize);
    }
  }

  var i;
  if (dir) {
    var foundIndex = -1;
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
    for (i = byteOffset; i >= 0; i--) {
      var found = true;
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break;
        }
      }
      if (found) return i;
    }
  }

  return -1;
}

Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1;
};

Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};

Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};

function hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = Number(length);
    if (length > remaining) {
      length = remaining;
    }
  }

  // must be an even number of digits
  var strLen = string.length;
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

  if (length > strLen / 2) {
    length = strLen / 2;
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(parsed)) return i;
    buf[offset + i] = parsed;
  }
  return i;
}

function utf8Write(buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}

function asciiWrite(buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length);
}

function latin1Write(buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length);
}

function base64Write(buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length);
}

function ucs2Write(buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}

Buffer.prototype.write = function write(string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0;
    // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0;
    if (isFinite(length)) {
      length = length | 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    }
    // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
  }

  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;

  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds');
  }

  if (!encoding) encoding = 'utf8';

  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length);

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length);

      case 'ascii':
        return asciiWrite(this, string, offset, length);

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length);

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};

Buffer.prototype.toJSON = function toJSON() {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};

function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf);
  } else {
    return base64.fromByteArray(buf.slice(start, end));
  }
}

function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];

  var i = start;
  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }
          break;
        case 2:
          secondByte = buf[i + 1];
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }

    res.push(codePoint);
    i += bytesPerSequence;
  }

  return decodeCodePointsArray(res);
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000;

function decodeCodePointsArray(codePoints) {
  var len = codePoints.length;
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = '';
  var i = 0;
  while (i < len) {
    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
  }
  return res;
}

function asciiSlice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }
  return ret;
}

function latin1Slice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }
  return ret;
}

function hexSlice(buf, start, end) {
  var len = buf.length;

  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;

  var out = '';
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }
  return out;
}

function utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }
  return res;
}

Buffer.prototype.slice = function slice(start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }

  if (end < start) end = start;

  var newBuf;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end);
    newBuf.__proto__ = Buffer.prototype;
  } else {
    var sliceLen = end - start;
    newBuf = new Buffer(sliceLen, undefined);
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start];
    }
  }

  return newBuf;
};

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}

Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  return val;
};

Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }

  var val = this[offset + --byteLength];
  var mul = 1;
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }

  return val;
};

Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset];
};

Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | this[offset + 1] << 8;
};

Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] << 8 | this[offset + 1];
};

Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};

Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};

Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val;
};

Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val;
};

Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return this[offset];
  return (0xff - this[offset] + 1) * -1;
};

Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | this[offset + 1] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | this[offset] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};

Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};

Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, true, 23, 4);
};

Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, false, 23, 4);
};

Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, true, 52, 8);
};

Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, false, 52, 8);
};

function checkInt(buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
}

Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  this[offset] = value & 0xff;
  return offset + 1;
};

function objectWriteUInt16(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2;
};

Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2;
};

function objectWriteUInt32(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4;
};

Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4;
};

Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = value & 0xff;
  return offset + 1;
};

Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2;
};

Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2;
};

Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4;
};

Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4;
};

function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
  if (offset < 0) throw new RangeError('Index out of range');
}

function writeFloat(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}

Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert);
};

Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert);
};

function writeDouble(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert);
};

Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert);
};

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start;

  // Copy 0 bytes; we're done
  if (end === start) return 0;
  if (target.length === 0 || this.length === 0) return 0;

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds');
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
  if (end < 0) throw new RangeError('sourceEnd out of bounds');

  // Are we oob?
  if (end > this.length) end = this.length;
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  var len = end - start;
  var i;

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
  }

  return len;
};

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0);
      if (code < 256) {
        val = code;
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string');
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index');
  }

  if (end <= start) {
    return this;
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;

  if (!val) val = 0;

  var i;
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
    var len = bytes.length;
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this;
};

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

function base64clean(str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '');
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return '';
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '=';
  }
  return str;
}

function stringtrim(str) {
  if (str.trim) return str.trim();
  return str.replace(/^\s+|\s+$/g, '');
}

function toHex(n) {
  if (n < 16) return '0' + n.toString(16);
  return n.toString(16);
}

function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i);

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        }

        // valid lead
        leadSurrogate = codePoint;

        continue;
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue;
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = null;

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break;
      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break;
      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break;
      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else {
      throw new Error('Invalid code point');
    }
  }

  return bytes;
}

function asciiToBytes(str) {
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }
  return byteArray;
}

function utf16leToBytes(str, units) {
  var c, hi, lo;
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break;

    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray;
}

function base64ToBytes(str) {
  return base64.toByteArray(base64clean(str));
}

function blitBuffer(src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length) break;
    dst[i + offset] = src[i];
  }
  return i;
}

function isnan(val) {
  return val !== val; // eslint-disable-line no-self-compare
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(33)))

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;

var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;

function getLens(b64) {
  var len = b64.length;

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=');
  if (validLen === -1) validLen = len;

  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;

  return [validLen, placeHoldersLen];
}

// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function _byteLength(b64, validLen, placeHoldersLen) {
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function toByteArray(b64) {
  var tmp;
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));

  var curByte = 0;

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;

  var i;
  for (i = 0; i < len; i += 4) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[curByte++] = tmp >> 16 & 0xFF;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  return arr;
}

function tripletToBase64(num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}

function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
    output.push(tripletToBase64(tmp));
  }
  return output.join('');
}

function fromByteArray(uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
  }

  return parts.join('');
}

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];

  i += d;

  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
};

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var platform = __webpack_require__(46);

var GameStore = __webpack_require__(0);
var Nimble = __webpack_require__(6);

module.exports = function () {
    function _class() {
        var _this = this;

        _classCallCheck(this, _class);

        this.updateSessionTimeIntervalMs = 2000;
        this.inactivityTimeoutMs = 1000 * 60 * 5;
        var localStorageSessionId = parseInt(window.localStorage.getItem("sessionId"));
        this.sessionId = localStorageSessionId !== undefined && !isNaN(localStorageSessionId) ? localStorageSessionId : undefined;

        this.updateSessionTime();
        setInterval(function () {
            _this.updateSessionTime();
        }, this.updateSessionTimeIntervalMs);
    }

    _createClass(_class, [{
        key: "updateSessionTime",
        value: function updateSessionTime() {
            var lastTime = window.localStorage.getItem("lastSessionUpdateTime");
            if (lastTime !== undefined) {
                var delta = Date.now() - lastTime;
                var sessionTime = parseInt(window.localStorage.getItem("sessionTimeMs"));
                if (sessionTime === undefined || isNaN(sessionTime) || delta > this.inactivityTimeoutMs) {
                    window.localStorage.setItem("sessionTimeMs", 0);

                    this.sessionId = this.sessionId !== undefined ? this.sessionId + 1 : 0;
                    window.localStorage.setItem("sessionId", this.sessionId);
                } else {
                    window.localStorage.setItem("sessionTimeMs", sessionTime + delta);

                    this.sessionId = this.sessionId || 0;
                }
            }

            window.localStorage.setItem("lastSessionUpdateTime", Date.now());
        }
    }, {
        key: "getSessionTime",
        value: function getSessionTime() {
            var sessionTime = parseInt(window.localStorage.getItem("sessionTimeMs"));
            return (sessionTime || 0) / 1000;
        }
    }, {
        key: "getLocation",
        value: function getLocation() {
            if (GameStore.GameInstance === undefined) {
                return 0; // Special code for Mainmenu
            } else {
                return GameStore.GameInstance.levelManager.getLocationNumber();
            }
        }
    }, {
        key: "getGameTime",
        value: function getGameTime() {
            return GameStore.GameInstance !== undefined ? GameStore.gamestateManager.getPlayTimeMs() / 1000 : 0;
        }
    }, {
        key: "getChannelStatus",
        value: function getChannelStatus() {
            return Nimble.twitch.store.streamer.isBitsEnabled ? "Bits" : "NoBits";
        }
    }, {
        key: "getStats",
        value: function getStats() {
            if (GameStore.GameInstance !== undefined) {
                return {
                    recordData: GameStore.gamestateManager.lifetimeRecordData,
                    inventory: GameStore.GameInstance.upgradeManager.equippedInventory
                };
            }

            return undefined;
        }
    }, {
        key: "getGameTableData",
        value: function getGameTableData(eventType) {
            return {
                "channel_id": Nimble.twitch.store.streamer.channelId,
                "event_type": eventType,
                "version": GameStore.getGitVersion(),
                "location": this.getLocation(),
                "coin_mine_ms": Math.round(GameStore.optionsMenu.coinMineTimeMS),
                "access_anonymous": GameStore.optionsMenu.access.anonymous,
                "access_vanilla": GameStore.optionsMenu.access.vanilla,
                "access_follower": GameStore.optionsMenu.access.follower,
                "access_subscriber": GameStore.optionsMenu.access.subscriber,
                "access_moderator": GameStore.optionsMenu.access.moderator,
                "game_time": this.getGameTime(),
                "session_id": this.sessionId,
                "session_time": this.getSessionTime(),
                "channel_status": this.getChannelStatus(),
                "offline": GameStore.gamestateManager.playingOffline,
                "platform_name": platform.name,
                "platform_version": platform.version,
                "platform_os": platform.os.toString(),
                "stats": this.getStats()
            };
        }
    }, {
        key: "sendHubbleEvent",
        value: function sendHubbleEvent(eventType, sendWhenOffline) {
            if (sendWhenOffline || !GameStore.gamestateManager.playingOffline) {
                Nimble.hubble.submitTychoGameEvent(this.getGameTableData(eventType));
            }
        }
    }, {
        key: "sendHubbleStarRating",
        value: function sendHubbleStarRating(rating) {
            if (!GameStore.gamestateManager.playingOffline) {
                Nimble.hubble.submitTychoCustomEvent(this.getGameTableData("star_rating"), {
                    star_rating: rating
                });
            }
        }
    }]);

    return _class;
}();

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GameStore = __webpack_require__(0);
var Nimble = __webpack_require__(6);
var ENDPOINTS = __webpack_require__(14);
var PlayerStore = __webpack_require__(17);

var EXTENSION_PARAMETER = { extension: "TYCHO" };
var SET_STREAMER_DATA_URI = new Nimble.uri(ENDPOINTS["DEVELOPMENT"].SET_STREAMER_DATA_URI);
var GET_STREAMER_DATA_URI = new Nimble.uri(ENDPOINTS["DEVELOPMENT"].GET_STREAMER_DATA_URI);
var SET_STREAMER_STATE_URI = new Nimble.uri(ENDPOINTS["DEVELOPMENT"].SET_STREAMER_STATE_URI);

module.exports = function () {
    function _class() {
        var _this = this;

        _classCallCheck(this, _class);

        this.lastInteractionTime = Date.now();
        this.heartbeatIntervalMs = 1000;
        this.restrictViewer = undefined;
        this.evilUnlocked = false;

        setInterval(function () {
            _this.sendHeartbeat();
        }, this.heartbeatIntervalMs);
    }

    _createClass(_class, [{
        key: "updateInteractionTime",
        value: function updateInteractionTime() {
            this.lastInteractionTime = Date.now();

            GameStore.demoManager.stopDemoMode();
        }
    }, {
        key: "updateRestrictViewer",
        value: function updateRestrictViewer() {
            var newRestrict = !PlayerStore.showHud || GameStore.GameInstance && GameStore.GameInstance.showLevelFinished;
            if (this.restrictViewer === undefined || this.restrictViewer !== newRestrict) {
                this.restrictViewer = newRestrict;

                if (GameStore.GameInstance !== undefined) {
                    GameStore.gamestateManager.setStreamerSettings({
                        restrictViewer: this.restrictViewer
                    });
                }
            }
        }
    }, {
        key: "sendHeartbeat",
        value: function sendHeartbeat() {
            if (GameStore.gamestateManager.playingOffline) {
                return;
            }

            this.updateRestrictViewer();

            fetch(SET_STREAMER_STATE_URI({
                channelId: Nimble.twitch.store.streamer.channelId
            }, EXTENSION_PARAMETER), {
                method: "POST",
                headers: {
                    "Authorization": GameStore.twitchManager.getAuthForAWS(),
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    lastInteractionTime: this.lastInteractionTime,
                    restrictViewer: this.restrictViewer,
                    sessionId: GameStore.hubbleManager.sessionId
                })
            }).catch(function (err) {
                Nimble.logger.log(err);
            });
        }
    }, {
        key: "setStreamerData",
        value: function setStreamerData(data) {
            if (Nimble.twitch.store.streamer.channelId === undefined) {
                return Promise.reject("Not logged in");
            }

            this.streamerSettings = data;
            GameStore.gamestateManager.setStreamerSettings(this.streamerSettings);

            return fetch(SET_STREAMER_DATA_URI({
                channelId: Nimble.twitch.store.streamer.channelId
            }, EXTENSION_PARAMETER), {
                method: "POST",
                headers: {
                    "Authorization": GameStore.twitchManager.getAuthForAWS(),
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(data)
            }).then(function (response) {
                return response.json();
            }).catch(function (err) {
                Nimble.logger.log(err);
            });
        }
    }, {
        key: "getStreamerData",
        value: function getStreamerData() {
            if (Nimble.twitch.store.streamer.channelId === undefined) {
                return Promise.reject("Not logged in");
            }

            return fetch(GET_STREAMER_DATA_URI({
                channelId: Nimble.twitch.store.streamer.channelId
            }, EXTENSION_PARAMETER), {
                method: "GET",
                headers: {
                    "Authorization": GameStore.twitchManager.getAuthForAWS(),
                    "Content-Type": "application/json"
                }
            }).then(function (response) {
                return response.json();
            }).then(function (response) {
                return response;
            }).catch(function (err) {
                Nimble.logger.log(err);
            });
        }
    }, {
        key: "unlockEvilMode",
        value: function unlockEvilMode() {
            this.evilUnlocked = true;

            GameStore.stateManager.setStreamerData({
                evilUnlocked: true
            });
        }
    }]);

    return _class;
}();

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GameStore = __webpack_require__(0);
var BuffManager = __webpack_require__(18);
var TychoCommon = __webpack_require__(10);

var PubSubType = TychoCommon.constants.pubSubType;
var EBotType = TychoCommon.constants.botType;

var RecordData = function () {
    function RecordData() {
        _classCallCheck(this, RecordData);

        this.playerHealthRegen = 0;
        this.playerMoveDistance = 0;
        this.playerAttackBonus = 0;
        this.voxelChangeCount = 0;
        this.bitsBountyPot = 0;
        this.whisperPointsData = {};
    }

    _createClass(RecordData, [{
        key: "recordWhisperHealthRegen",
        value: function recordWhisperHealthRegen(userId, amount) {
            if (userId !== undefined) {
                this.whisperPointsData[userId] = this.whisperPointsData[userId] || {};
                var userData = this.whisperPointsData[userId];
                userData.playerHealthRegen = userData.playerHealthRegen || 0;
                userData.playerHealthRegen += amount;
            }
        }
    }, {
        key: "recordWhisperMoveDist",
        value: function recordWhisperMoveDist(userId, amount) {
            if (userId !== undefined) {
                this.whisperPointsData[userId] = this.whisperPointsData[userId] || {};
                var userData = this.whisperPointsData[userId];
                userData.playerMoveDistance = userData.playerMoveDistance || 0;
                userData.playerMoveDistance += amount;
            }
        }
    }, {
        key: "recordWhisperAttackBonus",
        value: function recordWhisperAttackBonus(userId, amount) {
            if (userId !== undefined) {
                this.whisperPointsData[userId] = this.whisperPointsData[userId] || {};
                var userData = this.whisperPointsData[userId];
                userData.playerAttackBonus = userData.playerAttackBonus || 0;
                userData.playerAttackBonus += amount;
            }
        }
    }, {
        key: "recordStampLiked",
        value: function recordStampLiked(userId) {
            if (userId !== undefined) {
                this.whisperPointsData[userId] = this.whisperPointsData[userId] || {};
                var userData = this.whisperPointsData[userId];
                userData.likedStampCount = userData.likedStampCount || 0;
                ++userData.likedStampCount;
            }
        }
    }, {
        key: "recordStampSpawned",
        value: function recordStampSpawned(userId) {
            if (userId !== undefined) {
                this.whisperPointsData[userId] = this.whisperPointsData[userId] || {};
                var userData = this.whisperPointsData[userId];
                userData.spawnedStampCount = userData.spawnedStampCount || 0;
                ++userData.spawnedStampCount;
            }
        }
    }]);

    return RecordData;
}();

module.exports = function () {
    function _class() {
        var _this = this;

        _classCallCheck(this, _class);

        this.lastUpdateTime = Date.now();
        this.lastCollectTime = Date.now();
        this.pendingRecordData = new RecordData();
        this.levelRecordData = new RecordData();
        this.lifetimeRecordData = new RecordData();
        this.endLevelStats = undefined;
        this.engagementHistorySeconds = 60;
        this.overloadedWindowSeconds = 5;
        this.overloadedStampPerSecondThreshold = 100;
        this.remainingEngagementUpdateTime = 1;
        this.magicEngagementScaler = 10;
        this.engagementStats = {
            overviewPercent: 0,
            dataBlocks: new Array(this.engagementHistorySeconds),
            dataIndex: 0
        };
        for (var i = 0; i < this.engagementHistorySeconds; ++i) {
            this.engagementStats.dataBlocks[i] = this.getNewDataBlock();
        }

        this.reportInterval = 1.1;
        this.reportRemainingTime = 0;
        this.broadcastQueue = [];
        this.whisperQueue = [];

        this.levelStartViewerCount = 0;

        this.needBroadcast = false;

        this.totalPlayTimeMs = 0;
        this.lastLevelTimeMs = 0;
        this.startLevelTimeMs = 0;
        this.playingLevel = false;
        this.playerKilled = false;

        this.playingOffline = true;

        setInterval(function () {
            _this.update();
        }, 1000 / 60);

        this.collectCallbackList = [];
    }

    _createClass(_class, [{
        key: "addCollectCallback",
        value: function addCollectCallback(callback) {
            this.collectCallbackList.push(callback);
        }
    }, {
        key: "getNewDataBlock",
        value: function getNewDataBlock() {
            return {
                stampCount: 0,
                interactorList: []
            };
        }
    }, {
        key: "recordPlayerData",
        value: function recordPlayerData(healthRegen, moveDist, attackBonus) {
            var _this2 = this;

            this.pendingRecordData.playerHealthRegen += healthRegen;
            this.pendingRecordData.playerMoveDistance += moveDist;
            this.pendingRecordData.playerAttackBonus += attackBonus;

            this.levelRecordData.playerHealthRegen += healthRegen;
            this.levelRecordData.playerMoveDistance += moveDist;
            this.levelRecordData.playerAttackBonus += attackBonus;

            this.lifetimeRecordData.playerHealthRegen += healthRegen;
            this.lifetimeRecordData.playerMoveDistance += moveDist;
            this.lifetimeRecordData.playerAttackBonus += attackBonus;

            if (healthRegen > 0) {
                BuffManager.buffInfo[0].altInstances.forEach(function (instance) {
                    var amount = instance.amount * healthRegen;
                    _this2.pendingRecordData.recordWhisperHealthRegen(instance.userId, amount);
                    _this2.levelRecordData.recordWhisperHealthRegen(instance.userId, amount);
                    _this2.lifetimeRecordData.recordWhisperHealthRegen(instance.userId, amount);
                });
            }
            if (moveDist > 0) {
                BuffManager.buffInfo[1].altInstances.forEach(function (instance) {
                    var amount = instance.amount * moveDist;
                    _this2.pendingRecordData.recordWhisperMoveDist(instance.userId, amount);
                    _this2.levelRecordData.recordWhisperMoveDist(instance.userId, amount);
                    _this2.lifetimeRecordData.recordWhisperMoveDist(instance.userId, amount);
                });
            }
            if (attackBonus > 0) {
                BuffManager.buffInfo[2].altInstances.forEach(function (instance) {
                    var amount = instance.amount * attackBonus;
                    _this2.pendingRecordData.recordWhisperAttackBonus(instance.userId, amount);
                    _this2.levelRecordData.recordWhisperMoveDist(instance.userId, amount);
                    _this2.lifetimeRecordData.recordWhisperMoveDist(instance.userId, amount);
                });
            }
        }
    }, {
        key: "recordStampLiked",
        value: function recordStampLiked(userId) {
            this.pendingRecordData.recordStampLiked(userId);
            this.levelRecordData.recordStampLiked(userId);
            this.lifetimeRecordData.recordStampLiked(userId);
        }
    }, {
        key: "recordStampSpawned",
        value: function recordStampSpawned(userId) {
            this.pendingRecordData.recordStampSpawned(userId);
            this.levelRecordData.recordStampSpawned(userId);
            this.lifetimeRecordData.recordStampSpawned(userId);
        }
    }, {
        key: "recordStampData",
        value: function recordStampData(voxelChangeCount, userId) {
            this.pendingRecordData.voxelChangeCount += voxelChangeCount;
            this.levelRecordData.voxelChangeCount += voxelChangeCount;
            this.lifetimeRecordData.voxelChangeCount += voxelChangeCount;

            this.recordStampEvent(userId);
        }
    }, {
        key: "recordStampEvent",
        value: function recordStampEvent(userId) {
            var data = this.engagementStats.dataBlocks[this.engagementStats.dataIndex];
            data.stampCount += 1;
            if (!data.interactorList.includes(userId)) {
                data.interactorList.push(userId);
            }
        }
    }, {
        key: "collectBroadcastData",
        value: function collectBroadcastData() {

            if (GameStore.GameInstance !== undefined) {
                // Always send the total objectives counts
                this.pendingRecordData.voxelChangeCount = this.levelRecordData.voxelChangeCount;
                this.pendingRecordData.bitsBountyPot = GameStore.GameInstance.waveSpawner.bitsBountyPot;
            }

            var now = Date.now();
            var data = {
                timeSeconds: (now - this.lastCollectTime) / 1000,
                viewerCount: this.levelStartViewerCount,
                data: this.pendingRecordData,
                bitBotLifetime: GameStore.GameInstance !== undefined && GameStore.GameInstance.bitBotManager !== undefined ? GameStore.GameInstance.bitBotManager.getBotLifetime(EBotType.bitBot) : 0
            };

            this.lastCollectTime = now;
            this.pendingRecordData = new RecordData();

            return data;
        }
    }, {
        key: "collectWhisperData",
        value: function collectWhisperData() {
            for (var userId in this.pendingRecordData.whisperPointsData) {
                var userData = this.pendingRecordData.whisperPointsData[userId];
                this.queueWhisper(PubSubType.viewerPoints, userData, [userId]);
            }

            this.pendingRecordData.whisperPointsData = {};
        }
    }, {
        key: "isBitBotAlive",
        value: function isBitBotAlive() {
            return GameStore.GameInstance !== undefined && GameStore.GameInstance.bitBotManager !== undefined && GameStore.GameInstance.bitBotManager.getBotLifetime(EBotType.bitBot) > 0;
        }
    }, {
        key: "isRecordDataDirty",
        value: function isRecordDataDirty() {
            return this.pendingRecordData.playerHealthRegen !== 0 || this.pendingRecordData.playerMoveDistance !== 0 || this.pendingRecordData.playerAttackBonus !== 0 || this.pendingRecordData.voxelChangeCount !== 0 || this.needBroadcast || this.isBitBotAlive();
        }
    }, {
        key: "dirtyRecordData",
        value: function dirtyRecordData() {
            this.needBroadcast = true;
        }
    }, {
        key: "update",
        value: function update() {
            var now = Date.now();
            var delta = (now - this.lastUpdateTime) / 1000;
            this.lastUpdateTime = now;

            this.reportRemainingTime -= delta;

            if (this.reportRemainingTime <= 0) {
                this.reportRemainingTime = this.reportInterval;

                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = this.collectCallbackList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var callback = _step.value;

                        if (callback !== undefined) {
                            callback();
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }

                this.collectWhisperData();

                if (this.whisperQueue.length > 0) {
                    this.whisperQueue.forEach(function (whisper) {
                        GameStore.twitchManager.broadcast({ messageQueue: whisper.messageQueue }, whisper.targets);
                    });

                    this.whisperQueue = [];
                }

                if (!GameStore.gamestateManager.playingOffline && (this.isRecordDataDirty() || this.broadcastQueue.length > 0)) {

                    this.queueBroadcast(PubSubType.gameState, this.collectBroadcastData());

                    var message = {
                        messageQueue: this.broadcastQueue
                    };

                    GameStore.twitchManager.broadcast(message);

                    this.needBroadcast = false;

                    this.broadcastQueue = [];
                }
            }

            this.updateEngagementStats(delta);
        }
    }, {
        key: "updateEngagementStats",
        value: function updateEngagementStats(delta) {

            this.remainingEngagementUpdateTime -= delta;
            if (this.remainingEngagementUpdateTime <= 0) {
                this.remainingEngagementUpdateTime = 1;

                this.engagementStats.dataIndex = (this.engagementStats.dataIndex + 1) % this.engagementHistorySeconds;
                this.engagementStats.dataBlocks[this.engagementStats.dataIndex] = this.getNewDataBlock();
            }

            var stampCount = 0;
            var uniqueInteractorList = [];
            this.engagementStats.isOverloaded = false;
            for (var i = 0; i < this.engagementStats.dataBlocks.length; ++i) {
                var data = this.engagementStats.dataBlocks[(this.engagementStats.dataIndex + i) % this.engagementHistorySeconds];
                stampCount += data.stampCount;

                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = data.interactorList[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var interactor = _step2.value;

                        if (!uniqueInteractorList.includes(interactor)) {
                            uniqueInteractorList.push(interactor);
                        }
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }

                if (data.stampCount > this.overloadedStampPerSecondThreshold && i >= this.engagementHistorySeconds - this.overloadedWindowSeconds) {
                    this.engagementStats.isOverloaded = true;
                }
            }

            var viewerCountScale = Math.min(.5, uniqueInteractorList.length / Math.max(1, GameStore.twitchManager.cachedViewerCount));

            this.engagementStats.overviewPercent = stampCount / this.engagementHistorySeconds * 100 * this.magicEngagementScaler * viewerCountScale;

            if (!this.sentOverloadMessage && this.engagementStats.overviewPercent > 500) {
                this.sentOverloadMessage = true;

                GameStore.GameInstance.publishTychoSns("Lots of stamps detected. Engagement Perecent (" + this.engagementStats.overviewPercent + "%).");
            }
        }
    }, {
        key: "queueBroadcast",
        value: function queueBroadcast(type, message) {
            if (!GameStore.gamestateManager.playingOffline) {
                this.broadcastQueue.push({
                    type: type,
                    message: message
                });
            }
        }
    }, {
        key: "queueWhisper",
        value: function queueWhisper(type, message, targets) {

            if (this.whisperQueue.length === 0) {
                this.whisperQueue.push({
                    targets: targets,
                    messageQueue: [{
                        type: type,
                        message: message
                    }]
                });
            } else {
                var _whisperQueue;

                var newWhisperList = [];
                this.whisperQueue.forEach(function (whisper) {
                    var newWhisper = undefined;
                    for (var i = 0; i < whisper.targets.length; ++i) {
                        var targetId = whisper.targets[i];
                        if (targets.includes(targetId)) {
                            whisper.targets.splice(i, 1);
                            --i;

                            if (newWhisper === undefined) {
                                var newMessageQueue = whisper.messageQueue.slice(0);
                                newMessageQueue.push({
                                    type: type,
                                    message: message
                                });

                                newWhisper = {
                                    targets: [targetId],
                                    messageQueue: newMessageQueue
                                };
                            } else {
                                newWhisper.targets.push(targetId);
                            }
                        }
                    }

                    if (newWhisper !== undefined) {
                        newWhisperList.push(newWhisper);
                    }
                });

                // Remove empty whispers
                for (var i = 0; i < this.whisperQueue.length; ++i) {
                    if (this.whisperQueue[i].targets.length === 0) {
                        this.whisperQueue.splice(i, 1);
                        --i;
                    }
                }

                (_whisperQueue = this.whisperQueue).push.apply(_whisperQueue, newWhisperList);
            }
        }
    }, {
        key: "onStartLevel",
        value: function onStartLevel() {
            var _this3 = this;

            this.playingLevel = true;

            GameStore.GameInstance.waveSpawner.onStartLevel();
            GameStore.GameInstance.stampManager.onStartLevel();

            GameStore.twitchManager.refreshStreamingInfo().then(function () {
                _this3.levelStartViewerCount = GameStore.twitchManager.cachedViewerCount;

                var data = {
                    viewerCount: GameStore.twitchManager.cachedViewerCount
                };

                _this3.queueBroadcast(PubSubType.levelStart, data);
            });

            if (GameStore.optionsMenu.streamerSettings !== undefined) {
                this.setStreamerSettings(GameStore.optionsMenu.streamerSettings);
            }

            this.levelRecordData = new RecordData();

            this.startLevelTimeMs = Date.now();
        }
    }, {
        key: "onFinishLevel",
        value: function onFinishLevel() {
            this.playingLevel = false;

            GameStore.GameInstance.waveSpawner.onFinishLevel();

            var data = {
                viewerCount: this.levelStartViewerCount,
                data: this.levelRecordData
            };

            this.queueBroadcast(PubSubType.levelComplete, data);

            if (GameStore.GameInstance.levelManager.levelNumber === 10) {
                GameStore.stateManager.unlockEvilMode();
            }

            this.lastLevelTimeMs = Date.now() - this.startLevelTimeMs;
            this.totalPlayTimeMs += this.lastLevelTimeMs;

            this.compileEndLevelStats();
        }
    }, {
        key: "getPlayTimeMs",
        value: function getPlayTimeMs() {
            if (this.playingLevel) {
                return this.totalPlayTimeMs + Date.now() - this.startLevelTimeMs;
            } else {
                return this.totalPlayTimeMs;
            }
        }
    }, {
        key: "compileEndLevelStats",
        value: function compileEndLevelStats() {
            this.endLevelStats = {
                xp: GameStore.GameInstance.xpManager.getEndLevelStats(),
                levelRecordData: this.levelRecordData,
                stamp: GameStore.GameInstance.stampManager.consumeEndLevelStats(),
                levelTimeMs: this.lastLevelTimeMs,
                totalTimeMs: this.totalPlayTimeMs
            };
        }
    }, {
        key: "onPlayerKilled",
        value: function onPlayerKilled(damage) {
            this.playerKilled = true;

            GameStore.GameInstance.endGame();
        }
    }, {
        key: "setStreamerSettings",
        value: function setStreamerSettings(settings) {
            this.needBroadcast = true;

            this.queueBroadcast(PubSubType.settingsUpdate, settings);
        }
    }, {
        key: "sendCoachNotification",
        value: function sendCoachNotification(text) {
            this.needBroadcast = true;

            this.queueBroadcast(PubSubType.coachNotification, {
                text: text
            });
        }
    }, {
        key: "onBotDie",
        value: function onBotDie() {
            this.needBroadcast = true;
        }
    }, {
        key: "setSubBotUpdate",
        value: function setSubBotUpdate(data) {
            this.needBroadcast = true;

            this.queueBroadcast(PubSubType.subBot, data);
        }
    }]);

    return _class;
}();

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var THREE = __webpack_require__(1);

var GameStore = __webpack_require__(0);

module.exports = function () {
    function DemoManager() {
        _classCallCheck(this, DemoManager);

        this.isEnabled = false;
        this.demoText = undefined;

        this.demoModeDelayMs = 2000;
        this.isDemoModeEnabled = true;
        this.isDemoModeStarted = false;
        this.demoPlayerWeaponActive = false;
    }

    _createClass(DemoManager, [{
        key: "startDemo",
        value: function startDemo(demoText) {
            this.isEnabled = true;
            this.demoText = demoText.match(/[a-zA-Z0-9+]*/)[0];
        }
    }, {
        key: "stopDemoMode",
        value: function stopDemoMode() {
            this.isDemoModeEnabled = false;
            this.isDemoModeStarted = false;
        }
    }, {
        key: "startStampNameSequence",
        value: function startStampNameSequence() {
            var _this = this;

            if (this.isEnabled) {
                setTimeout(function () {
                    var letterDelay = 0;
                    var letterWidth = .037;
                    var letterHeight = .08;
                    var letterDelayInc = 200;
                    var stampSpawnOffset = _this.demoText.length * letterDelayInc + 3000;

                    var newlineIndex = undefined;
                    if (_this.demoText.length > 20) {
                        var halfCount = _this.demoText.length / 2;
                        var closestDist = Infinity;
                        for (var i = 0; i < _this.demoText.length; ++i) {
                            var l = _this.demoText[i];
                            if (l === "+") {
                                var dist = Math.abs(halfCount - i);
                                if (newlineIndex === undefined || dist < closestDist) {
                                    newlineIndex = i;
                                    closestDist = dist;
                                }
                            }
                        }
                    }

                    var x = .5 - letterWidth * (newlineIndex !== undefined ? newlineIndex / 2 : _this.demoText.length / 2);
                    var y = .6;

                    var _loop = function _loop(_i) {
                        var l = _this.demoText[_i];
                        if (l !== "+") {
                            var newX = x;
                            var newY = y;
                            var stampManager = GameStore.GameInstance.stampManager;
                            setTimeout(function () {
                                var stampId = stampManager.placeStampFromScreen(newX, newY, alphaSet[l], 3);
                                setTimeout(function () {
                                    var stampObj = stampManager.getStampHistory(stampId);
                                    stampManager.spawnStampInternal(stampObj);
                                }, stampSpawnOffset);
                            }, letterDelay);
                        }

                        letterDelay += letterDelayInc;
                        x += letterWidth;
                        if (_i === newlineIndex) {
                            x = x = .5 - letterWidth * (_this.demoText.length - newlineIndex) / 2;
                            y += letterHeight;
                        }
                    };

                    for (var _i = 0; _i < _this.demoText.length; ++_i) {
                        _loop(_i);
                    }

                    if (_this.isDemoModeEnabled) {
                        setTimeout(function () {
                            _this.isDemoModeStarted = true;
                        }, stampSpawnOffset + _this.demoText.length * letterDelayInc);
                    }
                }, 1000);
            }
        }
    }, {
        key: "getDemoStartRoomIndex",
        value: function getDemoStartRoomIndex(currentIndex, originalIndex) {
            if (this.isEnabled && currentIndex === 0) {
                return 3;
            }

            return originalIndex;
        }
    }, {
        key: "updatePlayerMovement",
        value: function updatePlayerMovement(time, delta, player) {
            if (this.isDemoModeStarted) {
                var levelMan = GameStore.GameInstance.levelManager;
                this.targetDir = undefined;

                // Go to finish orb
                var playerPos = player.mesh.position;
                if (levelMan.farthestVisitedRoomIndex === 3) {
                    var room = levelMan.roomList[levelMan.farthestVisitedRoomIndex];
                    var roomWorldPos = levelMan.getRoomCenterPos(room.x, room.y);
                    player.moveDir.set(roomWorldPos.x - playerPos.x, 0, roomWorldPos.y - playerPos.z);
                    if (player.moveDir.length() < 1) {
                        player.moveDir.set(0, 0, 0);
                    } else {
                        player.moveDir.normalize();

                        this.targetDir = player.moveDir;
                    }
                } else {
                    var farthestVisitedRoom = levelMan.roomList[levelMan.farthestVisitedRoomIndex];
                    if (!farthestVisitedRoom.locked) {
                        // Go to next room
                        var nextRoom = levelMan.roomList[levelMan.farthestVisitedRoomIndex + 1];
                        var nextRoomWorldPos = levelMan.getRoomCenterPos(nextRoom.x, nextRoom.y);
                        player.moveDir.set(nextRoomWorldPos.x - playerPos.x, 0, nextRoomWorldPos.y - playerPos.z);
                        if (player.moveDir.length() < 1) {
                            player.moveDir.set(0, 0, 0);
                        } else {
                            player.moveDir.normalize();

                            this.targetDir = player.moveDir;
                        }
                    } else {
                        // Avoid Ai
                        var closestAi = undefined;
                        var closestDist = Infinity;
                        var _iteratorNormalCompletion = true;
                        var _didIteratorError = false;
                        var _iteratorError = undefined;

                        try {
                            for (var _iterator = GameStore.GameInstance.aiManager.aiList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                var ai = _step.value;

                                var dist = ai.mesh.position.distanceTo(playerPos);
                                if (ai.team === GameStore.Teams.Threat && (closestAi === undefined || dist < closestDist)) {
                                    closestAi = ai;
                                    closestDist = dist;
                                }
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return) {
                                    _iterator.return();
                                }
                            } finally {
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }

                        if (closestDist < 15) {
                            // Move away from closest Ai
                            player.moveDir.copy(playerPos);
                            player.moveDir.sub(closestAi.mesh.position);
                            player.moveDir.y = 0;
                            player.moveDir.normalize();

                            this.targetDir = player.moveDir;
                        } else {
                            // Walk in oval
                            var _room = levelMan.roomList[levelMan.farthestVisitedRoomIndex];
                            var _roomWorldPos = levelMan.getRoomCenterPos(_room.x, _room.y);
                            player.moveDir.set(_roomWorldPos.x - playerPos.x + Math.cos(time) * 12, 0, _roomWorldPos.y - playerPos.z + Math.sin(time) * 7);
                            if (player.moveDir.length() < 1) {
                                player.moveDir.set(0, 0, 0);
                            } else {
                                player.moveDir.normalize();

                                this.targetDir = player.moveDir;
                            }
                        }

                        // Shoot at cloesest Ai
                        if (closestDist < 50 && closestAi.mesh.position.y - playerPos.y < 5) {
                            if (!this.demoPlayerWeaponActive) {
                                player.weapon.Activate(player);

                                this.demoPlayerWeaponActive = true;
                            }

                            this.targetDir = closestAi.mesh.position.clone().sub(playerPos);
                        } else if (this.demoPlayerWeaponActive) {
                            player.weapon.Deactivate();

                            this.demoPlayerWeaponActive = false;
                        }
                    }
                }
            }
        }
    }, {
        key: "updatePlayerRotation",
        value: function updatePlayerRotation(time, delta, player) {
            if (this.targetDir !== undefined) {
                this.targetDir.y = 0;
                this.targetDir.normalize();

                var treadRot = player.mesh.rotation.z;
                var currentDir = new THREE.Vector3(Math.sin(player.meshBody.rotation.z + treadRot), 0, Math.cos(player.meshBody.rotation.z + treadRot));
                var dot = this.targetDir.dot(currentDir);
                var deltaAngle = Math.acos(dot);
                var frameRotAmount = Math.min(2 * Math.PI * delta, deltaAngle / 2);

                if (isNaN(deltaAngle) || frameRotAmount >= deltaAngle) {
                    player.meshBody.rotation.z = Math.atan2(this.targetDir.x, this.targetDir.z) - treadRot;
                    player.direction = this.targetDir;
                } else {
                    var cross = this.targetDir.clone().cross(currentDir);
                    player.meshBody.rotation.z -= Math.sign(cross.y) * frameRotAmount;
                    player.direction = new THREE.Vector3(Math.sin(player.meshBody.rotation.z + treadRot), 0, Math.cos(player.meshBody.rotation.z + treadRot));
                }
            }
        }
    }]);

    return DemoManager;
}();

var alphaSet = {
    A: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0],
    B: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
    C: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
    D: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
    E: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0],
    F: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    G: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
    H: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0],
    I: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0],
    J: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
    K: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0],
    L: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0],
    M: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0],
    N: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0],
    O: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
    P: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    Q: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],
    R: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0],
    S: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
    T: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
    U: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
    V: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
    W: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],
    X: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0],
    Y: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
    Z: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0],
    a: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0],
    b: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
    c: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
    d: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0],
    e: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0],
    f: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    g: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
    h: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0],
    i: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
    j: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
    k: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0],
    l: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
    m: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0],
    n: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0],
    o: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
    p: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    q: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
    r: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    s: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
    t: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
    u: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0],
    v: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
    w: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0],
    x: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0],
    y: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
    z: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0],
    "1": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0],
    "2": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0],
    "3": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
    "4": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
    "5": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
    "6": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
    "7": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
    "8": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
    "9": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
    "0": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
    "_": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0]
};

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Nimble = __webpack_require__(6);
var ENDPOINTS = __webpack_require__(14);

var NexusMessageType = __webpack_require__(10).constants.nexusMessageType;
var GameStore = __webpack_require__(0);

var EXTENSION_PARAMETER = { extension: "TYCHO" };
var COIN_TRANSACTION_URI = new Nimble.uri(ENDPOINTS["DEVELOPMENT"].COIN_TRANSACTION_URI);
var NEXUS_SEND_MESSAGES_URI = new Nimble.uri(ENDPOINTS["DEVELOPMENT"].NEXUS_SEND_MESSAGES_URI);

module.exports = function () {
    function ChatManager() {
        var _this = this;

        _classCallCheck(this, ChatManager);

        this.commands = {
            "repair": function repair(username) {
                return _this.sendVote(evilMode, username, 0);
            },
            "1": function _(evilMode, username) {
                return _this.sendVote(evilMode, username, 0);
            },
            "r": function r(evilMode, username) {
                return _this.sendVote(evilMode, username, 0);
            },
            "speed": function speed(evilMode, username) {
                return _this.sendVote(evilMode, username, 1);
            },
            "2": function _(evilMode, username) {
                return _this.sendVote(evilMode, username, 1);
            },
            "s": function s(evilMode, username) {
                return _this.sendVote(evilMode, username, 1);
            },
            "cannon": function cannon(evilMode, username) {
                return _this.sendVote(evilMode, username, 2);
            },
            "3": function _(evilMode, username) {
                return _this.sendVote(evilMode, username, 2);
            },
            "c": function c(evilMode, username) {
                return _this.sendVote(evilMode, username, 2);
            },
            "help": function help() {
                return _this.broadcastHelp();
            },
            "h": function h() {
                return _this.broadcastHelp();
            }
        };

        this.stamps = {
            "tree": [0, 0, 0, 13, 13, 13, 0, 0, 0, 0, 0, 13, 6, 6, 6, 13, 0, 0, 0, 13, 6, 6, 6, 6, 6, 13, 0, 0, 13, 6, 6, 6, 6, 6, 13, 0, 0, 0, 13, 6, 6, 6, 13, 0, 0, 0, 0, 0, 13, 14, 13, 0, 0, 0, 0, 0, 13, 13, 14, 13, 13, 0, 0, 0, 0, 13, 14, 14, 14, 13, 0, 0, 0, 0, 13, 13, 13, 13, 13, 0, 0],
            "tree2": [0, 0, 0, 13, 13, 13, 0, 0, 0, 0, 0, 13, 6, 6, 6, 13, 0, 0, 0, 13, 6, 6, 6, 6, 6, 13, 0, 0, 13, 6, 6, 7, 6, 6, 13, 0, 0, 0, 13, 6, 6, 6, 13, 0, 0, 0, 0, 0, 13, 14, 13, 0, 0, 0, 0, 0, 13, 13, 14, 13, 13, 0, 0, 0, 0, 13, 14, 14, 14, 13, 0, 0, 0, 0, 13, 13, 13, 13, 13, 0, 0],
            "heart": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 13, 0, 13, 13, 13, 0, 0, 13, 5, 5, 13, 5, 5, 13, 0, 0, 13, 5, 5, 5, 5, 5, 13, 0, 0, 0, 13, 5, 5, 5, 13, 0, 0, 0, 0, 0, 13, 5, 13, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "gliphy": [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 11, 11, 11, 11, 11, 11, 4, 4, 4, 11, 11, 4, 11, 4, 11, 4, 4, 4, 11, 11, 4, 11, 4, 11, 4, 4, 4, 11, 11, 4, 11, 4, 11, 4, 4, 4, 11, 11, 11, 11, 11, 11, 4, 4, 4, 11, 11, 11, 11, 11, 4, 4, 4, 4, 4, 4, 11, 4, 4, 4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0],
            "happycat": [10, 10, 10, 13, 0, 0, 0, 13, 0, 10, 10, 13, 12, 13, 13, 13, 12, 13, 9, 9, 13, 12, 12, 12, 12, 12, 13, 9, 9, 13, 11, 13, 12, 11, 13, 13, 8, 8, 13, 12, 12, 12, 12, 12, 13, 8, 8, 13, 13, 12, 13, 12, 13, 13, 6, 6, 13, 12, 13, 13, 13, 12, 13, 6, 6, 13, 12, 12, 12, 12, 12, 13, 2, 2, 2, 13, 13, 13, 13, 13, 0],
            "smile": [0, 0, 13, 13, 13, 13, 13, 0, 0, 0, 13, 13, 8, 8, 8, 13, 13, 0, 13, 13, 8, 13, 8, 13, 8, 13, 13, 13, 8, 8, 13, 8, 13, 8, 8, 13, 13, 8, 8, 8, 8, 8, 8, 8, 13, 13, 8, 13, 8, 8, 8, 13, 8, 13, 13, 13, 8, 13, 13, 13, 8, 13, 13, 0, 13, 13, 8, 8, 8, 13, 13, 0, 0, 0, 13, 13, 13, 13, 13, 0, 0],
            "ghost": [0, 0, 13, 13, 13, 13, 13, 0, 0, 0, 13, 10, 10, 10, 10, 10, 13, 0, 13, 10, 11, 13, 10, 11, 13, 10, 13, 13, 10, 11, 11, 10, 11, 11, 10, 13, 13, 10, 10, 10, 10, 10, 10, 10, 13, 13, 10, 10, 10, 10, 10, 10, 10, 13, 13, 10, 10, 10, 10, 10, 10, 10, 13, 13, 10, 13, 10, 13, 10, 13, 10, 13, 13, 13, 0, 13, 0, 13, 0, 13, 13],
            "ghost2": [0, 0, 13, 13, 13, 13, 13, 0, 0, 0, 13, 2, 2, 2, 2, 2, 13, 0, 13, 2, 11, 11, 2, 11, 11, 2, 13, 13, 2, 11, 13, 2, 13, 11, 2, 13, 13, 2, 2, 2, 2, 2, 2, 2, 13, 13, 2, 2, 2, 2, 2, 2, 2, 13, 13, 2, 2, 2, 2, 2, 2, 2, 13, 13, 2, 13, 2, 13, 2, 13, 2, 13, 13, 13, 0, 13, 0, 13, 0, 13, 13],
            "ghost3": [0, 0, 13, 13, 13, 13, 13, 0, 0, 0, 13, 9, 9, 9, 9, 9, 13, 0, 13, 9, 11, 13, 9, 13, 11, 9, 13, 13, 9, 11, 11, 9, 11, 11, 9, 13, 13, 9, 9, 9, 9, 9, 9, 9, 13, 13, 9, 9, 9, 9, 9, 9, 9, 13, 13, 9, 9, 9, 9, 9, 9, 9, 13, 13, 9, 13, 9, 13, 9, 13, 9, 13, 13, 13, 0, 13, 0, 13, 0, 13, 13],
            "ghost4": [0, 0, 13, 13, 13, 13, 13, 0, 0, 0, 13, 5, 5, 5, 5, 5, 13, 0, 13, 5, 11, 11, 5, 13, 11, 5, 13, 13, 5, 11, 13, 5, 11, 11, 5, 13, 13, 5, 5, 5, 5, 5, 5, 5, 13, 13, 5, 5, 5, 5, 5, 5, 5, 13, 13, 5, 5, 5, 5, 5, 5, 5, 13, 13, 5, 13, 5, 13, 5, 13, 5, 13, 13, 13, 0, 13, 0, 13, 0, 13, 13],
            "knight": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 13, 0, 0, 0, 0, 0, 13, 13, 13, 13, 13, 0, 0, 0, 0, 13, 11, 13, 13, 11, 0, 0, 13, 0, 13, 13, 13, 13, 13, 0, 0, 13, 0, 13, 15, 15, 15, 15, 0, 0, 0, 13, 12, 13, 13, 12, 0, 13, 0, 0, 0, 8, 9, 9, 8, 0, 0, 0, 0, 0, 13, 0, 0, 13, 0, 0, 0],
            "germ": [0, 13, 13, 13, 13, 13, 13, 13, 0, 13, 13, 3, 3, 3, 3, 3, 3, 13, 13, 13, 13, 13, 3, 13, 13, 13, 13, 13, 13, 13, 8, 3, 8, 13, 13, 13, 13, 3, 3, 3, 3, 3, 3, 3, 13, 13, 3, 13, 13, 8, 13, 13, 3, 13, 0, 13, 3, 13, 13, 13, 3, 13, 0, 0, 13, 13, 3, 3, 3, 13, 13, 0, 0, 0, 0, 13, 13, 13, 0, 0, 0],
            "ama": [0, 0, 0, 9, 9, 9, 0, 0, 0, 0, 13, 13, 13, 13, 13, 13, 13, 0, 13, 11, 11, 11, 11, 11, 11, 11, 13, 13, 11, 13, 13, 13, 13, 13, 11, 13, 13, 11, 13, 9, 13, 9, 13, 11, 13, 13, 11, 13, 13, 13, 13, 13, 11, 13, 13, 11, 13, 13, 13, 13, 13, 11, 13, 13, 11, 11, 11, 11, 11, 11, 11, 13, 0, 13, 13, 13, 13, 13, 13, 13, 0],
            "dog": [0, 0, 14, 14, 14, 14, 14, 0, 0, 0, 14, 13, 14, 11, 14, 11, 0, 0, 0, 0, 0, 14, 14, 14, 14, 13, 0, 0, 0, 0, 14, 13, 13, 13, 0, 0, 0, 0, 14, 14, 11, 11, 11, 0, 0, 0, 14, 14, 14, 14, 11, 14, 0, 0, 14, 14, 14, 13, 14, 13, 14, 0, 0, 14, 14, 13, 13, 14, 13, 14, 0, 0, 14, 11, 11, 13, 11, 13, 11, 0, 0],
            "cat": [13, 0, 0, 12, 0, 12, 0, 0, 0, 0, 13, 0, 12, 12, 12, 12, 0, 0, 0, 13, 0, 12, 8, 5, 8, 0, 0, 13, 0, 10, 12, 12, 12, 12, 12, 0, 13, 12, 12, 10, 10, 0, 0, 0, 0, 0, 12, 12, 12, 12, 0, 0, 0, 0, 0, 12, 12, 0, 12, 0, 0, 0, 0, 0, 12, 12, 0, 12, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "monkey": [0, 14, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 10, 10, 10, 0, 0, 14, 0, 0, 10, 10, 10, 10, 10, 10, 14, 0, 0, 15, 14, 13, 15, 13, 0, 0, 14, 0, 15, 15, 15, 15, 15, 0, 0, 14, 14, 10, 15, 15, 15, 15, 0, 15, 0, 14, 15, 10, 14, 0, 14, 0, 0, 15, 15, 0, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "duck": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 12, 0, 0, 0, 0, 0, 0, 11, 11, 11, 0, 0, 0, 0, 0, 0, 11, 13, 11, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 0, 0, 0, 0, 2, 2, 10, 0, 0, 0, 0, 11, 11, 2, 9, 2, 9, 11, 0, 0, 0, 11, 11, 11, 11, 0, 0, 0, 0, 9, 9, 0, 0, 9, 9, 0, 0, 0],
            "rat": [0, 0, 0, 0, 13, 13, 0, 0, 0, 0, 13, 13, 0, 13, 13, 0, 0, 0, 0, 13, 13, 13, 15, 13, 15, 0, 0, 0, 0, 13, 15, 13, 15, 13, 0, 0, 13, 0, 0, 15, 15, 15, 15, 13, 0, 13, 0, 0, 0, 13, 15, 15, 0, 0, 0, 13, 0, 13, 13, 13, 13, 0, 0, 0, 13, 11, 10, 10, 10, 0, 11, 0, 0, 0, 9, 0, 0, 0, 9, 0, 0],
            "bird": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 13, 2, 0, 0, 0, 0, 2, 2, 2, 13, 2, 0, 0, 0, 8, 8, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 3, 2, 2, 0, 0, 0, 0, 2, 2, 2, 3, 0, 0, 0, 0, 0, 8, 0, 0, 8, 0, 0, 0],
            "trex": [0, 6, 6, 6, 6, 6, 0, 0, 0, 6, 13, 6, 6, 13, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 11, 0, 0, 0, 11, 6, 6, 6, 10, 10, 10, 0, 0, 0, 6, 6, 6, 10, 10, 11, 10, 11, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "chicken": [0, 0, 14, 14, 14, 14, 0, 0, 0, 0, 14, 14, 14, 14, 14, 14, 0, 0, 0, 14, 14, 14, 14, 14, 14, 0, 0, 0, 14, 14, 14, 14, 14, 14, 0, 0, 0, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 12, 11, 0, 0, 0, 0, 0, 0, 0, 12, 11, 0, 0, 0, 0, 0, 0, 12, 11, 11, 11, 0, 0, 0],
            "arrow": [0, 0, 0, 13, 13, 13, 13, 0, 0, 0, 0, 0, 13, 10, 10, 13, 0, 0, 0, 0, 0, 13, 10, 10, 13, 0, 0, 0, 0, 0, 13, 10, 10, 13, 0, 0, 0, 13, 13, 13, 10, 10, 13, 13, 13, 0, 13, 10, 10, 10, 10, 10, 10, 13, 0, 0, 13, 10, 10, 10, 10, 13, 0, 0, 0, 0, 13, 10, 10, 13, 0, 0, 0, 0, 0, 0, 13, 13, 0, 0, 0],
            "checkmark": [0, 0, 0, 0, 0, 0, 0, 13, 13, 0, 0, 0, 0, 0, 0, 13, 7, 13, 0, 0, 0, 0, 0, 13, 7, 7, 13, 13, 13, 0, 0, 13, 7, 7, 13, 0, 13, 7, 13, 13, 7, 7, 13, 0, 0, 13, 7, 7, 7, 7, 13, 0, 0, 0, 0, 13, 7, 7, 13, 0, 0, 0, 0, 0, 0, 13, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "stop": [0, 0, 0, 11, 11, 11, 0, 0, 0, 0, 0, 11, 10, 10, 10, 11, 0, 0, 0, 11, 10, 11, 11, 11, 10, 11, 0, 11, 10, 10, 11, 10, 10, 10, 10, 11, 11, 10, 10, 11, 11, 11, 10, 10, 11, 11, 10, 10, 10, 10, 11, 10, 10, 11, 0, 11, 10, 11, 11, 11, 10, 11, 0, 0, 0, 11, 10, 10, 10, 11, 0, 0, 0, 0, 0, 11, 11, 11, 0, 0, 0],
            "star": [0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 8, 8, 0, 0, 8, 8, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "bolt": [0, 0, 9, 8, 8, 9, 0, 0, 0, 0, 0, 8, 8, 9, 0, 0, 0, 0, 0, 9, 8, 9, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 9, 8, 8, 8, 8, 8, 9, 0, 0, 0, 0, 0, 0, 8, 9, 0, 0, 0, 0, 0, 0, 8, 9, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "music": [0, 0, 0, 0, 0, 11, 11, 11, 0, 0, 0, 11, 11, 11, 11, 11, 11, 0, 0, 0, 11, 11, 11, 0, 0, 11, 0, 0, 0, 11, 0, 0, 0, 0, 11, 0, 0, 0, 11, 0, 0, 0, 0, 11, 0, 0, 0, 11, 0, 0, 11, 11, 11, 0, 11, 11, 11, 0, 0, 11, 11, 0, 0, 11, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "bomb": [0, 0, 0, 0, 11, 8, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 13, 13, 13, 13, 0, 0, 0, 0, 13, 12, 12, 13, 13, 13, 0, 0, 0, 13, 12, 13, 13, 13, 13, 0, 0, 0, 13, 13, 13, 13, 13, 13, 0, 0, 0, 13, 13, 13, 13, 13, 13, 0, 0, 0, 0, 13, 13, 13, 13, 0, 0, 0, 0],
            "baseball": [0, 0, 13, 13, 13, 13, 13, 0, 0, 0, 13, 11, 11, 11, 11, 11, 13, 0, 13, 10, 11, 11, 11, 11, 11, 10, 13, 13, 11, 10, 11, 11, 11, 10, 11, 13, 13, 11, 10, 11, 11, 11, 10, 11, 13, 13, 11, 10, 11, 11, 11, 10, 11, 13, 13, 10, 11, 11, 11, 11, 11, 10, 13, 0, 13, 11, 11, 11, 11, 11, 13, 0, 0, 0, 13, 13, 13, 13, 13, 0, 0],
            "present": [10, 10, 0, 0, 0, 0, 10, 10, 0, 10, 10, 10, 0, 0, 10, 10, 10, 0, 0, 0, 0, 10, 10, 0, 0, 0, 0, 10, 10, 10, 10, 10, 10, 10, 10, 0, 11, 11, 11, 10, 10, 11, 11, 11, 0, 0, 12, 12, 10, 10, 12, 12, 0, 0, 0, 11, 11, 10, 10, 11, 11, 0, 0, 0, 11, 11, 10, 10, 11, 11, 0, 0, 0, 11, 11, 10, 10, 11, 11, 0, 0],
            "flower": [0, 0, 0, 10, 10, 10, 0, 0, 0, 0, 0, 10, 10, 8, 10, 10, 0, 0, 0, 0, 10, 10, 9, 10, 10, 0, 0, 0, 0, 0, 10, 10, 10, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 6, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 7, 6, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 6, 7, 0, 0, 0, 0],
            "watermelon": [0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 10, 10, 10, 10, 10, 7, 6, 6, 7, 10, 10, 10, 13, 10, 7, 6, 6, 7, 10, 13, 10, 10, 10, 7, 6, 6, 7, 10, 10, 10, 13, 10, 7, 6, 6, 7, 10, 10, 10, 10, 10, 7, 6, 0, 6, 7, 7, 7, 7, 7, 6, 0, 0, 0, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "sushi": [0, 11, 11, 11, 11, 11, 0, 0, 0, 11, 11, 5, 5, 5, 11, 11, 0, 0, 11, 11, 5, 5, 5, 11, 11, 0, 0, 13, 11, 11, 11, 11, 11, 13, 0, 0, 13, 13, 13, 13, 13, 13, 13, 0, 0, 13, 13, 13, 13, 13, 13, 13, 0, 0, 13, 13, 13, 13, 13, 13, 13, 0, 0, 0, 13, 13, 13, 13, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "hi": [0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 13, 13, 13, 13, 13, 0, 0, 13, 11, 13, 11, 13, 11, 13, 0, 0, 13, 11, 13, 11, 13, 13, 13, 0, 0, 13, 11, 11, 11, 13, 11, 13, 0, 0, 13, 11, 13, 11, 13, 11, 13, 0, 0, 13, 11, 13, 11, 13, 11, 13, 0, 0, 13, 13, 13, 13, 13, 13, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "ty": [0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 11, 11, 11, 13, 11, 13, 11, 13, 0, 13, 11, 13, 13, 11, 13, 11, 13, 0, 13, 11, 13, 0, 13, 11, 13, 0, 0, 13, 11, 13, 0, 13, 11, 13, 0, 0, 13, 11, 13, 0, 13, 11, 13, 0, 0, 13, 13, 13, 0, 13, 13, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "lol": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 11, 11, 11, 0, 11, 0, 11, 0, 0, 11, 0, 11, 0, 11, 0, 11, 0, 0, 11, 0, 11, 0, 11, 0, 11, 11, 0, 11, 11, 11, 0, 11, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "bye": [11, 11, 0, 0, 0, 0, 0, 0, 0, 11, 0, 11, 0, 0, 0, 11, 0, 0, 11, 11, 0, 0, 0, 11, 0, 11, 0, 11, 0, 11, 0, 11, 11, 11, 11, 0, 11, 0, 11, 0, 11, 11, 0, 0, 0, 11, 11, 0, 11, 11, 0, 11, 11, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 11, 11, 0, 0, 0, 0, 0],
            // Everything beyond this point are secret stamps
            "hello": [0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 13, 13, 13, 13, 13, 0, 0, 13, 11, 13, 11, 13, 11, 13, 0, 0, 13, 11, 13, 11, 13, 13, 13, 0, 0, 13, 11, 11, 11, 13, 11, 13, 0, 0, 13, 11, 13, 11, 13, 11, 13, 0, 0, 13, 11, 13, 11, 13, 11, 13, 0, 0, 13, 13, 13, 13, 13, 13, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "thx": [0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 11, 11, 11, 13, 11, 13, 11, 13, 0, 13, 11, 13, 13, 11, 13, 11, 13, 0, 13, 11, 13, 0, 13, 11, 13, 0, 0, 13, 11, 13, 0, 13, 11, 13, 0, 0, 13, 11, 13, 0, 13, 11, 13, 0, 0, 13, 13, 13, 0, 13, 13, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "thanks": [0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 11, 11, 11, 13, 11, 13, 11, 13, 0, 13, 11, 13, 13, 11, 13, 11, 13, 0, 13, 11, 13, 0, 13, 11, 13, 0, 0, 13, 11, 13, 0, 13, 11, 13, 0, 0, 13, 11, 13, 0, 13, 11, 13, 0, 0, 13, 13, 13, 0, 13, 13, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "goodbye": [11, 11, 0, 0, 0, 0, 0, 0, 0, 11, 0, 11, 0, 0, 0, 11, 0, 0, 11, 11, 0, 0, 0, 11, 0, 11, 0, 11, 0, 11, 0, 11, 11, 11, 11, 0, 11, 0, 11, 0, 11, 11, 0, 0, 0, 11, 11, 0, 11, 11, 0, 11, 11, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 11, 11, 0, 0, 0, 0, 0],
            "tuna": [0, 11, 11, 11, 11, 11, 0, 0, 0, 11, 11, 5, 5, 5, 11, 11, 0, 0, 11, 11, 5, 5, 5, 11, 11, 0, 0, 13, 11, 11, 11, 11, 11, 13, 0, 0, 13, 13, 13, 13, 13, 13, 13, 0, 0, 13, 13, 13, 13, 13, 13, 13, 0, 0, 13, 13, 13, 13, 13, 13, 13, 0, 0, 0, 13, 13, 13, 13, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "rose": [0, 0, 0, 10, 10, 10, 0, 0, 0, 0, 0, 10, 10, 8, 10, 10, 0, 0, 0, 0, 10, 10, 9, 10, 10, 0, 0, 0, 0, 0, 10, 10, 10, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 6, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 7, 6, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 6, 7, 0, 0, 0, 0],
            "note": [0, 0, 0, 0, 0, 11, 11, 11, 0, 0, 0, 11, 11, 11, 11, 11, 11, 0, 0, 0, 11, 11, 11, 0, 0, 11, 0, 0, 0, 11, 0, 0, 0, 0, 11, 0, 0, 0, 11, 0, 0, 0, 0, 11, 0, 0, 0, 11, 0, 0, 11, 11, 11, 0, 11, 11, 11, 0, 0, 11, 11, 0, 0, 11, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "lightning": [0, 0, 9, 8, 8, 9, 0, 0, 0, 0, 0, 8, 8, 9, 0, 0, 0, 0, 0, 9, 8, 9, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 9, 8, 8, 8, 8, 8, 9, 0, 0, 0, 0, 0, 0, 8, 9, 0, 0, 0, 0, 0, 0, 8, 9, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            "max": [0, 0, 14, 14, 14, 14, 14, 0, 0, 0, 14, 13, 14, 11, 14, 11, 0, 0, 0, 0, 0, 14, 14, 14, 14, 13, 0, 0, 0, 0, 14, 13, 13, 13, 0, 0, 0, 0, 14, 14, 11, 11, 11, 0, 0, 0, 14, 14, 14, 14, 11, 14, 0, 0, 14, 14, 14, 13, 14, 13, 14, 0, 0, 14, 14, 13, 13, 14, 13, 14, 0, 0, 14, 11, 11, 13, 11, 13, 11, 0, 0],
            "pakku": [0, 0, 13, 13, 13, 13, 13, 0, 0, 0, 13, 13, 8, 8, 8, 8, 13, 0, 13, 13, 8, 8, 8, 8, 8, 8, 13, 13, 8, 8, 8, 8, 8, 13, 13, 13, 13, 8, 8, 8, 8, 13, 0, 0, 0, 13, 8, 8, 8, 8, 8, 13, 13, 13, 13, 13, 8, 8, 8, 8, 8, 8, 13, 0, 13, 13, 8, 8, 8, 8, 13, 0, 0, 0, 13, 13, 13, 13, 13, 0, 0],
            "hedgehog": [0, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 2, 15, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 13, 2, 0, 0, 2, 2, 2, 12, 15, 15, 15, 13, 0, 0, 0, 2, 2, 14, 14, 0, 0, 0, 0, 2, 0, 2, 15, 15, 2, 11, 0, 0, 11, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 10, 11, 0, 11, 10, 0, 0],
            "pup": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 0, 0, 0, 0, 0, 9, 9, 2, 2, 2, 2, 0, 0, 0, 9, 2, 2, 13, 2, 13, 2, 0, 0, 0, 2, 2, 13, 2, 13, 2, 0, 0, 9, 2, 9, 12, 11, 12, 9, 0, 0, 10, 10, 2, 2, 2, 2, 2, 0, 9, 10, 10, 2, 11, 11, 11, 11, 0, 2, 12, 2, 10, 10, 11, 11, 10, 0],
            "pop": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 0, 0, 0, 0, 0, 9, 9, 6, 6, 6, 6, 0, 0, 0, 9, 6, 6, 13, 6, 13, 6, 0, 0, 0, 6, 6, 13, 6, 13, 6, 0, 0, 9, 6, 9, 12, 11, 12, 9, 0, 0, 10, 10, 6, 6, 6, 6, 6, 0, 9, 10, 10, 6, 11, 11, 11, 11, 0, 6, 12, 6, 10, 10, 11, 11, 10, 0],
            "dinosaur": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 0, 0, 0, 0, 0, 9, 9, 6, 6, 6, 6, 0, 0, 0, 9, 6, 6, 13, 6, 13, 6, 0, 0, 0, 6, 6, 13, 6, 13, 6, 0, 0, 9, 6, 9, 12, 11, 12, 9, 0, 0, 10, 10, 6, 6, 6, 6, 6, 0, 9, 10, 10, 6, 11, 11, 11, 11, 0, 6, 12, 6, 10, 10, 11, 11, 10, 0],
            "mouse": [0, 0, 0, 0, 13, 13, 0, 0, 0, 0, 13, 13, 0, 13, 13, 0, 0, 0, 0, 13, 13, 13, 15, 13, 15, 0, 0, 0, 0, 13, 15, 13, 15, 13, 0, 0, 13, 0, 0, 15, 15, 15, 15, 13, 0, 13, 0, 0, 0, 13, 15, 15, 0, 0, 0, 13, 0, 13, 13, 13, 13, 0, 0, 0, 13, 11, 10, 10, 10, 0, 11, 0, 0, 0, 9, 0, 0, 0, 9, 0, 0],
            "emouse": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 0, 0, 0, 0, 12, 0, 0, 0, 8, 9, 0, 0, 0, 9, 0, 0, 0, 0, 8, 8, 8, 8, 9, 0, 9, 9, 0, 8, 13, 8, 8, 13, 0, 9, 9, 0, 10, 8, 8, 8, 9, 0, 0, 14, 0, 8, 9, 9, 9, 0, 0, 0, 14, 8, 9, 8, 9, 8, 0, 0, 0, 0, 8, 9, 14, 14, 9, 0, 0],
            "twin": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 10, 11, 0, 0, 0, 0, 0, 10, 10, 10, 10, 10, 0, 0, 0, 14, 15, 14, 13, 15, 0, 0, 0, 0, 14, 15, 15, 14, 14, 15, 0, 0, 0, 0, 14, 15, 15, 15, 0, 0, 0, 10, 10, 8, 2, 2, 8, 0, 0, 11, 0, 2, 2, 2, 2, 0, 11, 0, 0, 0, 14, 0, 0, 0, 14, 0, 0],
            "twin2": [0, 0, 0, 6, 6, 6, 11, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 0, 0, 0, 14, 15, 14, 13, 15, 0, 0, 0, 0, 14, 15, 15, 14, 14, 15, 0, 0, 0, 0, 14, 15, 15, 15, 0, 0, 0, 0, 6, 8, 2, 2, 8, 0, 0, 0, 6, 6, 2, 2, 2, 2, 6, 0, 11, 0, 2, 2, 2, 2, 0, 11, 0, 0, 0, 14, 0, 0, 0, 14, 0, 0],
            "eviltwin": [0, 0, 8, 8, 8, 8, 8, 2, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 0, 15, 14, 15, 13, 5, 5, 13, 0, 0, 15, 15, 13, 13, 5, 5, 13, 0, 0, 0, 15, 15, 15, 15, 15, 15, 0, 15, 8, 5, 8, 5, 5, 8, 0, 0, 11, 0, 5, 5, 5, 5, 5, 11, 0, 0, 0, 5, 5, 0, 5, 5, 0, 0, 0, 6, 6, 0, 0, 0, 6, 6, 0],
            "eviltwin2": [0, 0, 0, 4, 4, 11, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 15, 14, 15, 13, 15, 0, 0, 0, 0, 0, 15, 13, 13, 13, 5, 0, 0, 0, 4, 13, 15, 11, 11, 0, 0, 0, 4, 4, 9, 4, 15, 15, 4, 11, 0, 11, 3, 3, 3, 3, 3, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 9, 9, 0, 0, 9, 9, 0, 0]
        };

        this.commandsString = "";
        for (var command in this.commands) {
            this.commandsString += " !" + command + "\n";
        }
        for (var _command in this.stamps) {
            this.commandsString += " !" + _command + "\n";
        }
    }

    _createClass(ChatManager, [{
        key: "onMessage",
        value: function onMessage(target, context, msg) {
            if (msg.startsWith("!")) {
                var command = msg.slice(1);
                var _evilMode = false;
                if (command.startsWith("-")) {
                    command = command.slice(1);
                    _evilMode = true;
                }

                var spaceIndex = command.indexOf(" ");
                if (spaceIndex !== -1) {
                    command = command.slice(0, spaceIndex);
                }

                var action = this.commands[command];
                var stamp = this.stamps[command];
                if (action !== undefined) {
                    action(_evilMode, context.username);
                } else if (stamp !== undefined) {
                    this.sendStamp(_evilMode, context.username, stamp);
                } else if (command.includes("-")) {
                    this.sendStampFromArray(_evilMode, context.username, command);
                }
            }
        }
    }, {
        key: "broadcastHelp",
        value: function broadcastHelp() {
            GameStore.twitchManager.client.say(Nimble.twitch.store.streamer.name, "Available Chat Commands:" + this.commandsString);
        }
    }, {
        key: "sendVote",
        value: function sendVote(evilMode, username, buffType) {
            var data = {
                username: username,
                nexusUrl: NEXUS_SEND_MESSAGES_URI({
                    channelId: Nimble.twitch.store.streamer.channelId
                }),
                nexusMessageBody: {
                    user: username,
                    type: NexusMessageType.vote,
                    buffType: buffType,
                    voteCount: 1,
                    isEvil: evilMode
                }
            };

            fetch(COIN_TRANSACTION_URI({
                channelId: Nimble.twitch.store.streamer.channelId
            }, EXTENSION_PARAMETER), {
                method: "POST",
                headers: {
                    "Authorization": GameStore.twitchManager.getAuthForAWS(),
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(data)
            }).then(function (response) {
                return response.json();
            }).then(function (response) {
                if (response.transactionSuccess) {
                    GameStore.twitchManager.client.whisper(username, "Vote Sent");
                } else {
                    GameStore.twitchManager.client.whisper(username, "Vote on Cooldown");
                }
            }).catch(function (err) {
                Nimble.logger.log(err);
            });
        }
    }, {
        key: "sendStamp",
        value: function sendStamp(evilMode, username, dataArray) {
            var data = {
                username: username,
                nexusUrl: NEXUS_SEND_MESSAGES_URI({
                    channelId: Nimble.twitch.store.streamer.channelId
                }),
                nexusMessageBody: {
                    user: username,
                    type: NexusMessageType.stamp,
                    stamp: dataArray,
                    isChatStamp: true,
                    x: .2 + Math.random() * .6,
                    y: .2 + Math.random() * .6,
                    delay: .5,
                    isEnemy: evilMode
                }
            };

            fetch(COIN_TRANSACTION_URI({
                channelId: Nimble.twitch.store.streamer.channelId
            }, EXTENSION_PARAMETER), {
                method: "POST",
                headers: {
                    "Authorization": GameStore.twitchManager.getAuthForAWS(),
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(data)
            }).then(function (response) {
                return response.json();
            }).then(function (response) {
                if (response.failedChatTransactionResponse !== undefined) {
                    GameStore.twitchManager.client.whisper(username, "Stamp Ability Cooldown " + (response.failedChatTransactionResponse.cooldownRemainingMs / 1000).toFixed(1) + "s");
                } else {
                    GameStore.twitchManager.client.whisper(username, "Stamp Sent");
                }
            }).catch(function (err) {
                Nimble.logger.log(err);
            });
        }
    }, {
        key: "sendStampFromArray",
        value: function sendStampFromArray(evilMode, username, command) {
            var dataArray = command.split("-");
            if (dataArray.length === 81) {
                var valid = true;
                var paletteCount = GameStore.GameInstance.stampManager.getPalette().length;
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = dataArray[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var code = _step.value;

                        if (code < 0 || code > paletteCount) {
                            valid = false;
                            break;
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }

                if (valid) {
                    this.sendStamp(evilMode, username, dataArray);
                } else {
                    GameStore.twitchManager.client.whisper(username, "Invalid Stamp Code");
                }
            } else {
                GameStore.twitchManager.client.whisper(username, "Invalid Stamp Code");
            }
        }
    }]);

    return ChatManager;
}();

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GameStore = __webpack_require__(0);

module.exports = function () {
    function UgcManager() {
        _classCallCheck(this, UgcManager);

        this.loadedFiles = {};
        this.playerMeshOverrideName = undefined;
    }

    _createClass(UgcManager, [{
        key: "onGameLoad",
        value: function onGameLoad() {
            for (var name in this.loadedFiles) {
                var entry = this.loadedFiles[name];
                if (!entry.loaded) {
                    GameStore.GameInstance.voxLoader.addFromArrayBuffer(entry.arrayBuffer, "ugc-" + name);
                    entry.loaded = true;

                    this.onMeshLoaded(name);
                }
            }
        }
    }, {
        key: "loadMesh",
        value: function loadMesh(file) {
            var _this = this;

            if (!file.name.endsWith(".vox")) {
                console.error("Must be a .vox file, found: " + file.name);

                return;
            }

            var reader = new FileReader();
            reader.onload = function (e) {
                var name = file.name.replace(".vox", "");
                var loaded = GameStore.GameInstance && GameStore.GameInstance.voxLoader.addFromArrayBuffer(e.target.result, "ugc-" + name) !== undefined;
                _this.loadedFiles[name] = {
                    loaded: loaded,
                    arrayBuffer: !loaded ? e.target.result : undefined
                };

                if (loaded) {
                    _this.onMeshLoaded(name);
                }
            };

            reader.readAsArrayBuffer(file);
        }
    }, {
        key: "onMeshLoaded",
        value: function onMeshLoaded(name) {
            this.playerMeshOverrideName = "ugc-" + name;

            GameStore.GameInstance && GameStore.GameInstance.player && GameStore.GameInstance.player.spawnOverrideMesh();
        }
    }]);

    return UgcManager;
}();

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.

var React = __webpack_require__(5);

__webpack_require__(198);

var Utils = __webpack_require__(2);
var PlayerStore = __webpack_require__(17);
var GameStore = __webpack_require__(0);

var HealthView = function (_React$Component) {
    _inherits(HealthView, _React$Component);

    function HealthView() {
        _classCallCheck(this, HealthView);

        var _this = _possibleConstructorReturn(this, (HealthView.__proto__ || Object.getPrototypeOf(HealthView)).call(this));

        _this.player = GameStore.GameInstance.player;

        _this.topHealthBoxes = 0;
        _this.topHealthLerpSpeed = 0.1; // Lerp speed to current health
        _this.topHealthLerpSpeedDecrease = 0.4;
        _this.topHealthIncreaseDelay = 1000; // Delay before lerping to higher health
        _this.topHealthTimerHandle = undefined;
        _this.topHealthBeginLerp = false;

        _this.bottomHealthBoxes = _this.topHealthBoxes;
        _this.bottomHealthLerpSpeed = 0.4; // Lerp seed to current health
        _this.bottomHealthLerpSpeedDecrease = 0.1;
        _this.bottomHealthDecreaseDelay = 1000; // Delay before lerping to lower health
        _this.bottomHealthTimerHandle = undefined;
        _this.bottomHealthBeginLerp = false;

        _this.healthBoxesCriticalThreshold = 2; // When num health boxes is <= then health will flash

        _this.numQuadrants = 4; // Total number of boxes for a partial health box

        _this.colorIcon = "#FF9500";

        _this.healthIcon = undefined; // Store for health icon render to avoid re-render if possible
        _this.healthBarTop = undefined;
        _this.healthBarBottom = undefined;
        _this.healthBarBG = undefined;

        _this.availableStamps = 0;
        return _this;
    }

    _createClass(HealthView, [{
        key: "drawStampModeIcon",
        value: function drawStampModeIcon(availableStamps) {
            var src = __webpack_require__(56);

            return React.createElement(
                "div",
                { className: "stampModeIconContainer" },
                React.createElement("img", { src: src, className: "stampModeIconImg" })
            );
        }
    }, {
        key: "drawStampAvailableStampCount",
        value: function drawStampAvailableStampCount() {
            var stampManager = GameStore.GameInstance.stampManager;
            var availableStamps = stampManager.availableStamps();

            var className = "levelViewContainer stampCountContainer";

            if (stampManager.spawnCountFlashTime > 0 && stampManager.spawnCountFailFlashTime <= 0) {
                className += " stampCountContainerFlash";
            }

            if (stampManager.spawnCountFailFlashTime > 0) {
                className += " stampCountContainerFlashRed";
            }

            return React.createElement(
                "div",
                { className: className },
                React.createElement("div", { className: "scanLineOverlay", id: "scanLinePosition" }),
                availableStamps
            );
        }
    }, {
        key: "drawHealthIcon",
        value: function drawHealthIcon() {
            if (this.player.healthBoxes.length > 0) {
                var lastBox = this.player.healthBoxes[this.player.healthBoxes.length - 1];
                this.colorIcon = lastBox.material.color.getStyle();
            } else {
                this.colorIcon = "#FF2400";
            }

            var boxShadow = "0px 0px 1.5vw 0.15vw ";
            var topStyle = {
                gridRow: 1,
                gridColumn: 2,
                background: this.colorIcon,
                boxShadow: boxShadow + this.colorIcon
            };

            var style = {
                gridRow: 2,
                gridColumn: 1,
                background: this.colorIcon,
                boxShadow: boxShadow + this.colorIcon
            };

            var style2 = {
                gridRow: 2,
                gridColumn: 2,
                background: this.colorIcon,
                boxShadow: boxShadow + this.colorIcon
            };

            var style3 = {
                gridRow: 2,
                gridColumn: 3,
                background: this.colorIcon,
                boxShadow: boxShadow + this.colorIcon
            };

            var bottomStyle = {
                gridRow: 3,
                gridColumn: 2,
                background: this.colorIcon,
                boxShadow: boxShadow + this.colorIcon
            };

            var className = this.topHealthBoxes > 0 && this.topHealthBoxes <= this.healthBoxesCriticalThreshold ? "healthIconContainer healthCriticalFlash" : "healthIconContainer";

            return React.createElement(
                "div",
                { className: className },
                React.createElement("div", { className: "healthBox", style: topStyle }),
                React.createElement("div", { className: "healthBox", style: style }),
                React.createElement("div", { className: "healthBox", style: style2 }),
                React.createElement("div", { className: "healthBox", style: style3 }),
                React.createElement("div", { className: "healthBox", style: bottomStyle })
            );
        }
    }, {
        key: "drawHealthBoxes",
        value: function drawHealthBoxes(numTotalBoxes, numHealthBoxes, forceColor) {
            var boxesToRender = [];

            numTotalBoxes = Math.ceil(numTotalBoxes);
            for (var i = 0; i < numTotalBoxes; i++) {
                var length = Math.ceil(numHealthBoxes);

                var color = forceColor;
                if (color === undefined) {
                    if (this.player.healthBoxColorList && this.player.healthBoxColorList[i]) {
                        color = i < length ? this.player.healthBoxColorList[i] : "rgba(0, 0, 0, 0.7)";
                    } else {
                        color = "rgba(0, 0, 0, 0.7)";
                    }
                }

                var style = {
                    background: color
                };

                var topHealthRounded = Math.round(this.topHealthBoxes);
                // Only show glow on bottom bar if not overlapping with top
                if (forceColor === undefined || i + 1 > topHealthRounded) {
                    style.boxShadow = i < length ? "0px 0px 0.75vw 0.15vw " + color : "";
                }

                // On the last health box draw out parts if any
                var partialHealth = numHealthBoxes - Math.floor(numHealthBoxes); // Get remainder

                if (i === numTotalBoxes - 1) {
                    if (partialHealth > 0) {
                        var quadrantSize = 1 / this.numQuadrants;
                        var parts = Math.ceil(partialHealth / quadrantSize);

                        // Create parts
                        var renderParts = [];

                        // Dont flash if already flashing
                        var className = this.topHealthBoxes > 0 && this.topHealthBoxes <= this.healthBoxesCriticalThreshold ? "healthBoxPartial" : "healthBoxPartial healthCriticalFlash";

                        for (var _i = 0; _i < parts; _i++) {
                            renderParts.push(React.createElement("div", { className: "healthBoxQuadrant", key: _i, style: style }));
                        }

                        boxesToRender.push(React.createElement(
                            "div",
                            { className: className, key: i },
                            renderParts
                        ));
                    } else {
                        boxesToRender.push(React.createElement("div", { className: "healthBox", key: i, style: style }));
                    }
                } else {
                    boxesToRender.push(React.createElement("div", { className: "healthBox", key: i, style: style }));
                }
            }

            return boxesToRender;
        }
    }, {
        key: "componentDidMount",
        value: function componentDidMount() {
            // Startup sound
            this.player.soundStartup.Play(this.player.mesh.position);
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            var needsRender = false;
            var healthBoxLengthFraction = PlayerStore.health / this.player.hpPerBar;

            var bottomBarColor = healthBoxLengthFraction >= this.bottomHealthBoxes ? "rgb(253, 255, 138)" : "rgb(255, 0, 120)";

            if (healthBoxLengthFraction > this.bottomHealthBoxes) {
                needsRender = true;

                // Cancel decrease timeout since we're now increasing
                if (this.bottomHealthTimerHandle !== undefined) {
                    clearTimeout(this.bottomHealthTimerHandle);
                    this.bottomHealthTimerHandle = undefined;
                    this.bottomHealthBeginLerp = false;
                }

                var deltaHealth = healthBoxLengthFraction - this.bottomHealthBoxes;
                this.bottomHealthBoxes = deltaHealth < this.bottomHealthLerpSpeed ? healthBoxLengthFraction : this.bottomHealthBoxes + this.bottomHealthLerpSpeed;
            } else if (healthBoxLengthFraction < this.bottomHealthBoxes) {
                needsRender = true;

                // Do lerping if ready
                if (this.bottomHealthBeginLerp) {
                    var _deltaHealth = this.bottomHealthBoxes - healthBoxLengthFraction;
                    this.bottomHealthBoxes = _deltaHealth < this.bottomHealthLerpSpeedDecrease ? healthBoxLengthFraction : this.bottomHealthBoxes - this.bottomHealthLerpSpeedDecrease;

                    if (this.bottomHealthBoxes === healthBoxLengthFraction) {
                        this.bottomHealthBeginLerp = false;
                    }
                } else if (this.bottomHealthTimerHandle === undefined) {
                    // Start timeout to begin lerp
                    this.bottomHealthTimerHandle = setTimeout(function () {
                        _this2.bottomHealthBeginLerp = true;
                        _this2.bottomHealthTimerHandle = undefined;
                    }, this.bottomHealthDecreaseDelay);
                }
            }

            if (healthBoxLengthFraction < this.topHealthBoxes) {
                needsRender = true;

                // Cancel increase timeout if we're now decreasing
                if (this.topHealthTimerHandle !== undefined) {
                    clearTimeout(this.topHealthTimerHandle);
                    this.topHealthTimerHandle = undefined;
                    this.topHealthBeginLerp = false;
                }

                var _deltaHealth2 = this.topHealthBoxes - healthBoxLengthFraction;
                this.topHealthBoxes = _deltaHealth2 < this.topHealthLerpSpeedDecrease ? healthBoxLengthFraction : this.topHealthBoxes - this.topHealthLerpSpeedDecrease;
            } else if (healthBoxLengthFraction > this.topHealthBoxes) {
                needsRender = true;

                // Do lerping if ready
                if (this.topHealthBeginLerp) {
                    var _deltaHealth3 = healthBoxLengthFraction - this.topHealthBoxes;
                    this.topHealthBoxes = _deltaHealth3 < this.topHealthLerpSpeed ? healthBoxLengthFraction : this.topHealthBoxes + this.topHealthLerpSpeed;

                    if (this.topHealthBoxes === healthBoxLengthFraction) {
                        this.topHealthBeginLerp = false;
                    }
                } else if (this.topHealthTimerHandle === undefined) {
                    // Start timeout to begin lerp
                    this.topHealthTimerHandle = setTimeout(function () {
                        _this2.topHealthBeginLerp = true;
                        _this2.topHealthTimerHandle = undefined;
                    }, this.topHealthIncreaseDelay);
                }
            }

            var classNameTop = this.topHealthBoxes > 0 && this.topHealthBoxes <= this.healthBoxesCriticalThreshold ? "healthBoxesContainer healthCriticalFlash" : "healthBoxesContainer";
            var classNameBottom = healthBoxLengthFraction < this.bottomHealthBoxes ? "healthBoxesContainer healthStrobeFlash" : "healthBoxesContainer";

            var styleTop = {
                zIndex: 2
            };

            var styleBottom = {
                zIndex: 1
            };

            var styleBG = {
                zIndex: 0

                // Only re-render stamp mode icon if the available stamp count has changed
            };var stampManager = GameStore.GameInstance.stampManager;
            var availableStamps = stampManager !== undefined ? stampManager.availableStamps() : -1;

            if (this.availableStamps !== availableStamps) {
                this.availableStamps = availableStamps;
                this.stampModeIcon = this.drawStampModeIcon(availableStamps);
            }

            if (needsRender || this.healthIcon === undefined) {
                this.healthIcon = this.drawHealthIcon();
                this.healthBarTop = this.drawHealthBoxes(this.topHealthBoxes, this.topHealthBoxes);
                this.healthBarBottom = this.drawHealthBoxes(this.bottomHealthBoxes, this.bottomHealthBoxes, bottomBarColor);
            }

            if (this.healthBarBG === undefined || this.healthBarBG.length !== this.player.hudHealthBoxCount) {
                this.healthBarBG = this.drawHealthBoxes(this.player.hudHealthBoxCount, 0);
            }

            return React.createElement(
                "div",
                { className: "healthContainer" },
                this.healthIcon,
                React.createElement(
                    "div",
                    { className: classNameTop, style: styleTop },
                    React.createElement("div", { className: "scanLineOverlay" }),
                    this.healthBarTop
                ),
                React.createElement(
                    "div",
                    { className: classNameBottom, style: styleBottom },
                    this.healthBarBottom
                ),
                React.createElement(
                    "div",
                    { className: "healthBoxesContainer", style: styleBG },
                    React.createElement("div", { className: "scanLineOverlay" }),
                    this.healthBarBG
                ),
                this.stampModeIcon,
                this.drawStampAvailableStampCount()
            );
        }
    }]);

    return HealthView;
}(React.Component);

module.exports = HealthView;

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(199);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(4)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./healthView.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./healthView.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(3)(false);
// imports


// module
exports.push([module.i, ".healthContainer {\n  position: absolute;\n  display: flex;\n  left: 2.75vw;\n  top: 4.6vw;\n  height: calc((1.2vw * 0.5 + 0.04vw) * 3);\n  opacity: 0.85;\n  z-index: -1;\n  pointer-events: none;\n  filter: hue-rotate(11deg) brightness(1.35);\n}\n.healthContainer .healthIconContainer {\n  position: absolute;\n  display: grid;\n  top: 0vw;\n  left: 0vw;\n  height: calc((1.2vw + 0.04vw * 2) * 3);\n  width: calc((1.2vw + 0.04vw * 2) * 3);\n  transform-origin: top left;\n  transform: scale(0.5);\n}\n.healthContainer .stampModeIconContainer {\n  position: absolute;\n  display: grid;\n  top: 2.6vw;\n  left: -0.15vw;\n  height: calc((1.2vw + 0.04vw * 2) * 3);\n  width: calc((1.2vw + 0.04vw * 2) * 3);\n  transform-origin: top left;\n  transform: scale(0.56);\n}\n.healthContainer .stampModeIconContainer .stampModeIconImg {\n  width: 6.5vw;\n  left: -1.4vw;\n  top: -1.2vw;\n  position: absolute;\n  filter: drop-shadow(-0.4vw -0.8vw 0.8vw rgba(255, 0, 0, 0.5)) drop-shadow(0.6vw 0.8vw 0.5vw rgba(0, 255, 255, 0.4));\n}\n.healthContainer .stampCountContainer {\n  top: 2.8vw;\n  left: 2.1vw;\n  text-align: left;\n  font-size: 1.4vw;\n}\n.healthContainer .stampCountContainerFlash {\n  animation: stampCountContainerFlashAnim 0.5s;\n}\n@keyframes stampCountContainerFlashAnim {\n  0% {\n    filter: hue-rotate(283deg) brightness(100%);\n  }\n  10% {\n    filter: hue-rotate(283deg) brightness(200%);\n  }\n  40% {\n    filter: hue-rotate(283deg) brightness(200%);\n  }\n  100% {\n    filter: hue-rotate(283deg) brightness(100%);\n  }\n}\n.healthContainer .stampCountContainerFlashRed {\n  animation-name: stampCountContainerFlashRedAnim;\n  animation-duration: 0.3s;\n  animation-iteration-count: 3;\n}\n.healthContainer #scanLinePosition {\n  width: 60%;\n  height: 70%;\n  left: 16%;\n  top: 12%;\n}\n@keyframes stampCountContainerFlashRedAnim {\n  0% {\n    filter: invert(0%);\n    transform: scale(1);\n    opacity: 0.4;\n  }\n  10% {\n    filter: invert(100%);\n    transform: scale(2);\n    opacity: 1;\n  }\n  40% {\n    filter: invert(100%);\n    transform: scale(2);\n    opacity: 1;\n  }\n  100% {\n    filter: invert(0%);\n    transform: scale(1);\n    opacity: 0.4;\n  }\n}\n.healthContainer .healthBoxesContainer {\n  position: absolute;\n  display: flex;\n  top: 0.3vw;\n  left: 2.5vw;\n}\n.healthContainer .healthBoxesContainer .healthBoxPartial {\n  display: inline-block;\n  width: 1.2vw;\n  height: 1.2vw;\n  margin: 0.04vw;\n}\n.healthContainer .healthBoxesContainer .healthBoxPartial .healthBoxQuadrant {\n  float: left;\n  border: 1px solid rgba(255, 255, 255, 0.175);\n  box-sizing: border-box;\n  width: calc(1.2vw / 2);\n  height: calc(1.2vw / 2);\n}\n.healthContainer .healthBoxesContainer .healthBox {\n  float: left;\n  width: 1.2vw;\n  height: 1.2vw;\n  margin: 0.04vw;\n  border: 1px solid rgba(255, 255, 255, 0.175);\n  box-sizing: border-box;\n}\n.healthCriticalIconFlash {\n  animation-name: healthCriticalIconFlashAnim;\n  animation-duration: 0.75s;\n  animation-iteration-count: infinite;\n}\n@keyframes healthCriticalIconFlashAnim {\n  0% {\n    filter: brightness(2.5);\n  }\n  10% {\n    filter: brightness(1);\n  }\n  20% {\n    filter: brightness(2.5);\n  }\n  30% {\n    filter: brightness(1);\n  }\n  100% {\n    filter: brightness(1);\n  }\n}\n.healthCriticalFlash {\n  animation-name: healthCriticalFlashAnim;\n  animation-duration: 0.75s;\n  animation-iteration-count: infinite;\n}\n@keyframes healthCriticalFlashAnim {\n  0% {\n    filter: brightness(2.5);\n  }\n  10% {\n    filter: brightness(1);\n  }\n  20% {\n    filter: brightness(2.5);\n  }\n  30% {\n    filter: brightness(1);\n  }\n  100% {\n    filter: brightness(1);\n  }\n}\n.healthStrobeFlash {\n  animation-name: healthStrobeAnim;\n  animation-duration: 0.3s;\n  animation-iteration-count: infinite;\n}\n@keyframes healthStrobeAnim {\n  0% {\n    filter: brightness(2.5);\n  }\n  100% {\n    filter: brightness(1);\n  }\n}\n", ""]);

// exports


/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.
var React = __webpack_require__(5);
var GameStore = __webpack_require__(0);
var TychoCommon = __webpack_require__(10);
var Nimble = __webpack_require__(6);
var StringStore = __webpack_require__(11);

__webpack_require__(201);

module.exports = function (_React$Component) {
    _inherits(_class, _React$Component);

    function _class() {
        _classCallCheck(this, _class);

        return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
    }

    _createClass(_class, [{
        key: "renderLevel",
        value: function renderLevel(userName) {
            if (userName) {
                var xpViewLevelClass = GameStore.GameInstance.xpManager.announceLevelUp ? "xpViewLevel xpViewLevelHighlight" : "xpViewLevel";

                var styleLevel = {};
                var maxLevel = TychoCommon.constants.levelColors.length - 1;
                var level = GameStore.GameInstance.xpManager.level;
                var index = Math.min(level, maxLevel);
                styleLevel.background = "rgba(" + TychoCommon.constants.levelColors[index] + ", 0.75)";
                styleLevel.boxShadow = "inset 0 0 0.4vw rgba(255, 255, 255, 0.7), 0 0 1vw rgb(" + TychoCommon.constants.levelColors[index] + ")";

                return React.createElement(
                    "div",
                    { className: xpViewLevelClass, style: styleLevel },
                    level + 1
                );
            }
        }
    }, {
        key: "renderLevelUp",
        value: function renderLevelUp() {
            if (GameStore.GameInstance.xpManager.announceLevelUp) {
                return React.createElement(
                    "div",
                    { className: "xpViewLevelup" },
                    StringStore.UI.LEVEL_UP,
                    React.createElement("br", null),
                    React.createElement(
                        "span",
                        { style: { fontSize: "2vw" } },
                        " ",
                        StringStore.UI.LEVEL_UP_PRIZE
                    )
                );
            } else {
                return React.createElement("div", null);
            }
        }
    }, {
        key: "render",
        value: function render() {
            var usernameTitle = Nimble.twitch.store.streamer.name ? Nimble.twitch.store.streamer.name : "";
            var usernameDisplay = usernameTitle.length > 18 ? usernameTitle.substring(0, 18) : usernameTitle;
            var styleLabel = {
                left: "2.95vw",
                pointerEvents: "none"
            };

            var xpManager = GameStore.GameInstance.xpManager;

            var currentProcessedPoints = xpManager.remainderXp;
            var progress = currentProcessedPoints > 0 ? Math.min(Math.floor(currentProcessedPoints / xpManager.nextLevelXPAmount * 100), 100) : 0;

            var styleXPBar = {
                width: progress + "%"
            };

            var playerKilled = GameStore.gamestateManager !== undefined && GameStore.gamestateManager.playerKilled;

            var xpBar = playerKilled || GameStore.gamestateManager.playingLevel ? undefined : React.createElement(
                "div",
                { className: "xpView" },
                React.createElement(
                    "div",
                    { className: "xpViewText", style: { right: "90%" } },
                    "XP"
                ),
                React.createElement(
                    "div",
                    { className: "xpViewText" },
                    currentProcessedPoints,
                    " / ",
                    xpManager.nextLevelXPAmount
                ),
                React.createElement("div", { className: "xpViewBar", style: styleXPBar })
            );

            return React.createElement(
                "div",
                { className: "xpViewContainer" },
                this.renderLevel(usernameTitle),
                this.renderLevelUp(),
                React.createElement(
                    "div",
                    { className: "xpViewLabel", style: styleLabel },
                    usernameDisplay
                ),
                xpBar
            );
        }
    }]);

    return _class;
}(React.Component);

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(202);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(4)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./xpView.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./xpView.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

var escape = __webpack_require__(9);
exports = module.exports = __webpack_require__(3)(false);
// imports


// module
exports.push([module.i, "@font-face {\n  font-family: xpViewFont;\n  src: url(" + escape(__webpack_require__(15)) + ");\n}\n@keyframes xpViewLevelupAnim {\n  0% {\n    transform: scale(0) translate3d(0, 0, 0);\n    filter: brightness(1);\n    opacity: 0;\n  }\n  10% {\n    transform: scale(1.2) translate3d(0, 0, 0);\n    filter: brightness(2);\n    opacity: 1;\n  }\n  12.5% {\n    transform: scale(1) translate3d(0, 0, 0);\n    filter: brightness(1);\n    opacity: 1;\n  }\n  24% {\n    opacity: 1;\n  }\n  25% {\n    opacity: 0;\n  }\n  37% {\n    opacity: 0;\n  }\n  37.5% {\n    opacity: 1;\n  }\n  49% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0;\n  }\n  62% {\n    opacity: 0;\n  }\n  62.5% {\n    opacity: 1;\n  }\n  74% {\n    opacity: 1;\n  }\n  75% {\n    opacity: 0;\n  }\n  87% {\n    opacity: 0;\n  }\n  87.5% {\n    transform: scale(1) translate3d(0, 0, 0);\n    filter: brightness(1);\n    opacity: 1;\n  }\n  90% {\n    transform: scale(1.2) translate3d(0, 0, 0);\n    filter: brightness(2);\n    opacity: 1;\n  }\n  100% {\n    transform: scale(0) translate3d(0, 0, 0);\n    filter: brightness(1);\n    opacity: 0;\n  }\n}\n.xpViewContainer {\n  position: absolute;\n  top: 2.2vw;\n  left: 2.5vw;\n  width: 21.5vw;\n  height: 3.7vw;\n  pointer-events: none;\n}\n.xpViewContainer .xpViewLevelup {\n  position: absolute;\n  top: 1060%;\n  left: -10%;\n  width: 100vw;\n  font-size: 8vw;\n  text-align: center;\n  line-height: 3vw;\n  font-family: xpViewFont;\n  color: white;\n  font-weight: normal;\n  transform-origin: center center;\n  z-index: 100;\n  text-shadow: -0.1vw -0.1vw 0 #000, 0.1vw -0.1vw 0 #000, -0.1vw 0.1vw 0 #000, 0.1vw 0.1vw 0 #000, 0 0.1vw 0 #000, 0.1vw 0 0 #000, 0px 0px 8vw #fffffe, 0px 0px 8vw #fffffe;\n  animation: xpViewLevelupAnim 4s ease-out;\n  animation-fill-mode: forwards;\n}\n.xpViewContainer .xpViewLabel {\n  position: absolute;\n  top: -0.1vw;\n  left: 2.95vw;\n  text-align: left;\n  font-size: 2.1vw;\n  line-height: 1.4vw;\n  font-family: xpViewFont;\n  color: white;\n  opacity: 0.8;\n  pointer-events: none;\n  text-shadow: -0.1vw -0.1vw 0 #000, 0.1vw -0.1vw 0 #000, -0.1vw 0.1vw 0 #000, 0.1vw 0.1vw 0 #000, 0 0.1vw 0 #000, 0.1vw 0 0 #000, 0px 0px 2vw rgba(255, 255, 254, 0.5), 0px 0px 2vw rgba(255, 255, 254, 0.5), 0px 0px 2vw rgba(255, 255, 254, 0.5);\n}\n.xpViewContainer .xpViewLevel {\n  position: absolute;\n  left: 0vw;\n  top: -0.2vw;\n  width: 2.45vw;\n  height: 1.95vw;\n  text-align: center;\n  font-size: 1.9vw;\n  line-height: 1.7vw;\n  font-family: xpViewFont;\n  color: white;\n  opacity: 0.8;\n  pointer-events: none;\n  text-shadow: -0.1vw -0.1vw 0 #000, 0.1vw -0.1vw 0 #000, -0.1vw 0.1vw 0 #000, 0.1vw 0.1vw 0 #000, 0 0.1vw 0 #000, 0.1vw 0 0 #000, 0px 0px 0.125vw rgba(255, 255, 254, 0.7), 0px 0px 0.125vw rgba(255, 255, 254, 0.7), 0px 0px 0.125vw rgba(255, 255, 254, 0.7);\n}\n.xpViewContainer .xpView {\n  position: absolute;\n  width: 100%;\n  height: 1.5vw;\n  bottom: 0vw;\n  left: -0.6%;\n  background: rgba(0, 0, 0, 0.7);\n  border: 1px solid rgba(255, 255, 255, 0.3);\n  box-sizing: border-box;\n  opacity: 0.8;\n  pointer-events: none;\n}\n.xpViewContainer .xpView .xpViewText {\n  position: absolute;\n  top: 0;\n  right: 2%;\n  height: 100%;\n  width: 100%;\n  z-index: 1;\n  font-family: xpViewFont;\n  font-size: 1.4vw;\n  line-height: 1.1vw;\n  color: white;\n  text-align: right;\n  text-shadow: -0.1vw -0.1vw 0 #000, 0.1vw -0.1vw 0 #000, -0.1vw 0.1vw 0 #000, 0.1vw 0.1vw 0 #000, 0 0.1vw 0 #000, 0.1vw 0 0 #000, 0px 0px 2vw #000000, 0px 0px 2vw #000000, 0px 0px 2vw #000000;\n}\n.xpViewContainer .xpView .xpViewBar {\n  position: absolute;\n  height: 100%;\n  top: 0;\n  z-index: 0;\n  background: rgba(255, 130, 0, 0.95);\n  box-shadow: inset 0 0 0.8vw rgba(255, 255, 255, 0.7), 0 0 1vw rgba(255, 130, 0, 0.75), 0 0 1vw rgba(255, 130, 0, 0.75);\n  filter: brightness(150%);\n  transition: 1.75s ease-in-out;\n}\n.xpViewContainer .xpViewLevelHighlight {\n  animation-name: xpViewLevelHighlightAnim;\n  animation-duration: 0.5s;\n  animation-iteration-count: infinite;\n  animation-timing-function: ease-out;\n}\n@keyframes xpViewLevelHighlightAnim {\n  0% {\n    filter: brightness(300%);\n    font-size: 2vw;\n  }\n  100% {\n    filter: brightness(100%);\n    font-size: 1.5vw;\n  }\n}\n", ""]);

// exports


/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.
var React = __webpack_require__(5);
var GameStore = __webpack_require__(0);
var StringStore = __webpack_require__(11);

__webpack_require__(204);

module.exports = function (_React$Component) {
    _inherits(_class, _React$Component);

    function _class() {
        _classCallCheck(this, _class);

        var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));

        _this.processingBitsCallouts = false;
        _this.bitsAnimFinished = false;
        _this.processingSubCallouts = false;
        _this.subAnimFinished = false;
        _this.calloutLengthMs = 8500;
        return _this;
    }

    _createClass(_class, [{
        key: "getBitsCallout",
        value: function getBitsCallout() {
            if (this.bitsAnimFinished) {
                this.bitsAnimFinished = false;

                return null;
            }

            var callout = GameStore.twitchManager.bitsTransactionList[0];
            if (callout !== undefined) {
                return React.createElement(
                    "div",
                    { className: "calloutText" },
                    callout.bitsCount + " " + StringStore.UI.BITS_FROM + " " + callout.name,
                    "!"
                );
            } else {
                return null;
            }
        }
    }, {
        key: "getSubCallout",
        value: function getSubCallout() {
            if (this.subAnimFinished) {
                this.subAnimFinished = false;

                return null;
            }

            var callout = GameStore.twitchManager.subTransactionList[0];
            if (callout !== undefined) {
                return React.createElement(
                    "div",
                    { className: "subCalloutText" },
                    callout.name + " " + StringStore.UI.SUB_BY,
                    "!"
                );
            } else {
                return null;
            }
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            if (!this.processingBitsCallouts && GameStore.twitchManager.bitsTransactionList.length > 0) {
                this.processingBitsCallouts = true;
                this.bitsAnimToggle = !this.bitsAnimToggle;

                setTimeout(function () {
                    GameStore.twitchManager.bitsTransactionList.shift();
                    _this2.processingBitsCallouts = false;
                    _this2.bitsAnimFinished = true;
                }, this.calloutLengthMs);
            }

            if (!this.processingSubCallouts && GameStore.twitchManager.subTransactionList.length > 0) {
                this.processingSubCallouts = true;
                this.subAnimToggle = !this.subAnimToggle;

                setTimeout(function () {
                    GameStore.twitchManager.subTransactionList.shift();
                    _this2.processingSubCallouts = false;
                    _this2.subAnimFinished = true;
                }, this.calloutLengthMs);
            }

            return React.createElement(
                "div",
                { className: "calloutViewContainer" },
                this.getBitsCallout(),
                this.getSubCallout()
            );
        }
    }]);

    return _class;
}(React.Component);

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(205);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(4)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./calloutView.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./calloutView.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

var escape = __webpack_require__(9);
exports = module.exports = __webpack_require__(3)(false);
// imports


// module
exports.push([module.i, "@font-face {\n  font-family: xpViewFont;\n  src: url(" + escape(__webpack_require__(15)) + ");\n}\n.calloutViewContainer {\n  position: absolute;\n  top: 20vw;\n  left: 30vw;\n  width: 40vw;\n  height: 6vh;\n  pointer-events: none;\n}\n.calloutViewContainer .calloutText {\n  position: absolute;\n  top: -0.1vw;\n  left: 2.95vw;\n  text-align: left;\n  font-size: 2.1vw;\n  line-height: 1.4vw;\n  font-family: xpViewFont;\n  color: white;\n  opacity: 0.8;\n  pointer-events: none;\n  animation: calloutViewContainerAnim 8s ease-out;\n  animation-fill-mode: forwards;\n  text-shadow: -0.1vw -0.1vw 0 #000, 0.1vw -0.1vw 0 #000, -0.1vw 0.1vw 0 #000, 0.1vw 0.1vw 0 #000, 0 0.1vw 0 #000, 0 -0.1vw 0 #000, 0.1vw 0 0 #000, -0.1vw 0 0 #000, 0px 0px 2vw rgba(255, 255, 254, 0.5), 0px 0px 2vw rgba(255, 255, 254, 0.5), 0px 0px 2vw rgba(255, 255, 254, 0.5);\n}\n.calloutViewContainer .subCalloutText {\n  position: absolute;\n  top: -0.1vw;\n  left: 2.95vw;\n  text-align: left;\n  font-size: 2.1vw;\n  line-height: 1.4vw;\n  font-family: xpViewFont;\n  color: white;\n  opacity: 0.8;\n  pointer-events: none;\n  animation: calloutViewContainerAnim 8s ease-out;\n  animation-fill-mode: forwards;\n  text-shadow: -0.1vw -0.1vw 0 #000, 0.1vw -0.1vw 0 #000, -0.1vw 0.1vw 0 #000, 0.1vw 0.1vw 0 #000, 0 0.1vw 0 #000, 0 -0.1vw 0 #000, 0.1vw 0 0 #000, -0.1vw 0 0 #000, 0px 0px 2vw rgba(255, 255, 254, 0.5), 0px 0px 2vw rgba(255, 255, 254, 0.5), 0px 0px 2vw rgba(255, 255, 254, 0.5);\n  top: 3.5vw;\n}\n@keyframes calloutViewContainerAnim {\n  0% {\n    transform: scale(0) translate3d(0, 18vw, 0);\n    filter: brightness(1);\n    opacity: 0;\n  }\n  5% {\n    transform: scale(1.2) translate3d(0, 10vw, 0);\n    filter: brightness(2);\n    opacity: 1;\n  }\n  6.25% {\n    transform: scale(1) translate3d(0, 0, 0);\n    filter: brightness(1);\n    opacity: 1;\n  }\n  12% {\n    opacity: 1;\n  }\n  12.5% {\n    opacity: 0;\n  }\n  18.5% {\n    opacity: 0;\n  }\n  18.75% {\n    opacity: 1;\n  }\n  24.5% {\n    opacity: 1;\n  }\n  25% {\n    opacity: 0;\n  }\n  31% {\n    opacity: 0;\n  }\n  31.25% {\n    opacity: 1;\n  }\n  37% {\n    opacity: 1;\n  }\n  37.5% {\n    opacity: 0;\n  }\n  43.5% {\n    opacity: 0;\n  }\n  50% {\n    opacity: 1;\n  }\n  62% {\n    opacity: 1;\n  }\n  62.5% {\n    opacity: 0;\n  }\n  68.5% {\n    opacity: 0;\n  }\n  68.75% {\n    opacity: 1;\n  }\n  74.5% {\n    opacity: 1;\n  }\n  75% {\n    opacity: 0;\n  }\n  81% {\n    opacity: 0;\n  }\n  81.25% {\n    opacity: 1;\n  }\n  87% {\n    opacity: 1;\n  }\n  87.5% {\n    opacity: 0;\n  }\n  93.5% {\n    opacity: 0;\n  }\n  93.75% {\n    transform: scale(1) translate3d(0, 0, 0);\n    filter: brightness(1);\n    opacity: 1;\n  }\n  95% {\n    transform: scale(1.2) translate3d(0, 0, 0);\n    filter: brightness(2);\n    opacity: 1;\n  }\n  100% {\n    transform: scale(0) translate3d(0, 0, 0);\n    filter: brightness(1);\n    opacity: 0;\n  }\n}\n", ""]);

// exports


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.
var React = __webpack_require__(5);
var GameStore = __webpack_require__(0);
var StringStore = __webpack_require__(11);

__webpack_require__(207);

module.exports = function (_React$Component) {
    _inherits(_class, _React$Component);

    function _class() {
        _classCallCheck(this, _class);

        return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
    }

    _createClass(_class, [{
        key: "render",
        value: function render() {
            var attachedBox = GameStore.GameInstance.player.attachedBox;
            var playerKilled = GameStore.gamestateManager !== undefined && GameStore.gamestateManager.playerKilled;

            if (!playerKilled && attachedBox !== undefined && attachedBox.canPickup && !attachedBox.delivered) {
                return React.createElement(
                    "div",
                    { className: "pickupViewContainer" },
                    React.createElement(
                        "div",
                        { className: "calloutText" },
                        "PICKUP THE PACKAGE!"
                    )
                );
            } else {
                return null;
            }
        }
    }]);

    return _class;
}(React.Component);

/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(208);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(4)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./pickupView.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./pickupView.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

var escape = __webpack_require__(9);
exports = module.exports = __webpack_require__(3)(false);
// imports


// module
exports.push([module.i, "@font-face {\n  font-family: xpViewFont;\n  src: url(" + escape(__webpack_require__(15)) + ");\n}\n.pickupViewContainer {\n  position: absolute;\n  top: 50.4vw;\n  left: 0vw;\n  width: 100vw;\n  height: 6vh;\n  pointer-events: none;\n  animation: pickupViewContainerAnim 8s ease-out;\n  animation-fill-mode: forwards;\n  animation-iteration-count: infinite;\n}\n.pickupViewContainer .calloutText {\n  top: -0.1vw;\n  text-align: center;\n  font-size: 2.1vw;\n  line-height: 1.4vw;\n  font-family: xpViewFont;\n  color: white;\n  opacity: 0.8;\n  pointer-events: none;\n  text-shadow: -0.1vw -0.1vw 0 #000, 0.1vw -0.1vw 0 #000, -0.1vw 0.1vw 0 #000, 0.1vw 0.1vw 0 #000, 0 0.1vw 0 #000, 0 -0.1vw 0 #000, 0.1vw 0 0 #000, -0.1vw 0 0 #000, 0px 0px 2vw rgba(255, 255, 254, 0.5), 0px 0px 2vw rgba(255, 255, 254, 0.5), 0px 0px 2vw rgba(255, 255, 254, 0.5);\n}\n@keyframes pickupViewContainerAnim {\n  0% {\n    opacity: 0;\n  }\n  5% {\n    opacity: 1;\n  }\n  6.25% {\n    opacity: 1;\n  }\n  12% {\n    opacity: 1;\n  }\n  12.5% {\n    opacity: 0;\n  }\n  18.5% {\n    opacity: 0;\n  }\n  18.75% {\n    opacity: 1;\n  }\n  24.5% {\n    opacity: 1;\n  }\n  25% {\n    opacity: 0;\n  }\n  31% {\n    opacity: 0;\n  }\n  31.25% {\n    opacity: 1;\n  }\n  37% {\n    opacity: 1;\n  }\n  37.5% {\n    opacity: 0;\n  }\n  43.5% {\n    opacity: 0;\n  }\n  50% {\n    opacity: 1;\n  }\n  62% {\n    opacity: 1;\n  }\n  62.5% {\n    opacity: 0;\n  }\n  68.5% {\n    opacity: 0;\n  }\n  68.75% {\n    opacity: 1;\n  }\n  74.5% {\n    opacity: 1;\n  }\n  75% {\n    opacity: 0;\n  }\n  81% {\n    opacity: 0;\n  }\n  81.25% {\n    opacity: 1;\n  }\n  87% {\n    opacity: 1;\n  }\n  87.5% {\n    opacity: 0;\n  }\n  93.5% {\n    opacity: 0;\n  }\n  93.75% {\n    opacity: 1;\n  }\n  95% {\n    opacity: 1;\n  }\n  100% {\n    opacity: 0;\n  }\n}\n", ""]);

// exports


/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.
var React = __webpack_require__(5);
var GameStore = __webpack_require__(0);

__webpack_require__(210);

module.exports = function (_React$Component) {
    _inherits(_class, _React$Component);

    function _class() {
        _classCallCheck(this, _class);

        return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
    }

    _createClass(_class, [{
        key: "render",
        value: function render() {

            var controlsString = "<Gun Mode> L Mouse: Machine Gun | R Mouse: Stamp Gun (" + GameStore.GameInstance.projectileManager.getStampProjectileCount() + ")";
            var player = GameStore.GameInstance.player;
            if (player !== undefined) {
                if (player.stampModeEnabled) {
                    controlsString = "<Stamp Mode> L Mouse: Summon | R Mouse: Like | M Mouse: Censor";
                }
            }

            return React.createElement(
                "div",
                { className: "controlsViewContainer" },
                React.createElement(
                    "div",
                    null,
                    controlsString
                )
            );
        }
    }]);

    return _class;
}(React.Component);

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(211);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(4)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./controlsView.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./controlsView.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(3)(false);
// imports


// module
exports.push([module.i, ".controlsViewContainer {\n  position: absolute;\n  top: 96%;\n  left: 5%;\n  visibility: hidden;\n  z-index: -1;\n  pointer-events: none;\n}\n", ""]);

// exports


/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.
var React = __webpack_require__(5);
var GameStore = __webpack_require__(0);
var UpgradeManager = __webpack_require__(22);

__webpack_require__(213);

module.exports = function (_React$Component) {
    _inherits(_class, _React$Component);

    function _class() {
        _classCallCheck(this, _class);

        var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));

        _this.introAnims = [];
        return _this;
    }

    _createClass(_class, [{
        key: "render",
        value: function render() {
            var _this2 = this;

            var inventory = GameStore.GameInstance.upgradeManager.equippedInventory;
            var upgradesToDraw = [];
            var i = 0;
            for (var upgradeType in inventory) {
                var count = inventory[upgradeType];
                if (count > 0) {
                    var src = __webpack_require__(215)("./" + UpgradeManager.upgradeList[upgradeType].voxName + ".png");
                    var title = UpgradeManager.upgradeList[upgradeType].name;

                    var playIntroAnim = UpgradeManager.upgradeList[upgradeType].playedUIIntro === false;
                    var className = playIntroAnim ? "upgradeViewItem upgradeViewItemIntroAnim" : "upgradeViewItem";

                    if (playIntroAnim) {
                        this.introAnims.push(UpgradeManager.upgradeList[upgradeType]);
                        setTimeout(function () {
                            var endAnimItem = _this2.introAnims.shift();
                            if (endAnimItem) {
                                endAnimItem.playedUIIntro = true;
                            }
                        }, 1000);
                    }

                    upgradesToDraw.push(React.createElement(
                        "div",
                        { className: className, key: i++, tooltip: title, "tooltip-text-size": "large", "tooltip-position": "bottom" },
                        React.createElement("img", { src: src, className: "upgradeViewImg" }),
                        React.createElement(
                            "div",
                            { className: "upgradeViewCount" },
                            "x" + count
                        )
                    ));
                }
            }

            return React.createElement(
                "div",
                { className: "upgradeViewContainer" },
                upgradesToDraw
            );
        }
    }]);

    return _class;
}(React.Component);

/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(214);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(4)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./upgradeView.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./upgradeView.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

var escape = __webpack_require__(9);
exports = module.exports = __webpack_require__(3)(false);
// imports


// module
exports.push([module.i, "@font-face {\n  font-family: upgradeViewFont;\n  src: url(" + escape(__webpack_require__(15)) + ");\n}\n.upgradeViewContainer {\n  position: absolute;\n  display: inline-block;\n  top: 1.6vw;\n  left: 29vw;\n  opacity: 0.875;\n  transition: 0.7s ease-out;\n  pointer-events: none;\n  z-index: -1;\n}\n.upgradeViewContainer .upgradeViewItem {\n  float: left;\n  margin-right: 0.5vw;\n  pointer-events: auto;\n  transform-origin: bottom left;\n}\n.upgradeViewContainer .upgradeViewItem .upgradeViewImg {\n  float: left;\n  width: 2.5vw;\n  margin-right: 0.1vw;\n}\n.upgradeViewContainer .upgradeViewItem .upgradeViewCount {\n  float: left;\n  text-align: left;\n  font-family: upgradeViewFont;\n  font-size: 1.5vw;\n  letter-spacing: 0.15vw;\n  line-height: 2.3vw;\n  text-shadow: -0.1vw -0.1vw 0 #000, 0.1vw -0.1vw 0 #000, -0.1vw 0.1vw 0 #000, 0.1vw 0.1vw 0 #000, 0 0.1vw 0 #000, 0 -0.1vw 0 #000, 0.1vw 0 0 #000, -0.1vw 0 0 #000;\n}\n.upgradeViewContainer .upgradeViewItemIntroAnim {\n  animation: upgradeViewItemAnim 0.4s ease-out;\n}\n@keyframes upgradeViewItemAnim {\n  0% {\n    transform: scale(0) translate3d(0, 0, 0);\n    filter: brightness(1);\n    opacity: 0;\n  }\n  80% {\n    transform: scale(1.2) translate3d(0, 0, 0);\n    filter: brightness(2);\n    opacity: 1;\n  }\n  100% {\n    transform: scale(1) translate3d(0, 0, 0);\n    filter: brightness(1);\n    opacity: 1;\n  }\n}\n", ""]);

// exports


/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./AmaBoosted.png": 216,
	"./Logo.png": 217,
	"./bg1.png": 218,
	"./bg2.png": 219,
	"./bg3.png": 220,
	"./bg4.png": 221,
	"./bgCell.png": 57,
	"./bgCellTransBorder.png": 36,
	"./bgCellTransFade.png": 8,
	"./bitBotIcon.png": 222,
	"./buffMeter.png": 223,
	"./buffMeterFill.png": 224,
	"./closeIcon.png": 58,
	"./crosshair2.png": 225,
	"./feedbackIcon.png": 59,
	"./joystick_max.png": 60,
	"./joystick_min.png": 61,
	"./joystick_touch.png": 62,
	"./maximizeIcon.png": 63,
	"./minimizeIcon.png": 64,
	"./option.png": 226,
	"./resolutionCursor.png": 65,
	"./screenAlignment.png": 227,
	"./selectionCursor.png": 42,
	"./selectionCursorFail.png": 43,
	"./selectionCursorPressed.png": 32,
	"./ss4.png": 228,
	"./ss6.png": 229,
	"./stampIcon.png": 56,
	"./subBotIcon.png": 230,
	"./targetCursor.png": 41,
	"./twitchIcon.png": 66,
	"./upgrade_fire_speed.png": 231,
	"./upgrade_fireball_multishot.png": 232,
	"./upgrade_fireball_speed.png": 233,
	"./upgrade_increase_health.png": 234,
	"./upgrade_jump_height.png": 235,
	"./upgrade_stamp_count.png": 236,
	"./upgrade_stamp_speed.png": 237,
	"./upgrade_stamp_thrower.png": 238
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) // check for number or string
		throw new Error("Cannot find module '" + req + "'.");
	return id;
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 215;

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "32e921c029ea7b3c4d5660d4dc7d692d.png";

/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "6b7acfd46abf63bb70d6c72aee6c885f.png";

/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "52b3cbc47d5a322e8be5967e1da0e79f.png";

/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "982fe067ca288537f6a4fea8ab1c932e.png";

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "1643c7ab7d39438b52dd52dfda0bd28e.png";

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "f0c5f808aeb0d9a2631edf0fd7306a36.png";

/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "c559044c8f4a9aa20d56fa28768578b7.png";

/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "2ddd00eaf54fc166ababf3fa936b59eb.png";

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "255f1ffe4b85ed4bbe14cf0c7e4b4130.png";

/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "ebc9b510bfa62023df285ce7cce40ba0.png";

/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "f27575e9d77ccf34ef5dfea6d468e9e5.png";

/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "d7714ccc4f2d571569fd4e5acb2d67b9.png";

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "0c1577b79e49a8313d7ad3d9669a74ab.png";

/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "364122f7e870a8d6476577b5cbdf58a3.png";

/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "28177d6eea1ae10ab8e0158de01d45d6.png";

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "d4e75fbd26652656fc3661bdbcf876c3.png";

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "24432c2f70e32fda7c362a65d366e643.png";

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "6c871d19c3618a9aa1573d1079d1ba05.png";

/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "682ab33a1f1d560291365fbbdfde24cb.png";

/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "8cd523babb086b417817a3b8fd15bed9.png";

/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "880c9c4b0ab1d5da22e4b2446b8ff54a.png";

/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "8bf04f586c503782a38a32c90e956316.png";

/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "7af77a67110623103485505b2db5330e.png";

/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.
var React = __webpack_require__(5);
var GameStore = __webpack_require__(0);

__webpack_require__(240);

module.exports = function (_React$Component) {
    _inherits(_class, _React$Component);

    function _class() {
        _classCallCheck(this, _class);

        return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
    }

    _createClass(_class, [{
        key: "render",
        value: function render() {
            var player = GameStore.GameInstance.player;
            var displayInfo = GameStore.GameInstance.dropManager.mouseOverDropInfo;
            if (displayInfo !== undefined && player !== undefined) {

                var detailsStr = "Upgrade Info: ";
                detailsStr += displayInfo.details;

                // Place text over item
                var nx = player.offsetX / player.container.clientWidth * 100;
                var ny = player.offsetY / player.container.clientHeight * 100;
                var style = {
                    top: ny + "vh",
                    left: nx + "vw"
                };

                return React.createElement(
                    "div",
                    { className: "upgradeDetailViewContainer", style: style },
                    React.createElement("div", { className: "scanLineOverlay" }),
                    React.createElement(
                        "div",
                        null,
                        detailsStr
                    )
                );
            } else {
                return React.createElement("div", null);
            }
        }
    }]);

    return _class;
}(React.Component);

/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(241);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(4)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./upgradeDetailView.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./upgradeDetailView.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

var escape = __webpack_require__(9);
exports = module.exports = __webpack_require__(3)(false);
// imports


// module
exports.push([module.i, "@font-face {\n  font-family: upgradeDetailViewFont;\n  src: url(" + escape(__webpack_require__(28)) + ");\n}\n.upgradeDetailViewContainer {\n  position: absolute;\n  border: 1px solid black;\n  border-radius: 0.4vw;\n  background: black;\n  padding: 0.8vw;\n  padding-bottom: 0.9vw;\n  transform: translate(-50%, 0%);\n  box-shadow: inset 0 0 0.8vw rgba(149, 211, 182, 0.75);\n  text-align: left;\n  font-family: upgradeDetailViewFont;\n  font-size: 1.1vw;\n  letter-spacing: 0.15vw;\n  line-height: 0.7vw;\n  white-space: nowrap;\n  color: #2eff9e;\n  text-shadow: -0.1vw -0.1vw 0 #009113, 0.1vw 0.1vw 0 #009113, 0 0 0.8vw #00ff40;\n  opacity: 0.9;\n  z-index: -1;\n  pointer-events: none;\n  filter: hue-rotate(283deg);\n}\n", ""]);

// exports


/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.
var React = __webpack_require__(5);
var GameStore = __webpack_require__(0);
var GenericButton = __webpack_require__(29);
var StringStore = __webpack_require__(11);
var LeaderboardStore = __webpack_require__(35);
var Utils = __webpack_require__(2);
var Nimble = __webpack_require__(6);

__webpack_require__(243);

var coachMode = {
    "stampSuggestions": 0,
    "engagement": 1
};

var RandomButtonContent = function (_React$Component) {
    _inherits(RandomButtonContent, _React$Component);

    function RandomButtonContent() {
        _classCallCheck(this, RandomButtonContent);

        return _possibleConstructorReturn(this, (RandomButtonContent.__proto__ || Object.getPrototypeOf(RandomButtonContent)).apply(this, arguments));
    }

    _createClass(RandomButtonContent, [{
        key: "render",
        value: function render() {
            return React.createElement(
                "div",
                { className: "randomButtonContent" },
                this.props.text
            );
        }
    }]);

    return RandomButtonContent;
}(React.Component);

module.exports = function (_React$Component2) {
    _inherits(_class, _React$Component2);

    function _class() {
        _classCallCheck(this, _class);

        var _this2 = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));

        _this2.randomButton = new GenericButton(17, 6, RandomButtonContent, StringStore.UI.COACH_BUTTON, false, undefined, undefined, undefined, _this2.onRandomClick.bind(_this2), "randomButton", undefined, undefined, undefined, true);

        _this2.randomStampSuggestions();

        _this2.mode = coachMode.engagement;
        _this2.engagementSelectionIndex = undefined;

        _this2.maxEngagementColor = { r: 172, g: 255, b: 47 };
        _this2.minEngagementColor = { r: 255, g: 0, b: 0 };

        _this2.engagementOptions = [{
            optionText: "Ask for Stamps",
            tooltip: "Tells your viewers to Stamp and\nlists categories you can suggest\nto your viewers.\nShortcut Key = 1",
            viewerNotification: " wants you to Stamp!",
            streamerNotification: "Sent message asking for Stamps",
            enabled: true,
            activateCallback: undefined,
            hubbleEventName: "coach_stamp"
        }, {
            optionText: "Ask for Boosts",
            tooltip: "Tells viewers to send Boosts.\nShortcut Key = 2",
            viewerNotification: " wants you to send Boosts!",
            streamerNotification: "Sent message asking for Boosts",
            enabled: true,
            activateCallback: undefined,
            hubbleEventName: "coach_vote"
        }, {
            optionText: "Leaderboard Callout",
            tooltip: "Highlights the leaderboard and\nsends message calling out leader.\nShortcut Key = 3",
            viewerNotification: undefined,
            streamerNotification: "Sent message calling out Leader",
            enabled: true,
            activateCallback: function activateCallback() {
                return _this2.highlightLeaderboard();
            },
            hubbleEventName: "coach_leaderboard"
        }];

        GameStore.GameInstance.player.setNumberKeyCallback(function (num) {
            _this2.onKeyPressed(num);
        });
        return _this2;
    }

    _createClass(_class, [{
        key: "highlightLeaderboard",
        value: function highlightLeaderboard() {
            LeaderboardStore.highlighted = true;
            setTimeout(function () {
                LeaderboardStore.highlighted = false;
            }, 2000);
        }
    }, {
        key: "randomStampSuggestions",
        value: function randomStampSuggestions() {
            this.stampSuggestions = this.getStampSuggestions();
        }
    }, {
        key: "onRandomClick",
        value: function onRandomClick(e) {
            e.stopPropagation();

            this.randomStampSuggestions();
        }
    }, {
        key: "getStampSuggestions",
        value: function getStampSuggestions() {

            var suggestions = [];

            var numSuggestions = 4;
            var usedIndexes = [];
            for (var i = 0; i < numSuggestions; ++i) {
                var randomIndex = undefined;
                do {
                    randomIndex = Math.floor(Math.random() * StringStore.stampCategorySuggestionList.length);
                } while (usedIndexes.includes(randomIndex));

                usedIndexes.push(randomIndex);

                suggestions.push(React.createElement(
                    "div",
                    { key: i, className: "coachSuggestion" },
                    StringStore.stampCategorySuggestionList[randomIndex]
                ));
            }

            return React.createElement(
                "div",
                null,
                React.createElement(
                    "div",
                    { className: "coachTitle", style: { pointerEvents: "none" } },
                    StringStore.UI.COACH
                ),
                React.createElement(
                    "div",
                    { className: "instruction" },
                    "Use your voice!"
                ),
                React.createElement(
                    "div",
                    null,
                    suggestions
                )
            );
        }
    }, {
        key: "onKeyPressed",
        value: function onKeyPressed(num) {
            this.onEngagementClick(num - 1);
        }
    }, {
        key: "onEngagementClick",
        value: function onEngagementClick(index) {
            var _this3 = this;

            if (this.engagementSelectionIndex === undefined && this.engagementOptions[index].enabled && !(index === 2 && LeaderboardStore.sortedLeaderboard.length === 0)) {
                this.engagementSelectionIndex = index;
                var engagementOption = this.engagementOptions[index];

                var username = Nimble.twitch.store.streamer.name ? Nimble.twitch.store.streamer.name : "The streamer";
                var notifyText = index === 2 && LeaderboardStore.sortedLeaderboard.length > 0 ? LeaderboardStore.sortedLeaderboard[0].name + " is the top participant" : username + this.engagementOptions[index].viewerNotification;

                if (notifyText !== undefined) {
                    GameStore.gamestateManager.sendCoachNotification(notifyText);

                    this.notificationText = engagementOption.streamerNotification;
                }

                engagementOption.enabled = false;

                var activateCallback = engagementOption.activateCallback;
                if (activateCallback !== undefined) {
                    activateCallback();
                }

                setTimeout(function () {
                    _this3.returnToEngagement();
                }, 5000);

                this.enableOptionHandle = setTimeout(function () {
                    engagementOption.enabled = true;
                }, 10000);

                if (index === 0) {
                    this.randomStampSuggestions();
                    this.mode = coachMode.stampSuggestions;
                }

                GameStore.hubbleManager.sendHubbleEvent(engagementOption.hubbleEventName);
            }
        }
    }, {
        key: "returnToEngagement",
        value: function returnToEngagement() {
            this.mode = coachMode.engagement;
            this.engagementSelectionIndex = undefined;
            this.notificationText = undefined;
        }
    }, {
        key: "onMouseDown",
        value: function onMouseDown() {
            if (GameStore.GameInstance) {
                GameStore.GameInstance.onHUDElement = true;
            }
        }
    }, {
        key: "onMouseLeave",
        value: function onMouseLeave() {
            if (GameStore.GameInstance) {
                GameStore.GameInstance.onHUDElement = false;
            }
        }
    }, {
        key: "onMouseUp",
        value: function onMouseUp() {
            if (GameStore.GameInstance) {
                GameStore.GameInstance.onHUDElement = false;
            }
        }
    }, {
        key: "getEngagementOutput",
        value: function getEngagementOutput() {
            var _this4 = this;

            if (this.engagementSelectionIndex === undefined) {
                var options = [];

                var _loop = function _loop(i) {
                    var classNameOption = !_this4.engagementOptions[i].enabled || i === 2 && LeaderboardStore.sortedLeaderboard.length === 0 ? "option disabled" : "option";

                    options.push(React.createElement(
                        "div",
                        { key: i, className: classNameOption, tooltip: _this4.engagementOptions[i].tooltip, "tooltip-position": "bottom", "tooltip-text-size": "pixel",
                            onMouseDown: _this4.onMouseDown.bind(_this4),
                            onMouseUp: _this4.onMouseUp.bind(_this4),
                            onMouseLeave: _this4.onMouseLeave.bind(_this4),
                            onClick: function onClick() {
                                return _this4.onEngagementClick(i);
                            } },
                        i + 1 + ". " + _this4.engagementOptions[i].optionText
                    ));
                };

                for (var i = 0; i < this.engagementOptions.length; ++i) {
                    _loop(i);
                }

                return options;
            } else if (this.engagementSelectionIndex === 1) {
                return React.createElement(
                    "div",
                    null,
                    React.createElement(
                        "div",
                        { className: "instruction" },
                        "Ask for Boosts!"
                    ),
                    React.createElement(
                        "div",
                        { className: "coachSuggestion" },
                        "REPAIR for Health"
                    ),
                    React.createElement(
                        "div",
                        { className: "coachSuggestion" },
                        "SPEED for Movement"
                    ),
                    React.createElement(
                        "div",
                        { className: "coachSuggestion" },
                        "CANNON for Damage"
                    ),
                    React.createElement(
                        "div",
                        { style: { opacity: 0 } },
                        "_"
                    )
                );
            } else if (this.engagementSelectionIndex === 2) {
                return React.createElement(
                    "div",
                    null,
                    React.createElement(
                        "div",
                        { className: "instruction" },
                        "Use your voice!"
                    ),
                    React.createElement(
                        "div",
                        { className: "message" },
                        "Callout your top viewers on the leaderboard above."
                    ),
                    React.createElement(
                        "div",
                        { style: { opacity: 0 } },
                        "I hate css."
                    )
                );
            } else {
                return React.createElement(
                    "div",
                    null,
                    "Missing output view."
                );
            }
        }
    }, {
        key: "getEngagement",
        value: function getEngagement() {
            var engagementPercent = Math.round(Math.min(99, GameStore.gamestateManager.engagementStats.overviewPercent));
            var engagementColorPos = engagementPercent / 99;
            var engagementColor = {
                r: Utils.Lerp(this.minEngagementColor.r, this.maxEngagementColor.r, engagementColorPos),
                g: Utils.Lerp(this.minEngagementColor.g, this.maxEngagementColor.g, engagementColorPos),
                b: Utils.Lerp(this.minEngagementColor.b, this.maxEngagementColor.b, engagementColorPos)
            };

            var engagementColorStyle = {
                color: "rgb(" + engagementColor.r + ", " + engagementColor.g + ", " + engagementColor.b + ")",
                pointerEvents: this.engagementSelectionIndex === undefined ? "auto" : "none"
            };

            var coachStyle = {
                pointerEvents: this.engagementSelectionIndex === undefined ? "auto" : "none"
            };

            return React.createElement(
                "div",
                { className: "engagementContainer" },
                React.createElement(
                    "div",
                    { className: "coachTitle", style: coachStyle, tooltip: StringStore.TOOLTIP.COACH, "tooltip-text-size": "pixel", "tooltip-position": "bottom" },
                    React.createElement(
                        "div",
                        { className: "engagementLevel", style: coachStyle },
                        React.createElement(
                            "div",
                            null,
                            "COLLABORATION"
                        )
                    ),
                    React.createElement(
                        "div",
                        { className: "percent", style: engagementColorStyle },
                        engagementPercent + "%"
                    )
                ),
                React.createElement(
                    "div",
                    { className: "outputContainer" },
                    this.getEngagementOutput()
                )
            );
        }
    }, {
        key: "getNotification",
        value: function getNotification() {
            var text = GameStore.gamestateManager.engagementStats.isOverloaded ? StringStore.UI.OVERLOADED : this.notificationText;
            return React.createElement(
                "div",
                { className: "notification " + (text !== undefined ? "notificationShow" : "") },
                text
            );
        }
    }, {
        key: "getBody",
        value: function getBody() {
            if (GameStore.gamestateManager.engagementStats.isOverloaded) {
                return React.createElement(
                    "div",
                    null,
                    React.createElement(
                        "div",
                        { className: "coachTitle", style: { pointerEvents: "none" } },
                        StringStore.UI.COACH
                    ),
                    React.createElement(
                        "div",
                        { className: "overloadText" },
                        StringStore.UI.OVERLOADED_STAMPS
                    ),
                    React.createElement("br", null),
                    React.createElement(
                        "div",
                        { className: "overloadText" },
                        StringStore.UI.OVERLOADED_SOLUTION
                    )
                );
            }

            return this.mode === coachMode.engagement ? this.getEngagement() : this.stampSuggestions;
        }
    }, {
        key: "render",
        value: function render() {
            return React.createElement(
                "div",
                { className: "coachViewContainer" },
                this.getNotification(),
                this.getBody()
            );
        }
    }]);

    return _class;
}(React.Component);

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(244);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(4)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./coachView.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./coachView.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(3)(false);
// imports


// module
exports.push([module.i, ".coachViewContainer {\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: -1;\n  color: white;\n  font-size: 15px;\n  line-height: 12px;\n  font-family: buffMeterFont;\n  text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000, 0 1px 0 #000, 0 -1px 0 #000, 1px 0 0 #000, -1px 0 0 #000;\n}\n.coachViewContainer .coachTitle {\n  display: flex;\n  align-items: center;\n  padding-top: 5px;\n  padding-right: 35px;\n  padding-bottom: 8px;\n  background: rgba(0, 0, 0, 0.5);\n}\n.coachViewContainer .overloadText {\n  text-align: left;\n  margin-top: 4px;\n  margin-left: 6px;\n  margin-right: 2px;\n  letter-spacing: -0.17px;\n  box-sizing: border-box;\n}\n.coachViewContainer .notification {\n  position: absolute;\n  left: 0px;\n  top: 0px;\n  width: 99.7%;\n  height: 0px;\n  margin-top: 1px;\n  margin-left: 1px;\n  padding-top: 3px;\n  padding-right: 42px;\n  padding-bottom: 6px;\n  box-sizing: border-box;\n  overflow: hidden;\n  opacity: 0;\n  font-size: 15px;\n  line-height: 14px;\n  background-color: #ffc800;\n  transition: 0.7s ease-in-out;\n  z-index: 2;\n}\n.coachViewContainer .notificationShow {\n  top: 0px;\n  height: 35px;\n  opacity: 100;\n}\n.coachViewContainer .instruction {\n  font-size: 22px;\n  color: #ffcd00;\n  padding-top: 6px;\n  padding-bottom: 6px;\n  padding-left: 6px;\n  box-sizing: border-box;\n}\n.coachViewContainer .engagementContainer {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n}\n.coachViewContainer .engagementContainer .engagementLevel {\n  display: flex;\n  flex-direction: column;\n  padding-left: 6px;\n  box-sizing: border-box;\n  justify-content: center;\n  pointer-events: auto;\n  height: 24px;\n  font-size: 16px;\n  transform: scale(1, 1.3);\n}\n.coachViewContainer .engagementContainer .percent {\n  color: #acff2f;\n  font-size: 16px;\n  margin-left: 6px;\n  transform: scale(1, 1.3);\n}\n.coachViewContainer .engagementContainer .outputContainer {\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: space-around;\n  box-sizing: border-box;\n}\n.coachViewContainer .engagementContainer .outputContainer .option {\n  display: flex;\n  padding-left: 6px;\n  flex: 1;\n  justify-content: left;\n  align-items: center;\n  cursor: pointer;\n  pointer-events: auto;\n  width: 100%;\n  box-sizing: border-box;\n  transition: 0.1s linear;\n  transition-delay: 0s;\n}\n.coachViewContainer .engagementContainer .outputContainer .option:hover {\n  background: rgba(255, 255, 255, 0.5);\n  transition: 0.1s linear;\n  transition-delay: 0.3s;\n}\n.coachViewContainer .engagementContainer .outputContainer .message {\n  font-size: 15px;\n  line-height: 15px;\n}\n.coachViewContainer .engagementContainer .outputContainer .disabled {\n  pointer-events: none;\n  opacity: 0.5;\n}\n.coachViewContainer .engagementContainer .outputContainer .disabled:hover {\n  background: rgba(0, 0, 0, 0);\n}\n.coachViewContainer .coachSuggestion {\n  padding-top: 5px;\n  padding-bottom: 2px;\n  line-height: 11px;\n}\n.coachViewContainer #randomButton {\n  position: relative;\n  top: 4px;\n  left: 24px;\n}\n.coachViewContainer .randomButtonContent {\n  color: white;\n  line-height: 23px;\n  pointer-events: none;\n}\n", ""]);

// exports


/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(246);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(4)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./collapsableWindowView.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./collapsableWindowView.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

var escape = __webpack_require__(9);
exports = module.exports = __webpack_require__(3)(false);
// imports


// module
exports.push([module.i, ".collapsableWindowContainer {\n  position: absolute;\n  margin: 0px;\n  padding: 0px;\n  transition: 0.1s ease-in-out, width 0.5s, height 0.5s;\n  pointer-events: none;\n  transform-origin: top right;\n}\n.collapsableWindowContainer .collapsableWindowBGBaseLayer {\n  transform-origin: top right;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  display: grid;\n  grid-template-columns: auto auto auto;\n  transition: 0.1s ease-in-out, width 0.5s, height 0.5s, clip-path 0.5s;\n  filter: brightness(125%);\n  box-shadow: inset 0 0 6px 1vw rgba(0, 0, 0, 0.25);\n  background-image: linear-gradient(#ff76f8, #00c3ff, #ff76f8);\n  background-size: 400% 400%;\n}\n.collapsableWindowContainer .collapsableWindowBGBaseLayer .collapsableWindowBGBaseLayerInnerGlow {\n  position: absolute;\n  margin-top: 6px;\n  margin-left: 6px;\n  box-shadow: inset 0 0 2vw white, inset 0 0 2vw white, inset 0 0 2vw white;\n  transition: 0.1s ease-in-out, width 0.5s, height 0.5s, clip-path 0.5s;\n}\n.collapsableWindowContainer .collapsableWindowBGLight {\n  filter: drop-shadow(-0.25vw -0.25vw 0.5vw rgba(0, 195, 255, 0.75)) drop-shadow(0.25vw 0.25vw 0.5vw rgba(255, 0, 255, 0.4));\n}\n.collapsableWindowContainer .collapsableWindowBG {\n  transform-origin: top right;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  display: grid;\n  grid-template-columns: auto auto auto;\n  z-index: 3;\n  transition: 0.1s ease-in-out, width 0.5s, height 0.5s;\n}\n.collapsableWindowContainer .collapsableWindowBG .collapsableWindowNotificationIcon {\n  position: absolute;\n  width: 15px;\n  height: 15px;\n  top: -4px;\n  right: -4px;\n  z-index: 4;\n  pointer-events: none;\n  background: magenta;\n  border-radius: 15px;\n  border: 2px solid white;\n  overflow: visible;\n  font-family: Verdana;\n  font-weight: bold;\n  font-size: 13px;\n  line-height: 15px;\n  text-align: center;\n  color: white;\n}\n.collapsableWindowContainer .collapsableWindowBG .collapsableWindowNotificationIconChange {\n  animation: notifIconChange 0.4s ease-in-out;\n  animation-iteration-count: 1;\n  animation-fill-mode: forwards;\n}\n.collapsableWindowContainer .collapsableWindowBG .collapsableWindowNotificationIconOff {\n  animation: notifIconTurnOff 0.4s ease-in-out;\n  animation-iteration-count: 1;\n  animation-fill-mode: forwards;\n}\n.collapsableWindowContainer .collapsableWindowBG .bgTopLeft {\n  width: 6px;\n  height: 6px;\n  transition: 0.1s ease-in-out, width 0.5s, height 0.5s;\n}\n.collapsableWindowContainer .collapsableWindowBG .bgTopCenter {\n  height: 6px;\n  background-repeat: repeat, no-repeat;\n  background-size: 6px 6px, 100% 100%;\n  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.5), 1px 1px 1px rgba(0, 0, 0, 0.5);\n  transition: 0.1s ease-in-out, width 0.5s, height 0.5s;\n}\n.collapsableWindowContainer .collapsableWindowBG .bgTopCenterLight {\n  background-image: url(" + escape(__webpack_require__(8)) + "), linear-gradient(to right, rgba(0, 255, 254, 0.4), rgba(255, 255, 255, 0));\n}\n.collapsableWindowContainer .collapsableWindowBG .bgTopCenterDark {\n  background-image: url(" + escape(__webpack_require__(8)) + ");\n}\n.collapsableWindowContainer .collapsableWindowBG .bgTopRight {\n  width: 7px;\n  height: 6px;\n  transition: 0.1s ease-in-out, width 0.5s, height 0.5s;\n}\n.collapsableWindowContainer .collapsableWindowBG .bgCenterLeft {\n  width: 6px;\n  background-repeat: repeat, no-repeat;\n  background-size: 6px 6px, 100% 100%;\n  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.5), 1px 1px 1px rgba(0, 0, 0, 0.5);\n  transition: 0.1s ease-in-out, width 0.5s, height 0.5s;\n}\n.collapsableWindowContainer .collapsableWindowBG .bgCenterLeftLight {\n  background-image: url(" + escape(__webpack_require__(8)) + "), linear-gradient(to bottom, rgba(0, 255, 254, 0.4), rgba(255, 255, 255, 0));\n}\n.collapsableWindowContainer .collapsableWindowBG .bgCenterLeftDark {\n  background-image: url(" + escape(__webpack_require__(8)) + ");\n}\n.collapsableWindowContainer .collapsableWindowBG .bgCenterCenter {\n  filter: drop-shadow(1px 1px 0 rgba(0, 0, 0, 0.5));\n  background-image: url(" + escape(__webpack_require__(36)) + ");\n  background-repeat: repeat;\n  background-size: 6px 6px;\n  transition: 0.1s ease-in-out, width 0.5s, height 0.5s;\n  overflow: visible;\n}\n.collapsableWindowContainer .collapsableWindowBG .bgCenterRight {\n  width: 7px;\n  background-repeat: repeat, no-repeat;\n  background-size: 6px 6px, 100% 100%;\n  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.5), 1px 1px 1px rgba(0, 0, 0, 0.5);\n  transition: 0.1s ease-in-out, width 0.5s, height 0.5s;\n}\n.collapsableWindowContainer .collapsableWindowBG .bgCenterRightLight {\n  background-image: url(" + escape(__webpack_require__(8)) + "), linear-gradient(rgba(255, 255, 255, 0), rgba(247, 0, 255, 0.65));\n}\n.collapsableWindowContainer .collapsableWindowBG .bgCenterRightDark {\n  background-image: url(" + escape(__webpack_require__(8)) + ");\n}\n.collapsableWindowContainer .collapsableWindowBG .bgBottomLeft {\n  width: 6px;\n  height: 7px;\n  transition: 0.1s ease-in-out, width 0.5s, height 0.5s;\n}\n.collapsableWindowContainer .collapsableWindowBG .bgBottomCenter {\n  height: 7px;\n  background-repeat: repeat, no-repeat;\n  background-size: 6px 6px, 100% 100%;\n  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.5), 1px 1px 1px rgba(0, 0, 0, 0.5);\n  transition: 0.1s ease-in-out, width 0.5s, height 0.5s;\n}\n.collapsableWindowContainer .collapsableWindowBG .bgBottomCenterLight {\n  background-image: url(" + escape(__webpack_require__(8)) + "), linear-gradient(to right, rgba(255, 255, 255, 0), rgba(247, 0, 255, 0.65));\n}\n.collapsableWindowContainer .collapsableWindowBG .bgBottomCenterDark {\n  background-image: url(" + escape(__webpack_require__(8)) + ");\n}\n.collapsableWindowContainer .collapsableWindowBG .bgBottomRight {\n  width: 7px;\n  height: 7px;\n  transition: 0.1s ease-in-out, width 0.5s, height 0.5s;\n}\n.collapsableWindowContainer .icon {\n  position: absolute;\n  width: 100%;\n  opacity: 0;\n}\n.collapsableWindowContainer .iconFadeOn {\n  animation-name: iconFadeOn;\n  animation-duration: 0.5s;\n  animation-iteration-count: 1;\n  animation-timing-function: ease-in-out;\n  animation-fill-mode: forwards;\n}\n.collapsableWindowContainer .iconFadeOnTrans {\n  animation-name: iconFadeOnTrans;\n  animation-duration: 0.5s;\n  animation-iteration-count: 1;\n  animation-timing-function: ease-in-out;\n  animation-fill-mode: forwards;\n}\n.collapsableWindowContainer .closeIcon {\n  position: absolute;\n  z-index: 4;\n  width: 75px;\n  opacity: 0;\n  top: -20px;\n  right: -18px;\n  transform-origin: center bottom;\n  pointer-events: auto;\n}\n.collapsableWindowContainer .closeIcon:hover {\n  filter: drop-shadow(0 0 4px rgba(255, 255, 255, 0.5)) brightness(130%);\n}\n.collapsableWindowContainer .closeIcon:active {\n  filter: brightness(85%);\n  transform: scaleY(0.95);\n}\n.collapsableWindowContainer .minimizeIcon {\n  position: absolute;\n  z-index: 4;\n  width: 61px;\n  opacity: 0;\n  top: -11px;\n  right: 26px;\n  transform-origin: center bottom;\n  pointer-events: auto;\n}\n.collapsableWindowContainer .minimizeIcon:hover {\n  filter: drop-shadow(0 0 4px rgba(255, 255, 255, 0.5)) brightness(130%);\n}\n.collapsableWindowContainer .minimizeIcon:active {\n  filter: brightness(85%);\n  transform: scaleY(0.95);\n}\n.collapsableWindowContainer .maximizeIcon {\n  position: absolute;\n  z-index: 4;\n  width: 73px;\n  opacity: 0;\n  top: -19px;\n  right: 18px;\n  transform-origin: center bottom;\n  pointer-events: auto;\n}\n.collapsableWindowContainer .maximizeIcon:hover {\n  filter: drop-shadow(0 0 4px rgba(255, 255, 255, 0.5)) brightness(130%);\n}\n.collapsableWindowContainer .maximizeIcon:active {\n  filter: brightness(85%);\n  transform: scaleY(0.95);\n}\n.collapsableWindowContainer.collapsed {\n  filter: brightness(120%);\n  pointer-events: auto;\n}\n.collapsableWindowContainer.collapsed.disabled {\n  opacity: 0.9;\n}\n.collapsableWindowContainer.collapsed .collapsableWindowBGBaseLayer {\n  animation-delay: 0s;\n  animation-name: cwBackgroundAnim;\n  animation-duration: 8s;\n  animation-iteration-count: infinite;\n  animation-timing-function: ease;\n}\n.collapsableWindowContainer.collapsed .collapsableWindowBG {\n  animation-delay: 2s;\n  animation-duration: 8s;\n  animation-iteration-count: infinite;\n  animation-timing-function: ease-in-out;\n}\n.collapsableWindowContainer.collapsed:hover {\n  filter: brightness(150%);\n}\n.collapsableWindowContainer.expanded {\n  animation: cwBackgroundAnim 8s ease infinite;\n}\n@keyframes iconFadeOnTrans {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 0.6;\n  }\n}\n@keyframes iconFadeOn {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n.cwBaseCollapsedBaseAnim {\n  animation-delay: 0s;\n  animation-name: cwBackgroundAnim;\n  animation-duration: 8s;\n  animation-iteration-count: infinite;\n  animation-timing-function: ease;\n}\n.cwBaseCollapsedAnim {\n  animation-delay: 2s;\n  animation-duration: 8s;\n  animation-iteration-count: infinite;\n  animation-timing-function: ease-in-out;\n}\n.cwBaseExpandAnim {\n  animation: cwBackgroundAnim 8s ease infinite;\n}\n@keyframes cwCollapsedIdleAnim {\n  1% {\n    transform: translate(0, -0.5vw) scale(1.1);\n  }\n  2% {\n    transform: translate(0, 0) scale(1.1);\n  }\n  3% {\n    transform: translate(0, -0.25vw);\n  }\n  4% {\n    transform: translate(0vw);\n  }\n  49% {\n    transform: rotate(0deg);\n  }\n  50% {\n    transform: rotate(8deg);\n  }\n  51% {\n    transform: rotate(-4deg);\n  }\n  52% {\n    transform: rotate(2deg);\n  }\n  53% {\n    transform: rotate(-1deg);\n  }\n  54% {\n    transform: rotate(0deg);\n  }\n}\n@keyframes cwBackgroundAnim {\n  0% {\n    background-position: 0% 100%;\n  }\n  25% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 0% 0%;\n  }\n  75% {\n    background-position: 0% 50%;\n  }\n  100% {\n    background-position: 0% 100%;\n  }\n}\n@keyframes notifIconTurnOff {\n  0% {\n    transform: scale(1) translateZ(0);\n  }\n  25% {\n    transform: scale(1.3) translateZ(0);\n  }\n  100% {\n    transform: scale(0) translateZ(0);\n  }\n}\n@keyframes notifIconChange {\n  0% {\n    transform: scale(1) translateZ(0);\n    filter: brightness(100%);\n  }\n  75% {\n    transform: scale(1.5) translateZ(0);\n    filter: brightness(300%);\n  }\n  100% {\n    transform: scale(1) translateZ(0);\n    filter: brightness(100%);\n  }\n}\n", ""]);

// exports


/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(248);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(4)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./webcamView.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./webcamView.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

var escape = __webpack_require__(9);
exports = module.exports = __webpack_require__(3)(false);
// imports


// module
exports.push([module.i, "@font-face {\n  font-family: webcamFont;\n  src: url(" + escape(__webpack_require__(15)) + ");\n}\n.webcamViewContainer {\n  position: absolute;\n  top: 33.2vw;\n  left: 0.2vw;\n  width: 18vw;\n  height: 13.5vw;\n  border: 0.4vw dashed white;\n  pointer-events: none;\n  opacity: 0.55;\n  animation-delay: 5s;\n  animation-duration: 2s;\n  animation-iteration-count: 1;\n  animation-fill-mode: forwards;\n  filter: drop-shadow(1px 1px 0 rgba(0, 0, 0, 0.5)) drop-shadow(-1px -1px 0 rgba(0, 0, 0, 0.5)) drop-shadow(-1px 0px 0 rgba(0, 0, 0, 0.5)) drop-shadow(1px 0px 0 rgba(0, 0, 0, 0.5)) drop-shadow(0px -1px 0 rgba(0, 0, 0, 0.5)) drop-shadow(0px 1px 0 rgba(0, 0, 0, 0.5)) drop-shadow(0px 1px 2vw #000000);\n}\n.webcamViewContainer .webCamText {\n  position: relative;\n  top: -1.8vw;\n  font-size: 0.85vw;\n  font-family: webcamFont;\n}\n@keyframes webcamViewContainerAnim {\n  0% {\n    opacity: 0.55;\n  }\n  100% {\n    opacity: 0;\n  }\n}\n", ""]);

// exports


/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.
var React = __webpack_require__(5);
var GameStore = __webpack_require__(0);
var CollapsableWindow = __webpack_require__(30);
var DrawCollapsableWindow = __webpack_require__(31);
var GenericButton = __webpack_require__(29);
var DrawGenericButton = __webpack_require__(37);
var StringStore = __webpack_require__(11);

__webpack_require__(252);

var DrawMessage = function (_React$Component) {
    _inherits(DrawMessage, _React$Component);

    function DrawMessage() {
        _classCallCheck(this, DrawMessage);

        return _possibleConstructorReturn(this, (DrawMessage.__proto__ || Object.getPrototypeOf(DrawMessage)).apply(this, arguments));
    }

    _createClass(DrawMessage, [{
        key: "render",
        value: function render() {
            return React.createElement(
                "div",
                { className: "tutorialProgressButtonText" },
                this.props.text
            );
        }
    }]);

    return DrawMessage;
}(React.Component);

var DrawMessageContent = function (_React$Component2) {
    _inherits(DrawMessageContent, _React$Component2);

    function DrawMessageContent() {
        _classCallCheck(this, DrawMessageContent);

        var _this2 = _possibleConstructorReturn(this, (DrawMessageContent.__proto__ || Object.getPrototypeOf(DrawMessageContent)).call(this));

        _this2.gb = new GenericButton(12, 6, DrawMessage, StringStore.UI.TUTORIAL_NEXT_BTN_TEXT, false, undefined, undefined, undefined, _this2.onProgressClick.bind(_this2), "tutorialProgressButton");
        return _this2;
    }

    _createClass(DrawMessageContent, [{
        key: "onProgressClick",
        value: function onProgressClick(event) {
            GameStore.GameInstance.Tutorial.progressClick();
            this.onProgressFunction(event);
        }
    }, {
        key: "renderBottomOptions",
        value: function renderBottomOptions(disableProgressButton, onProgressFunction) {
            var button = undefined;
            var skipButton = undefined;

            this.onProgressFunction = onProgressFunction;

            if (GameStore.GameInstance.Tutorial.showProgressButton && !disableProgressButton) {
                button = React.createElement(DrawGenericButton, { gb: this.gb });

                skipButton = GameStore.GameInstance.Tutorial.showSkipButton ? React.createElement(
                    "label",
                    { className: "tutorialSkipContainer" },
                    React.createElement(
                        "div",
                        { className: "tutorialSkipText" },
                        StringStore.UI.TUTORIAL_SKIP_TEXT
                    ),
                    React.createElement("input", {
                        type: "checkbox",
                        name: "skipTutorial",
                        onChange: function onChange(event) {
                            GameStore.GameInstance.Tutorial.checkboxChange(event);
                        } }),
                    React.createElement("span", { className: "tutorialCheckmark" })
                ) : React.createElement("label", { className: "tutorialSkipContainer" });
            }

            return React.createElement(
                "div",
                { className: "tutorialBottomOptionsCotainer" },
                skipButton,
                button
            );
        }
    }, {
        key: "renderImage",
        value: function renderImage(index) {
            if (GameStore.GameInstance.Tutorial.tutorialMessage[index].imgSrc !== undefined) {
                var src = GameStore.GameInstance.Tutorial.tutorialMessage[index].imgSrc;

                return React.createElement(
                    "div",
                    { className: "tutorialImgContainer" },
                    React.createElement("img", { src: src, className: "tutorialImg" })
                );
            }
        }
    }, {
        key: "render",
        value: function render() {
            var index = GameStore.GameInstance.Tutorial.getMessageIndex();

            if (GameStore.GameInstance.Tutorial.displayMessages === undefined) {
                var message = GameStore.GameInstance.Tutorial.tutorialMessage[index].message;
                GameStore.GameInstance.Tutorial.beginTypeOutMessage(message);
            }

            var i = 0;
            var messageDisplay = [];
            GameStore.GameInstance.Tutorial.displayMessages.forEach(function (msg) {
                messageDisplay.push(React.createElement(
                    "div",
                    { key: i++ },
                    msg,
                    React.createElement("br", null)
                ));
            });

            var disableProgressButton = GameStore.GameInstance.Tutorial.tutorialMessage[index].disableProgressButton;
            var noFunction = function noFunction() {};
            var onProgressFunction = GameStore.GameInstance.Tutorial.tutorialMessage[index].onProgressFunction ? GameStore.GameInstance.Tutorial.tutorialMessage[index].onProgressFunction : noFunction;

            return React.createElement(
                "div",
                { className: "tutorialMessageContainer" },
                this.renderImage(index),
                messageDisplay,
                this.renderBottomOptions(disableProgressButton, onProgressFunction)
            );
        }
    }]);

    return DrawMessageContent;
}(React.Component);

var DrawTutorialMessage = function (_React$Component3) {
    _inherits(DrawTutorialMessage, _React$Component3);

    function DrawTutorialMessage() {
        _classCallCheck(this, DrawTutorialMessage);

        var _this3 = _possibleConstructorReturn(this, (DrawTutorialMessage.__proto__ || Object.getPrototypeOf(DrawTutorialMessage)).call(this));

        _this3.cw = new CollapsableWindow(30, 25, 95, 40, DrawMessageContent, undefined, undefined, undefined, undefined, true, false, true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, false);
        return _this3;
    }

    _createClass(DrawTutorialMessage, [{
        key: "render",
        value: function render() {
            var index = GameStore.GameInstance.Tutorial.getMessageIndex();
            var messagePos = GameStore.GameInstance.Tutorial.tutorialMessage[index].messagePos;
            var messageDimensions = GameStore.GameInstance.Tutorial.tutorialMessage[index].size;
            // let messageSize 

            if (messagePos.x && messagePos.y) {
                this.cw.x = messagePos.x;
                this.cw.y = messagePos.y;
            }

            if (messageDimensions) {
                this.cw.expandedNumCellsWide = messageDimensions.x;
                this.cw.expandedNumCellsTall = messageDimensions.y;
                this.cw.setWindowSize();
            }

            return React.createElement(DrawCollapsableWindow, { cw: this.cw });
        }
    }]);

    return DrawTutorialMessage;
}(React.Component);

var DrawTutorialBG = function (_React$Component4) {
    _inherits(DrawTutorialBG, _React$Component4);

    function DrawTutorialBG() {
        _classCallCheck(this, DrawTutorialBG);

        return _possibleConstructorReturn(this, (DrawTutorialBG.__proto__ || Object.getPrototypeOf(DrawTutorialBG)).apply(this, arguments));
    }

    _createClass(DrawTutorialBG, [{
        key: "render",
        value: function render() {
            if (GameStore.GameInstance.Tutorial.isEnabled()) {
                var index = GameStore.GameInstance.Tutorial.getMessageIndex();
                var noFunction = function noFunction() {};
                var progressClick = function progressClick() {
                    GameStore.GameInstance.Tutorial.progressClick();
                };
                var clickThroughFunction = GameStore.GameInstance.Tutorial.tutorialMessage[index].clickThroughFunction ? GameStore.GameInstance.Tutorial.tutorialMessage[index].clickThroughFunction : noFunction;
                var progressOnClick = GameStore.GameInstance.Tutorial.tutorialMessage[index].clickThroughFunction !== undefined ? progressClick : noFunction;
                var pointerEvents = GameStore.GameInstance.Tutorial.tutorialMessage[index].pointerEvents;

                var topLeftCoord = {
                    x: GameStore.GameInstance.Tutorial.topLeftCoord.x,
                    y: GameStore.GameInstance.Tutorial.topLeftCoord.y
                };

                var bottomRightCoord = {
                    x: GameStore.GameInstance.Tutorial.bottomRightCoord.x,
                    y: GameStore.GameInstance.Tutorial.bottomRightCoord.y
                };

                var styleTop = {
                    flex: topLeftCoord.y
                };

                var styleMiddleRow = {
                    flex: bottomRightCoord.y - topLeftCoord.y
                };

                var styleLeft = {
                    flex: topLeftCoord.x
                };

                var styleCenter = {
                    flex: bottomRightCoord.x - topLeftCoord.x,
                    pointerEvents: pointerEvents
                };

                var styleRight = {
                    flex: 100 - bottomRightCoord.x
                };

                var styleBottom = {
                    flex: 100 - bottomRightCoord.y
                };

                return React.createElement(
                    "div",
                    { className: "tutorialContainerBG" },
                    React.createElement("div", { style: styleTop, className: "tutorialContainerBGTopRow" }),
                    React.createElement(
                        "div",
                        { style: styleMiddleRow, className: "tutorialContainerBGMiddleRow" },
                        React.createElement("div", { style: styleLeft, className: "tutorialContainerBGLeft" }),
                        React.createElement("div", { style: styleCenter, className: "tutorialContainerBGCenter", onClick: function onClick(event) {
                                progressOnClick();
                                clickThroughFunction(event);
                            } }),
                        React.createElement("div", { style: styleRight, className: "tutorialContainerBGRight" })
                    ),
                    React.createElement("div", { style: styleBottom, className: "tutorialContainerBGBottomRow" })
                );
            } else {
                return React.createElement("div", { className: "tutorialContainerOff" });
            }
        }
    }]);

    return DrawTutorialBG;
}(React.Component);

module.exports = function (_React$Component5) {
    _inherits(DrawTutorial, _React$Component5);

    function DrawTutorial() {
        _classCallCheck(this, DrawTutorial);

        return _possibleConstructorReturn(this, (DrawTutorial.__proto__ || Object.getPrototypeOf(DrawTutorial)).apply(this, arguments));
    }

    _createClass(DrawTutorial, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            if (GameStore.GameInstance.Tutorial.isEnabled()) {
                GameStore.GameInstance.Tutorial.disableStampsToLife();
                GameStore.GameInstance.Tutorial.disableStampsCensor();
                GameStore.GameInstance.Tutorial.disableStampsLiking();
                GameStore.GameInstance.Tutorial.enableShield();
            }
        }
    }, {
        key: "render",
        value: function render() {
            if (GameStore.GameInstance.Tutorial.isEnabled()) {
                return React.createElement(
                    "div",
                    { className: "tutorialContainer" },
                    React.createElement(DrawTutorialMessage, null),
                    React.createElement(DrawTutorialBG, null)
                );
            } else {
                return React.createElement("div", null);
            }
        }
    }]);

    return DrawTutorial;
}(React.Component);

/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(251);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(4)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./genericButtonView.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./genericButtonView.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

var escape = __webpack_require__(9);
exports = module.exports = __webpack_require__(3)(false);
// imports


// module
exports.push([module.i, ".genericButtonContainer {\n  position: relative;\n  margin: 0px;\n  padding: 0px;\n  pointer-events: auto;\n  transform-origin: top right;\n  filter: brightness(120%);\n}\n.genericButtonContainer .genericButtonBGBaseLayer {\n  transform-origin: top right;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  display: grid;\n  grid-template-columns: auto auto auto;\n  transition: 0.1s ease-in-out, width 0.5s, height 0.5s, clip-path 0.5s;\n  filter: brightness(125%);\n  box-shadow: inset 0 0 6px 1vw rgba(0, 0, 0, 0.25);\n  background-image: linear-gradient(#ff76f8, #00c3ff, #ff76f8);\n  background-size: 400% 400%;\n}\n.genericButtonContainer .genericButtonBGBaseLayer .genericButtonBGBaseLayerInnerGlow {\n  position: absolute;\n  margin-top: 6px;\n  margin-left: 6px;\n  box-shadow: inset 0 0 2vw white, inset 0 0 2vw white, inset 0 0 2vw white;\n  transition: 0.1s ease-in-out, width 0.5s, height 0.5s, clip-path 0.5s;\n}\n.genericButtonContainer .genericButtonBGLight {\n  filter: drop-shadow(-0.25vw -0.25vw 0.5vw rgba(0, 195, 255, 0.75)) drop-shadow(0.25vw 0.25vw 0.5vw rgba(255, 0, 255, 0.4));\n}\n.genericButtonContainer .genericButtonBG {\n  transform-origin: top right;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  display: grid;\n  grid-template-columns: auto auto auto;\n  z-index: 3;\n  transition: 0.1s ease-in-out, width 0.5s, height 0.5s;\n}\n.genericButtonContainer .genericButtonBG .genericButtonNotificationIcon {\n  position: absolute;\n  width: 15px;\n  height: 15px;\n  top: -4px;\n  right: -4px;\n  z-index: 4;\n  pointer-events: none;\n  background: magenta;\n  border-radius: 15px;\n  border: 2px solid white;\n  overflow: visible;\n  font-family: Verdana;\n  font-weight: bold;\n  font-size: 13px;\n  line-height: 15px;\n  text-align: center;\n  color: white;\n}\n.genericButtonContainer .genericButtonBG .genericButtonNotificationIconChange {\n  animation: notifIconChange 0.4s ease-in-out;\n  animation-iteration-count: 1;\n  animation-fill-mode: forwards;\n}\n.genericButtonContainer .genericButtonBG .genericButtonNotificationIconOff {\n  animation: notifIconTurnOff 0.4s ease-in-out;\n  animation-iteration-count: 1;\n  animation-fill-mode: forwards;\n}\n.genericButtonContainer .genericButtonBG .bgTopLeft {\n  width: 6px;\n  height: 6px;\n  transition: 0.1s ease-in-out, width 0.5s, height 0.5s;\n}\n.genericButtonContainer .genericButtonBG .bgTopCenter {\n  height: 6px;\n  background-repeat: repeat, no-repeat;\n  background-size: 6px 6px, 100% 100%;\n  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.5), 1px 1px 1px rgba(0, 0, 0, 0.5);\n  transition: 0.1s ease-in-out, width 0.5s, height 0.5s;\n}\n.genericButtonContainer .genericButtonBG .bgTopCenterLight {\n  background-image: url(" + escape(__webpack_require__(8)) + "), linear-gradient(to right, rgba(0, 255, 254, 0.4), rgba(255, 255, 255, 0));\n}\n.genericButtonContainer .genericButtonBG .bgTopCenterDark {\n  background-image: url(" + escape(__webpack_require__(8)) + ");\n}\n.genericButtonContainer .genericButtonBG .bgTopRight {\n  width: 7px;\n  height: 6px;\n  transition: 0.1s ease-in-out, width 0.5s, height 0.5s;\n}\n.genericButtonContainer .genericButtonBG .bgCenterLeft {\n  width: 6px;\n  background-repeat: repeat, no-repeat;\n  background-size: 6px 6px, 100% 100%;\n  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.5), 1px 1px 1px rgba(0, 0, 0, 0.5);\n  transition: 0.1s ease-in-out, width 0.5s, height 0.5s;\n}\n.genericButtonContainer .genericButtonBG .bgCenterLeftLight {\n  background-image: url(" + escape(__webpack_require__(8)) + "), linear-gradient(to bottom, rgba(0, 255, 254, 0.4), rgba(255, 255, 255, 0));\n}\n.genericButtonContainer .genericButtonBG .bgCenterLeftDark {\n  background-image: url(" + escape(__webpack_require__(8)) + ");\n}\n.genericButtonContainer .genericButtonBG .bgCenterCenter {\n  filter: drop-shadow(1px 1px 0 rgba(0, 0, 0, 0.5));\n  background-image: url(" + escape(__webpack_require__(36)) + ");\n  background-repeat: repeat;\n  background-size: 6px 6px;\n  transition: 0.1s ease-in-out, width 0.5s, height 0.5s;\n}\n.genericButtonContainer .genericButtonBG .bgCenterRight {\n  width: 7px;\n  background-repeat: repeat, no-repeat;\n  background-size: 6px 6px, 100% 100%;\n  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.5), 1px 1px 1px rgba(0, 0, 0, 0.5);\n  transition: 0.1s ease-in-out, width 0.5s, height 0.5s;\n}\n.genericButtonContainer .genericButtonBG .bgCenterRightLight {\n  background-image: url(" + escape(__webpack_require__(8)) + "), linear-gradient(rgba(255, 255, 255, 0), rgba(247, 0, 255, 0.65));\n}\n.genericButtonContainer .genericButtonBG .bgCenterRightDark {\n  background-image: url(" + escape(__webpack_require__(8)) + ");\n}\n.genericButtonContainer .genericButtonBG .bgBottomLeft {\n  width: 6px;\n  height: 7px;\n  transition: 0.1s ease-in-out, width 0.5s, height 0.5s;\n}\n.genericButtonContainer .genericButtonBG .bgBottomCenter {\n  height: 7px;\n  background-repeat: repeat, no-repeat;\n  background-size: 6px 6px, 100% 100%;\n  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.5), 1px 1px 1px rgba(0, 0, 0, 0.5);\n  transition: 0.1s ease-in-out, width 0.5s, height 0.5s;\n}\n.genericButtonContainer .genericButtonBG .bgBottomCenterLight {\n  background-image: url(" + escape(__webpack_require__(8)) + "), linear-gradient(to right, rgba(255, 255, 255, 0), rgba(247, 0, 255, 0.65));\n}\n.genericButtonContainer .genericButtonBG .bgBottomCenterDark {\n  background-image: url(" + escape(__webpack_require__(8)) + ");\n}\n.genericButtonContainer .genericButtonBG .bgBottomRight {\n  width: 7px;\n  height: 7px;\n  transition: 0.1s ease-in-out, width 0.5s, height 0.5s;\n}\n.genericButtonContainer .icon {\n  position: absolute;\n  width: 100%;\n  opacity: 0;\n}\n.genericButtonContainer .iconFadeOn {\n  animation-name: iconFadeOn;\n  animation-duration: 0.5s;\n  animation-iteration-count: 1;\n  animation-timing-function: ease-in-out;\n  animation-fill-mode: forwards;\n}\n.genericButtonContainer.disabled {\n  opacity: 0.5;\n}\n.genericButtonContainer.disabled:hover {\n  opacity: 0.5;\n  filter: brightness(120%);\n}\n.genericButtonContainer:hover {\n  filter: brightness(150%);\n}\n.genericButtonContainer:active {\n  filter: brightness(100%);\n}\n@keyframes iconFadeOn {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n@keyframes cwBackgroundAnim {\n  0% {\n    background-position: 0% 100%;\n  }\n  25% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 0% 0%;\n  }\n  75% {\n    background-position: 0% 50%;\n  }\n  100% {\n    background-position: 0% 100%;\n  }\n}\n@keyframes notifIconTurnOff {\n  0% {\n    transform: scale(1) translateZ(0);\n  }\n  25% {\n    transform: scale(1.3) translateZ(0);\n  }\n  100% {\n    transform: scale(0) translateZ(0);\n  }\n}\n@keyframes notifIconChange {\n  0% {\n    transform: scale(1) translateZ(0);\n    filter: brightness(100%);\n  }\n  75% {\n    transform: scale(1.5) translateZ(0);\n    filter: brightness(300%);\n  }\n  100% {\n    transform: scale(1) translateZ(0);\n    filter: brightness(100%);\n  }\n}\n", ""]);

// exports


/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(253);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(4)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./tutorialView.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./tutorialView.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

var escape = __webpack_require__(9);
exports = module.exports = __webpack_require__(3)(false);
// imports


// module
exports.push([module.i, "@font-face {\n  font-family: tutorialFont;\n  src: url(" + escape(__webpack_require__(15)) + ");\n}\n.tutorialContainer {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  z-index: 10;\n  pointer-events: none;\n}\n.tutorialContainer .tutorialMessageContainer {\n  display: inline-block;\n  box-sizing: border-box;\n  height: 100%;\n  width: 100%;\n  pointer-events: none;\n  padding: 12px;\n  background: rgba(255, 255, 255, 0.15);\n  color: white;\n  font-family: tutorialFont;\n  font-size: 20px;\n  text-align: left;\n  text-shadow: -1px -1px 0 rgba(0, 0, 0, 0.5), 1px -1px 0 rgba(0, 0, 0, 0.5), -1px 1px 0 rgba(0, 0, 0, 0.5), 1px 1px 0 rgba(0, 0, 0, 0.5), 0 1px 0 rgba(0, 0, 0, 0.5), 0 -1px 0 rgba(0, 0, 0, 0.5), 1px 0 0 rgba(0, 0, 0, 0.5), -1px 0 0 rgba(0, 0, 0, 0.5), 0px 0px 12px rgba(0, 0, 0, 0.75);\n  z-index: 200;\n  transition: 0.5s ease-in-out;\n}\n.tutorialContainer .tutorialMessageContainer .tutorialImgContainer {\n  width: 100%;\n  text-align: center;\n}\n.tutorialContainer .tutorialMessageContainer .tutorialImgContainer .tutorialImg {\n  position: relative;\n  top: -5px;\n  height: 100px;\n  opacity: 0;\n  filter: drop-shadow(1px 1px 12px black);\n  animation-name: tutorialImgAnim;\n  animation-delay: 1s;\n  animation-duration: 1s;\n  animation-timing-function: ease-out;\n  animation-iteration-count: 1;\n  animation-fill-mode: forwards;\n}\n@keyframes tutorialImgAnim {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n.tutorialContainer .tutorialMessageContainer .tutorialBottomOptionsCotainer {\n  position: absolute;\n  bottom: 18px;\n  height: 30px;\n  width: 100%;\n  margin-top: 10px;\n  transition: 0.5s ease-in-out;\n  /* Hide the browser's default checkbox */\n  /* Create a custom checkbox */\n  /* On mouse-over, add a grey background color */\n  /* When the checkbox is checked, add a blue background */\n  /* Create the checkmark/indicator (hidden when not checked) */\n  /* Show the checkmark when checked */\n  /* Style the checkmark/indicator */\n}\n.tutorialContainer .tutorialMessageContainer .tutorialBottomOptionsCotainer #tutorialProgressButton {\n  position: relative;\n  top: -106%;\n  left: 79.2%;\n  transform-origin: center center;\n  animation: tutorialButtonTurnOn 0.4s ease-in-out;\n  animation-delay: 0s;\n  animation-fill-mode: forwards;\n}\n.tutorialContainer .tutorialMessageContainer .tutorialBottomOptionsCotainer .tutorialProgressButtonText {\n  font-family: tutorialFont;\n  font-weight: bold;\n  font-size: 22px;\n  text-align: center;\n  line-height: 22px;\n}\n.tutorialContainer .tutorialMessageContainer .tutorialBottomOptionsCotainer .tutorialProgressButton:hover {\n  filter: brightness(125%);\n  background: linear-gradient(#f89fb8, #cf68bb);\n}\n.tutorialContainer .tutorialMessageContainer .tutorialBottomOptionsCotainer .tutorialProgressButton:active {\n  background: linear-gradient(#b0489b, #e984a0);\n  transition: 0.05s ease-in-out;\n}\n.tutorialContainer .tutorialMessageContainer .tutorialBottomOptionsCotainer .tutorialProgressButton:focus {\n  outline: 0;\n}\n.tutorialContainer .tutorialMessageContainer .tutorialBottomOptionsCotainer .tutorialSkipContainer {\n  position: relative;\n  pointer-events: auto;\n  display: block;\n  left: 0%;\n  top: 15%;\n  height: 100%;\n  width: 110px;\n  font-size: 12px;\n  cursor: pointer;\n  user-select: none;\n  transition: 0.5s ease-in-out;\n}\n.tutorialContainer .tutorialMessageContainer .tutorialBottomOptionsCotainer .tutorialSkipContainer .tutorialSkipText {\n  position: relative;\n  font-size: 14px;\n  right: -23%;\n  top: 24%;\n}\n.tutorialContainer .tutorialMessageContainer .tutorialBottomOptionsCotainer .tutorialSkipContainer input {\n  position: absolute;\n  opacity: 0;\n  cursor: pointer;\n}\n.tutorialContainer .tutorialMessageContainer .tutorialBottomOptionsCotainer .tutorialCheckmark {\n  position: absolute;\n  top: 6px;\n  left: 0;\n  height: 18px;\n  width: 18px;\n  background-color: #eee;\n}\n.tutorialContainer .tutorialMessageContainer .tutorialBottomOptionsCotainer .tutorialSkipContainer:hover input ~ .tutorialCheckmark {\n  background-color: #ccc;\n}\n.tutorialContainer .tutorialMessageContainer .tutorialBottomOptionsCotainer .tutorialSkipContainer input:checked ~ .tutorialCheckmark {\n  background-color: #cf68bb;\n}\n.tutorialContainer .tutorialMessageContainer .tutorialBottomOptionsCotainer .tutorialCheckmark:after {\n  content: \"\";\n  position: absolute;\n  display: none;\n}\n.tutorialContainer .tutorialMessageContainer .tutorialBottomOptionsCotainer .tutorialSkipContainer input:checked ~ .tutorialCheckmark:after {\n  display: block;\n}\n.tutorialContainer .tutorialMessageContainer .tutorialBottomOptionsCotainer .tutorialSkipContainer .tutorialCheckmark:after {\n  left: 27%;\n  top: 8%;\n  width: 4px;\n  height: 10px;\n  border: solid white;\n  border-width: 0 3px 3px 0;\n  transform: rotate(45deg);\n}\n.tutorialContainer .tutorialContainerOff {\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0);\n  pointer-events: none;\n  animation: tutorialBGTurnOff 0.5s ease-in-out;\n  animation-fill-mode: forwards;\n}\n.tutorialContainer .tutorialButton {\n  position: absolute;\n  top: 7.6%;\n  right: 2.5%;\n  height: 18px;\n  pointer-events: auto;\n  z-index: -1;\n  filter: drop-shadow(-3px -3px 6px rgba(0, 195, 255, 0.75)) drop-shadow(3px 3px 6px rgba(255, 0, 255, 0.4));\n  animation-name: tutorialButtonAppearAnim;\n  animation-duration: 1s;\n  animation-iteration-count: 1;\n}\n@keyframes tutorialButtonAppearAnim {\n  0% {\n    opacity: 0.3;\n  }\n  10% {\n    filter: drop-shadow(-3px -3px 6px rgba(0, 195, 255, 0.75)) drop-shadow(3px 3px 6px rgba(255, 0, 255, 0.4)) brightness(500%);\n    transform: scale(1.5);\n  }\n  40% {\n    transform: scale(1);\n  }\n  100% {\n    filter: drop-shadow(-3px -3px 6px rgba(0, 195, 255, 0.75)) drop-shadow(3px 3px 6px rgba(255, 0, 255, 0.4)) brightness(100%);\n    opacity: 1;\n  }\n}\n.tutorialContainer .tutorialContainerBG {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 50;\n}\n.tutorialContainer .tutorialContainerBG .tutorialContainerBGTopRow {\n  background: rgba(0, 0, 0, 0);\n  width: 100%;\n  transition: 0.6s ease-in-out;\n  pointer-events: none;\n}\n.tutorialContainer .tutorialContainerBG .tutorialContainerBGMiddleRow {\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  transition: 0.6s ease-in-out;\n  pointer-events: none;\n}\n.tutorialContainer .tutorialContainerBG .tutorialContainerBGMiddleRow .tutorialContainerBGLeft {\n  background: rgba(0, 0, 0, 0);\n  height: 100%;\n  transition: 0.6s ease-in-out;\n  pointer-events: none;\n}\n.tutorialContainer .tutorialContainerBG .tutorialContainerBGMiddleRow .tutorialContainerBGCenter {\n  background: transparent;\n  box-shadow: 0 0 0 0.3vw #ffffff;\n  box-sizing: border-box;\n  z-index: 150;\n  height: 100%;\n  transition: 0.6s ease-in-out;\n  animation-name: tutorialContainerBGCenterAnim;\n  animation-duration: 1s;\n  animation-iteration-count: infinite;\n}\n@keyframes tutorialContainerBGCenterAnim {\n  0% {\n    box-shadow: 0 0 0 0.3vw #ffffff;\n  }\n  20% {\n    box-shadow: 0 0 0 0.3vw rgba(255, 255, 255, 0);\n  }\n  100% {\n    box-shadow: 0 0 0 0.3vw #ffffff;\n  }\n}\n.tutorialContainer .tutorialContainerBG .tutorialContainerBGMiddleRow .tutorialContainerBGRight {\n  background: rgba(0, 0, 0, 0);\n  height: 100%;\n  transition: 0.6s ease-in-out;\n  pointer-events: none;\n}\n.tutorialContainer .tutorialContainerBG .tutorialContainerBGBottomRow {\n  background: rgba(0, 0, 0, 0);\n  width: 100%;\n  transition: 0.6s ease-in-out;\n  pointer-events: none;\n}\n@keyframes tutorialButtonTurnOn {\n  0% {\n    opacity: 0;\n    transform: scale(0);\n  }\n  75% {\n    transform: scale(1.2);\n  }\n  100% {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n@keyframes tutorialBGTurnOff {\n  0% {\n    opacity: 1;\n  }\n  100% {\n    opacity: 0;\n  }\n}\n", ""]);

// exports


/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(255);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(4)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./optionsMenuView.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./optionsMenuView.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

var escape = __webpack_require__(9);
exports = module.exports = __webpack_require__(3)(false);
// imports


// module
exports.push([module.i, "#onOffButton {\n  position: relative;\n  float: right;\n  width: 27vw;\n  transform-origin: top left;\n  cursor: pointer;\n}\n.optionsButtonContent {\n  height: 24px;\n  text-align: center;\n  font-size: 11px;\n  letter-spacing: 1px;\n  line-height: 24px;\n  font-family: vox;\n  color: white;\n  text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000, 0 1px 0 #000, 0 -1px 0 #000, 1px 0 0 #000, -1px 0 0 #000;\n  pointer-events: none;\n}\n.optionsMenuContentLight {\n  color: #4f4dc0;\n  background: rgba(255, 255, 255, 0.4);\n  text-decoration: none;\n}\n.optionsMenuContentLight a {\n  color: #4f4dc0;\n  text-decoration: none;\n}\n.optionsMenuContentLight a:active {\n  color: #23225f;\n  text-decoration: none;\n}\n.optionsMenuContentLight a:visited {\n  color: #4f4dc0;\n  text-decoration: none;\n}\n.optionsMenuContentLight a:hover {\n  color: #7675d6;\n  text-decoration: none;\n}\n.optionsMenuContentDark {\n  color: rgba(255, 255, 255, 0.7);\n  background: rgba(0, 0, 0, 0.4);\n}\n.feedbackReturnButtonContainer {\n  margin: auto;\n  margin-top: 49px;\n  width: 82px;\n  box-sizing: border-box;\n}\n.feedbackReturnButtonContent {\n  height: 24px;\n  padding-left: 2px;\n  font-size: 11px;\n  letter-spacing: 1px;\n  line-height: 24px;\n  font-family: vox;\n  color: white;\n  text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000, 0 1px 0 #000, 0 -1px 0 #000, 1px 0 0 #000, -1px 0 0 #000;\n  pointer-events: none;\n}\ndiv.stars {\n  width: 418px;\n  float: left;\n  text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.25), -1px 1px 1px rgba(0, 0, 0, 0.25), 1px -1px 1px rgba(0, 0, 0, 0.25), -1px -1px 1px rgba(0, 0, 0, 0.25), -1px 0px 1px rgba(0, 0, 0, 0.25), 1px 0px 1px rgba(0, 0, 0, 0.25), 0px -1px 1px rgba(0, 0, 0, 0.25), 0px 1px 1px rgba(0, 0, 0, 0.25);\n}\ninput.star {\n  display: none;\n}\nlabel.star {\n  float: right;\n  padding: 10px;\n  font-size: 36px;\n  color: lightgray;\n  transition: all 0.2s;\n}\ninput.star:checked ~ label.star:before {\n  content: \"\\2605\";\n  color: #FD4;\n  transition: all 0.25s;\n}\ninput.star-5:checked ~ label.star:before {\n  color: #FE7;\n  text-shadow: 0 0 10px #b17b2b;\n}\ninput.star-1:checked ~ label.star:before {\n  color: #F62;\n}\nlabel.star:hover {\n  transform: scale(1.2);\n}\nlabel.star:before {\n  content: \"\\2605\";\n}\n.optionsMenuContent {\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n  border: 1px solid transparent;\n  border-top: 1px solid rgba(0, 0, 0, 0.4);\n  pointer-events: auto;\n  font-family: vox;\n  line-height: 33px;\n  text-shadow: 1px 1px #0d171b, -1px 1px rgba(0, 0, 0, 0.25), -1px -1px rgba(0, 0, 0, 0.25), -1px 0px rgba(0, 0, 0, 0.25), 0px -1px rgba(0, 0, 0, 0.25);\n}\n.optionsMenuContent .optionsMenuTitle {\n  width: 100.1%;\n  box-sizing: border-box;\n  text-align: center;\n  font-size: 24px;\n  line-height: 38px;\n  letter-spacing: 2px;\n  padding-bottom: 3px;\n  margin-bottom: 7px;\n}\n.optionsMenuContent .optionsMenuFill {\n  float: left;\n  width: 100%;\n  box-sizing: border-box;\n  padding-right: 3px;\n}\n.optionsMenuContent .optionsMenuLeftHalf {\n  float: left;\n  width: 50%;\n  box-sizing: border-box;\n  padding-right: 3px;\n}\n.optionsMenuContent .optionsMenuRightHalf {\n  float: right;\n  width: 50%;\n  box-sizing: border-box;\n  padding-left: 3px;\n}\n.optionsMenuContent #optionMenuFeedbackOption {\n  text-align: center;\n  font-size: 36px;\n  font-weight: normal;\n  text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.25), -1px 1px 1px rgba(0, 0, 0, 0.25), 1px -1px 1px rgba(0, 0, 0, 0.25), -1px -1px 1px rgba(0, 0, 0, 0.25), -1px 0px 1px rgba(0, 0, 0, 0.25), 1px 0px 1px rgba(0, 0, 0, 0.25), 0px -1px 1px rgba(0, 0, 0, 0.25), 0px 1px 1px rgba(0, 0, 0, 0.25);\n}\n.optionsMenuContent .optionsMenuOption {\n  width: 100%;\n  display: flow-root;\n  box-sizing: border-box;\n  padding-left: 6px;\n  padding-right: 6px;\n  padding-bottom: 0px;\n  margin: 0px;\n  letter-spacing: 1.1px;\n  text-align: left;\n  font-size: 17px;\n  line-height: 30px;\n  /* Hide the browser's default checkbox */\n  /* Create a custom checkbox */\n  /* On mouse-over, add a grey background color */\n  /* When the checkbox is checked, add a blue background */\n  /* Create the checkmark/indicator (hidden when not checked) */\n  /* Show the checkmark when checked */\n  /* Style the checkmark/indicator */\n}\n.optionsMenuContent .optionsMenuOption .optionsMenuRangeContainer {\n  float: right;\n  display: block;\n  margin-top: 6px;\n  padding-right: 2px;\n  left: 0%;\n  width: 71px;\n  height: 20px;\n  cursor: pointer;\n  pointer-events: auto;\n  transition: 0;\n}\n.optionsMenuContent .optionsMenuOption .optionsMenuRangeContainer .optionsMenuRangeInput {\n  -webkit-appearance: none;\n  width: 100%;\n  height: 20px;\n  background: #5f5dbd;\n  border: 1px solid black;\n  box-shadow: 1px 1px rgba(0, 0, 0, 0.5);\n  outline: none;\n}\n.optionsMenuContent .optionsMenuOption .optionsMenuRangeContainer .optionsMenuRangeInput:hover {\n  filter: brightness(120%);\n}\n.optionsMenuContent .optionsMenuOption .optionsMenuRangeContainer .optionsMenuRangeInput::-webkit-slider-thumb {\n  -webkit-appearance: none;\n  appearance: none;\n  width: 20px;\n  height: 20px;\n  box-shadow: 1px 1px #0d171b, -1px -1px rgba(0, 0, 0, 0.3), 1px -1px rgba(0, 0, 0, 0.3), -1px 1px rgba(0, 0, 0, 0.3);\n  background: #aa4ac2;\n  cursor: pointer;\n}\n.optionsMenuContent .optionsMenuOption .optionsMenuRangeContainer .optionsMenuRangeInput::-moz-range-thumb {\n  width: 20px;\n  height: 20px;\n  box-shadow: 1px 1px #0d171b, -1px -1px rgba(0, 0, 0, 0.3), 1px -1px rgba(0, 0, 0, 0.3), -1px 1px rgba(0, 0, 0, 0.3);\n  background: #aa4ac2;\n  cursor: pointer;\n}\n.optionsMenuContent .optionsMenuOption .optionsMenuCheckboxContainer {\n  float: right;\n  pointer-events: auto;\n  display: block;\n  left: 0%;\n  width: 17px;\n  height: 17px;\n  margin-top: 6px;\n  font-size: 12px;\n  cursor: pointer;\n  user-select: none;\n}\n.optionsMenuContent .optionsMenuOption .optionsMenuCheckboxContainer input {\n  position: absolute;\n  opacity: 0;\n  cursor: pointer;\n}\n.optionsMenuContent .optionsMenuOption .optionCheckmark {\n  float: right;\n  top: 0px;\n  left: 0px;\n  height: 17px;\n  width: 17px;\n  background-color: #5f5dbd;\n  box-shadow: 1px 1px #0d171b, -1px -1px rgba(0, 0, 0, 0.3), 1px -1px rgba(0, 0, 0, 0.3), -1px 1px rgba(0, 0, 0, 0.3);\n}\n.optionsMenuContent .optionsMenuOption .optionsMenuCheckboxContainer:hover input ~ .optionCheckmark {\n  background-color: #7675d6;\n}\n.optionsMenuContent .optionsMenuOption .optionsMenuCheckboxContainer input:checked ~ .optionCheckmark {\n  background-color: #aa4ac2;\n}\n.optionsMenuContent .optionsMenuOption .optionCheckmark:after {\n  content: \"\";\n  display: none;\n}\n.optionsMenuContent .optionsMenuOption .optionsMenuCheckboxContainer input:checked ~ .optionCheckmark:after {\n  display: block;\n}\n.optionsMenuContent .optionsMenuOption .optionsMenuCheckboxContainer .optionCheckmark:after {\n  position: relative;\n  left: 27%;\n  top: 8%;\n  width: 4px;\n  height: 10px;\n  border: solid white;\n  border-width: 0 3px 3px 0;\n  transform: rotate(45deg);\n}\n.optionsMenuContent .optionsMenuOption .optionsMenuOptionText {\n  float: left;\n  font-weight: bold;\n}\n.optionsMenuContent .optionsMenuOption .feedbackButtonContainer {\n  position: relative;\n  float: right;\n  cursor: pointer;\n  top: -4px;\n  right: -8px;\n  height: 24px;\n}\n.optionsMenuContent .optionsMenuOption .feedbackButtonContainer .feedbackButton {\n  height: 36px;\n  pointer-events: auto;\n  z-index: -1;\n  animation-name: tutorialButtonAppearAnim;\n  animation-duration: 1s;\n  animation-iteration-count: 1;\n}\n.optionsMenuContent .optionsMenuOption .feedbackButtonContainer .feedbackButton:hover {\n  transform: scale(1.1);\n  filter: brightness(150%);\n  transition: 0.05s ease-in-out;\n  z-index: 1;\n}\n.optionsMenuContent .optionsMenuOption .feedbackButtonContainer .feedbackButton:active {\n  transform: scale(0.975);\n  filter: brightness(90%);\n  transition: 0.05s ease-in-out;\n  z-index: 1;\n}\n.optionsMenuContent .optionsMenuOption .optionsMenuTextInput {\n  float: right;\n  display: block;\n}\n.optionsMenuContent .optionsMenuOption .optionsMenuTextInput .mineTimeTextInput {\n  padding: 5px 8px;\n  width: 55px;\n  height: 11px;\n  overflow: hidden;\n  text-align: right;\n  font-family: vox;\n  font-weight: bold;\n  color: white;\n  text-shadow: 1px 1px #0d171b, -1px 1px rgba(0, 0, 0, 0.5), -1px -1px rgba(0, 0, 0, 0.5), -1px 0px rgba(0, 0, 0, 0.5), 1px 0px rgba(0, 0, 0, 0.5), 0px -1px rgba(0, 0, 0, 0.5), 0px 1px rgba(0, 0, 0, 0.5);\n  background: #4f4dc0;\n  border: 1px solid black;\n  box-shadow: 1px 1px 0px rgba(0, 0, 0, 0.5);\n}\n.optionsMenuContent .optionsMenuOption .optionsMenuTextInput .mineTimeTextInput:focus {\n  outline: none;\n  background: #7472ff;\n  font-weight: bold;\n}\n.optionsMenuContent .optionsMenuOption .optionsMenuSelect {\n  float: right;\n  display: block;\n  border: 1px solid black;\n  width: 127px;\n  overflow: hidden;\n  background: #4f4dc0 url(" + escape(__webpack_require__(65)) + ") no-repeat 115% 11%;\n  background-size: 48px 48px;\n  height: 22px;\n  margin-top: 5px;\n  font-family: vox;\n  color: white;\n  line-height: 16px;\n  box-shadow: 1px 1px 0px rgba(0, 0, 0, 0.5);\n}\n.optionsMenuContent .optionsMenuOption .optionsMenuSelect select {\n  padding: 5px 8px;\n  padding-left: 0px;\n  width: 130%;\n  height: 24px;\n  border: none;\n  box-shadow: none;\n  background: transparent;\n  background-image: none;\n  appearance: none;\n  font-family: vox;\n  font-weight: bold;\n  font-size: 13px;\n  color: white;\n  text-shadow: 1px 1px #0d171b, -1px 1px rgba(0, 0, 0, 0.5), -1px -1px rgba(0, 0, 0, 0.5), -1px 0px rgba(0, 0, 0, 0.5), 1px 0px rgba(0, 0, 0, 0.5), 0px -1px rgba(0, 0, 0, 0.5), 0px 1px rgba(0, 0, 0, 0.5);\n}\n.optionsMenuContent .optionsMenuOption .optionsMenuSelect select:focus {\n  outline: none;\n  background: #4f4dc0 url(" + escape(__webpack_require__(32)) + ") no-repeat 115% 11%;\n  background-size: 44px 44px;\n  font-weight: bold;\n  color: white;\n}\n.optionsMenuContent .feedbackLink {\n  text-align: center;\n}\n.optionsMenuContent .feedbackLink a {\n  text-decoration: none;\n  color: #aa4ac2;\n}\n.optionsMenuContent .feedbackLink a:hover {\n  filter: brightness(140%);\n}\n.optionsMenuContent .feedbackLink a:active {\n  filter: brightness(90%);\n}\n", ""]);

// exports


/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(257);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(4)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./tooltipsView.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./tooltipsView.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(3)(false);
// imports


// module
exports.push([module.i, "[tooltip] {\n  position: relative;\n}\n[tooltip]::before {\n  content: \"\";\n  position: absolute;\n  top: -0.5vw;\n  left: 50%;\n  transform: translateX(-50%);\n  border-width: 0.15vw 0.3vw 0 0.3vw;\n  border-style: solid;\n  border-color: rgba(0, 0, 0, 0.7) transparent transparent transparent;\n  z-index: 9999;\n  opacity: 0;\n}\n[tooltip-position='left']::before {\n  left: 0%;\n  top: 50%;\n  margin-left: -0.82vw;\n  transform: translatey(-50%) rotate(-90deg);\n}\n[tooltip-position='top']::before {\n  left: 50%;\n}\n[tooltip-position='bottom']::before {\n  top: 100%;\n  margin-top: 0.15vw;\n  transform: translateX(-50%) translatey(-100%) rotate(-180deg);\n}\n[tooltip-position='right']::before {\n  left: 100%;\n  top: 50%;\n  margin-left: -0.15vw;\n  transform: translatey(-50%) rotate(90deg);\n}\n[tooltip]::after {\n  content: attr(tooltip);\n  position: absolute;\n  left: 50%;\n  top: -0.5vw;\n  transform: translateX(-50%) translateY(-100%);\n  background: rgba(0, 0, 0, 0.85);\n  color: #fff;\n  font-family: Verdana;\n  text-align: left;\n  font-size: 0.8vw;\n  line-height: 0.9vw;\n  letter-spacing: normal;\n  white-space: pre;\n  border-radius: 0.2vw;\n  pointer-events: none;\n  padding: 0.15vw 0.15vw;\n  z-index: 9999;\n  opacity: 0;\n}\n[tooltip-text-size=\"pixel\"]::after {\n  font-size: 10px;\n  line-height: 10px;\n  letter-spacing: normal;\n}\n[tooltip-text-size=\"large\"]::after {\n  font-size: 0.8vw;\n  line-height: 1.2vw;\n  letter-spacing: normal;\n}\n[tooltip-size=\"large\"]::after {\n  min-width: 25vw;\n  white-space: normal;\n}\n[tooltip-size=\"medium\"]::after {\n  min-width: 20vw;\n  white-space: normal;\n}\n[tooltip-size=\"small\"]::after {\n  min-width: 15vw;\n  white-space: normal;\n}\n[tooltip-size=\"xsmall\"]::after {\n  min-width: 11vw;\n  white-space: normal;\n}\n[tooltip-position='left']::after {\n  left: 0%;\n  top: 50%;\n  margin-left: -0.55vw;\n  transform: translateX(-100%) translateY(-50%);\n}\n[tooltip-position='top']::after {\n  left: 50%;\n}\n[tooltip-position='bottom']::after {\n  top: 100%;\n  margin-top: 0.4vw;\n  transform: translateX(-50%) translateY(-30%);\n}\n[tooltip-position='right']::after {\n  left: 100%;\n  top: 50%;\n  margin-left: 0.55vw;\n  transform: translateX(0%) translateY(-50%);\n}\n[tooltip]:hover::after,\n[tooltip]:hover::before {\n  animation-name: tooltipOnAnim;\n  animation-delay: 0.2s;\n  animation-duration: 0.3s;\n  animation-timing-function: ease-out;\n  animation-fill-mode: forwards;\n}\n@keyframes tooltipOnAnim {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n", ""]);

// exports


/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.
var React = __webpack_require__(5);
var GameStore = __webpack_require__(0);

__webpack_require__(259);

module.exports = function (_React$Component) {
    _inherits(_class, _React$Component);

    function _class() {
        _classCallCheck(this, _class);

        return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
    }

    _createClass(_class, [{
        key: "render",
        value: function render() {
            var stampManager = GameStore.GameInstance.stampManager;

            if (stampManager.mouseOverStamp === undefined) {
                return React.createElement("div", null);
            }

            var player = GameStore.GameInstance.player;
            var canvasGrid = [];
            var stampName = undefined;

            var canvasSize = 9;
            for (var y = 0; y < canvasSize; ++y) {
                var rowDivs = [];
                for (var x = 0; x < canvasSize; ++x) {
                    var colorIndex = stampManager.mouseOverStamp.tychoData.dataArray[y * canvasSize + x];
                    var colorStr = undefined;
                    if (colorIndex > 0) {
                        var color = stampManager.getColorFromCode(colorIndex - 1);
                        colorStr = "rgb(" + color.r + ", " + color.g + ", " + color.b + ")";
                    } else {
                        colorStr = "#00000000";
                    }

                    rowDivs.push(React.createElement("div", { key: x, className: "stampPixel", style: { backgroundColor: colorStr } }));
                }

                canvasGrid.push(React.createElement(
                    "div",
                    { key: y, className: "stampRow" },
                    rowDivs
                ));
            }

            stampName = React.createElement(
                "div",
                null,
                stampManager.mouseOverStamp.tychoData.name
            );

            // Place text over item
            var nx = 0;
            var ny = 0;
            if (player.hideMouse) {
                var nPos = player.mesh.position.clone().project(GameStore.GameInstance.camera);
                var halfWidth = player.container.clientWidth / 2;
                var halfHeight = player.container.clientHeight / 2;
                nx = (halfWidth + nPos.x * halfWidth) / player.container.clientWidth * 100;
                ny = (halfHeight + -nPos.y * halfHeight) / player.container.clientHeight * 100;
            } else {
                nx = player.offsetX / player.container.clientWidth * 100;
                ny = player.offsetY / player.container.clientHeight * 100;
            }

            var style = {
                top: ny + "vh",
                left: nx + "vw"
            };

            return React.createElement(
                "div",
                { className: "stampViewContainer", style: style },
                stampName,
                React.createElement(
                    "div",
                    { className: "canvasGrid" },
                    canvasGrid
                )
            );
        }
    }]);

    return _class;
}(React.Component);

/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(260);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(4)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./stampView.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./stampView.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(3)(false);
// imports


// module
exports.push([module.i, ".stampViewContainer {\n  pointer-events: none;\n  position: absolute;\n  top: 60%;\n  left: 10%;\n  transform: translate(-50%, -195%);\n  z-index: -1;\n  color: white;\n  font-size: 15px;\n  line-height: 20px;\n  font-family: buffMeterFont;\n  text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000, 0 1px 0 #000, 0 -1px 0 #000, 1px 0 0 #000, -1px 0 0 #000;\n}\n.stampViewContainer .canvasGrid {\n  margin: auto;\n}\n.stampViewContainer .canvasGrid .stampRow {\n  display: flex;\n  width: 2.16em;\n  margin: auto;\n}\n.stampViewContainer .canvasGrid .stampPixel {\n  width: 0.24em;\n  height: 0.24em;\n}\n", ""]);

// exports


/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.
var React = __webpack_require__(5);
var GameStore = __webpack_require__(0);
var Utils = __webpack_require__(2);

__webpack_require__(262);

module.exports = function (_React$Component) {
    _inherits(_class, _React$Component);

    function _class() {
        _classCallCheck(this, _class);

        return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
    }

    _createClass(_class, [{
        key: "render",
        value: function render() {
            var timeStr = Utils.convertTimeMsToString(GameStore.gamestateManager.getPlayTimeMs());

            return React.createElement(
                "div",
                { className: "levelViewContainer levelViewContainerPosition" },
                React.createElement(
                    "div",
                    null,
                    React.createElement("div", { className: "scanLineOverlay" }),
                    "Stage: " + GameStore.GameInstance.levelManager.getLocationString() + " Time: " + timeStr
                )
            );
        }
    }]);

    return _class;
}(React.Component);

/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(263);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(4)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./levelView.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./levelView.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

var escape = __webpack_require__(9);
exports = module.exports = __webpack_require__(3)(false);
// imports


// module
exports.push([module.i, "@font-face {\n  font-family: levelViewFont;\n  src: url(" + escape(__webpack_require__(28)) + ");\n}\n.levelViewContainer {\n  position: absolute;\n  padding: 0.5vw;\n  text-align: right;\n  font-family: levelViewFont;\n  font-size: 1vw;\n  letter-spacing: 0.1vw;\n  white-space: nowrap;\n  color: #2eff9e;\n  text-shadow: -0.1vw -0.1vw 0 #009113, 0.1vw 0.1vw 0 #009113, 0 0 0.8vw #00ff40, -0.1vw -0.1vw 0 #000, 0.1vw -0.1vw 0 #000, -0.1vw 0.1vw 0 #000, 0.1vw 0.1vw 0 #000, 0 0.1vw 0 #000, 0 -0.1vw 0 #000, 0.1vw 0 0 #000, -0.1vw 0 0 #000;\n  opacity: 0.85;\n  overflow: hidden;\n  filter: hue-rotate(283deg);\n  z-index: -1;\n  pointer-events: none;\n}\n.levelViewContainerPosition {\n  top: 89.5%;\n  right: 4.5%;\n}\n", ""]);

// exports


/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.

var React = __webpack_require__(5);
var GameStore = __webpack_require__(0);
var PlayerStore = __webpack_require__(17);
var SoundSystem = __webpack_require__(7);
var StringStore = __webpack_require__(11);
var Utils = __webpack_require__(2);
var Nimble = __webpack_require__(6);

__webpack_require__(265);

var VictoryView = function (_React$Component) {
    _inherits(VictoryView, _React$Component);

    function VictoryView(props) {
        _classCallCheck(this, VictoryView);

        var _this = _possibleConstructorReturn(this, (VictoryView.__proto__ || Object.getPrototypeOf(VictoryView)).call(this, props));

        _this.screenOn = false;
        _this.screenClassesOn = "screenContainer screenContainerOn";
        _this.screenClassesOff = "screenContainer screenContainerOff";
        _this.screenClasses = _this.screenClassesOff;

        _this.containerClassesOn = "victoryViewContainer victoryViewContainerOn";
        _this.containerClassesOff = "victoryViewContainer victoryViewContainerOff";
        _this.containerClasses = _this.containerClassesOff;

        _this.displayTimeInitMS = 8000;
        _this.displayTimeVictoryMS = -4000;
        _this.displayTimeMS = _this.displayTimeInitMS;
        _this.completelyHiddenTimeMS = 500;
        _this.turnOffAllTimeMS = 1000;

        _this.loadingTextL1 = "PROGRAM QUERY TO AMA #0059";
        _this.loadingTextL3 = "WALK___ W-A-S-D";
        _this.loadingTextL4 = "JUMP___ SPACE";
        _this.loadingTextL5 = "SHOOT__ LEFT CLICK";
        _this.loadingTextL6 = "OPTIONS ESC";
        _this.loadingTextL10 = "OBJECTIVE: DELIVER PACKAGE";
        _this.loadingTextL11 = "â";

        _this.victoryTextL1 = "PROGRAM: SUCCESS";

        _this.firstLineText = _this.loadingTextL1;
        _this.secondLineText = "";
        _this.thirdLineText = _this.loadingTextL3;
        _this.fourthLineText = _this.loadingTextL4;
        _this.fifthLineText = _this.loadingTextL5;
        _this.sixthLineText = _this.loadingTextL6;
        _this.seventhLineText = "";
        _this.eighthLineText = "";
        _this.ninthLineText = "";
        _this.tenthLineText = _this.loadingTextL10;
        _this.eleventhLineText = _this.loadingTextL11;
        _this.blinkLastLine = true;

        _this.showLevelFinished = false;
        _this.cycleStampIntervalMs = 3000;

        _this.incrementTimeMS = 20; // Time between steps in end screen anim
        _this.maxTimeMS = 2000; // Max text anim time
        _this.numStepsTextAnim = _this.maxTimeMS / _this.incrementTimeMS;
        _this.minStepAmount = 1;
        _this.stepAmount = 1;
        _this.timeBetweenAnimsMS = 500;

        _this.continueEnabled = false;

        if (!props.loading) {
            _this.setupScreenForVictory();
        }

        _this.stampElement = undefined;
        _this.showLeaderboard = false;

        // bind the resize event
        _this.keyDownFunc = function (e) {
            _this.keyPressDown(e);
        };
        return _this;
    }

    _createClass(VictoryView, [{
        key: "setupScreenForVictory",
        value: function setupScreenForVictory() {
            this.firstLineText = this.victoryTextL1;
            this.secondLineText = "";
            this.thirdLineText = "";
            this.fourthLineText = "";
            this.fifthLineText = "";
            this.sixthLineText = "";
            this.seventhLineText = "";
            this.eighthLineText = "";
            this.ninthLineText = "";
            this.tenthLineText = "";
            this.eleventhLineText = "";
            this.blinkLastLine = false;

            this.displayTimeMS = 0;
        }
    }, {
        key: "keyPressDown",
        value: function keyPressDown(e) {
            if (e.keyCode === 13) {
                this.onContinueClick();
            }
        }
    }, {
        key: "onContinueClick",
        value: function onContinueClick() {
            if (GameStore.gamestateManager.playerKilled) {
                if (this.showLeaderboard) {
                    GameStore.GameInstance.reloadGame();
                } else {
                    this.showLeaderboard = true;
                    this.firstLineText = "Global Channel Leaderboard";
                    this.stampElement = undefined;
                    this.updateEntries();
                }
            } else if (this.continueEnabled) {
                this.continueEnabled = false;
                this.beganInit = false;
                SoundSystem.globalMusic.closeState.Play();
                SoundSystem.globalMusic.endIdleMusic();

                document.removeEventListener("keydown", this.keyDownFunc, false);
                this.turnOffScreen();

                GameStore.GameInstance.startLevel();
            }
        }
    }, {
        key: "turnOffScreen",
        value: function turnOffScreen() {
            var _this2 = this;

            this.screenClasses = this.screenClassesOff;

            clearInterval(this.refreshStampTimeoutHandle);

            // Animated off entire screen
            setTimeout(function () {
                _this2.containerClasses = _this2.containerClassesOff;

                // Turn off victory screen
                setTimeout(function () {
                    _this2.screenOn = false;
                    GameStore.GameInstance.showLevelFinished = false;

                    if (GameStore.GameInstance.loading) {
                        GameStore.GameInstance.loading = false;
                    }

                    if (GameStore.optionsMenu) {
                        GameStore.optionsMenu.checkReadyForRating();
                    }

                    if (GameStore.GameInstance.levelManager) {
                        GameStore.GameInstance.levelManager.checkReadyForUnlockMessage();
                    }
                }, _this2.completelyHiddenTimeMS);
            }, this.turnOffAllTimeMS);
        }
    }, {
        key: "doneLerpXP",
        value: function doneLerpXP() {
            var _this3 = this;

            if (this.currentVoxelCount !== this.goalVoxelCount) {
                // Start animating voxel count text
                var stepAmount = Math.round((this.goalVoxelCount - this.currentVoxelCount) / this.numStepsTextAnim);
                this.stepAmount = stepAmount < this.minStepAmount ? this.minStepAmount : stepAmount;
                setTimeout(this.lerpVoxelCount.bind(this), this.timeBetweenAnimsMS);

                setTimeout(GameStore.GameInstance.levelManager.consumeStampXP.bind(GameStore.GameInstance.levelManager), this.timeBetweenAnimsMS);
            } else {
                setTimeout(GameStore.GameInstance.levelManager.consumeStampXP.bind(GameStore.GameInstance.levelManager), this.timeBetweenAnimsMS);

                // Enable continue button
                setTimeout(function () {
                    document.addEventListener("keydown", _this3.keyDownFunc, false);
                    _this3.continueEnabled = true;
                }, this.timeBetweenAnimsMS);
            }
        }
    }, {
        key: "lerpXP",
        value: function lerpXP() {
            if (this.currentXP !== this.goalXP) {
                SoundSystem.globalMusic.playCounter();

                if (this.goalXP - this.currentXP > this.stepAmount) {
                    this.currentXP += this.stepAmount;

                    this.fourthLineText = "Earned XP: " + this.currentXP;

                    setTimeout(this.lerpXP.bind(this), this.incrementTimeMS);
                } else {
                    this.currentXP = this.goalXP;

                    this.fourthLineText = "Earned XP: " + this.currentXP;

                    SoundSystem.globalMusic.stopCounter();

                    this.doneLerpXP();
                }
            } else {
                this.doneLerpXP();
            }
        }
    }, {
        key: "lerpVoxelCount",
        value: function lerpVoxelCount() {
            var _this4 = this;

            if (this.currentVoxelCount !== this.goalVoxelCount) {
                SoundSystem.globalMusic.playCounter();
                var xpManager = GameStore.GameInstance.xpManager;

                if (this.goalVoxelCount - this.currentVoxelCount > this.stepAmount) {
                    this.currentVoxelCount += this.stepAmount;

                    this.fifthLineText = "Stamped Voxels: " + this.currentVoxelCount + " / " + xpManager.maximumStampXPAtLevel();

                    setTimeout(this.lerpVoxelCount.bind(this), this.incrementTimeMS);
                } else {
                    this.currentVoxelCount = this.goalVoxelCount;

                    this.fifthLineText = "Stamped Voxels: " + this.currentVoxelCount + " / " + +xpManager.maximumStampXPAtLevel();

                    // Enable continue button
                    SoundSystem.globalMusic.stopCounter();
                    setTimeout(function () {
                        document.addEventListener("keydown", _this4.keyDownFunc, false);
                        _this4.continueEnabled = true;
                    }, this.timeBetweenAnimsMS);
                }
            } else {
                // Enable continue button
                SoundSystem.globalMusic.stopCounter();
                setTimeout(function () {
                    document.addEventListener("keydown", _this4.keyDownFunc, false);
                    _this4.continueEnabled = true;
                }, this.timeBetweenAnimsMS);
            }
        }
    }, {
        key: "showScreenAfterLoad",
        value: function showScreenAfterLoad() {
            var _this5 = this;

            var levelManager = GameStore.GameInstance.levelManager;
            var playerKilled = GameStore.gamestateManager !== undefined && GameStore.gamestateManager.playerKilled;

            if (playerKilled) {
                // Enable continue button
                setTimeout(function () {
                    document.addEventListener("keydown", _this5.keyDownFunc, false);
                    _this5.continueEnabled = true;
                }, this.timeBetweenAnimsMS);

                return;
            }

            if (levelManager !== undefined && levelManager.doneLoading) {
                // Start animating XP text
                var stepAmount = Math.round((this.goalXP - this.currentXP) / this.numStepsTextAnim);
                this.stepAmount = stepAmount < this.minStepAmount ? this.minStepAmount : stepAmount;
                setTimeout(this.lerpXP.bind(this), this.timeBetweenAnimsMS + 1000); // Add 1s for screen to turn on

                setTimeout(GameStore.GameInstance.levelManager.consumeXP.bind(GameStore.GameInstance.levelManager), this.timeBetweenAnimsMS + 1000); // Add 1s for screen to turn on
            } else {
                // Not ready, try again
                setTimeout(this.showScreenAfterLoad.bind(this), 250);
            }
        }
    }, {
        key: "initLevelFinishScreen",
        value: function initLevelFinishScreen(playerKilled) {
            var _this6 = this;

            this.beganInit = true;
            this.levelStats = GameStore.gamestateManager.endLevelStats;
            var xpManager = GameStore.GameInstance.xpManager;
            this.stampIndex = 0;

            this.goalXP = this.levelStats.xp.earnedXp;
            this.currentXP = 0;
            this.goalVoxelCount = this.levelStats.levelRecordData.voxelChangeCount;
            this.currentVoxelCount = 0;

            var levelTime = Utils.convertTimeMsToString(this.levelStats.levelTimeMs);
            this.firstLineText = playerKilled ? StringStore.UI.END_SCREEN_FAIL : this.victoryTextL1;
            this.secondLineText = "Time: " + levelTime;
            this.thirdLineText = "";
            this.fourthLineText = "Earned XP: " + this.currentXP;
            this.fifthLineText = "Stamped Voxels: " + this.currentVoxelCount + " / " + xpManager.maximumStampXPAtLevel();
            this.sixthLineText = this.levelStats.stamp.randomStampsList.length > 0 ? "Stamp Memory: " : "";
            this.seventhLineText = "";
            this.eighthLineText = "";
            this.ninthLineText = "";
            this.tenthLineText = "";
            this.eleventhLineText = "";
            this.blinkLastLine = false;

            GameStore.GameInstance.levelManager.doneLoading = false;
            setTimeout(this.showScreenAfterLoad.bind(this), 250);

            this.refreshStampElement();
            this.refreshStampTimeoutHandle = setInterval(function () {
                _this6.refreshStampElement();
            }, this.cycleStampIntervalMs);
        }
    }, {
        key: "refreshStampElement",
        value: function refreshStampElement() {
            var stampStats = this.levelStats.stamp.randomStampsList;
            if (stampStats.length > 0 && !this.showLeaderboard) {

                var tychoData = stampStats[this.stampIndex++ % stampStats.length];
                var canvasSize = 9;
                this.stampElement = [];
                for (var y = 0; y < canvasSize; ++y) {
                    var rowDivs = [];
                    for (var x = 0; x < canvasSize; ++x) {
                        var colorIndex = tychoData.dataArray[y * canvasSize + x];
                        var colorStr = undefined;
                        var darkColorStr = undefined;
                        var glowStr = undefined;
                        if (colorIndex > 0) {
                            var color = GameStore.GameInstance.stampManager.getColorFromCode(colorIndex - 1);
                            colorStr = "rgb(" + color.r + ", " + color.g + ", " + color.b + ")";
                            darkColorStr = "rgb(" + color.r * 0.5 + ", " + color.g * 0.5 + ", " + color.b * 0.5 + ")";
                            glowStr = "-0.1vw -0.1vw 0 " + darkColorStr + ", " + "0.1vw 0.1vw 0 " + darkColorStr + ", " + "0 0 0.8vw " + colorStr;
                        } else {
                            colorStr = "rgba(255, 255, 255, 0)";
                            glowStr = "0 0 0 rgba(0, 0, 0, 0)";
                        }

                        rowDivs.push(React.createElement("div", { key: x, className: "victoryStampPixel", style: { backgroundColor: colorStr, boxShadow: glowStr } }));
                    }

                    this.tenthLineText = tychoData.name;
                    this.stampElement.push(React.createElement(
                        "div",
                        { key: y, className: "victoryStampRow" },
                        rowDivs
                    ));
                }
            } else {
                this.stampElement = undefined;
            }

            // This can update ayschronously, so handle it in an update
            var GLOBAL_LEADERBOARD = GameStore.hostData.activityKey + "/global";
            this.topEntries = Nimble.twitchsparks.leaderboards[GLOBAL_LEADERBOARD + "/top"];
            this.aroundEntries = Nimble.twitchsparks.leaderboards[GLOBAL_LEADERBOARD + "/around"];

            this.updateEntries();
        }
    }, {
        key: "formatEntry",
        value: function formatEntry(entry) {
            var leadSpace = entry.rank < 10 ? "\xa0" : "";
            var scoreString = entry.score.toString();
            scoreString = scoreString.substring(0, 8); // Limit score to 99,999,999 max score

            var spacing = 8 - scoreString.length;
            while (spacing > 0) {
                scoreString = "_" + scoreString;
                spacing--;
            }

            var displayName = entry.name.substring(0, 20);

            return leadSpace + entry.rank + "." + scoreString + " " + displayName;
        }
    }, {
        key: "updateEntries",
        value: function updateEntries() {
            if (this.topEntries !== undefined && this.showLeaderboard) {
                var topEntries = this.topEntries;

                this.secondLineText = topEntries[0] !== undefined ? this.formatEntry(topEntries[0]) : "";
                this.thirdLineText = topEntries[1] !== undefined ? this.formatEntry(topEntries[1]) : "";
                this.fourthLineText = topEntries[2] !== undefined ? this.formatEntry(topEntries[2]) : "";
                this.fifthLineText = topEntries[3] !== undefined ? this.formatEntry(topEntries[3]) : "";
                this.sixthLineText = topEntries[4] !== undefined ? this.formatEntry(topEntries[4]) : "";
                this.seventhLineText = topEntries[5] !== undefined ? this.formatEntry(topEntries[5]) : "";
                this.eighthLineText = topEntries[6] !== undefined ? this.formatEntry(topEntries[6]) : "";
                this.ninthLineText = topEntries[7] !== undefined ? this.formatEntry(topEntries[7]) : "";
                this.tenthLineText = topEntries[8] !== undefined ? this.formatEntry(topEntries[8]) : "";
                this.eleventhLineText = topEntries[9] !== undefined ? this.formatEntry(topEntries[9]) : "";
            }

            if (this.aroundEntries !== undefined && this.showLeaderboard) {
                var aroundEntries = this.aroundEntries;
                // Dont bother showing around me entries if we are already displayed
                if (this.topEntries[3] !== undefined && aroundEntries[0] !== undefined && aroundEntries[0].rank - 2 > this.topEntries[3].rank) {
                    this.sixthLineText = "\xa0...";
                    this.seventhLineText = aroundEntries[0] !== undefined ? this.formatEntry(aroundEntries[0]) : "";
                    this.eighthLineText = aroundEntries[1] !== undefined ? this.formatEntry(aroundEntries[1]) : "";
                    this.ninthLineText = aroundEntries[2] !== undefined ? this.formatEntry(aroundEntries[2]) : "";
                    this.tenthLineText = aroundEntries[3] !== undefined ? this.formatEntry(aroundEntries[3]) : "";
                    this.eleventhLineText = aroundEntries[4] !== undefined ? this.formatEntry(aroundEntries[4]) : "";
                }
            }
        }
    }, {
        key: "render",
        value: function render() {
            var _this7 = this;

            if (GameStore.GameInstance && (GameStore.GameInstance.showLevelFinished || GameStore.GameInstance.loading)) {
                var playerKilled = GameStore.gamestateManager !== undefined && GameStore.gamestateManager.playerKilled;
                var continueButton = undefined;

                if (!this.screenOn) {
                    this.screenOn = true;
                    this.screenClasses = this.screenClassesOn;
                    this.containerClasses = this.containerClassesOn;

                    if (GameStore.GameInstance.showLevelFinished && !this.beganInit) {
                        this.initLevelFinishScreen(playerKilled);
                    }

                    if (GameStore.GameInstance.loading && this.displayTimeMS > 0) {
                        setTimeout(function () {
                            _this7.turnOffScreen();
                        }, this.displayTimeMS);
                    }
                }

                // Continue button is enabled after the level stats animate
                if (!GameStore.GameInstance.loading && this.continueEnabled) {
                    continueButton = React.createElement(
                        "div",
                        { className: "victoryText continueButton", onClick: function onClick() {
                                return _this7.onContinueClick();
                            } },
                        StringStore.UI.PRESS,
                        " ",
                        React.createElement(
                            "span",
                            { className: "victoryTextBlink" },
                            StringStore.UI.ENTER
                        ),
                        " ",
                        playerKilled ? StringStore.UI.TRY_AGAIN : StringStore.UI.CONTINUE
                    );
                }

                // If end level screen & not done loading then don't show anything
                var classNameScreen = "victoryScreenBG";
                if (GameStore.GameInstance.showLevelFinished) {
                    if (!GameStore.GameInstance.levelManager.doneLoading && !playerKilled) {
                        return React.createElement(
                            "div",
                            { className: "victoryScreenBG victoryScreenBGFadeOn" },
                            React.createElement(
                                "div",
                                { className: "victoryLoading victoryScreenLoadingFadeOn" },
                                React.createElement(
                                    "div",
                                    { className: "victoryText victoryLoadingTextPosition" },
                                    "LOADING ",
                                    React.createElement(
                                        "span",
                                        { className: "victoryTextBlink" },
                                        "\u2588"
                                    )
                                )
                            )
                        );
                    }

                    if (!this.beganInit) {
                        classNameScreen += " victoryScreenBGFadeOff";
                    } else {
                        classNameScreen += " victoryScreenBGFadeOn";
                    }
                }

                var lastLine = undefined;
                if (this.blinkLastLine) {
                    lastLine = React.createElement(
                        "span",
                        { className: "victoryTextBlink" },
                        this.eleventhLineText
                    );
                } else {
                    lastLine = React.createElement(
                        "span",
                        null,
                        this.eleventhLineText
                    );
                }

                return React.createElement(
                    "div",
                    { className: classNameScreen },
                    React.createElement(
                        "div",
                        { className: this.containerClasses },
                        React.createElement(
                            "div",
                            { className: "victoryScreenLabel" },
                            "A-\u307E v3.51 OUTPUT"
                        ),
                        React.createElement(
                            "div",
                            { className: "screenContainerOutter" },
                            React.createElement(
                                "div",
                                { className: this.screenClasses },
                                React.createElement("div", { className: "scanLineOverlay" }),
                                React.createElement(
                                    "div",
                                    { className: "victoryText" },
                                    this.firstLineText,
                                    React.createElement("br", null),
                                    this.secondLineText,
                                    React.createElement("br", null),
                                    this.thirdLineText,
                                    React.createElement("br", null),
                                    this.fourthLineText,
                                    React.createElement("br", null),
                                    this.fifthLineText,
                                    React.createElement("br", null),
                                    this.sixthLineText,
                                    React.createElement("br", null),
                                    this.seventhLineText,
                                    React.createElement("br", null),
                                    this.eighthLineText,
                                    React.createElement("br", null),
                                    this.ninthLineText,
                                    React.createElement("br", null),
                                    this.tenthLineText,
                                    React.createElement("br", null),
                                    lastLine
                                ),
                                React.createElement(
                                    "div",
                                    { className: "victoryStampViewContainer" },
                                    this.stampElement
                                ),
                                continueButton
                            )
                        )
                    )
                );
            } else {
                return React.createElement("div", null);
            }
        }
    }]);

    return VictoryView;
}(React.Component);

module.exports = VictoryView;

/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(266);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(4)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./victoryView.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./victoryView.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

var escape = __webpack_require__(9);
exports = module.exports = __webpack_require__(3)(false);
// imports


// module
exports.push([module.i, "@font-face {\n  font-family: victoryScreenFont;\n  src: url(" + escape(__webpack_require__(28)) + ");\n}\n.victoryViewContainer {\n  position: absolute;\n  top: 9vw;\n  left: 29vw;\n  width: 42vw;\n  height: 30vw;\n  border: 1px solid black;\n  border-radius: 0.1vw;\n  background: rgba(0, 0, 0, 0.85);\n  pointer-events: none;\n}\n.victoryViewContainerOn {\n  animation-name: victoryViewFadeIn_anim;\n  animation-duration: 0.1s;\n  animation-iteration-count: 1;\n  animation-timing-function: ease-in-out;\n}\n@keyframes victoryViewFadeIn_anim {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n.victoryViewContainerOff {\n  animation-name: victoryViewTurnOff_anim;\n  animation-fill-mode: forwards;\n  animation-duration: 0.5s;\n  animation-iteration-count: 1;\n  animation-timing-function: ease-in-out;\n}\n@keyframes victoryViewTurnOff_anim {\n  0% {\n    transform: scale(1.1);\n  }\n  80% {\n    transform: scale(1, 0.05);\n  }\n  100% {\n    transform: scale(0);\n  }\n}\n.screenContainerOutter {\n  width: 100%;\n  height: 100%;\n  border-radius: 0.1vw;\n  filter: hue-rotate(283deg);\n  overflow: hidden;\n}\n.screenContainer {\n  width: 100%;\n  height: 100%;\n  box-shadow: inset 0 0 0.75vw #c4c4c4;\n}\n@keyframes turn-on {\n  0% {\n    transform: scale(1, 0.8) translate3d(0, 0, 0);\n    filter: brightness(30);\n    opacity: 1;\n  }\n  3.5% {\n    transform: scale(1, 0.8) translate3d(0, 100%, 0);\n  }\n  3.6% {\n    transform: scale(1, 0.8) translate3d(0, -100%, 0);\n    opacity: 1;\n  }\n  9% {\n    transform: scale(1.3, 0.6) translate3d(0, 100%, 0);\n    filter: brightness(30);\n    opacity: 0;\n  }\n  11% {\n    transform: scale(1, 1) translate3d(0, 0, 0);\n    filter: contrast(0) brightness(0);\n    opacity: 0;\n  }\n  50% {\n    transform: scale(1, 1) translate3d(0, 0, 0);\n    filter: contrast(1) brightness(1.2) saturate(1.3);\n    opacity: 1;\n  }\n}\n.screenContainerOn {\n  overflow: hidden;\n  animation: turn-on 3s linear;\n  animation-fill-mode: forwards;\n}\n.screenContainerOff {\n  animation: turn-off 1.6s ease-out;\n  animation-fill-mode: forwards;\n}\n@keyframes turn-off {\n  0% {\n    transform: scale(1, 1.3) translate3d(0, 0, 0);\n    filter: brightness(1);\n    opacity: 1;\n  }\n  15% {\n    transform: scale(1.3, 0.1) translate3d(0, 0, 0);\n    filter: brightness(50);\n  }\n  25% {\n    animation-timing-function: ease-in;\n    transform: scale(0.01, 0.01) translate3d(0, 0, 0);\n    filter: brightness(10);\n    opacity: 1;\n  }\n  100% {\n    animation-timing-function: ease-in;\n    transform: scale(0.0001, 0.001) translate3d(0, 0, 0);\n    filter: brightness(0);\n    opacity: 0;\n  }\n}\n.scanLineOverlay {\n  position: absolute;\n  background: linear-gradient(rgba(18, 16, 16, 0) 50%, rgba(0, 0, 0, 0.25) 50%), linear-gradient(90deg, rgba(255, 0, 0, 0.06), rgba(0, 255, 0, 0.02), rgba(0, 0, 255, 0.06));\n  background-size: 100% 2px, 3px 100%;\n  z-index: 2;\n  width: 100%;\n  height: 100%;\n  animation: flicker 0.2s infinite;\n}\n@keyframes flicker {\n  0% {\n    opacity: 0.27861;\n  }\n  5% {\n    opacity: 0.34769;\n  }\n  10% {\n    opacity: 0.23604;\n  }\n  15% {\n    opacity: 0.90626;\n  }\n  20% {\n    opacity: 0.18128;\n  }\n  25% {\n    opacity: 0.83891;\n  }\n  30% {\n    opacity: 0.65583;\n  }\n  35% {\n    opacity: 0.67807;\n  }\n  40% {\n    opacity: 0.26559;\n  }\n  45% {\n    opacity: 0.84693;\n  }\n  50% {\n    opacity: 0.96019;\n  }\n  55% {\n    opacity: 0.08594;\n  }\n  60% {\n    opacity: 0.20313;\n  }\n  65% {\n    opacity: 0.71988;\n  }\n  70% {\n    opacity: 0.53455;\n  }\n  75% {\n    opacity: 0.37288;\n  }\n  80% {\n    opacity: 0.71428;\n  }\n  85% {\n    opacity: 0.70419;\n  }\n  90% {\n    opacity: 0.7003;\n  }\n  95% {\n    opacity: 0.36108;\n  }\n  100% {\n    opacity: 0.24387;\n  }\n}\n.victoryText {\n  position: absolute;\n  color: #2eff9e;\n  top: 0.3vw;\n  left: 0.6vw;\n  width: 100%;\n  height: 100%;\n  line-height: 2.44vw;\n  opacity: 0.85;\n  text-align: left;\n  font-family: victoryScreenFont;\n  letter-spacing: 0.2vw;\n  font-size: 1.625vw;\n  text-shadow: -0.1vw -0.1vw 0 #009113, 0.1vw 0.1vw 0 #009113, 0 0 0.8vw #00ff40;\n}\n.victoryScreenLabel {\n  position: absolute;\n  color: white;\n  top: -1.6vw;\n  left: 0.5vw;\n  z-index: 3;\n  opacity: 1;\n  line-height: 1.4vw;\n  font-family: victoryScreenFont;\n  font-size: 0.9vw;\n  letter-spacing: 0.1vw;\n  text-shadow: -0.1vw -0.1vw 0 #000, 0.1vw -0.1vw 0 #000, -0.1vw 0.1vw 0 #000, 0.1vw 0.1vw 0 #000, 0 0.1vw 0 #000, 0 -0.1vw 0 #000, 0.1vw 0 0 #000, -0.1vw 0 0 #000;\n}\n@keyframes continueButtonBlinkAnim {\n  0% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 1;\n  }\n  51% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 0;\n  }\n}\n.continueButton {\n  pointer-events: auto;\n  top: 90.7%;\n}\n.victoryTextBlink {\n  text-decoration: blink;\n  animation-name: continueButtonBlinkAnim;\n  animation-duration: 0.7s;\n  animation-iteration-count: infinite;\n  animation-timing-function: linear;\n  animation-direction: alternate;\n}\n.victoryStampViewContainer {\n  position: absolute;\n  overflow: visible;\n  top: 51.4%;\n  left: 4%;\n  filter: hue-rotate(-283deg) saturate(105%) brightness(105%);\n}\n.victoryStampRow {\n  display: flex;\n  overflow: visible;\n}\n.victoryStampPixel {\n  overflow: visible;\n  width: 0.56vw;\n  height: 0.56vw;\n  margin-right: 2px;\n  margin-bottom: 2px;\n}\n.victoryScreenBG {\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0);\n  z-index: 100;\n  pointer-events: none;\n}\n.victoryScreenBGFadeOn {\n  animation-name: victoryScreenBGFadeOnAnim;\n  animation-duration: 2s;\n  animation-iteration-count: 1;\n  animation-timing-function: ease-in-out;\n  animation-fill-mode: forwards;\n  z-index: 100;\n}\n@keyframes victoryScreenBGFadeOnAnim {\n  0% {\n    background: rgba(255, 255, 255, 0);\n  }\n  50% {\n    background: #ffffff;\n  }\n  75% {\n    background: #ffffff;\n  }\n  100% {\n    background: #000000;\n  }\n}\n.victoryScreenBGFadeOff {\n  animation-name: victoryScreenBGFadeOffAnim;\n  animation-duration: 1s;\n  animation-iteration-count: 1;\n  animation-timing-function: ease-in-out;\n  animation-fill-mode: forwards;\n  z-index: 100;\n}\n@keyframes victoryScreenBGFadeOffAnim {\n  0% {\n    background: #000000;\n  }\n  100% {\n    background: rgba(0, 0, 0, 0);\n  }\n}\n.victoryLoading {\n  filter: hue-rotate(283deg);\n  width: 100%;\n  height: 100%;\n}\n.victoryLoadingTextPosition {\n  position: absolute;\n  top: 90%;\n  left: 80%;\n  font-size: 2.5vw;\n}\n.victoryScreenLoadingFadeOn {\n  animation-name: victoryScreenLoadingFadeOnAnim;\n  animation-duration: 2s;\n  animation-iteration-count: 1;\n  animation-timing-function: ease-in-out;\n  animation-fill-mode: forwards;\n}\n@keyframes victoryScreenLoadingFadeOnAnim {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n", ""]);

// exports


/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.
var React = __webpack_require__(5);
var GameStore = __webpack_require__(0);

__webpack_require__(268);

module.exports = function (_React$Component) {
    _inherits(_class, _React$Component);

    function _class() {
        _classCallCheck(this, _class);

        var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));

        _this.touchControls = GameStore.GameInstance.touchControls;
        return _this;
    }

    _createClass(_class, [{
        key: "drawStick",
        value: function drawStick(id, startPos, pos, vector, isLeftStick, drawVectorDebug) {
            var stickDraw = undefined;

            if (id >= 0) {
                var min = __webpack_require__(61);
                var max = __webpack_require__(60);
                var touchPoint = __webpack_require__(62);

                var styleMaxMin = {
                    left: startPos.x + "px",
                    top: startPos.y + "px"
                };

                var styleTouchPoint = {
                    left: pos.x + "px",
                    top: pos.y + "px"
                };

                var debugDraw = drawVectorDebug ? React.createElement(
                    "div",
                    { className: "debugDraw", style: styleMaxMin },
                    vector.x + ", " + vector.y
                ) : undefined;

                var containerClass = isLeftStick ? "leftStickContainer" : "rightStickContainer";

                stickDraw = React.createElement(
                    "div",
                    { className: containerClass },
                    debugDraw,
                    React.createElement("img", { src: max, className: "max", style: styleMaxMin }),
                    React.createElement("img", { src: touchPoint, className: "touchPoint", style: styleTouchPoint }),
                    React.createElement("img", { src: min, className: "min", style: styleMaxMin })
                );
            }

            return stickDraw;
        }
    }, {
        key: "getTouchesToDraw",
        value: function getTouchesToDraw() {
            var leftStickDraw = this.drawStick(this.touchControls.leftStickId, this.touchControls.leftStickStartPos, this.touchControls.leftStickPos, this.touchControls.leftVector, true, false);
            var rightStickDraw = this.drawStick(this.touchControls.rightStickId, this.touchControls.rightStickStartPos, this.touchControls.rightStickPos, this.touchControls.rightVector, false, false);

            return React.createElement(
                "div",
                { className: "touchControlsContainer", key: "1" },
                leftStickDraw,
                rightStickDraw
            );
        }
    }, {
        key: "render",
        value: function render() {
            if (this.touchControls.enabled) {
                this.drawTouches = this.getTouchesToDraw();

                return this.drawTouches;
            } else {
                return React.createElement("div", null);
            }
        }
    }]);

    return _class;
}(React.Component);

/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(269);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(4)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./touchControlsView.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./touchControlsView.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(3)(false);
// imports


// module
exports.push([module.i, ".touchControlsContainer {\n  pointer-events: none;\n  width: 100%;\n  height: 100%;\n}\n.touchControlsContainer .leftStickContainer {\n  width: 100%;\n  height: 100%;\n}\n.touchControlsContainer .rightStickContainer {\n  width: 100%;\n  height: 100%;\n  filter: hue-rotate(235deg);\n}\n.touchControlsContainer .debugDraw {\n  position: absolute;\n  transform: translate(-50%, -7vw);\n  color: white;\n}\n.touchControlsContainer img {\n  position: absolute;\n  width: 10vw;\n  transform: translate(-5vw, -5vw);\n}\n", ""]);

// exports


/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.

var React = __webpack_require__(5);
var GameStore = __webpack_require__(0);
var TychoCommon = __webpack_require__(10);
var LeaderboardStore = __webpack_require__(35);

__webpack_require__(271);

var LeaderboardView = function (_React$Component) {
    _inherits(LeaderboardView, _React$Component);

    function LeaderboardView() {
        _classCallCheck(this, LeaderboardView);

        return _possibleConstructorReturn(this, (LeaderboardView.__proto__ || Object.getPrototypeOf(LeaderboardView)).apply(this, arguments));
    }

    _createClass(LeaderboardView, [{
        key: "render",
        value: function render() {
            if (LeaderboardStore.firstEntry) {
                var rows = [];
                for (var i = 0; i < LeaderboardStore.maxEntries; i++) {
                    var entry = i < LeaderboardStore.sortedLeaderboard.length ? LeaderboardStore.sortedLeaderboard[i] : undefined;
                    var _style = {};
                    if ((i + 1) % 2) {
                        _style.background = "rgba(0, 0, 0, 0.5)";
                    }

                    if (entry !== undefined) {
                        var styleLevel = {};

                        if (entry.level !== undefined) {
                            var maxLevel = TychoCommon.constants.levelColors.length - 1;
                            var index = Math.min(entry.level, maxLevel);

                            styleLevel.background = "rgba(" + TychoCommon.constants.levelColors[index] + ", 0.75)";
                            styleLevel.boxShadow = "inset 0 0 0.4vw rgba(255, 255, 254, 0.7), 0 0 1vw rgb(" + TychoCommon.constants.levelColors[index] + ")";
                        }

                        rows.push(React.createElement(
                            "div",
                            { className: "leaderboardRow", key: i, style: _style },
                            React.createElement(
                                "div",
                                { className: "leaderboardEntryPlace" },
                                i + 1 + "."
                            ),
                            React.createElement(
                                "div",
                                { className: "leaderboardEntryLevel", style: styleLevel },
                                entry.level + 1
                            ),
                            React.createElement(
                                "div",
                                { className: "leaderboardEntryName" },
                                entry.name
                            ),
                            React.createElement(
                                "div",
                                { className: "leaderboardEntryScore", style: { color: entry.color } },
                                entry.score
                            )
                        ));
                    } else {
                        rows.push(React.createElement("div", { className: "leaderboardRow", key: i, style: _style }));
                    }
                }

                var totalStyle = {
                    background: "rgba(0, 0, 0, 0.5)"

                    // Add display for total participants
                };rows.push(React.createElement(
                    "div",
                    { className: "leaderboardRow", key: 11, style: totalStyle },
                    React.createElement(
                        "div",
                        { className: "leaderboardEntryTotal" },
                        "TOTAL PARTICIPANTS"
                    ),
                    React.createElement(
                        "div",
                        { className: "leaderboardEntryScore" },
                        LeaderboardStore.sortedLeaderboard.length
                    )
                ));

                // Leaderboard view is created in pixel space dimensions to line
                // up with voxel background image. It is scaled here depending on
                // resolution.
                var screenWidth = 1280;
                if (GameStore.GameInstance && GameStore.GameInstance.screenWidth) {
                    screenWidth = GameStore.GameInstance.screenWidth;
                }

                var style = {
                    transform: "scale(" + window.innerWidth / screenWidth + ")"
                };

                var className = "leaderboardContainer " + (LeaderboardStore.highlighted ? "leaderboardContainerHighlight" : "leaderboardContainerHighlightNone");

                return React.createElement(
                    "div",
                    { className: className, style: style },
                    React.createElement("div", { className: "leaderboardContainerBG" }),
                    React.createElement(
                        "div",
                        { className: "leaderboardTitle" },
                        "LEADERBOARD"
                    ),
                    rows
                );
            } else {
                return React.createElement("div", null);
            }
        }
    }]);

    return LeaderboardView;
}(React.Component);

module.exports = LeaderboardView;

/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(272);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(4)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./leaderboardView.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./leaderboardView.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

var escape = __webpack_require__(9);
exports = module.exports = __webpack_require__(3)(false);
// imports


// module
exports.push([module.i, ".leaderboardContainer {\n  display: block;\n  position: absolute;\n  top: 27%;\n  left: 1.25%;\n  margin: 0px;\n  padding: 0px;\n  transform-origin: top left;\n  pointer-events: none;\n  width: calc(40 * 6px + 1);\n  height: calc(38 * 6px + 1);\n  overflow: hidden;\n  z-index: -1;\n  background-image: url(" + escape(__webpack_require__(57)) + ");\n  background-repeat: repeat;\n  background-size: 6px 6px;\n  animation: leaderboardTurnOn 0.6s ease-in-out;\n  animation-fill-mode: forwards;\n}\n.leaderboardContainer .leaderboardTitle {\n  height: calc(6px * 3);\n  margin-left: 6px;\n  margin-right: 6px;\n  padding: 6px;\n  opacity: 0.9;\n  border: 0px;\n  color: white;\n  font-size: calc(6px * 4.1667);\n  line-height: calc(6px * 4.1667 * 0.56);\n  font-family: buffMeterFont;\n  text-shadow: -0.1vw -0.1vw 0 #000, 0.1vw -0.1vw 0 #000, -0.1vw 0.1vw 0 #000, 0.1vw 0.1vw 0 #000;\n}\n.leaderboardContainer .leaderboardRow {\n  display: flex;\n  width: 100%;\n  height: calc(6px * 3);\n  line-height: calc(6px * 2.667);\n  box-sizing: border-box;\n  margin: 0px;\n  padding: 0px;\n  overflow: hidden;\n  opacity: 0.9;\n  color: white;\n  text-align: left;\n  font-size: calc(6px * 2.4);\n  font-family: buffMeterFont;\n  text-shadow: -0.1vw -0.1vw 0 #000, 0.1vw -0.1vw 0 #000, -0.1vw 0.1vw 0 #000, 0.1vw 0.1vw 0 #000;\n}\n.leaderboardContainer .leaderboardRow .leaderboardEntryTotal {\n  flex: 74;\n  margin-left: 6px;\n  margin-right: 6px;\n}\n.leaderboardContainer .leaderboardRow .leaderboardEntryPlace {\n  flex: 8.7;\n  margin-left: 6px;\n}\n.leaderboardContainer .leaderboardRow .leaderboardEntryLevel {\n  flex: 11;\n  text-align: center;\n}\n.leaderboardContainer .leaderboardRow .leaderboardEntryName {\n  flex: 47.5;\n  overflow: hidden;\n  margin-left: 6px;\n  margin-right: 6px;\n  box-sizing: border-box;\n}\n.leaderboardContainer .leaderboardRow .leaderboardEntryScore {\n  flex: 32.8;\n  overflow: hidden;\n  margin-right: calc(6px * 1.5);\n  text-align: right;\n}\n.leaderboardContainerHighlight {\n  animation: leaderboardHighlight 0.334s ease-in-out;\n  animation-iteration-count: 5;\n}\n.leaderboardContainerHighlightNone {\n  animation: none;\n}\n@keyframes leaderboardHighlight {\n  0% {\n    filter: hue-rotate(0) brightness(1);\n  }\n  50% {\n    filter: hue-rotate(90deg) brightness(3);\n  }\n  100% {\n    filter: hue-rotate(0) brightness(1);\n  }\n}\n@keyframes leaderboardTurnOn {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 0.9;\n  }\n}\n", ""]);

// exports


/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Â© 2019 Twitch Interactive, Inc. or its affiliates. All Rights Reserved.

var React = __webpack_require__(5);
var Utils = __webpack_require__(2);
var GameStore = __webpack_require__(0);
var CollapsableWindow = __webpack_require__(30);
var DrawCollapsableWindow = __webpack_require__(31);
var DrawWebcamHint = __webpack_require__(67);
var GenericButton = __webpack_require__(29);
var DrawGenericButton = __webpack_require__(37);
var DrawOptionsMenu = __webpack_require__(68);
var StringStore = __webpack_require__(11);
var Nimble = __webpack_require__(6);

__webpack_require__(274);

var MainMenuButtonContent = function (_React$Component) {
    _inherits(MainMenuButtonContent, _React$Component);

    function MainMenuButtonContent() {
        _classCallCheck(this, MainMenuButtonContent);

        return _possibleConstructorReturn(this, (MainMenuButtonContent.__proto__ || Object.getPrototypeOf(MainMenuButtonContent)).apply(this, arguments));
    }

    _createClass(MainMenuButtonContent, [{
        key: "render",
        value: function render() {
            return React.createElement(
                "div",
                { className: "mainMenuButtonContent", tooltip: this.props.title, "tooltip-text-size": "pixel" },
                this.props.text
            );
        }
    }]);

    return MainMenuButtonContent;
}(React.Component);

var MainMenuView = function (_React$Component2) {
    _inherits(MainMenuView, _React$Component2);

    function MainMenuView() {
        _classCallCheck(this, MainMenuView);

        var _this2 = _possibleConstructorReturn(this, (MainMenuView.__proto__ || Object.getPrototypeOf(MainMenuView)).call(this));

        _this2.MainMenu = GameStore.mainMenu;
        _this2.MainMenu.view = _this2;
        _this2.OptionsMenu = GameStore.optionsMenu;

        _this2.checklistRefreshIntervalMs = 1000;

        _this2.lastBGUpdate = 0;
        _this2.cellSize = 64;
        _this2.cellColors = [{ r: 8, g: 125, b: 107 }, { r: 86, g: 125, b: 71 }, { r: 125, g: 55, b: 73 }, { r: 125, g: 39, b: 107 }, { r: 80, g: 40, b: 123 }, { r: 52, g: 39, b: 110 }, { r: 54, g: 100, b: 124 }];
        _this2.cellStates = [];

        _this2.twitchPlayCW = new CollapsableWindow(8, 36.44, 49, 59, SetupChecklistView, -0.6, 36.44, 8, 12, true, true, false, undefined, "./gui/twitchIcon.png", "twitchIcon");

        _this2.loginButton = new GenericButton(51, 9, MainMenuButtonContent, StringStore.UI.LOGIN, false, undefined, undefined, undefined, _this2.MainMenu.reAuthClick.bind(_this2.MainMenu), "mainMenuButton");

        _this2.loggingInButton = new GenericButton(51, 9, MainMenuButtonContent, StringStore.UI.LOGGING_IN, false, undefined, undefined, undefined, undefined, "mainMenuButton", undefined, undefined, true);

        _this2.newGameButton = new GenericButton(51, 9, MainMenuButtonContent, StringStore.UI.NEW_GAME, false, undefined, undefined, undefined, _this2.MainMenu.newGameClick.bind(_this2.MainMenu), "mainMenuButton");

        _this2.newGameButtonDisabled = new GenericButton(51, 9, MainMenuButtonContent, StringStore.UI.NEW_GAME, false, undefined, undefined, undefined, undefined, "mainMenuButton", undefined, undefined, true);

        _this2.offlineGameButton = new GenericButton(51, 9, MainMenuButtonContent, StringStore.UI.OFFLINE_GAME, false, undefined, undefined, undefined, _this2.MainMenu.offlineGameClick.bind(_this2.MainMenu), "mainMenuButton");

        _this2.optionsButton = new GenericButton(51, 9, MainMenuButtonContent, StringStore.UI.OPTIONS, false, undefined, undefined, undefined, _this2.OptionsMenu.openClick.bind(_this2.OptionsMenu), "mainMenuButton");

        _this2.creditsButton = new GenericButton(51, 9, MainMenuButtonContent, StringStore.UI.CREDITS, false, undefined, undefined, undefined, _this2.MainMenu.creditsClick.bind(_this2.MainMenu), "mainMenuButton");

        _this2.downloadButtonDisabled = new GenericButton(51, 9, MainMenuButtonContent, StringStore.UI.DOWNLOAD, false, StringStore.TOOLTIP.DOWNLOAD, undefined, undefined, undefined, "mainMenuButton", undefined, undefined, true);

        _this2.downloadButton = new GenericButton(51, 9, MainMenuButtonContent, StringStore.UI.DOWNLOAD, false, StringStore.TOOLTIP.DOWNLOAD, undefined, undefined, _this2.MainMenu.downloadClick.bind(_this2.MainMenu), "mainMenuButton");

        _this2.helpButton = new GenericButton(51, 9, MainMenuButtonContent, StringStore.UI.HELP, false, StringStore.TOOLTIP.HELP, undefined, undefined, _this2.MainMenu.helpClick.bind(_this2.MainMenu), "mainMenuButton");

        _this2.returnMMButton = new GenericButton(26, 9, MainMenuButtonContent, "RETURN", false, undefined, undefined, undefined, _this2.MainMenu.returnClick.bind(_this2.MainMenu), "mainMenuButton");

        _this2.calibrateContinueButton = new GenericButton(56, 11, MainMenuButtonContent, "CONTINUE", false, undefined, undefined, undefined, _this2.MainMenu.calibrateContinueClick.bind(_this2.MainMenu), "mainMenuButton");
        return _this2;
    }

    _createClass(MainMenuView, [{
        key: "componentWillMount",
        value: function componentWillMount() {
            var _this3 = this;

            if (this.MainMenu.hasAuth) {
                GameStore.twitchManager.refreshStreamingInfo();
                GameStore.twitchManager.refreshInstalledExtensionList();
                GameStore.twitchManager.refreshExtensionInfo();
            }

            this.streamInfoIntervalHandle = setInterval(function () {
                if (_this3.MainMenu.hasAuth) {
                    Promise.all([GameStore.twitchManager.refreshStreamingInfo(), GameStore.twitchManager.refreshInstalledExtensionList(), GameStore.twitchManager.refreshExtensionInfo()]);
                }
            }, this.checklistRefreshIntervalMs);
        }
    }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
            clearInterval(this.streamInfoIntervalHandle);
        }
    }, {
        key: "showSupportedBrowsers",
        value: function showSupportedBrowsers() {
            return React.createElement(
                "div",
                { id: "menu_content" },
                React.createElement("img", { className: "menu_logo", src: "gui/Logo.png" }),
                React.createElement(
                    "div",
                    { className: "messageContainer" },
                    StringStore.UI.SUPPORTED
                )
            );
        }
    }, {
        key: "showCloseWindow",
        value: function showCloseWindow() {
            if (this.MainMenu.showCloseMessage) {
                var style = {
                    top: "36vw"
                };

                return React.createElement(
                    "div",
                    { className: "messageContainer", style: style },
                    StringStore.UI.CLOSE_LOCKED
                );
            } else {
                return React.createElement("div", null);
            }
        }
    }, {
        key: "showChromeOBSWarning",
        value: function showChromeOBSWarning() {
            // This is to detect when started from the Tycho-Launcher
            var isStandalone = window.matchMedia("(display-mode: standalone)").matches;

            if (!isStandalone && !this.MainMenu.showCloseMessage && (!this.MainMenu.waitingForAuthResponse || !this.hasCode) && this.MainMenu.isChrome && this.MainMenu.easyStreamingOpacity <= 0) {
                if (this.obsWarnRender === undefined) {
                    var style = {
                        textAlign: "left",
                        top: "46vw",
                        left: "24.7vw",
                        width: "48vw",
                        height: "5.2vw",
                        whiteSpace: "pre",
                        paddingTop: "0.4vw",
                        fontSize: "0.95vw",
                        userSelect: "text"
                    };

                    this.obsWarnRender = React.createElement(
                        "div",
                        { className: "messageContainer", style: style },
                        StringStore.UI.CHROME_OBS,
                        React.createElement(
                            "a",
                            { href: "https://collaborativegame.com/tycho-website/index.html?faq=streamer#chromeCapture", target: "_blank" },
                            "Click here"
                        ),
                        " for information on how to work around the issue."
                    );
                }

                return this.obsWarnRender;
            } else {
                return React.createElement("div", null);
            }
        }
    }, {
        key: "showEasyStreaming",
        value: function showEasyStreaming() {
            if (!this.MainMenu.waitingForAuthResponse && this.MainMenu.easyStreamingOpacity > 0) {
                if (this.lockedMessage === undefined) {
                    var style = {
                        opacity: this.MainMenu.easyStreamingOpacity,
                        top: "46vw"
                    };

                    this.lockedMessage = React.createElement(
                        "div",
                        { className: "messageContainer", style: style },
                        StringStore.UI.LOCKED
                    );
                }

                return this.lockedMessage;
            } else {
                return React.createElement("div", null);
            }
        }
    }, {
        key: "showLoginFailed",
        value: function showLoginFailed() {
            if (this.MainMenu.waitingForAuthResponse) {
                return React.createElement("div", null);
            }

            var style = {
                top: "46vw"
            };

            return React.createElement(
                "div",
                { className: "messageContainer", style: style },
                StringStore.UI.LOGIN_FAILED
            );
        }
    }, {
        key: "getLoginOrStartButton",
        value: function getLoginOrStartButton() {
            if (!this.MainMenu.hasAuth) {
                if (this.MainMenu.hasCode && this.MainMenu.waitingForAuthResponse) {
                    return React.createElement(DrawGenericButton, { gb: this.loggingInButton });
                } else {
                    return React.createElement(DrawGenericButton, { gb: this.loginButton });
                }
            } else {
                if (this.MainMenu.getIsStreamingGameAllowed()) {
                    return React.createElement(DrawGenericButton, { gb: this.newGameButton });
                } else {
                    return React.createElement(DrawGenericButton, { gb: this.newGameButtonDisabled });
                }
            }
        }
    }, {
        key: "getLogoutButton",
        value: function getLogoutButton() {
            var _this4 = this;

            if (this.MainMenu.hasAuth) {
                return React.createElement(
                    "div",
                    { className: "mainMenuButton vox_font hue_rotate_button_bg", href: "#", onClick: function onClick() {
                            _this4.MainMenu.logoutClick();
                        } },
                    "Logout"
                );
            } else {
                return undefined;
            }
        }
    }, {
        key: "renderBG",
        value: function renderBG() {
            if (this.MainMenu.showCloseMessage && this.MainMenu.menuOpacity <= 0) {
                return React.createElement("div", null);
            }

            this.timeMs = Date.now();

            // Update at 30 fps
            if (this.timeMs - this.lastBGUpdate < 30.334) {
                return this.renderedBG;
            }

            this.lastBGUpdate = this.timeMs;

            var windowPixelWidth = window.innerWidth;
            var windowPixelHeight = window.innerHeight;
            var cellSize = this.cellSize * (windowPixelWidth / 1280);
            var numCellsWide = Math.ceil(windowPixelWidth / cellSize);
            var numCellsTall = Math.ceil(windowPixelHeight / cellSize);
            var totalCells = numCellsWide * numCellsTall;

            var cells = [];

            var style = {
                width: windowPixelWidth + "px",
                height: windowPixelHeight + "px"
            };

            for (var i = 0; i < totalCells; i++) {
                cells.push(this.cellAutomata(i, cellSize));
            }

            this.renderedBG = React.createElement(
                "div",
                { className: "mainMenuBG", style: style },
                cells
            );

            return this.renderedBG;
        }
    }, {
        key: "cellAutomata",
        value: function cellAutomata(i, cellSize) {
            // If this is a new cell, add it
            if (i >= this.cellStates.length) {
                this.cellStates.push({ time: Math.random() * this.cellColors.length % this.cellColors.length });
            }

            if (i < this.cellStates.length) {
                var timeOffset = this.cellStates[i].time;
                var time = this.timeMs / 1000 * 3;
                var timeSlice = (time + timeOffset) % this.cellColors.length;
                var colorIndexA = Math.floor(timeSlice);
                var colorIndexB = Math.ceil(timeSlice) % this.cellColors.length;
                var percentBetween = timeSlice - colorIndexA;
                var colorA = this.cellColors[colorIndexA];
                var colorB = this.cellColors[colorIndexB];
                var style = undefined;

                if (percentBetween > 0) {
                    var r = Utils.Lerp(colorA.r, colorB.r, percentBetween);
                    var g = Utils.Lerp(colorA.g, colorB.g, percentBetween);
                    var b = Utils.Lerp(colorA.b, colorB.b, percentBetween);
                    style = {
                        background: "rgb(" + r + ", " + g + ", " + b + ")",
                        width: cellSize + "px",
                        height: cellSize + "px"
                    };
                } else {
                    style = {
                        background: "rgb(" + colorA.r + ", " + colorA.g + ", " + colorA.b + ")",
                        width: cellSize + "px",
                        height: cellSize + "px"
                    };
                }

                return React.createElement("div", { className: "mainMenuBGCell", key: i, style: style });
            } else {
                console.log("Error: This should never happen. Attempt to render non-existing cell.");
            }
        }
    }, {
        key: "renderVersion",
        value: function renderVersion() {
            return React.createElement(
                "div",
                { className: "mainMenuVersionContainer", tooltip: "Ooooh... so early!" },
                React.createElement(
                    "div",
                    { className: "mainMenuVersion", style: { top: "0vw" } },
                    StringStore.UI.VERSION_LABEL_PRE
                ),
                React.createElement(
                    "div",
                    { className: "mainMenuVersion" },
                    StringStore.UI.VERSION_LABEL + "_" + GameStore.getVersion()
                )
            );
        }
    }, {
        key: "renderGreeting",
        value: function renderGreeting() {
            var usernameTitle = Nimble.twitch.store.streamer.name ? Nimble.twitch.store.streamer.name : undefined;
            if (usernameTitle !== undefined) {
                return React.createElement(
                    "div",
                    { className: "mainMenuGreeting" },
                    StringStore.UI.GREETING + " " + usernameTitle,
                    React.createElement("br", null),
                    React.createElement(
                        "a",
                        { target: "_blank", href: "https://www.twitch.tv/" },
                        StringStore.UI.LOGOUT
                    )
                );
            } else {
                return React.createElement("div", null);
            }
        }
    }, {
        key: "renderCopyrightOld",
        value: function renderCopyrightOld() {
            return React.createElement(
                "div",
                { className: "copyrightContainer" },
                StringStore.UI.COPYRIGHT
            );
        }
    }, {
        key: "isWindows",
        value: function isWindows() {
            return navigator.platform.indexOf("Win") > -1;
        }
    }, {
        key: "renderCopyright",
        value: function renderCopyright() {
            var isLoggingIn = this.MainMenu.hasCode && this.MainMenu.waitingForAuthResponse;

            if (!Nimble.twitch.store.streamer.name && !isLoggingIn) {
                return React.createElement(
                    "div",
                    { className: "copyrightContainer" },
                    "By continuing, you agree to the ",
                    React.createElement(
                        "a",
                        { href: "https://www.collaborativegame.com/tycho-website/eula.txt", target: "_blank" },
                        "terms"
                    ),
                    " and ",
                    React.createElement(
                        "a",
                        { href: "https://amzn.to/2WqHiDu", target: "_blank" },
                        "privacy policy"
                    ),
                    "."
                );
            }

            return undefined;
        }
    }, {
        key: "render",
        value: function render() {
            if (this.MainMenu.drawCredits) {
                return React.createElement(
                    "div",
                    { className: "mainMenuContainer" },
                    React.createElement(
                        "div",
                        { id: "menu_content" },
                        React.createElement("img", { className: "menu_logo", src: "gui/Logo.png" }),
                        React.createElement(
                            "div",
                            { className: "creditsContainer" },
                            React.createElement(
                                "div",
                                { className: "creditsColumn" },
                                React.createElement(
                                    "div",
                                    { className: "creditsTitle" },
                                    "LEAD DESIGNER / ART"
                                ),
                                React.createElement(
                                    "div",
                                    { className: "creditsName" },
                                    "Dorian Gorski"
                                ),
                                React.createElement(
                                    "div",
                                    { className: "creditsTitle" },
                                    "DESIGN DIRECTOR"
                                ),
                                React.createElement(
                                    "div",
                                    { className: "creditsName" },
                                    "Stephen Desilets"
                                ),
                                React.createElement(
                                    "div",
                                    { className: "creditsTitle" },
                                    "PRODUCT MANAGERS"
                                ),
                                React.createElement(
                                    "div",
                                    { className: "creditsName" },
                                    "Vikrant Agarwal"
                                ),
                                React.createElement(
                                    "div",
                                    { className: "creditsName" },
                                    "Jeff Combos"
                                ),
                                React.createElement(
                                    "div",
                                    { className: "creditsName" },
                                    "Kate Distler"
                                ),
                                React.createElement(
                                    "div",
                                    { className: "creditsTitle" },
                                    "QA MANAGER"
                                ),
                                React.createElement(
                                    "div",
                                    { className: "creditsName" },
                                    "DJ Stiner"
                                )
                            ),
                            React.createElement(
                                "div",
                                { className: "creditsColumn" },
                                React.createElement(
                                    "div",
                                    { className: "creditsTitle" },
                                    "LEAD PROGRAMMER"
                                ),
                                React.createElement(
                                    "div",
                                    { className: "creditsName" },
                                    "Ryan Young"
                                ),
                                React.createElement(
                                    "div",
                                    { className: "creditsTitle" },
                                    "PROGRAMMERS"
                                ),
                                React.createElement(
                                    "div",
                                    { className: "creditsName" },
                                    "Barrett Hinson"
                                ),
                                React.createElement(
                                    "div",
                                    { className: "creditsName" },
                                    "Andrew McPherson"
                                ),
                                React.createElement(
                                    "div",
                                    { className: "creditsName" },
                                    "Forrest Pruitt"
                                ),
                                React.createElement(
                                    "div",
                                    { className: "creditsName" },
                                    "Kurban Slonim"
                                ),
                                React.createElement(
                                    "div",
                                    { className: "creditsTitle" },
                                    "QUALITY ASSURANCE"
                                ),
                                React.createElement(
                                    "div",
                                    { className: "creditsName" },
                                    "Angel Ayala"
                                ),
                                React.createElement(
                                    "div",
                                    { className: "creditsName" },
                                    "Anna Bumgarner"
                                ),
                                React.createElement(
                                    "div",
                                    { className: "creditsName" },
                                    "Aaron Dona"
                                )
                            ),
                            React.createElement(
                                "div",
                                { className: "creditsColumn" },
                                React.createElement(
                                    "div",
                                    { className: "creditsTitle" },
                                    "QUALITY ASSURANCE"
                                ),
                                React.createElement(
                                    "div",
                                    { className: "creditsName" },
                                    "Jonathan Sokol"
                                ),
                                React.createElement(
                                    "div",
                                    { className: "creditsName" },
                                    "Phoenix Warr"
                                ),
                                React.createElement(
                                    "div",
                                    { className: "creditsTitle" },
                                    "MARKETING"
                                ),
                                React.createElement(
                                    "div",
                                    { className: "creditsName" },
                                    "Jon Grande"
                                ),
                                React.createElement(
                                    "div",
                                    { className: "creditsTitle" },
                                    "EXECUTIVE PRODUCER"
                                ),
                                React.createElement(
                                    "div",
                                    { className: "creditsName" },
                                    "Alan Wasserman"
                                ),
                                React.createElement(
                                    "div",
                                    { className: "creditsTitle" },
                                    "SPECIAL THANKS"
                                ),
                                React.createElement(
                                    "div",
                                    { className: "creditsName" },
                                    "Max the Dog"
                                )
                            )
                        ),
                        React.createElement(
                            "div",
                            { className: "creditsReturnButtonContainer" },
                            React.createElement(DrawGenericButton, { gb: this.returnMMButton })
                        )
                    )
                );
            }

            if (this.MainMenu.takeDown) {
                var styleButtonContainer = {
                    opacity: 1.0
                };

                var styleBG = {
                    background: "rgba(0, 0, 0, 0)",
                    pointerEvents: "none",
                    width: "100%",
                    height: "100%",
                    position: "absolute",
                    top: "0"
                };

                return React.createElement(
                    "div",
                    { className: "mainMenuContainer" },
                    this.renderBG(),
                    React.createElement(
                        "div",
                        { id: "menu_content" },
                        this.renderCopyright(),
                        this.renderVersion(),
                        React.createElement("img", { className: "menu_logo", src: "gui/Logo.png" }),
                        React.createElement(
                            "div",
                            { className: "mainMenuTakeDownContainer" },
                            React.createElement(
                                "div",
                                { className: "mainMenuTakeDownMessageContainer" },
                                StringStore.UI.TAKE_DOWN_MSG
                            ),
                            React.createElement(
                                "div",
                                { className: "mainMenuTakeDownMessageContainer" },
                                StringStore.UI.TAKE_DOWN_UPDATES,
                                React.createElement(
                                    "a",
                                    { href: "https://www.twitch.tv/collaborative", target: "_blank" },
                                    StringStore.UI.TAKE_DOWN_LINK
                                )
                            )
                        )
                    ),
                    React.createElement("div", { style: styleBG })
                );
            }

            if (this.MainMenu.showCalibrateScreen) {
                var calibrateButton = undefined;
                if (this.MainMenu.showCalibrateButton) {
                    calibrateButton = React.createElement(
                        "div",
                        { className: "calibrateButtonContainer" },
                        React.createElement(DrawGenericButton, { gb: this.calibrateContinueButton })
                    );
                }

                return React.createElement(
                    "div",
                    { className: "mainMenuCalibrate" },
                    React.createElement("img", { className: "arrowTopLeft", src: "gui/screenAlignment.png" }),
                    React.createElement("img", { className: "arrowTopRight", src: "gui/screenAlignment.png" }),
                    React.createElement("img", { className: "arrowBottomLeft", src: "gui/screenAlignment.png" }),
                    React.createElement("img", { className: "arrowBottomRight", src: "gui/screenAlignment.png" }),
                    React.createElement(
                        "div",
                        { className: "calibrateInstructions" },
                        React.createElement(
                            "div",
                            null,
                            "The game must completely fill the video player on Twitch for your viewers to properly play."
                        ),
                        React.createElement("br", null),
                        React.createElement(
                            "div",
                            null,
                            "Please take a moment to line up the arrows in your streaming software. You should still see the magenta borders if aligned properly."
                        )
                    ),
                    calibrateButton
                );
            }

            if (this.MainMenu.validBrowser) {
                var _styleButtonContainer = {
                    opacity: this.MainMenu.showCloseMessage ? this.MainMenu.menuOpacity : 1.0
                };

                var _styleBG = {
                    background: this.MainMenu.showCloseMessage ? "rgba(0, 0, 0, " + (1 - this.MainMenu.menuOpacity) + ")" : "rgba(0, 0, 0, 0)",
                    pointerEvents: this.MainMenu.showCloseMessage ? "auto" : "none",
                    width: "100%",
                    height: "100%",
                    position: "absolute",
                    top: "0"
                };

                var showFailMessage = this.MainMenu.loginFailed ? this.showLoginFailed() : React.createElement("div", null);

                this.offlineGameButton.disabled = this.MainMenu.waitingForAuthResponse && this.MainMenu.hasCode;

                var helpButton = React.createElement(
                    "div",
                    { className: "mainMenuButtonContainer", style: _styleButtonContainer },
                    React.createElement(DrawGenericButton, { gb: this.helpButton })
                );

                var isLockedWindow = GameStore.mainMenu.getIsLockedWindow();
                var webCamHint = isLockedWindow ? React.createElement(DrawWebcamHint, null) : undefined;

                return React.createElement(
                    "div",
                    { className: "mainMenuContainer" },
                    this.renderBG(),
                    React.createElement(
                        "div",
                        { id: "menu_content" },
                        this.renderCopyright(),
                        this.renderGreeting(),
                        this.renderVersion(),
                        webCamHint,
                        React.createElement("img", { className: "menu_logo", src: "gui/Logo.png" }),
                        React.createElement(
                            "div",
                            { className: "mainMenuButtonsContainer" },
                            React.createElement(
                                "div",
                                { className: "mainMenuButtonContainer", style: _styleButtonContainer },
                                this.getLoginOrStartButton()
                            ),
                            React.createElement(
                                "div",
                                { className: "mainMenuButtonContainer", style: _styleButtonContainer },
                                React.createElement(DrawGenericButton, { gb: this.offlineGameButton })
                            ),
                            React.createElement(
                                "div",
                                { className: "mainMenuButtonContainer", style: _styleButtonContainer },
                                React.createElement(DrawGenericButton, { gb: this.optionsButton })
                            ),
                            helpButton,
                            React.createElement(
                                "div",
                                { className: "mainMenuButtonContainer", style: _styleButtonContainer },
                                React.createElement(DrawGenericButton, { gb: this.creditsButton })
                            )
                        ),
                        React.createElement(DrawOptionsMenu, null),
                        React.createElement(DrawCollapsableWindow, { cw: this.twitchPlayCW }),
                        this.showEasyStreaming(),
                        this.showChromeOBSWarning(),
                        this.showCloseWindow()
                    ),
                    showFailMessage,
                    React.createElement("div", { style: _styleBG })
                );
            } else {
                return React.createElement(
                    "div",
                    { className: "mainMenuContainer" },
                    this.showSupportedBrowsers()
                );
            }
        }
    }]);

    return MainMenuView;
}(React.Component);

module.exports = MainMenuView;

var CheckListButtonContent = function (_React$Component3) {
    _inherits(CheckListButtonContent, _React$Component3);

    function CheckListButtonContent() {
        _classCallCheck(this, CheckListButtonContent);

        return _possibleConstructorReturn(this, (CheckListButtonContent.__proto__ || Object.getPrototypeOf(CheckListButtonContent)).apply(this, arguments));
    }

    _createClass(CheckListButtonContent, [{
        key: "render",
        value: function render() {
            return React.createElement(
                "div",
                { className: "setupChecklistButtonContent", tooltip: this.props.title, "tooltip-text-size": "pixel" },
                this.props.text
            );
        }
    }]);

    return CheckListButtonContent;
}(React.Component);

var SetupChecklistView = function (_React$Component4) {
    _inherits(SetupChecklistView, _React$Component4);

    function SetupChecklistView() {
        _classCallCheck(this, SetupChecklistView);

        var _this6 = _possibleConstructorReturn(this, (SetupChecklistView.__proto__ || Object.getPrototypeOf(SetupChecklistView)).call(this));

        _this6.openLockedWindowButton = new GenericButton(26, 6, CheckListButtonContent, StringStore.UI.OPEN_16, false, undefined, undefined, undefined, GameStore.mainMenu.openLockedAspectRatioWindowClick.bind(GameStore.mainMenu), "checklistButton", undefined, undefined, false, true);

        _this6.loginButton = new GenericButton(11, 6, CheckListButtonContent, StringStore.UI.LOGIN_S, false, undefined, undefined, undefined, GameStore.mainMenu.reAuthClick.bind(GameStore.mainMenu), "checklistButton", undefined, undefined, false, true);

        _this6.installButton = new GenericButton(13, 6, CheckListButtonContent, StringStore.UI.INSTALL, false, undefined, undefined, undefined, GameStore.mainMenu.gotoExtensionInstallPage.bind(GameStore.mainMenu), "checklistButton", undefined, undefined, false, true);

        _this6.activateButton = new GenericButton(10.5, 6, CheckListButtonContent, StringStore.UI.ACTIVATE, false, "This will activate the game extension and deactivate\nany other component or overlay extensions.", undefined, undefined, GameStore.mainMenu.setExtensionOnChannel.bind(GameStore.mainMenu), "checklistButton", undefined, undefined, false, true);

        _this6.lowLatencyButton = new GenericButton(11, 6, CheckListButtonContent, StringStore.UI.CHECK, false, undefined, undefined, undefined, GameStore.mainMenu.lowLatencyClick.bind(GameStore.mainMenu), "checklistButton", undefined, undefined, false, true);
        return _this6;
    }

    _createClass(SetupChecklistView, [{
        key: "render",
        value: function render() {
            var count = 1;
            var isLockedWindow = GameStore.mainMenu.getIsLockedWindow();
            var openLockedWindowButton = isLockedWindow ? undefined : React.createElement(
                "div",
                { className: "buttonItem" },
                React.createElement(DrawGenericButton, { gb: this.openLockedWindowButton })
            );
            count = isLockedWindow ? count + 1 : count + 2;

            var isLoggedIn = GameStore.mainMenu.hasAuth;
            var isLoggingIn = GameStore.mainMenu && GameStore.mainMenu.hasCode && GameStore.mainMenu.waitingForAuthResponse;
            var loginButton = isLoggedIn || isLoggingIn ? undefined : React.createElement(
                "div",
                { className: "buttonItem" },
                React.createElement(DrawGenericButton, { gb: this.loginButton })
            );
            count = isLoggedIn ? count + 1 : count + 2;

            var isStreaming = GameStore.mainMenu.getIsStreaming();

            var isInstalled = GameStore.twitchManager.getIsExtensionInstalled();
            var installButton = isInstalled ? undefined : React.createElement(
                "div",
                { className: "buttonItem" },
                React.createElement(DrawGenericButton, { gb: this.installButton })
            );
            count = isInstalled ? count + 1 : count + 2;

            var isActivated = GameStore.mainMenu.getIsExtensionEnabled();
            var activateButton = isActivated ? undefined : React.createElement(
                "div",
                { className: "buttonItem" },
                React.createElement(DrawGenericButton, { gb: this.activateButton })
            );
            count = isActivated ? count + 1 : count + 2;

            var isReadyForLowLatencyMessage = isLockedWindow && isLoggedIn;
            var lowLatencyButton = !isReadyForLowLatencyMessage ? undefined : React.createElement(
                "div",
                { className: "buttonItem" },
                React.createElement(DrawGenericButton, { gb: this.lowLatencyButton })
            );
            count = isReadyForLowLatencyMessage ? count + 1 : count + 2;

            var lowLatencyMessage = isReadyForLowLatencyMessage ? React.createElement(
                "div",
                { className: "item" },
                React.createElement(
                    "div",
                    { className: "itemTitle" },
                    StringStore.UI.LOW_LATENCY
                )
            ) : undefined;

            return React.createElement(
                "div",
                { className: "setupChecklistView", tooltip: StringStore.TOOLTIP.TWITCH_PLAY, "tooltip-text-size": "pixel" },
                StringStore.UI.CHECKLIST,
                React.createElement(
                    "div",
                    { className: "item" },
                    React.createElement(
                        "div",
                        { className: "itemTitle" },
                        StringStore.UI.RESOLUTION
                    ),
                    React.createElement(
                        "div",
                        { className: isLockedWindow ? "itemPass" : "itemWarn" },
                        isLockedWindow ? "true" : "false"
                    )
                ),
                openLockedWindowButton,
                React.createElement(
                    "div",
                    { className: "item" },
                    React.createElement(
                        "div",
                        { className: "itemTitle" },
                        StringStore.UI.LOGGED_IN
                    ),
                    React.createElement(
                        "div",
                        { className: isLoggedIn ? "itemPass" : "itemFail" },
                        isLoggedIn ? "true" : "false"
                    )
                ),
                loginButton,
                React.createElement(
                    "div",
                    { className: "item" },
                    React.createElement(
                        "div",
                        { className: "itemTitle" },
                        StringStore.UI.STREAM_DETECTED
                    ),
                    React.createElement(
                        "span",
                        { className: isStreaming ? "itemPass" : "itemFail" },
                        isStreaming ? "true" : "false"
                    )
                ),
                React.createElement(
                    "div",
                    { className: "item" },
                    React.createElement(
                        "div",
                        { className: "itemTitle" },
                        StringStore.UI.EXT_INSTALLED
                    ),
                    React.createElement(
                        "span",
                        { className: isInstalled ? "itemPass" : "itemFail" },
                        isInstalled ? "true" : "false"
                    )
                ),
                installButton,
                React.createElement(
                    "div",
                    { className: "item" },
                    React.createElement(
                        "div",
                        { className: "itemTitle" },
                        StringStore.UI.EXT_ACTIVATED
                    ),
                    React.createElement(
                        "span",
                        { className: isActivated ? "itemPass" : "itemWarn" },
                        isActivated ? "true" : "false"
                    )
                ),
                activateButton,
                lowLatencyMessage,
                lowLatencyButton
            );
        }
    }]);

    return SetupChecklistView;
}(React.Component);

/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(275);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(4)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./mainMenuView.less", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./mainMenuView.less");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

var escape = __webpack_require__(9);
exports = module.exports = __webpack_require__(3)(false);
// imports


// module
exports.push([module.i, "@font-face {\n  font-family: vox;\n  src: url(" + escape(__webpack_require__(28)) + ");\n}\n@font-face {\n  font-family: greetingFont;\n  src: url(" + escape(__webpack_require__(15)) + ");\n}\n@font-face {\n  font-family: labelFont;\n  src: url(" + escape(__webpack_require__(276)) + ");\n}\n.vox_font {\n  font-family: vox;\n}\n.mainMenuCalibrate {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  border: 1px solid #ff00ff;\n  box-sizing: border-box;\n  background: #000;\n}\n.mainMenuCalibrate .arrowTopLeft {\n  position: absolute;\n  width: 15vw;\n  top: 0px;\n  left: 0px;\n}\n.mainMenuCalibrate .arrowTopRight {\n  position: absolute;\n  width: 15vw;\n  top: 0px;\n  right: 0px;\n  transform: scale(-1, 1);\n}\n.mainMenuCalibrate .arrowBottomLeft {\n  position: absolute;\n  width: 15vw;\n  bottom: 0px;\n  left: 0px;\n  transform: scale(1, -1);\n}\n.mainMenuCalibrate .arrowBottomRight {\n  position: absolute;\n  width: 15vw;\n  bottom: 0px;\n  right: 0px;\n  transform: scale(-1, -1);\n}\n.mainMenuCalibrate .calibrateInstructions {\n  position: absolute;\n  left: 19vw;\n  top: 20vw;\n  width: 62vw;\n  font-size: 1.5vw;\n  font-family: greetingFont;\n  font-weight: normal;\n  text-shadow: 1px 1px #21373f, -1px 1px rgba(0, 0, 0, 0.25), -1px -1px rgba(0, 0, 0, 0.25), -1px 0px rgba(0, 0, 0, 0.25), 0px -1px rgba(0, 0, 0, 0.25);\n  animation-name: hue_rotate_logo_ds_anim;\n  animation-duration: 7s;\n  animation-iteration-count: infinite;\n  animation-timing-function: ease-in-out;\n}\n.mainMenuCalibrate .calibrateButtonContainer {\n  position: absolute;\n  left: 36.5vw;\n  top: 40vw;\n  width: 27vw;\n  height: 6vw;\n  animation-name: fadeOnCalibrateButtonAnim;\n  animation-duration: 0.5s;\n  animation-iteration-count: 1;\n  animation-fill-mode: forwards;\n  animation-timing-function: ease-in-out;\n}\n@keyframes fadeOnCalibrateButtonAnim {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n.mainMenuContainer {\n  width: 100%;\n  height: 100%;\n}\n.mainMenuContainer .mainMenuGreeting {\n  position: absolute;\n  top: 1.3vw;\n  left: 2vw;\n  font-family: greetingFont;\n  font-size: 1.5vw;\n  text-align: left;\n  text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000, 0 1px 0 #000, 0 -1px 0 #000, 1px 0 0 #000, -1px 0 0 #000, 0px 0px 2vw #fffffe;\n}\n.mainMenuContainer .mainMenuGreeting a {\n  font-size: 1.2vw;\n  text-decoration: none;\n  color: #6441A4;\n  text-shadow: 1px 1px #0d171b, -1px 1px rgba(0, 0, 0, 0.75), -1px -1px rgba(0, 0, 0, 0.75), -1px 0px rgba(0, 0, 0, 0.75), 1px 0px rgba(0, 0, 0, 0.75), 0px -1px rgba(0, 0, 0, 0.75), 0px 1px rgba(0, 0, 0, 0.75);\n}\n.mainMenuContainer .mainMenuGreeting a:hover {\n  filter: brightness(140%);\n}\n.mainMenuContainer .mainMenuGreeting a:active {\n  filter: brightness(90%);\n}\n.mainMenuContainer .copyrightContainer {\n  position: absolute;\n  top: 19.6vw;\n  left: 33.1vw;\n  opacity: 0;\n  font-family: greetingFont;\n  font-weight: bold;\n  color: #d9d8fc;\n  font-size: 1.05vw;\n  line-height: 1.25vw;\n  pointer-events: auto;\n  filter: drop-shadow(1px 1px 0 rgba(0, 0, 0, 0.5)) drop-shadow(-1px -1px 0 rgba(0, 0, 0, 0.5)) drop-shadow(-1px 0px 0 rgba(0, 0, 0, 0.5)) drop-shadow(1px 0px 0 rgba(0, 0, 0, 0.5)) drop-shadow(0px -1px 0 rgba(0, 0, 0, 0.5)) drop-shadow(0px 1px 0 rgba(0, 0, 0, 0.5));\n  animation-name: copyrightContainerAnim;\n  animation-delay: 1s;\n  animation-duration: 0.5s;\n  animation-iteration-count: 1;\n  animation-timing-function: ease-in-out;\n  animation-fill-mode: forwards;\n}\n@keyframes copyrightContainerAnim {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 0.8;\n  }\n}\n.mainMenuContainer .copyrightContainer a {\n  font-family: greetingFont;\n  font-weight: bold;\n  text-decoration: underline;\n  color: #908fe7;\n}\n.mainMenuContainer .copyrightContainer a:hover {\n  filter: brightness(150%);\n}\n.mainMenuContainer .copyrightContainer a:active {\n  filter: brightness(90%);\n}\n.mainMenuContainer .mainMenuVersionContainer {\n  position: absolute;\n  top: 50.1vw;\n  left: 2vw;\n  width: 15vw;\n  height: 4vw;\n}\n.mainMenuContainer .mainMenuVersionContainer .mainMenuVersion {\n  position: absolute;\n  overflow: hidden;\n  top: 2.5vw;\n  left: 0;\n  height: 2vw;\n  color: magenta;\n  font-family: labelFont;\n  font-weight: normal;\n  font-size: 2.1vw;\n  line-height: 1.6vw;\n  pointer-events: auto;\n  filter: drop-shadow(1px 1px 0 rgba(0, 0, 0, 0.5)) drop-shadow(-1px -1px 0 rgba(0, 0, 0, 0.5)) drop-shadow(-1px 0px 0 rgba(0, 0, 0, 0.5)) drop-shadow(1px 0px 0 rgba(0, 0, 0, 0.5)) drop-shadow(0px -1px 0 rgba(0, 0, 0, 0.5)) drop-shadow(0px 1px 0 rgba(0, 0, 0, 0.5)) drop-shadow(0px 1px 2vw #ff00ff);\n}\n.mainMenuContainer .mainMenuBG {\n  position: absolute;\n  display: inline-block;\n  padding: 0px;\n  margin: 0px;\n  left: 0%;\n  pointer-events: none;\n  filter: blur(0.4vw) saturate(70%) brightness(110%);\n}\n.mainMenuContainer .mainMenuBG .mainMenuBGCell {\n  float: left;\n}\n.menu_logo {\n  position: absolute;\n  left: 22.5vw;\n  top: 3vw;\n  width: 55vw;\n  animation-name: hue_rotate_logo_ds_anim;\n  animation-duration: 7s;\n  animation-iteration-count: infinite;\n  animation-timing-function: ease-in-out;\n  z-index: 0;\n}\n.menu_calibrate {\n  position: fixed;\n  top: 0%;\n  left: 0%;\n  width: 100%;\n  height: 100%;\n}\n@keyframes hue_rotate_logo_ds_anim {\n  0% {\n    filter: drop-shadow(0 0 0.5vw black) drop-shadow(-2vw -2vw 2vw rgba(255, 0, 255, 0.9)) drop-shadow(2vw 2vw 2vw #004f99) drop-shadow(1vw 2vw 2vw rgba(0, 79, 153, 0.7)) hue-rotate(0deg);\n  }\n  50% {\n    filter: drop-shadow(0 0 0.5vw black) drop-shadow(-2vw -2vw 2vw rgba(255, 0, 255, 0.9)) drop-shadow(2vw 2vw 2vw #004f99) drop-shadow(1vw 2vw 2vw rgba(0, 79, 153, 0.7)) hue-rotate(-30deg);\n  }\n  100% {\n    filter: drop-shadow(0 0 0.5vw black) drop-shadow(-2vw -2vw 2vw rgba(255, 0, 255, 0.9)) drop-shadow(2vw 2vw 2vw #004f99) drop-shadow(1vw 2vw 2vw rgba(0, 79, 153, 0.7)) hue-rotate(0deg);\n  }\n}\n@keyframes hue_rotate_logo_anim {\n  0% {\n    filter: hue-rotate(0deg);\n  }\n  50% {\n    filter: hue-rotate(-60deg);\n  }\n  0% {\n    filter: hue-rotate(0deg);\n  }\n}\n.hue_rotate_button_bg {\n  animation-name: hue_rotate_button_bg_anim;\n  animation-duration: 8s;\n  animation-iteration-count: infinite;\n  animation-timing-function: ease-in-out;\n}\n@keyframes hue_rotate_button_bg_anim {\n  0% {\n    filter: hue-rotate(0deg);\n  }\n  50% {\n    filter: hue-rotate(90deg);\n  }\n  0% {\n    filter: hue-rotate(0deg);\n  }\n}\n.loginMenuButtonsContainer {\n  position: absolute;\n  width: 20vw;\n  top: 30vw;\n  left: 40vw;\n}\n.mainMenuTakeDownContainer {\n  position: absolute;\n  display: inline-block;\n  width: 60vw;\n  height: 35vw;\n  top: 22vw;\n  left: 20vw;\n}\n.mainMenuTakeDownMessageContainer {\n  position: relative;\n  float: left;\n  width: 100%;\n  height: 6vw;\n  font-size: 1.75vw;\n  font-weight: normal;\n  line-height: 2.25vw;\n  font-family: Verdana;\n  color: white;\n  text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000, 0 1px 0 #000, 0 -1px 0 #000, 1px 0 0 #000, -1px 0 0 #000, 0 0 2vw #000, 0 0 2vw #000;\n}\n.mainMenuTakeDownMessageContainer a {\n  text-decoration: none;\n  color: magenta;\n}\n.mainMenuTakeDownMessageContainer a:hover {\n  color: #ff84ff;\n}\n.creditsReturnButtonContainer {\n  position: absolute;\n  left: 43.4vw;\n  top: 47.8vw;\n  width: 12.4vw;\n  height: 4.3vw;\n  animation-name: fadeOnReturnButtonAnim;\n  animation-duration: 0.5s;\n  animation-iteration-count: 1;\n  animation-fill-mode: forwards;\n  animation-timing-function: ease-in-out;\n}\n@keyframes fadeOnReturnButtonAnim {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n.creditsContainer {\n  position: absolute;\n  display: inline-block;\n  width: 100%;\n  top: 18vw;\n  left: 0;\n}\n.creditsColumn {\n  float: left;\n  text-align: left;\n  padding-left: 6.5vw;\n  box-sizing: border-box;\n  width: 33.1vw;\n  height: 30vw;\n}\n.creditsColumn .creditsTitle {\n  margin-top: 1.5vw;\n  width: 100%;\n  height: 2vw;\n  color: magenta;\n  font-family: labelFont;\n  font-weight: normal;\n  font-size: 2.1vw;\n  line-height: 1.7vw;\n  overflow: hidden;\n  pointer-events: none;\n  filter: drop-shadow(1px 1px 0 rgba(0, 0, 0, 0.5)) drop-shadow(-1px -1px 0 rgba(0, 0, 0, 0.5)) drop-shadow(-1px 0px 0 rgba(0, 0, 0, 0.5)) drop-shadow(1px 0px 0 rgba(0, 0, 0, 0.5)) drop-shadow(0px -1px 0 rgba(0, 0, 0, 0.5)) drop-shadow(0px 1px 0 rgba(0, 0, 0, 0.5)) drop-shadow(0px 1px 1.5vw #ff00ff);\n}\n.creditsColumn .creditsName {\n  margin-bottom: 0.5vw;\n  width: 100%;\n  font-family: vox;\n  font-size: 1.4vw;\n  line-height: 1.83vw;\n  letter-spacing: 1px;\n  font-weight: normal;\n  color: white;\n  filter: drop-shadow(0px 1px 2vw #ffffff);\n}\n.mainMenuButtonsContainer {\n  position: absolute;\n  display: inline-block;\n  width: 23.5vw;\n  height: 30vw;\n  top: 22vw;\n  left: 38.25vw;\n}\n.mainMenuButtonContainer {\n  position: relative;\n  float: left;\n  width: 23.5vw;\n  height: 4.9vw;\n}\n#mainMenuButton {\n  position: relative;\n  float: left;\n  margin-bottom: 0.5vw;\n  left: 0vw;\n  top: 0vw;\n  width: 27vw;\n  transform-origin: top left;\n  cursor: pointer;\n}\n.mainMenuButtonContent {\n  font-family: vox;\n  line-height: 42px;\n  font-size: 27px;\n  letter-spacing: 1px;\n  font-weight: bolder;\n  color: #4f4dc0;\n  text-shadow: 1px 1px #21373f, -1px 1px rgba(0, 0, 0, 0.25), -1px -1px rgba(0, 0, 0, 0.25), -1px 0px rgba(0, 0, 0, 0.25), 0px -1px rgba(0, 0, 0, 0.25);\n}\n.mainMenuButtonContent.Disabled {\n  cursor: pointer;\n  pointer-events: none;\n  color: #888888;\n}\n.mainMenuButton:hover {\n  color: #6d64e6;\n}\n.messageContainer {\n  position: absolute;\n  width: 60vw;\n  height: 4.4vw;\n  padding-top: 1vw;\n  padding-left: 1vw;\n  padding-right: 1vw;\n  left: 20vw;\n  top: 35vw;\n  font-size: 1.5vw;\n  background: rgba(0, 0, 0, 0.7);\n  border-radius: 0.5vw;\n  animation-name: messageContainerAnim;\n  animation-duration: 0.5s;\n  animation-iteration-count: 1;\n  z-index: 10;\n}\n.messageContainer a {\n  text-decoration: none;\n  color: #6441A4;\n}\n.messageContainer a:hover {\n  filter: brightness(140%);\n}\n.messageContainer a:active {\n  filter: brightness(90%);\n}\n@keyframes messageContainerAnim {\n  0% {\n    transform: scale(0);\n  }\n  70% {\n    transform: scale(1.2);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n#twitchIcon {\n  top: 10%;\n  left: -8%;\n  width: 123%;\n  filter: drop-shadow(0 0 4px rgba(255, 255, 255, 0.75)) drop-shadow(0 0 4px rgba(255, 0, 149, 0.75));\n}\n@keyframes setupChecklistViewAnim {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n.setupChecklistView {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  background: rgba(255, 255, 255, 0.1);\n  padding-top: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  top: 1px;\n  left: 1px;\n  width: 270px;\n  height: 100%;\n  pointer-events: auto;\n  text-align: left;\n  font-size: 17px;\n  font-family: vox;\n  line-height: 33px;\n  color: #5f5de0;\n  text-shadow: 1px 1px #0d171b, -1px 1px rgba(0, 0, 0, 0.25), -1px -1px rgba(0, 0, 0, 0.25), -1px 0px rgba(0, 0, 0, 0.25), 0px -1px rgba(0, 0, 0, 0.25);\n  animation-name: setupChecklistViewAnim;\n  animation-duration: 0.5s;\n  animation-iteration-count: 1;\n}\n.setupChecklistView .buttonItem {\n  display: inline-block;\n  height: 33px;\n  margin-bottom: 2px;\n  width: 100%;\n  padding-top: 0px;\n  padding-bottom: 0px;\n  box-sizing: border-box;\n  border: 1px solid rgba(0, 0, 0, 0);\n}\n.setupChecklistView .buttonItem #checklistButton {\n  top: -4px;\n}\n.setupChecklistView .item {\n  display: inline-block;\n  height: 31px;\n  width: 100%;\n  margin-bottom: 0px;\n  padding-top: 5px;\n  padding-bottom: 4px;\n  box-sizing: border-box;\n  font-size: 16px;\n  line-height: 16px;\n  text-align: left;\n  text-shadow: 1px 1px #0d171b, -1px 1px rgba(0, 0, 0, 0.25), -1px -1px rgba(0, 0, 0, 0.25), -1px 0px rgba(0, 0, 0, 0.25), 0px -1px rgba(0, 0, 0, 0.25);\n}\n.setupChecklistView .item .itemTitle {\n  float: left;\n}\n.setupChecklistView .item .itemPass {\n  float: right;\n  text-align: right;\n  color: #00b400;\n}\n.setupChecklistView .item .itemFail {\n  float: right;\n  text-align: right;\n  color: #be1414;\n}\n.setupChecklistView .item .itemWarn {\n  float: right;\n  text-align: right;\n  color: #e3e636;\n}\n.setupChecklistView .setupChecklistButtonContent {\n  height: 24px;\n  padding-left: 6px;\n  font-size: 11px;\n  letter-spacing: 1px;\n  line-height: 24px;\n  font-family: vox;\n  color: white;\n  text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000, 0 1px 0 #000, 0 -1px 0 #000, 1px 0 0 #000, -1px 0 0 #000;\n  pointer-events: auto;\n}\n", ""]);

// exports


/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "5ce31363f54690d1483d1dd2427da677.ttf";

/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var client = __webpack_require__(278);
module.exports = {
	client: client,
	Client: client
};

/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var _global = typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : {};
var _WebSocket = _global.WebSocket || __webpack_require__(281);
var _fetch = _global.fetch || __webpack_require__(280);
var api = __webpack_require__(282);
var commands = __webpack_require__(283);
var EventEmitter = __webpack_require__(284).EventEmitter;
var logger = __webpack_require__(285);
var parse = __webpack_require__(286);
var Queue = __webpack_require__(287);
var _ = __webpack_require__(279);

var _apiWarned = false;

// Client instance..
var client = function client(opts) {
	if (this instanceof client === false) {
		return new client(opts);
	}
	this.opts = _.get(opts, {});
	this.opts.channels = this.opts.channels || [];
	this.opts.connection = this.opts.connection || {};
	this.opts.identity = this.opts.identity || {};
	this.opts.options = this.opts.options || {};

	this.clientId = _.get(this.opts.options.clientId, null);
	this._globalDefaultChannel = _.channel(_.get(this.opts.options.globalDefaultChannel, '#tmijs'));
	this._skipMembership = _.get(this.opts.options.skipMembership, false);
	this._skipUpdatingEmotesets = _.get(this.opts.options.skipUpdatingEmotesets, false);
	this._updateEmotesetsTimer = null;
	this._updateEmotesetsTimerDelay = _.get(this.opts.options.updateEmotesetsTimer, 60000);

	this.maxReconnectAttempts = _.get(this.opts.connection.maxReconnectAttempts, Infinity);
	this.maxReconnectInterval = _.get(this.opts.connection.maxReconnectInterval, 30000);
	this.reconnect = _.get(this.opts.connection.reconnect, true);
	this.reconnectDecay = _.get(this.opts.connection.reconnectDecay, 1.5);
	this.reconnectInterval = _.get(this.opts.connection.reconnectInterval, 1000);

	this.reconnecting = false;
	this.reconnections = 0;
	this.reconnectTimer = this.reconnectInterval;

	this.secure = _.get(this.opts.connection.secure, !this.opts.connection.server && !this.opts.connection.port);

	// Raw data and object for emote-sets..
	this.emotes = '';
	this.emotesets = {};

	this.channels = [];
	this.currentLatency = 0;
	this.globaluserstate = {};
	this.lastJoined = '';
	this.latency = new Date();
	this.moderators = {};
	this.pingLoop = null;
	this.pingTimeout = null;
	this.reason = '';
	this.username = '';
	this.userstate = {};
	this.wasCloseCalled = false;
	this.ws = null;

	// Create the logger..
	var level = 'error';
	if (this.opts.options.debug) {
		level = 'info';
	}
	this.log = this.opts.logger || logger;

	try {
		logger.setLevel(level);
	} catch (err) {}

	// Format the channel names..
	this.opts.channels.forEach(function (part, index, theArray) {
		return theArray[index] = _.channel(part);
	});

	EventEmitter.call(this);
	this.setMaxListeners(0);
};

_.inherits(client, EventEmitter);

// Put all commands in prototype..
for (var methodName in commands) {
	client.prototype[methodName] = commands[methodName];
}

// Emit multiple events..
client.prototype.emits = function emits(types, values) {
	for (var i = 0; i < types.length; i++) {
		var val = i < values.length ? values[i] : values[values.length - 1];
		this.emit.apply(this, [types[i]].concat(val));
	}
};
/** @deprecated */
client.prototype.api = function () {
	if (!_apiWarned) {
		this.log.warn('Client.prototype.api is deprecated and will be removed for version 2.0.0');
		_apiWarned = true;
	}
	api.apply(undefined, arguments);
};
// Handle parsed chat server message..
client.prototype.handleMessage = function handleMessage(message) {
	var _this = this;

	if (!message) {
		return;
	}

	if (this.listenerCount('raw_message')) {
		this.emit('raw_message', JSON.parse(JSON.stringify(message)), message);
	}

	var channel = _.channel(_.get(message.params[0], null));
	var msg = _.get(message.params[1], null);
	var msgid = _.get(message.tags['msg-id'], null);

	// Parse badges, badge-info and emotes..
	var tags = message.tags = parse.badges(parse.badgeInfo(parse.emotes(message.tags)));

	// Transform IRCv3 tags..
	for (var key in tags) {
		if (key === 'emote-sets' || key === 'ban-duration' || key === 'bits') {
			continue;
		}
		var value = tags[key];
		if (typeof value === 'boolean') {
			value = null;
		} else if (value === '1') {
			value = true;
		} else if (value === '0') {
			value = false;
		} else if (typeof value === 'string') {
			value = _.unescapeIRC(value);
		}
		tags[key] = value;
	}

	// Messages with no prefix..
	if (message.prefix === null) {
		switch (message.command) {
			// Received PING from server..
			case 'PING':
				this.emit('ping');
				if (this._isConnected()) {
					this.ws.send('PONG');
				}
				break;

			// Received PONG from server, return current latency..
			case 'PONG':
				{
					var currDate = new Date();
					this.currentLatency = (currDate.getTime() - this.latency.getTime()) / 1000;
					this.emits(['pong', '_promisePing'], [[this.currentLatency]]);

					clearTimeout(this.pingTimeout);
					break;
				}

			default:
				this.log.warn('Could not parse message with no prefix:\n' + JSON.stringify(message, null, 4));
				break;
		}
	}

	// Messages with "tmi.twitch.tv" as a prefix..
	else if (message.prefix === 'tmi.twitch.tv') {
			switch (message.command) {
				case '002':
				case '003':
				case '004':
				case '372':
				case '375':
				case 'CAP':
					break;

				// Retrieve username from server..
				case '001':
					this.username = message.params[0];
					break;

				// Connected to server..
				case '376':
					{
						this.log.info('Connected to server.');
						this.userstate[this._globalDefaultChannel] = {};
						this.emits(['connected', '_promiseConnect'], [[this.server, this.port], [null]]);
						this.reconnections = 0;
						this.reconnectTimer = this.reconnectInterval;

						// Set an internal ping timeout check interval..
						this.pingLoop = setInterval(function () {
							// Make sure the connection is opened before sending the message..
							if (_this._isConnected()) {
								_this.ws.send('PING');
							}
							_this.latency = new Date();
							_this.pingTimeout = setTimeout(function () {
								if (_this.ws !== null) {
									_this.wasCloseCalled = false;
									_this.log.error('Ping timeout.');
									_this.ws.close();

									clearInterval(_this.pingLoop);
									clearTimeout(_this.pingTimeout);
									clearTimeout(_this._updateEmotesetsTimer);
								}
							}, _.get(_this.opts.connection.timeout, 9999));
						}, 60000);

						// Join all the channels from the config with an interval..
						var joinInterval = _.get(this.opts.options.joinInterval, 2000);
						if (joinInterval < 300) {
							joinInterval = 300;
						}
						var joinQueue = new Queue(joinInterval);
						var joinChannels = [].concat(_toConsumableArray(new Set([].concat(_toConsumableArray(this.opts.channels), _toConsumableArray(this.channels)))));
						this.channels = [];

						var _loop = function _loop(i) {
							var channel = joinChannels[i];
							joinQueue.add(function () {
								if (_this._isConnected()) {
									_this.join(channel).catch(function (err) {
										return _this.log.error(err);
									});
								}
							});
						};

						for (var i = 0; i < joinChannels.length; i++) {
							_loop(i);
						}

						joinQueue.next();
						break;
					}

				// https://github.com/justintv/Twitch-API/blob/master/chat/capabilities.md#notice
				case 'NOTICE':
					{
						var nullArr = [null];
						var noticeArr = [channel, msgid, msg];
						var msgidArr = [msgid];
						var channelTrueArr = [channel, true];
						var channelFalseArr = [channel, false];
						var noticeAndNull = [noticeArr, nullArr];
						var noticeAndMsgid = [noticeArr, msgidArr];
						var basicLog = '[' + channel + '] ' + msg;
						switch (msgid) {
							// This room is now in subscribers-only mode.
							case 'subs_on':
								this.log.info('[' + channel + '] This room is now in subscribers-only mode.');
								this.emits(['subscriber', 'subscribers', '_promiseSubscribers'], [channelTrueArr, channelTrueArr, nullArr]);
								break;

							// This room is no longer in subscribers-only mode.
							case 'subs_off':
								this.log.info('[' + channel + '] This room is no longer in subscribers-only mode.');
								this.emits(['subscriber', 'subscribers', '_promiseSubscribersoff'], [channelFalseArr, channelFalseArr, nullArr]);
								break;

							// This room is now in emote-only mode.
							case 'emote_only_on':
								this.log.info('[' + channel + '] This room is now in emote-only mode.');
								this.emits(['emoteonly', '_promiseEmoteonly'], [channelTrueArr, nullArr]);
								break;

							// This room is no longer in emote-only mode.
							case 'emote_only_off':
								this.log.info('[' + channel + '] This room is no longer in emote-only mode.');
								this.emits(['emoteonly', '_promiseEmoteonlyoff'], [channelFalseArr, nullArr]);
								break;

							// Do not handle slow_on/off here, listen to the ROOMSTATE notice instead as it returns the delay.
							case 'slow_on':
							case 'slow_off':
								break;

							// Do not handle followers_on/off here, listen to the ROOMSTATE notice instead as it returns the delay.
							case 'followers_on_zero':
							case 'followers_on':
							case 'followers_off':
								break;

							// This room is now in r9k mode.
							case 'r9k_on':
								this.log.info('[' + channel + '] This room is now in r9k mode.');
								this.emits(['r9kmode', 'r9kbeta', '_promiseR9kbeta'], [channelTrueArr, channelTrueArr, nullArr]);
								break;

							// This room is no longer in r9k mode.
							case 'r9k_off':
								this.log.info('[' + channel + '] This room is no longer in r9k mode.');
								this.emits(['r9kmode', 'r9kbeta', '_promiseR9kbetaoff'], [channelFalseArr, channelFalseArr, nullArr]);
								break;

							// The moderators of this room are: [..., ...]
							case 'room_mods':
								{
									var listSplit = msg.split(': ');
									var mods = (listSplit.length > 1 ? listSplit[1] : '').toLowerCase().split(', ').filter(function (n) {
										return n;
									});

									this.emits(['_promiseMods', 'mods'], [[null, mods], [channel, mods]]);
									break;
								}

							// There are no moderators for this room.
							case 'no_mods':
								this.emits(['_promiseMods', 'mods'], [[null, []], [channel, []]]);
								break;

							// The VIPs of this channel are: [..., ...]
							case 'vips_success':
								{
									if (msg.endsWith('.')) {
										msg = msg.slice(0, -1);
									}
									var _listSplit = msg.split(': ');
									var vips = (_listSplit.length > 1 ? _listSplit[1] : '').toLowerCase().split(', ').filter(function (n) {
										return n;
									});

									this.emits(['_promiseVips', 'vips'], [[null, vips], [channel, vips]]);
									break;
								}

							// There are no VIPs for this room.
							case 'no_vips':
								this.emits(['_promiseVips', 'vips'], [[null, []], [channel, []]]);
								break;

							// Ban command failed..
							case 'already_banned':
							case 'bad_ban_admin':
							case 'bad_ban_anon':
							case 'bad_ban_broadcaster':
							case 'bad_ban_global_mod':
							case 'bad_ban_mod':
							case 'bad_ban_self':
							case 'bad_ban_staff':
							case 'usage_ban':
								this.log.info(basicLog);
								this.emits(['notice', '_promiseBan'], noticeAndMsgid);
								break;

							// Ban command success..
							case 'ban_success':
								this.log.info(basicLog);
								this.emits(['notice', '_promiseBan'], noticeAndNull);
								break;

							// Clear command failed..
							case 'usage_clear':
								this.log.info(basicLog);
								this.emits(['notice', '_promiseClear'], noticeAndMsgid);
								break;

							// Mods command failed..
							case 'usage_mods':
								this.log.info(basicLog);
								this.emits(['notice', '_promiseMods'], [noticeArr, [msgid, []]]);
								break;

							// Mod command success..
							case 'mod_success':
								this.log.info(basicLog);
								this.emits(['notice', '_promiseMod'], noticeAndNull);
								break;

							// VIPs command failed..
							case 'usage_vips':
								this.log.info(basicLog);
								this.emits(['notice', '_promiseVips'], [noticeArr, [msgid, []]]);
								break;

							// VIP command failed..
							case 'usage_vip':
							case 'bad_vip_grantee_banned':
							case 'bad_vip_grantee_already_vip':
							case 'bad_vip_max_vips_reached':
							case 'bad_vip_achievement_incomplete':
								this.log.info(basicLog);
								this.emits(['notice', '_promiseVip'], [noticeArr, [msgid, []]]);
								break;

							// VIP command success..
							case 'vip_success':
								this.log.info(basicLog);
								this.emits(['notice', '_promiseVip'], noticeAndNull);
								break;

							// Mod command failed..
							case 'usage_mod':
							case 'bad_mod_banned':
							case 'bad_mod_mod':
								this.log.info(basicLog);
								this.emits(['notice', '_promiseMod'], noticeAndMsgid);
								break;

							// Unmod command success..
							case 'unmod_success':
								this.log.info(basicLog);
								this.emits(['notice', '_promiseUnmod'], noticeAndNull);
								break;

							// Unvip command success...
							case 'unvip_success':
								this.log.info(basicLog);
								this.emits(['notice', '_promiseUnvip'], noticeAndNull);
								break;

							// Unmod command failed..
							case 'usage_unmod':
							case 'bad_unmod_mod':
								this.log.info(basicLog);
								this.emits(['notice', '_promiseUnmod'], noticeAndMsgid);
								break;

							// Unvip command failed..
							case 'usage_unvip':
							case 'bad_unvip_grantee_not_vip':
								this.log.info(basicLog);
								this.emits(['notice', '_promiseUnvip'], noticeAndMsgid);
								break;

							// Color command success..
							case 'color_changed':
								this.log.info(basicLog);
								this.emits(['notice', '_promiseColor'], noticeAndNull);
								break;

							// Color command failed..
							case 'usage_color':
							case 'turbo_only_color':
								this.log.info(basicLog);
								this.emits(['notice', '_promiseColor'], noticeAndMsgid);
								break;

							// Commercial command success..
							case 'commercial_success':
								this.log.info(basicLog);
								this.emits(['notice', '_promiseCommercial'], noticeAndNull);
								break;

							// Commercial command failed..
							case 'usage_commercial':
							case 'bad_commercial_error':
								this.log.info(basicLog);
								this.emits(['notice', '_promiseCommercial'], noticeAndMsgid);
								break;

							// Host command success..
							case 'hosts_remaining':
								{
									this.log.info(basicLog);
									var remainingHost = !isNaN(msg[0]) ? parseInt(msg[0]) : 0;
									this.emits(['notice', '_promiseHost'], [noticeArr, [null, ~~remainingHost]]);
									break;
								}

							// Host command failed..
							case 'bad_host_hosting':
							case 'bad_host_rate_exceeded':
							case 'bad_host_error':
							case 'usage_host':
								this.log.info(basicLog);
								this.emits(['notice', '_promiseHost'], [noticeArr, [msgid, null]]);
								break;

							// r9kbeta command failed..
							case 'already_r9k_on':
							case 'usage_r9k_on':
								this.log.info(basicLog);
								this.emits(['notice', '_promiseR9kbeta'], noticeAndMsgid);
								break;

							// r9kbetaoff command failed..
							case 'already_r9k_off':
							case 'usage_r9k_off':
								this.log.info(basicLog);
								this.emits(['notice', '_promiseR9kbetaoff'], noticeAndMsgid);
								break;

							// Timeout command success..
							case 'timeout_success':
								this.log.info(basicLog);
								this.emits(['notice', '_promiseTimeout'], noticeAndNull);
								break;

							case 'delete_message_success':
								this.log.info('[' + channel + ' ' + msg + ']');
								this.emits(['notice', '_promiseDeletemessage'], noticeAndNull);
								break;

							// Subscribersoff command failed..
							case 'already_subs_off':
							case 'usage_subs_off':
								this.log.info(basicLog);
								this.emits(['notice', '_promiseSubscribersoff'], noticeAndMsgid);
								break;

							// Subscribers command failed..
							case 'already_subs_on':
							case 'usage_subs_on':
								this.log.info(basicLog);
								this.emits(['notice', '_promiseSubscribers'], noticeAndMsgid);
								break;

							// Emoteonlyoff command failed..
							case 'already_emote_only_off':
							case 'usage_emote_only_off':
								this.log.info(basicLog);
								this.emits(['notice', '_promiseEmoteonlyoff'], noticeAndMsgid);
								break;

							// Emoteonly command failed..
							case 'already_emote_only_on':
							case 'usage_emote_only_on':
								this.log.info(basicLog);
								this.emits(['notice', '_promiseEmoteonly'], noticeAndMsgid);
								break;

							// Slow command failed..
							case 'usage_slow_on':
								this.log.info(basicLog);
								this.emits(['notice', '_promiseSlow'], noticeAndMsgid);
								break;

							// Slowoff command failed..
							case 'usage_slow_off':
								this.log.info(basicLog);
								this.emits(['notice', '_promiseSlowoff'], noticeAndMsgid);
								break;

							// Timeout command failed..
							case 'usage_timeout':
							case 'bad_timeout_admin':
							case 'bad_timeout_anon':
							case 'bad_timeout_broadcaster':
							case 'bad_timeout_duration':
							case 'bad_timeout_global_mod':
							case 'bad_timeout_mod':
							case 'bad_timeout_self':
							case 'bad_timeout_staff':
								this.log.info(basicLog);
								this.emits(['notice', '_promiseTimeout'], noticeAndMsgid);
								break;

							// Unban command success..
							// Unban can also be used to cancel an active timeout.
							case 'untimeout_success':
							case 'unban_success':
								this.log.info(basicLog);
								this.emits(['notice', '_promiseUnban'], noticeAndNull);
								break;

							// Unban command failed..
							case 'usage_unban':
							case 'bad_unban_no_ban':
								this.log.info(basicLog);
								this.emits(['notice', '_promiseUnban'], noticeAndMsgid);
								break;

							// Delete command failed..
							case 'usage_delete':
							case 'bad_delete_message_error':
							case 'bad_delete_message_broadcaster':
							case 'bad_delete_message_mod':
								this.log.info(basicLog);
								this.emits(['notice', '_promiseDeletemessage'], noticeAndMsgid);
								break;

							// Unhost command failed..
							case 'usage_unhost':
							case 'not_hosting':
								this.log.info(basicLog);
								this.emits(['notice', '_promiseUnhost'], noticeAndMsgid);
								break;

							// Whisper command failed..
							case 'whisper_invalid_login':
							case 'whisper_invalid_self':
							case 'whisper_limit_per_min':
							case 'whisper_limit_per_sec':
							case 'whisper_restricted':
							case 'whisper_restricted_recipient':
								this.log.info(basicLog);
								this.emits(['notice', '_promiseWhisper'], noticeAndMsgid);
								break;

							// Permission error..
							case 'no_permission':
							case 'msg_banned':
							case 'msg_room_not_found':
							case 'msg_channel_suspended':
							case 'tos_ban':
							case 'invalid_user':
								this.log.info(basicLog);
								this.emits(['notice', '_promiseBan', '_promiseClear', '_promiseUnban', '_promiseTimeout', '_promiseDeletemessage', '_promiseMods', '_promiseMod', '_promiseUnmod', '_promiseVips', '_promiseVip', '_promiseUnvip', '_promiseCommercial', '_promiseHost', '_promiseUnhost', '_promiseJoin', '_promisePart', '_promiseR9kbeta', '_promiseR9kbetaoff', '_promiseSlow', '_promiseSlowoff', '_promiseFollowers', '_promiseFollowersoff', '_promiseSubscribers', '_promiseSubscribersoff', '_promiseEmoteonly', '_promiseEmoteonlyoff', '_promiseWhisper'], [noticeArr, [msgid, channel]]);
								break;

							// Automod-related..
							case 'msg_rejected':
							case 'msg_rejected_mandatory':
								this.log.info(basicLog);
								this.emit('automod', channel, msgid, msg);
								break;

							// Unrecognized command..
							case 'unrecognized_cmd':
								this.log.info(basicLog);
								this.emit('notice', channel, msgid, msg);
								break;

							// Send the following msg-ids to the notice event listener..
							case 'cmds_available':
							case 'host_target_went_offline':
							case 'msg_censored_broadcaster':
							case 'msg_duplicate':
							case 'msg_emoteonly':
							case 'msg_verified_email':
							case 'msg_ratelimit':
							case 'msg_subsonly':
							case 'msg_timedout':
							case 'msg_bad_characters':
							case 'msg_channel_blocked':
							case 'msg_facebook':
							case 'msg_followersonly':
							case 'msg_followersonly_followed':
							case 'msg_followersonly_zero':
							case 'msg_slowmode':
							case 'msg_suspended':
							case 'no_help':
							case 'usage_disconnect':
							case 'usage_help':
							case 'usage_me':
							case 'unavailable_command':
								this.log.info(basicLog);
								this.emit('notice', channel, msgid, msg);
								break;

							// Ignore this because we are already listening to HOSTTARGET..
							case 'host_on':
							case 'host_off':
								break;

							default:
								if (msg.includes('Login unsuccessful') || msg.includes('Login authentication failed')) {
									this.wasCloseCalled = false;
									this.reconnect = false;
									this.reason = msg;
									this.log.error(this.reason);
									this.ws.close();
								} else if (msg.includes('Error logging in') || msg.includes('Improperly formatted auth')) {
									this.wasCloseCalled = false;
									this.reconnect = false;
									this.reason = msg;
									this.log.error(this.reason);
									this.ws.close();
								} else if (msg.includes('Invalid NICK')) {
									this.wasCloseCalled = false;
									this.reconnect = false;
									this.reason = 'Invalid NICK.';
									this.log.error(this.reason);
									this.ws.close();
								} else {
									this.log.warn('Could not parse NOTICE from tmi.twitch.tv:\n' + JSON.stringify(message, null, 4));
									this.emit('notice', channel, msgid, msg);
								}
								break;
						}
						break;
					}

				// Handle subanniversary / resub..
				case 'USERNOTICE':
					{
						var username = tags['display-name'] || tags['login'];
						var plan = tags['msg-param-sub-plan'] || '';
						var planName = _.unescapeIRC(_.get(tags['msg-param-sub-plan-name'], '')) || null;
						var prime = plan.includes('Prime');
						var methods = { prime: prime, plan: plan, planName: planName };
						var streakMonths = ~~(tags['msg-param-streak-months'] || 0);
						var recipient = tags['msg-param-recipient-display-name'] || tags['msg-param-recipient-user-name'];
						var giftSubCount = ~~tags['msg-param-mass-gift-count'];
						tags['message-type'] = msgid;

						switch (msgid) {
							// Handle resub
							case 'resub':
								this.emits(['resub', 'subanniversary'], [[channel, username, streakMonths, msg, tags, methods]]);
								break;

							// Handle sub
							case 'sub':
								this.emits(['subscription', 'sub'], [[channel, username, methods, msg, tags]]);
								break;

							// Handle gift sub
							case 'subgift':
								this.emit('subgift', channel, username, streakMonths, recipient, methods, tags);
								break;

							// Handle anonymous gift sub
							// Need proof that this event occur
							case 'anonsubgift':
								this.emit('anonsubgift', channel, streakMonths, recipient, methods, tags);
								break;

							// Handle random gift subs
							case 'submysterygift':
								this.emit('submysterygift', channel, username, giftSubCount, methods, tags);
								break;

							// Handle anonymous random gift subs
							// Need proof that this event occur
							case 'anonsubmysterygift':
								this.emit('anonsubmysterygift', channel, giftSubCount, methods, tags);
								break;

							// Handle user upgrading from Prime to a normal tier sub
							case 'primepaidupgrade':
								this.emit('primepaidupgrade', channel, username, methods, tags);
								break;

							// Handle user upgrading from a gifted sub
							case 'giftpaidupgrade':
								{
									var sender = tags['msg-param-sender-name'] || tags['msg-param-sender-login'];
									this.emit('giftpaidupgrade', channel, username, sender, tags);
									break;
								}

							// Handle user upgrading from an anonymous gifted sub
							case 'anongiftpaidupgrade':
								this.emit('anongiftpaidupgrade', channel, username, tags);
								break;

							// Handle raid
							case 'raid':
								{
									var _username = tags['msg-param-displayName'] || tags['msg-param-login'];
									var viewers = +tags['msg-param-viewerCount'];
									this.emit('raided', channel, _username, viewers, tags);
									break;
								}
							// Handle ritual
							case 'ritual':
								{
									var ritualName = tags['msg-param-ritual-name'];
									switch (ritualName) {
										// Handle new chatter ritual
										case 'new_chatter':
											this.emit('newchatter', channel, username, tags, msg);
											break;
										// All unknown rituals should be passed through
										default:
											this.emit('ritual', ritualName, channel, username, tags, msg);
											break;
									}
									break;
								}
							// All other msgid events should be emitted under a usernotice event
							// until it comes up and needs to be added..
							default:
								this.emit('usernotice', msgid, channel, tags, msg);
								break;
						}
						break;
					}

				// Channel is now hosting another channel or exited host mode..
				case 'HOSTTARGET':
					{
						var msgSplit = msg.split(' ');
						var _viewers = ~~msgSplit[1] || 0;
						// Stopped hosting..
						if (msgSplit[0] === '-') {
							this.log.info('[' + channel + '] Exited host mode.');
							this.emits(['unhost', '_promiseUnhost'], [[channel, _viewers], [null]]);
						}

						// Now hosting..
						else {
								this.log.info('[' + channel + '] Now hosting ' + msgSplit[0] + ' for ' + _viewers + ' viewer(s).');
								this.emit('hosting', channel, msgSplit[0], _viewers);
							}
						break;
					}

				// Someone has been timed out or chat has been cleared by a moderator..
				case 'CLEARCHAT':
					// User has been banned / timed out by a moderator..
					if (message.params.length > 1) {
						// Duration returns null if it's a ban, otherwise it's a timeout..
						var duration = _.get(message.tags['ban-duration'], null);

						if (duration === null) {
							this.log.info('[' + channel + '] ' + msg + ' has been banned.');
							this.emit('ban', channel, msg, null, message.tags);
						} else {
							this.log.info('[' + channel + '] ' + msg + ' has been timed out for ' + duration + ' seconds.');
							this.emit('timeout', channel, msg, null, ~~duration, message.tags);
						}
					}

					// Chat was cleared by a moderator..
					else {
							this.log.info('[' + channel + '] Chat was cleared by a moderator.');
							this.emits(['clearchat', '_promiseClear'], [[channel], [null]]);
						}
					break;

				// Someone's message has been deleted
				case 'CLEARMSG':
					if (message.params.length > 1) {
						var deletedMessage = msg;
						var _username2 = tags['login'];
						tags['message-type'] = 'messagedeleted';

						this.log.info('[' + channel + '] ' + _username2 + '\'s message has been deleted.');
						this.emit('messagedeleted', channel, _username2, deletedMessage, tags);
					}
					break;

				// Received a reconnection request from the server..
				case 'RECONNECT':
					this.log.info('Received RECONNECT request from Twitch..');
					this.log.info('Disconnecting and reconnecting in ' + Math.round(this.reconnectTimer / 1000) + ' seconds..');
					this.disconnect().catch(function (err) {
						return _this.log.error(err);
					});
					setTimeout(function () {
						return _this.connect().catch(function (err) {
							return _this.log.error(err);
						});
					}, this.reconnectTimer);
					break;

				// Received when joining a channel and every time you send a PRIVMSG to a channel.
				case 'USERSTATE':
					message.tags.username = this.username;

					// Add the client to the moderators of this room..
					if (message.tags['user-type'] === 'mod') {
						if (!this.moderators[channel]) {
							this.moderators[channel] = [];
						}
						if (!this.moderators[channel].includes(this.username)) {
							this.moderators[channel].push(this.username);
						}
					}

					// Logged in and username doesn't start with justinfan..
					if (!_.isJustinfan(this.getUsername()) && !this.userstate[channel]) {
						this.userstate[channel] = tags;
						this.lastJoined = channel;
						this.channels.push(channel);
						this.log.info('Joined ' + channel);
						this.emit('join', channel, _.username(this.getUsername()), true);
					}

					// Emote-sets has changed, update it..
					if (message.tags['emote-sets'] !== this.emotes) {
						this._updateEmoteset(message.tags['emote-sets']);
					}

					this.userstate[channel] = tags;
					break;

				// Describe non-channel-specific state informations..
				case 'GLOBALUSERSTATE':
					this.globaluserstate = tags;
					this.emit('globaluserstate', tags);

					// Received emote-sets..
					if (typeof message.tags['emote-sets'] !== 'undefined') {
						this._updateEmoteset(message.tags['emote-sets']);
					}
					break;

				// Received when joining a channel and every time one of the chat room settings, like slow mode, change.
				// The message on join contains all room settings.
				case 'ROOMSTATE':
					// We use this notice to know if we successfully joined a channel..
					if (_.channel(this.lastJoined) === channel) {
						this.emit('_promiseJoin', null, channel);
					}

					// Provide the channel name in the tags before emitting it..
					message.tags.channel = channel;
					this.emit('roomstate', channel, message.tags);

					if (!_.hasOwn(message.tags, 'subs-only')) {
						// Handle slow mode here instead of the slow_on/off notice..
						// This room is now in slow mode. You may send messages every slow_duration seconds.
						if (_.hasOwn(message.tags, 'slow')) {
							if (typeof message.tags.slow === 'boolean' && !message.tags.slow) {
								var disabled = [channel, false, 0];
								this.log.info('[' + channel + '] This room is no longer in slow mode.');
								this.emits(['slow', 'slowmode', '_promiseSlowoff'], [disabled, disabled, [null]]);
							} else {
								var seconds = ~~message.tags.slow;
								var enabled = [channel, true, seconds];
								this.log.info('[' + channel + '] This room is now in slow mode.');
								this.emits(['slow', 'slowmode', '_promiseSlow'], [enabled, enabled, [null]]);
							}
						}

						// Handle followers only mode here instead of the followers_on/off notice..
						// This room is now in follower-only mode.
						// This room is now in <duration> followers-only mode.
						// This room is no longer in followers-only mode.
						// duration is in minutes (string)
						// -1 when /followersoff (string)
						// false when /followers with no duration (boolean)
						if (_.hasOwn(message.tags, 'followers-only')) {
							if (message.tags['followers-only'] === '-1') {
								var _disabled = [channel, false, 0];
								this.log.info('[' + channel + '] This room is no longer in followers-only mode.');
								this.emits(['followersonly', 'followersmode', '_promiseFollowersoff'], [_disabled, _disabled, [null]]);
							} else {
								var minutes = ~~message.tags['followers-only'];
								var _enabled = [channel, true, minutes];
								this.log.info('[' + channel + '] This room is now in follower-only mode.');
								this.emits(['followersonly', 'followersmode', '_promiseFollowers'], [_enabled, _enabled, [null]]);
							}
						}
					}
					break;

				// Wrong cluster..
				case 'SERVERCHANGE':
					break;

				default:
					this.log.warn('Could not parse message from tmi.twitch.tv:\n' + JSON.stringify(message, null, 4));
					break;
			}
		}

		// Messages from jtv..
		else if (message.prefix === 'jtv') {
				switch (message.command) {
					case 'MODE':
						if (msg === '+o') {
							// Add username to the moderators..
							if (!this.moderators[channel]) {
								this.moderators[channel] = [];
							}
							if (!this.moderators[channel].includes(message.params[2])) {
								this.moderators[channel].push(message.params[2]);
							}

							this.emit('mod', channel, message.params[2]);
						} else if (msg === '-o') {
							// Remove username from the moderators..
							if (!this.moderators[channel]) {
								this.moderators[channel] = [];
							}
							this.moderators[channel].filter(function (value) {
								return value !== message.params[2];
							});

							this.emit('unmod', channel, message.params[2]);
						}
						break;

					default:
						this.log.warn('Could not parse message from jtv:\n' + JSON.stringify(message, null, 4));
						break;
				}
			}

			// Anything else..
			else {
					switch (message.command) {
						case '353':
							this.emit('names', message.params[2], message.params[3].split(' '));
							break;

						case '366':
							break;

						// Someone has joined the channel..
						case 'JOIN':
							{
								var nick = message.prefix.split('!')[0];
								// Joined a channel as a justinfan (anonymous) user..
								if (_.isJustinfan(this.getUsername()) && this.username === nick) {
									this.lastJoined = channel;
									this.channels.push(channel);
									this.log.info('Joined ' + channel);
									this.emit('join', channel, nick, true);
								}

								// Someone else joined the channel, just emit the join event..
								if (this.username !== nick) {
									this.emit('join', channel, nick, false);
								}
								break;
							}

						// Someone has left the channel..
						case 'PART':
							{
								var isSelf = false;
								var _nick = message.prefix.split('!')[0];
								// Client left a channel..
								if (this.username === _nick) {
									isSelf = true;
									if (this.userstate[channel]) {
										delete this.userstate[channel];
									}

									var index = this.channels.indexOf(channel);
									if (index !== -1) {
										this.channels.splice(index, 1);
									}

									index = this.opts.channels.indexOf(channel);
									if (index !== -1) {
										this.opts.channels.splice(index, 1);
									}

									this.log.info('Left ' + channel);
									this.emit('_promisePart', null);
								}

								// Client or someone else left the channel, emit the part event..
								this.emit('part', channel, _nick, isSelf);
								break;
							}

						// Received a whisper..
						case 'WHISPER':
							{
								var _nick2 = message.prefix.split('!')[0];
								this.log.info('[WHISPER] <' + _nick2 + '>: ' + msg);

								// Update the tags to provide the username..
								if (!_.hasOwn(message.tags, 'username')) {
									message.tags.username = _nick2;
								}
								message.tags['message-type'] = 'whisper';

								var from = _.channel(message.tags.username);
								// Emit for both, whisper and message..
								this.emits(['whisper', 'message'], [[from, message.tags, msg, false]]);
								break;
							}

						case 'PRIVMSG':
							// Add username (lowercase) to the tags..
							message.tags.username = message.prefix.split('!')[0];

							// Message from JTV..
							if (message.tags.username === 'jtv') {
								var name = _.username(msg.split(' ')[0]);
								var autohost = msg.includes('auto');
								// Someone is hosting the channel and the message contains how many viewers..
								if (msg.includes('hosting you for')) {
									var count = _.extractNumber(msg);

									this.emit('hosted', channel, name, count, autohost);
								}

								// Some is hosting the channel, but no viewer(s) count provided in the message..
								else if (msg.includes('hosting you')) {
										this.emit('hosted', channel, name, 0, autohost);
									}
							} else {
								var messagesLogLevel = _.get(this.opts.options.messagesLogLevel, 'info');

								// Message is an action (/me <message>)..
								var actionMessage = _.actionMessage(msg);
								message.tags['message-type'] = actionMessage ? 'action' : 'chat';
								msg = actionMessage ? actionMessage[1] : msg;
								// Check for Bits prior to actions message
								if (_.hasOwn(message.tags, 'bits')) {
									this.emit('cheer', channel, message.tags, msg);
								} else {
									//Handle Channel Point Redemptions (Require's Text Input)
									if (_.hasOwn(message.tags, 'msg-id')) {
										if (message.tags['msg-id'] === 'highlighted-message') {
											var rewardtype = message.tags['msg-id'];
											this.emit('redeem', channel, message.tags.username, rewardtype, message.tags, msg);
										} else if (message.tags['msg-id'] === 'skip-subs-mode-message') {
											var _rewardtype = message.tags['msg-id'];
											this.emit('redeem', channel, message.tags.username, _rewardtype, message.tags, msg);
										}
									} else if (_.hasOwn(message.tags, 'custom-reward-id')) {
										var _rewardtype2 = message.tags['custom-reward-id'];
										this.emit('redeem', channel, message.tags.username, _rewardtype2, message.tags, msg);
									}
									if (actionMessage) {
										this.log[messagesLogLevel]('[' + channel + '] *<' + message.tags.username + '>: ' + msg);
										this.emits(['action', 'message'], [[channel, message.tags, msg, false]]);
									}

									// Message is a regular chat message..
									else {
											this.log[messagesLogLevel]('[' + channel + '] <' + message.tags.username + '>: ' + msg);
											this.emits(['chat', 'message'], [[channel, message.tags, msg, false]]);
										}
								}
							}
							break;

						default:
							this.log.warn('Could not parse message:\n' + JSON.stringify(message, null, 4));
							break;
					}
				}
};
// Connect to server..
client.prototype.connect = function connect() {
	var _this2 = this;

	return new Promise(function (resolve, reject) {
		_this2.server = _.get(_this2.opts.connection.server, 'irc-ws.chat.twitch.tv');
		_this2.port = _.get(_this2.opts.connection.port, 80);

		// Override port if using a secure connection..
		if (_this2.secure) {
			_this2.port = 443;
		}
		if (_this2.port === 443) {
			_this2.secure = true;
		}

		_this2.reconnectTimer = _this2.reconnectTimer * _this2.reconnectDecay;
		if (_this2.reconnectTimer >= _this2.maxReconnectInterval) {
			_this2.reconnectTimer = _this2.maxReconnectInterval;
		}

		// Connect to server from configuration..
		_this2._openConnection();
		_this2.once('_promiseConnect', function (err) {
			if (!err) {
				resolve([_this2.server, ~~_this2.port]);
			} else {
				reject(err);
			}
		});
	});
};
// Open a connection..
client.prototype._openConnection = function _openConnection() {
	var url = (this.secure ? 'wss' : 'ws') + '://' + this.server + ':' + this.port + '/';
	/** @type {import('ws').ClientOptions} */
	var connectionOptions = {};
	if ('agent' in this.opts.connection) {
		connectionOptions.agent = this.opts.connection.agent;
	}
	this.ws = new _WebSocket(url, 'irc', connectionOptions);

	this.ws.onmessage = this._onMessage.bind(this);
	this.ws.onerror = this._onError.bind(this);
	this.ws.onclose = this._onClose.bind(this);
	this.ws.onopen = this._onOpen.bind(this);
};
// Called when the WebSocket connection's readyState changes to OPEN.
// Indicates that the connection is ready to send and receive data..
client.prototype._onOpen = function _onOpen() {
	var _this3 = this;

	if (!this._isConnected()) {
		return;
	}

	// Emitting "connecting" event..
	this.log.info('Connecting to ' + this.server + ' on port ' + this.port + '..');
	this.emit('connecting', this.server, ~~this.port);

	this.username = _.get(this.opts.identity.username, _.justinfan());
	this._getToken().then(function (token) {
		var password = _.password(token);

		// Emitting "logon" event..
		_this3.log.info('Sending authentication to server..');
		_this3.emit('logon');

		var caps = 'twitch.tv/tags twitch.tv/commands';
		if (!_this3._skipMembership) {
			caps += ' twitch.tv/membership';
		}
		_this3.ws.send('CAP REQ :' + caps);

		// Authentication..
		if (password) {
			_this3.ws.send('PASS ' + password);
		} else if (_.isJustinfan(_this3.username)) {
			_this3.ws.send('PASS SCHMOOPIIE');
		}
		_this3.ws.send('NICK ' + _this3.username);
	}).catch(function (err) {
		_this3.emits(['_promiseConnect', 'disconnected'], [[err], ['Could not get a token.']]);
	});
};
// Fetches a token from the option.
client.prototype._getToken = function _getToken() {
	var passwordOption = this.opts.identity.password;
	var password = void 0;
	if (typeof passwordOption === 'function') {
		password = passwordOption();
		if (password instanceof Promise) {
			return password;
		}
		return Promise.resolve(password);
	}
	return Promise.resolve(passwordOption);
};
// Called when a message is received from the server..
client.prototype._onMessage = function _onMessage(event) {
	var _this4 = this;

	var parts = event.data.trim().split('\r\n');

	parts.forEach(function (str) {
		var msg = parse.msg(str);
		if (msg) {
			_this4.handleMessage(msg);
		}
	});
};
// Called when an error occurs..
client.prototype._onError = function _onError() {
	var _this5 = this;

	this.moderators = {};
	this.userstate = {};
	this.globaluserstate = {};

	// Stop the internal ping timeout check interval..
	clearInterval(this.pingLoop);
	clearTimeout(this.pingTimeout);
	clearTimeout(this._updateEmotesetsTimer);

	this.reason = this.ws === null ? 'Connection closed.' : 'Unable to connect.';

	this.emits(['_promiseConnect', 'disconnected'], [[this.reason]]);

	// Reconnect to server..
	if (this.reconnect && this.reconnections === this.maxReconnectAttempts) {
		this.emit('maxreconnect');
		this.log.error('Maximum reconnection attempts reached.');
	}
	if (this.reconnect && !this.reconnecting && this.reconnections <= this.maxReconnectAttempts - 1) {
		this.reconnecting = true;
		this.reconnections = this.reconnections + 1;
		this.log.error('Reconnecting in ' + Math.round(this.reconnectTimer / 1000) + ' seconds..');
		this.emit('reconnect');
		setTimeout(function () {
			_this5.reconnecting = false;
			_this5.connect().catch(function (err) {
				return _this5.log.error(err);
			});
		}, this.reconnectTimer);
	}

	this.ws = null;
};
// Called when the WebSocket connection's readyState changes to CLOSED..
client.prototype._onClose = function _onClose() {
	var _this6 = this;

	this.moderators = {};
	this.userstate = {};
	this.globaluserstate = {};

	// Stop the internal ping timeout check interval..
	clearInterval(this.pingLoop);
	clearTimeout(this.pingTimeout);
	clearTimeout(this._updateEmotesetsTimer);

	// User called .disconnect(), don't try to reconnect.
	if (this.wasCloseCalled) {
		this.wasCloseCalled = false;
		this.reason = 'Connection closed.';
		this.log.info(this.reason);
		this.emits(['_promiseConnect', '_promiseDisconnect', 'disconnected'], [[this.reason], [null], [this.reason]]);
	}

	// Got disconnected from server..
	else {
			this.emits(['_promiseConnect', 'disconnected'], [[this.reason]]);

			// Reconnect to server..
			if (this.reconnect && this.reconnections === this.maxReconnectAttempts) {
				this.emit('maxreconnect');
				this.log.error('Maximum reconnection attempts reached.');
			}
			if (this.reconnect && !this.reconnecting && this.reconnections <= this.maxReconnectAttempts - 1) {
				this.reconnecting = true;
				this.reconnections = this.reconnections + 1;
				this.log.error('Could not connect to server. Reconnecting in ' + Math.round(this.reconnectTimer / 1000) + ' seconds..');
				this.emit('reconnect');
				setTimeout(function () {
					_this6.reconnecting = false;
					_this6.connect().catch(function (err) {
						return _this6.log.error(err);
					});
				}, this.reconnectTimer);
			}
		}

	this.ws = null;
};
// Minimum of 600ms for command promises, if current latency exceeds, add 100ms to it to make sure it doesn't get timed out..
client.prototype._getPromiseDelay = function _getPromiseDelay() {
	if (this.currentLatency <= 600) {
		return 600;
	} else {
		return this.currentLatency + 100;
	}
};
// Send command to server or channel..
client.prototype._sendCommand = function _sendCommand(delay, channel, command, fn) {
	var _this7 = this;

	// Race promise against delay..
	return new Promise(function (resolve, reject) {
		// Make sure the socket is opened..
		if (!_this7._isConnected()) {
			// Disconnected from server..
			return reject('Not connected to server.');
		} else if (delay === null || typeof delay === 'number') {
			if (delay === null) {
				delay = _this7._getPromiseDelay();
			}
			_.promiseDelay(delay).then(function () {
				return reject('No response from Twitch.');
			});
		}

		// Executing a command on a channel..
		if (channel !== null) {
			var chan = _.channel(channel);
			_this7.log.info('[' + chan + '] Executing command: ' + command);
			_this7.ws.send('PRIVMSG ' + chan + ' :' + command);
		}
		// Executing a raw command..
		else {
				_this7.log.info('Executing command: ' + command);
				_this7.ws.send(command);
			}
		if (typeof fn === 'function') {
			fn(resolve, reject);
		} else {
			resolve();
		}
	});
};
// Send a message to channel..
client.prototype._sendMessage = function _sendMessage(delay, channel, message, fn) {
	var _this8 = this;

	// Promise a result..
	return new Promise(function (resolve, reject) {
		// Make sure the socket is opened and not logged in as a justinfan user..
		if (!_this8._isConnected()) {
			return reject('Not connected to server.');
		} else if (_.isJustinfan(_this8.getUsername())) {
			return reject('Cannot send anonymous messages.');
		}
		var chan = _.channel(channel);
		if (!_this8.userstate[chan]) {
			_this8.userstate[chan] = {};
		}

		// Split long lines otherwise they will be eaten by the server..
		if (message.length >= 500) {
			var msg = _.splitLine(message, 500);
			message = msg[0];

			setTimeout(function () {
				_this8._sendMessage(delay, channel, msg[1], function () {});
			}, 350);
		}

		_this8.ws.send('PRIVMSG ' + chan + ' :' + message);

		var emotes = {};

		// Parse regex and string emotes..
		Object.keys(_this8.emotesets).forEach(function (id) {
			return _this8.emotesets[id].forEach(function (emote) {
				var emoteFunc = _.isRegex(emote.code) ? parse.emoteRegex : parse.emoteString;
				return emoteFunc(message, emote.code, emote.id, emotes);
			});
		});

		// Merge userstate with parsed emotes..
		var userstate = Object.assign(_this8.userstate[chan], parse.emotes({ emotes: parse.transformEmotes(emotes) || null }));

		var messagesLogLevel = _.get(_this8.opts.options.messagesLogLevel, 'info');

		// Message is an action (/me <message>)..
		var actionMessage = _.actionMessage(message);
		if (actionMessage) {
			userstate['message-type'] = 'action';
			_this8.log[messagesLogLevel]('[' + chan + '] *<' + _this8.getUsername() + '>: ' + actionMessage[1]);
			_this8.emits(['action', 'message'], [[chan, userstate, actionMessage[1], true]]);
		}

		// Message is a regular chat message..
		else {
				userstate['message-type'] = 'chat';
				_this8.log[messagesLogLevel]('[' + chan + '] <' + _this8.getUsername() + '>: ' + message);
				_this8.emits(['chat', 'message'], [[chan, userstate, message, true]]);
			}
		if (typeof fn === 'function') {
			fn(resolve, reject);
		} else {
			resolve();
		}
	});
};
// Grab the emote-sets object from the API..

// Get current username..
client.prototype.getUsername = function getUsername() {
	return this.username;
};
// Get current options..
client.prototype.getOptions = function getOptions() {
	return this.opts;
};
// Get current channels..
client.prototype.getChannels = function getChannels() {
	return this.channels;
};
// Check if username is a moderator on a channel..
client.prototype.isMod = function isMod(channel, username) {
	var chan = _.channel(channel);
	if (!this.moderators[chan]) {
		this.moderators[chan] = [];
	}
	return this.moderators[chan].includes(_.username(username));
};
// Get readyState..
client.prototype.readyState = function readyState() {
	if (this.ws === null) {
		return 'CLOSED';
	}
	return ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'][this.ws.readyState];
};
// Determine if the client has a WebSocket and it's open..
client.prototype._isConnected = function _isConnected() {
	return this.ws !== null && this.ws.readyState === 1;
};
// Disconnect from server..
client.prototype.disconnect = function disconnect() {
	var _this9 = this;

	return new Promise(function (resolve, reject) {
		if (_this9.ws !== null && _this9.ws.readyState !== 3) {
			_this9.wasCloseCalled = true;
			_this9.log.info('Disconnecting from server..');
			_this9.ws.close();
			_this9.once('_promiseDisconnect', function () {
				return resolve([_this9.server, ~~_this9.port]);
			});
		} else {
			_this9.log.error('Cannot disconnect from server. Socket is not opened or connection is already closing.');
			reject('Cannot disconnect from server. Socket is not opened or connection is already closing.');
		}
	});
};
client.prototype.off = client.prototype.removeListener;

// Expose everything, for browser and Node..
if (typeof module !== 'undefined' && module.exports) {
	module.exports = client;
}
if (typeof window !== 'undefined') {
	window.tmi = {
		client: client,
		Client: client
	};
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(33)))

/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// eslint-disable-next-line no-control-regex
var actionMessageRegex = /^\u0001ACTION ([^\u0001]+)\u0001$/;
var justinFanRegex = /^(justinfan)(\d+$)/;
var unescapeIRCRegex = /\\([sn:r\\])/g;
var escapeIRCRegex = /([ \n;\r\\])/g;
var ircEscapedChars = { s: ' ', n: '', ':': ';', r: '' };
var ircUnescapedChars = { ' ': 's', '\n': 'n', ';': ':', '\r': 'r' };
var urlRegex = new RegExp('^(?:(?:https?|ftp)://)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))\\.?)(?::\\d{2,5})?(?:[/?#]\\S*)?$', 'i');
var regexEmoteRegex = /[|\\^$*+?:#]/;
var _ = module.exports = {
	// Return the second value if the first value is undefined..
	get: function get(a, b) {
		return typeof a === 'undefined' ? b : a;
	},

	// Indirectly use hasOwnProperty
	hasOwn: function hasOwn(obj, key) {
		return {}.hasOwnProperty.call(obj, key);
	},

	// Race a promise against a delay..
	promiseDelay: function promiseDelay(time) {
		return new Promise(function (resolve) {
			return setTimeout(resolve, time);
		});
	},

	// Value is a finite number..
	isFinite: function (_isFinite) {
		function isFinite(_x) {
			return _isFinite.apply(this, arguments);
		}

		isFinite.toString = function () {
			return _isFinite.toString();
		};

		return isFinite;
	}(function (int) {
		return isFinite(int) && !isNaN(parseFloat(int));
	}),

	// Parse string to number. Returns NaN if string can't be parsed to number..
	toNumber: function toNumber(num, precision) {
		if (num === null) {
			return 0;
		}
		var factor = Math.pow(10, _.isFinite(precision) ? precision : 0);
		return Math.round(num * factor) / factor;
	},


	// Value is an integer..
	isInteger: function isInteger(int) {
		return !isNaN(_.toNumber(int, 0));
	},

	// Value is a regex..
	isRegex: function isRegex(str) {
		return regexEmoteRegex.test(str);
	},

	// Value is a valid url..
	isURL: function isURL(str) {
		return urlRegex.test(str);
	},

	// Return a random justinfan username..
	justinfan: function justinfan() {
		return 'justinfan' + Math.floor(Math.random() * 80000 + 1000);
	},

	// Username is a justinfan username..
	isJustinfan: function isJustinfan(username) {
		return justinFanRegex.test(username);
	},

	// Return a valid channel name..
	channel: function channel(str) {
		var channel = (str ? str : '').toLowerCase();
		return channel[0] === '#' ? channel : '#' + channel;
	},


	// Return a valid username..
	username: function username(str) {
		var username = (str ? str : '').toLowerCase();
		return username[0] === '#' ? username.slice(1) : username;
	},


	// Return a valid token..
	token: function token(str) {
		return str ? str.toLowerCase().replace('oauth:', '') : '';
	},

	// Return a valid password..
	password: function password(str) {
		var token = _.token(str);
		return token ? 'oauth:' + token : '';
	},


	actionMessage: function actionMessage(msg) {
		return msg.match(actionMessageRegex);
	},

	// Replace all occurences of a string using an object..
	replaceAll: function replaceAll(str, obj) {
		if (str === null || typeof str === 'undefined') {
			return null;
		}
		for (var x in obj) {
			str = str.replace(new RegExp(x, 'g'), obj[x]);
		}
		return str;
	},


	unescapeHtml: function unescapeHtml(safe) {
		return safe.replace(/\\&amp\\;/g, '&').replace(/\\&lt\\;/g, '<').replace(/\\&gt\\;/g, '>').replace(/\\&quot\\;/g, '"').replace(/\\&#039\\;/g, '\'');
	},

	// Escaping values:
	// http://ircv3.net/specs/core/message-tags-3.2.html#escaping-values
	unescapeIRC: function unescapeIRC(msg) {
		if (!msg || typeof msg !== 'string' || !msg.includes('\\')) {
			return msg;
		}
		return msg.replace(unescapeIRCRegex, function (m, p) {
			return p in ircEscapedChars ? ircEscapedChars[p] : p;
		});
	},
	escapeIRC: function escapeIRC(msg) {
		if (!msg || typeof msg !== 'string') {
			return msg;
		}
		return msg.replace(escapeIRCRegex, function (m, p) {
			return p in ircUnescapedChars ? '\\' + ircUnescapedChars[p] : p;
		});
	},


	// Add word to a string..
	addWord: function addWord(line, word) {
		return line.length ? line + ' ' + word : line + word;
	},

	// Split a line but try not to cut a word in half..
	splitLine: function splitLine(input, length) {
		var lastSpace = input.substring(0, length).lastIndexOf(' ');
		// No spaces found, split at the very end to avoid a loop..
		if (lastSpace === -1) {
			lastSpace = length - 1;
		}
		return [input.substring(0, lastSpace), input.substring(lastSpace + 1)];
	},


	// Extract a number from a string..
	extractNumber: function extractNumber(str) {
		var parts = str.split(' ');
		for (var i = 0; i < parts.length; i++) {
			if (_.isInteger(parts[i])) {
				return ~~parts[i];
			}
		}
		return 0;
	},


	// Format the date..
	formatDate: function formatDate(date) {
		var hours = date.getHours();
		var mins = date.getMinutes();

		hours = (hours < 10 ? '0' : '') + hours;
		mins = (mins < 10 ? '0' : '') + mins;
		return hours + ':' + mins;
	},


	// Inherit the prototype methods from one constructor into another..
	inherits: function inherits(ctor, superCtor) {
		ctor.super_ = superCtor;
		var TempCtor = function TempCtor() {};
		TempCtor.prototype = superCtor.prototype;
		ctor.prototype = new TempCtor();
		ctor.prototype.constructor = ctor;
	},


	// Return whether inside a Node application or not..
	isNode: function isNode() {
		try {
			return (typeof process === 'undefined' ? 'undefined' : _typeof(process)) === 'object' && Object.prototype.toString.call(process) === '[object process]';
		} catch (e) {}
		return false;
	}
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ }),
/* 280 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 281 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var fetch = __webpack_require__(280);
var _ = __webpack_require__(279);

module.exports = function api(options, callback) {
	// Set the url to options.uri or options.url..
	var url = options.url !== undefined ? options.url : options.uri;

	// Make sure it is a valid url..
	if (!_.isURL(url)) {
		url = 'https://api.twitch.tv/kraken' + (url[0] === '/' ? url : '/' + url);
	}

	// We are inside a Node application, so we can use the node-fetch module..
	if (_.isNode()) {
		var opts = Object.assign({ method: 'GET', json: true }, options);
		if (opts.qs) {
			var qs = new URLSearchParams(opts.qs);
			url += '?' + qs;
		}
		/** @type {import('node-fetch').RequestInit} */
		var fetchOptions = {};
		if ('fetchAgent' in this.opts.connection) {
			fetchOptions.agent = this.opts.connection.fetchAgent;
		}
		/** @type {ReturnType<import('node-fetch')['default']>} */
		var fetchPromise = fetch(url, {
			method: opts.method,
			headers: opts.headers,
			body: opts.body
		});
		var response = {};
		fetchPromise.then(function (res) {
			response = { statusCode: res.status, headers: res.headers };
			return opts.json ? res.json() : res.text();
		}).then(function (data) {
			return callback(null, response, data);
		}, function (err) {
			return callback(err, response, null);
		});
	}
	// Web application, extension, React Native etc.
	else {
			var _opts = Object.assign({ method: 'GET', headers: {} }, options, { url: url });
			// prepare request
			var xhr = new XMLHttpRequest();
			xhr.open(_opts.method, _opts.url, true);
			for (var name in _opts.headers) {
				xhr.setRequestHeader(name, _opts.headers[name]);
			}
			xhr.responseType = 'json';
			// set request handler
			xhr.addEventListener('load', function (_ev) {
				if (xhr.readyState === 4) {
					if (xhr.status !== 200) {
						callback(xhr.status, null, null);
					} else {
						callback(null, null, xhr.response);
					}
				}
			});
			// submit
			xhr.send();
		}
};

/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _ = __webpack_require__(279);

// Enable followers-only mode on a channel..
function followersonly(channel, minutes) {
	var _this = this;

	channel = _.channel(channel);
	minutes = _.get(minutes, 30);
	// Send the command to the server and race the Promise against a delay..
	return this._sendCommand(null, channel, '/followers ' + minutes, function (resolve, reject) {
		// Received _promiseFollowers event, resolve or reject..
		_this.once('_promiseFollowers', function (err) {
			if (!err) {
				resolve([channel, ~~minutes]);
			} else {
				reject(err);
			}
		});
	});
}

// Disable followers-only mode on a channel..
function followersonlyoff(channel) {
	var _this2 = this;

	channel = _.channel(channel);
	// Send the command to the server and race the Promise against a delay..
	return this._sendCommand(null, channel, '/followersoff', function (resolve, reject) {
		// Received _promiseFollowersoff event, resolve or reject..
		_this2.once('_promiseFollowersoff', function (err) {
			if (!err) {
				resolve([channel]);
			} else {
				reject(err);
			}
		});
	});
}

// Leave a channel..
function part(channel) {
	var _this3 = this;

	channel = _.channel(channel);
	// Send the command to the server and race the Promise against a delay..
	return this._sendCommand(null, null, 'PART ' + channel, function (resolve, reject) {
		// Received _promisePart event, resolve or reject..
		_this3.once('_promisePart', function (err) {
			if (!err) {
				resolve([channel]);
			} else {
				reject(err);
			}
		});
	});
}

// Enable R9KBeta mode on a channel..
function r9kbeta(channel) {
	var _this4 = this;

	channel = _.channel(channel);
	// Send the command to the server and race the Promise against a delay..
	return this._sendCommand(null, channel, '/r9kbeta', function (resolve, reject) {
		// Received _promiseR9kbeta event, resolve or reject..
		_this4.once('_promiseR9kbeta', function (err) {
			if (!err) {
				resolve([channel]);
			} else {
				reject(err);
			}
		});
	});
}

// Disable R9KBeta mode on a channel..
function r9kbetaoff(channel) {
	var _this5 = this;

	channel = _.channel(channel);
	// Send the command to the server and race the Promise against a delay..
	return this._sendCommand(null, channel, '/r9kbetaoff', function (resolve, reject) {
		// Received _promiseR9kbetaoff event, resolve or reject..
		_this5.once('_promiseR9kbetaoff', function (err) {
			if (!err) {
				resolve([channel]);
			} else {
				reject(err);
			}
		});
	});
}

// Enable slow mode on a channel..
function slow(channel, seconds) {
	var _this6 = this;

	channel = _.channel(channel);
	seconds = _.get(seconds, 300);
	// Send the command to the server and race the Promise against a delay..
	return this._sendCommand(null, channel, '/slow ' + seconds, function (resolve, reject) {
		// Received _promiseSlow event, resolve or reject..
		_this6.once('_promiseSlow', function (err) {
			if (!err) {
				resolve([channel, ~~seconds]);
			} else {
				reject(err);
			}
		});
	});
}

// Disable slow mode on a channel..
function slowoff(channel) {
	var _this7 = this;

	channel = _.channel(channel);
	// Send the command to the server and race the Promise against a delay..
	return this._sendCommand(null, channel, '/slowoff', function (resolve, reject) {
		// Received _promiseSlowoff event, resolve or reject..
		_this7.once('_promiseSlowoff', function (err) {
			if (!err) {
				resolve([channel]);
			} else {
				reject(err);
			}
		});
	});
}

module.exports = {
	// Send action message (/me <message>) on a channel..
	action: function action(channel, message) {
		channel = _.channel(channel);
		message = '\x01ACTION ' + message + '\x01';
		// Send the command to the server and race the Promise against a delay..
		return this._sendMessage(this._getPromiseDelay(), channel, message, function (resolve, _reject) {
			// At this time, there is no possible way to detect if a message has been sent has been eaten
			// by the server, so we can only resolve the Promise.
			resolve([channel, message]);
		});
	},


	// Ban username on channel..
	ban: function ban(channel, username, reason) {
		var _this8 = this;

		channel = _.channel(channel);
		username = _.username(username);
		reason = _.get(reason, '');
		// Send the command to the server and race the Promise against a delay..
		return this._sendCommand(null, channel, '/ban ' + username + ' ' + reason, function (resolve, reject) {
			// Received _promiseBan event, resolve or reject..
			_this8.once('_promiseBan', function (err) {
				if (!err) {
					resolve([channel, username, reason]);
				} else {
					reject(err);
				}
			});
		});
	},


	// Clear all messages on a channel..
	clear: function clear(channel) {
		var _this9 = this;

		channel = _.channel(channel);
		// Send the command to the server and race the Promise against a delay..
		return this._sendCommand(null, channel, '/clear', function (resolve, reject) {
			// Received _promiseClear event, resolve or reject..
			_this9.once('_promiseClear', function (err) {
				if (!err) {
					resolve([channel]);
				} else {
					reject(err);
				}
			});
		});
	},


	// Change the color of your username..
	color: function color(channel, newColor) {
		var _this10 = this;

		newColor = _.get(newColor, channel);
		// Send the command to the server and race the Promise against a delay..
		return this._sendCommand(null, '#tmijs', '/color ' + newColor, function (resolve, reject) {
			// Received _promiseColor event, resolve or reject..
			_this10.once('_promiseColor', function (err) {
				if (!err) {
					resolve([newColor]);
				} else {
					reject(err);
				}
			});
		});
	},


	// Run commercial on a channel for X seconds..
	commercial: function commercial(channel, seconds) {
		var _this11 = this;

		channel = _.channel(channel);
		seconds = _.get(seconds, 30);
		// Send the command to the server and race the Promise against a delay..
		return this._sendCommand(null, channel, '/commercial ' + seconds, function (resolve, reject) {
			// Received _promiseCommercial event, resolve or reject..
			_this11.once('_promiseCommercial', function (err) {
				if (!err) {
					resolve([channel, ~~seconds]);
				} else {
					reject(err);
				}
			});
		});
	},


	// Delete a specific message on a channel
	deletemessage: function deletemessage(channel, messageUUID) {
		var _this12 = this;

		channel = _.channel(channel);
		// Send the command to the server and race the Promise against a delay..
		return this._sendCommand(null, channel, '/delete ' + messageUUID, function (resolve, reject) {
			// Received _promiseDeletemessage event, resolve or reject..
			_this12.once('_promiseDeletemessage', function (err) {
				if (!err) {
					resolve([channel]);
				} else {
					reject(err);
				}
			});
		});
	},


	// Enable emote-only mode on a channel..
	emoteonly: function emoteonly(channel) {
		var _this13 = this;

		channel = _.channel(channel);
		// Send the command to the server and race the Promise against a delay..
		return this._sendCommand(null, channel, '/emoteonly', function (resolve, reject) {
			// Received _promiseEmoteonly event, resolve or reject..
			_this13.once('_promiseEmoteonly', function (err) {
				if (!err) {
					resolve([channel]);
				} else {
					reject(err);
				}
			});
		});
	},


	// Disable emote-only mode on a channel..
	emoteonlyoff: function emoteonlyoff(channel) {
		var _this14 = this;

		channel = _.channel(channel);
		// Send the command to the server and race the Promise against a delay..
		return this._sendCommand(null, channel, '/emoteonlyoff', function (resolve, reject) {
			// Received _promiseEmoteonlyoff event, resolve or reject..
			_this14.once('_promiseEmoteonlyoff', function (err) {
				if (!err) {
					resolve([channel]);
				} else {
					reject(err);
				}
			});
		});
	},


	// Enable followers-only mode on a channel..
	followersonly: followersonly,

	// Alias for followersonly()..
	followersmode: followersonly,

	// Disable followers-only mode on a channel..
	followersonlyoff: followersonlyoff,

	// Alias for followersonlyoff()..
	followersmodeoff: followersonlyoff,

	// Host a channel..
	host: function host(channel, target) {
		var _this15 = this;

		channel = _.channel(channel);
		target = _.username(target);
		// Send the command to the server and race the Promise against a delay..
		return this._sendCommand(2000, channel, '/host ' + target, function (resolve, reject) {
			// Received _promiseHost event, resolve or reject..
			_this15.once('_promiseHost', function (err, remaining) {
				if (!err) {
					resolve([channel, target, ~~remaining]);
				} else {
					reject(err);
				}
			});
		});
	},


	// Join a channel..
	join: function join(channel) {
		var _this16 = this;

		channel = _.channel(channel);
		// Send the command to the server ..
		return this._sendCommand(undefined, null, 'JOIN ' + channel, function (resolve, reject) {
			var eventName = '_promiseJoin';
			var hasFulfilled = false;
			var listener = function listener(err, joinedChannel) {
				if (channel === _.channel(joinedChannel)) {
					// Received _promiseJoin event for the target channel, resolve or reject..
					_this16.removeListener(eventName, listener);
					hasFulfilled = true;
					if (!err) {
						resolve([channel]);
					} else {
						reject(err);
					}
				}
			};
			_this16.on(eventName, listener);
			// Race the Promise against a delay..
			var delay = _this16._getPromiseDelay();
			_.promiseDelay(delay).then(function () {
				if (!hasFulfilled) {
					_this16.emit(eventName, 'No response from Twitch.', channel);
				}
			});
		});
	},


	// Mod username on channel..
	mod: function mod(channel, username) {
		var _this17 = this;

		channel = _.channel(channel);
		username = _.username(username);
		// Send the command to the server and race the Promise against a delay..
		return this._sendCommand(null, channel, '/mod ' + username, function (resolve, reject) {
			// Received _promiseMod event, resolve or reject..
			_this17.once('_promiseMod', function (err) {
				if (!err) {
					resolve([channel, username]);
				} else {
					reject(err);
				}
			});
		});
	},


	// Get list of mods on a channel..
	mods: function mods(channel) {
		var _this18 = this;

		channel = _.channel(channel);
		// Send the command to the server and race the Promise against a delay..
		return this._sendCommand(null, channel, '/mods', function (resolve, reject) {
			// Received _promiseMods event, resolve or reject..
			_this18.once('_promiseMods', function (err, mods) {
				if (!err) {
					// Update the internal list of moderators..
					mods.forEach(function (username) {
						if (!_this18.moderators[channel]) {
							_this18.moderators[channel] = [];
						}
						if (!_this18.moderators[channel].includes(username)) {
							_this18.moderators[channel].push(username);
						}
					});
					resolve(mods);
				} else {
					reject(err);
				}
			});
		});
	},


	// Leave a channel..
	part: part,

	// Alias for part()..
	leave: part,

	// Send a ping to the server..
	ping: function ping() {
		var _this19 = this;

		// Send the command to the server and race the Promise against a delay..
		return this._sendCommand(null, null, 'PING', function (resolve, _reject) {
			// Update the internal ping timeout check interval..
			_this19.latency = new Date();
			_this19.pingTimeout = setTimeout(function () {
				if (_this19.ws !== null) {
					_this19.wasCloseCalled = false;
					_this19.log.error('Ping timeout.');
					_this19.ws.close();

					clearInterval(_this19.pingLoop);
					clearTimeout(_this19.pingTimeout);
				}
			}, _.get(_this19.opts.connection.timeout, 9999));

			// Received _promisePing event, resolve or reject..
			_this19.once('_promisePing', function (latency) {
				return resolve([parseFloat(latency)]);
			});
		});
	},


	// Enable R9KBeta mode on a channel..
	r9kbeta: r9kbeta,

	// Alias for r9kbeta()..
	r9kmode: r9kbeta,

	// Disable R9KBeta mode on a channel..
	r9kbetaoff: r9kbetaoff,

	// Alias for r9kbetaoff()..
	r9kmodeoff: r9kbetaoff,

	// Send a raw message to the server..
	raw: function raw(message) {
		// Send the command to the server and race the Promise against a delay..
		return this._sendCommand(null, null, message, function (resolve, _reject) {
			resolve([message]);
		});
	},


	// Send a message on a channel..
	say: function say(channel, message) {
		channel = _.channel(channel);

		if (message.startsWith('.') && !message.startsWith('..') || message.startsWith('/') || message.startsWith('\\')) {
			// Check if the message is an action message..
			if (message.substr(1, 3) === 'me ') {
				return this.action(channel, message.substr(4));
			} else {
				// Send the command to the server and race the Promise against a delay..
				return this._sendCommand(null, channel, message, function (resolve, _reject) {
					// At this time, there is no possible way to detect if a message has been sent has been eaten
					// by the server, so we can only resolve the Promise.
					resolve([channel, message]);
				});
			}
		}
		// Send the command to the server and race the Promise against a delay..
		return this._sendMessage(this._getPromiseDelay(), channel, message, function (resolve, _reject) {
			// At this time, there is no possible way to detect if a message has been sent has been eaten
			// by the server, so we can only resolve the Promise.
			resolve([channel, message]);
		});
	},


	// Enable slow mode on a channel..
	slow: slow,

	// Alias for slow()..
	slowmode: slow,

	// Disable slow mode on a channel..
	slowoff: slowoff,

	// Alias for slowoff()..
	slowmodeoff: slowoff,

	// Enable subscribers mode on a channel..
	subscribers: function subscribers(channel) {
		var _this20 = this;

		channel = _.channel(channel);
		// Send the command to the server and race the Promise against a delay..
		return this._sendCommand(null, channel, '/subscribers', function (resolve, reject) {
			// Received _promiseSubscribers event, resolve or reject..
			_this20.once('_promiseSubscribers', function (err) {
				if (!err) {
					resolve([channel]);
				} else {
					reject(err);
				}
			});
		});
	},


	// Disable subscribers mode on a channel..
	subscribersoff: function subscribersoff(channel) {
		var _this21 = this;

		channel = _.channel(channel);
		// Send the command to the server and race the Promise against a delay..
		return this._sendCommand(null, channel, '/subscribersoff', function (resolve, reject) {
			// Received _promiseSubscribersoff event, resolve or reject..
			_this21.once('_promiseSubscribersoff', function (err) {
				if (!err) {
					resolve([channel]);
				} else {
					reject(err);
				}
			});
		});
	},


	// Timeout username on channel for X seconds..
	timeout: function timeout(channel, username, seconds, reason) {
		var _this22 = this;

		channel = _.channel(channel);
		username = _.username(username);

		if (seconds !== null && !_.isInteger(seconds)) {
			reason = seconds;
			seconds = 300;
		}

		seconds = _.get(seconds, 300);
		reason = _.get(reason, '');
		// Send the command to the server and race the Promise against a delay..
		return this._sendCommand(null, channel, '/timeout ' + username + ' ' + seconds + ' ' + reason, function (resolve, reject) {
			// Received _promiseTimeout event, resolve or reject..
			_this22.once('_promiseTimeout', function (err) {
				if (!err) {
					resolve([channel, username, ~~seconds, reason]);
				} else {
					reject(err);
				}
			});
		});
	},


	// Unban username on channel..
	unban: function unban(channel, username) {
		var _this23 = this;

		channel = _.channel(channel);
		username = _.username(username);
		// Send the command to the server and race the Promise against a delay..
		return this._sendCommand(null, channel, '/unban ' + username, function (resolve, reject) {
			// Received _promiseUnban event, resolve or reject..
			_this23.once('_promiseUnban', function (err) {
				if (!err) {
					resolve([channel, username]);
				} else {
					reject(err);
				}
			});
		});
	},


	// End the current hosting..
	unhost: function unhost(channel) {
		var _this24 = this;

		channel = _.channel(channel);
		// Send the command to the server and race the Promise against a delay..
		return this._sendCommand(2000, channel, '/unhost', function (resolve, reject) {
			// Received _promiseUnhost event, resolve or reject..
			_this24.once('_promiseUnhost', function (err) {
				if (!err) {
					resolve([channel]);
				} else {
					reject(err);
				}
			});
		});
	},


	// Unmod username on channel..
	unmod: function unmod(channel, username) {
		var _this25 = this;

		channel = _.channel(channel);
		username = _.username(username);
		// Send the command to the server and race the Promise against a delay..
		return this._sendCommand(null, channel, '/unmod ' + username, function (resolve, reject) {
			// Received _promiseUnmod event, resolve or reject..
			_this25.once('_promiseUnmod', function (err) {
				if (!err) {
					resolve([channel, username]);
				} else {
					reject(err);
				}
			});
		});
	},


	// Unvip username on channel..
	unvip: function unvip(channel, username) {
		var _this26 = this;

		channel = _.channel(channel);
		username = _.username(username);
		// Send the command to the server and race the Promise against a delay..
		return this._sendCommand(null, channel, '/unvip ' + username, function (resolve, reject) {
			// Received _promiseUnvip event, resolve or reject..
			_this26.once('_promiseUnvip', function (err) {
				if (!err) {
					resolve([channel, username]);
				} else {
					reject(err);
				}
			});
		});
	},


	// Add username to VIP list on channel..
	vip: function vip(channel, username) {
		var _this27 = this;

		channel = _.channel(channel);
		username = _.username(username);
		// Send the command to the server and race the Promise against a delay..
		return this._sendCommand(null, channel, '/vip ' + username, function (resolve, reject) {
			// Received _promiseVip event, resolve or reject..
			_this27.once('_promiseVip', function (err) {
				if (!err) {
					resolve([channel, username]);
				} else {
					reject(err);
				}
			});
		});
	},


	// Get list of VIPs on a channel..
	vips: function vips(channel) {
		var _this28 = this;

		channel = _.channel(channel);
		// Send the command to the server and race the Promise against a delay..
		return this._sendCommand(null, channel, '/vips', function (resolve, reject) {
			// Received _promiseVips event, resolve or reject..
			_this28.once('_promiseVips', function (err, vips) {
				if (!err) {
					resolve(vips);
				} else {
					reject(err);
				}
			});
		});
	},


	// Send an whisper message to a user..
	whisper: function whisper(username, message) {
		var _this29 = this;

		username = _.username(username);

		// The server will not send a whisper to the account that sent it.
		if (username === this.getUsername()) {
			return Promise.reject('Cannot send a whisper to the same account.');
		}
		// Send the command to the server and race the Promise against a delay..
		return this._sendCommand(null, '#tmijs', '/w ' + username + ' ' + message, function (_resolve, reject) {
			_this29.once('_promiseWhisper', function (err) {
				if (err) {
					reject(err);
				}
			});
		}).catch(function (err) {
			// Either an "actual" error occured or the timeout triggered
			// the latter means no errors have occured and we can resolve
			// else just elevate the error
			if (err && typeof err === 'string' && err.indexOf('No response from Twitch.') !== 0) {
				throw err;
			}
			var from = _.channel(username);
			var userstate = Object.assign({
				'message-type': 'whisper',
				'message-id': null,
				'thread-id': null,
				username: _this29.getUsername()
			}, _this29.globaluserstate);

			// Emit for both, whisper and message..
			_this29.emits(['whisper', 'message'], [[from, userstate, message, true], [from, userstate, message, true]]);
			return [username, message];
		});
	}
};

/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/* istanbul ignore file */
/* eslint-disable */
/*
 * Copyright Joyent, Inc. and other Node contributors.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
 * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

function EventEmitter() {
	this._events = this._events || {};
	this._maxListeners = this._maxListeners || undefined;
}

module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function (n) {
	if (!isNumber(n) || n < 0 || isNaN(n)) {
		throw TypeError("n must be a positive number");
	}

	this._maxListeners = n;

	return this;
};

EventEmitter.prototype.emit = function (type) {
	var er, handler, len, args, i, listeners;

	if (!this._events) {
		this._events = {};
	}

	// If there is no 'error' event listener then throw.
	if (type === "error") {
		if (!this._events.error || isObject(this._events.error) && !this._events.error.length) {
			er = arguments[1];
			if (er instanceof Error) {
				throw er;
			}
			throw TypeError("Uncaught, unspecified \"error\" event.");
		}
	}

	handler = this._events[type];

	if (isUndefined(handler)) {
		return false;
	}

	if (isFunction(handler)) {
		switch (arguments.length) {
			// fast cases
			case 1:
				handler.call(this);
				break;
			case 2:
				handler.call(this, arguments[1]);
				break;
			case 3:
				handler.call(this, arguments[1], arguments[2]);
				break;
			// slower
			default:
				args = Array.prototype.slice.call(arguments, 1);
				handler.apply(this, args);
		}
	} else if (isObject(handler)) {
		args = Array.prototype.slice.call(arguments, 1);
		listeners = handler.slice();
		len = listeners.length;
		for (i = 0; i < len; i++) {
			listeners[i].apply(this, args);
		}
	}

	return true;
};

EventEmitter.prototype.addListener = function (type, listener) {
	var m;

	if (!isFunction(listener)) {
		throw TypeError("listener must be a function");
	}

	if (!this._events) {
		this._events = {};
	}

	// To avoid recursion in the case that type === "newListener"! Before
	// adding it to the listeners, first emit "newListener".
	if (this._events.newListener) {
		this.emit("newListener", type, isFunction(listener.listener) ? listener.listener : listener);
	}

	// Optimize the case of one listener. Don't need the extra array object.
	if (!this._events[type]) {
		this._events[type] = listener;
	}
	// If we've already got an array, just append.
	else if (isObject(this._events[type])) {
			this._events[type].push(listener);
		}
		// Adding the second element, need to change to array.
		else {
				this._events[type] = [this._events[type], listener];
			}

	// Check for listener leak
	if (isObject(this._events[type]) && !this._events[type].warned) {
		if (!isUndefined(this._maxListeners)) {
			m = this._maxListeners;
		} else {
			m = EventEmitter.defaultMaxListeners;
		}

		if (m && m > 0 && this._events[type].length > m) {
			this._events[type].warned = true;
			console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.", this._events[type].length);
			// Not supported in IE 10
			if (typeof console.trace === "function") {
				console.trace();
			}
		}
	}

	return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

// Modified to support multiple calls..
EventEmitter.prototype.once = function (type, listener) {
	if (!isFunction(listener)) {
		throw TypeError("listener must be a function");
	}

	var fired = false;

	if (this._events.hasOwnProperty(type) && type.charAt(0) === "_") {
		var count = 1;
		var searchFor = type;

		for (var k in this._events) {
			if (this._events.hasOwnProperty(k) && k.startsWith(searchFor)) {
				count++;
			}
		}
		type = type + count;
	}

	function g() {
		if (type.charAt(0) === "_" && !isNaN(type.substr(type.length - 1))) {
			type = type.substring(0, type.length - 1);
		}
		this.removeListener(type, g);

		if (!fired) {
			fired = true;
			listener.apply(this, arguments);
		}
	}

	g.listener = listener;
	this.on(type, g);

	return this;
};

// Emits a "removeListener" event if the listener was removed..
// Modified to support multiple calls from .once()..
EventEmitter.prototype.removeListener = function (type, listener) {
	var list, position, length, i;

	if (!isFunction(listener)) {
		throw TypeError("listener must be a function");
	}

	if (!this._events || !this._events[type]) {
		return this;
	}

	list = this._events[type];
	length = list.length;
	position = -1;
	if (list === listener || isFunction(list.listener) && list.listener === listener) {
		delete this._events[type];

		if (this._events.hasOwnProperty(type + "2") && type.charAt(0) === "_") {
			var searchFor = type;
			for (var k in this._events) {
				if (this._events.hasOwnProperty(k) && k.startsWith(searchFor)) {
					if (!isNaN(parseInt(k.substr(k.length - 1)))) {
						this._events[type + parseInt(k.substr(k.length - 1) - 1)] = this._events[k];
						delete this._events[k];
					}
				}
			}

			this._events[type] = this._events[type + "1"];
			delete this._events[type + "1"];
		}
		if (this._events.removeListener) {
			this.emit("removeListener", type, listener);
		}
	} else if (isObject(list)) {
		for (i = length; i-- > 0;) {
			if (list[i] === listener || list[i].listener && list[i].listener === listener) {
				position = i;
				break;
			}
		}

		if (position < 0) {
			return this;
		}

		if (list.length === 1) {
			list.length = 0;
			delete this._events[type];
		} else {
			list.splice(position, 1);
		}

		if (this._events.removeListener) {
			this.emit("removeListener", type, listener);
		}
	}

	return this;
};

EventEmitter.prototype.removeAllListeners = function (type) {
	var key, listeners;

	if (!this._events) {
		return this;
	}

	// not listening for removeListener, no need to emit
	if (!this._events.removeListener) {
		if (arguments.length === 0) {
			this._events = {};
		} else if (this._events[type]) {
			delete this._events[type];
		}
		return this;
	}

	// emit removeListener for all listeners on all events
	if (arguments.length === 0) {
		for (key in this._events) {
			if (key === "removeListener") {
				continue;
			}
			this.removeAllListeners(key);
		}
		this.removeAllListeners("removeListener");
		this._events = {};
		return this;
	}

	listeners = this._events[type];

	if (isFunction(listeners)) {
		this.removeListener(type, listeners);
	} else if (listeners) {
		while (listeners.length) {
			this.removeListener(type, listeners[listeners.length - 1]);
		}
	}
	delete this._events[type];

	return this;
};

EventEmitter.prototype.listeners = function (type) {
	var ret;
	if (!this._events || !this._events[type]) {
		ret = [];
	} else if (isFunction(this._events[type])) {
		ret = [this._events[type]];
	} else {
		ret = this._events[type].slice();
	}
	return ret;
};

EventEmitter.prototype.listenerCount = function (type) {
	if (this._events) {
		var evlistener = this._events[type];

		if (isFunction(evlistener)) {
			return 1;
		} else if (evlistener) {
			return evlistener.length;
		}
	}
	return 0;
};

EventEmitter.listenerCount = function (emitter, type) {
	return emitter.listenerCount(type);
};

function isFunction(arg) {
	return typeof arg === "function";
}

function isNumber(arg) {
	return typeof arg === "number";
}

function isObject(arg) {
	return (typeof arg === "undefined" ? "undefined" : _typeof(arg)) === "object" && arg !== null;
}

function isUndefined(arg) {
	return arg === void 0;
}

/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _ = __webpack_require__(279);

var currentLevel = 'info';
var levels = { 'trace': 0, 'debug': 1, 'info': 2, 'warn': 3, 'error': 4, 'fatal': 5 };

// Logger implementation..
function log(level) {
	// Return a console message depending on the logging level..
	return function (message) {
		if (levels[level] >= levels[currentLevel]) {
			console.log('[' + _.formatDate(new Date()) + '] ' + level + ': ' + message);
		}
	};
}

module.exports = {
	// Change the current logging level..
	setLevel: function setLevel(level) {
		currentLevel = level;
	},

	trace: log('trace'),
	debug: log('debug'),
	info: log('info'),
	warn: log('warn'),
	error: log('error'),
	fatal: log('fatal')
};

/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
	Copyright (c) 2013-2015, Fionn Kelleher All rights reserved.

	Redistribution and use in source and binary forms, with or without modification,
	are permitted provided that the following conditions are met:

		Redistributions of source code must retain the above copyright notice,
		this list of conditions and the following disclaimer.

		Redistributions in binary form must reproduce the above copyright notice,
		this list of conditions and the following disclaimer in the documentation and/or other materials
		provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
	OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
	OF SUCH DAMAGE.
*/
var _ = __webpack_require__(279);
var nonspaceRegex = /\S+/g;

function parseComplexTag(tags, tagKey) {
	var splA = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ',';
	var splB = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '/';
	var splC = arguments[4];

	var raw = tags[tagKey];

	if (raw === undefined) {
		return tags;
	}

	var tagIsString = typeof raw === 'string';
	tags[tagKey + '-raw'] = tagIsString ? raw : null;

	if (raw === true) {
		tags[tagKey] = null;
		return tags;
	}

	tags[tagKey] = {};

	if (tagIsString) {
		var spl = raw.split(splA);

		for (var i = 0; i < spl.length; i++) {
			var parts = spl[i].split(splB);
			var val = parts[1];
			if (splC !== undefined && val) {
				val = val.split(splC);
			}
			tags[tagKey][parts[0]] = val || null;
		}
	}
	return tags;
}

module.exports = {
	// Parse Twitch badges..
	badges: function badges(tags) {
		return parseComplexTag(tags, 'badges');
	},

	// Parse Twitch badge-info..
	badgeInfo: function badgeInfo(tags) {
		return parseComplexTag(tags, 'badge-info');
	},

	// Parse Twitch emotes..
	emotes: function emotes(tags) {
		return parseComplexTag(tags, 'emotes', '/', ':', ',');
	},

	// Parse regex emotes..
	emoteRegex: function emoteRegex(msg, code, id, obj) {
		nonspaceRegex.lastIndex = 0;
		var regex = new RegExp('(\\b|^|\\s)' + _.unescapeHtml(code) + '(\\b|$|\\s)');
		var match = void 0;

		// Check if emote code matches using RegExp and push it to the object..
		while ((match = nonspaceRegex.exec(msg)) !== null) {
			if (regex.test(match[0])) {
				obj[id] = obj[id] || [];
				obj[id].push([match.index, nonspaceRegex.lastIndex - 1]);
			}
		}
	},


	// Parse string emotes..
	emoteString: function emoteString(msg, code, id, obj) {
		nonspaceRegex.lastIndex = 0;
		var match = void 0;

		// Check if emote code matches and push it to the object..
		while ((match = nonspaceRegex.exec(msg)) !== null) {
			if (match[0] === _.unescapeHtml(code)) {
				obj[id] = obj[id] || [];
				obj[id].push([match.index, nonspaceRegex.lastIndex - 1]);
			}
		}
	},


	// Transform the emotes object to a string with the following format..
	// emote_id:first_index-last_index,another_first-another_last/another_emote_id:first_index-last_index
	transformEmotes: function transformEmotes(emotes) {
		var transformed = '';

		Object.keys(emotes).forEach(function (id) {
			transformed = transformed + id + ':';
			emotes[id].forEach(function (index) {
				return transformed = transformed + index.join('-') + ',';
			});
			transformed = transformed.slice(0, -1) + '/';
		});
		return transformed.slice(0, -1);
	},
	formTags: function formTags(tags) {
		var result = [];
		for (var key in tags) {
			var value = _.escapeIRC(tags[key]);
			result.push(key + '=' + value);
		}
		return '@' + result.join(';');
	},


	// Parse Twitch messages..
	msg: function msg(data) {
		var message = {
			raw: data,
			tags: {},
			prefix: null,
			command: null,
			params: []
		};

		// Position and nextspace are used by the parser as a reference..
		var position = 0;
		var nextspace = 0;

		// The first thing we check for is IRCv3.2 message tags.
		// http://ircv3.atheme.org/specification/message-tags-3.2
		if (data.charCodeAt(0) === 64) {
			nextspace = data.indexOf(' ');

			// Malformed IRC message..
			if (nextspace === -1) {
				return null;
			}

			// Tags are split by a semi colon..
			var rawTags = data.slice(1, nextspace).split(';');

			for (var i = 0; i < rawTags.length; i++) {
				// Tags delimited by an equals sign are key=value tags.
				// If there's no equals, we assign the tag a value of true.
				var tag = rawTags[i];
				var pair = tag.split('=');
				message.tags[pair[0]] = tag.substring(tag.indexOf('=') + 1) || true;
			}

			position = nextspace + 1;
		}

		// Skip any trailing whitespace..
		while (data.charCodeAt(position) === 32) {
			position++;
		}

		// Extract the message's prefix if present. Prefixes are prepended with a colon..
		if (data.charCodeAt(position) === 58) {
			nextspace = data.indexOf(' ', position);

			// If there's nothing after the prefix, deem this message to be malformed.
			if (nextspace === -1) {
				return null;
			}

			message.prefix = data.slice(position + 1, nextspace);
			position = nextspace + 1;

			// Skip any trailing whitespace..
			while (data.charCodeAt(position) === 32) {
				position++;
			}
		}

		nextspace = data.indexOf(' ', position);

		// If there's no more whitespace left, extract everything from the
		// current position to the end of the string as the command..
		if (nextspace === -1) {
			if (data.length > position) {
				message.command = data.slice(position);
				return message;
			}
			return null;
		}

		// Else, the command is the current position up to the next space. After
		// that, we expect some parameters.
		message.command = data.slice(position, nextspace);

		position = nextspace + 1;

		// Skip any trailing whitespace..
		while (data.charCodeAt(position) === 32) {
			position++;
		}

		while (position < data.length) {
			nextspace = data.indexOf(' ', position);

			// If the character is a colon, we've got a trailing parameter.
			// At this point, there are no extra params, so we push everything
			// from after the colon to the end of the string, to the params array
			// and break out of the loop.
			if (data.charCodeAt(position) === 58) {
				message.params.push(data.slice(position + 1));
				break;
			}

			// If we still have some whitespace...
			if (nextspace !== -1) {
				// Push whatever's between the current position and the next
				// space to the params array.
				message.params.push(data.slice(position, nextspace));
				position = nextspace + 1;

				// Skip any trailing whitespace and continue looping.
				while (data.charCodeAt(position) === 32) {
					position++;
				}

				continue;
			}

			// If we don't have any more whitespace and the param isn't trailing,
			// push everything remaining to the params array.
			if (nextspace === -1) {
				message.params.push(data.slice(position));
				break;
			}
		}
		return message;
	}
};

/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Initialize the queue with a specific delay..
var Queue = function () {
	function Queue(defaultDelay) {
		_classCallCheck(this, Queue);

		this.queue = [];
		this.index = 0;
		this.defaultDelay = defaultDelay === undefined ? 3000 : defaultDelay;
	}
	// Add a new function to the queue..


	_createClass(Queue, [{
		key: "add",
		value: function add(fn, delay) {
			this.queue.push({ fn: fn, delay: delay });
		}
		// Go to the next in queue..

	}, {
		key: "next",
		value: function next() {
			var _this = this;

			var i = this.index++;
			var at = this.queue[i];
			if (!at) {
				return;
			}
			var next = this.queue[this.index];
			at.fn();
			if (next) {
				var delay = next.delay === undefined ? this.defaultDelay : next.delay;
				setTimeout(function () {
					return _this.next();
				}, delay);
			}
		}
	}]);

	return Queue;
}();

module.exports = Queue;

/***/ })
/******/ ]);